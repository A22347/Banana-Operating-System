
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 84 02 00       	call   c0028478 <_init>
c0000025:	c3                   	ret    
c0000026:	bb cc 90 02 c0       	mov    ebx,0xc00290cc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d8 90 02 c0    	cmp    ebx,0xc00290d8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 d0 02 c0       	mov    eax,0xc002d038
c0000049:	3d 38 d0 02 c0       	cmp    eax,0xc002d038
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 d0 02 c0       	push   0xc002d038
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 d0 02 c0       	mov    eax,0xc002d038
c0000075:	2d 38 d0 02 c0       	sub    eax,0xc002d038
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 d0 02 c0       	push   0xc002d038
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d668,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e0 90 02 c0       	mov    ebx,0xc00290e0
c00000bb:	81 eb dc 90 02 c0    	sub    ebx,0xc00290dc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be dc 90 02 c0       	mov    esi,0xc00290dc
c00000ca:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d6 02 c0       	mov    ds:0xc002d66c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d6 02 c0       	mov    eax,ds:0xc002d66c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 d0 02 c0       	push   0xc002d038
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d668,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d6 02 c0       	push   0xc002d670
c000012c:	68 38 d0 02 c0       	push   0xc002d038
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 b3 cf 01 00       	call   c001d356 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 4a 21 01 00       	call   c0012505 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 91 cf 01 00       	call   c001d356 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 39 d4 01 00       	call   c001d81d <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 4f da 01 00       	call   c001de3c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 da 02 c0 	lgdtd  ds:0xc002dab0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 b3 3e 01 00       	call   c0014495 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 88 d6 02 c0       	mov    ds:0xc002d688,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 88 d6 02 c0    	mov    DWORD PTR ds:0xc002d688,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 88 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d688
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f00],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f00],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f00],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d a0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6a0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 a4 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd295c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 a4 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd295c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d dc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6dc
c0000e38:	c7 42 0c d4 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d6d4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 a0 d6 02 c0 02 	test   BYTE PTR ds:0xc002d6a0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d a0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6a0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 a4 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd295c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 a4 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd295c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 d4 d6 02 c0 	lea    edx,[eax*8-0x3ffd292c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d e0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e0
c00011ba:	81 fb d4 d6 02 c0    	cmp    ebx,0xc002d6d4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d d4 d6 02 c0       	cmp    eax,0xc002d6d4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d d0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 dc d6 02 c0       	mov    ds:0xc002d6dc,eax
c00011f6:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c00011fb:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 d4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6d4
c0001209:	c7 40 0c d4 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d6d4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 d4 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d6d4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 98 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2968]
c000125a:	8b 14 95 a0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2960]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 a0 d6 02 c0 	lea    ecx,[edx*4-0x3ffd2960]
c0001275:	8b 14 95 a0 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2960]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd d4 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd262c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 d4 d6 02 c0 	lea    eax,[eax*8-0x3ffd292c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,ecx
c000132f:	89 0d e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,ecx
c0001335:	c7 41 08 d4 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d6d4
c000133c:	c7 41 0c d4 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d6d4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd cc d6 02 c0 	lea    edx,[ecx*8-0x3ffd2934]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d d4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd262c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d d4 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd262c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 cc d6 02 c0 	lea    edx,[eax*4-0x3ffd2934]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d d4 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd262c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d dc d6 02 c0    	mov    DWORD PTR ds:0xc002d6dc,edi
c0001402:	89 3d e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,edi
c0001408:	c7 47 08 d4 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d6d4
c000140f:	c7 47 0c d4 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d6d4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba a0 d6 02 c0       	mov    edx,0xc002d6a0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d f4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9f4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 f4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9f4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d f4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 cc d6 02 c0    	cmp    DWORD PTR ds:0xc002d6cc,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 fc d9 02 c0    	push   DWORD PTR ds:0xc002d9fc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d a0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 fc d9 02 c0       	mov    eax,ds:0xc002d9fc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d cc d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6cc,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 a4 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd295c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 d4 d6 02 c0       	mov    eax,0xc002d6d4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d cc d9 02 c0       	cmp    eax,0xc002d9cc
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 08 da 02 c0       	mov    eax,ds:0xc002da08
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 f0 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9f0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 04 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da04
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 14 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da14
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6dfc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d e4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d e8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9e8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ec d9 02 c0    	mov    DWORD PTR ds:0xc002d9ec,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 f4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9f4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceea0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 7a ec 01 00       	jmp    c002086c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceea0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 ab ec 01 00       	jmp    c00208b3 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceea0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 d3 ec 01 00       	jmp    c00208fa <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ca 48 02 00       	call   c00267d4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ce0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ce0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 92 02 c0       	mov    edx,0xc0029220
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 74 bf 02 c0       	mov    edx,0xc002bf74
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 93 02 c0       	mov    edx,0xc0029330
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 40 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd25c0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 20 da 02 c0    	mov    ax,ds:0xc002da20
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 20 da 02 c0    	mov    ds:0xc002da20,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 c7 36 02 00       	call   c00267d4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 93 02 c0       	mov    eax,0xc0029352
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d60]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 93 02 c0       	mov    eax,0xc002935b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ce0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 92 20 02 00       	call   c00267d4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 93 02 c0       	mov    edx,0xc0029330
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 92 02 c0       	mov    edx,0xc0029220
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 40 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd25c0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 40 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd25c0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 59 0a 02 00       	call   c00267d4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 3f 0a 02 00       	call   c00267d4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 92 02 c0       	mov    eax,0xc0029277
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 92 02 c0       	mov    eax,0xc0029270
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 40 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25c0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 92 02 c0       	mov    esi,0xc0029260
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 82 f1 01 00       	call   c00267d4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 93 02 c0       	mov    edx,0xc0029340
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 92 02 c0       	mov    edx,0xc0029250
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 93 02 c0       	mov    edx,0xc0029362
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 93 02 c0       	mov    edx,0xc002936e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 93 02 c0       	mov    edx,0xc0029382
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc00296a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc00296a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 94 02 c0       	mov    eax,0xc00294a0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c60]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 d6 fa 01 00       	call   c00282a7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 99 fa 01 00       	call   c0028289 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 6d fa 01 00       	call   c00282a7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 20 f1 01 00       	call   c00279ac <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 a2 fb 01 00       	call   c0028440 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 e7 f9 01 00       	call   c00282a7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 29 f9 01 00       	call   c00282a7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 f6 f8 01 00       	call   c0028289 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 e3 f7 01 00       	call   c00282a7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 ab f7 01 00       	call   c0028289 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 b7 f5 01 00       	call   c00282a7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 7c f5 01 00       	call   c0028289 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6400]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 8c f2 01 00       	call   c002803b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 0a ec 01 00       	call   c00279d8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 c6 f4 01 00       	call   c00282ab <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 b4 f5 01 00       	call   c00283cf <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 9e eb 01 00       	call   c00279d8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 49 f4 01 00       	call   c00282a5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 2a f4 01 00       	call   c00282a9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 c0 f5 01 00       	call   c0028460 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 6a f1 01 00       	call   c002803b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 e8 ea 01 00       	call   c00279d8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 a4 f3 01 00       	call   c00282ab <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 92 f4 01 00       	call   c00283cf <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 7c ea 01 00       	call   c00279d8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 27 f3 01 00       	call   c00282a5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 07 f3 01 00       	call   c00282a9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 9c f4 01 00       	call   c0028460 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 42 f2 01 00       	call   c00282a7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 00 f2 01 00       	call   c0028289 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 e8 f1 01 00       	call   c00282a7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 5a ef 01 00       	call   c002803b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 5c e2 01 00       	call   c002735b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 bf e8 01 00       	call   c00279d8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 11 ef 01 00       	call   c002803b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 17 e2 01 00       	call   c002735b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 e6 ee 01 00       	call   c002803b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 36 f1 01 00       	call   c00282a5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 13 e8 01 00       	call   c00279ac <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 95 f2 01 00       	call   c0028440 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 bc f0 01 00       	call   c0028289 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 b7 e7 01 00       	call   c00279ac <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 35 ee 01 00       	call   c002803b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 b8 e7 01 00       	call   c00279d8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 0a ee 01 00       	call   c002803b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 71 ea 01 00       	call   c0027cbc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 f0 e0 01 00       	call   c002735b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 50 da 01 00       	call   c0026cf0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 27 f1 01 00       	call   c00283cf <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 10 e7 01 00       	call   c00279d8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 f7 f0 01 00       	call   c00283cf <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 69 e0 01 00       	call   c002735b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 a2 ef 01 00       	call   c00282ab <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 8a e9 01 00       	call   c0027cbc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 10 e0 01 00       	call   c002735b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 fe f0 01 00       	call   c0028460 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 d0 ec 01 00       	call   c002803b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 27 e6 01 00       	call   c00279ac <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 06 ef 01 00       	call   c00282a7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 9f df 01 00       	call   c002735b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 cb e5 01 00       	call   c00279ac <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 6d f0 01 00       	call   c0028460 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 1e ec 01 00       	call   c002803b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 9b e5 01 00       	call   c00279d8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 ee eb 01 00       	call   c002803b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 f4 de 01 00       	call   c002735b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 c4 eb 01 00       	call   c002803b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 16 ee 01 00       	call   c00282a7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 ed e4 01 00       	call   c00279ac <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 6f ef 01 00       	call   c0028440 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 96 ed 01 00       	call   c0028289 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 90 e4 01 00       	call   c00279ac <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 0e eb 01 00       	call   c002803b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 91 e4 01 00       	call   c00279d8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 e3 ea 01 00       	call   c002803b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 4a e7 01 00       	call   c0027cbc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 c9 dd 01 00       	call   c002735b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 19 d7 01 00       	call   c0026cf0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 f0 ed 01 00       	call   c00283cf <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 d9 e3 01 00       	call   c00279d8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 c0 ed 01 00       	call   c00283cf <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 32 dd 01 00       	call   c002735b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 6b ec 01 00       	call   c00282ab <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 52 e6 01 00       	call   c0027cbc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 d1 dc 01 00       	call   c002735b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 bf ed 01 00       	call   c0028460 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 91 e9 01 00       	call   c002803b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 e8 e2 01 00       	call   c00279ac <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 c7 eb 01 00       	call   c00282a7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 60 dc 01 00       	call   c002735b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 8c e2 01 00       	call   c00279ac <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 01 e9 01 00       	call   c002803b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 07 dc 01 00       	call   c002735b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 9c 02 c0       	mov    eax,0xc0029c60
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 9c 02 c0       	mov    eax,0xc0029c74
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 7c e7 01 00       	call   c002803b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 fa e0 01 00       	call   c00279d8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 8c d3 01 00       	call   c0026cf0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 63 ea 01 00       	call   c00283cf <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 4c e0 01 00       	call   c00279d8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 2f ea 01 00       	call   c00283cf <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 a1 d9 01 00       	call   c002735b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 01 ea 01 00       	call   c00283cf <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 f0 df 01 00       	call   c00279d8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 59 d9 01 00       	call   c002735b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 7a d2 01 00       	call   c0026cf0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 51 e9 01 00       	call   c00283cf <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 3a df 01 00       	call   c00279d8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 1d e9 01 00       	call   c00283cf <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 8f d8 01 00       	call   c002735b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ef e8 01 00       	call   c00283cf <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 de de 01 00       	call   c00279d8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 47 d8 01 00       	call   c002735b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 25 d8 01 00       	call   c002735b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 01 d1 01 00       	call   c0026cf0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 d8 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 c1 dd 01 00       	call   c00279d8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 a4 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 16 d7 01 00       	call   c002735b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 76 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 5f dd 01 00       	call   c00279d8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 c8 d6 01 00       	call   c002735b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 28 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 11 dd 01 00       	call   c00279d8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 7a d6 01 00       	call   c002735b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 8f cf 01 00       	call   c0026cf0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 66 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 4f dc 01 00       	call   c00279d8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 36 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 a8 d5 01 00       	call   c002735b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 08 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 f1 db 01 00       	call   c00279d8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 5a d5 01 00       	call   c002735b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ba e5 01 00       	call   c00283cf <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 a3 db 01 00       	call   c00279d8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 0c d5 01 00       	call   c002735b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 e0 d4 01 00       	call   c002735b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 3d db 01 00       	call   c00279d8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 f9 e3 01 00       	call   c00282ab <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 88 d4 01 00       	call   c002735b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 e5 da 01 00       	call   c00279d8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 a1 e3 01 00       	call   c00282ab <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 1b cd 01 00       	call   c0026cf0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 f2 e3 01 00       	call   c00283cf <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 db d9 01 00       	call   c00279d8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 be e3 01 00       	call   c00283cf <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 30 d3 01 00       	call   c002735b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 90 e3 01 00       	call   c00283cf <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 79 d9 01 00       	call   c00279d8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 e2 d2 01 00       	call   c002735b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 42 e3 01 00       	call   c00283cf <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 2b d9 01 00       	call   c00279d8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 94 d2 01 00       	call   c002735b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 f4 e2 01 00       	call   c00283cf <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 dd d8 01 00       	call   c00279d8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 46 d2 01 00       	call   c002735b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 a6 e2 01 00       	call   c00283cf <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 8f d8 01 00       	call   c00279d8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 f8 d1 01 00       	call   c002735b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 fa ca 01 00       	call   c0026cf0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 d1 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ba d7 01 00       	call   c00279d8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 a1 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 13 d1 01 00       	call   c002735b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 73 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 5c d7 01 00       	call   c00279d8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 c5 d0 01 00       	call   c002735b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 25 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 0e d7 01 00       	call   c00279d8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 77 d0 01 00       	call   c002735b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 d7 e0 01 00       	call   c00283cf <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 c0 d6 01 00       	call   c00279d8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 29 d0 01 00       	call   c002735b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 89 e0 01 00       	call   c00283cf <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 72 d6 01 00       	call   c00279d8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 db cf 01 00       	call   c002735b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 af cf 01 00       	call   c002735b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 0c d6 01 00       	call   c00279d8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 c8 de 01 00       	call   c00282ab <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 57 cf 01 00       	call   c002735b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 b4 d5 01 00       	call   c00279d8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 70 de 01 00       	call   c00282ab <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 fe ce 01 00       	call   c002735b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 5b d5 01 00       	call   c00279d8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 17 de 01 00       	call   c00282ab <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 a5 ce 01 00       	call   c002735b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 02 d5 01 00       	call   c00279d8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 be dd 01 00       	call   c00282ab <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 1c c7 01 00       	call   c0026cf0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 f3 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 dc d3 01 00       	call   c00279d8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 bf dd 01 00       	call   c00283cf <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 31 cd 01 00       	call   c002735b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 91 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 7a d3 01 00       	call   c00279d8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 e3 cc 01 00       	call   c002735b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 43 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 2c d3 01 00       	call   c00279d8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 95 cc 01 00       	call   c002735b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 f5 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 de d2 01 00       	call   c00279d8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 47 cc 01 00       	call   c002735b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 a7 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 90 d2 01 00       	call   c00279d8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 f9 cb 01 00       	call   c002735b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 59 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 42 d2 01 00       	call   c00279d8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 a8 cb 01 00       	call   c002735b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 08 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 f1 d1 01 00       	call   c00279d8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 5a cb 01 00       	call   c002735b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 54 c4 01 00       	call   c0026cf0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 2b db 01 00       	call   c00283cf <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 14 d1 01 00       	call   c00279d8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 f4 da 01 00       	call   c00283cf <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 66 ca 01 00       	call   c002735b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 c6 da 01 00       	call   c00283cf <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 af d0 01 00       	call   c00279d8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 18 ca 01 00       	call   c002735b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 78 da 01 00       	call   c00283cf <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 61 d0 01 00       	call   c00279d8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ca c9 01 00       	call   c002735b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 2a da 01 00       	call   c00283cf <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 13 d0 01 00       	call   c00279d8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 7c c9 01 00       	call   c002735b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 dc d9 01 00       	call   c00283cf <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 c5 cf 01 00       	call   c00279d8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 2e c9 01 00       	call   c002735b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 8e d9 01 00       	call   c00283cf <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 77 cf 01 00       	call   c00279d8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 dd c8 01 00       	call   c002735b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 3d d9 01 00       	call   c00283cf <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 26 cf 01 00       	call   c00279d8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 95 c8 01 00       	call   c002735b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 6e c8 01 00       	call   c002735b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 cc ce 01 00       	call   c00279d8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 88 d7 01 00       	call   c00282ab <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 17 c8 01 00       	call   c002735b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 75 ce 01 00       	call   c00279d8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 31 d7 01 00       	call   c00282ab <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 bf c7 01 00       	call   c002735b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 1d ce 01 00       	call   c00279d8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 d9 d6 01 00       	call   c00282ab <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 67 c7 01 00       	call   c002735b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 c5 cd 01 00       	call   c00279d8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 81 d6 01 00       	call   c00282ab <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 0f c7 01 00       	call   c002735b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 6d cd 01 00       	call   c00279d8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 29 d6 01 00       	call   c00282ab <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 bd c6 01 00       	call   c002735b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 1b cd 01 00       	call   c00279d8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 d7 d5 01 00       	call   c00282ab <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 eb be 01 00       	call   c0026cf0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 c2 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 ab cb 01 00       	call   c00279d8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 92 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 04 c5 01 00       	call   c002735b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd635c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 38 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 21 cb 01 00       	call   c00279d8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 8c c4 01 00       	call   c002735b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 d9 d4 01 00       	call   c00283cf <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 c2 ca 01 00       	call   c00279d8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 2d c4 01 00       	call   c002735b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 7a d4 01 00       	call   c00283cf <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 63 ca 01 00       	call   c00279d8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ce c3 01 00       	call   c002735b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 1b d4 01 00       	call   c00283cf <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 04 ca 01 00       	call   c00279d8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 6f c3 01 00       	call   c002735b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 bc d3 01 00       	call   c00283cf <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 a5 c9 01 00       	call   c00279d8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 10 c3 01 00       	call   c002735b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 5d d3 01 00       	call   c00283cf <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 46 c9 01 00       	call   c00279d8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 b1 c2 01 00       	call   c002735b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 fe d2 01 00       	call   c00283cf <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 e7 c8 01 00       	call   c00279d8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 52 c2 01 00       	call   c002735b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 9f d2 01 00       	call   c00283cf <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 88 c8 01 00       	call   c00279d8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 f3 c1 01 00       	call   c002735b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 fd ba 01 00       	call   c0026cf0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 d4 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 bd c7 01 00       	call   c00279d8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 a4 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 16 c1 01 00       	call   c002735b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6340]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 49 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 32 c7 01 00       	call   c00279d8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 9d c0 01 00       	call   c002735b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 e9 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 d2 c6 01 00       	call   c00279d8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 3d c0 01 00       	call   c002735b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 89 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 72 c6 01 00       	call   c00279d8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 dd bf 01 00       	call   c002735b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 29 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 12 c6 01 00       	call   c00279d8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 7d bf 01 00       	call   c002735b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 c9 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 b2 c5 01 00       	call   c00279d8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 1d bf 01 00       	call   c002735b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 69 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 52 c5 01 00       	call   c00279d8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 bd be 01 00       	call   c002735b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 09 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 f2 c4 01 00       	call   c00279d8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 5d be 01 00       	call   c002735b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 a9 ce 01 00       	call   c00283cf <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 92 c4 01 00       	call   c00279d8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 fd bd 01 00       	call   c002735b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6324]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 a2 bd 01 00       	call   c002735b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 ff c3 01 00       	call   c00279d8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 bb cc 01 00       	call   c00282ab <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 45 bd 01 00       	call   c002735b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 a2 c3 01 00       	call   c00279d8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 5e cc 01 00       	call   c00282ab <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 e8 bc 01 00       	call   c002735b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 45 c3 01 00       	call   c00279d8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 01 cc 01 00       	call   c00282ab <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 8b bc 01 00       	call   c002735b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 e8 c2 01 00       	call   c00279d8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 a4 cb 01 00       	call   c00282ab <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 2e bc 01 00       	call   c002735b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 8b c2 01 00       	call   c00279d8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 47 cb 01 00       	call   c00282ab <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 d1 bb 01 00       	call   c002735b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 2e c2 01 00       	call   c00279d8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ea ca 01 00       	call   c00282ab <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 74 bb 01 00       	call   c002735b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 d1 c1 01 00       	call   c00279d8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 8d ca 01 00       	call   c00282ab <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 17 bb 01 00       	call   c002735b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 74 c1 01 00       	call   c00279d8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 30 ca 01 00       	call   c00282ab <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 2c c1 01 00       	call   c00279d8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 a4 cb 01 00       	jmp    c0028460 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 0e c8 01 00       	call   c00282a7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 cc c7 01 00       	call   c0028289 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 63 c5 01 00       	call   c002803b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 64 b8 01 00       	call   c002735b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 33 c5 01 00       	call   c002803b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 9a c1 01 00       	call   c0027cbc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 39 c7 01 00       	call   c0028289 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 3c c7 01 00       	call   c00282a7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 0f c7 01 00       	call   c00282a7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 08 c1 01 00       	call   c0027cbc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 92 c8 01 00       	call   c0028460 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 6d c8 01 00       	call   c0028460 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 3f c4 01 00       	call   c002803b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 96 bd 01 00       	call   c00279ac <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 75 c6 01 00       	call   c00282a7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 0e b7 01 00       	call   c002735b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 32 bd 01 00       	call   c00279ac <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 d4 c7 01 00       	call   c0028460 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 0c c0 01 00       	call   c0027cbc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 89 b6 01 00       	call   c002735b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 b5 c2 01 00       	call   c002803b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 b5 b5 01 00       	call   c002735b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 95 b5 01 00       	call   c002735b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 65 c2 01 00       	call   c002803b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 b5 c4 01 00       	call   c00282a5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 94 bb 01 00       	call   c00279ac <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 16 c6 01 00       	call   c0028440 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 3d c4 01 00       	call   c0028289 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 3b bb 01 00       	call   c00279ac <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 b9 c1 01 00       	call   c002803b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 3c bb 01 00       	call   c00279d8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 8e c1 01 00       	call   c002803b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 f5 bd 01 00       	call   c0027cbc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 74 b4 01 00       	call   c002735b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 3e c1 01 00       	call   c002803b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 8a c3 01 00       	call   c00282a7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 7f ba 01 00       	call   c00279d8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 51 ba 01 00       	call   c00279d8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 8a c0 01 00       	call   c002803b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 ee bc 01 00       	call   c0027cbc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 b6 bc 01 00       	call   c0027cbc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 35 b3 01 00       	call   c002735b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 22 c4 01 00       	call   c0028460 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 f4 bf 01 00       	call   c002803b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 4b b9 01 00       	call   c00279ac <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 2a c2 01 00       	call   c00282a7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 c2 b2 01 00       	call   c002735b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 e6 b8 01 00       	call   c00279ac <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 88 c3 01 00       	call   c0028460 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 49 c1 01 00       	call   c00282a7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 07 c1 01 00       	call   c0028289 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 9e be 01 00       	call   c002803b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 9f b1 01 00       	call   c002735b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 6e be 01 00       	call   c002803b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 d5 ba 01 00       	call   c0027cbc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 74 c0 01 00       	call   c0028289 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 77 c0 01 00       	call   c00282a7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 4a c0 01 00       	call   c00282a7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 43 ba 01 00       	call   c0027cbc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 cd c1 01 00       	call   c0028460 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 a8 c1 01 00       	call   c0028460 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 7a bd 01 00       	call   c002803b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 d1 b6 01 00       	call   c00279ac <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 b0 bf 01 00       	call   c00282a7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 49 b0 01 00       	call   c002735b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 6d b6 01 00       	call   c00279ac <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 0f c1 01 00       	call   c0028460 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 47 b9 01 00       	call   c0027cbc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 c4 af 01 00       	call   c002735b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ef bb 01 00       	call   c002803b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ef ae 01 00       	call   c002735b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 cf ae 01 00       	call   c002735b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 9f bb 01 00       	call   c002803b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ef bd 01 00       	call   c00282a5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 cd b4 01 00       	call   c00279ac <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 4f bf 01 00       	call   c0028440 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 76 bd 01 00       	call   c0028289 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 73 b4 01 00       	call   c00279ac <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 f1 ba 01 00       	call   c002803b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 74 b4 01 00       	call   c00279d8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 c6 ba 01 00       	call   c002803b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 2d b7 01 00       	call   c0027cbc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ac ad 01 00       	call   c002735b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 76 ba 01 00       	call   c002803b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 c2 bc 01 00       	call   c00282a7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 b7 b3 01 00       	call   c00279d8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 89 b3 01 00       	call   c00279d8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 c0 b9 01 00       	call   c002803b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 24 b6 01 00       	call   c0027cbc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 f1 b5 01 00       	call   c0027cbc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 70 ac 01 00       	call   c002735b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 5d bd 01 00       	call   c0028460 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 2f b9 01 00       	call   c002803b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 86 b2 01 00       	call   c00279ac <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 65 bb 01 00       	call   c00282a7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 fd ab 01 00       	call   c002735b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 21 b2 01 00       	call   c00279ac <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 c3 bc 01 00       	call   c0028460 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 84 ba 01 00       	call   c00282a7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 42 ba 01 00       	call   c0028289 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 d9 b7 01 00       	call   c002803b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 da aa 01 00       	call   c002735b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 a9 b7 01 00       	call   c002803b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 10 b4 01 00       	call   c0027cbc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 af b9 01 00       	call   c0028289 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 b2 b9 01 00       	call   c00282a7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 85 b9 01 00       	call   c00282a7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 7e b3 01 00       	call   c0027cbc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 08 bb 01 00       	call   c0028460 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 e3 ba 01 00       	call   c0028460 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 b5 b6 01 00       	call   c002803b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 0c b0 01 00       	call   c00279ac <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 eb b8 01 00       	call   c00282a7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 84 a9 01 00       	call   c002735b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 a8 af 01 00       	call   c00279ac <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 4a ba 01 00       	call   c0028460 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 82 b2 01 00       	call   c0027cbc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 ff a8 01 00       	call   c002735b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 2a b5 01 00       	call   c002803b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 2a a8 01 00       	call   c002735b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 0a a8 01 00       	call   c002735b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 da b4 01 00       	call   c002803b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 2a b7 01 00       	call   c00282a5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 08 ae 01 00       	call   c00279ac <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 8a b8 01 00       	call   c0028440 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 b1 b6 01 00       	call   c0028289 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ae ad 01 00       	call   c00279ac <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 2c b4 01 00       	call   c002803b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 af ad 01 00       	call   c00279d8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 01 b4 01 00       	call   c002803b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 68 b0 01 00       	call   c0027cbc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 e7 a6 01 00       	call   c002735b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 b1 b3 01 00       	call   c002803b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 fd b5 01 00       	call   c00282a7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 f2 ac 01 00       	call   c00279d8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 c4 ac 01 00       	call   c00279d8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 fb b2 01 00       	call   c002803b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 5f af 01 00       	call   c0027cbc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 2c af 01 00       	call   c0027cbc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 ab a5 01 00       	call   c002735b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 98 b6 01 00       	call   c0028460 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 6a b2 01 00       	call   c002803b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 c1 ab 01 00       	call   c00279ac <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 a0 b4 01 00       	call   c00282a7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 38 a5 01 00       	call   c002735b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 5c ab 01 00       	call   c00279ac <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 fe b5 01 00       	call   c0028460 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 bf b3 01 00       	call   c00282a7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 7d b3 01 00       	call   c0028289 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 14 b1 01 00       	call   c002803b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 15 a4 01 00       	call   c002735b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 e4 b0 01 00       	call   c002803b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 4b ad 01 00       	call   c0027cbc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ea b2 01 00       	call   c0028289 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 ed b2 01 00       	call   c00282a7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 c0 b2 01 00       	call   c00282a7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 b9 ac 01 00       	call   c0027cbc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 43 b4 01 00       	call   c0028460 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 1e b4 01 00       	call   c0028460 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 f0 af 01 00       	call   c002803b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 47 a9 01 00       	call   c00279ac <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 26 b2 01 00       	call   c00282a7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 bf a2 01 00       	call   c002735b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 e3 a8 01 00       	call   c00279ac <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 85 b3 01 00       	call   c0028460 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 bd ab 01 00       	call   c0027cbc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 3a a2 01 00       	call   c002735b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 65 ae 01 00       	call   c002803b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 65 a1 01 00       	call   c002735b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 45 a1 01 00       	call   c002735b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 15 ae 01 00       	call   c002803b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 65 b0 01 00       	call   c00282a5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 43 a7 01 00       	call   c00279ac <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 c5 b1 01 00       	call   c0028440 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 ec af 01 00       	call   c0028289 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 e9 a6 01 00       	call   c00279ac <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 67 ad 01 00       	call   c002803b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ea a6 01 00       	call   c00279d8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 3c ad 01 00       	call   c002803b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 a3 a9 01 00       	call   c0027cbc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 22 a0 01 00       	call   c002735b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 ec ac 01 00       	call   c002803b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 38 af 01 00       	call   c00282a7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 2d a6 01 00       	call   c00279d8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 ff a5 01 00       	call   c00279d8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 36 ac 01 00       	call   c002803b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 9a a8 01 00       	call   c0027cbc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 67 a8 01 00       	call   c0027cbc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 e6 9e 01 00       	call   c002735b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 d3 af 01 00       	call   c0028460 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 a5 ab 01 00       	call   c002803b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 fc a4 01 00       	call   c00279ac <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 db ad 01 00       	call   c00282a7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 73 9e 01 00       	call   c002735b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 97 a4 01 00       	call   c00279ac <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 39 af 01 00       	call   c0028460 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 f7 ac 01 00       	call   c00282a7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 b5 ac 01 00       	call   c0028289 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 4c aa 01 00       	call   c002803b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 4d 9d 01 00       	call   c002735b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 1c aa 01 00       	call   c002803b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 83 a6 01 00       	call   c0027cbc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 22 ac 01 00       	call   c0028289 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 25 ac 01 00       	call   c00282a7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 f8 ab 01 00       	call   c00282a7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 f1 a5 01 00       	call   c0027cbc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 7b ad 01 00       	call   c0028460 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 52 ad 01 00       	call   c0028460 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 24 a9 01 00       	call   c002803b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 7b a2 01 00       	call   c00279ac <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 5a ab 01 00       	call   c00282a7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 f3 9b 01 00       	call   c002735b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 1b a2 01 00       	call   c00279ac <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 bd ac 01 00       	call   c0028460 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 f6 a4 01 00       	call   c0027cbc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 73 9b 01 00       	call   c002735b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 9f a7 01 00       	call   c002803b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 9f 9a 01 00       	call   c002735b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 7f 9a 01 00       	call   c002735b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 4f a7 01 00       	call   c002803b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 83 a9 01 00       	call   c0028289 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 7a a0 01 00       	call   c00279ac <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 fc aa 01 00       	call   c0028440 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 23 a9 01 00       	call   c0028289 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 1d a0 01 00       	call   c00279ac <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 9b a6 01 00       	call   c002803b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 1e a0 01 00       	call   c00279d8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 70 a6 01 00       	call   c002803b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 d7 a2 01 00       	call   c0027cbc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 56 99 01 00       	call   c002735b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 20 a6 01 00       	call   c002803b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 6c a8 01 00       	call   c00282a7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 61 9f 01 00       	call   c00279d8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 33 9f 01 00       	call   c00279d8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 77 a5 01 00       	call   c002803b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 de a1 01 00       	call   c0027cbc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 c7 9e 01 00       	call   c00279d8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 83 a7 01 00       	call   c00282ab <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 76 a1 01 00       	call   c0027cbc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 f5 97 01 00       	call   c002735b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 e2 a8 01 00       	call   c0028460 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 b4 a4 01 00       	call   c002803b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 0b 9e 01 00       	call   c00279ac <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ea a6 01 00       	call   c00282a7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 82 97 01 00       	call   c002735b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 aa 9d 01 00       	call   c00279ac <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 4c a8 01 00       	call   c0028460 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6308]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 ff a4 01 00       	call   c00282a7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 bd a4 01 00       	call   c0028289 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 a9 a4 01 00       	call   c00282a7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 1b a2 01 00       	call   c002803b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 99 9b 01 00       	call   c00279d8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 eb a1 01 00       	call   c002803b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 f1 94 01 00       	call   c002735b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 c0 a1 01 00       	call   c002803b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 10 a4 01 00       	call   c00282a5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 f1 9a 01 00       	call   c00279ac <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 73 a5 01 00       	call   c0028440 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 9a a3 01 00       	call   c0028289 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 99 9a 01 00       	call   c00279ac <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 17 a1 01 00       	call   c002803b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 9a 9a 01 00       	call   c00279d8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 ec a0 01 00       	call   c002803b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 53 9d 01 00       	call   c0027cbc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 d2 93 01 00       	call   c002735b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 fa 9c 01 00       	call   c0027cbc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 80 93 01 00       	call   c002735b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 6e a4 01 00       	call   c0028460 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 40 a0 01 00       	call   c002803b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 97 99 01 00       	call   c00279ac <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 76 a2 01 00       	call   c00282a7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 0f 93 01 00       	call   c002735b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 3b 99 01 00       	call   c00279ac <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 dd a3 01 00       	call   c0028460 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 8a 9f 01 00       	call   c002803b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 07 99 01 00       	call   c00279d8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 58 9f 01 00       	call   c002803b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 5e 92 01 00       	call   c002735b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 2e 9f 01 00       	call   c002803b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 82 a1 01 00       	call   c00282a9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 5b 98 01 00       	call   c00279ac <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 dd a2 01 00       	call   c0028440 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 04 a1 01 00       	call   c0028289 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 02 98 01 00       	call   c00279ac <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 80 9e 01 00       	call   c002803b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 03 98 01 00       	call   c00279d8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 55 9e 01 00       	call   c002803b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 bc 9a 01 00       	call   c0027cbc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 3b 91 01 00       	call   c002735b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 57 9a 01 00       	call   c0027cbc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 d6 90 01 00       	call   c002735b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 c4 a1 01 00       	call   c0028460 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 96 9d 01 00       	call   c002803b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 ed 96 01 00       	call   c00279ac <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 cc 9f 01 00       	call   c00282a7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 65 90 01 00       	call   c002735b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 91 96 01 00       	call   c00279ac <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 02 9d 01 00       	call   c002803b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 08 90 01 00       	call   c002735b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e 9e 02 c0       	mov    eax,0xc0029e1e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f 9e 02 c0       	mov    eax,0xc0029e2f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000e4e3:	ff 05 c4 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fc0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c000e50d:	e8 79 f5 00 00       	call   c001da8b <schedule()>
c000e512:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 9e 02 c0       	push   0xc0029e66
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 a8 da 02 c0       	mov    eax,0xc002daa8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 d4 67 02 c0       	mov    eax,0xc00267d4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 9e 02 c0       	push   0xc0029e79
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 08 65 02 c0       	mov    eax,0xc0026508
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 9e 02 c0       	push   0xc0029e82
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 d4 68 02 c0       	mov    eax,0xc00268d4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c 9e 02 c0       	push   0xc0029e8c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 54 66 02 c0       	mov    eax,0xc0026654
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 9e 02 c0       	push   0xc0029e95
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ac da 02 c0       	mov    eax,0xc002daac
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 9e 02 c0       	push   0xc0029ea2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ad da 02 c0       	mov    eax,0xc002daad
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 e5 56 00 00       	call   c0013d52 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af 9e 02 c0       	push   0xc0029eaf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c000e6be:	68 c8 9e 02 c0       	push   0xc0029ec8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 a3 ef 00 00       	call   c001d66e <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 86 f1 00 00       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 4a e2 01 c0       	push   0xc001e24a
c000e6e9:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c000e6ef:	e8 72 f1 00 00       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 a8 0f 03 c0       	mov    ds:0xc0030fa8,eax
c000e6fc:	68 ac 9f 02 c0       	push   0xc0029fac
c000e701:	c6 05 ad da 02 c0 01 	mov    BYTE PTR ds:0xc002daad,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 e3 fe 00 00       	call   c001e5f5 <Vm::initialise8086()>
c000e712:	e8 03 44 00 00       	call   c0012b1a <Fs::initVFS()>
c000e717:	c7 04 24 d5 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac 9f 02 c0       	push   0xc0029fac
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 a9 d7 00 00       	call   c001bef5 <Sys::loadSyscalls()>
c000e74c:	e8 a1 b6 00 00       	call   c0019df2 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef 9e 02 c0       	push   0xc0029eef
c000e75b:	68 f8 9e 02 c0       	push   0xc0029ef8
c000e760:	e8 52 c5 00 00       	call   c001acb7 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 9d 4e 00 00       	call   c001360a <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fd0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 88 55 00 00       	call   c0013d12 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f00
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 bf b1 00 00       	call   c001995a <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f1a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b 9f 02 c0       	push   0xc0029f2b
c000e7b6:	e8 0a e9 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 32 eb 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 90 f4 00 00       	call   c001dc61 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 9f 02 c0       	push   0xc0029f47
c000e7e5:	50                   	push   eax
c000e7e6:	e8 e1 55 00 00       	call   c0013dcc <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c a0 02 c0       	mov    edx,0xc002a01c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 c1 da 02 c0 04 	test   BYTE PTR ds:0xc002dac1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 17 7b 01 00       	call   c0026496 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 32 9f 00 00       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 0b 9f 00 00       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 e9 9e 00 00       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 c7 9e 00 00       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 c0 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dac0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 d5 9d 00 00       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 b0 9d 00 00       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 81 79 01 00       	call   c0026450 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 3e 79 01 00       	call   c0026430 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 cc 9d 00 00       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 9f 02 c0       	push   0xc0029f50
c000eb62:	e8 94 b3 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 9f 02 c0       	push   0xc0029f56
c000eb9a:	e8 5c b3 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 9f 02 c0       	push   0xc0029ff0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 c0 da 02 c0 04 	test   BYTE PTR ds:0xc002dac0,0x4
c000ec03:	0f 94 05 e0 c9 02 c0 	sete   BYTE PTR ds:0xc002c9e0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 47 8f 00 00       	call   c0017b60 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 a0 4f 00 00       	call   c0013bc8 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f00
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 48 9d 00 00       	call   c00189a4 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 5d 4f 00 00       	call   c0013bc8 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 d9 54 00 00       	call   c0014160 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 2d 4f 00 00       	call   c0013bc8 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c 9f 02 c0       	push   0xc0029f5c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 bf ec 00 00       	call   c001d988 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 9f 02 c0       	push   0xc0029f77
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 78 3a 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 9f 02 c0       	push   0xc0029f88
c000ed34:	e8 c2 b1 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 9f 02 c0       	push   0xc0029f95
c000ed49:	e8 ad b1 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f9f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 96 b1 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 b2 da 02 c0       	mov    ds:0xc002dab2,eax
c000ee21:	66 89 15 b0 da 02 c0 	mov    WORD PTR ds:0xc002dab0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000ef38:	48                   	dec    eax
c000ef39:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 51 95 01 00       	call   c00284e0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 48 95 01 00       	call   c00284e0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 b8 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002dab8,0x7ff
c000f085:	a3 ba da 02 c0       	mov    ds:0xc002daba,eax
c000f08a:	0f 01 1d b8 da 02 c0 	lidtd  ds:0xc002dab8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c000f37c:	e8 01 28 00 00       	call   c0011b82 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c5 17 00 00       	call   c0010b64 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f6 17 00 00       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 7c c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c87c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 7c c8 02 c0       	mov    eax,ds:0xc002c87c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 40 a0 02 c0       	push   0xc002a040
c000f455:	e8 35 33 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 7c c8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c87c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c000f481:	8b 2d 7c c8 02 c0    	mov    ebp,DWORD PTR ds:0xc002c87c
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 e7 25 00 00       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 7c c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c87c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 70 a0 02 c0       	push   0xc002a070
c000f50d:	e8 e9 a9 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 75 a0 02 c0       	push   0xc002a075
c000f523:	e8 d3 a9 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000f543:	48                   	dec    eax
c000f544:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c000f561:	e8 1c 26 00 00       	call   c0011b82 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c000f577:	e8 ce 21 00 00       	call   c001174a <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 7c a0 02 c0       	push   0xc002a07c
c000f6a4:	e8 e6 30 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 80 c8 02 c0 	movzx  eax,BYTE PTR ds:0xc002c880
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 80 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3780]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 b6 c8 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd374a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 b5 c8 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd374b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 80 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3780]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 94 a0 02 c0       	push   0xc002a094
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 c0 da 02 c0       	mov    ds:0xc002dac0,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 81 1c 00 00       	call   c00113dc <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 20 20 00 00       	call   c0011786 <VAS::VAS()>
c000f766:	89 1d 10 dc 02 c0    	mov    DWORD PTR ds:0xc002dc10,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 62 21 00 00       	call   c0011904 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 b3 a0 02 c0       	push   0xc002a0b3
c000f7b9:	e8 d1 2f 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 00 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2500],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 00 db 02 c0       	mov    esi,0xc002db00
c000f826:	8d 93 00 db 02 c0    	lea    edx,[ebx-0x3ffd2500]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 cc a0 02 c0       	push   0xc002a0cc
c000f843:	e8 47 2f 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 e3 a0 02 c0       	push   0xc002a0e3
c000f87f:	e8 0b 2f 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 00 db 02 c0    	lea    eax,[edx-0x3ffd2500]
c000f8b8:	8d 94 11 00 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2500]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 c4 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9c4
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 c4 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9c4
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 c4 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c9c4
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 f9 a0 02 c0       	push   0xc002a0f9
c000f932:	e8 58 2e 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d f0 da 02 c0    	dec    DWORD PTR ds:0xc002daf0
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 0c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a10c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 7c a5 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 e4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dae4
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d e4 da 02 c0    	mov    DWORD PTR ds:0xc002dae4,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 e4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dae4,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 40 a1 02 c0       	push   0xc002a140
c000f9da:	e8 b0 2d 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 41 2a 00 00       	call   c0012434 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 58 a1 02 c0       	push   0xc002a158
c000fa16:	e8 e0 a4 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d e4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae4
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 e4 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dae4
c000fa45:	a3 f0 da 02 c0       	mov    ds:0xc002daf0,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 f4 da 02 c0    	push   DWORD PTR ds:0xc002daf4
c000fa54:	50                   	push   eax
c000fa55:	68 22 a1 02 c0       	push   0xc002a122
c000fa5a:	e8 30 2d 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 e4 da 02 c0       	mov    eax,ds:0xc002dae4
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000fad3:	48                   	dec    eax
c000fad4:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d e8 da 02 c0    	cmp    DWORD PTR ds:0xc002dae8,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d e8 da 02 c0    	mov    DWORD PTR ds:0xc002dae8,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 00 db 02 c0       	push   0xc002db00
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 66 a1 02 c0       	push   0xc002a166
c000fb52:	e8 38 2c 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 a8 a1 02 c0       	push   0xc002a1a8
c000fbe6:	e8 a4 2b 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 cc a1 02 c0       	push   0xc002a1cc
c000fc72:	e8 18 2b 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 f4 da 02 c0    	add    eax,DWORD PTR ds:0xc002daf4
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 f4 da 02 c0       	mov    ds:0xc002daf4,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 8c a1 02 c0       	push   0xc002a18c
c000fca8:	e8 e2 2a 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 7e a1 02 c0       	push   0xc002a17e
c000fd17:	e8 df a1 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 f4 da 02 c0    	inc    DWORD PTR ds:0xc002daf4
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 3f 12 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 11 29 00 00       	call   c00126b7 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c000fddc:	e8 aa dc 00 00       	call   c001da8b <schedule()>
c000fde1:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c000fde6:	48                   	dec    eax
c000fde7:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 5b 6a 01 00       	call   c00268d4 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 f5 a1 02 c0       	push   0xc002a1f5
c000fe8e:	e8 68 a0 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 11 a2 02 c0       	push   0xc002a211
c000ff4f:	e8 a7 9f 00 00       	call   c0019efb <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 5e 0e 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cb 0f 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 9a 26 00 00       	call   c00126b7 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 1e 5c 00 00       	call   c0015c56 <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 60 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db60
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 40 db 02 c0       	push   0xc002db40
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 64 db 02 c0    	cmp    DWORD PTR ds:0xc002db64,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 00 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3600]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 00 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3600]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 b8 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3748]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 90 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3770]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 64 db 02 c0    	cmp    DWORD PTR ds:0xc002db64,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 64 db 02 c0    	cmp    DWORD PTR ds:0xc002db64,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 4c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a24c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 8b 9b 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c0010370:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 64 db 02 c0    	mov    DWORD PTR ds:0xc002db64,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 60 db 02 c0       	mov    eax,ds:0xc002db60
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 18 dc 02 c0       	mov    eax,ds:0xc002dc18
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 e4 30 00 00       	jmp    c001359c <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 64 db 02 c0    	cmp    DWORD PTR ds:0xc002db64,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 5a a2 02 c0       	mov    esi,0xc002a25a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 42 05 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 40 db 02 c0       	mov    ebx,0xc002db40
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 dd 08 00 00       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	6a 05                	push   0x5
c0010962:	56                   	push   esi
c0010963:	50                   	push   eax
c0010964:	53                   	push   ebx
c0010965:	e8 16 11 00 00       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010974:	83 ec 04             	sub    esp,0x4
c0010977:	68 00 0f 00 00       	push   0xf00
c001097c:	6a 00                	push   0x0
c001097e:	50                   	push   eax
c001097f:	e8 cc fd fe ff       	call   c0000750 <memset>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	83 ec 04             	sub    esp,0x4
c001098a:	6a 00                	push   0x0
c001098c:	6a 07                	push   0x7
c001098e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010992:	e8 1b f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	83 ec 04             	sub    esp,0x4
c001099d:	6a 00                	push   0x0
c001099f:	6a 00                	push   0x0
c00109a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a5:	e8 92 f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109aa:	83 c4 10             	add    esp,0x10
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b4:	e8 1b fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	05 02 01 00 00       	add    eax,0x102
c00109cd:	83 ec 04             	sub    esp,0x4
c00109d0:	68 96 00 00 00       	push   0x96
c00109d5:	6a 00                	push   0x0
c00109d7:	50                   	push   eax
c00109d8:	e8 73 fd fe ff       	call   c0000750 <memset>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	05 98 01 00 00       	add    eax,0x198
c00109e9:	83 ec 04             	sub    esp,0x4
c00109ec:	68 2c 01 00 00       	push   0x12c
c00109f1:	6a 00                	push   0x0
c00109f3:	50                   	push   eax
c00109f4:	e8 57 fd fe ff       	call   c0000750 <memset>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	5b                   	pop    ebx
c00109fe:	5e                   	pop    esi
c00109ff:	5f                   	pop    edi
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <VgaText::receiveKey(unsigned char)>:
c0010a02:	55                   	push   ebp
c0010a03:	57                   	push   edi
c0010a04:	56                   	push   esi
c0010a05:	53                   	push   ebx
c0010a06:	83 ec 1c             	sub    esp,0x1c
c0010a09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a11:	84 db                	test   bl,bl
c0010a13:	0f 84 c9 00 00 00    	je     c0010ae2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a19:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a1f:	80 fb 08             	cmp    bl,0x8
c0010a22:	75 2c                	jne    c0010a50 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	57                   	push   edi
c0010a28:	e8 3f fd fe ff       	call   c000076c <strlen>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	74 41                	je     c0010a75 <VgaText::receiveKey(unsigned char)+0x73>
c0010a34:	50                   	push   eax
c0010a35:	50                   	push   eax
c0010a36:	6a 08                	push   0x8
c0010a38:	56                   	push   esi
c0010a39:	e8 f0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a41:	e8 26 fd fe ff       	call   c000076c <strlen>
c0010a46:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a4e:	eb 22                	jmp    c0010a72 <VgaText::receiveKey(unsigned char)+0x70>
c0010a50:	0f be c3             	movsx  eax,bl
c0010a53:	52                   	push   edx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	56                   	push   esi
c0010a57:	e8 d2 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a65:	59                   	pop    ecx
c0010a66:	5d                   	pop    ebp
c0010a67:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6b:	50                   	push   eax
c0010a6c:	57                   	push   edi
c0010a6d:	e8 da fe fe ff       	call   c000094c <strcat>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7c:	75 05                	jne    c0010a83 <VgaText::receiveKey(unsigned char)+0x81>
c0010a7e:	80 fb 0a             	cmp    bl,0xa
c0010a81:	75 53                	jne    c0010ad6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 da fc fe ff       	call   c000076c <strlen>
c0010a92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a95:	89 c5                	mov    ebp,eax
c0010a97:	e8 d0 fc fe ff       	call   c000076c <strlen>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aa8:	76 10                	jbe    c0010aba <VgaText::receiveKey(unsigned char)+0xb8>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	68 6b a2 02 c0       	push   0xc002a26b
c0010ab2:	e8 44 94 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	57                   	push   edi
c0010abd:	53                   	push   ebx
c0010abe:	e8 89 fe fe ff       	call   c000094c <strcat>
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	68 96 00 00 00       	push   0x96
c0010acb:	6a 00                	push   0x0
c0010acd:	57                   	push   edi
c0010ace:	e8 7d fc fe ff       	call   c0000750 <memset>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	56                   	push   esi
c0010ada:	e8 6f fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	83 c4 1c             	add    esp,0x1c
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	5f                   	pop    edi
c0010ae8:	5d                   	pop    ebp
c0010ae9:	c3                   	ret    

c0010aea <VgaText::write(unsigned long long, void*, int*)>:
c0010aea:	55                   	push   ebp
c0010aeb:	57                   	push   edi
c0010aec:	56                   	push   esi
c0010aed:	53                   	push   ebx
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010af9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010afd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b04:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b07:	39 eb                	cmp    ebx,ebp
c0010b09:	74 13                	je     c0010b1e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0b:	43                   	inc    ebx
c0010b0c:	50                   	push   eax
c0010b0d:	50                   	push   eax
c0010b0e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b12:	50                   	push   eax
c0010b13:	56                   	push   esi
c0010b14:	e8 15 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	eb e9                	jmp    c0010b07 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b28:	56                   	push   esi
c0010b29:	e8 20 fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b32:	89 38                	mov    DWORD PTR [eax],edi
c0010b34:	83 c4 1c             	add    esp,0x1c
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	5b                   	pop    ebx
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	5d                   	pop    ebp
c0010b3d:	c3                   	ret    

c0010b3e <newTerminal(char*)>:
c0010b3e:	83 ec 28             	sub    esp,0x28
c0010b41:	68 c4 02 00 00       	push   0x2c4
c0010b46:	e8 4e ea ff ff       	call   c000f599 <malloc>
c0010b4b:	5a                   	pop    edx
c0010b4c:	59                   	pop    ecx
c0010b4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b51:	50                   	push   eax
c0010b52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b56:	e8 2b fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b5f:	83 c4 2c             	add    esp,0x2c
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <TSS::TSS()>:
c0010b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b6f:	90                   	nop
c0010b70:	c3                   	ret    
c0010b71:	90                   	nop

c0010b72 <TSS::setESP(unsigned long)>:
c0010b72:	55                   	push   ebp
c0010b73:	89 e5                	mov    ebp,esp
c0010b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b81:	90                   	nop
c0010b82:	5d                   	pop    ebp
c0010b83:	c3                   	ret    

c0010b84 <TSS::flush()>:
c0010b84:	55                   	push   ebp
c0010b85:	89 e5                	mov    ebp,esp
c0010b87:	83 ec 10             	sub    esp,0x10
c0010b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8f:	83 c8 03             	or     eax,0x3
c0010b92:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b96:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9a:	66 89 d0             	mov    ax,dx
c0010b9d:	0f 00 d8             	ltr    ax
c0010ba0:	90                   	nop
c0010ba1:	c9                   	leave  
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <TSS::setup(unsigned long, unsigned long)>:
c0010ba4:	55                   	push   ebp
c0010ba5:	89 e5                	mov    ebp,esp
c0010ba7:	83 ec 18             	sub    esp,0x18
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	6a 68                	push   0x68
c0010baf:	e8 e5 e9 ff ff       	call   c000f599 <malloc>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	89 c2                	mov    edx,eax
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc5:	83 ec 04             	sub    esp,0x4
c0010bc8:	6a 68                	push   0x68
c0010bca:	6a 00                	push   0x0
c0010bcc:	50                   	push   eax
c0010bcd:	e8 7e fb fe ff       	call   c0000750 <memset>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c17:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c23:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6c:	0f 20 da             	mov    edx,cr3
c0010c6f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c75:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7e:	83 ec 08             	sub    esp,0x8
c0010c81:	50                   	push   eax
c0010c82:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c85:	50                   	push   eax
c0010c86:	e8 07 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 08             	sub    esp,0x8
c0010c91:	6a 68                	push   0x68
c0010c93:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c96:	50                   	push   eax
c0010c97:	e8 12 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca6:	83 e0 0f             	and    eax,0xf
c0010ca9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010caf:	83 c8 40             	or     eax,0x40
c0010cb2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb5:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0010cba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc0:	05 78 01 00 00       	add    eax,0x178
c0010cc5:	83 ec 04             	sub    esp,0x4
c0010cc8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cce:	50                   	push   eax
c0010ccf:	e8 0e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	89 c2                	mov    edx,eax
c0010cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdc:	89 10                	mov    DWORD PTR [eax],edx
c0010cde:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0010ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce9:	05 78 01 00 00       	add    eax,0x178
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	50                   	push   eax
c0010cf2:	e8 15 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cff:	c9                   	leave  
c0010d00:	c3                   	ret    
c0010d01:	90                   	nop

c0010d02 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d12:	75 08                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1a:	eb 38                	jmp    c0010d54 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d21:	75 17                	jne    c0010d3a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d31:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d37:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3a:	89 c1                	mov    ecx,eax
c0010d3c:	83 e1 fd             	and    ecx,0xfffffffd
c0010d3f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d45:	74 cd                	je     c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d47:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4c:	83 e0 ef             	and    eax,0xffffffef
c0010d4f:	83 f8 08             	cmp    eax,0x8
c0010d52:	76 c0                	jbe    c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	c3                   	ret    
c0010d57:	90                   	nop

c0010d58 <ReservedFilename::isAtty()>:
c0010d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d5f:	31 c0                	xor    eax,eax
c0010d61:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d67:	74 09                	je     c0010d72 <ReservedFilename::isAtty()+0x1a>
c0010d69:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d6f:	0f 94 c0             	sete   al
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d83:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d88:	75 08                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d90:	eb 3d                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d92:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d97:	75 17                	jne    c0010db0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db5:	75 04                	jne    c0010dbb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db7:	89 0a                	mov    DWORD PTR [edx],ecx
c0010db9:	eb 14                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc0:	74 c8                	je     c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc7:	83 e0 ef             	and    eax,0xffffffef
c0010dca:	83 f8 08             	cmp    eax,0x8
c0010dcd:	76 bb                	jbe    c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dcf:	31 c0                	xor    eax,eax
c0010dd1:	c3                   	ret    

c0010dd2 <UnixFile::getFileDescriptor()>:
c0010dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd9:	c3                   	ret    

c0010dda <UnixFile::UnixFile(int)>:
c0010dda:	53                   	push   ebx
c0010ddb:	83 ec 28             	sub    esp,0x28
c0010dde:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c0010de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de7:	89 10                	mov    DWORD PTR [eax],edx
c0010de9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df1:	0f 8f 8c 01 00 00    	jg     c0010f83 <UnixFile::UnixFile(int)+0x1a9>
c0010df7:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0010dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0010dff:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c0010e05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e13:	68 f8 db 02 c0       	push   0xc002dbf8
c0010e18:	e8 29 77 01 00       	call   c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1d:	83 c4 10             	add    esp,0x10
c0010e20:	a0 f4 db 02 c0       	mov    al,ds:0xc002dbf4
c0010e25:	83 f0 01             	xor    eax,0x1
c0010e28:	84 c0                	test   al,al
c0010e2a:	0f 84 54 01 00 00    	je     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010e30:	c6 05 f4 db 02 c0 01 	mov    BYTE PTR ds:0xc002dbf4,0x1
c0010e37:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e46:	e8 4e e7 ff ff       	call   c000f599 <malloc>
c0010e4b:	83 c4 10             	add    esp,0x10
c0010e4e:	89 c3                	mov    ebx,eax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 03 ff ff 0f       	push   0xfffff03
c0010e58:	53                   	push   ebx
c0010e59:	e8 2c 01 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	89 1d ec db 02 c0    	mov    DWORD PTR ds:0xc002dbec,ebx
c0010e67:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e6f:	83 ec 0c             	sub    esp,0xc
c0010e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e76:	e8 1e e7 ff ff       	call   c000f599 <malloc>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 c3                	mov    ebx,eax
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	68 01 ff ff 0f       	push   0xfffff01
c0010e88:	53                   	push   ebx
c0010e89:	e8 fc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 1d f0 db 02 c0    	mov    DWORD PTR ds:0xc002dbf0,ebx
c0010e97:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea6:	e8 ee e6 ff ff       	call   c000f599 <malloc>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	89 c3                	mov    ebx,eax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 00 ff ff 0f       	push   0xfffff00
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 cc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 1d e4 db 02 c0    	mov    DWORD PTR ds:0xc002dbe4,ebx
c0010ec7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed6:	e8 be e6 ff ff       	call   c000f599 <malloc>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	89 c3                	mov    ebx,eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	68 02 ff ff 0f       	push   0xfffff02
c0010ee8:	53                   	push   ebx
c0010ee9:	e8 9c 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	89 1d e8 db 02 c0    	mov    DWORD PTR ds:0xc002dbe8,ebx
c0010ef7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010eff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f04:	7f 7e                	jg     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010f06:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f15:	e8 7f e6 ff ff       	call   c000f599 <malloc>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	89 c3                	mov    ebx,eax
c0010f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f23:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	50                   	push   eax
c0010f2c:	53                   	push   ebx
c0010f2d:	e8 58 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f39:	89 1c 85 c0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2440],ebx
c0010f40:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4f:	e8 45 e6 ff ff       	call   c000f599 <malloc>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	89 c3                	mov    ebx,eax
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 1e 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 1c 85 80 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2480],ebx
c0010f7a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f7e:	e9 7c ff ff ff       	jmp    c0010eff <UnixFile::UnixFile(int)+0x125>
c0010f83:	90                   	nop
c0010f84:	83 c4 28             	add    esp,0x28
c0010f87:	5b                   	pop    ebx
c0010f88:	c3                   	ret    
c0010f89:	90                   	nop

c0010f8a <ReservedFilename::ReservedFilename(int)>:
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f91:	83 ec 08             	sub    esp,0x8
c0010f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f98:	50                   	push   eax
c0010f99:	e8 3c fe ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	ba a4 a3 02 c0       	mov    edx,0xc002a3a4
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb7:	90                   	nop
c0010fb8:	83 c4 0c             	add    esp,0xc
c0010fbb:	c3                   	ret    

c0010fbc <UnixFile::~UnixFile()>:
c0010fbc:	83 ec 1c             	sub    esp,0x1c
c0010fbf:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c0010fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc8:	89 10                	mov    DWORD PTR [eax],edx
c0010fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd6:	7f 73                	jg     c001104b <UnixFile::~UnixFile()+0x8f>
c0010fd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 f8 db 02 c0       	push   0xc002dbf8
c0010fe8:	e8 2d 76 01 00       	call   c002861a <LinkedList<UnixFile>::getFirstElement()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	68 f8 db 02 c0       	push   0xc002dbf8
c0010ffc:	e8 21 76 01 00       	call   c0028622 <LinkedList<UnixFile>::removeFirst()>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011008:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100c:	74 40                	je     c001104e <UnixFile::~UnixFile()+0x92>
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011015:	68 f8 db 02 c0       	push   0xc002dbf8
c001101a:	e8 27 75 01 00       	call   c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011026:	8d 50 01             	lea    edx,[eax+0x1]
c0011029:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011032:	0f 94 c0             	sete   al
c0011035:	84 c0                	test   al,al
c0011037:	74 a7                	je     c0010fe0 <UnixFile::~UnixFile()+0x24>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	68 60 a3 02 c0       	push   0xc002a360
c0011041:	e8 b5 8e 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	eb 95                	jmp    c0010fe0 <UnixFile::~UnixFile()+0x24>
c001104b:	90                   	nop
c001104c:	eb 01                	jmp    c001104f <UnixFile::~UnixFile()+0x93>
c001104e:	90                   	nop
c001104f:	90                   	nop
c0011050:	83 c4 1c             	add    esp,0x1c
c0011053:	c3                   	ret    

c0011054 <UnixFile::~UnixFile()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 59 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	6a 0c                	push   0xc
c001106b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106f:	e8 43 16 00 00       	call   c00126b7 <operator delete(void*, unsigned long)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	83 c4 0c             	add    esp,0xc
c001107a:	c3                   	ret    
c001107b:	90                   	nop

c001107c <ReservedFilename::~ReservedFilename()>:
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	ba a4 a3 02 c0       	mov    edx,0xc002a3a4
c0011084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011088:	89 10                	mov    DWORD PTR [eax],edx
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	50                   	push   eax
c0011092:	e8 25 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011097:	83 c4 10             	add    esp,0x10
c001109a:	90                   	nop
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <ReservedFilename::~ReservedFilename()>:
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	83 ec 0c             	sub    esp,0xc
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	e8 cd ff ff ff       	call   c001107c <ReservedFilename::~ReservedFilename()>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	6a 0c                	push   0xc
c00110b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bb:	e8 f7 15 00 00       	call   c00126b7 <operator delete(void*, unsigned long)>
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	83 c4 0c             	add    esp,0xc
c00110c6:	c3                   	ret    

c00110c7 <getFromFileDescriptor(int)>:
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110db:	7f 2c                	jg     c0011109 <getFromFileDescriptor(int)+0x42>
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	68 f8 db 02 c0       	push   0xc002dbf8
c00110e5:	e8 30 75 01 00       	call   c002861a <LinkedList<UnixFile>::getFirstElement()>
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	85 c0                	test   eax,eax
c00110ef:	75 04                	jne    c00110f5 <getFromFileDescriptor(int)+0x2e>
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	eb 6e                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c00110f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110f8:	74 69                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c00110fa:	52                   	push   edx
c00110fb:	52                   	push   edx
c00110fc:	50                   	push   eax
c00110fd:	68 f8 db 02 c0       	push   0xc002dbf8
c0011102:	e8 bd 75 01 00       	call   c00286c4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011107:	eb e1                	jmp    c00110ea <getFromFileDescriptor(int)+0x23>
c0011109:	a1 ec db 02 c0       	mov    eax,ds:0xc002dbec
c001110e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011114:	74 4d                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011116:	a1 f0 db 02 c0       	mov    eax,ds:0xc002dbf0
c001111b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011121:	74 40                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011123:	a1 e8 db 02 c0       	mov    eax,ds:0xc002dbe8
c0011128:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001112e:	74 33                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011130:	a1 e4 db 02 c0       	mov    eax,ds:0xc002dbe4
c0011135:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113b:	74 26                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c001113d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011143:	83 f8 08             	cmp    eax,0x8
c0011146:	77 09                	ja     c0011151 <getFromFileDescriptor(int)+0x8a>
c0011148:	8b 04 85 c0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2440]
c001114f:	eb 12                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c0011151:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011157:	83 fb 08             	cmp    ebx,0x8
c001115a:	77 95                	ja     c00110f1 <getFromFileDescriptor(int)+0x2a>
c001115c:	8b 04 9d 80 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2480]
c0011163:	83 c4 08             	add    esp,0x8
c0011166:	5b                   	pop    ebx
c0011167:	c3                   	ret    

c0011168 <__static_initialization_and_destruction_0(int, int)>:
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011170:	75 34                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011172:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117a:	75 2a                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	68 f8 db 02 c0       	push   0xc002dbf8
c0011184:	e8 7b 73 01 00       	call   c0028504 <LinkedList<UnixFile>::LinkedList()>
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	83 ec 04             	sub    esp,0x4
c001118f:	68 78 c8 02 c0       	push   0xc002c878
c0011194:	68 f8 db 02 c0       	push   0xc002dbf8
c0011199:	68 02 85 02 c0       	push   0xc0028502
c001119e:	e8 8e 14 00 00       	call   c0012631 <__cxa_atexit>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	90                   	nop
c00111a7:	83 c4 0c             	add    esp,0xc
c00111aa:	c3                   	ret    

c00111ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ab:	83 ec 0c             	sub    esp,0xc
c00111ae:	83 ec 08             	sub    esp,0x8
c00111b1:	68 ff ff 00 00       	push   0xffff
c00111b6:	6a 01                	push   0x1
c00111b8:	e8 ab ff ff ff       	call   c0011168 <__static_initialization_and_destruction_0(int, int)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	83 c4 0c             	add    esp,0xc
c00111c3:	c3                   	ret    

c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c4:	53                   	push   ebx
c00111c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d3:	89 c8                	mov    eax,ecx
c00111d5:	d1 e8                	shr    eax,1
c00111d7:	03 05 48 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca48
c00111dd:	83 e1 01             	and    ecx,0x1
c00111e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e2:	75 09                	jne    c00111ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e4:	83 e2 f0             	and    edx,0xfffffff0
c00111e7:	09 da                	or     edx,ebx
c00111e9:	88 10                	mov    BYTE PTR [eax],dl
c00111eb:	5b                   	pop    ebx
c00111ec:	c3                   	ret    
c00111ed:	c1 e3 04             	shl    ebx,0x4
c00111f0:	83 e2 0f             	and    edx,0xf
c00111f3:	09 da                	or     edx,ebx
c00111f5:	88 10                	mov    BYTE PTR [eax],dl
c00111f7:	5b                   	pop    ebx
c00111f8:	c3                   	ret    

c00111f9 <Virt::getPageState(unsigned long)>:
c00111f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fd:	8b 0d 48 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca48
c0011203:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011209:	89 d0                	mov    eax,edx
c001120b:	d1 e8                	shr    eax,1
c001120d:	83 e2 01             	and    edx,0x1
c0011210:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011213:	75 04                	jne    c0011219 <Virt::getPageState(unsigned long)+0x20>
c0011215:	83 e0 0f             	and    eax,0xf
c0011218:	c3                   	ret    
c0011219:	c0 e8 04             	shr    al,0x4
c001121c:	c3                   	ret    

c001121d <Virt::allocateKernelVirtualPages(int)>:
c001121d:	55                   	push   ebp
c001121e:	31 ed                	xor    ebp,ebp
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	31 db                	xor    ebx,ebx
c0011225:	83 ec 1c             	sub    esp,0x1c
c0011228:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122c:	8b 3d 44 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca44
c0011232:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011237:	57                   	push   edi
c0011238:	e8 bc ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c001123d:	5a                   	pop    edx
c001123e:	84 c0                	test   al,al
c0011240:	75 3a                	jne    c001127c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011242:	85 db                	test   ebx,ebx
c0011244:	75 02                	jne    c0011248 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011246:	89 fd                	mov    ebp,edi
c0011248:	43                   	inc    ebx
c0011249:	39 f3                	cmp    ebx,esi
c001124b:	74 5a                	je     c00112a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124d:	47                   	inc    edi
c001124e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011254:	76 31                	jbe    c0011287 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011256:	c7 05 44 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca44,0xc8000
c0011260:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011265:	75 28                	jne    c001128f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011267:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011271:	57                   	push   edi
c0011272:	e8 82 ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011277:	5a                   	pop    edx
c0011278:	84 c0                	test   al,al
c001127a:	74 c6                	je     c0011242 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127c:	31 db                	xor    ebx,ebx
c001127e:	47                   	inc    edi
c001127f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011285:	77 cf                	ja     c0011256 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011287:	89 3d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,edi
c001128d:	eb a8                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	68 b8 a3 02 c0       	push   0xc002a3b8
c0011297:	e8 5f 8c 00 00       	call   c0019efb <Krnl::panic(char const*)>
c001129c:	8b 3d 44 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca44
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	eb 90                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a7:	89 2d 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,ebp
c00112ad:	4b                   	dec    ebx
c00112ae:	74 5f                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b0:	85 f6                	test   esi,esi
c00112b2:	74 3d                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b4:	89 e8                	mov    eax,ebp
c00112b6:	31 db                	xor    ebx,ebx
c00112b8:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bb:	eb 14                	jmp    c00112d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bd:	6a 01                	push   0x1
c00112bf:	43                   	inc    ebx
c00112c0:	50                   	push   eax
c00112c1:	e8 fe fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c6:	58                   	pop    eax
c00112c7:	39 f3                	cmp    ebx,esi
c00112c9:	5a                   	pop    edx
c00112ca:	74 25                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112cc:	a1 44 ca 02 c0       	mov    eax,ds:0xc002ca44
c00112d1:	8d 50 01             	lea    edx,[eax+0x1]
c00112d4:	85 db                	test   ebx,ebx
c00112d6:	89 15 44 ca 02 c0    	mov    DWORD PTR ds:0xc002ca44,edx
c00112dc:	74 20                	je     c00112fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112de:	39 df                	cmp    edi,ebx
c00112e0:	75 db                	jne    c00112bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e2:	6a 03                	push   0x3
c00112e4:	43                   	inc    ebx
c00112e5:	50                   	push   eax
c00112e6:	e8 d9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112eb:	59                   	pop    ecx
c00112ec:	39 f3                	cmp    ebx,esi
c00112ee:	58                   	pop    eax
c00112ef:	75 db                	jne    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	83 c4 1c             	add    esp,0x1c
c00112f4:	89 e8                	mov    eax,ebp
c00112f6:	5b                   	pop    ebx
c00112f7:	c1 e0 0c             	shl    eax,0xc
c00112fa:	5e                   	pop    esi
c00112fb:	5f                   	pop    edi
c00112fc:	5d                   	pop    ebp
c00112fd:	c3                   	ret    
c00112fe:	6a 02                	push   0x2
c0011300:	bb 01 00 00 00       	mov    ebx,0x1
c0011305:	50                   	push   eax
c0011306:	e8 b9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130b:	58                   	pop    eax
c001130c:	5a                   	pop    edx
c001130d:	eb bd                	jmp    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c001130f:	6a 04                	push   0x4
c0011311:	8d 45 01             	lea    eax,[ebp+0x1]
c0011314:	55                   	push   ebp
c0011315:	a3 44 ca 02 c0       	mov    ds:0xc002ca44,eax
c001131a:	e8 a5 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131f:	59                   	pop    ecx
c0011320:	89 e8                	mov    eax,ebp
c0011322:	5b                   	pop    ebx
c0011323:	c1 e0 0c             	shl    eax,0xc
c0011326:	83 c4 1c             	add    esp,0x1c
c0011329:	5b                   	pop    ebx
c001132a:	5e                   	pop    esi
c001132b:	5f                   	pop    edi
c001132c:	5d                   	pop    ebp
c001132d:	c3                   	ret    

c001132e <Virt::freeSwapfilePage(unsigned long)>:
c001132e:	53                   	push   ebx
c001132f:	8b 15 0c dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc0c
c0011335:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011339:	b8 01 00 00 00       	mov    eax,0x1
c001133e:	89 cb                	mov    ebx,ecx
c0011340:	d3 e0                	shl    eax,cl
c0011342:	c1 eb 05             	shr    ebx,0x5
c0011345:	f7 d0                	not    eax
c0011347:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134a:	5b                   	pop    ebx
c001134b:	c3                   	ret    

c001134c <Virt::swapIDToSector(unsigned long)>:
c001134c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011350:	0f af 05 4c ca 02 c0 	imul   eax,DWORD PTR ds:0xc002ca4c
c0011357:	03 05 54 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca54
c001135d:	c3                   	ret    

c001135e <Virt::allocateSwapfilePage()>:
c001135e:	55                   	push   ebp
c001135f:	31 d2                	xor    edx,edx
c0011361:	57                   	push   edi
c0011362:	56                   	push   esi
c0011363:	53                   	push   ebx
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	8b 0d 4c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca4c
c001136d:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c0011372:	f7 f1                	div    ecx
c0011374:	39 0d 50 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca50,ecx
c001137a:	72 2d                	jb     c00113a9 <Virt::allocateSwapfilePage()+0x4b>
c001137c:	8b 35 0c dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc0c
c0011382:	8b 16                	mov    edx,DWORD PTR [esi]
c0011384:	f6 c2 01             	test   dl,0x1
c0011387:	74 3c                	je     c00113c5 <Virt::allocateSwapfilePage()+0x67>
c0011389:	31 c9                	xor    ecx,ecx
c001138b:	bf 01 00 00 00       	mov    edi,0x1
c0011390:	eb 12                	jmp    c00113a4 <Virt::allocateSwapfilePage()+0x46>
c0011392:	89 fd                	mov    ebp,edi
c0011394:	89 ca                	mov    edx,ecx
c0011396:	d3 e5                	shl    ebp,cl
c0011398:	c1 ea 05             	shr    edx,0x5
c001139b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001139e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a0:	85 ea                	test   edx,ebp
c00113a2:	74 2a                	je     c00113ce <Virt::allocateSwapfilePage()+0x70>
c00113a4:	41                   	inc    ecx
c00113a5:	39 c8                	cmp    eax,ecx
c00113a7:	77 e9                	ja     c0011392 <Virt::allocateSwapfilePage()+0x34>
c00113a9:	83 ec 0c             	sub    esp,0xc
c00113ac:	68 c0 a5 02 c0       	push   0xc002a5c0
c00113b1:	e8 45 8b 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	31 c9                	xor    ecx,ecx
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c8                	mov    eax,ecx
c00113c0:	5b                   	pop    ebx
c00113c1:	5e                   	pop    esi
c00113c2:	5f                   	pop    edi
c00113c3:	5d                   	pop    ebp
c00113c4:	c3                   	ret    
c00113c5:	89 f3                	mov    ebx,esi
c00113c7:	bd 01 00 00 00       	mov    ebp,0x1
c00113cc:	31 c9                	xor    ecx,ecx
c00113ce:	09 ea                	or     edx,ebp
c00113d0:	89 c8                	mov    eax,ecx
c00113d2:	89 13                	mov    DWORD PTR [ebx],edx
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <Virt::virtualMemorySetup()>:
c00113dc:	53                   	push   ebx
c00113dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e2:	6a 0f                	push   0xf
c00113e4:	53                   	push   ebx
c00113e5:	43                   	inc    ebx
c00113e6:	e8 d9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113eb:	58                   	pop    eax
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	5a                   	pop    edx
c00113f3:	75 ed                	jne    c00113e2 <Virt::virtualMemorySetup()+0x6>
c00113f5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fa:	6a 00                	push   0x0
c00113fc:	53                   	push   ebx
c00113fd:	43                   	inc    ebx
c00113fe:	e8 c1 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011403:	59                   	pop    ecx
c0011404:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140a:	58                   	pop    eax
c001140b:	75 ed                	jne    c00113fa <Virt::virtualMemorySetup()+0x1e>
c001140d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011412:	6a 0f                	push   0xf
c0011414:	53                   	push   ebx
c0011415:	43                   	inc    ebx
c0011416:	e8 a9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141b:	58                   	pop    eax
c001141c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011422:	5a                   	pop    edx
c0011423:	75 ed                	jne    c0011412 <Virt::virtualMemorySetup()+0x36>
c0011425:	5b                   	pop    ebx
c0011426:	c3                   	ret    

c0011427 <Virt::setupPageSwapping(int)>:
c0011427:	57                   	push   edi
c0011428:	56                   	push   esi
c0011429:	53                   	push   ebx
c001142a:	83 ec 1c             	sub    esp,0x1c
c001142d:	68 14 01 00 00       	push   0x114
c0011432:	e8 62 e1 ff ff       	call   c000f599 <malloc>
c0011437:	83 c4 0c             	add    esp,0xc
c001143a:	89 c6                	mov    esi,eax
c001143c:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c0011442:	68 d7 a5 02 c0       	push   0xc002a5d7
c0011447:	50                   	push   eax
c0011448:	e8 a1 18 00 00       	call   c0012cee <File::File(char const*, Process*)>
c001144d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011450:	e8 75 1a 00 00       	call   c0012eca <File::unlink()>
c0011455:	58                   	pop    eax
c0011456:	5a                   	pop    edx
c0011457:	6a 12                	push   0x12
c0011459:	56                   	push   esi
c001145a:	e8 f3 18 00 00       	call   c0012d52 <File::open(FileOpenMode)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	85 c0                	test   eax,eax
c0011464:	0f 85 2f 01 00 00    	jne    c0011599 <Virt::setupPageSwapping(int)+0x172>
c001146a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001146e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011476:	c1 e3 08             	shl    ebx,0x8
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	68 00 00 01 00       	push   0x10000
c0011481:	e8 13 e1 ff ff       	call   c000f599 <malloc>
c0011486:	83 c4 0c             	add    esp,0xc
c0011489:	89 c7                	mov    edi,eax
c001148b:	68 00 00 01 00       	push   0x10000
c0011490:	68 ee 00 00 00       	push   0xee
c0011495:	50                   	push   eax
c0011496:	e8 b5 f2 fe ff       	call   c0000750 <memset>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 db                	test   ebx,ebx
c00114a0:	79 03                	jns    c00114a5 <Virt::setupPageSwapping(int)+0x7e>
c00114a2:	83 c3 0f             	add    ebx,0xf
c00114a5:	c1 fb 04             	sar    ebx,0x4
c00114a8:	4b                   	dec    ebx
c00114a9:	83 fb ff             	cmp    ebx,0xffffffff
c00114ac:	74 41                	je     c00114ef <Virt::setupPageSwapping(int)+0xc8>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b7:	52                   	push   edx
c00114b8:	57                   	push   edi
c00114b9:	6a 00                	push   0x0
c00114bb:	68 00 00 01 00       	push   0x10000
c00114c0:	56                   	push   esi
c00114c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c4:	83 c4 20             	add    esp,0x20
c00114c7:	85 c0                	test   eax,eax
c00114c9:	0f 85 b5 00 00 00    	jne    c0011584 <Virt::setupPageSwapping(int)+0x15d>
c00114cf:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d7:	74 cf                	je     c00114a8 <Virt::setupPageSwapping(int)+0x81>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	4b                   	dec    ebx
c00114dd:	68 09 a6 02 c0       	push   0xc002a609
c00114e2:	e8 14 8a 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 fb ff             	cmp    ebx,0xffffffff
c00114ed:	75 bf                	jne    c00114ae <Virt::setupPageSwapping(int)+0x87>
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	56                   	push   esi
c00114f3:	e8 b8 18 00 00       	call   c0012db0 <File::close()>
c00114f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fb:	e8 b9 e0 ff ff       	call   c000f5b9 <rfree>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	85 f6                	test   esi,esi
c0011505:	74 0c                	je     c0011513 <Virt::setupPageSwapping(int)+0xec>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	8b 06                	mov    eax,DWORD PTR [esi]
c001150c:	56                   	push   esi
c001150d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	83 ec 08             	sub    esp,0x8
c0011516:	a1 a8 e0 02 c0       	mov    eax,ds:0xc002e0a8
c001151b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011521:	8b 10                	mov    edx,DWORD PTR [eax]
c0011523:	68 d7 a5 02 c0       	push   0xc002a5d7
c0011528:	50                   	push   eax
c0011529:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011530:	c6 05 58 ca 02 c0 43 	mov    BYTE PTR ds:0xc002ca58,0x43
c0011537:	c1 e2 0b             	shl    edx,0xb
c001153a:	a3 54 ca 02 c0       	mov    ds:0xc002ca54,eax
c001153f:	89 15 50 ca 02 c0    	mov    DWORD PTR ds:0xc002ca50,edx
c0011545:	c7 05 4c ca 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ca4c,0x8
c001154f:	c1 ea 08             	shr    edx,0x8
c0011552:	89 14 24             	mov    DWORD PTR [esp],edx
c0011555:	e8 3f e0 ff ff       	call   c000f599 <malloc>
c001155a:	83 c4 0c             	add    esp,0xc
c001155d:	89 c1                	mov    ecx,eax
c001155f:	a3 0c dc 02 c0       	mov    ds:0xc002dc0c,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c001156b:	f7 35 4c ca 02 c0    	div    DWORD PTR ds:0xc002ca4c
c0011571:	c1 e8 05             	shr    eax,0x5
c0011574:	50                   	push   eax
c0011575:	6a 00                	push   0x0
c0011577:	51                   	push   ecx
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <memset>
c001157d:	83 c4 20             	add    esp,0x20
c0011580:	5b                   	pop    ebx
c0011581:	5e                   	pop    esi
c0011582:	5f                   	pop    edi
c0011583:	c3                   	ret    
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	68 09 a6 02 c0       	push   0xc002a609
c001158c:	e8 6a 89 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	e9 36 ff ff ff       	jmp    c00114cf <Virt::setupPageSwapping(int)+0xa8>
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	68 ee a5 02 c0       	push   0xc002a5ee
c00115a1:	e8 55 89 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	e9 bc fe ff ff       	jmp    c001146a <Virt::setupPageSwapping(int)+0x43>

c00115ae <VAS::VAS(VAS*)>:
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	68 d8 a3 02 c0       	push   0xc002a3d8
c00115cf:	e8 27 89 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	90                   	nop
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	c3                   	ret    

c00115dc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115e0:	89 c2                	mov    edx,eax
c00115e2:	c1 e8 0a             	shr    eax,0xa
c00115e5:	c1 ea 16             	shr    edx,0x16
c00115e8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115ed:	19 c9                	sbb    ecx,ecx
c00115ef:	c1 e2 0c             	shl    edx,0xc
c00115f2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115f8:	25 fc 0f 00 00       	and    eax,0xffc
c00115fd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011604:	01 d0                	add    eax,edx
c0011606:	c3                   	ret    
c0011607:	90                   	nop

c0011608 <VAS::getPageTableEntry(unsigned long)>:
c0011608:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001160c:	89 ca                	mov    edx,ecx
c001160e:	c1 e9 0a             	shr    ecx,0xa
c0011611:	c1 ea 16             	shr    edx,0x16
c0011614:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001161a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011620:	c1 e0 0c             	shl    eax,0xc
c0011623:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011626:	c3                   	ret    

c0011627 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011627:	57                   	push   edi
c0011628:	56                   	push   esi
c0011629:	be 01 00 00 00       	mov    esi,0x1
c001162e:	53                   	push   ebx
c001162f:	83 ec 10             	sub    esp,0x10
c0011632:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011636:	c1 eb 0c             	shr    ebx,0xc
c0011639:	eb 3f                	jmp    c001167a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001163b:	83 ec 08             	sub    esp,0x8
c001163e:	57                   	push   edi
c001163f:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c0011645:	e8 be ff ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	8b 00                	mov    eax,DWORD PTR [eax]
c001164f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011653:	f6 c4 04             	test   ah,0x4
c0011656:	75 5f                	jne    c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011658:	80 fa 04             	cmp    dl,0x4
c001165b:	74 78                	je     c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001165d:	80 fa 02             	cmp    dl,0x2
c0011660:	0f 84 88 00 00 00    	je     c00116ee <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011666:	80 fa 03             	cmp    dl,0x3
c0011669:	0f 84 ad 00 00 00    	je     c001171c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001166f:	fe ca                	dec    dl
c0011671:	0f 84 92 00 00 00    	je     c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011677:	43                   	inc    ebx
c0011678:	31 f6                	xor    esi,esi
c001167a:	53                   	push   ebx
c001167b:	89 df                	mov    edi,ebx
c001167d:	e8 77 fb ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011682:	c1 e7 0c             	shl    edi,0xc
c0011685:	59                   	pop    ecx
c0011686:	84 c0                	test   al,al
c0011688:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001168c:	75 ad                	jne    c001163b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001168e:	83 ec 0c             	sub    esp,0xc
c0011691:	68 0f a6 02 c0       	push   0xc002a60f
c0011696:	e8 60 88 00 00       	call   c0019efb <Krnl::panic(char const*)>
c001169b:	58                   	pop    eax
c001169c:	5a                   	pop    edx
c001169d:	57                   	push   edi
c001169e:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c00116a4:	e8 5f ff ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116b2:	f6 c4 04             	test   ah,0x4
c00116b5:	74 c0                	je     c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116b7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	50                   	push   eax
c00116c4:	e8 5b e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116d0:	80 fa 04             	cmp    dl,0x4
c00116d3:	75 88                	jne    c001165d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116d5:	89 f0                	mov    eax,esi
c00116d7:	84 c0                	test   al,al
c00116d9:	75 47                	jne    c0011722 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116db:	c7 44 24 20 fc a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a3fc
c00116e3:	83 c4 10             	add    esp,0x10
c00116e6:	5b                   	pop    ebx
c00116e7:	5e                   	pop    esi
c00116e8:	5f                   	pop    edi
c00116e9:	e9 0d 88 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c00116ee:	89 f0                	mov    eax,esi
c00116f0:	84 c0                	test   al,al
c00116f2:	75 15                	jne    c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116f4:	83 ec 0c             	sub    esp,0xc
c00116f7:	68 2b a6 02 c0       	push   0xc002a62b
c00116fc:	e8 fa 87 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	e9 6e ff ff ff       	jmp    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011709:	83 ec 08             	sub    esp,0x8
c001170c:	6a 00                	push   0x0
c001170e:	53                   	push   ebx
c001170f:	e8 b0 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	e9 5b ff ff ff       	jmp    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001171c:	89 f0                	mov    eax,esi
c001171e:	84 c0                	test   al,al
c0011720:	75 15                	jne    c0011737 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011722:	83 ec 08             	sub    esp,0x8
c0011725:	6a 00                	push   0x0
c0011727:	53                   	push   ebx
c0011728:	e8 97 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	83 c4 10             	add    esp,0x10
c0011733:	5b                   	pop    ebx
c0011734:	5e                   	pop    esi
c0011735:	5f                   	pop    edi
c0011736:	c3                   	ret    
c0011737:	c7 44 24 20 47 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a647
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	5b                   	pop    ebx
c0011743:	5e                   	pop    esi
c0011744:	5f                   	pop    edi
c0011745:	e9 b1 87 00 00       	jmp    c0019efb <Krnl::panic(char const*)>

c001174a <VAS::freeAllocatedPages(unsigned long)>:
c001174a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011752:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011756:	74 09                	je     c0011761 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011758:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001175c:	e9 c6 fe ff ff       	jmp    c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011761:	c7 44 24 04 20 a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a420
c0011769:	e9 21 10 00 00       	jmp    c001278f <Dbg::kprintf(char const*, ...)>

c001176e <VAS::virtualToPhysical(unsigned long)>:
c001176e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011772:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011776:	e8 8d fe ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001177b:	5a                   	pop    edx
c001177c:	8b 00                	mov    eax,DWORD PTR [eax]
c001177e:	59                   	pop    ecx
c001177f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VAS::VAS()>:
c0011786:	83 ec 1c             	sub    esp,0x1c
c0011789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001178d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011798:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001179f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117a3:	a3 10 dc 02 c0       	mov    ds:0xc002dc10,eax
c00117a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ac:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00117b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117b4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00117b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117bb:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00117c2:	c7 44 24 08 da 86 00 c0 	mov    DWORD PTR [esp+0x8],0xc00086da
c00117ca:	c7 44 24 04 11 e4 00 c0 	mov    DWORD PTR [esp+0x4],0xc000e411
c00117d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117d6:	05 ff 0f 00 00       	add    eax,0xfff
c00117db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117e4:	81 64 24 04 00 f0 ff ff 	and    DWORD PTR [esp+0x4],0xfffff000
c00117ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00117f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f8:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c00117fc:	73 64                	jae    c0011862 <VAS::VAS()+0xdc>
c00117fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011802:	c1 e0 0c             	shl    eax,0xc
c0011805:	50                   	push   eax
c0011806:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001180a:	e8 f9 fd ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001180f:	83 c4 08             	add    esp,0x8
c0011812:	89 04 24             	mov    DWORD PTR [esp],eax
c0011815:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011818:	8b 00                	mov    eax,DWORD PTR [eax]
c001181a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001181f:	89 c2                	mov    edx,eax
c0011821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011825:	c1 e0 0c             	shl    eax,0xc
c0011828:	83 ec 04             	sub    esp,0x4
c001182b:	52                   	push   edx
c001182c:	50                   	push   eax
c001182d:	68 44 a4 02 c0       	push   0xc002a444
c0011832:	e8 58 0f 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0011837:	83 c4 10             	add    esp,0x10
c001183a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001183d:	8b 00                	mov    eax,DWORD PTR [eax]
c001183f:	80 cc 08             	or     ah,0x8
c0011842:	89 c2                	mov    edx,eax
c0011844:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011847:	89 10                	mov    DWORD PTR [eax],edx
c0011849:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001184c:	8b 00                	mov    eax,DWORD PTR [eax]
c001184e:	80 cc 04             	or     ah,0x4
c0011851:	89 c2                	mov    edx,eax
c0011853:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011856:	89 10                	mov    DWORD PTR [eax],edx
c0011858:	81 44 24 0c 00 10 00 00 	add    DWORD PTR [esp+0xc],0x1000
c0011860:	eb 92                	jmp    c00117f4 <VAS::VAS()+0x6e>
c0011862:	90                   	nop
c0011863:	83 c4 1c             	add    esp,0x1c
c0011866:	c3                   	ret    
c0011867:	90                   	nop

c0011868 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011868:	55                   	push   ebp
c0011869:	57                   	push   edi
c001186a:	56                   	push   esi
c001186b:	53                   	push   ebx
c001186c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011870:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011874:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011878:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001187c:	85 db                	test   ebx,ebx
c001187e:	7e 22                	jle    c00118a2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011880:	c1 e3 0c             	shl    ebx,0xc
c0011883:	01 f3                	add    ebx,esi
c0011885:	56                   	push   esi
c0011886:	81 c6 00 10 00 00    	add    esi,0x1000
c001188c:	55                   	push   ebp
c001188d:	e8 76 fd ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0011892:	5a                   	pop    edx
c0011893:	59                   	pop    ecx
c0011894:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011896:	21 f9                	and    ecx,edi
c0011898:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001189c:	39 f3                	cmp    ebx,esi
c001189e:	89 08                	mov    DWORD PTR [eax],ecx
c00118a0:	75 e3                	jne    c0011885 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00118a2:	5b                   	pop    ebx
c00118a3:	5e                   	pop    esi
c00118a4:	5f                   	pop    edi
c00118a5:	5d                   	pop    ebp
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <VAS::setToWriteCombining(unsigned long, int)>:
c00118a8:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00118ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00118b3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00118ba:	75 01                	jne    c00118bd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00118bc:	c3                   	ret    
c00118bd:	68 80 00 00 00       	push   0x80
c00118c2:	6a ff                	push   0xffffffff
c00118c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d0:	e8 93 ff ff ff       	call   c0011868 <VAS::reflagRange(unsigned long, int, int, int)>
c00118d5:	83 c4 14             	add    esp,0x14
c00118d8:	c3                   	ret    
c00118d9:	90                   	nop

c00118da <VAS::mapOtherVASIn(bool, VAS*)>:
c00118da:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00118e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00118ed:	19 c0                	sbb    eax,eax
c00118ef:	83 ca 03             	or     edx,0x3
c00118f2:	83 e0 fc             	and    eax,0xfffffffc
c00118f5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118fc:	0f 20 d8             	mov    eax,cr3
c00118ff:	0f 22 d8             	mov    cr3,eax
c0011902:	c3                   	ret    
c0011903:	90                   	nop

c0011904 <VAS::~VAS()>:
c0011904:	83 ec 2c             	sub    esp,0x2c
c0011907:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001190f:	fa                   	cli    
c0011910:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0011915:	40                   	inc    eax
c0011916:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001191b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011920:	8b 00                	mov    eax,DWORD PTR [eax]
c0011922:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011925:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001192b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001192f:	6a 01                	push   0x1
c0011931:	50                   	push   eax
c0011932:	e8 a3 ff ff ff       	call   c00118da <VAS::mapOtherVASIn(bool, VAS*)>
c0011937:	83 c4 0c             	add    esp,0xc
c001193a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011942:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001194a:	0f 8f d4 00 00 00    	jg     c0011a24 <VAS::~VAS()+0x120>
c0011950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011954:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011957:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001195b:	c1 e2 02             	shl    edx,0x2
c001195e:	01 d0                	add    eax,edx
c0011960:	8b 00                	mov    eax,DWORD PTR [eax]
c0011962:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196a:	83 e0 01             	and    eax,0x1
c001196d:	0f 84 a8 00 00 00    	je     c0011a1b <VAS::~VAS()+0x117>
c0011973:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001197b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011983:	7f 72                	jg     c00119f7 <VAS::~VAS()+0xf3>
c0011985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011989:	c1 e0 0a             	shl    eax,0xa
c001198c:	89 c2                	mov    edx,eax
c001198e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011992:	01 d0                	add    eax,edx
c0011994:	c1 e0 0c             	shl    eax,0xc
c0011997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00119a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00119a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119a5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00119ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00119af:	6a 01                	push   0x1
c00119b1:	50                   	push   eax
c00119b2:	e8 25 fc ff ff       	call   c00115dc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00119b7:	83 c4 0c             	add    esp,0xc
c00119ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119cc:	25 01 04 00 00       	and    eax,0x401
c00119d1:	3d 01 04 00 00       	cmp    eax,0x401
c00119d6:	75 19                	jne    c00119f1 <VAS::~VAS()+0xed>
c00119d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	50                   	push   eax
c00119e5:	e8 3a df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119f1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119f5:	eb 84                	jmp    c001197b <VAS::~VAS()+0x77>
c00119f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119fb:	25 00 04 00 00       	and    eax,0x400
c0011a00:	74 19                	je     c0011a1b <VAS::~VAS()+0x117>
c0011a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a06:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	50                   	push   eax
c0011a0f:	e8 10 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a14:	83 c4 10             	add    esp,0x10
c0011a17:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a1b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a1f:	e9 1e ff ff ff       	jmp    c0011942 <VAS::~VAS()+0x3e>
c0011a24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	50                   	push   eax
c0011a2f:	e8 f3 fb ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a34:	83 c4 10             	add    esp,0x10
c0011a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a3b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011a3e:	83 ec 0c             	sub    esp,0xc
c0011a41:	50                   	push   eax
c0011a42:	e8 dd de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a52:	c1 e0 02             	shl    eax,0x2
c0011a55:	83 ec 08             	sub    esp,0x8
c0011a58:	50                   	push   eax
c0011a59:	68 6c a4 02 c0       	push   0xc002a46c
c0011a5e:	e8 2c 0d 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0011a6b:	48                   	dec    eax
c0011a6c:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0011a71:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0011a76:	85 c0                	test   eax,eax
c0011a78:	75 01                	jne    c0011a7b <VAS::~VAS()+0x177>
c0011a7a:	fb                   	sti    
c0011a7b:	90                   	nop
c0011a7c:	83 c4 2c             	add    esp,0x2c
c0011a7f:	c3                   	ret    

c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a80:	55                   	push   ebp
c0011a81:	57                   	push   edi
c0011a82:	56                   	push   esi
c0011a83:	53                   	push   ebx
c0011a84:	83 ec 1c             	sub    esp,0x1c
c0011a87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a8f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a95:	77 08                	ja     c0011a9f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a97:	0f 20 d8             	mov    eax,cr3
c0011a9a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a9d:	75 47                	jne    c0011ae6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa3:	09 d8                	or     eax,ebx
c0011aa5:	a9 ff 0f 00 00       	test   eax,0xfff
c0011aaa:	75 57                	jne    c0011b03 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011aac:	89 de                	mov    esi,ebx
c0011aae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ab1:	c1 ee 16             	shr    esi,0x16
c0011ab4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011abb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011abf:	74 54                	je     c0011b15 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ac1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ac5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011acb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011acf:	c1 e6 0c             	shl    esi,0xc
c0011ad2:	c1 eb 0a             	shr    ebx,0xa
c0011ad5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011adb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ade:	83 c4 1c             	add    esp,0x1c
c0011ae1:	5b                   	pop    ebx
c0011ae2:	5e                   	pop    esi
c0011ae3:	5f                   	pop    edi
c0011ae4:	5d                   	pop    ebp
c0011ae5:	c3                   	ret    
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	68 8c a4 02 c0       	push   0xc002a48c
c0011aee:	e8 9c 0c 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011afa:	09 d8                	or     eax,ebx
c0011afc:	a9 ff 0f 00 00       	test   eax,0xfff
c0011b01:	74 a9                	je     c0011aac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b03:	83 ec 0c             	sub    esp,0xc
c0011b06:	68 f4 a4 02 c0       	push   0xc002a4f4
c0011b0b:	e8 eb 83 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011b10:	83 c4 10             	add    esp,0x10
c0011b13:	eb 97                	jmp    c0011aac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b19:	e8 77 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	89 c5                	mov    ebp,eax
c0011b23:	8b 0d 10 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc10
c0011b29:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011b2d:	6a 01                	push   0x1
c0011b2f:	e8 e9 f6 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011b34:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011b3b:	6a 01                	push   0x1
c0011b3d:	50                   	push   eax
c0011b3e:	55                   	push   ebp
c0011b3f:	81 cd 07 04 00 00    	or     ebp,0x407
c0011b45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b49:	51                   	push   ecx
c0011b4a:	e8 27 02 00 00       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	68 00 10 00 00       	push   0x1000
c0011b57:	6a 00                	push   0x0
c0011b59:	50                   	push   eax
c0011b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b5e:	e8 ed eb fe ff       	call   c0000750 <memset>
c0011b63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b6a:	e8 b8 fa ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b73:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b76:	83 c4 10             	add    esp,0x10
c0011b79:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b7c:	e9 40 ff ff ff       	jmp    c0011ac1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b81:	90                   	nop

c0011b82 <VAS::allocatePages(int, int)>:
c0011b82:	55                   	push   ebp
c0011b83:	57                   	push   edi
c0011b84:	56                   	push   esi
c0011b85:	53                   	push   ebx
c0011b86:	83 ec 1c             	sub    esp,0x1c
c0011b89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b8d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0011b92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b98:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b9e:	83 e0 01             	and    eax,0x1
c0011ba1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ba5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ba9:	0f 85 cc 00 00 00    	jne    c0011c7b <VAS::allocatePages(int, int)+0xf9>
c0011baf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	0f 84 a1 00 00 00    	je     c0011c5f <VAS::allocatePages(int, int)+0xdd>
c0011bbe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011bc2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc6:	c1 e6 0c             	shl    esi,0xc
c0011bc9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011bd2:	7e 33                	jle    c0011c07 <VAS::allocatePages(int, int)+0x85>
c0011bd4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011bd8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bdc:	81 cd 00 04 00 00    	or     ebp,0x400
c0011be2:	e8 ae dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011be7:	55                   	push   ebp
c0011be8:	53                   	push   ebx
c0011be9:	50                   	push   eax
c0011bea:	57                   	push   edi
c0011beb:	e8 90 fe ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bf0:	83 c4 10             	add    esp,0x10
c0011bf3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bf8:	74 03                	je     c0011bfd <VAS::allocatePages(int, int)+0x7b>
c0011bfa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bfd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c03:	39 de                	cmp    esi,ebx
c0011c05:	75 db                	jne    c0011be2 <VAS::allocatePages(int, int)+0x60>
c0011c07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c0c:	75 12                	jne    c0011c20 <VAS::allocatePages(int, int)+0x9e>
c0011c0e:	0f 20 d8             	mov    eax,cr3
c0011c11:	0f 22 d8             	mov    cr3,eax
c0011c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c18:	83 c4 1c             	add    esp,0x1c
c0011c1b:	5b                   	pop    ebx
c0011c1c:	5e                   	pop    esi
c0011c1d:	5f                   	pop    edi
c0011c1e:	5d                   	pop    ebp
c0011c1f:	c3                   	ret    
c0011c20:	c1 ee 0a             	shr    esi,0xa
c0011c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c27:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011c2d:	c1 eb 0a             	shr    ebx,0xa
c0011c30:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011c36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c3c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c42:	39 c3                	cmp    ebx,eax
c0011c44:	77 ce                	ja     c0011c14 <VAS::allocatePages(int, int)+0x92>
c0011c46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c4f:	39 d8                	cmp    eax,ebx
c0011c51:	73 f3                	jae    c0011c46 <VAS::allocatePages(int, int)+0xc4>
c0011c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c57:	83 c4 1c             	add    esp,0x1c
c0011c5a:	5b                   	pop    ebx
c0011c5b:	5e                   	pop    esi
c0011c5c:	5f                   	pop    edi
c0011c5d:	5d                   	pop    ebp
c0011c5e:	c3                   	ret    
c0011c5f:	83 ec 0c             	sub    esp,0xc
c0011c62:	68 18 a5 02 c0       	push   0xc002a518
c0011c67:	e8 8f 82 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011c6c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	e9 43 ff ff ff       	jmp    c0011bbe <VAS::allocatePages(int, int)+0x3c>
c0011c7b:	83 ec 0c             	sub    esp,0xc
c0011c7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c82:	e8 96 f5 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011c87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c93:	0f 87 9b 00 00 00    	ja     c0011d34 <VAS::allocatePages(int, int)+0x1b2>
c0011c99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c9d:	85 d2                	test   edx,edx
c0011c9f:	7e 3c                	jle    c0011cdd <VAS::allocatePages(int, int)+0x15b>
c0011ca1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ca5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ca9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011cad:	c1 e5 0c             	shl    ebp,0xc
c0011cb0:	81 ce 00 04 00 00    	or     esi,0x400
c0011cb6:	01 dd                	add    ebp,ebx
c0011cb8:	e8 d8 dc ff ff       	call   c000f995 <Phys::allocatePage()>
c0011cbd:	56                   	push   esi
c0011cbe:	53                   	push   ebx
c0011cbf:	50                   	push   eax
c0011cc0:	57                   	push   edi
c0011cc1:	e8 ba fd ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cc6:	83 c4 10             	add    esp,0x10
c0011cc9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cce:	74 03                	je     c0011cd3 <VAS::allocatePages(int, int)+0x151>
c0011cd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cd9:	39 dd                	cmp    ebp,ebx
c0011cdb:	75 db                	jne    c0011cb8 <VAS::allocatePages(int, int)+0x136>
c0011cdd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ce2:	0f 84 26 ff ff ff    	je     c0011c0e <VAS::allocatePages(int, int)+0x8c>
c0011ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011cec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cf0:	89 d3                	mov    ebx,edx
c0011cf2:	c1 e0 0c             	shl    eax,0xc
c0011cf5:	c1 eb 0a             	shr    ebx,0xa
c0011cf8:	01 d0                	add    eax,edx
c0011cfa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d00:	c1 e8 0a             	shr    eax,0xa
c0011d03:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d0e:	2d 00 00 40 00       	sub    eax,0x400000
c0011d13:	39 c3                	cmp    ebx,eax
c0011d15:	0f 87 f9 fe ff ff    	ja     c0011c14 <VAS::allocatePages(int, int)+0x92>
c0011d1b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d1e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d24:	39 d8                	cmp    eax,ebx
c0011d26:	73 f3                	jae    c0011d1b <VAS::allocatePages(int, int)+0x199>
c0011d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d2c:	83 c4 1c             	add    esp,0x1c
c0011d2f:	5b                   	pop    ebx
c0011d30:	5e                   	pop    esi
c0011d31:	5f                   	pop    edi
c0011d32:	5d                   	pop    ebp
c0011d33:	c3                   	ret    
c0011d34:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0011d39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d3f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011d46:	0f 84 4d ff ff ff    	je     c0011c99 <VAS::allocatePages(int, int)+0x117>
c0011d4c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d54:	e9 40 ff ff ff       	jmp    c0011c99 <VAS::allocatePages(int, int)+0x117>
c0011d59:	90                   	nop

c0011d5a <VAS::setCPUSpecific(unsigned long)>:
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	6a 05                	push   0x5
c0011d5f:	68 00 00 40 c2       	push   0xc2400000
c0011d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d6c:	e8 0f fd ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d71:	83 c4 1c             	add    esp,0x1c
c0011d74:	c3                   	ret    
c0011d75:	90                   	nop

c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d76:	55                   	push   ebp
c0011d77:	57                   	push   edi
c0011d78:	56                   	push   esi
c0011d79:	53                   	push   ebx
c0011d7a:	83 ec 1c             	sub    esp,0x1c
c0011d7d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0011d82:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d8c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d90:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d9a:	83 e0 01             	and    eax,0x1
c0011d9d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011da1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011da5:	85 c0                	test   eax,eax
c0011da7:	7e 39                	jle    c0011de2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011da9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dad:	89 f3                	mov    ebx,esi
c0011daf:	c1 e0 0c             	shl    eax,0xc
c0011db2:	01 f0                	add    eax,esi
c0011db4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011db8:	55                   	push   ebp
c0011db9:	53                   	push   ebx
c0011dba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dbe:	29 f0                	sub    eax,esi
c0011dc0:	01 d8                	add    eax,ebx
c0011dc2:	50                   	push   eax
c0011dc3:	57                   	push   edi
c0011dc4:	e8 b7 fc ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dc9:	83 c4 10             	add    esp,0x10
c0011dcc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd1:	74 03                	je     c0011dd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011dd3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dd6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ddc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011de0:	75 d6                	jne    c0011db8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011de2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011de7:	75 10                	jne    c0011df9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011de9:	0f 20 d8             	mov    eax,cr3
c0011dec:	0f 22 d8             	mov    cr3,eax
c0011def:	83 c4 1c             	add    esp,0x1c
c0011df2:	89 f0                	mov    eax,esi
c0011df4:	5b                   	pop    ebx
c0011df5:	5e                   	pop    esi
c0011df6:	5f                   	pop    edi
c0011df7:	5d                   	pop    ebp
c0011df8:	c3                   	ret    
c0011df9:	89 f3                	mov    ebx,esi
c0011dfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dff:	c1 eb 0a             	shr    ebx,0xa
c0011e02:	c1 e0 0c             	shl    eax,0xc
c0011e05:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e0b:	01 f0                	add    eax,esi
c0011e0d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e13:	c1 e8 0a             	shr    eax,0xa
c0011e16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e1b:	2d 00 00 40 00       	sub    eax,0x400000
c0011e20:	39 c3                	cmp    ebx,eax
c0011e22:	77 cb                	ja     c0011def <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011e24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e2d:	39 d8                	cmp    eax,ebx
c0011e2f:	73 f3                	jae    c0011e24 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011e31:	83 c4 1c             	add    esp,0x1c
c0011e34:	89 f0                	mov    eax,esi
c0011e36:	5b                   	pop    ebx
c0011e37:	5e                   	pop    esi
c0011e38:	5f                   	pop    edi
c0011e39:	5d                   	pop    ebp
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011e3c:	55                   	push   ebp
c0011e3d:	57                   	push   edi
c0011e3e:	56                   	push   esi
c0011e3f:	53                   	push   ebx
c0011e40:	83 ec 1c             	sub    esp,0x1c
c0011e43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e47:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011e4b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011e4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e53:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e58:	75 4a                	jne    c0011ea4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e5e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e61:	c1 eb 16             	shr    ebx,0x16
c0011e64:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e6b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e6f:	74 4d                	je     c0011ebe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e75:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e79:	c1 e8 0a             	shr    eax,0xa
c0011e7c:	80 fa 01             	cmp    dl,0x1
c0011e7f:	19 d2                	sbb    edx,edx
c0011e81:	c1 e3 0c             	shl    ebx,0xc
c0011e84:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e88:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e8e:	25 fc 0f 00 00       	and    eax,0xffc
c0011e93:	01 d8                	add    eax,ebx
c0011e95:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e9c:	83 c4 1c             	add    esp,0x1c
c0011e9f:	5b                   	pop    ebx
c0011ea0:	5e                   	pop    esi
c0011ea1:	5f                   	pop    edi
c0011ea2:	5d                   	pop    ebp
c0011ea3:	c3                   	ret    
c0011ea4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011ea8:	83 ec 0c             	sub    esp,0xc
c0011eab:	68 44 a5 02 c0       	push   0xc002a544
c0011eb0:	e8 46 80 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ebc:	eb 9c                	jmp    c0011e5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011ebe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ec2:	e8 ce da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011ec7:	83 ec 0c             	sub    esp,0xc
c0011eca:	89 c5                	mov    ebp,eax
c0011ecc:	8b 0d 10 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc10
c0011ed2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ed6:	6a 01                	push   0x1
c0011ed8:	e8 40 f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011edd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ee4:	6a 01                	push   0x1
c0011ee6:	50                   	push   eax
c0011ee7:	55                   	push   ebp
c0011ee8:	81 cd 07 04 00 00    	or     ebp,0x407
c0011eee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ef2:	51                   	push   ecx
c0011ef3:	e8 7e fe ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ef8:	83 c4 1c             	add    esp,0x1c
c0011efb:	68 00 10 00 00       	push   0x1000
c0011f00:	6a 00                	push   0x0
c0011f02:	50                   	push   eax
c0011f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f07:	e8 44 e8 fe ff       	call   c0000750 <memset>
c0011f0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f10:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f13:	e8 0f f7 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f18:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f25:	e9 47 ff ff ff       	jmp    c0011e71 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011f2a <VAS::VAS(bool)>:
c0011f2a:	53                   	push   ebx
c0011f2b:	83 ec 28             	sub    esp,0x28
c0011f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f50:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f54:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f57:	e8 39 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f5c:	89 c2                	mov    edx,eax
c0011f5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f62:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f65:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	6a 01                	push   0x1
c0011f70:	e8 a8 f2 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011f75:	83 c4 10             	add    esp,0x10
c0011f78:	89 c2                	mov    edx,eax
c0011f7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f81:	83 ec 0c             	sub    esp,0xc
c0011f84:	6a 03                	push   0x3
c0011f86:	6a 01                	push   0x1
c0011f88:	52                   	push   edx
c0011f89:	50                   	push   eax
c0011f8a:	53                   	push   ebx
c0011f8b:	e8 e6 fd ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f90:	83 c4 20             	add    esp,0x20
c0011f93:	89 c2                	mov    edx,eax
c0011f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f9c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011fa4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011fac:	7f 1c                	jg     c0011fca <VAS::VAS(bool)+0xa0>
c0011fae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fb9:	c1 e2 02             	shl    edx,0x2
c0011fbc:	01 d0                	add    eax,edx
c0011fbe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fc4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fc8:	eb da                	jmp    c0011fa4 <VAS::VAS(bool)+0x7a>
c0011fca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011fd2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011fda:	7f 7a                	jg     c0012056 <VAS::VAS(bool)+0x12c>
c0011fdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fe0:	2d 00 02 00 00       	sub    eax,0x200
c0011fe5:	c1 e0 0c             	shl    eax,0xc
c0011fe8:	83 c8 03             	or     eax,0x3
c0011feb:	89 c2                	mov    edx,eax
c0011fed:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0011ff2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ffe:	83 e0 10             	and    eax,0x10
c0012001:	84 c0                	test   al,al
c0012003:	74 07                	je     c001200c <VAS::VAS(bool)+0xe2>
c0012005:	b8 00 01 00 00       	mov    eax,0x100
c001200a:	eb 05                	jmp    c0012011 <VAS::VAS(bool)+0xe7>
c001200c:	b8 00 00 00 00       	mov    eax,0x0
c0012011:	09 d0                	or     eax,edx
c0012013:	89 c1                	mov    ecx,eax
c0012015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001201c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012020:	c1 e2 02             	shl    edx,0x2
c0012023:	01 d0                	add    eax,edx
c0012025:	89 ca                	mov    edx,ecx
c0012027:	89 10                	mov    DWORD PTR [eax],edx
c0012029:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001202d:	2d 40 03 00 00       	sub    eax,0x340
c0012032:	83 f8 7f             	cmp    eax,0x7f
c0012035:	77 16                	ja     c001204d <VAS::VAS(bool)+0x123>
c0012037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001203b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012042:	c1 e2 02             	shl    edx,0x2
c0012045:	01 d0                	add    eax,edx
c0012047:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001204d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012051:	e9 7c ff ff ff       	jmp    c0011fd2 <VAS::VAS(bool)+0xa8>
c0012056:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001205b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012061:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012067:	83 e0 10             	and    eax,0x10
c001206a:	84 c0                	test   al,al
c001206c:	74 07                	je     c0012075 <VAS::VAS(bool)+0x14b>
c001206e:	b8 03 41 00 00       	mov    eax,0x4103
c0012073:	eb 05                	jmp    c001207a <VAS::VAS(bool)+0x150>
c0012075:	b8 03 40 00 00       	mov    eax,0x4003
c001207a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001207e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012081:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012087:	89 02                	mov    DWORD PTR [edx],eax
c0012089:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001208e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012094:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001209a:	83 ec 08             	sub    esp,0x8
c001209d:	50                   	push   eax
c001209e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120a2:	e8 b3 fc ff ff       	call   c0011d5a <VAS::setCPUSpecific(unsigned long)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120b1:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00120b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120bc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120c2:	83 e0 10             	and    eax,0x10
c00120c5:	84 c0                	test   al,al
c00120c7:	74 07                	je     c00120d0 <VAS::VAS(bool)+0x1a6>
c00120c9:	b8 00 01 00 00       	mov    eax,0x100
c00120ce:	eb 05                	jmp    c00120d5 <VAS::VAS(bool)+0x1ab>
c00120d0:	b8 00 00 00 00       	mov    eax,0x0
c00120d5:	09 c2                	or     edx,eax
c00120d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120de:	05 fc 0f 00 00       	add    eax,0xffc
c00120e3:	83 ca 03             	or     edx,0x3
c00120e6:	89 10                	mov    DWORD PTR [eax],edx
c00120e8:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00120ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	50                   	push   eax
c00120f7:	e8 cc 1d 00 00       	call   c0013ec8 <Device::getName()>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	83 ec 08             	sub    esp,0x8
c0012102:	68 61 a6 02 c0       	push   0xc002a661
c0012107:	50                   	push   eax
c0012108:	e8 8b e7 fe ff       	call   c0000898 <strcmp>
c001210d:	83 c4 10             	add    esp,0x10
c0012110:	85 c0                	test   eax,eax
c0012112:	0f 94 c0             	sete   al
c0012115:	84 c0                	test   al,al
c0012117:	0f 84 87 00 00 00    	je     c00121a4 <VAS::VAS(bool)+0x27a>
c001211d:	fa                   	cli    
c001211e:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0012123:	40                   	inc    eax
c0012124:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0012129:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001212e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012134:	05 7c 09 00 00       	add    eax,0x97c
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	50                   	push   eax
c001213d:	e8 dc ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	25 00 f0 ff ff       	and    eax,0xfffff000
c001214a:	89 c3                	mov    ebx,eax
c001214c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0012151:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012157:	05 7c 09 00 00       	add    eax,0x97c
c001215c:	83 ec 0c             	sub    esp,0xc
c001215f:	50                   	push   eax
c0012160:	e8 b9 ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	83 ec 08             	sub    esp,0x8
c001216b:	50                   	push   eax
c001216c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012170:	e8 93 f4 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	8b 00                	mov    eax,DWORD PTR [eax]
c001217a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001217f:	6a 11                	push   0x11
c0012181:	53                   	push   ebx
c0012182:	50                   	push   eax
c0012183:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012187:	e8 f4 f8 ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0012194:	48                   	dec    eax
c0012195:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001219a:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001219f:	85 c0                	test   eax,eax
c00121a1:	75 01                	jne    c00121a4 <VAS::VAS(bool)+0x27a>
c00121a3:	fb                   	sti    
c00121a4:	90                   	nop
c00121a5:	83 c4 28             	add    esp,0x28
c00121a8:	5b                   	pop    ebx
c00121a9:	c3                   	ret    

c00121aa <VAS::evict(unsigned long)>:
c00121aa:	55                   	push   ebp
c00121ab:	57                   	push   edi
c00121ac:	56                   	push   esi
c00121ad:	53                   	push   ebx
c00121ae:	83 ec 1c             	sub    esp,0x1c
c00121b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121bd:	e8 9c f1 ff ff       	call   c001135e <Virt::allocateSwapfilePage()>
c00121c2:	89 c7                	mov    edi,eax
c00121c4:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c00121c9:	85 c0                	test   eax,eax
c00121cb:	7e 3d                	jle    c001220a <VAS::evict(unsigned long)+0x60>
c00121cd:	89 ee                	mov    esi,ebp
c00121cf:	31 db                	xor    ebx,ebx
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	57                   	push   edi
c00121d5:	e8 72 f1 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c00121da:	89 34 24             	mov    DWORD PTR [esp],esi
c00121dd:	01 d8                	add    eax,ebx
c00121df:	6a 01                	push   0x1
c00121e1:	31 d2                	xor    edx,edx
c00121e3:	43                   	inc    ebx
c00121e4:	52                   	push   edx
c00121e5:	81 c6 00 02 00 00    	add    esi,0x200
c00121eb:	50                   	push   eax
c00121ec:	0f be 05 58 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002ca58
c00121f3:	ff 34 85 9c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2064]
c00121fa:	e8 51 3f 00 00       	call   c0016150 <LogicalDisk::write(unsigned long long, int, void*)>
c00121ff:	83 c4 20             	add    esp,0x20
c0012202:	39 1d 4c ca 02 c0    	cmp    DWORD PTR ds:0xc002ca4c,ebx
c0012208:	7f c7                	jg     c00121d1 <VAS::evict(unsigned long)+0x27>
c001220a:	83 ec 08             	sub    esp,0x8
c001220d:	c1 e7 0b             	shl    edi,0xb
c0012210:	55                   	push   ebp
c0012211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012215:	e8 ee f3 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001221a:	5a                   	pop    edx
c001221b:	89 c6                	mov    esi,eax
c001221d:	59                   	pop    ecx
c001221e:	ff 30                	push   DWORD PTR [eax]
c0012220:	68 6f a6 02 c0       	push   0xc002a66f
c0012225:	e8 65 05 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001222a:	8b 16                	mov    edx,DWORD PTR [esi]
c001222c:	89 d3                	mov    ebx,edx
c001222e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012234:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001223a:	09 d7                	or     edi,edx
c001223c:	89 3e                	mov    DWORD PTR [esi],edi
c001223e:	5e                   	pop    esi
c001223f:	58                   	pop    eax
c0012240:	57                   	push   edi
c0012241:	68 88 a6 02 c0       	push   0xc002a688
c0012246:	e8 44 05 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001224b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001224e:	ff 05 08 dc 02 c0    	inc    DWORD PTR ds:0xc002dc08
c0012254:	e8 cb d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012259:	0f 20 d8             	mov    eax,cr3
c001225c:	0f 22 d8             	mov    cr3,eax
c001225f:	ff 35 08 dc 02 c0    	push   DWORD PTR ds:0xc002dc08
c0012265:	55                   	push   ebp
c0012266:	53                   	push   ebx
c0012267:	68 68 a5 02 c0       	push   0xc002a568
c001226c:	e8 1e 05 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012271:	a1 04 dc 02 c0       	mov    eax,ds:0xc002dc04
c0012276:	c7 44 24 50 a1 a6 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a6a1
c001227e:	8d 50 01             	lea    edx,[eax+0x1]
c0012281:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012285:	89 15 04 dc 02 c0    	mov    DWORD PTR ds:0xc002dc04,edx
c001228b:	83 c4 3c             	add    esp,0x3c
c001228e:	5b                   	pop    ebx
c001228f:	5e                   	pop    esi
c0012290:	5f                   	pop    edi
c0012291:	5d                   	pop    ebp
c0012292:	e9 f8 04 00 00       	jmp    c001278f <Dbg::kprintf(char const*, ...)>
c0012297:	90                   	nop

c0012298 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012298:	55                   	push   ebp
c0012299:	57                   	push   edi
c001229a:	56                   	push   esi
c001229b:	53                   	push   ebx
c001229c:	83 ec 24             	sub    esp,0x24
c001229f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122a7:	68 b2 a6 02 c0       	push   0xc002a6b2
c00122ac:	e8 de 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00122b1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00122b5:	58                   	pop    eax
c00122b6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122bc:	5a                   	pop    edx
c00122bd:	53                   	push   ebx
c00122be:	56                   	push   esi
c00122bf:	e8 44 f3 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00122c4:	59                   	pop    ecx
c00122c5:	89 c5                	mov    ebp,eax
c00122c7:	5f                   	pop    edi
c00122c8:	ff 30                	push   DWORD PTR [eax]
c00122ca:	68 c5 a6 02 c0       	push   0xc002a6c5
c00122cf:	e8 bb 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00122d4:	83 c4 10             	add    esp,0x10
c00122d7:	85 db                	test   ebx,ebx
c00122d9:	74 1d                	je     c00122f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c00122db:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c00122de:	31 c0                	xor    eax,eax
c00122e0:	89 fa                	mov    edx,edi
c00122e2:	81 e2 01 04 00 00    	and    edx,0x401
c00122e8:	81 fa 00 04 00 00    	cmp    edx,0x400
c00122ee:	74 12                	je     c0012302 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c00122f0:	83 c4 1c             	add    esp,0x1c
c00122f3:	5b                   	pop    ebx
c00122f4:	5e                   	pop    esi
c00122f5:	5f                   	pop    edi
c00122f6:	5d                   	pop    ebp
c00122f7:	c3                   	ret    
c00122f8:	83 c4 1c             	add    esp,0x1c
c00122fb:	31 c0                	xor    eax,eax
c00122fd:	5b                   	pop    ebx
c00122fe:	5e                   	pop    esi
c00122ff:	5f                   	pop    edi
c0012300:	5d                   	pop    ebp
c0012301:	c3                   	ret    
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	c1 ef 0b             	shr    edi,0xb
c0012308:	57                   	push   edi
c0012309:	68 d3 a6 02 c0       	push   0xc002a6d3
c001230e:	e8 7c 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012313:	e8 7d d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012318:	59                   	pop    ecx
c0012319:	5a                   	pop    edx
c001231a:	50                   	push   eax
c001231b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001231f:	68 de a6 02 c0       	push   0xc002a6de
c0012324:	e8 66 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012329:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001232d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012330:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012336:	09 d0                	or     eax,edx
c0012338:	0d 01 08 00 00       	or     eax,0x801
c001233d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012340:	59                   	pop    ecx
c0012341:	5d                   	pop    ebp
c0012342:	50                   	push   eax
c0012343:	68 f3 a6 02 c0       	push   0xc002a6f3
c0012348:	e8 42 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001234d:	0f 20 d8             	mov    eax,cr3
c0012350:	83 c4 0c             	add    esp,0xc
c0012353:	56                   	push   esi
c0012354:	50                   	push   eax
c0012355:	68 0b a7 02 c0       	push   0xc002a70b
c001235a:	e8 30 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001235f:	c7 04 24 23 a7 02 c0 	mov    DWORD PTR [esp],0xc002a723
c0012366:	e8 24 04 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0012373:	85 c0                	test   eax,eax
c0012375:	7e 3d                	jle    c00123b4 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c0012377:	89 dd                	mov    ebp,ebx
c0012379:	31 f6                	xor    esi,esi
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	57                   	push   edi
c001237f:	e8 c8 ef ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c0012384:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012387:	01 f0                	add    eax,esi
c0012389:	6a 01                	push   0x1
c001238b:	31 d2                	xor    edx,edx
c001238d:	46                   	inc    esi
c001238e:	52                   	push   edx
c001238f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012395:	50                   	push   eax
c0012396:	0f be 05 58 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002ca58
c001239d:	ff 34 85 9c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2064]
c00123a4:	e8 3b 3d 00 00       	call   c00160e4 <LogicalDisk::read(unsigned long long, int, void*)>
c00123a9:	83 c4 20             	add    esp,0x20
c00123ac:	39 35 4c ca 02 c0    	cmp    DWORD PTR ds:0xc002ca4c,esi
c00123b2:	7f c7                	jg     c001237b <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00123b4:	a1 08 dc 02 c0       	mov    eax,ds:0xc002dc08
c00123b9:	48                   	dec    eax
c00123ba:	52                   	push   edx
c00123bb:	a3 08 dc 02 c0       	mov    ds:0xc002dc08,eax
c00123c0:	50                   	push   eax
c00123c1:	53                   	push   ebx
c00123c2:	68 33 a7 02 c0       	push   0xc002a733
c00123c7:	e8 c3 03 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00123cc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123cf:	e8 5a ef ff ff       	call   c001132e <Virt::freeSwapfilePage(unsigned long)>
c00123d4:	c7 04 24 48 a7 02 c0 	mov    DWORD PTR [esp],0xc002a748
c00123db:	e8 af 03 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00123e0:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	48                   	dec    eax
c00123e9:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00123ee:	85 c0                	test   eax,eax
c00123f0:	74 2d                	je     c001241f <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c00123f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f6:	25 ff 0f 00 00       	and    eax,0xfff
c00123fb:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012400:	77 20                	ja     c0012422 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c0012402:	0f 20 d8             	mov    eax,cr3
c0012405:	0f 22 d8             	mov    cr3,eax
c0012408:	83 ec 0c             	sub    esp,0xc
c001240b:	68 6e a7 02 c0       	push   0xc002a76e
c0012410:	e8 7a 03 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012415:	83 c4 10             	add    esp,0x10
c0012418:	b0 01                	mov    al,0x1
c001241a:	e9 d1 fe ff ff       	jmp    c00122f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001241f:	fb                   	sti    
c0012420:	eb d0                	jmp    c00123f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c0012422:	83 ec 0c             	sub    esp,0xc
c0012425:	68 5e a7 02 c0       	push   0xc002a75e
c001242a:	e8 60 03 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001242f:	83 c4 10             	add    esp,0x10
c0012432:	eb ce                	jmp    c0012402 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012434 <VAS::scanForEviction()>:
c0012434:	55                   	push   ebp
c0012435:	31 ed                	xor    ebp,ebp
c0012437:	57                   	push   edi
c0012438:	56                   	push   esi
c0012439:	53                   	push   ebx
c001243a:	83 ec 0c             	sub    esp,0xc
c001243d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012441:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012444:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001244a:	75 0e                	jne    c001245a <VAS::scanForEviction()+0x26>
c001244c:	89 da                	mov    edx,ebx
c001244e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012451:	c1 ea 16             	shr    edx,0x16
c0012454:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012458:	74 4e                	je     c00124a8 <VAS::scanForEviction()+0x74>
c001245a:	53                   	push   ebx
c001245b:	56                   	push   esi
c001245c:	e8 a7 f1 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0012461:	5a                   	pop    edx
c0012462:	8b 38                	mov    edi,DWORD PTR [eax]
c0012464:	59                   	pop    ecx
c0012465:	89 fa                	mov    edx,edi
c0012467:	81 e2 00 0c 00 00    	and    edx,0xc00
c001246d:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012473:	74 3e                	je     c00124b3 <VAS::scanForEviction()+0x7f>
c0012475:	81 c3 00 10 00 00    	add    ebx,0x1000
c001247b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012481:	76 2b                	jbe    c00124ae <VAS::scanForEviction()+0x7a>
c0012483:	45                   	inc    ebp
c0012484:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001248b:	83 fd 04             	cmp    ebp,0x4
c001248e:	74 3d                	je     c00124cd <VAS::scanForEviction()+0x99>
c0012490:	31 db                	xor    ebx,ebx
c0012492:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012498:	75 c0                	jne    c001245a <VAS::scanForEviction()+0x26>
c001249a:	89 da                	mov    edx,ebx
c001249c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001249f:	c1 ea 16             	shr    edx,0x16
c00124a2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00124a6:	75 b2                	jne    c001245a <VAS::scanForEviction()+0x26>
c00124a8:	81 c3 00 00 40 00    	add    ebx,0x400000
c00124ae:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00124b1:	eb 91                	jmp    c0012444 <VAS::scanForEviction()+0x10>
c00124b3:	f7 c7 01 00 00 00    	test   edi,0x1
c00124b9:	74 ba                	je     c0012475 <VAS::scanForEviction()+0x41>
c00124bb:	f7 c7 20 00 00 00    	test   edi,0x20
c00124c1:	74 22                	je     c00124e5 <VAS::scanForEviction()+0xb1>
c00124c3:	83 e7 df             	and    edi,0xffffffdf
c00124c6:	89 38                	mov    DWORD PTR [eax],edi
c00124c8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124cb:	eb a8                	jmp    c0012475 <VAS::scanForEviction()+0x41>
c00124cd:	83 ec 0c             	sub    esp,0xc
c00124d0:	68 98 a5 02 c0       	push   0xc002a598
c00124d5:	e8 21 7a 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00124da:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	e9 5f ff ff ff       	jmp    c0012444 <VAS::scanForEviction()+0x10>
c00124e5:	83 ec 08             	sub    esp,0x8
c00124e8:	53                   	push   ebx
c00124e9:	56                   	push   esi
c00124ea:	e8 bb fc ff ff       	call   c00121aa <VAS::evict(unsigned long)>
c00124ef:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00124f6:	89 f8                	mov    eax,edi
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012500:	5b                   	pop    ebx
c0012501:	5e                   	pop    esi
c0012502:	5f                   	pop    edi
c0012503:	5d                   	pop    ebp
c0012504:	c3                   	ret    

c0012505 <mapVASFirstTime>:
c0012505:	55                   	push   ebp
c0012506:	57                   	push   edi
c0012507:	56                   	push   esi
c0012508:	53                   	push   ebx
c0012509:	83 ec 0c             	sub    esp,0xc
c001250c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012511:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012514:	4a                   	dec    edx
c0012515:	0f 84 fe 00 00 00    	je     c0012619 <mapVASFirstTime+0x114>
c001251b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001251e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012521:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012526:	c1 e5 15             	shl    ebp,0x15
c0012529:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001252e:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012534:	29 eb                	sub    ebx,ebp
c0012536:	29 ef                	sub    edi,ebp
c0012538:	83 ec 08             	sub    esp,0x8
c001253b:	53                   	push   ebx
c001253c:	68 95 a7 02 c0       	push   0xc002a795
c0012541:	e8 49 02 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012546:	e8 4a d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c001254b:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012552:	6a 01                	push   0x1
c0012554:	53                   	push   ebx
c0012555:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001255b:	50                   	push   eax
c001255c:	56                   	push   esi
c001255d:	e8 14 f8 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012562:	83 c4 20             	add    esp,0x20
c0012565:	39 fb                	cmp    ebx,edi
c0012567:	75 cf                	jne    c0012538 <mapVASFirstTime+0x33>
c0012569:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001256e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012573:	29 eb                	sub    ebx,ebp
c0012575:	29 ef                	sub    edi,ebp
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	53                   	push   ebx
c001257b:	68 b1 a7 02 c0       	push   0xc002a7b1
c0012580:	e8 0a 02 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012585:	58                   	pop    eax
c0012586:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001258a:	5a                   	pop    edx
c001258b:	19 c0                	sbb    eax,eax
c001258d:	83 e0 04             	and    eax,0x4
c0012590:	05 03 04 00 00       	add    eax,0x403
c0012595:	50                   	push   eax
c0012596:	68 fd a6 02 c0       	push   0xc002a6fd
c001259b:	e8 ef 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00125a0:	e8 f0 d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c00125a5:	59                   	pop    ecx
c00125a6:	89 c5                	mov    ebp,eax
c00125a8:	58                   	pop    eax
c00125a9:	55                   	push   ebp
c00125aa:	68 c5 a7 02 c0       	push   0xc002a7c5
c00125af:	e8 db 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00125b4:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00125b8:	19 d2                	sbb    edx,edx
c00125ba:	83 e2 04             	and    edx,0x4
c00125bd:	81 c2 03 0c 00 00    	add    edx,0xc03
c00125c3:	89 14 24             	mov    DWORD PTR [esp],edx
c00125c6:	6a 01                	push   0x1
c00125c8:	53                   	push   ebx
c00125c9:	55                   	push   ebp
c00125ca:	56                   	push   esi
c00125cb:	e8 a6 f7 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125d0:	83 c4 18             	add    esp,0x18
c00125d3:	53                   	push   ebx
c00125d4:	56                   	push   esi
c00125d5:	e8 2e f0 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00125da:	5a                   	pop    edx
c00125db:	59                   	pop    ecx
c00125dc:	ff 30                	push   DWORD PTR [eax]
c00125de:	68 e1 a7 02 c0       	push   0xc002a7e1
c00125e3:	e8 a7 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00125e8:	0f 20 d8             	mov    eax,cr3
c00125eb:	83 c4 0c             	add    esp,0xc
c00125ee:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125f4:	56                   	push   esi
c00125f5:	50                   	push   eax
c00125f6:	68 0b a7 02 c0       	push   0xc002a70b
c00125fb:	e8 8f 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	39 df                	cmp    edi,ebx
c0012605:	0f 85 6c ff ff ff    	jne    c0012577 <mapVASFirstTime+0x72>
c001260b:	0f 20 d8             	mov    eax,cr3
c001260e:	0f 22 d8             	mov    cr3,eax
c0012611:	83 c4 0c             	add    esp,0xc
c0012614:	5b                   	pop    ebx
c0012615:	5e                   	pop    esi
c0012616:	5f                   	pop    edi
c0012617:	5d                   	pop    ebp
c0012618:	c3                   	ret    
c0012619:	83 ec 0c             	sub    esp,0xc
c001261c:	68 7c a7 02 c0       	push   0xc002a77c
c0012621:	e8 69 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012626:	83 c4 10             	add    esp,0x10
c0012629:	83 c4 0c             	add    esp,0xc
c001262c:	5b                   	pop    ebx
c001262d:	5e                   	pop    esi
c001262e:	5f                   	pop    edi
c001262f:	5d                   	pop    ebp
c0012630:	c3                   	ret    

c0012631 <__cxa_atexit>:
c0012631:	31 c0                	xor    eax,eax
c0012633:	c3                   	ret    

c0012634 <__cxa_finalize>:
c0012634:	c3                   	ret    

c0012635 <__stack_chk_fail>:
c0012635:	55                   	push   ebp
c0012636:	89 e5                	mov    ebp,esp
c0012638:	83 ec 14             	sub    esp,0x14
c001263b:	68 ec a7 02 c0       	push   0xc002a7ec
c0012640:	e8 4a 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012645:	58                   	pop    eax
c0012646:	5a                   	pop    edx
c0012647:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001264a:	68 3c a8 02 c0       	push   0xc002a83c
c001264f:	e8 3b 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012654:	59                   	pop    ecx
c0012655:	58                   	pop    eax
c0012656:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012659:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001265c:	68 3c a8 02 c0       	push   0xc002a83c
c0012661:	e8 29 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012666:	5a                   	pop    edx
c0012667:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001266a:	59                   	pop    ecx
c001266b:	8b 00                	mov    eax,DWORD PTR [eax]
c001266d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012670:	68 3c a8 02 c0       	push   0xc002a83c
c0012675:	e8 15 01 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001267a:	5a                   	pop    edx
c001267b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001267e:	59                   	pop    ecx
c001267f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012681:	8b 00                	mov    eax,DWORD PTR [eax]
c0012683:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012686:	68 3c a8 02 c0       	push   0xc002a83c
c001268b:	e8 ff 00 00 00       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0012690:	c7 04 24 44 a8 02 c0 	mov    DWORD PTR [esp],0xc002a844
c0012697:	e8 5f 78 00 00       	call   c0019efb <Krnl::panic(char const*)>
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	c9                   	leave  
c00126a0:	c3                   	ret    

c00126a1 <__cxa_pure_virtual>:
c00126a1:	83 ec 18             	sub    esp,0x18
c00126a4:	68 5c a8 02 c0       	push   0xc002a85c
c00126a9:	e8 4d 78 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00126ae:	83 c4 1c             	add    esp,0x1c
c00126b1:	c3                   	ret    

c00126b2 <operator new[](unsigned long)>:
c00126b2:	e9 e2 ce ff ff       	jmp    c000f599 <malloc>

c00126b7 <operator delete(void*, unsigned long)>:
c00126b7:	e9 fd ce ff ff       	jmp    c000f5b9 <rfree>

c00126bc <operator delete[](void*)>:
c00126bc:	e9 f8 ce ff ff       	jmp    c000f5b9 <rfree>

c00126c1 <operator delete[](void*, unsigned long)>:
c00126c1:	e9 f3 ce ff ff       	jmp    c000f5b9 <rfree>

c00126c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126c6:	55                   	push   ebp
c00126c7:	b9 11 00 00 00       	mov    ecx,0x11
c00126cc:	57                   	push   edi
c00126cd:	56                   	push   esi
c00126ce:	be 5a a2 02 c0       	mov    esi,0xc002a25a
c00126d3:	53                   	push   ebx
c00126d4:	83 ec 20             	sub    esp,0x20
c00126d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126df:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126e3:	fc                   	cld    
c00126e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126e6:	89 ee                	mov    esi,ebp
c00126e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126ec:	eb 02                	jmp    c00126f0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00126ee:	89 c6                	mov    esi,eax
c00126f0:	31 d2                	xor    edx,edx
c00126f2:	41                   	inc    ecx
c00126f3:	89 f0                	mov    eax,esi
c00126f5:	f7 f3                	div    ebx
c00126f7:	39 de                	cmp    esi,ebx
c00126f9:	73 f3                	jae    c00126ee <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00126fb:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00126fe:	eb 02                	jmp    c0012702 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012700:	89 c5                	mov    ebp,eax
c0012702:	31 d2                	xor    edx,edx
c0012704:	49                   	dec    ecx
c0012705:	89 e8                	mov    eax,ebp
c0012707:	f7 f3                	div    ebx
c0012709:	39 dd                	cmp    ebp,ebx
c001270b:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001270f:	88 11                	mov    BYTE PTR [ecx],dl
c0012711:	73 ed                	jae    c0012700 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012713:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012717:	83 c4 20             	add    esp,0x20
c001271a:	5b                   	pop    ebx
c001271b:	5e                   	pop    esi
c001271c:	5f                   	pop    edi
c001271d:	5d                   	pop    ebp
c001271e:	c3                   	ret    

c001271f <Dbg::logc(char)>:
c001271f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012723:	ba fd 03 00 00       	mov    edx,0x3fd
c0012728:	ec                   	in     al,dx
c0012729:	a8 20                	test   al,0x20
c001272b:	74 fb                	je     c0012728 <Dbg::logc(char)+0x9>
c001272d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012732:	88 c8                	mov    al,cl
c0012734:	ee                   	out    dx,al
c0012735:	c3                   	ret    

c0012736 <Dbg::logs(char*)>:
c0012736:	53                   	push   ebx
c0012737:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001273b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001273e:	84 c0                	test   al,al
c0012740:	74 0f                	je     c0012751 <Dbg::logs(char*)+0x1b>
c0012742:	50                   	push   eax
c0012743:	43                   	inc    ebx
c0012744:	e8 d6 ff ff ff       	call   c001271f <Dbg::logc(char)>
c0012749:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001274c:	5a                   	pop    edx
c001274d:	84 c0                	test   al,al
c001274f:	75 f1                	jne    c0012742 <Dbg::logs(char*)+0xc>
c0012751:	5b                   	pop    ebx
c0012752:	c3                   	ret    

c0012753 <Dbg::logWriteInt(unsigned int)>:
c0012753:	83 ec 10             	sub    esp,0x10
c0012756:	6a 0a                	push   0xa
c0012758:	8d 44 24 08          	lea    eax,[esp+0x8]
c001275c:	50                   	push   eax
c001275d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012761:	e8 60 ff ff ff       	call   c00126c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012766:	50                   	push   eax
c0012767:	e8 ca ff ff ff       	call   c0012736 <Dbg::logs(char*)>
c001276c:	83 c4 20             	add    esp,0x20
c001276f:	c3                   	ret    

c0012770 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012770:	83 ec 10             	sub    esp,0x10
c0012773:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012777:	8d 44 24 08          	lea    eax,[esp+0x8]
c001277b:	50                   	push   eax
c001277c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012780:	e8 41 ff ff ff       	call   c00126c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012785:	50                   	push   eax
c0012786:	e8 ab ff ff ff       	call   c0012736 <Dbg::logs(char*)>
c001278b:	83 c4 20             	add    esp,0x20
c001278e:	c3                   	ret    

c001278f <Dbg::kprintf(char const*, ...)>:
c001278f:	55                   	push   ebp
c0012790:	57                   	push   edi
c0012791:	56                   	push   esi
c0012792:	53                   	push   ebx
c0012793:	83 ec 0c             	sub    esp,0xc
c0012796:	8d 44 24 24          	lea    eax,[esp+0x24]
c001279a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001279e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127a5:	84 c0                	test   al,al
c00127a7:	74 4a                	je     c00127f3 <Dbg::kprintf(char const*, ...)+0x64>
c00127a9:	31 db                	xor    ebx,ebx
c00127ab:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127ae:	3c 25                	cmp    al,0x25
c00127b0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127b3:	0f 85 e4 00 00 00    	jne    c001289d <Dbg::kprintf(char const*, ...)+0x10e>
c00127b9:	83 c3 02             	add    ebx,0x2
c00127bc:	8a 07                	mov    al,BYTE PTR [edi]
c00127be:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127c1:	83 e8 25             	sub    eax,0x25
c00127c4:	3c 53                	cmp    al,0x53
c00127c6:	0f 87 ba 00 00 00    	ja     c0012886 <Dbg::kprintf(char const*, ...)+0xf7>
c00127cc:	0f b6 c0             	movzx  eax,al
c00127cf:	ff 24 85 70 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5790]
c00127d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127da:	89 c8                	mov    eax,ecx
c00127dc:	83 c1 04             	add    ecx,0x4
c00127df:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127e3:	ff 30                	push   DWORD PTR [eax]
c00127e5:	e8 69 ff ff ff       	call   c0012753 <Dbg::logWriteInt(unsigned int)>
c00127ea:	5f                   	pop    edi
c00127eb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127ef:	84 c0                	test   al,al
c00127f1:	75 b8                	jne    c00127ab <Dbg::kprintf(char const*, ...)+0x1c>
c00127f3:	83 c4 0c             	add    esp,0xc
c00127f6:	5b                   	pop    ebx
c00127f7:	5e                   	pop    esi
c00127f8:	5f                   	pop    edi
c00127f9:	5d                   	pop    ebp
c00127fa:	c3                   	ret    
c00127fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ff:	89 c8                	mov    eax,ecx
c0012801:	83 c1 04             	add    ecx,0x4
c0012804:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012808:	ff 30                	push   DWORD PTR [eax]
c001280a:	e8 27 ff ff ff       	call   c0012736 <Dbg::logs(char*)>
c001280f:	58                   	pop    eax
c0012810:	eb d9                	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012812:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012816:	89 d0                	mov    eax,edx
c0012818:	83 c2 04             	add    edx,0x4
c001281b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001281f:	ff 30                	push   DWORD PTR [eax]
c0012821:	e8 2d ff ff ff       	call   c0012753 <Dbg::logWriteInt(unsigned int)>
c0012826:	58                   	pop    eax
c0012827:	eb c2                	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012829:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001282d:	89 d0                	mov    eax,edx
c001282f:	83 c2 04             	add    edx,0x4
c0012832:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012835:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012839:	50                   	push   eax
c001283a:	e8 e0 fe ff ff       	call   c001271f <Dbg::logc(char)>
c001283f:	58                   	pop    eax
c0012840:	eb a9                	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012842:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012846:	89 c8                	mov    eax,ecx
c0012848:	83 c1 04             	add    ecx,0x4
c001284b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001284f:	6a 10                	push   0x10
c0012851:	ff 30                	push   DWORD PTR [eax]
c0012853:	e8 18 ff ff ff       	call   c0012770 <Dbg::logWriteIntBase(unsigned int, int)>
c0012858:	59                   	pop    ecx
c0012859:	5f                   	pop    edi
c001285a:	eb 8f                	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c001285c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012860:	89 d0                	mov    eax,edx
c0012862:	83 c2 08             	add    edx,0x8
c0012865:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012869:	6a 10                	push   0x10
c001286b:	ff 30                	push   DWORD PTR [eax]
c001286d:	e8 fe fe ff ff       	call   c0012770 <Dbg::logWriteIntBase(unsigned int, int)>
c0012872:	58                   	pop    eax
c0012873:	5a                   	pop    edx
c0012874:	e9 72 ff ff ff       	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012879:	6a 25                	push   0x25
c001287b:	e8 9f fe ff ff       	call   c001271f <Dbg::logc(char)>
c0012880:	58                   	pop    eax
c0012881:	e9 65 ff ff ff       	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012886:	6a 25                	push   0x25
c0012888:	e8 92 fe ff ff       	call   c001271f <Dbg::logc(char)>
c001288d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012890:	50                   	push   eax
c0012891:	e8 89 fe ff ff       	call   c001271f <Dbg::logc(char)>
c0012896:	5a                   	pop    edx
c0012897:	59                   	pop    ecx
c0012898:	e9 4e ff ff ff       	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c001289d:	50                   	push   eax
c001289e:	89 eb                	mov    ebx,ebp
c00128a0:	e8 7a fe ff ff       	call   c001271f <Dbg::logc(char)>
c00128a5:	89 fd                	mov    ebp,edi
c00128a7:	58                   	pop    eax
c00128a8:	e9 3e ff ff ff       	jmp    c00127eb <Dbg::kprintf(char const*, ...)+0x5c>
c00128ad:	90                   	nop

c00128ae <File::read(unsigned long long, void*, int*)>:
c00128ae:	53                   	push   ebx
c00128af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128be:	3c 19                	cmp    al,0x19
c00128c0:	77 35                	ja     c00128f7 <File::read(unsigned long long, void*, int*)+0x49>
c00128c2:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c00128c9:	85 c0                	test   eax,eax
c00128cb:	74 2a                	je     c00128f7 <File::read(unsigned long long, void*, int*)+0x49>
c00128cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128d3:	85 c0                	test   eax,eax
c00128d5:	74 20                	je     c00128f7 <File::read(unsigned long long, void*, int*)+0x49>
c00128d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128db:	74 21                	je     c00128fe <File::read(unsigned long long, void*, int*)+0x50>
c00128dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128f1:	5b                   	pop    ebx
c00128f2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128f5:	ff e0                	jmp    eax
c00128f7:	b8 0b 00 00 00       	mov    eax,0xb
c00128fc:	eb 05                	jmp    c0012903 <File::read(unsigned long long, void*, int*)+0x55>
c00128fe:	b8 05 00 00 00       	mov    eax,0x5
c0012903:	5b                   	pop    ebx
c0012904:	c3                   	ret    
c0012905:	90                   	nop

c0012906 <File::write(unsigned long long, void*, int*)>:
c0012906:	53                   	push   ebx
c0012907:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001290b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001290f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012916:	3c 19                	cmp    al,0x19
c0012918:	77 35                	ja     c001294f <File::write(unsigned long long, void*, int*)+0x49>
c001291a:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c0012921:	85 c0                	test   eax,eax
c0012923:	74 2a                	je     c001294f <File::write(unsigned long long, void*, int*)+0x49>
c0012925:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001292b:	85 c0                	test   eax,eax
c001292d:	74 20                	je     c001294f <File::write(unsigned long long, void*, int*)+0x49>
c001292f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012933:	74 21                	je     c0012956 <File::write(unsigned long long, void*, int*)+0x50>
c0012935:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012937:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001293b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012941:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012945:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012949:	5b                   	pop    ebx
c001294a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001294d:	ff e0                	jmp    eax
c001294f:	b8 0b 00 00 00       	mov    eax,0xb
c0012954:	eb 05                	jmp    c001295b <File::write(unsigned long long, void*, int*)+0x55>
c0012956:	b8 05 00 00 00       	mov    eax,0x5
c001295b:	5b                   	pop    ebx
c001295c:	c3                   	ret    
c001295d:	90                   	nop

c001295e <Directory::read(unsigned long long, void*, int*)>:
c001295e:	53                   	push   ebx
c001295f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012963:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012967:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001296e:	3c 19                	cmp    al,0x19
c0012970:	77 35                	ja     c00129a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012972:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c0012979:	85 c0                	test   eax,eax
c001297b:	74 2a                	je     c00129a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c001297d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012983:	85 c0                	test   eax,eax
c0012985:	74 20                	je     c00129a7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012987:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001298b:	74 21                	je     c00129ae <Directory::read(unsigned long long, void*, int*)+0x50>
c001298d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001298f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012993:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012999:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001299d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129a1:	5b                   	pop    ebx
c00129a2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129a5:	ff e0                	jmp    eax
c00129a7:	b8 0b 00 00 00       	mov    eax,0xb
c00129ac:	eb 05                	jmp    c00129b3 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129ae:	b8 05 00 00 00       	mov    eax,0x5
c00129b3:	5b                   	pop    ebx
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <Directory::write(unsigned long long, void*, int*)>:
c00129b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ba:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129c1:	b8 0b 00 00 00       	mov    eax,0xb
c00129c6:	80 fa 19             	cmp    dl,0x19
c00129c9:	77 18                	ja     c00129e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129cb:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c00129d2:	85 d2                	test   edx,edx
c00129d4:	74 0d                	je     c00129e3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129d6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129dd:	19 c0                	sbb    eax,eax
c00129df:	83 e0 0a             	and    eax,0xa
c00129e2:	40                   	inc    eax
c00129e3:	c3                   	ret    

c00129e4 <File::isAtty()>:
c00129e4:	31 c0                	xor    eax,eax
c00129e6:	c3                   	ret    
c00129e7:	90                   	nop

c00129e8 <Directory::isAtty()>:
c00129e8:	31 c0                	xor    eax,eax
c00129ea:	c3                   	ret    
c00129eb:	90                   	nop

c00129ec <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129ec:	b8 0a 00 00 00       	mov    eax,0xa
c00129f1:	c3                   	ret    

c00129f2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129f2:	b8 0a 00 00 00       	mov    eax,0xa
c00129f7:	c3                   	ret    

c00129f8 <Filesystem::getFileFirstSector(char const*)>:
c00129f8:	31 c0                	xor    eax,eax
c00129fa:	31 d2                	xor    edx,edx
c00129fc:	c3                   	ret    
c00129fd:	90                   	nop

c00129fe <File::~File()>:
c00129fe:	83 ec 0c             	sub    esp,0xc
c0012a01:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c0012a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0a:	89 10                	mov    DWORD PTR [eax],edx
c0012a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	50                   	push   eax
c0012a14:	e8 a3 e5 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	90                   	nop
c0012a1d:	83 c4 0c             	add    esp,0xc
c0012a20:	c3                   	ret    
c0012a21:	90                   	nop

c0012a22 <File::~File()>:
c0012a22:	83 ec 0c             	sub    esp,0xc
c0012a25:	83 ec 0c             	sub    esp,0xc
c0012a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a2c:	e8 cd ff ff ff       	call   c00129fe <File::~File()>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	83 ec 08             	sub    esp,0x8
c0012a37:	68 14 01 00 00       	push   0x114
c0012a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a40:	e8 72 fc ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	83 c4 0c             	add    esp,0xc
c0012a4b:	c3                   	ret    

c0012a4c <Directory::~Directory()>:
c0012a4c:	83 ec 0c             	sub    esp,0xc
c0012a4f:	ba 4c aa 02 c0       	mov    edx,0xc002aa4c
c0012a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a58:	89 10                	mov    DWORD PTR [eax],edx
c0012a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a5e:	83 ec 0c             	sub    esp,0xc
c0012a61:	50                   	push   eax
c0012a62:	e8 55 e5 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	90                   	nop
c0012a6b:	83 c4 0c             	add    esp,0xc
c0012a6e:	c3                   	ret    
c0012a6f:	90                   	nop

c0012a70 <Directory::~Directory()>:
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	83 ec 0c             	sub    esp,0xc
c0012a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a7a:	e8 cd ff ff ff       	call   c0012a4c <Directory::~Directory()>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	83 ec 08             	sub    esp,0x8
c0012a85:	68 14 01 00 00       	push   0x114
c0012a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a8e:	e8 24 fc ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	83 c4 0c             	add    esp,0xc
c0012a99:	c3                   	ret    

c0012a9a <Filesystem::Filesystem()>:
c0012a9a:	ba c8 a9 02 c0       	mov    edx,0xc002a9c8
c0012a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa3:	89 10                	mov    DWORD PTR [eax],edx
c0012aa5:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0012aab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab6:	a3 14 dc 02 c0       	mov    ds:0xc002dc14,eax
c0012abb:	90                   	nop
c0012abc:	c3                   	ret    
c0012abd:	90                   	nop

c0012abe <Filesystem::~Filesystem()>:
c0012abe:	ba c8 a9 02 c0       	mov    edx,0xc002a9c8
c0012ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ac7:	89 10                	mov    DWORD PTR [eax],edx
c0012ac9:	90                   	nop
c0012aca:	c3                   	ret    
c0012acb:	90                   	nop

c0012acc <Filesystem::~Filesystem()>:
c0012acc:	83 ec 0c             	sub    esp,0xc
c0012acf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ad3:	e8 e6 ff ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c0012ad8:	83 c4 04             	add    esp,0x4
c0012adb:	83 ec 08             	sub    esp,0x8
c0012ade:	6a 08                	push   0x8
c0012ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae4:	e8 ce fb ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	83 c4 0c             	add    esp,0xc
c0012aef:	c3                   	ret    

c0012af0 <Fs::getcwd(Process*, char*, int)>:
c0012af0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af4:	31 c0                	xor    eax,eax
c0012af6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012af9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012afd:	7d 15                	jge    c0012b14 <Fs::getcwd(Process*, char*, int)+0x24>
c0012aff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b03:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b0d:	84 c9                	test   cl,cl
c0012b0f:	74 06                	je     c0012b17 <Fs::getcwd(Process*, char*, int)+0x27>
c0012b11:	40                   	inc    eax
c0012b12:	eb e2                	jmp    c0012af6 <Fs::getcwd(Process*, char*, int)+0x6>
c0012b14:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b17:	31 c0                	xor    eax,eax
c0012b19:	c3                   	ret    

c0012b1a <Fs::initVFS()>:
c0012b1a:	83 ec 18             	sub    esp,0x18
c0012b1d:	6a 08                	push   0x8
c0012b1f:	e8 75 ca ff ff       	call   c000f599 <malloc>
c0012b24:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b27:	e8 d2 de 00 00       	call   c00209fe <FAT::FAT()>
c0012b2c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b33:	e8 61 ca ff ff       	call   c000f599 <malloc>
c0012b38:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b3b:	e8 ca f0 00 00       	call   c0021c0a <ISO9660::ISO9660()>
c0012b40:	83 c4 1c             	add    esp,0x1c
c0012b43:	c3                   	ret    

c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b44:	55                   	push   ebp
c0012b45:	57                   	push   edi
c0012b46:	56                   	push   esi
c0012b47:	53                   	push   ebx
c0012b48:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b4e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b55:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b5c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b63:	68 00 04 00 00       	push   0x400
c0012b68:	6a 00                	push   0x0
c0012b6a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b6e:	56                   	push   esi
c0012b6f:	e8 dc db fe ff       	call   c0000750 <memset>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b7b:	75 0b                	jne    c0012b88 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b7d:	50                   	push   eax
c0012b7e:	50                   	push   eax
c0012b7f:	57                   	push   edi
c0012b80:	56                   	push   esi
c0012b81:	e8 86 dc fe ff       	call   c000080c <strcpy>
c0012b86:	eb 41                	jmp    c0012bc9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b88:	8a 07                	mov    al,BYTE PTR [edi]
c0012b8a:	3c 5c                	cmp    al,0x5c
c0012b8c:	74 04                	je     c0012b92 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b8e:	3c 2f                	cmp    al,0x2f
c0012b90:	75 18                	jne    c0012baa <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b92:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b95:	3c 60                	cmp    al,0x60
c0012b97:	7e 03                	jle    c0012b9c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b99:	83 e8 20             	sub    eax,0x20
c0012b9c:	88 04 24             	mov    BYTE PTR [esp],al
c0012b9f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ba6:	50                   	push   eax
c0012ba7:	50                   	push   eax
c0012ba8:	eb 18                	jmp    c0012bc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012baa:	50                   	push   eax
c0012bab:	50                   	push   eax
c0012bac:	55                   	push   ebp
c0012bad:	56                   	push   esi
c0012bae:	e8 59 dc fe ff       	call   c000080c <strcpy>
c0012bb3:	5a                   	pop    edx
c0012bb4:	59                   	pop    ecx
c0012bb5:	68 aa bc 02 c0       	push   0xc002bcaa
c0012bba:	56                   	push   esi
c0012bbb:	e8 8c dd fe ff       	call   c000094c <strcat>
c0012bc0:	5d                   	pop    ebp
c0012bc1:	58                   	pop    eax
c0012bc2:	57                   	push   edi
c0012bc3:	56                   	push   esi
c0012bc4:	e8 83 dd fe ff       	call   c000094c <strcat>
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bcf:	3c 60                	cmp    al,0x60
c0012bd1:	7e 03                	jle    c0012bd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012bd3:	83 e8 20             	sub    eax,0x20
c0012bd6:	88 04 24             	mov    BYTE PTR [esp],al
c0012bd9:	88 03                	mov    BYTE PTR [ebx],al
c0012bdb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012be2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012be8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bec:	bf 03 00 00 00       	mov    edi,0x3
c0012bf1:	b8 03 00 00 00       	mov    eax,0x3
c0012bf6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bf9:	84 d2                	test   dl,dl
c0012bfb:	0f 84 91 00 00 00    	je     c0012c92 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c01:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c04:	80 fa 5c             	cmp    dl,0x5c
c0012c07:	74 05                	je     c0012c0e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012c09:	80 fa 2f             	cmp    dl,0x2f
c0012c0c:	75 12                	jne    c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c0e:	89 c5                	mov    ebp,eax
c0012c10:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c15:	74 09                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c17:	40                   	inc    eax
c0012c18:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c1c:	89 cf                	mov    edi,ecx
c0012c1e:	eb d6                	jmp    c0012bf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c20:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c25:	75 5b                	jne    c0012c82 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c27:	80 fa 2e             	cmp    dl,0x2e
c0012c2a:	75 56                	jne    c0012c82 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c2c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c30:	74 19                	je     c0012c4b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c32:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c37:	74 53                	je     c0012c8c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c39:	89 f9                	mov    ecx,edi
c0012c3b:	41                   	inc    ecx
c0012c3c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c3f:	80 fa 2f             	cmp    dl,0x2f
c0012c42:	74 f7                	je     c0012c3b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c44:	80 fa 5c             	cmp    dl,0x5c
c0012c47:	74 f2                	je     c0012c3b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c49:	eb d1                	jmp    c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c50:	74 3a                	je     c0012c8c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c52:	83 f8 03             	cmp    eax,0x3
c0012c55:	74 c5                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c57:	41                   	inc    ecx
c0012c58:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c5b:	80 fa 2f             	cmp    dl,0x2f
c0012c5e:	74 f7                	je     c0012c57 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c60:	80 fa 5c             	cmp    dl,0x5c
c0012c63:	74 f2                	je     c0012c57 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c65:	48                   	dec    eax
c0012c66:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c6a:	75 06                	jne    c0012c72 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c70:	eb f3                	jmp    c0012c65 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c72:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c76:	74 07                	je     c0012c7f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c78:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c7c:	48                   	dec    eax
c0012c7d:	eb f3                	jmp    c0012c72 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c7f:	40                   	inc    eax
c0012c80:	eb 9a                	jmp    c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c82:	80 fa 2f             	cmp    dl,0x2f
c0012c85:	74 95                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c87:	80 fa 5c             	cmp    dl,0x5c
c0012c8a:	74 90                	je     c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c8c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c8f:	40                   	inc    eax
c0012c90:	eb 8a                	jmp    c0012c1c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	53                   	push   ebx
c0012c9a:	e8 cd da fe ff       	call   c000076c <strlen>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ca7:	75 26                	jne    c0012ccf <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	53                   	push   ebx
c0012cad:	e8 ba da fe ff       	call   c000076c <strlen>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012cba:	74 26                	je     c0012ce2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	53                   	push   ebx
c0012cc0:	e8 a7 da fe ff       	call   c000076c <strlen>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ccd:	eb c7                	jmp    c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012ccf:	83 ec 0c             	sub    esp,0xc
c0012cd2:	53                   	push   ebx
c0012cd3:	e8 94 da fe ff       	call   c000076c <strlen>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ce0:	74 c7                	je     c0012ca9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ce2:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012ce8:	5b                   	pop    ebx
c0012ce9:	5e                   	pop    esi
c0012cea:	5f                   	pop    edi
c0012ceb:	5d                   	pop    ebp
c0012cec:	c3                   	ret    
c0012ced:	90                   	nop

c0012cee <File::File(char const*, Process*)>:
c0012cee:	83 ec 0c             	sub    esp,0xc
c0012cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf5:	83 ec 08             	sub    esp,0x8
c0012cf8:	6a 00                	push   0x0
c0012cfa:	50                   	push   eax
c0012cfb:	e8 da e0 ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	ba 30 aa 02 c0       	mov    edx,0xc002aa30
c0012d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0c:	89 10                	mov    DWORD PTR [eax],edx
c0012d0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1c:	83 c0 0d             	add    eax,0xd
c0012d1f:	83 ec 04             	sub    esp,0x4
c0012d22:	52                   	push   edx
c0012d23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d27:	50                   	push   eax
c0012d28:	e8 17 fe ff ff       	call   c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012d2d:	83 c4 10             	add    esp,0x10
c0012d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d34:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d37:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d48:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d4c:	90                   	nop
c0012d4d:	83 c4 0c             	add    esp,0xc
c0012d50:	c3                   	ret    
c0012d51:	90                   	nop

c0012d52 <File::open(FileOpenMode)>:
c0012d52:	53                   	push   ebx
c0012d53:	b8 0b 00 00 00       	mov    eax,0xb
c0012d58:	83 ec 08             	sub    esp,0x8
c0012d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d5f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d66:	80 fa 19             	cmp    dl,0x19
c0012d69:	77 40                	ja     c0012dab <File::open(FileOpenMode)+0x59>
c0012d6b:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c0012d72:	85 d2                	test   edx,edx
c0012d74:	74 35                	je     c0012dab <File::open(FileOpenMode)+0x59>
c0012d76:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d7c:	85 d2                	test   edx,edx
c0012d7e:	74 2b                	je     c0012dab <File::open(FileOpenMode)+0x59>
c0012d80:	b8 06 00 00 00       	mov    eax,0x6
c0012d85:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d89:	75 20                	jne    c0012dab <File::open(FileOpenMode)+0x59>
c0012d8b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d8d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d97:	51                   	push   ecx
c0012d98:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d9b:	51                   	push   ecx
c0012d9c:	52                   	push   edx
c0012d9d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012da0:	83 c4 10             	add    esp,0x10
c0012da3:	85 c0                	test   eax,eax
c0012da5:	75 04                	jne    c0012dab <File::open(FileOpenMode)+0x59>
c0012da7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012dab:	83 c4 08             	add    esp,0x8
c0012dae:	5b                   	pop    ebx
c0012daf:	c3                   	ret    

c0012db0 <File::close()>:
c0012db0:	53                   	push   ebx
c0012db1:	b8 0b 00 00 00       	mov    eax,0xb
c0012db6:	83 ec 08             	sub    esp,0x8
c0012db9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dbd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dc4:	80 fa 19             	cmp    dl,0x19
c0012dc7:	77 41                	ja     c0012e0a <File::close()+0x5a>
c0012dc9:	8b 1c 95 a0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f60]
c0012dd0:	85 db                	test   ebx,ebx
c0012dd2:	74 36                	je     c0012e0a <File::close()+0x5a>
c0012dd4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ddb:	74 2d                	je     c0012e0a <File::close()+0x5a>
c0012ddd:	b8 05 00 00 00       	mov    eax,0x5
c0012de2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012de6:	74 22                	je     c0012e0a <File::close()+0x5a>
c0012de8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dec:	8b 04 95 a0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f60]
c0012df3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012df9:	53                   	push   ebx
c0012dfa:	53                   	push   ebx
c0012dfb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dfd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e03:	50                   	push   eax
c0012e04:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	83 c4 08             	add    esp,0x8
c0012e0d:	5b                   	pop    ebx
c0012e0e:	c3                   	ret    
c0012e0f:	90                   	nop

c0012e10 <File::seek(unsigned long long)>:
c0012e10:	56                   	push   esi
c0012e11:	53                   	push   ebx
c0012e12:	b8 0b 00 00 00       	mov    eax,0xb
c0012e17:	51                   	push   ecx
c0012e18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e1c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e20:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e2b:	80 fa 19             	cmp    dl,0x19
c0012e2e:	77 31                	ja     c0012e61 <File::seek(unsigned long long)+0x51>
c0012e30:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c0012e37:	85 d2                	test   edx,edx
c0012e39:	74 26                	je     c0012e61 <File::seek(unsigned long long)+0x51>
c0012e3b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e41:	85 d2                	test   edx,edx
c0012e43:	74 1c                	je     c0012e61 <File::seek(unsigned long long)+0x51>
c0012e45:	b8 05 00 00 00       	mov    eax,0x5
c0012e4a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e4e:	74 11                	je     c0012e61 <File::seek(unsigned long long)+0x51>
c0012e50:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e52:	53                   	push   ebx
c0012e53:	51                   	push   ecx
c0012e54:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e5a:	52                   	push   edx
c0012e5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	5a                   	pop    edx
c0012e62:	5b                   	pop    ebx
c0012e63:	5e                   	pop    esi
c0012e64:	c3                   	ret    
c0012e65:	90                   	nop

c0012e66 <File::tell(unsigned long long*)>:
c0012e66:	83 ec 0c             	sub    esp,0xc
c0012e69:	b8 0b 00 00 00       	mov    eax,0xb
c0012e6e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e72:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e79:	80 fa 19             	cmp    dl,0x19
c0012e7c:	77 34                	ja     c0012eb2 <File::tell(unsigned long long*)+0x4c>
c0012e7e:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c0012e85:	85 d2                	test   edx,edx
c0012e87:	74 29                	je     c0012eb2 <File::tell(unsigned long long*)+0x4c>
c0012e89:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e8f:	85 d2                	test   edx,edx
c0012e91:	74 1f                	je     c0012eb2 <File::tell(unsigned long long*)+0x4c>
c0012e93:	b8 05 00 00 00       	mov    eax,0x5
c0012e98:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e9c:	74 14                	je     c0012eb2 <File::tell(unsigned long long*)+0x4c>
c0012e9e:	50                   	push   eax
c0012e9f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ea1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ea5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eab:	52                   	push   edx
c0012eac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012eaf:	83 c4 10             	add    esp,0x10
c0012eb2:	83 c4 0c             	add    esp,0xc
c0012eb5:	c3                   	ret    

c0012eb6 <File::rewind()>:
c0012eb6:	83 ec 10             	sub    esp,0x10
c0012eb9:	6a 00                	push   0x0
c0012ebb:	6a 00                	push   0x0
c0012ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec1:	e8 4a ff ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c0012ec6:	83 c4 1c             	add    esp,0x1c
c0012ec9:	c3                   	ret    

c0012eca <File::unlink()>:
c0012eca:	83 ec 0c             	sub    esp,0xc
c0012ecd:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012edd:	80 f9 19             	cmp    cl,0x19
c0012ee0:	77 2f                	ja     c0012f11 <File::unlink()+0x47>
c0012ee2:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0012ee9:	85 c9                	test   ecx,ecx
c0012eeb:	74 24                	je     c0012f11 <File::unlink()+0x47>
c0012eed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef3:	85 c9                	test   ecx,ecx
c0012ef5:	74 1a                	je     c0012f11 <File::unlink()+0x47>
c0012ef7:	b8 06 00 00 00       	mov    eax,0x6
c0012efc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f00:	75 0f                	jne    c0012f11 <File::unlink()+0x47>
c0012f02:	83 c2 0d             	add    edx,0xd
c0012f05:	50                   	push   eax
c0012f06:	50                   	push   eax
c0012f07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f09:	52                   	push   edx
c0012f0a:	51                   	push   ecx
c0012f0b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	83 c4 0c             	add    esp,0xc
c0012f14:	c3                   	ret    
c0012f15:	90                   	nop

c0012f16 <File::rename(char const*)>:
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	b8 0b 00 00 00       	mov    eax,0xb
c0012f1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f22:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f29:	80 f9 19             	cmp    cl,0x19
c0012f2c:	77 32                	ja     c0012f60 <File::rename(char const*)+0x4a>
c0012f2e:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0012f35:	85 c9                	test   ecx,ecx
c0012f37:	74 27                	je     c0012f60 <File::rename(char const*)+0x4a>
c0012f39:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f3f:	85 c9                	test   ecx,ecx
c0012f41:	74 1d                	je     c0012f60 <File::rename(char const*)+0x4a>
c0012f43:	b8 06 00 00 00       	mov    eax,0x6
c0012f48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f4c:	75 12                	jne    c0012f60 <File::rename(char const*)+0x4a>
c0012f4e:	83 c2 0d             	add    edx,0xd
c0012f51:	50                   	push   eax
c0012f52:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f58:	52                   	push   edx
c0012f59:	51                   	push   ecx
c0012f5a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	83 c4 0c             	add    esp,0xc
c0012f63:	c3                   	ret    

c0012f64 <File::chfatattr(unsigned char, unsigned char)>:
c0012f64:	57                   	push   edi
c0012f65:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6a:	56                   	push   esi
c0012f6b:	53                   	push   ebx
c0012f6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f7b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f7f:	80 f9 19             	cmp    cl,0x19
c0012f82:	77 37                	ja     c0012fbb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f84:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0012f8b:	85 c9                	test   ecx,ecx
c0012f8d:	74 2c                	je     c0012fbb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f8f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f95:	85 c9                	test   ecx,ecx
c0012f97:	74 22                	je     c0012fbb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f99:	b8 06 00 00 00       	mov    eax,0x6
c0012f9e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fa2:	75 17                	jne    c0012fbb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fa4:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012fa6:	89 f0                	mov    eax,esi
c0012fa8:	83 c2 0d             	add    edx,0xd
c0012fab:	0f b6 f0             	movzx  esi,al
c0012fae:	0f b6 db             	movzx  ebx,bl
c0012fb1:	56                   	push   esi
c0012fb2:	53                   	push   ebx
c0012fb3:	52                   	push   edx
c0012fb4:	51                   	push   ecx
c0012fb5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	5b                   	pop    ebx
c0012fbc:	5e                   	pop    esi
c0012fbd:	5f                   	pop    edi
c0012fbe:	c3                   	ret    
c0012fbf:	90                   	nop

c0012fc0 <File::exists()>:
c0012fc0:	83 ec 0c             	sub    esp,0xc
c0012fc3:	31 c0                	xor    eax,eax
c0012fc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fc9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd0:	80 f9 19             	cmp    cl,0x19
c0012fd3:	77 24                	ja     c0012ff9 <File::exists()+0x39>
c0012fd5:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0012fdc:	85 c9                	test   ecx,ecx
c0012fde:	74 19                	je     c0012ff9 <File::exists()+0x39>
c0012fe0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fe6:	85 c9                	test   ecx,ecx
c0012fe8:	74 0f                	je     c0012ff9 <File::exists()+0x39>
c0012fea:	83 c2 0d             	add    edx,0xd
c0012fed:	50                   	push   eax
c0012fee:	50                   	push   eax
c0012fef:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ff1:	52                   	push   edx
c0012ff2:	51                   	push   ecx
c0012ff3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	83 c4 0c             	add    esp,0xc
c0012ffc:	c3                   	ret    
c0012ffd:	90                   	nop

c0012ffe <File::stat(unsigned long long*, bool*)>:
c0012ffe:	56                   	push   esi
c0012fff:	53                   	push   ebx
c0013000:	50                   	push   eax
c0013001:	b8 0b 00 00 00       	mov    eax,0xb
c0013006:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001300a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001300e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013015:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013019:	80 f9 19             	cmp    cl,0x19
c001301c:	77 3d                	ja     c001305b <File::stat(unsigned long long*, bool*)+0x5d>
c001301e:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0013025:	85 c9                	test   ecx,ecx
c0013027:	74 32                	je     c001305b <File::stat(unsigned long long*, bool*)+0x5d>
c0013029:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001302f:	85 c9                	test   ecx,ecx
c0013031:	74 28                	je     c001305b <File::stat(unsigned long long*, bool*)+0x5d>
c0013033:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013035:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013039:	74 13                	je     c001304e <File::stat(unsigned long long*, bool*)+0x50>
c001303b:	83 ec 04             	sub    esp,0x4
c001303e:	56                   	push   esi
c001303f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013045:	51                   	push   ecx
c0013046:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013049:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001304c:	eb 0a                	jmp    c0013058 <File::stat(unsigned long long*, bool*)+0x5a>
c001304e:	53                   	push   ebx
c001304f:	83 c2 0d             	add    edx,0xd
c0013052:	56                   	push   esi
c0013053:	52                   	push   edx
c0013054:	51                   	push   ecx
c0013055:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	5a                   	pop    edx
c001305c:	5b                   	pop    ebx
c001305d:	5e                   	pop    esi
c001305e:	c3                   	ret    

c001305f <Fs::setcwd(Process*, char*)>:
c001305f:	55                   	push   ebp
c0013060:	57                   	push   edi
c0013061:	56                   	push   esi
c0013062:	53                   	push   ebx
c0013063:	81 ec 20 02 00 00    	sub    esp,0x220
c0013069:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013070:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013076:	57                   	push   edi
c0013077:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001307e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013082:	56                   	push   esi
c0013083:	e8 bc fa ff ff       	call   c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013088:	89 34 24             	mov    DWORD PTR [esp],esi
c001308b:	e8 dc d6 fe ff       	call   c000076c <strlen>
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	83 f8 02             	cmp    eax,0x2
c0013096:	77 17                	ja     c00130af <Fs::setcwd(Process*, char*)+0x50>
c0013098:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001309d:	83 e8 41             	sub    eax,0x41
c00130a0:	83 f8 19             	cmp    eax,0x19
c00130a3:	76 24                	jbe    c00130c9 <Fs::setcwd(Process*, char*)+0x6a>
c00130a5:	b8 03 00 00 00       	mov    eax,0x3
c00130aa:	e9 e0 00 00 00       	jmp    c001318f <Fs::setcwd(Process*, char*)+0x130>
c00130af:	83 ec 0c             	sub    esp,0xc
c00130b2:	56                   	push   esi
c00130b3:	e8 b4 d6 fe ff       	call   c000076c <strlen>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	83 f8 03             	cmp    eax,0x3
c00130be:	75 34                	jne    c00130f4 <Fs::setcwd(Process*, char*)+0x95>
c00130c0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130c5:	75 2d                	jne    c00130f4 <Fs::setcwd(Process*, char*)+0x95>
c00130c7:	eb cf                	jmp    c0013098 <Fs::setcwd(Process*, char*)+0x39>
c00130c9:	8b 14 85 a0 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f60]
c00130d0:	b8 05 00 00 00       	mov    eax,0x5
c00130d5:	85 d2                	test   edx,edx
c00130d7:	0f 84 b2 00 00 00    	je     c001318f <Fs::setcwd(Process*, char*)+0x130>
c00130dd:	b8 06 00 00 00       	mov    eax,0x6
c00130e2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130e9:	0f 85 92 00 00 00    	jne    c0013181 <Fs::setcwd(Process*, char*)+0x122>
c00130ef:	e9 9b 00 00 00       	jmp    c001318f <Fs::setcwd(Process*, char*)+0x130>
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	68 14 01 00 00       	push   0x114
c00130fc:	e8 98 c4 ff ff       	call   c000f599 <malloc>
c0013101:	83 c4 0c             	add    esp,0xc
c0013104:	89 c3                	mov    ebx,eax
c0013106:	55                   	push   ebp
c0013107:	56                   	push   esi
c0013108:	50                   	push   eax
c0013109:	e8 e0 fb ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001310e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013113:	83 c4 0c             	add    esp,0xc
c0013116:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001311a:	50                   	push   eax
c001311b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001311f:	50                   	push   eax
c0013120:	53                   	push   ebx
c0013121:	e8 d8 fe ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c0013126:	83 c4 10             	add    esp,0x10
c0013129:	83 f8 02             	cmp    eax,0x2
c001312c:	74 04                	je     c0013132 <Fs::setcwd(Process*, char*)+0xd3>
c001312e:	85 c0                	test   eax,eax
c0013130:	74 1c                	je     c001314e <Fs::setcwd(Process*, char*)+0xef>
c0013132:	b8 01 00 00 00       	mov    eax,0x1
c0013137:	85 db                	test   ebx,ebx
c0013139:	74 54                	je     c001318f <Fs::setcwd(Process*, char*)+0x130>
c001313b:	83 ec 0c             	sub    esp,0xc
c001313e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013140:	53                   	push   ebx
c0013141:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	b8 01 00 00 00       	mov    eax,0x1
c001314c:	eb 41                	jmp    c001318f <Fs::setcwd(Process*, char*)+0x130>
c001314e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013153:	75 1c                	jne    c0013171 <Fs::setcwd(Process*, char*)+0x112>
c0013155:	b8 02 00 00 00       	mov    eax,0x2
c001315a:	85 db                	test   ebx,ebx
c001315c:	74 31                	je     c001318f <Fs::setcwd(Process*, char*)+0x130>
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013163:	53                   	push   ebx
c0013164:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	b8 02 00 00 00       	mov    eax,0x2
c001316f:	eb 1e                	jmp    c001318f <Fs::setcwd(Process*, char*)+0x130>
c0013171:	85 db                	test   ebx,ebx
c0013173:	74 0c                	je     c0013181 <Fs::setcwd(Process*, char*)+0x122>
c0013175:	83 ec 0c             	sub    esp,0xc
c0013178:	8b 03                	mov    eax,DWORD PTR [ebx]
c001317a:	53                   	push   ebx
c001317b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	50                   	push   eax
c0013182:	50                   	push   eax
c0013183:	56                   	push   esi
c0013184:	57                   	push   edi
c0013185:	e8 82 d6 fe ff       	call   c000080c <strcpy>
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	31 c0                	xor    eax,eax
c001318f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013195:	5b                   	pop    ebx
c0013196:	5e                   	pop    esi
c0013197:	5f                   	pop    edi
c0013198:	5d                   	pop    ebp
c0013199:	c3                   	ret    

c001319a <Directory::Directory(char const*, Process*)>:
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a1:	83 ec 08             	sub    esp,0x8
c00131a4:	6a 00                	push   0x0
c00131a6:	50                   	push   eax
c00131a7:	e8 2e dc ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c00131ac:	83 c4 10             	add    esp,0x10
c00131af:	ba 4c aa 02 c0       	mov    edx,0xc002aa4c
c00131b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b8:	89 10                	mov    DWORD PTR [eax],edx
c00131ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c8:	83 c0 0d             	add    eax,0xd
c00131cb:	83 ec 04             	sub    esp,0x4
c00131ce:	52                   	push   edx
c00131cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d3:	50                   	push   eax
c00131d4:	e8 6b f9 ff ff       	call   c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131e3:	8d 50 bf             	lea    edx,[eax-0x41]
c00131e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131f8:	90                   	nop
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	c3                   	ret    
c00131fd:	90                   	nop

c00131fe <Directory::open()>:
c00131fe:	53                   	push   ebx
c00131ff:	b8 0b 00 00 00       	mov    eax,0xb
c0013204:	83 ec 08             	sub    esp,0x8
c0013207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001320b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013212:	80 fa 19             	cmp    dl,0x19
c0013215:	77 3d                	ja     c0013254 <Directory::open()+0x56>
c0013217:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c001321e:	85 d2                	test   edx,edx
c0013220:	74 32                	je     c0013254 <Directory::open()+0x56>
c0013222:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013228:	85 d2                	test   edx,edx
c001322a:	74 28                	je     c0013254 <Directory::open()+0x56>
c001322c:	b8 06 00 00 00       	mov    eax,0x6
c0013231:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013235:	75 1d                	jne    c0013254 <Directory::open()+0x56>
c0013237:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001323d:	50                   	push   eax
c001323e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013240:	51                   	push   ecx
c0013241:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013244:	51                   	push   ecx
c0013245:	52                   	push   edx
c0013246:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	85 c0                	test   eax,eax
c001324e:	75 04                	jne    c0013254 <Directory::open()+0x56>
c0013250:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013254:	83 c4 08             	add    esp,0x8
c0013257:	5b                   	pop    ebx
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Directory::close()>:
c001325a:	53                   	push   ebx
c001325b:	b8 0b 00 00 00       	mov    eax,0xb
c0013260:	83 ec 08             	sub    esp,0x8
c0013263:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013267:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001326e:	80 fa 19             	cmp    dl,0x19
c0013271:	77 41                	ja     c00132b4 <Directory::close()+0x5a>
c0013273:	8b 1c 95 a0 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f60]
c001327a:	85 db                	test   ebx,ebx
c001327c:	74 36                	je     c00132b4 <Directory::close()+0x5a>
c001327e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013285:	74 2d                	je     c00132b4 <Directory::close()+0x5a>
c0013287:	b8 05 00 00 00       	mov    eax,0x5
c001328c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013290:	74 22                	je     c00132b4 <Directory::close()+0x5a>
c0013292:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013296:	8b 04 95 a0 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f60]
c001329d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132a3:	53                   	push   ebx
c00132a4:	53                   	push   ebx
c00132a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00132a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132ad:	50                   	push   eax
c00132ae:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132b1:	83 c4 10             	add    esp,0x10
c00132b4:	83 c4 08             	add    esp,0x8
c00132b7:	5b                   	pop    ebx
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop

c00132ba <Directory::unlink()>:
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	b8 0b 00 00 00       	mov    eax,0xb
c00132c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132cd:	80 f9 19             	cmp    cl,0x19
c00132d0:	77 2f                	ja     c0013301 <Directory::unlink()+0x47>
c00132d2:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c00132d9:	85 c9                	test   ecx,ecx
c00132db:	74 24                	je     c0013301 <Directory::unlink()+0x47>
c00132dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132e3:	85 c9                	test   ecx,ecx
c00132e5:	74 1a                	je     c0013301 <Directory::unlink()+0x47>
c00132e7:	b8 06 00 00 00       	mov    eax,0x6
c00132ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132f0:	75 0f                	jne    c0013301 <Directory::unlink()+0x47>
c00132f2:	83 c2 0d             	add    edx,0xd
c00132f5:	50                   	push   eax
c00132f6:	50                   	push   eax
c00132f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f9:	52                   	push   edx
c00132fa:	51                   	push   ecx
c00132fb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	83 c4 0c             	add    esp,0xc
c0013304:	c3                   	ret    
c0013305:	90                   	nop

c0013306 <Directory::rename(char const*)>:
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	b8 0b 00 00 00       	mov    eax,0xb
c001330e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013312:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013319:	80 f9 19             	cmp    cl,0x19
c001331c:	77 32                	ja     c0013350 <Directory::rename(char const*)+0x4a>
c001331e:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0013325:	85 c9                	test   ecx,ecx
c0013327:	74 27                	je     c0013350 <Directory::rename(char const*)+0x4a>
c0013329:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001332f:	85 c9                	test   ecx,ecx
c0013331:	74 1d                	je     c0013350 <Directory::rename(char const*)+0x4a>
c0013333:	b8 06 00 00 00       	mov    eax,0x6
c0013338:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001333c:	75 12                	jne    c0013350 <Directory::rename(char const*)+0x4a>
c001333e:	83 c2 0d             	add    edx,0xd
c0013341:	50                   	push   eax
c0013342:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013344:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013348:	52                   	push   edx
c0013349:	51                   	push   ecx
c001334a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	83 c4 0c             	add    esp,0xc
c0013353:	c3                   	ret    

c0013354 <Directory::exists()>:
c0013354:	83 ec 0c             	sub    esp,0xc
c0013357:	31 c0                	xor    eax,eax
c0013359:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001335d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013364:	80 f9 19             	cmp    cl,0x19
c0013367:	77 24                	ja     c001338d <Directory::exists()+0x39>
c0013369:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c0013370:	85 c9                	test   ecx,ecx
c0013372:	74 19                	je     c001338d <Directory::exists()+0x39>
c0013374:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337a:	85 c9                	test   ecx,ecx
c001337c:	74 0f                	je     c001338d <Directory::exists()+0x39>
c001337e:	83 c2 0d             	add    edx,0xd
c0013381:	50                   	push   eax
c0013382:	50                   	push   eax
c0013383:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013385:	52                   	push   edx
c0013386:	51                   	push   ecx
c0013387:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	83 c4 0c             	add    esp,0xc
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <Directory::read(dirent*)>:
c0013392:	83 ec 1c             	sub    esp,0x1c
c0013395:	b8 0b 00 00 00       	mov    eax,0xb
c001339a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001339e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133a5:	80 fa 19             	cmp    dl,0x19
c00133a8:	77 30                	ja     c00133da <Directory::read(dirent*)+0x48>
c00133aa:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c00133b1:	85 d2                	test   edx,edx
c00133b3:	74 25                	je     c00133da <Directory::read(dirent*)+0x48>
c00133b5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133bc:	74 1c                	je     c00133da <Directory::read(dirent*)+0x48>
c00133be:	83 ec 0c             	sub    esp,0xc
c00133c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133c7:	52                   	push   edx
c00133c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133cc:	6a 00                	push   0x0
c00133ce:	68 10 01 00 00       	push   0x110
c00133d3:	51                   	push   ecx
c00133d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133d7:	83 c4 20             	add    esp,0x20
c00133da:	83 c4 1c             	add    esp,0x1c
c00133dd:	c3                   	ret    

c00133de <Directory::create()>:
c00133de:	83 ec 0c             	sub    esp,0xc
c00133e1:	b8 0b 00 00 00       	mov    eax,0xb
c00133e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133f1:	80 f9 19             	cmp    cl,0x19
c00133f4:	77 2f                	ja     c0013425 <Directory::create()+0x47>
c00133f6:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c00133fd:	85 c9                	test   ecx,ecx
c00133ff:	74 24                	je     c0013425 <Directory::create()+0x47>
c0013401:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013407:	85 c9                	test   ecx,ecx
c0013409:	74 1a                	je     c0013425 <Directory::create()+0x47>
c001340b:	b8 06 00 00 00       	mov    eax,0x6
c0013410:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013414:	75 0f                	jne    c0013425 <Directory::create()+0x47>
c0013416:	83 c2 0d             	add    edx,0xd
c0013419:	50                   	push   eax
c001341a:	50                   	push   eax
c001341b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001341d:	52                   	push   edx
c001341e:	51                   	push   ecx
c001341f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	83 c4 0c             	add    esp,0xc
c0013428:	c3                   	ret    
c0013429:	90                   	nop

c001342a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001342a:	b8 0a 00 00 00       	mov    eax,0xa
c001342f:	c3                   	ret    

c0013430 <Bus::Bus(char const*)>:
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013437:	83 ec 08             	sub    esp,0x8
c001343a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343e:	50                   	push   eax
c001343f:	e8 88 09 00 00       	call   c0013dcc <Device::Device(char const*)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c001344c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013450:	89 10                	mov    DWORD PTR [eax],edx
c0013452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013456:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013460:	90                   	nop
c0013461:	83 c4 0c             	add    esp,0xc
c0013464:	c3                   	ret    
c0013465:	90                   	nop

c0013466 <Bus::~Bus()>:
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	ba 68 aa 02 c0       	mov    edx,0xc002aa68
c001346e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013472:	89 10                	mov    DWORD PTR [eax],edx
c0013474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013478:	83 ec 0c             	sub    esp,0xc
c001347b:	50                   	push   eax
c001347c:	e8 15 06 00 00       	call   c0013a96 <Device::~Device()>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	90                   	nop
c0013485:	83 c4 0c             	add    esp,0xc
c0013488:	c3                   	ret    
c0013489:	90                   	nop

c001348a <Bus::~Bus()>:
c001348a:	83 ec 0c             	sub    esp,0xc
c001348d:	83 ec 0c             	sub    esp,0xc
c0013490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013494:	e8 cd ff ff ff       	call   c0013466 <Bus::~Bus()>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 ec 08             	sub    esp,0x8
c001349f:	68 58 01 00 00       	push   0x158
c00134a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a8:	e8 0a f2 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	83 c4 0c             	add    esp,0xc
c00134b3:	c3                   	ret    

c00134b4 <Buzzer::Buzzer(char const*)>:
c00134b4:	83 ec 0c             	sub    esp,0xc
c00134b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bb:	83 ec 08             	sub    esp,0x8
c00134be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c2:	50                   	push   eax
c00134c3:	e8 04 09 00 00       	call   c0013dcc <Device::Device(char const*)>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	89 10                	mov    DWORD PTR [eax],edx
c00134d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134f2:	90                   	nop
c00134f3:	83 c4 0c             	add    esp,0xc
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <Buzzer::~Buzzer()>:
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0013500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013504:	89 10                	mov    DWORD PTR [eax],edx
c0013506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350a:	83 ec 0c             	sub    esp,0xc
c001350d:	50                   	push   eax
c001350e:	e8 83 05 00 00       	call   c0013a96 <Device::~Device()>
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	90                   	nop
c0013517:	83 c4 0c             	add    esp,0xc
c001351a:	c3                   	ret    
c001351b:	90                   	nop

c001351c <Buzzer::~Buzzer()>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	83 ec 0c             	sub    esp,0xc
c0013522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013526:	e8 cd ff ff ff       	call   c00134f8 <Buzzer::~Buzzer()>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	83 ec 08             	sub    esp,0x8
c0013531:	68 5c 01 00 00       	push   0x15c
c0013536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353a:	e8 78 f1 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	83 c4 0c             	add    esp,0xc
c0013545:	c3                   	ret    

c0013546 <Buzzer::stop()>:
c0013546:	83 ec 14             	sub    esp,0x14
c0013549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001354d:	8b 10                	mov    edx,DWORD PTR [eax]
c001354f:	6a 00                	push   0x0
c0013551:	50                   	push   eax
c0013552:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013555:	83 c4 1c             	add    esp,0x1c
c0013558:	c3                   	ret    

c0013559 <beepThread(void*)>:
c0013559:	53                   	push   ebx
c001355a:	83 ec 08             	sub    esp,0x8
c001355d:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0013562:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013566:	48                   	dec    eax
c0013567:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001356c:	75 01                	jne    c001356f <beepThread(void*)+0x16>
c001356e:	fb                   	sti    
c001356f:	50                   	push   eax
c0013570:	50                   	push   eax
c0013571:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013576:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001357c:	52                   	push   edx
c001357d:	50                   	push   eax
c001357e:	e8 e2 a7 00 00       	call   c001dd65 <nanoSleep(unsigned long long)>
c0013583:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013586:	e8 bb ff ff ff       	call   c0013546 <Buzzer::stop()>
c001358b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013593:	83 c4 18             	add    esp,0x18
c0013596:	5b                   	pop    ebx
c0013597:	e9 c5 a6 00 00       	jmp    c001dc61 <blockTask(TaskState)>

c001359c <Buzzer::beep(int, int, bool)>:
c001359c:	57                   	push   edi
c001359d:	56                   	push   esi
c001359e:	53                   	push   ebx
c001359f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135ab:	52                   	push   edx
c00135ac:	52                   	push   edx
c00135ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00135af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b3:	56                   	push   esi
c00135b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135b7:	83 c4 10             	add    esp,0x10
c00135ba:	89 f8                	mov    eax,edi
c00135bc:	84 c0                	test   al,al
c00135be:	74 1f                	je     c00135df <Buzzer::beep(int, int, bool)+0x43>
c00135c0:	50                   	push   eax
c00135c1:	50                   	push   eax
c00135c2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135c8:	99                   	cdq    
c00135c9:	52                   	push   edx
c00135ca:	50                   	push   eax
c00135cb:	e8 95 a7 00 00       	call   c001dd65 <nanoSleep(unsigned long long)>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135d7:	5b                   	pop    ebx
c00135d8:	5e                   	pop    esi
c00135d9:	5f                   	pop    edi
c00135da:	e9 67 ff ff ff       	jmp    c0013546 <Buzzer::stop()>
c00135df:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135e5:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00135ea:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135f2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135f6:	c7 44 24 14 59 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013559
c00135fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013602:	5b                   	pop    ebx
c0013603:	5e                   	pop    esi
c0013604:	5f                   	pop    edi
c0013605:	e9 5c a2 00 00       	jmp    c001d866 <Process::createThread(void (*)(void*), void*, int)>

c001360a <User::loadClockSettings(int)>:
c001360a:	53                   	push   ebx
c001360b:	83 ec 14             	sub    esp,0x14
c001360e:	68 14 01 00 00       	push   0x114
c0013613:	e8 81 bf ff ff       	call   c000f599 <malloc>
c0013618:	83 c4 0c             	add    esp,0xc
c001361b:	89 c3                	mov    ebx,eax
c001361d:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c0013623:	68 bc aa 02 c0       	push   0xc002aabc
c0013628:	50                   	push   eax
c0013629:	e8 c0 f6 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001362e:	58                   	pop    eax
c001362f:	5a                   	pop    edx
c0013630:	6a 01                	push   0x1
c0013632:	53                   	push   ebx
c0013633:	e8 1a f7 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c0013638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001363b:	e8 70 f7 ff ff       	call   c0012db0 <File::close()>
c0013640:	83 c4 10             	add    esp,0x10
c0013643:	85 db                	test   ebx,ebx
c0013645:	74 0f                	je     c0013656 <User::loadClockSettings(int)+0x4c>
c0013647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013649:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001364d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013650:	83 c4 08             	add    esp,0x8
c0013653:	5b                   	pop    ebx
c0013654:	ff e0                	jmp    eax
c0013656:	83 c4 08             	add    esp,0x8
c0013659:	5b                   	pop    ebx
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <Clock::Clock(char const*)>:
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013663:	83 ec 08             	sub    esp,0x8
c0013666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366a:	50                   	push   eax
c001366b:	e8 5c 07 00 00       	call   c0013dcc <Device::Device(char const*)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001367c:	89 10                	mov    DWORD PTR [eax],edx
c001367e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013682:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001368c:	90                   	nop
c001368d:	83 c4 0c             	add    esp,0xc
c0013690:	c3                   	ret    
c0013691:	90                   	nop

c0013692 <Clock::~Clock()>:
c0013692:	83 ec 0c             	sub    esp,0xc
c0013695:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c001369a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001369e:	89 10                	mov    DWORD PTR [eax],edx
c00136a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a4:	83 ec 0c             	sub    esp,0xc
c00136a7:	50                   	push   eax
c00136a8:	e8 e9 03 00 00       	call   c0013a96 <Device::~Device()>
c00136ad:	83 c4 10             	add    esp,0x10
c00136b0:	90                   	nop
c00136b1:	83 c4 0c             	add    esp,0xc
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop

c00136b6 <Clock::~Clock()>:
c00136b6:	83 ec 0c             	sub    esp,0xc
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c0:	e8 cd ff ff ff       	call   c0013692 <Clock::~Clock()>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	83 ec 08             	sub    esp,0x8
c00136cb:	68 58 01 00 00       	push   0x158
c00136d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136d4:	e8 de ef ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00136d9:	83 c4 10             	add    esp,0x10
c00136dc:	83 c4 0c             	add    esp,0xc
c00136df:	c3                   	ret    

c00136e0 <Clock::timeInSecondsLocal()>:
c00136e0:	53                   	push   ebx
c00136e1:	83 ec 14             	sub    esp,0x14
c00136e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ea:	50                   	push   eax
c00136eb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136ee:	0f b6 0d 1c dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc1c
c00136f5:	03 0d 20 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc20
c00136fb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013701:	89 cb                	mov    ebx,ecx
c0013703:	c1 fb 1f             	sar    ebx,0x1f
c0013706:	01 c8                	add    eax,ecx
c0013708:	11 da                	adc    edx,ebx
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	31 c9                	xor    ecx,ecx
c001370f:	80 3d 1d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc1d,0x0
c0013716:	74 05                	je     c001371d <Clock::timeInSecondsLocal()+0x3d>
c0013718:	b9 08 07 00 00       	mov    ecx,0x708
c001371d:	31 db                	xor    ebx,ebx
c001371f:	01 c8                	add    eax,ecx
c0013721:	11 da                	adc    edx,ebx
c0013723:	83 c4 08             	add    esp,0x8
c0013726:	5b                   	pop    ebx
c0013727:	c3                   	ret    

c0013728 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013728:	57                   	push   edi
c0013729:	56                   	push   esi
c001372a:	53                   	push   ebx
c001372b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001372f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013733:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013735:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013739:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001373c:	0f b6 05 1c dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc1c
c0013743:	03 05 20 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc20
c0013749:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001374f:	99                   	cdq    
c0013750:	29 c6                	sub    esi,eax
c0013752:	19 d7                	sbb    edi,edx
c0013754:	89 f0                	mov    eax,esi
c0013756:	89 fa                	mov    edx,edi
c0013758:	31 f6                	xor    esi,esi
c001375a:	80 3d 1d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc1d,0x0
c0013761:	74 05                	je     c0013768 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013763:	be 08 07 00 00       	mov    esi,0x708
c0013768:	31 ff                	xor    edi,edi
c001376a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001376e:	29 f0                	sub    eax,esi
c0013770:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013774:	19 fa                	sbb    edx,edi
c0013776:	89 d8                	mov    eax,ebx
c0013778:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001377c:	5b                   	pop    ebx
c001377d:	5e                   	pop    esi
c001377e:	5f                   	pop    edi
c001377f:	ff e0                	jmp    eax

c0013781 <datetimeToSeconds(datetime_t)>:
c0013781:	55                   	push   ebp
c0013782:	57                   	push   edi
c0013783:	56                   	push   esi
c0013784:	53                   	push   ebx
c0013785:	83 ec 14             	sub    esp,0x14
c0013788:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001378c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013790:	89 d3                	mov    ebx,edx
c0013792:	0f b6 c6             	movzx  eax,dh
c0013795:	c1 eb 10             	shr    ebx,0x10
c0013798:	48                   	dec    eax
c0013799:	66 81 eb 6c 07       	sub    bx,0x76c
c001379e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137a2:	0f b6 f5             	movzx  esi,ch
c00137a5:	89 cf                	mov    edi,ecx
c00137a7:	6b f6 3c             	imul   esi,esi,0x3c
c00137aa:	c1 ef 10             	shr    edi,0x10
c00137ad:	0f b6 c9             	movzx  ecx,cl
c00137b0:	89 f8                	mov    eax,edi
c00137b2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137b8:	0f b6 f8             	movzx  edi,al
c00137bb:	0f b6 d2             	movzx  edx,dl
c00137be:	01 fe                	add    esi,edi
c00137c0:	01 f1                	add    ecx,esi
c00137c2:	0f b7 f3             	movzx  esi,bx
c00137c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137c9:	c1 f9 1f             	sar    ecx,0x1f
c00137cc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137d5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137da:	8b 0c 8d 20 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd54e0]
c00137e1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137e5:	76 29                	jbe    c0013810 <datetimeToSeconds(datetime_t)+0x8f>
c00137e7:	f6 c3 03             	test   bl,0x3
c00137ea:	75 24                	jne    c0013810 <datetimeToSeconds(datetime_t)+0x8f>
c00137ec:	31 d2                	xor    edx,edx
c00137ee:	bf 64 00 00 00       	mov    edi,0x64
c00137f3:	89 d8                	mov    eax,ebx
c00137f5:	66 f7 f7             	div    di
c00137f8:	66 85 d2             	test   dx,dx
c00137fb:	75 12                	jne    c001380f <datetimeToSeconds(datetime_t)+0x8e>
c00137fd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013803:	bf 90 01 00 00       	mov    edi,0x190
c0013808:	99                   	cdq    
c0013809:	f7 ff                	idiv   edi
c001380b:	85 d2                	test   edx,edx
c001380d:	75 01                	jne    c0013810 <datetimeToSeconds(datetime_t)+0x8f>
c001380f:	41                   	inc    ecx
c0013810:	66 83 fb 46          	cmp    bx,0x46
c0013814:	76 45                	jbe    c001385b <datetimeToSeconds(datetime_t)+0xda>
c0013816:	bb 46 00 00 00       	mov    ebx,0x46
c001381b:	bf 64 00 00 00       	mov    edi,0x64
c0013820:	bd 90 01 00 00       	mov    ebp,0x190
c0013825:	b8 6d 01 00 00       	mov    eax,0x16d
c001382a:	f6 c3 03             	test   bl,0x3
c001382d:	75 23                	jne    c0013852 <datetimeToSeconds(datetime_t)+0xd1>
c001382f:	89 d8                	mov    eax,ebx
c0013831:	99                   	cdq    
c0013832:	f7 ff                	idiv   edi
c0013834:	b8 6e 01 00 00       	mov    eax,0x16e
c0013839:	85 d2                	test   edx,edx
c001383b:	75 15                	jne    c0013852 <datetimeToSeconds(datetime_t)+0xd1>
c001383d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013843:	99                   	cdq    
c0013844:	f7 fd                	idiv   ebp
c0013846:	83 fa 01             	cmp    edx,0x1
c0013849:	19 c0                	sbb    eax,eax
c001384b:	f7 d0                	not    eax
c001384d:	05 6e 01 00 00       	add    eax,0x16e
c0013852:	01 c1                	add    ecx,eax
c0013854:	43                   	inc    ebx
c0013855:	39 f3                	cmp    ebx,esi
c0013857:	7c cc                	jl     c0013825 <datetimeToSeconds(datetime_t)+0xa4>
c0013859:	eb 35                	jmp    c0013890 <datetimeToSeconds(datetime_t)+0x10f>
c001385b:	74 33                	je     c0013890 <datetimeToSeconds(datetime_t)+0x10f>
c001385d:	b8 45 00 00 00       	mov    eax,0x45
c0013862:	89 c2                	mov    edx,eax
c0013864:	83 e2 03             	and    edx,0x3
c0013867:	39 f0                	cmp    eax,esi
c0013869:	7e 0f                	jle    c001387a <datetimeToSeconds(datetime_t)+0xf9>
c001386b:	83 fa 01             	cmp    edx,0x1
c001386e:	19 d2                	sbb    edx,edx
c0013870:	48                   	dec    eax
c0013871:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013878:	eb e8                	jmp    c0013862 <datetimeToSeconds(datetime_t)+0xe1>
c001387a:	b8 6d 01 00 00       	mov    eax,0x16d
c001387f:	85 d2                	test   edx,edx
c0013881:	75 0b                	jne    c001388e <datetimeToSeconds(datetime_t)+0x10d>
c0013883:	66 83 fb 01          	cmp    bx,0x1
c0013887:	19 c0                	sbb    eax,eax
c0013889:	05 6e 01 00 00       	add    eax,0x16e
c001388e:	29 c1                	sub    ecx,eax
c0013890:	b8 80 51 01 00       	mov    eax,0x15180
c0013895:	f7 e9                	imul   ecx
c0013897:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001389b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001389f:	83 c4 14             	add    esp,0x14
c00138a2:	5b                   	pop    ebx
c00138a3:	5e                   	pop    esi
c00138a4:	5f                   	pop    edi
c00138a5:	5d                   	pop    ebp
c00138a6:	c3                   	ret    
c00138a7:	90                   	nop

c00138a8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00138a8:	57                   	push   edi
c00138a9:	56                   	push   esi
c00138aa:	53                   	push   ebx
c00138ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138af:	8b 06                	mov    eax,DWORD PTR [esi]
c00138b1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00138b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138bc:	e8 c0 fe ff ff       	call   c0013781 <datetimeToSeconds(datetime_t)>
c00138c1:	59                   	pop    ecx
c00138c2:	0f b6 0d 1c dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc1c
c00138c9:	5b                   	pop    ebx
c00138ca:	03 0d 20 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc20
c00138d0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138d6:	89 cb                	mov    ebx,ecx
c00138d8:	c1 fb 1f             	sar    ebx,0x1f
c00138db:	29 c8                	sub    eax,ecx
c00138dd:	19 da                	sbb    edx,ebx
c00138df:	31 c9                	xor    ecx,ecx
c00138e1:	80 3d 1d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc1d,0x0
c00138e8:	74 05                	je     c00138ef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138ea:	b9 08 07 00 00       	mov    ecx,0x708
c00138ef:	31 db                	xor    ebx,ebx
c00138f1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138f5:	29 c8                	sub    eax,ecx
c00138f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138fb:	19 da                	sbb    edx,ebx
c00138fd:	89 f8                	mov    eax,edi
c00138ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013903:	5b                   	pop    ebx
c0013904:	5e                   	pop    esi
c0013905:	5f                   	pop    edi
c0013906:	ff e0                	jmp    eax

c0013908 <secondsToDatetime(unsigned long long)>:
c0013908:	55                   	push   ebp
c0013909:	57                   	push   edi
c001390a:	56                   	push   esi
c001390b:	53                   	push   ebx
c001390c:	83 ec 1c             	sub    esp,0x1c
c001390f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013913:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013917:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001391b:	6a 00                	push   0x0
c001391d:	68 80 51 01 00       	push   0x15180
c0013922:	55                   	push   ebp
c0013923:	57                   	push   edi
c0013924:	e8 ab 2e 01 00       	call   c00267d4 <__udivdi3>
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013936:	6a 00                	push   0x0
c0013938:	68 80 51 01 00       	push   0x15180
c001393d:	55                   	push   ebp
c001393e:	57                   	push   edi
c001393f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013944:	e8 8b 2f 01 00       	call   c00268d4 <__umoddi3>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	99                   	cdq    
c001394d:	f7 ff                	idiv   edi
c001394f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013954:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013957:	89 d0                	mov    eax,edx
c0013959:	99                   	cdq    
c001395a:	f7 ff                	idiv   edi
c001395c:	85 db                	test   ebx,ebx
c001395e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013961:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013964:	79 11                	jns    c0013977 <secondsToDatetime(unsigned long long)+0x6f>
c0013966:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001396a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013970:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013975:	eb 07                	jmp    c001397e <secondsToDatetime(unsigned long long)+0x76>
c0013977:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001397c:	89 d8                	mov    eax,ebx
c001397e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013983:	99                   	cdq    
c0013984:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013989:	f7 f9                	idiv   ecx
c001398b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013990:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013994:	31 d2                	xor    edx,edx
c0013996:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001399e:	01 c3                	add    ebx,eax
c00139a0:	89 d8                	mov    eax,ebx
c00139a2:	f7 f1                	div    ecx
c00139a4:	31 d2                	xor    edx,edx
c00139a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00139a9:	89 d8                	mov    eax,ebx
c00139ab:	f7 f7                	div    edi
c00139ad:	31 d2                	xor    edx,edx
c00139af:	29 c1                	sub    ecx,eax
c00139b1:	89 d8                	mov    eax,ebx
c00139b3:	f7 f5                	div    ebp
c00139b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00139ba:	29 c1                	sub    ecx,eax
c00139bc:	31 d2                	xor    edx,edx
c00139be:	89 c8                	mov    eax,ecx
c00139c0:	f7 f5                	div    ebp
c00139c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139cb:	31 d2                	xor    edx,edx
c00139cd:	89 c8                	mov    eax,ecx
c00139cf:	f7 f5                	div    ebp
c00139d1:	31 d2                	xor    edx,edx
c00139d3:	01 c3                	add    ebx,eax
c00139d5:	89 c8                	mov    eax,ecx
c00139d7:	f7 f7                	div    edi
c00139d9:	bf 99 00 00 00       	mov    edi,0x99
c00139de:	29 c3                	sub    ebx,eax
c00139e0:	31 d2                	xor    edx,edx
c00139e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139ea:	29 c3                	sub    ebx,eax
c00139ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139f2:	bb 05 00 00 00       	mov    ebx,0x5
c00139f7:	83 c1 02             	add    ecx,0x2
c00139fa:	89 c8                	mov    eax,ecx
c00139fc:	f7 f7                	div    edi
c00139fe:	31 d2                	xor    edx,edx
c0013a00:	89 c7                	mov    edi,eax
c0013a02:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013a08:	83 c0 02             	add    eax,0x2
c0013a0b:	f7 f3                	div    ebx
c0013a0d:	89 eb                	mov    ebx,ebp
c0013a0f:	29 c3                	sub    ebx,eax
c0013a11:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a17:	88 1e                	mov    BYTE PTR [esi],bl
c0013a19:	19 c0                	sbb    eax,eax
c0013a1b:	31 d2                	xor    edx,edx
c0013a1d:	83 e0 0c             	and    eax,0xc
c0013a20:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a24:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a2c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a30:	83 f9 01             	cmp    ecx,0x1
c0013a33:	0f 96 c2             	setbe  dl
c0013a36:	41                   	inc    ecx
c0013a37:	01 d0                	add    eax,edx
c0013a39:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a3c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a40:	83 c4 1c             	add    esp,0x1c
c0013a43:	89 f0                	mov    eax,esi
c0013a45:	5b                   	pop    ebx
c0013a46:	5e                   	pop    esi
c0013a47:	5f                   	pop    edi
c0013a48:	5d                   	pop    ebp
c0013a49:	c2 04 00             	ret    0x4

c0013a4c <Clock::timeInDatetimeLocal()>:
c0013a4c:	53                   	push   ebx
c0013a4d:	83 ec 14             	sub    esp,0x14
c0013a50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a58:	e8 83 fc ff ff       	call   c00136e0 <Clock::timeInSecondsLocal()>
c0013a5d:	83 c4 0c             	add    esp,0xc
c0013a60:	52                   	push   edx
c0013a61:	50                   	push   eax
c0013a62:	53                   	push   ebx
c0013a63:	e8 a0 fe ff ff       	call   c0013908 <secondsToDatetime(unsigned long long)>
c0013a68:	89 d8                	mov    eax,ebx
c0013a6a:	83 c4 14             	add    esp,0x14
c0013a6d:	5b                   	pop    ebx
c0013a6e:	c2 04 00             	ret    0x4
c0013a71:	90                   	nop

c0013a72 <Device::hibernate()>:
c0013a72:	c3                   	ret    
c0013a73:	90                   	nop

c0013a74 <Device::wake()>:
c0013a74:	c3                   	ret    
c0013a75:	90                   	nop

c0013a76 <Device::detect()>:
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <Device::disableLegacy()>:
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Device::powerSaving(PowerSavingLevel)>:
c0013a7a:	c3                   	ret    
c0013a7b:	90                   	nop

c0013a7c <DriverlessDevice::close(int, int, void*)>:
c0013a7c:	31 c0                	xor    eax,eax
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <DriverlessDevice::detect()>:
c0013a80:	c3                   	ret    
c0013a81:	90                   	nop

c0013a82 <DriverlessDevice::open(int, int, void*)>:
c0013a82:	83 ec 18             	sub    esp,0x18
c0013a85:	68 50 ab 02 c0       	push   0xc002ab50
c0013a8a:	e8 6c 64 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0013a8f:	83 c8 ff             	or     eax,0xffffffff
c0013a92:	83 c4 1c             	add    esp,0x1c
c0013a95:	c3                   	ret    

c0013a96 <Device::~Device()>:
c0013a96:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0013a9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a9f:	89 10                	mov    DWORD PTR [eax],edx
c0013aa1:	90                   	nop
c0013aa2:	c3                   	ret    
c0013aa3:	90                   	nop

c0013aa4 <Device::~Device()>:
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013aab:	e8 e6 ff ff ff       	call   c0013a96 <Device::~Device()>
c0013ab0:	83 c4 04             	add    esp,0x4
c0013ab3:	83 ec 08             	sub    esp,0x8
c0013ab6:	68 58 01 00 00       	push   0x158
c0013abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013abf:	e8 f3 eb ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0013ac4:	83 c4 10             	add    esp,0x10
c0013ac7:	83 c4 0c             	add    esp,0xc
c0013aca:	c3                   	ret    
c0013acb:	90                   	nop

c0013acc <Device::findAndLoadDriver()>:
c0013acc:	c7 44 24 04 6e ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab6e
c0013ad4:	e9 b6 ec ff ff       	jmp    c001278f <Dbg::kprintf(char const*, ...)>
c0013ad9:	90                   	nop

c0013ada <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ada:	57                   	push   edi
c0013adb:	b9 09 00 00 00       	mov    ecx,0x9
c0013ae0:	56                   	push   esi
c0013ae1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ae5:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013ae9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013af3:	81 c7 18 01 00 00    	add    edi,0x118
c0013af9:	fc                   	cld    
c0013afa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013afc:	5e                   	pop    esi
c0013afd:	5f                   	pop    edi
c0013afe:	c3                   	ret    
c0013aff:	90                   	nop

c0013b00 <Device::preOpenACPI(void*, char*, char*)>:
c0013b00:	57                   	push   edi
c0013b01:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013b06:	56                   	push   esi
c0013b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013b19:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013b1f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013b25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b2b:	b9 0e 00 00 00       	mov    ecx,0xe
c0013b30:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013b36:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b3c:	5e                   	pop    esi
c0013b3d:	5f                   	pop    edi
c0013b3e:	c3                   	ret    
c0013b3f:	90                   	nop

c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b44:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b49:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b50:	75 0b                	jne    c0013b5d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b54:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b5b:	eb 1e                	jmp    c0013b7b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b5d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0013b62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b68:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b78:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b7b:	ff e0                	jmp    eax
c0013b7d:	90                   	nop

c0013b7e <Device::getParent()>:
c0013b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b82:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b88:	c3                   	ret    
c0013b89:	90                   	nop

c0013b8a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b8e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b93:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b9a:	75 0b                	jne    c0013ba7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b9e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ba2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ba5:	eb 1e                	jmp    c0013bc5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ba7:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0013bac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013bb2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013bb8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bc2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013bc5:	ff e0                	jmp    eax
c0013bc7:	90                   	nop

c0013bc8 <Device::addChild(Device*)>:
c0013bc8:	53                   	push   ebx
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013bda:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013be0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013be2:	85 d2                	test   edx,edx
c0013be4:	74 04                	je     c0013bea <Device::addChild(Device*)+0x22>
c0013be6:	89 d3                	mov    ebx,edx
c0013be8:	eb f6                	jmp    c0013be0 <Device::addChild(Device*)+0x18>
c0013bea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bed:	83 ec 0c             	sub    esp,0xc
c0013bf0:	6a 08                	push   0x8
c0013bf2:	e8 a2 b9 ff ff       	call   c000f599 <malloc>
c0013bf7:	89 03                	mov    DWORD PTR [ebx],eax
c0013bf9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c06:	83 c4 18             	add    esp,0x18
c0013c09:	5b                   	pop    ebx
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <Device::removeAllChildren()>:
c0013c0c:	56                   	push   esi
c0013c0d:	53                   	push   ebx
c0013c0e:	52                   	push   edx
c0013c0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c13:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c1c:	74 17                	je     c0013c35 <Device::removeAllChildren()+0x29>
c0013c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c21:	85 c0                	test   eax,eax
c0013c23:	74 0c                	je     c0013c31 <Device::removeAllChildren()+0x25>
c0013c25:	83 ec 0c             	sub    esp,0xc
c0013c28:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c2a:	50                   	push   eax
c0013c2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c33:	eb e4                	jmp    c0013c19 <Device::removeAllChildren()+0xd>
c0013c35:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c41:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c4e:	58                   	pop    eax
c0013c4f:	5b                   	pop    ebx
c0013c50:	5e                   	pop    esi
c0013c51:	c3                   	ret    

c0013c52 <Device::hibernateAll()>:
c0013c52:	53                   	push   ebx
c0013c53:	83 ec 14             	sub    esp,0x14
c0013c56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c5c:	53                   	push   ebx
c0013c5d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c6c:	74 0f                	je     c0013c7d <Device::hibernateAll()+0x2b>
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c74:	e8 d9 ff ff ff       	call   c0013c52 <Device::hibernateAll()>
c0013c79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7b:	eb e9                	jmp    c0013c66 <Device::hibernateAll()+0x14>
c0013c7d:	83 c4 08             	add    esp,0x8
c0013c80:	5b                   	pop    ebx
c0013c81:	c3                   	ret    

c0013c82 <Device::wakeAll()>:
c0013c82:	53                   	push   ebx
c0013c83:	83 ec 14             	sub    esp,0x14
c0013c86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8c:	53                   	push   ebx
c0013c8d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c9c:	74 0f                	je     c0013cad <Device::wakeAll()+0x2b>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ca4:	e8 d9 ff ff ff       	call   c0013c82 <Device::wakeAll()>
c0013ca9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cab:	eb e9                	jmp    c0013c96 <Device::wakeAll()+0x14>
c0013cad:	83 c4 08             	add    esp,0x8
c0013cb0:	5b                   	pop    ebx
c0013cb1:	c3                   	ret    

c0013cb2 <Device::detectAll()>:
c0013cb2:	53                   	push   ebx
c0013cb3:	83 ec 14             	sub    esp,0x14
c0013cb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cbc:	53                   	push   ebx
c0013cbd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013cc0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ccc:	74 0f                	je     c0013cdd <Device::detectAll()+0x2b>
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd4:	e8 d9 ff ff ff       	call   c0013cb2 <Device::detectAll()>
c0013cd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdb:	eb e9                	jmp    c0013cc6 <Device::detectAll()+0x14>
c0013cdd:	83 c4 08             	add    esp,0x8
c0013ce0:	5b                   	pop    ebx
c0013ce1:	c3                   	ret    

c0013ce2 <Device::disableLegacyAll()>:
c0013ce2:	53                   	push   ebx
c0013ce3:	83 ec 14             	sub    esp,0x14
c0013ce6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cec:	53                   	push   ebx
c0013ced:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cf0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cfc:	74 0f                	je     c0013d0d <Device::disableLegacyAll()+0x2b>
c0013cfe:	83 ec 0c             	sub    esp,0xc
c0013d01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d04:	e8 d9 ff ff ff       	call   c0013ce2 <Device::disableLegacyAll()>
c0013d09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d0b:	eb e9                	jmp    c0013cf6 <Device::disableLegacyAll()+0x14>
c0013d0d:	83 c4 08             	add    esp,0x8
c0013d10:	5b                   	pop    ebx
c0013d11:	c3                   	ret    

c0013d12 <Device::loadDriversForAll()>:
c0013d12:	53                   	push   ebx
c0013d13:	83 ec 08             	sub    esp,0x8
c0013d16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d1a:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013d21:	75 0c                	jne    c0013d2f <Device::loadDriversForAll()+0x1d>
c0013d23:	83 ec 0c             	sub    esp,0xc
c0013d26:	53                   	push   ebx
c0013d27:	e8 a0 fd ff ff       	call   c0013acc <Device::findAndLoadDriver()>
c0013d2c:	83 c4 10             	add    esp,0x10
c0013d2f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d38:	74 12                	je     c0013d4c <Device::loadDriversForAll()+0x3a>
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d40:	e8 cd ff ff ff       	call   c0013d12 <Device::loadDriversForAll()>
c0013d45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	eb e9                	jmp    c0013d35 <Device::loadDriversForAll()+0x23>
c0013d4c:	83 c4 08             	add    esp,0x8
c0013d4f:	5b                   	pop    ebx
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::closeAll()>:
c0013d52:	53                   	push   ebx
c0013d53:	83 ec 08             	sub    esp,0x8
c0013d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d5c:	6a 00                	push   0x0
c0013d5e:	6a 00                	push   0x0
c0013d60:	6a 00                	push   0x0
c0013d62:	53                   	push   ebx
c0013d63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d6c:	83 c4 10             	add    esp,0x10
c0013d6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d72:	74 0f                	je     c0013d83 <Device::closeAll()+0x31>
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d7a:	e8 d3 ff ff ff       	call   c0013d52 <Device::closeAll()>
c0013d7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d81:	eb e9                	jmp    c0013d6c <Device::closeAll()+0x1a>
c0013d83:	83 c4 08             	add    esp,0x8
c0013d86:	5b                   	pop    ebx
c0013d87:	c3                   	ret    

c0013d88 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d88:	56                   	push   esi
c0013d89:	53                   	push   ebx
c0013d8a:	83 ec 0c             	sub    esp,0xc
c0013d8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d97:	56                   	push   esi
c0013d98:	53                   	push   ebx
c0013d99:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da2:	83 c4 10             	add    esp,0x10
c0013da5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da8:	74 0f                	je     c0013db9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013daa:	52                   	push   edx
c0013dab:	52                   	push   edx
c0013dac:	56                   	push   esi
c0013dad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013db0:	e8 d3 ff ff ff       	call   c0013d88 <Device::powerSavingAll(PowerSavingLevel)>
c0013db5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013db7:	eb e9                	jmp    c0013da2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013db9:	58                   	pop    eax
c0013dba:	5b                   	pop    ebx
c0013dbb:	5e                   	pop    esi
c0013dbc:	c3                   	ret    
c0013dbd:	90                   	nop

c0013dbe <Device::setName(char const*)>:
c0013dbe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013dc6:	e9 41 ca fe ff       	jmp    c000080c <strcpy>
c0013dcb:	90                   	nop

c0013dcc <Device::Device(char const*)>:
c0013dcc:	83 ec 1c             	sub    esp,0x1c
c0013dcf:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0013dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd8:	89 10                	mov    DWORD PTR [eax],edx
c0013dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dde:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e08:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e12:	83 ec 08             	sub    esp,0x8
c0013e15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1d:	e8 9c ff ff ff       	call   c0013dbe <Device::setName(char const*)>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e2d:	83 ec 0c             	sub    esp,0xc
c0013e30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e34:	e8 60 b7 ff ff       	call   c000f599 <malloc>
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e4d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e57:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e67:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e78:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e83:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e9c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eaa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ec2:	90                   	nop
c0013ec3:	83 c4 1c             	add    esp,0x1c
c0013ec6:	c3                   	ret    
c0013ec7:	90                   	nop

c0013ec8 <Device::getName()>:
c0013ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ecc:	05 d0 00 00 00       	add    eax,0xd0
c0013ed1:	c3                   	ret    

c0013ed2 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ed2:	83 ec 0c             	sub    esp,0xc
c0013ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed9:	83 ec 08             	sub    esp,0x8
c0013edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ee0:	50                   	push   eax
c0013ee1:	e8 e6 fe ff ff       	call   c0013dcc <Device::Device(char const*)>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	ba dc ab 02 c0       	mov    edx,0xc002abdc
c0013eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef2:	89 10                	mov    DWORD PTR [eax],edx
c0013ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f02:	90                   	nop
c0013f03:	83 c4 0c             	add    esp,0xc
c0013f06:	c3                   	ret    
c0013f07:	90                   	nop

c0013f08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013f08:	57                   	push   edi
c0013f09:	56                   	push   esi
c0013f0a:	53                   	push   ebx
c0013f0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f17:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013f1d:	75 0c                	jne    c0013f2b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013f1f:	52                   	push   edx
c0013f20:	52                   	push   edx
c0013f21:	53                   	push   ebx
c0013f22:	56                   	push   esi
c0013f23:	e8 e8 47 01 00       	call   c0028710 <LinkedList<Device>::addElement(Device*)>
c0013f28:	83 c4 10             	add    esp,0x10
c0013f2b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f34:	74 12                	je     c0013f48 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f36:	50                   	push   eax
c0013f37:	57                   	push   edi
c0013f38:	56                   	push   esi
c0013f39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f3c:	e8 c7 ff ff ff       	call   c0013f08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	eb e9                	jmp    c0013f31 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f48:	5b                   	pop    ebx
c0013f49:	5e                   	pop    esi
c0013f4a:	5f                   	pop    edi
c0013f4b:	c3                   	ret    

c0013f4c <getDevicesOfType(DeviceType)>:
c0013f4c:	53                   	push   ebx
c0013f4d:	83 ec 14             	sub    esp,0x14
c0013f50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f54:	53                   	push   ebx
c0013f55:	e8 92 48 01 00       	call   c00287ec <LinkedList<Device>::LinkedList()>
c0013f5a:	83 c4 0c             	add    esp,0xc
c0013f5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f61:	53                   	push   ebx
c0013f62:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0013f68:	e8 9b ff ff ff       	call   c0013f08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f6d:	89 d8                	mov    eax,ebx
c0013f6f:	83 c4 18             	add    esp,0x18
c0013f72:	5b                   	pop    ebx
c0013f73:	c2 04 00             	ret    0x4

c0013f76 <HardDiskController::HardDiskController(char const*)>:
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7d:	83 ec 08             	sub    esp,0x8
c0013f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f84:	50                   	push   eax
c0013f85:	e8 42 fe ff ff       	call   c0013dcc <Device::Device(char const*)>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c0013f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f96:	89 10                	mov    DWORD PTR [eax],edx
c0013f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013fa6:	90                   	nop
c0013fa7:	83 c4 0c             	add    esp,0xc
c0013faa:	c3                   	ret    
c0013fab:	90                   	nop

c0013fac <HardDiskController::~HardDiskController()>:
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	ba 08 ac 02 c0       	mov    edx,0xc002ac08
c0013fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb8:	89 10                	mov    DWORD PTR [eax],edx
c0013fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbe:	83 ec 0c             	sub    esp,0xc
c0013fc1:	50                   	push   eax
c0013fc2:	e8 cf fa ff ff       	call   c0013a96 <Device::~Device()>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	90                   	nop
c0013fcb:	83 c4 0c             	add    esp,0xc
c0013fce:	c3                   	ret    
c0013fcf:	90                   	nop

c0013fd0 <HardDiskController::~HardDiskController()>:
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	83 ec 0c             	sub    esp,0xc
c0013fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fda:	e8 cd ff ff ff       	call   c0013fac <HardDiskController::~HardDiskController()>
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	83 ec 08             	sub    esp,0x8
c0013fe5:	68 58 01 00 00       	push   0x158
c0013fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fee:	e8 c4 e6 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0013ff3:	83 c4 10             	add    esp,0x10
c0013ff6:	83 c4 0c             	add    esp,0xc
c0013ff9:	c3                   	ret    

c0013ffa <PhysicalDisk::eject()>:
c0013ffa:	83 c8 ff             	or     eax,0xffffffff
c0013ffd:	c3                   	ret    

c0013ffe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013ffe:	83 ec 0c             	sub    esp,0xc
c0014001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014005:	83 ec 08             	sub    esp,0x8
c0014008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400c:	50                   	push   eax
c001400d:	e8 ba fd ff ff       	call   c0013dcc <Device::Device(char const*)>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	ba 34 ac 02 c0       	mov    edx,0xc002ac34
c001401a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401e:	89 10                	mov    DWORD PTR [eax],edx
c0014020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014024:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001402b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001402f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014048:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001404c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014056:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014060:	90                   	nop
c0014061:	83 c4 0c             	add    esp,0xc
c0014064:	c3                   	ret    
c0014065:	90                   	nop

c0014066 <PhysicalDisk::startCache()>:
c0014066:	56                   	push   esi
c0014067:	53                   	push   ebx
c0014068:	83 ec 10             	sub    esp,0x10
c001406b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001406f:	6a 44                	push   0x44
c0014071:	e8 23 b5 ff ff       	call   c000f599 <malloc>
c0014076:	89 c6                	mov    esi,eax
c0014078:	58                   	pop    eax
c0014079:	5a                   	pop    edx
c001407a:	53                   	push   ebx
c001407b:	56                   	push   esi
c001407c:	e8 71 28 00 00       	call   c00168f2 <VCache::VCache(PhysicalDisk*)>
c0014081:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014087:	83 c4 14             	add    esp,0x14
c001408a:	5b                   	pop    ebx
c001408b:	5e                   	pop    esi
c001408c:	c3                   	ret    
c001408d:	90                   	nop

c001408e <PhysicalDisk::~PhysicalDisk()>:
c001408e:	83 ec 0c             	sub    esp,0xc
c0014091:	ba 34 ac 02 c0       	mov    edx,0xc002ac34
c0014096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409a:	89 10                	mov    DWORD PTR [eax],edx
c001409c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a0:	83 ec 0c             	sub    esp,0xc
c00140a3:	50                   	push   eax
c00140a4:	e8 ed f9 ff ff       	call   c0013a96 <Device::~Device()>
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	90                   	nop
c00140ad:	83 c4 0c             	add    esp,0xc
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <PhysicalDisk::~PhysicalDisk()>:
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	83 ec 0c             	sub    esp,0xc
c00140b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140bc:	e8 cd ff ff ff       	call   c001408e <PhysicalDisk::~PhysicalDisk()>
c00140c1:	83 c4 10             	add    esp,0x10
c00140c4:	83 ec 08             	sub    esp,0x8
c00140c7:	68 6c 01 00 00       	push   0x16c
c00140cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d0:	e8 e2 e5 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00140d5:	83 c4 10             	add    esp,0x10
c00140d8:	83 c4 0c             	add    esp,0xc
c00140db:	c3                   	ret    

c00140dc <FPU::FPU(char const*)>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e3:	83 ec 08             	sub    esp,0x8
c00140e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ea:	50                   	push   eax
c00140eb:	e8 dc fc ff ff       	call   c0013dcc <Device::Device(char const*)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00140f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fc:	89 10                	mov    DWORD PTR [eax],edx
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001410c:	90                   	nop
c001410d:	83 c4 0c             	add    esp,0xc
c0014110:	c3                   	ret    
c0014111:	90                   	nop

c0014112 <FPU::~FPU()>:
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	89 10                	mov    DWORD PTR [eax],edx
c0014120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	50                   	push   eax
c0014128:	e8 69 f9 ff ff       	call   c0013a96 <Device::~Device()>
c001412d:	83 c4 10             	add    esp,0x10
c0014130:	90                   	nop
c0014131:	83 c4 0c             	add    esp,0xc
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <FPU::~FPU()>:
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	83 ec 0c             	sub    esp,0xc
c001413c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014140:	e8 cd ff ff ff       	call   c0014112 <FPU::~FPU()>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	83 ec 08             	sub    esp,0x8
c001414b:	68 58 01 00 00       	push   0x158
c0014150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014154:	e8 5e e5 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	83 c4 0c             	add    esp,0xc
c001415f:	c3                   	ret    

c0014160 <setupFPU()>:
c0014160:	53                   	push   ebx
c0014161:	83 ec 08             	sub    esp,0x8
c0014164:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c001416a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014171:	74 19                	je     c001418c <setupFPU()+0x2c>
c0014173:	83 ec 0c             	sub    esp,0xc
c0014176:	68 58 01 00 00       	push   0x158
c001417b:	e8 19 b4 ff ff       	call   c000f599 <malloc>
c0014180:	89 c3                	mov    ebx,eax
c0014182:	89 04 24             	mov    DWORD PTR [esp],eax
c0014185:	e8 cc 11 01 00       	call   c0025356 <AVX::AVX()>
c001418a:	eb 5b                	jmp    c00141e7 <setupFPU()+0x87>
c001418c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014192:	84 c0                	test   al,al
c0014194:	79 19                	jns    c00141af <setupFPU()+0x4f>
c0014196:	83 ec 0c             	sub    esp,0xc
c0014199:	68 58 01 00 00       	push   0x158
c001419e:	e8 f6 b3 ff ff       	call   c000f599 <malloc>
c00141a3:	89 c3                	mov    ebx,eax
c00141a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00141a8:	e8 cf 12 01 00       	call   c002547c <SSE::SSE()>
c00141ad:	eb 38                	jmp    c00141e7 <setupFPU()+0x87>
c00141af:	a8 20                	test   al,0x20
c00141b1:	74 19                	je     c00141cc <setupFPU()+0x6c>
c00141b3:	83 ec 0c             	sub    esp,0xc
c00141b6:	68 58 01 00 00       	push   0x158
c00141bb:	e8 d9 b3 ff ff       	call   c000f599 <malloc>
c00141c0:	89 c3                	mov    ebx,eax
c00141c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00141c5:	e8 1c 12 01 00       	call   c00253e6 <MMX::MMX()>
c00141ca:	eb 1b                	jmp    c00141e7 <setupFPU()+0x87>
c00141cc:	a8 10                	test   al,0x10
c00141ce:	74 1c                	je     c00141ec <setupFPU()+0x8c>
c00141d0:	83 ec 0c             	sub    esp,0xc
c00141d3:	68 58 01 00 00       	push   0x158
c00141d8:	e8 bc b3 ff ff       	call   c000f599 <malloc>
c00141dd:	89 c3                	mov    ebx,eax
c00141df:	89 04 24             	mov    DWORD PTR [esp],eax
c00141e2:	e8 23 13 01 00       	call   c002550a <x87::x87()>
c00141e7:	83 c4 10             	add    esp,0x10
c00141ea:	eb 24                	jmp    c0014210 <setupFPU()+0xb0>
c00141ec:	83 e0 ef             	and    eax,0xffffffef
c00141ef:	83 ec 0c             	sub    esp,0xc
c00141f2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141f8:	68 64 ac 02 c0       	push   0xc002ac64
c00141fd:	e8 8d e5 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014202:	0f 20 c0             	mov    eax,cr0
c0014205:	83 c8 04             	or     eax,0x4
c0014208:	0f 22 c0             	mov    cr0,eax
c001420b:	31 db                	xor    ebx,ebx
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	89 d8                	mov    eax,ebx
c0014212:	83 c4 08             	add    esp,0x8
c0014215:	5b                   	pop    ebx
c0014216:	c3                   	ret    
c0014217:	90                   	nop

c0014218 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001421c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014220:	c1 e0 04             	shl    eax,0x4
c0014223:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014227:	8d 50 10             	lea    edx,[eax+0x10]
c001422a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014230:	74 08                	je     c001423a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014232:	83 c0 04             	add    eax,0x4
c0014235:	39 d0                	cmp    eax,edx
c0014237:	75 f1                	jne    c001422a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014239:	c3                   	ret    
c001423a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014244:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001424e:	eb e2                	jmp    c0014232 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014250 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014250:	57                   	push   edi
c0014251:	31 c0                	xor    eax,eax
c0014253:	56                   	push   esi
c0014254:	53                   	push   ebx
c0014255:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014259:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001425d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014261:	89 da                	mov    edx,ebx
c0014263:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014267:	c1 e2 04             	shl    edx,0x4
c001426a:	01 ca                	add    edx,ecx
c001426c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014274:	74 16                	je     c001428c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014276:	40                   	inc    eax
c0014277:	83 f8 04             	cmp    eax,0x4
c001427a:	75 f0                	jne    c001426c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001427c:	c7 44 24 10 a8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aca8
c0014284:	5b                   	pop    ebx
c0014285:	5e                   	pop    esi
c0014286:	5f                   	pop    edi
c0014287:	e9 6f 5c 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c001428c:	8d 04 98             	lea    eax,[eax+ebx*4]
c001428f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014292:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014298:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001429e:	5b                   	pop    ebx
c001429f:	5e                   	pop    esi
c00142a0:	5f                   	pop    edi
c00142a1:	c3                   	ret    

c00142a2 <doubleFault(regs*, void*)>:
c00142a2:	55                   	push   ebp
c00142a3:	89 e5                	mov    ebp,esp
c00142a5:	83 ec 08             	sub    esp,0x8
c00142a8:	83 ec 0c             	sub    esp,0xc
c00142ab:	68 b5 ac 02 c0       	push   0xc002acb5
c00142b0:	e8 46 5c 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00142b5:	83 c4 10             	add    esp,0x10
c00142b8:	90                   	nop
c00142b9:	c9                   	leave  
c00142ba:	c3                   	ret    
c00142bb:	90                   	nop

c00142bc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142bc:	56                   	push   esi
c00142bd:	53                   	push   ebx
c00142be:	50                   	push   eax
c00142bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142c7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142cc:	75 35                	jne    c0014303 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00142ce:	8d 43 20             	lea    eax,[ebx+0x20]
c00142d1:	31 d2                	xor    edx,edx
c00142d3:	89 c1                	mov    ecx,eax
c00142d5:	c1 e1 04             	shl    ecx,0x4
c00142d8:	01 f1                	add    ecx,esi
c00142da:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142e2:	74 3e                	je     c0014322 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142e4:	42                   	inc    edx
c00142e5:	83 fa 04             	cmp    edx,0x4
c00142e8:	75 f0                	jne    c00142da <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142ea:	83 ec 0c             	sub    esp,0xc
c00142ed:	68 cf ac 02 c0       	push   0xc002accf
c00142f2:	e8 04 5c 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142ff:	5a                   	pop    edx
c0014300:	5b                   	pop    ebx
c0014301:	5e                   	pop    esi
c0014302:	c3                   	ret    
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	56                   	push   esi
c0014307:	e8 bc fb ff ff       	call   c0013ec8 <Device::getName()>
c001430c:	83 c4 10             	add    esp,0x10
c001430f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014312:	75 ba                	jne    c00142ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014314:	83 fb 0f             	cmp    ebx,0xf
c0014317:	7f 29                	jg     c0014342 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014319:	0f b6 9b 00 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3300]
c0014320:	eb ac                	jmp    c00142ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014322:	8d 04 82             	lea    eax,[edx+eax*4]
c0014325:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014329:	8d 04 86             	lea    eax,[esi+eax*4]
c001432c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014332:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014336:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001433c:	89 d8                	mov    eax,ebx
c001433e:	5a                   	pop    edx
c001433f:	5b                   	pop    ebx
c0014340:	5e                   	pop    esi
c0014341:	c3                   	ret    
c0014342:	83 ec 0c             	sub    esp,0xc
c0014345:	68 c2 ac 02 c0       	push   0xc002acc2
c001434a:	e8 ac 5b 00 00       	call   c0019efb <Krnl::panic(char const*)>
c001434f:	83 c4 10             	add    esp,0x10
c0014352:	e9 77 ff ff ff       	jmp    c00142ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014357:	90                   	nop

c0014358 <InterruptController::clearAllHandlers(int, bool)>:
c0014358:	56                   	push   esi
c0014359:	53                   	push   ebx
c001435a:	52                   	push   edx
c001435b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001435f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014363:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014368:	75 61                	jne    c00143cb <InterruptController::clearAllHandlers(int, bool)+0x73>
c001436a:	8d 46 20             	lea    eax,[esi+0x20]
c001436d:	c1 e6 04             	shl    esi,0x4
c0014370:	c1 e0 04             	shl    eax,0x4
c0014373:	01 de                	add    esi,ebx
c0014375:	01 d8                	add    eax,ebx
c0014377:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014381:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001438b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014395:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001439f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00143a9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00143b3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00143bd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00143c7:	58                   	pop    eax
c00143c8:	5b                   	pop    ebx
c00143c9:	5e                   	pop    esi
c00143ca:	c3                   	ret    
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	53                   	push   ebx
c00143cf:	e8 f4 fa ff ff       	call   c0013ec8 <Device::getName()>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143da:	75 8e                	jne    c001436a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143dc:	83 fe 0f             	cmp    esi,0xf
c00143df:	7f 09                	jg     c00143ea <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143e1:	0f b6 b6 00 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3300]
c00143e8:	eb 80                	jmp    c001436a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ea:	83 ec 0c             	sub    esp,0xc
c00143ed:	68 dc ac 02 c0       	push   0xc002acdc
c00143f2:	e8 04 5b 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00143f7:	83 c4 10             	add    esp,0x10
c00143fa:	e9 6b ff ff ff       	jmp    c001436a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ff:	90                   	nop

c0014400 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014400:	56                   	push   esi
c0014401:	53                   	push   ebx
c0014402:	52                   	push   edx
c0014403:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014407:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001440b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014410:	75 3a                	jne    c001444c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014412:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014416:	8d 50 20             	lea    edx,[eax+0x20]
c0014419:	c1 e2 04             	shl    edx,0x4
c001441c:	8d 04 16             	lea    eax,[esi+edx*1]
c001441f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014423:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014429:	74 0b                	je     c0014436 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001442b:	83 c0 04             	add    eax,0x4
c001442e:	39 d0                	cmp    eax,edx
c0014430:	75 f1                	jne    c0014423 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014432:	58                   	pop    eax
c0014433:	5b                   	pop    ebx
c0014434:	5e                   	pop    esi
c0014435:	c3                   	ret    
c0014436:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014440:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001444a:	eb df                	jmp    c001442b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	56                   	push   esi
c0014450:	e8 73 fa ff ff       	call   c0013ec8 <Device::getName()>
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001445b:	75 b5                	jne    c0014412 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001445d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014462:	7f 11                	jg     c0014475 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014468:	0f b6 80 00 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3300]
c001446f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014473:	eb 9d                	jmp    c0014412 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014475:	83 ec 0c             	sub    esp,0xc
c0014478:	68 e9 ac 02 c0       	push   0xc002ace9
c001447d:	e8 79 5a 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0014482:	83 c4 10             	add    esp,0x10
c0014485:	eb 8b                	jmp    c0014412 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014487 <nmiHandler(regs*, void*)>:
c0014487:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001448c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014490:	e9 6b a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014495 <int_handler>:
c0014495:	55                   	push   ebp
c0014496:	57                   	push   edi
c0014497:	56                   	push   esi
c0014498:	53                   	push   ebx
c0014499:	83 ec 0c             	sub    esp,0xc
c001449c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144a0:	80 3d e4 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305e4,0x0
c00144a7:	74 0b                	je     c00144b4 <int_handler+0x1f>
c00144a9:	fa                   	cli    
c00144aa:	f4                   	hlt    
c00144ab:	80 3d e4 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305e4,0x0
c00144b2:	75 f5                	jne    c00144a9 <int_handler+0x14>
c00144b4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00144b9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00144bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00144c2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00144c8:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144cb:	83 f8 17             	cmp    eax,0x17
c00144ce:	77 13                	ja     c00144e3 <int_handler+0x4e>
c00144d0:	83 ec 08             	sub    esp,0x8
c00144d3:	8b 17                	mov    edx,DWORD PTR [edi]
c00144d5:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144d8:	0f b6 c0             	movzx  eax,al
c00144db:	50                   	push   eax
c00144dc:	57                   	push   edi
c00144dd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144e0:	83 c4 10             	add    esp,0x10
c00144e3:	83 c3 15             	add    ebx,0x15
c00144e6:	c1 e3 04             	shl    ebx,0x4
c00144e9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144ed:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00144f4:	31 db                	xor    ebx,ebx
c00144f6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00144fa:	85 c0                	test   eax,eax
c00144fc:	74 13                	je     c0014511 <int_handler+0x7c>
c00144fe:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014501:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014505:	74 1c                	je     c0014523 <int_handler+0x8e>
c0014507:	83 ec 08             	sub    esp,0x8
c001450a:	52                   	push   edx
c001450b:	56                   	push   esi
c001450c:	ff d0                	call   eax
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	43                   	inc    ebx
c0014512:	83 fb 04             	cmp    ebx,0x4
c0014515:	75 df                	jne    c00144f6 <int_handler+0x61>
c0014517:	83 c4 0c             	add    esp,0xc
c001451a:	31 c0                	xor    eax,eax
c001451c:	5b                   	pop    ebx
c001451d:	31 d2                	xor    edx,edx
c001451f:	5e                   	pop    esi
c0014520:	5f                   	pop    edi
c0014521:	5d                   	pop    ebp
c0014522:	c3                   	ret    
c0014523:	83 ec 08             	sub    esp,0x8
c0014526:	52                   	push   edx
c0014527:	56                   	push   esi
c0014528:	ff d0                	call   eax
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	83 c4 0c             	add    esp,0xc
c0014530:	5b                   	pop    ebx
c0014531:	5e                   	pop    esi
c0014532:	5f                   	pop    edi
c0014533:	5d                   	pop    ebp
c0014534:	c3                   	ret    
c0014535:	90                   	nop

c0014536 <InterruptController::InterruptController(char const*)>:
c0014536:	83 ec 1c             	sub    esp,0x1c
c0014539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453d:	83 ec 08             	sub    esp,0x8
c0014540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014544:	50                   	push   eax
c0014545:	e8 82 f8 ff ff       	call   c0013dcc <Device::Device(char const*)>
c001454a:	83 c4 10             	add    esp,0x10
c001454d:	ba a4 af 02 c0       	mov    edx,0xc002afa4
c0014552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014556:	89 10                	mov    DWORD PTR [eax],edx
c0014558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014566:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001456e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014576:	7f 5e                	jg     c00145d6 <InterruptController::InterruptController(char const*)+0xa0>
c0014578:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014580:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014585:	7f 49                	jg     c00145d0 <InterruptController::InterruptController(char const*)+0x9a>
c0014587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001458f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001459a:	01 ca                	add    edx,ecx
c001459c:	83 c2 54             	add    edx,0x54
c001459f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145af:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145ba:	01 ca                	add    edx,ecx
c00145bc:	81 c2 54 04 00 00    	add    edx,0x454
c00145c2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145ca:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145ce:	eb b0                	jmp    c0014580 <InterruptController::InterruptController(char const*)+0x4a>
c00145d0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00145d4:	eb 98                	jmp    c001456e <InterruptController::InterruptController(char const*)+0x38>
c00145d6:	90                   	nop
c00145d7:	83 c4 1c             	add    esp,0x1c
c00145da:	c3                   	ret    
c00145db:	90                   	nop

c00145dc <InterruptController::~InterruptController()>:
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	ba a4 af 02 c0       	mov    edx,0xc002afa4
c00145e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e8:	89 10                	mov    DWORD PTR [eax],edx
c00145ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	50                   	push   eax
c00145f2:	e8 9f f4 ff ff       	call   c0013a96 <Device::~Device()>
c00145f7:	83 c4 10             	add    esp,0x10
c00145fa:	90                   	nop
c00145fb:	83 c4 0c             	add    esp,0xc
c00145fe:	c3                   	ret    
c00145ff:	90                   	nop

c0014600 <InterruptController::~InterruptController()>:
c0014600:	83 ec 0c             	sub    esp,0xc
c0014603:	83 ec 0c             	sub    esp,0xc
c0014606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460a:	e8 cd ff ff ff       	call   c00145dc <InterruptController::~InterruptController()>
c001460f:	83 c4 10             	add    esp,0x10
c0014612:	83 ec 08             	sub    esp,0x8
c0014615:	68 58 21 00 00       	push   0x2158
c001461a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001461e:	e8 94 e0 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0014623:	83 c4 10             	add    esp,0x10
c0014626:	83 c4 0c             	add    esp,0xc
c0014629:	c3                   	ret    

c001462a <displayDebugInfo(regs*)>:
c001462a:	55                   	push   ebp
c001462b:	57                   	push   edi
c001462c:	56                   	push   esi
c001462d:	53                   	push   ebx
c001462e:	83 ec 24             	sub    esp,0x24
c0014631:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014635:	0f 20 c2             	mov    edx,cr0
c0014638:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001463c:	0f 20 d7             	mov    edi,cr2
c001463f:	0f 20 de             	mov    esi,cr3
c0014642:	0f 20 e5             	mov    ebp,cr4
c0014645:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014648:	68 f6 ac 02 c0       	push   0xc002acf6
c001464d:	e8 3d e1 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014652:	59                   	pop    ecx
c0014653:	58                   	pop    eax
c0014654:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014657:	68 01 ad 02 c0       	push   0xc002ad01
c001465c:	e8 2e e1 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014661:	58                   	pop    eax
c0014662:	5a                   	pop    edx
c0014663:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014666:	68 0c ad 02 c0       	push   0xc002ad0c
c001466b:	e8 1f e1 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014670:	59                   	pop    ecx
c0014671:	58                   	pop    eax
c0014672:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014675:	68 17 ad 02 c0       	push   0xc002ad17
c001467a:	e8 10 e1 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001467f:	58                   	pop    eax
c0014680:	5a                   	pop    edx
c0014681:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014684:	68 22 ad 02 c0       	push   0xc002ad22
c0014689:	e8 01 e1 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001468e:	59                   	pop    ecx
c001468f:	58                   	pop    eax
c0014690:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014693:	68 2d ad 02 c0       	push   0xc002ad2d
c0014698:	e8 f2 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001469d:	58                   	pop    eax
c001469e:	5a                   	pop    edx
c001469f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146a2:	68 38 ad 02 c0       	push   0xc002ad38
c00146a7:	e8 e3 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146ac:	59                   	pop    ecx
c00146ad:	58                   	pop    eax
c00146ae:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00146b1:	68 43 ad 02 c0       	push   0xc002ad43
c00146b6:	e8 d4 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146bb:	58                   	pop    eax
c00146bc:	5a                   	pop    edx
c00146bd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146c0:	68 4e ad 02 c0       	push   0xc002ad4e
c00146c5:	e8 c5 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146ca:	59                   	pop    ecx
c00146cb:	58                   	pop    eax
c00146cc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146cf:	68 5d ad 02 c0       	push   0xc002ad5d
c00146d4:	e8 b6 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146d9:	58                   	pop    eax
c00146da:	5a                   	pop    edx
c00146db:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146de:	68 68 ad 02 c0       	push   0xc002ad68
c00146e3:	e8 a7 e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146e8:	59                   	pop    ecx
c00146e9:	58                   	pop    eax
c00146ea:	57                   	push   edi
c00146eb:	68 73 ad 02 c0       	push   0xc002ad73
c00146f0:	e8 9a e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00146f5:	58                   	pop    eax
c00146f6:	5a                   	pop    edx
c00146f7:	56                   	push   esi
c00146f8:	68 7e ad 02 c0       	push   0xc002ad7e
c00146fd:	e8 8d e0 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014702:	59                   	pop    ecx
c0014703:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 40 bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014713:	58                   	pop    eax
c0014714:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014717:	5a                   	pop    edx
c0014718:	c1 e0 05             	shl    eax,0x5
c001471b:	05 60 ca 02 c0       	add    eax,0xc002ca60
c0014720:	50                   	push   eax
c0014721:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472c:	e8 2f c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014731:	59                   	pop    ecx
c0014732:	58                   	pop    eax
c0014733:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014738:	68 89 ad 02 c0       	push   0xc002ad89
c001473d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014743:	e8 18 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014748:	58                   	pop    eax
c0014749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001474e:	5a                   	pop    edx
c001474f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014752:	83 c0 0c             	add    eax,0xc
c0014755:	50                   	push   eax
c0014756:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001475b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014761:	e8 fa c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014766:	59                   	pop    ecx
c0014767:	58                   	pop    eax
c0014768:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001476d:	68 92 ad 02 c0       	push   0xc002ad92
c0014772:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014778:	e8 e3 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001477d:	58                   	pop    eax
c001477e:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014783:	5a                   	pop    edx
c0014784:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014787:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478d:	e8 88 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014792:	59                   	pop    ecx
c0014793:	58                   	pop    eax
c0014794:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014799:	68 9a ad 02 c0       	push   0xc002ad9a
c001479e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a4:	e8 b7 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147a9:	58                   	pop    eax
c00147aa:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00147af:	5a                   	pop    edx
c00147b0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b9:	e8 5c c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147be:	59                   	pop    ecx
c00147bf:	58                   	pop    eax
c00147c0:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00147c5:	68 a2 ad 02 c0       	push   0xc002ada2
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 8b c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147d5:	58                   	pop    eax
c00147d6:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00147db:	5a                   	pop    edx
c00147dc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e5:	e8 30 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147ea:	59                   	pop    ecx
c00147eb:	58                   	pop    eax
c00147ec:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00147f1:	68 aa ad 02 c0       	push   0xc002adaa
c00147f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fc:	e8 5f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014801:	58                   	pop    eax
c0014802:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014807:	5a                   	pop    edx
c0014808:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001480b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014811:	e8 04 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014816:	59                   	pop    ecx
c0014817:	58                   	pop    eax
c0014818:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001481d:	68 b2 ad 02 c0       	push   0xc002adb2
c0014822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014828:	e8 33 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001482d:	58                   	pop    eax
c001482e:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014833:	5a                   	pop    edx
c0014834:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483d:	e8 d8 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014842:	59                   	pop    ecx
c0014843:	58                   	pop    eax
c0014844:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014849:	68 ba ad 02 c0       	push   0xc002adba
c001484e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014854:	e8 07 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014859:	58                   	pop    eax
c001485a:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001485f:	5a                   	pop    edx
c0014860:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014863:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014869:	e8 ac bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001486e:	59                   	pop    ecx
c001486f:	58                   	pop    eax
c0014870:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014875:	68 c2 ad 02 c0       	push   0xc002adc2
c001487a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014880:	e8 db bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014885:	58                   	pop    eax
c0014886:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001488b:	5a                   	pop    edx
c001488c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014890:	52                   	push   edx
c0014891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014897:	e8 7e bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001489c:	59                   	pop    ecx
c001489d:	58                   	pop    eax
c001489e:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00148a3:	68 cb ad 02 c0       	push   0xc002adcb
c00148a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ae:	e8 ad bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148b3:	58                   	pop    eax
c00148b4:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00148b9:	5a                   	pop    edx
c00148ba:	57                   	push   edi
c00148bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c1:	e8 54 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148c6:	59                   	pop    ecx
c00148c7:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00148cc:	5f                   	pop    edi
c00148cd:	68 d3 ad 02 c0       	push   0xc002add3
c00148d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d8:	e8 83 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148dd:	58                   	pop    eax
c00148de:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00148e3:	5a                   	pop    edx
c00148e4:	56                   	push   esi
c00148e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148eb:	e8 2a bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148f0:	59                   	pop    ecx
c00148f1:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00148f6:	5e                   	pop    esi
c00148f7:	68 db ad 02 c0       	push   0xc002addb
c00148fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014902:	e8 59 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014907:	5f                   	pop    edi
c0014908:	58                   	pop    eax
c0014909:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001490e:	55                   	push   ebp
c001490f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014915:	e8 00 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001491a:	58                   	pop    eax
c001491b:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014920:	5a                   	pop    edx
c0014921:	68 e3 ad 02 c0       	push   0xc002ade3
c0014926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001492c:	e8 2f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014931:	0f 21 c0             	mov    eax,db0
c0014934:	59                   	pop    ecx
c0014935:	5e                   	pop    esi
c0014936:	50                   	push   eax
c0014937:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001493c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014942:	e8 d3 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014947:	5f                   	pop    edi
c0014948:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001494d:	5d                   	pop    ebp
c001494e:	68 ec ad 02 c0       	push   0xc002adec
c0014953:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014959:	e8 02 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001495e:	0f 21 c8             	mov    eax,db1
c0014961:	5a                   	pop    edx
c0014962:	59                   	pop    ecx
c0014963:	50                   	push   eax
c0014964:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014969:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496f:	e8 a6 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014974:	5e                   	pop    esi
c0014975:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001497a:	5f                   	pop    edi
c001497b:	68 f4 ad 02 c0       	push   0xc002adf4
c0014980:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014986:	e8 d5 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001498b:	0f 21 d0             	mov    eax,db2
c001498e:	5d                   	pop    ebp
c001498f:	5a                   	pop    edx
c0014990:	50                   	push   eax
c0014991:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014996:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499c:	e8 79 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149a1:	59                   	pop    ecx
c00149a2:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00149a7:	5e                   	pop    esi
c00149a8:	68 fc ad 02 c0       	push   0xc002adfc
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 a8 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149b8:	0f 21 d8             	mov    eax,db3
c00149bb:	5f                   	pop    edi
c00149bc:	5d                   	pop    ebp
c00149bd:	50                   	push   eax
c00149be:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00149c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c9:	e8 4c be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149ce:	58                   	pop    eax
c00149cf:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00149d4:	5a                   	pop    edx
c00149d5:	68 04 ae 02 c0       	push   0xc002ae04
c00149da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e0:	e8 7b be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149e5:	0f 21 f0             	mov    eax,db6
c00149e8:	59                   	pop    ecx
c00149e9:	5e                   	pop    esi
c00149ea:	50                   	push   eax
c00149eb:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00149f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f6:	e8 1f be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149fb:	5f                   	pop    edi
c00149fc:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a01:	5d                   	pop    ebp
c0014a02:	68 0c ae 02 c0       	push   0xc002ae0c
c0014a07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0d:	e8 4e be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a12:	0f 21 f8             	mov    eax,db7
c0014a15:	5a                   	pop    edx
c0014a16:	59                   	pop    ecx
c0014a17:	50                   	push   eax
c0014a18:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a23:	e8 f2 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a28:	5e                   	pop    esi
c0014a29:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a2c:	e8 43 86 00 00       	call   c001d074 <Thr::getDriverNameFromAddress(unsigned long)>
c0014a31:	83 c4 10             	add    esp,0x10
c0014a34:	85 c0                	test   eax,eax
c0014a36:	74 7d                	je     c0014ab5 <displayDebugInfo(regs*)+0x48b>
c0014a38:	89 c6                	mov    esi,eax
c0014a3a:	50                   	push   eax
c0014a3b:	50                   	push   eax
c0014a3c:	56                   	push   esi
c0014a3d:	68 14 ae 02 c0       	push   0xc002ae14
c0014a42:	e8 48 dd ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014a47:	5a                   	pop    edx
c0014a48:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a4d:	59                   	pop    ecx
c0014a4e:	68 22 ae 02 c0       	push   0xc002ae22
c0014a53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a59:	e8 02 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a5e:	5f                   	pop    edi
c0014a5f:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a64:	5d                   	pop    ebp
c0014a65:	56                   	push   esi
c0014a66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6c:	e8 ef bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a71:	58                   	pop    eax
c0014a72:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a77:	5a                   	pop    edx
c0014a78:	68 2e ae 02 c0       	push   0xc002ae2e
c0014a7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a83:	e8 d8 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a88:	59                   	pop    ecx
c0014a89:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0014a8e:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014a94:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a97:	e8 0f 86 00 00       	call   c001d0ab <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014a9c:	5b                   	pop    ebx
c0014a9d:	5d                   	pop    ebp
c0014a9e:	50                   	push   eax
c0014a9f:	57                   	push   edi
c0014aa0:	e8 75 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014aa5:	58                   	pop    eax
c0014aa6:	5a                   	pop    edx
c0014aa7:	56                   	push   esi
c0014aa8:	68 3a ae 02 c0       	push   0xc002ae3a
c0014aad:	e8 dd dc ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	fa                   	cli    
c0014ab6:	f4                   	hlt    
c0014ab7:	eb fe                	jmp    c0014ab7 <displayDebugInfo(regs*)+0x48d>

c0014ab9 <x87EmulHandler(regs*, void*)>:
c0014ab9:	83 ec 0c             	sub    esp,0xc
c0014abc:	0f 20 c2             	mov    edx,cr0
c0014abf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac4:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014ac8:	75 4b                	jne    c0014b15 <x87EmulHandler(regs*, void*)+0x5c>
c0014aca:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0014acf:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014ad5:	85 c0                	test   eax,eax
c0014ad7:	74 05                	je     c0014ade <x87EmulHandler(regs*, void*)+0x25>
c0014ad9:	83 e2 08             	and    edx,0x8
c0014adc:	75 17                	jne    c0014af5 <x87EmulHandler(regs*, void*)+0x3c>
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae5:	e8 61 a9 00 00       	call   c001f44b <Vm::x87Handler(regs*)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	84 c0                	test   al,al
c0014aef:	74 24                	je     c0014b15 <x87EmulHandler(regs*, void*)+0x5c>
c0014af1:	83 c4 0c             	add    esp,0xc
c0014af4:	c3                   	ret    
c0014af5:	83 ec 0c             	sub    esp,0xc
c0014af8:	68 60 ae 02 c0       	push   0xc002ae60
c0014afd:	e8 8d dc ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014b02:	0f 06                	clts   
c0014b04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	a3 28 dc 02 c0       	mov    ds:0xc002dc28,eax
c0014b11:	83 c4 0c             	add    esp,0xc
c0014b14:	c3                   	ret    
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	68 4a ae 02 c0       	push   0xc002ae4a
c0014b1d:	e8 6d dc ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014b22:	5a                   	pop    edx
c0014b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b27:	e8 fe fa ff ff       	call   c001462a <displayDebugInfo(regs*)>

c0014b2c <gpFault(regs*, void*)>:
c0014b2c:	53                   	push   ebx
c0014b2d:	83 ec 14             	sub    esp,0x14
c0014b30:	c7 05 24 dc 02 c0 24 e9 01 c0 	mov    DWORD PTR ds:0xc002dc24,0xc001e924
c0014b3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b3e:	53                   	push   ebx
c0014b3f:	e8 e0 9d 00 00       	call   c001e924 <Vm::faultHandler(regs*)>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	84 c0                	test   al,al
c0014b49:	74 05                	je     c0014b50 <gpFault(regs*, void*)+0x24>
c0014b4b:	83 c4 08             	add    esp,0x8
c0014b4e:	5b                   	pop    ebx
c0014b4f:	c3                   	ret    
c0014b50:	83 ec 0c             	sub    esp,0xc
c0014b53:	68 6d ae 02 c0       	push   0xc002ae6d
c0014b58:	e8 32 dc ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014b5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b60:	e8 c5 fa ff ff       	call   c001462a <displayDebugInfo(regs*)>

c0014b65 <pgFault(regs*, void*)>:
c0014b65:	83 ec 18             	sub    esp,0x18
c0014b68:	68 88 ae 02 c0       	push   0xc002ae88
c0014b6d:	e8 1d dc ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014b72:	0f 20 d0             	mov    eax,cr2
c0014b75:	5a                   	pop    edx
c0014b76:	59                   	pop    ecx
c0014b77:	50                   	push   eax
c0014b78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b7d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b80:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b86:	e8 0d d7 ff ff       	call   c0012298 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	84 c0                	test   al,al
c0014b90:	74 04                	je     c0014b96 <pgFault(regs*, void*)+0x31>
c0014b92:	83 c4 0c             	add    esp,0xc
c0014b95:	c3                   	ret    
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	68 92 ae 02 c0       	push   0xc002ae92
c0014b9e:	e8 ec db ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014ba3:	58                   	pop    eax
c0014ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ba8:	e8 7d fa ff ff       	call   c001462a <displayDebugInfo(regs*)>

c0014bad <otherISRHandler(regs*, void*)>:
c0014bad:	53                   	push   ebx
c0014bae:	83 ec 0c             	sub    esp,0xc
c0014bb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bb5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bb8:	50                   	push   eax
c0014bb9:	50                   	push   eax
c0014bba:	68 9f ae 02 c0       	push   0xc002ae9f
c0014bbf:	e8 cb db ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014bc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bc7:	e8 5e fa ff ff       	call   c001462a <displayDebugInfo(regs*)>

c0014bcc <opcodeFault(regs*, void*)>:
c0014bcc:	55                   	push   ebp
c0014bcd:	89 e5                	mov    ebp,esp
c0014bcf:	56                   	push   esi
c0014bd0:	53                   	push   ebx
c0014bd1:	83 ec 40             	sub    esp,0x40
c0014bd4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0014bd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bdf:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014be5:	84 c0                	test   al,al
c0014be7:	74 24                	je     c0014c0d <opcodeFault(regs*, void*)+0x41>
c0014be9:	83 ec 0c             	sub    esp,0xc
c0014bec:	68 bc ae 02 c0       	push   0xc002aebc
c0014bf1:	e8 99 db ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014bf6:	83 c4 10             	add    esp,0x10
c0014bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bff:	8d 50 19             	lea    edx,[eax+0x19]
c0014c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c08:	e9 d5 05 00 00       	jmp    c00151e2 <opcodeFault(regs*, void*)+0x616>
c0014c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c13:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c16:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c1a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c21:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c24:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2c:	3c f0                	cmp    al,0xf0
c0014c2e:	75 17                	jne    c0014c47 <opcodeFault(regs*, void*)+0x7b>
c0014c30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c36:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c39:	8d 50 01             	lea    edx,[eax+0x1]
c0014c3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c42:	e9 da 00 00 00       	jmp    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014c47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c4c:	3c f2                	cmp    al,0xf2
c0014c4e:	74 09                	je     c0014c59 <opcodeFault(regs*, void*)+0x8d>
c0014c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c53:	8a 00                	mov    al,BYTE PTR [eax]
c0014c55:	3c f3                	cmp    al,0xf3
c0014c57:	75 1b                	jne    c0014c74 <opcodeFault(regs*, void*)+0xa8>
c0014c59:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c5d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c66:	8d 50 01             	lea    edx,[eax+0x1]
c0014c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c6f:	e9 ad 00 00 00       	jmp    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014c74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c77:	8a 00                	mov    al,BYTE PTR [eax]
c0014c79:	3c 66                	cmp    al,0x66
c0014c7b:	75 1f                	jne    c0014c9c <opcodeFault(regs*, void*)+0xd0>
c0014c7d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c81:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c8e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c94:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c97:	e9 85 00 00 00       	jmp    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014c9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca1:	3c 67                	cmp    al,0x67
c0014ca3:	75 18                	jne    c0014cbd <opcodeFault(regs*, void*)+0xf1>
c0014ca5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ca9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014caf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb2:	8d 50 01             	lea    edx,[eax+0x1]
c0014cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cbb:	eb 64                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014cbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc0:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc2:	3c 2e                	cmp    al,0x2e
c0014cc4:	74 09                	je     c0014ccf <opcodeFault(regs*, void*)+0x103>
c0014cc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc9:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccb:	3c 3e                	cmp    al,0x3e
c0014ccd:	75 18                	jne    c0014ce7 <opcodeFault(regs*, void*)+0x11b>
c0014ccf:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cd3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cdc:	8d 50 01             	lea    edx,[eax+0x1]
c0014cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce5:	eb 3a                	jmp    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014ce7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cea:	8a 00                	mov    al,BYTE PTR [eax]
c0014cec:	3c 36                	cmp    al,0x36
c0014cee:	74 1b                	je     c0014d0b <opcodeFault(regs*, void*)+0x13f>
c0014cf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf5:	3c 26                	cmp    al,0x26
c0014cf7:	74 12                	je     c0014d0b <opcodeFault(regs*, void*)+0x13f>
c0014cf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfc:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfe:	3c 64                	cmp    al,0x64
c0014d00:	74 09                	je     c0014d0b <opcodeFault(regs*, void*)+0x13f>
c0014d02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d05:	8a 00                	mov    al,BYTE PTR [eax]
c0014d07:	3c 65                	cmp    al,0x65
c0014d09:	75 16                	jne    c0014d21 <opcodeFault(regs*, void*)+0x155>
c0014d0b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d0f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d18:	8d 50 01             	lea    edx,[eax+0x1]
c0014d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d24:	8a 00                	mov    al,BYTE PTR [eax]
c0014d26:	3c 0f                	cmp    al,0xf
c0014d28:	0f 85 ad 00 00 00    	jne    c0014ddb <opcodeFault(regs*, void*)+0x20f>
c0014d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d31:	40                   	inc    eax
c0014d32:	8a 00                	mov    al,BYTE PTR [eax]
c0014d34:	3c c2                	cmp    al,0xc2
c0014d36:	74 0e                	je     c0014d46 <opcodeFault(regs*, void*)+0x17a>
c0014d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3b:	40                   	inc    eax
c0014d3c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3e:	3c c3                	cmp    al,0xc3
c0014d40:	0f 85 95 00 00 00    	jne    c0014ddb <opcodeFault(regs*, void*)+0x20f>
c0014d46:	83 ec 0c             	sub    esp,0xc
c0014d49:	68 df ae 02 c0       	push   0xc002aedf
c0014d4e:	e8 3c da ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d65:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6d:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d73:	88 10                	mov    BYTE PTR [eax],dl
c0014d75:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d78:	50                   	push   eax
c0014d79:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d7c:	50                   	push   eax
c0014d7d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d80:	50                   	push   eax
c0014d81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d84:	e8 8b 48 00 00       	call   c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d89:	83 c4 10             	add    esp,0x10
c0014d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d92:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d95:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d98:	01 d0                	add    eax,edx
c0014d9a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014da6:	48                   	dec    eax
c0014da7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014db0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db6:	83 ec 04             	sub    esp,0x4
c0014db9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dbc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dbf:	50                   	push   eax
c0014dc0:	e8 ef b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dc5:	83 c4 10             	add    esp,0x10
c0014dc8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014dcb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014dce:	01 c2                	add    edx,eax
c0014dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dd6:	e9 07 04 00 00       	jmp    c00151e2 <opcodeFault(regs*, void*)+0x616>
c0014ddb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dde:	8a 00                	mov    al,BYTE PTR [eax]
c0014de0:	3c 0f                	cmp    al,0xf
c0014de2:	0f 85 8b 01 00 00    	jne    c0014f73 <opcodeFault(regs*, void*)+0x3a7>
c0014de8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014deb:	40                   	inc    eax
c0014dec:	8a 00                	mov    al,BYTE PTR [eax]
c0014dee:	3c c7                	cmp    al,0xc7
c0014df0:	0f 86 7d 01 00 00    	jbe    c0014f73 <opcodeFault(regs*, void*)+0x3a7>
c0014df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df9:	40                   	inc    eax
c0014dfa:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfc:	3c cf                	cmp    al,0xcf
c0014dfe:	0f 87 6f 01 00 00    	ja     c0014f73 <opcodeFault(regs*, void*)+0x3a7>
c0014e04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e07:	40                   	inc    eax
c0014e08:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0a:	83 c0 38             	add    eax,0x38
c0014e0d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e10:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e14:	75 0b                	jne    c0014e21 <opcodeFault(regs*, void*)+0x255>
c0014e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e19:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e1c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e1f:	eb 75                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e21:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e25:	75 0b                	jne    c0014e32 <opcodeFault(regs*, void*)+0x266>
c0014e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e30:	eb 64                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e32:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e36:	75 0b                	jne    c0014e43 <opcodeFault(regs*, void*)+0x277>
c0014e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e3e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e41:	eb 53                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e43:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e47:	75 0b                	jne    c0014e54 <opcodeFault(regs*, void*)+0x288>
c0014e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e52:	eb 42                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e54:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e58:	75 0b                	jne    c0014e65 <opcodeFault(regs*, void*)+0x299>
c0014e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e63:	eb 31                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e65:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e69:	75 0b                	jne    c0014e76 <opcodeFault(regs*, void*)+0x2aa>
c0014e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e71:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e74:	eb 20                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e76:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e7a:	75 0b                	jne    c0014e87 <opcodeFault(regs*, void*)+0x2bb>
c0014e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e85:	eb 0f                	jmp    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e87:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e8b:	75 09                	jne    c0014e96 <opcodeFault(regs*, void*)+0x2ca>
c0014e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e96:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e9a:	74 10                	je     c0014eac <opcodeFault(regs*, void*)+0x2e0>
c0014e9c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ea3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014eaa:	eb 2d                	jmp    c0014ed9 <opcodeFault(regs*, void*)+0x30d>
c0014eac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014eaf:	c1 e0 18             	shl    eax,0x18
c0014eb2:	89 c2                	mov    edx,eax
c0014eb4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014eb7:	c1 e0 08             	shl    eax,0x8
c0014eba:	25 00 00 ff 00       	and    eax,0xff0000
c0014ebf:	09 c2                	or     edx,eax
c0014ec1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec4:	c1 e8 08             	shr    eax,0x8
c0014ec7:	25 00 ff 00 00       	and    eax,0xff00
c0014ecc:	09 c2                	or     edx,eax
c0014ece:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed1:	c1 e8 18             	shr    eax,0x18
c0014ed4:	09 d0                	or     eax,edx
c0014ed6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ed9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014edd:	75 0b                	jne    c0014eea <opcodeFault(regs*, void*)+0x31e>
c0014edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ee5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ee8:	eb 75                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014eea:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014eee:	75 0b                	jne    c0014efb <opcodeFault(regs*, void*)+0x32f>
c0014ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ef9:	eb 64                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014efb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014eff:	75 0b                	jne    c0014f0c <opcodeFault(regs*, void*)+0x340>
c0014f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f04:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f07:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f0a:	eb 53                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f0c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f10:	75 0b                	jne    c0014f1d <opcodeFault(regs*, void*)+0x351>
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f18:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f1b:	eb 42                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f1d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f21:	75 0b                	jne    c0014f2e <opcodeFault(regs*, void*)+0x362>
c0014f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f26:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f29:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f2c:	eb 31                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f2e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f32:	75 0b                	jne    c0014f3f <opcodeFault(regs*, void*)+0x373>
c0014f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f37:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f3d:	eb 20                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f3f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f43:	75 0b                	jne    c0014f50 <opcodeFault(regs*, void*)+0x384>
c0014f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f48:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f4b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f4e:	eb 0f                	jmp    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f50:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f54:	75 09                	jne    c0014f5f <opcodeFault(regs*, void*)+0x393>
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f5c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f65:	8d 50 02             	lea    edx,[eax+0x2]
c0014f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f6e:	e9 6f 02 00 00       	jmp    c00151e2 <opcodeFault(regs*, void*)+0x616>
c0014f73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f76:	8a 00                	mov    al,BYTE PTR [eax]
c0014f78:	3c 0f                	cmp    al,0xf
c0014f7a:	0f 85 8d 01 00 00    	jne    c001510d <opcodeFault(regs*, void*)+0x541>
c0014f80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f83:	40                   	inc    eax
c0014f84:	8a 00                	mov    al,BYTE PTR [eax]
c0014f86:	3c c7                	cmp    al,0xc7
c0014f88:	0f 85 7f 01 00 00    	jne    c001510d <opcodeFault(regs*, void*)+0x541>
c0014f8e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f94:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f97:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa0:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fa3:	50                   	push   eax
c0014fa4:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fa7:	50                   	push   eax
c0014fa8:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fab:	50                   	push   eax
c0014fac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014faf:	e8 60 46 00 00       	call   c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fb4:	83 c4 10             	add    esp,0x10
c0014fb7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fba:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fbd:	83 f0 01             	xor    eax,0x1
c0014fc0:	84 c0                	test   al,al
c0014fc2:	0f 84 45 01 00 00    	je     c001510d <opcodeFault(regs*, void*)+0x541>
c0014fc8:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fcb:	3c 01                	cmp    al,0x1
c0014fcd:	0f 85 3a 01 00 00    	jne    c001510d <opcodeFault(regs*, void*)+0x541>
c0014fd3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014fd6:	83 f0 01             	xor    eax,0x1
c0014fd9:	84 c0                	test   al,al
c0014fdb:	0f 84 2c 01 00 00    	je     c001510d <opcodeFault(regs*, void*)+0x541>
c0014fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014fe7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fea:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014ff1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ff4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ff7:	89 c2                	mov    edx,eax
c0014ff9:	b8 00 00 00 00       	mov    eax,0x0
c0014ffe:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015001:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015007:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001500a:	ba 00 00 00 00       	mov    edx,0x0
c001500f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015012:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015018:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001501b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001501e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015025:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015028:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001502b:	89 c2                	mov    edx,eax
c001502d:	b8 00 00 00 00       	mov    eax,0x0
c0015032:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015035:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001503e:	ba 00 00 00 00       	mov    edx,0x0
c0015043:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015046:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015049:	fa                   	cli    
c001504a:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001504f:	40                   	inc    eax
c0015050:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0015055:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015058:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001505b:	8b 00                	mov    eax,DWORD PTR [eax]
c001505d:	89 c1                	mov    ecx,eax
c001505f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015062:	89 cb                	mov    ebx,ecx
c0015064:	89 d0                	mov    eax,edx
c0015066:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015069:	89 c6                	mov    esi,eax
c001506b:	89 f0                	mov    eax,esi
c001506d:	09 d8                	or     eax,ebx
c001506f:	85 c0                	test   eax,eax
c0015071:	75 21                	jne    c0015094 <opcodeFault(regs*, void*)+0x4c8>
c0015073:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015076:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015079:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001507c:	89 01                	mov    DWORD PTR [ecx],eax
c001507e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015084:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015087:	83 c8 40             	or     eax,0x40
c001508a:	89 c2                	mov    edx,eax
c001508c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015092:	eb 3e                	jmp    c00150d2 <opcodeFault(regs*, void*)+0x506>
c0015094:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015097:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001509a:	8b 00                	mov    eax,DWORD PTR [eax]
c001509c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001509f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150a2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150ab:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150ae:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150b1:	89 d0                	mov    eax,edx
c00150b3:	31 d2                	xor    edx,edx
c00150b5:	89 c3                	mov    ebx,eax
c00150b7:	89 d6                	mov    esi,edx
c00150b9:	89 da                	mov    edx,ebx
c00150bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150be:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150c7:	83 e0 bf             	and    eax,0xffffffbf
c00150ca:	89 c2                	mov    edx,eax
c00150cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cf:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150d2:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00150d7:	48                   	dec    eax
c00150d8:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00150dd:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00150e2:	85 c0                	test   eax,eax
c00150e4:	75 01                	jne    c00150e7 <opcodeFault(regs*, void*)+0x51b>
c00150e6:	fb                   	sti    
c00150e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ed:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150f0:	01 c2                	add    edx,eax
c00150f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150f8:	83 ec 0c             	sub    esp,0xc
c00150fb:	68 ee ae 02 c0       	push   0xc002aeee
c0015100:	e8 8a d6 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0015105:	83 c4 10             	add    esp,0x10
c0015108:	e9 d5 00 00 00       	jmp    c00151e2 <opcodeFault(regs*, void*)+0x616>
c001510d:	83 ec 0c             	sub    esp,0xc
c0015110:	68 01 af 02 c0       	push   0xc002af01
c0015115:	e8 75 d6 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001511a:	83 c4 10             	add    esp,0x10
c001511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015120:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015126:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015129:	c1 e0 04             	shl    eax,0x4
c001512c:	01 d0                	add    eax,edx
c001512e:	83 c0 03             	add    eax,0x3
c0015131:	8a 00                	mov    al,BYTE PTR [eax]
c0015133:	0f b6 d8             	movzx  ebx,al
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001513c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015142:	c1 e0 04             	shl    eax,0x4
c0015145:	01 d0                	add    eax,edx
c0015147:	83 c0 02             	add    eax,0x2
c001514a:	8a 00                	mov    al,BYTE PTR [eax]
c001514c:	0f b6 c8             	movzx  ecx,al
c001514f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015152:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015158:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001515b:	c1 e0 04             	shl    eax,0x4
c001515e:	01 d0                	add    eax,edx
c0015160:	40                   	inc    eax
c0015161:	8a 00                	mov    al,BYTE PTR [eax]
c0015163:	0f b6 d0             	movzx  edx,al
c0015166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015169:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001516c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015172:	c1 e0 04             	shl    eax,0x4
c0015175:	01 f0                	add    eax,esi
c0015177:	8a 00                	mov    al,BYTE PTR [eax]
c0015179:	0f b6 c0             	movzx  eax,al
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	53                   	push   ebx
c0015180:	51                   	push   ecx
c0015181:	52                   	push   edx
c0015182:	50                   	push   eax
c0015183:	68 14 af 02 c0       	push   0xc002af14
c0015188:	e8 02 d6 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001518d:	83 c4 20             	add    esp,0x20
c0015190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015193:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015196:	83 c0 03             	add    eax,0x3
c0015199:	8a 00                	mov    al,BYTE PTR [eax]
c001519b:	0f b6 d8             	movzx  ebx,al
c001519e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151a4:	83 c0 02             	add    eax,0x2
c00151a7:	8a 00                	mov    al,BYTE PTR [eax]
c00151a9:	0f b6 c8             	movzx  ecx,al
c00151ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b2:	40                   	inc    eax
c00151b3:	8a 00                	mov    al,BYTE PTR [eax]
c00151b5:	0f b6 d0             	movzx  edx,al
c00151b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151be:	8a 00                	mov    al,BYTE PTR [eax]
c00151c0:	0f b6 c0             	movzx  eax,al
c00151c3:	83 ec 0c             	sub    esp,0xc
c00151c6:	53                   	push   ebx
c00151c7:	51                   	push   ecx
c00151c8:	52                   	push   edx
c00151c9:	50                   	push   eax
c00151ca:	68 3c af 02 c0       	push   0xc002af3c
c00151cf:	e8 bb d5 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00151d4:	83 c4 20             	add    esp,0x20
c00151d7:	83 ec 0c             	sub    esp,0xc
c00151da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151dd:	e8 48 f4 ff ff       	call   c001462a <displayDebugInfo(regs*)>
c00151e2:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151e5:	5b                   	pop    ebx
c00151e6:	5e                   	pop    esi
c00151e7:	5d                   	pop    ebp
c00151e8:	c3                   	ret    

c00151e9 <displayProgramFault(char const*)>:
c00151e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151f7:	85 c0                	test   eax,eax
c00151f9:	74 15                	je     c0015210 <displayProgramFault(char const*)+0x27>
c00151fb:	83 ec 0c             	sub    esp,0xc
c00151fe:	6a 04                	push   0x4
c0015200:	6a 0f                	push   0xf
c0015202:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015206:	50                   	push   eax
c0015207:	e8 50 b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c001520c:	83 c4 1c             	add    esp,0x1c
c001520f:	c3                   	ret    
c0015210:	c3                   	ret    

c0015211 <setupInterruptController()>:
c0015211:	55                   	push   ebp
c0015212:	89 e5                	mov    ebp,esp
c0015214:	53                   	push   ebx
c0015215:	83 ec 24             	sub    esp,0x24
c0015218:	b8 00 00 00 00       	mov    eax,0x0
c001521d:	85 c0                	test   eax,eax
c001521f:	0f 95 c0             	setne  al
c0015222:	84 c0                	test   al,al
c0015224:	74 5b                	je     c0015281 <setupInterruptController()+0x70>
c0015226:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001522d:	83 ec 0c             	sub    esp,0xc
c0015230:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015233:	e8 61 a3 ff ff       	call   c000f599 <malloc>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	89 c3                	mov    ebx,eax
c001523d:	83 ec 0c             	sub    esp,0xc
c0015240:	53                   	push   ebx
c0015241:	e8 02 05 01 00       	call   c0025748 <APIC::APIC()>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001524c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001524f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015252:	8b 00                	mov    eax,DWORD PTR [eax]
c0015254:	83 c0 08             	add    eax,0x8
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	6a 00                	push   0x0
c001525b:	6a 00                	push   0x0
c001525d:	6a 00                	push   0x0
c001525f:	52                   	push   edx
c0015260:	ff d0                	call   eax
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001526a:	83 ec 08             	sub    esp,0x8
c001526d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015270:	50                   	push   eax
c0015271:	e8 52 e9 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0015276:	83 c4 10             	add    esp,0x10
c0015279:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001527c:	e9 79 03 00 00       	jmp    c00155fa <setupInterruptController()+0x3e9>
c0015281:	a0 20 04 03 c0       	mov    al,ds:0xc0030420
c0015286:	84 c0                	test   al,al
c0015288:	75 14                	jne    c001529e <setupInterruptController()+0x8d>
c001528a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001528f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015295:	83 e2 fe             	and    edx,0xfffffffe
c0015298:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001529e:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00152a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152a9:	83 e0 01             	and    eax,0x1
c00152ac:	84 c0                	test   al,al
c00152ae:	0f 95 c0             	setne  al
c00152b1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00152b4:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152bb:	83 ec 0c             	sub    esp,0xc
c00152be:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00152c1:	e8 d3 a2 ff ff       	call   c000f599 <malloc>
c00152c6:	83 c4 10             	add    esp,0x10
c00152c9:	89 c3                	mov    ebx,eax
c00152cb:	83 ec 0c             	sub    esp,0xc
c00152ce:	53                   	push   ebx
c00152cf:	e8 cc 09 01 00       	call   c0025ca0 <PIC::PIC()>
c00152d4:	83 c4 10             	add    esp,0x10
c00152d7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e2:	83 c0 08             	add    eax,0x8
c00152e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e7:	6a 00                	push   0x0
c00152e9:	6a 00                	push   0x0
c00152eb:	6a 00                	push   0x0
c00152ed:	52                   	push   edx
c00152ee:	ff d0                	call   eax
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00152f7:	74 73                	je     c001536c <setupInterruptController()+0x15b>
c00152f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015301:	83 c0 0c             	add    eax,0xc
c0015304:	8b 00                	mov    eax,DWORD PTR [eax]
c0015306:	6a 00                	push   0x0
c0015308:	6a 00                	push   0x0
c001530a:	6a 00                	push   0x0
c001530c:	52                   	push   edx
c001530d:	ff d0                	call   eax
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015316:	74 15                	je     c001532d <setupInterruptController()+0x11c>
c0015318:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	83 c0 04             	add    eax,0x4
c0015320:	8b 00                	mov    eax,DWORD PTR [eax]
c0015322:	83 ec 0c             	sub    esp,0xc
c0015325:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015328:	ff d0                	call   eax
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001533a:	e8 5a a2 ff ff       	call   c000f599 <malloc>
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	89 c3                	mov    ebx,eax
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	53                   	push   ebx
c0015348:	e8 fb 03 01 00       	call   c0025748 <APIC::APIC()>
c001534d:	83 c4 10             	add    esp,0x10
c0015350:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015353:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015359:	8b 00                	mov    eax,DWORD PTR [eax]
c001535b:	83 c0 08             	add    eax,0x8
c001535e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015360:	6a 00                	push   0x0
c0015362:	6a 00                	push   0x0
c0015364:	6a 00                	push   0x0
c0015366:	52                   	push   edx
c0015367:	ff d0                	call   eax
c0015369:	83 c4 10             	add    esp,0x10
c001536c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0015371:	83 ec 08             	sub    esp,0x8
c0015374:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015377:	50                   	push   eax
c0015378:	e8 4b e8 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	c7 05 28 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc28,0x0
c001538a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538d:	8b 00                	mov    eax,DWORD PTR [eax]
c001538f:	83 c0 24             	add    eax,0x24
c0015392:	8b 00                	mov    eax,DWORD PTR [eax]
c0015394:	6a 00                	push   0x0
c0015396:	68 ad 4b 01 c0       	push   0xc0014bad
c001539b:	6a 00                	push   0x0
c001539d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a0:	ff d0                	call   eax
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153aa:	83 c0 24             	add    eax,0x24
c00153ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00153af:	6a 00                	push   0x0
c00153b1:	68 ad 4b 01 c0       	push   0xc0014bad
c00153b6:	6a 01                	push   0x1
c00153b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bb:	ff d0                	call   eax
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c5:	83 c0 24             	add    eax,0x24
c00153c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ca:	6a 00                	push   0x0
c00153cc:	68 87 44 01 c0       	push   0xc0014487
c00153d1:	6a 02                	push   0x2
c00153d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d6:	ff d0                	call   eax
c00153d8:	83 c4 10             	add    esp,0x10
c00153db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153de:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e0:	83 c0 24             	add    eax,0x24
c00153e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e5:	6a 00                	push   0x0
c00153e7:	68 ad 4b 01 c0       	push   0xc0014bad
c00153ec:	6a 03                	push   0x3
c00153ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f1:	ff d0                	call   eax
c00153f3:	83 c4 10             	add    esp,0x10
c00153f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fb:	83 c0 24             	add    eax,0x24
c00153fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015400:	6a 00                	push   0x0
c0015402:	68 ad 4b 01 c0       	push   0xc0014bad
c0015407:	6a 04                	push   0x4
c0015409:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540c:	ff d0                	call   eax
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	83 c0 24             	add    eax,0x24
c0015419:	8b 00                	mov    eax,DWORD PTR [eax]
c001541b:	6a 00                	push   0x0
c001541d:	68 ad 4b 01 c0       	push   0xc0014bad
c0015422:	6a 05                	push   0x5
c0015424:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015427:	ff d0                	call   eax
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015431:	83 c0 24             	add    eax,0x24
c0015434:	8b 00                	mov    eax,DWORD PTR [eax]
c0015436:	6a 00                	push   0x0
c0015438:	68 cc 4b 01 c0       	push   0xc0014bcc
c001543d:	6a 06                	push   0x6
c001543f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015442:	ff d0                	call   eax
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	83 c0 24             	add    eax,0x24
c001544f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015451:	6a 00                	push   0x0
c0015453:	68 b9 4a 01 c0       	push   0xc0014ab9
c0015458:	6a 07                	push   0x7
c001545a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545d:	ff d0                	call   eax
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015465:	8b 00                	mov    eax,DWORD PTR [eax]
c0015467:	83 c0 24             	add    eax,0x24
c001546a:	8b 00                	mov    eax,DWORD PTR [eax]
c001546c:	6a 00                	push   0x0
c001546e:	68 a2 42 01 c0       	push   0xc00142a2
c0015473:	6a 08                	push   0x8
c0015475:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015478:	ff d0                	call   eax
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015480:	8b 00                	mov    eax,DWORD PTR [eax]
c0015482:	83 c0 24             	add    eax,0x24
c0015485:	8b 00                	mov    eax,DWORD PTR [eax]
c0015487:	6a 00                	push   0x0
c0015489:	68 ad 4b 01 c0       	push   0xc0014bad
c001548e:	6a 09                	push   0x9
c0015490:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015493:	ff d0                	call   eax
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549b:	8b 00                	mov    eax,DWORD PTR [eax]
c001549d:	83 c0 24             	add    eax,0x24
c00154a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a2:	6a 00                	push   0x0
c00154a4:	68 ad 4b 01 c0       	push   0xc0014bad
c00154a9:	6a 0a                	push   0xa
c00154ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ae:	ff d0                	call   eax
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b8:	83 c0 24             	add    eax,0x24
c00154bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bd:	6a 00                	push   0x0
c00154bf:	68 ad 4b 01 c0       	push   0xc0014bad
c00154c4:	6a 0b                	push   0xb
c00154c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c9:	ff d0                	call   eax
c00154cb:	83 c4 10             	add    esp,0x10
c00154ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d3:	83 c0 24             	add    eax,0x24
c00154d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d8:	6a 00                	push   0x0
c00154da:	68 ad 4b 01 c0       	push   0xc0014bad
c00154df:	6a 0c                	push   0xc
c00154e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e4:	ff d0                	call   eax
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ee:	83 c0 24             	add    eax,0x24
c00154f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f3:	6a 00                	push   0x0
c00154f5:	68 2c 4b 01 c0       	push   0xc0014b2c
c00154fa:	6a 0d                	push   0xd
c00154fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ff:	ff d0                	call   eax
c0015501:	83 c4 10             	add    esp,0x10
c0015504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015507:	8b 00                	mov    eax,DWORD PTR [eax]
c0015509:	83 c0 24             	add    eax,0x24
c001550c:	8b 00                	mov    eax,DWORD PTR [eax]
c001550e:	6a 00                	push   0x0
c0015510:	68 65 4b 01 c0       	push   0xc0014b65
c0015515:	6a 0e                	push   0xe
c0015517:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551a:	ff d0                	call   eax
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	83 c0 24             	add    eax,0x24
c0015527:	8b 00                	mov    eax,DWORD PTR [eax]
c0015529:	6a 00                	push   0x0
c001552b:	68 ad 4b 01 c0       	push   0xc0014bad
c0015530:	6a 0f                	push   0xf
c0015532:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015535:	ff d0                	call   eax
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553d:	8b 00                	mov    eax,DWORD PTR [eax]
c001553f:	83 c0 24             	add    eax,0x24
c0015542:	8b 00                	mov    eax,DWORD PTR [eax]
c0015544:	6a 00                	push   0x0
c0015546:	68 ad 4b 01 c0       	push   0xc0014bad
c001554b:	6a 10                	push   0x10
c001554d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015550:	ff d0                	call   eax
c0015552:	83 c4 10             	add    esp,0x10
c0015555:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015558:	8b 00                	mov    eax,DWORD PTR [eax]
c001555a:	83 c0 24             	add    eax,0x24
c001555d:	8b 00                	mov    eax,DWORD PTR [eax]
c001555f:	6a 00                	push   0x0
c0015561:	68 ad 4b 01 c0       	push   0xc0014bad
c0015566:	6a 11                	push   0x11
c0015568:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556b:	ff d0                	call   eax
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015573:	8b 00                	mov    eax,DWORD PTR [eax]
c0015575:	83 c0 24             	add    eax,0x24
c0015578:	8b 00                	mov    eax,DWORD PTR [eax]
c001557a:	6a 00                	push   0x0
c001557c:	68 ad 4b 01 c0       	push   0xc0014bad
c0015581:	6a 12                	push   0x12
c0015583:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015586:	ff d0                	call   eax
c0015588:	83 c4 10             	add    esp,0x10
c001558b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015590:	83 c0 24             	add    eax,0x24
c0015593:	8b 00                	mov    eax,DWORD PTR [eax]
c0015595:	6a 00                	push   0x0
c0015597:	68 ad 4b 01 c0       	push   0xc0014bad
c001559c:	6a 13                	push   0x13
c001559e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a1:	ff d0                	call   eax
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ab:	83 c0 24             	add    eax,0x24
c00155ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b0:	6a 00                	push   0x0
c00155b2:	68 ad 4b 01 c0       	push   0xc0014bad
c00155b7:	6a 14                	push   0x14
c00155b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bc:	ff d0                	call   eax
c00155be:	83 c4 10             	add    esp,0x10
c00155c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c6:	83 c0 24             	add    eax,0x24
c00155c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cb:	6a 00                	push   0x0
c00155cd:	68 ad 4b 01 c0       	push   0xc0014bad
c00155d2:	6a 1e                	push   0x1e
c00155d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d7:	ff d0                	call   eax
c00155d9:	83 c4 10             	add    esp,0x10
c00155dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155df:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e1:	83 c0 24             	add    eax,0x24
c00155e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e6:	6a 00                	push   0x0
c00155e8:	68 ea c0 01 c0       	push   0xc001c0ea
c00155ed:	6a 60                	push   0x60
c00155ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f2:	ff d0                	call   eax
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155fd:	c9                   	leave  
c00155fe:	c3                   	ret    
c00155ff:	90                   	nop

c0015600 <InterruptController::convertLegacyIRQNumber(int)>:
c0015600:	55                   	push   ebp
c0015601:	89 e5                	mov    ebp,esp
c0015603:	83 ec 08             	sub    esp,0x8
c0015606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015609:	83 ec 0c             	sub    esp,0xc
c001560c:	50                   	push   eax
c001560d:	e8 b6 e8 ff ff       	call   c0013ec8 <Device::getName()>
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	8a 00                	mov    al,BYTE PTR [eax]
c0015617:	3c 41                	cmp    al,0x41
c0015619:	0f 94 c0             	sete   al
c001561c:	84 c0                	test   al,al
c001561e:	74 28                	je     c0015648 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015620:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015624:	7f 12                	jg     c0015638 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015626:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015629:	05 00 cd 02 c0       	add    eax,0xc002cd00
c001562e:	8a 00                	mov    al,BYTE PTR [eax]
c0015630:	0f b6 c0             	movzx  eax,al
c0015633:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015636:	eb 10                	jmp    c0015648 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015638:	83 ec 0c             	sub    esp,0xc
c001563b:	68 64 af 02 c0       	push   0xc002af64
c0015640:	e8 b6 48 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001564b:	c9                   	leave  
c001564c:	c3                   	ret    
c001564d:	90                   	nop

c001564e <startGUI(void*)>:
c001564e:	55                   	push   ebp
c001564f:	89 e5                	mov    ebp,esp
c0015651:	53                   	push   ebx
c0015652:	83 ec 04             	sub    esp,0x4
c0015655:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001565a:	48                   	dec    eax
c001565b:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0015660:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0015665:	85 c0                	test   eax,eax
c0015667:	75 01                	jne    c001566a <startGUI(void*)+0x1c>
c0015669:	fb                   	sti    
c001566a:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015670:	83 ec 08             	sub    esp,0x8
c0015673:	6a 01                	push   0x1
c0015675:	68 e4 af 02 c0       	push   0xc002afe4
c001567a:	e8 46 7a 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	83 ec 08             	sub    esp,0x8
c0015685:	53                   	push   ebx
c0015686:	50                   	push   eax
c0015687:	e8 6a 7c 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015695:	83 ec 08             	sub    esp,0x8
c0015698:	6a 01                	push   0x1
c001569a:	68 fe af 02 c0       	push   0xc002affe
c001569f:	e8 21 7a 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c00156a4:	83 c4 10             	add    esp,0x10
c00156a7:	83 ec 08             	sub    esp,0x8
c00156aa:	53                   	push   ebx
c00156ab:	50                   	push   eax
c00156ac:	e8 45 7c 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c00156b1:	83 c4 10             	add    esp,0x10
c00156b4:	90                   	nop
c00156b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156b8:	c9                   	leave  
c00156b9:	c3                   	ret    

c00156ba <startGUIVESA(void*)>:
c00156ba:	55                   	push   ebp
c00156bb:	89 e5                	mov    ebp,esp
c00156bd:	53                   	push   ebx
c00156be:	83 ec 04             	sub    esp,0x4
c00156c1:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00156c6:	48                   	dec    eax
c00156c7:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00156cc:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00156d1:	85 c0                	test   eax,eax
c00156d3:	75 01                	jne    c00156d6 <startGUIVESA(void*)+0x1c>
c00156d5:	fb                   	sti    
c00156d6:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c00156dc:	83 ec 08             	sub    esp,0x8
c00156df:	6a 01                	push   0x1
c00156e1:	68 18 b0 02 c0       	push   0xc002b018
c00156e6:	e8 da 79 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c00156eb:	83 c4 10             	add    esp,0x10
c00156ee:	83 ec 08             	sub    esp,0x8
c00156f1:	53                   	push   ebx
c00156f2:	50                   	push   eax
c00156f3:	e8 fe 7b 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0015701:	83 ec 08             	sub    esp,0x8
c0015704:	6a 01                	push   0x1
c0015706:	68 fe af 02 c0       	push   0xc002affe
c001570b:	e8 b5 79 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	83 ec 08             	sub    esp,0x8
c0015716:	53                   	push   ebx
c0015717:	50                   	push   eax
c0015718:	e8 d9 7b 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	90                   	nop
c0015721:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015724:	c9                   	leave  
c0015725:	c3                   	ret    

c0015726 <sendKeyToTerminal(unsigned char)>:
c0015726:	55                   	push   ebp
c0015727:	89 e5                	mov    ebp,esp
c0015729:	83 ec 28             	sub    esp,0x28
c001572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015732:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015737:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001573b:	83 ec 08             	sub    esp,0x8
c001573e:	52                   	push   edx
c001573f:	50                   	push   eax
c0015740:	e8 bd b2 ff ff       	call   c0010a02 <VgaText::receiveKey(unsigned char)>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001574c:	0f 85 8f 00 00 00    	jne    c00157e1 <sendKeyToTerminal(unsigned char)+0xbb>
c0015752:	fa                   	cli    
c0015753:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0015758:	40                   	inc    eax
c0015759:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001575e:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c0015763:	40                   	inc    eax
c0015764:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c0015769:	a1 40 dc 02 c0       	mov    eax,ds:0xc002dc40
c001576e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015771:	c7 05 40 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc40,0x0
c001577b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001577f:	74 1f                	je     c00157a0 <sendKeyToTerminal(unsigned char)+0x7a>
c0015781:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015784:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015787:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001578a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015790:	83 ec 0c             	sub    esp,0xc
c0015793:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015796:	e8 73 87 00 00       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	eb db                	jmp    c001577b <sendKeyToTerminal(unsigned char)+0x55>
c00157a0:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c00157a5:	48                   	dec    eax
c00157a6:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c00157ab:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c00157b0:	85 c0                	test   eax,eax
c00157b2:	75 18                	jne    c00157cc <sendKeyToTerminal(unsigned char)+0xa6>
c00157b4:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c00157b9:	85 c0                	test   eax,eax
c00157bb:	74 0f                	je     c00157cc <sendKeyToTerminal(unsigned char)+0xa6>
c00157bd:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c00157c7:	e8 bf 82 00 00       	call   c001da8b <schedule()>
c00157cc:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00157d1:	48                   	dec    eax
c00157d2:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00157d7:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00157dc:	85 c0                	test   eax,eax
c00157de:	75 01                	jne    c00157e1 <sendKeyToTerminal(unsigned char)+0xbb>
c00157e0:	fb                   	sti    
c00157e1:	90                   	nop
c00157e2:	c9                   	leave  
c00157e3:	c3                   	ret    

c00157e4 <sendKeyboardToken(KeyboardToken)>:
c00157e4:	55                   	push   ebp
c00157e5:	89 e5                	mov    ebp,esp
c00157e7:	83 ec 18             	sub    esp,0x18
c00157ea:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f0:	0f b7 c0             	movzx  eax,ax
c00157f3:	83 f2 01             	xor    edx,0x1
c00157f6:	88 90 60 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd23a0],dl
c00157fc:	a1 48 dc 02 c0       	mov    eax,ds:0xc002dc48
c0015801:	85 c0                	test   eax,eax
c0015803:	74 24                	je     c0015829 <sendKeyboardToken(KeyboardToken)+0x45>
c0015805:	8b 0d 48 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc48
c001580b:	83 ec 04             	sub    esp,0x4
c001580e:	68 60 dc 02 c0       	push   0xc002dc60
c0015813:	83 ec 08             	sub    esp,0x8
c0015816:	89 e2                	mov    edx,esp
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	89 02                	mov    DWORD PTR [edx],eax
c001581d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015820:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015824:	ff d1                	call   ecx
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	66 3d 03 02          	cmp    ax,0x203
c0015830:	75 07                	jne    c0015839 <sendKeyboardToken(KeyboardToken)+0x55>
c0015832:	a0 60 dd 02 c0       	mov    al,ds:0xc002dd60
c0015837:	84 c0                	test   al,al
c0015839:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001583d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015840:	a0 68 e0 02 c0       	mov    al,ds:0xc002e068
c0015845:	38 c2                	cmp    dl,al
c0015847:	74 1c                	je     c0015865 <sendKeyboardToken(KeyboardToken)+0x81>
c0015849:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001584c:	a2 68 e0 02 c0       	mov    ds:0xc002e068,al
c0015851:	a0 68 e0 02 c0       	mov    al,ds:0xc002e068
c0015856:	0f b6 c0             	movzx  eax,al
c0015859:	83 ec 0c             	sub    esp,0xc
c001585c:	50                   	push   eax
c001585d:	e8 e2 a7 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c0015862:	83 c4 10             	add    esp,0x10
c0015865:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015868:	84 c0                	test   al,al
c001586a:	0f 84 ae 00 00 00    	je     c001591e <sendKeyboardToken(KeyboardToken)+0x13a>
c0015870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015873:	66 3d 10 03          	cmp    ax,0x310
c0015877:	75 06                	jne    c001587f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015879:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	66 3d 11 03          	cmp    ax,0x311
c0015886:	75 06                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015888:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 12 03          	cmp    ax,0x312
c0015895:	75 06                	jne    c001589d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015897:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	66 3d 13 03          	cmp    ax,0x313
c00158a4:	75 06                	jne    c00158ac <sendKeyboardToken(KeyboardToken)+0xc8>
c00158a6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00158ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158af:	66 3d 14 03          	cmp    ax,0x314
c00158b3:	75 06                	jne    c00158bb <sendKeyboardToken(KeyboardToken)+0xd7>
c00158b5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158be:	66 3d 15 03          	cmp    ax,0x315
c00158c2:	75 06                	jne    c00158ca <sendKeyboardToken(KeyboardToken)+0xe6>
c00158c4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	66 3d 16 03          	cmp    ax,0x316
c00158d1:	75 06                	jne    c00158d9 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158d3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dc:	66 3d 17 03          	cmp    ax,0x317
c00158e0:	75 06                	jne    c00158e8 <sendKeyboardToken(KeyboardToken)+0x104>
c00158e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158eb:	66 3d 18 03          	cmp    ax,0x318
c00158ef:	75 06                	jne    c00158f7 <sendKeyboardToken(KeyboardToken)+0x113>
c00158f1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fa:	66 3d 19 03          	cmp    ax,0x319
c00158fe:	75 06                	jne    c0015906 <sendKeyboardToken(KeyboardToken)+0x122>
c0015900:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015909:	66 3d 1a 03          	cmp    ax,0x31a
c001590d:	0f 85 c9 00 00 00    	jne    c00159dc <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015913:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015919:	e9 be 00 00 00       	jmp    c00159dc <sendKeyboardToken(KeyboardToken)+0x1f8>
c001591e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015921:	66 3d 10 03          	cmp    ax,0x310
c0015925:	75 0a                	jne    c0015931 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015927:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001592d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015934:	66 3d 11 03          	cmp    ax,0x311
c0015938:	75 0a                	jne    c0015944 <sendKeyboardToken(KeyboardToken)+0x160>
c001593a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015940:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015947:	66 3d 12 03          	cmp    ax,0x312
c001594b:	75 0a                	jne    c0015957 <sendKeyboardToken(KeyboardToken)+0x173>
c001594d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015953:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595a:	66 3d 13 03          	cmp    ax,0x313
c001595e:	75 0a                	jne    c001596a <sendKeyboardToken(KeyboardToken)+0x186>
c0015960:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015966:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001596a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596d:	66 3d 14 03          	cmp    ax,0x314
c0015971:	75 0a                	jne    c001597d <sendKeyboardToken(KeyboardToken)+0x199>
c0015973:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015979:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015980:	66 3d 15 03          	cmp    ax,0x315
c0015984:	75 0a                	jne    c0015990 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015986:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001598c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015993:	66 3d 16 03          	cmp    ax,0x316
c0015997:	75 0a                	jne    c00159a3 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015999:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001599f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a6:	66 3d 17 03          	cmp    ax,0x317
c00159aa:	75 0a                	jne    c00159b6 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00159ac:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00159b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b9:	66 3d 18 03          	cmp    ax,0x318
c00159bd:	75 0a                	jne    c00159c9 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00159bf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	66 3d 19 03          	cmp    ax,0x319
c00159d0:	75 0a                	jne    c00159dc <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159d2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159df:	66 3d 00 02          	cmp    ax,0x200
c00159e3:	75 2c                	jne    c0015a11 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159e5:	a0 60 e0 02 c0       	mov    al,ds:0xc002e060
c00159ea:	83 f0 01             	xor    eax,0x1
c00159ed:	84 c0                	test   al,al
c00159ef:	74 20                	je     c0015a11 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159f1:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00159f6:	6a 01                	push   0x1
c00159f8:	6a 00                	push   0x0
c00159fa:	68 4e 56 01 c0       	push   0xc001564e
c00159ff:	50                   	push   eax
c0015a00:	e8 61 7e 00 00       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	c6 05 60 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e060,0x1
c0015a0f:	eb 33                	jmp    c0015a44 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a14:	66 3d 01 02          	cmp    ax,0x201
c0015a18:	75 2a                	jne    c0015a44 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a1a:	a0 60 e0 02 c0       	mov    al,ds:0xc002e060
c0015a1f:	83 f0 01             	xor    eax,0x1
c0015a22:	84 c0                	test   al,al
c0015a24:	74 1e                	je     c0015a44 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a26:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0015a2b:	6a 01                	push   0x1
c0015a2d:	6a 00                	push   0x0
c0015a2f:	68 ba 56 01 c0       	push   0xc00156ba
c0015a34:	50                   	push   eax
c0015a35:	e8 2c 7e 00 00       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	c6 05 60 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e060,0x1
c0015a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a47:	66 3d 1d 03          	cmp    ax,0x31d
c0015a4b:	75 06                	jne    c0015a53 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a4d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a56:	66 3d 1c 03          	cmp    ax,0x31c
c0015a5a:	75 06                	jne    c0015a62 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a5c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a65:	66 3d 1b 03          	cmp    ax,0x31b
c0015a69:	75 06                	jne    c0015a71 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a6b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a74:	66 3d 1e 03          	cmp    ax,0x31e
c0015a78:	75 06                	jne    c0015a80 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a7a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a83:	66 3d 1f 03          	cmp    ax,0x31f
c0015a87:	75 06                	jne    c0015a8f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a89:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a92:	66 3d 1a 03          	cmp    ax,0x31a
c0015a96:	75 06                	jne    c0015a9e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015a98:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a9e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015aa2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa5:	83 f0 01             	xor    eax,0x1
c0015aa8:	84 c0                	test   al,al
c0015aaa:	74 77                	je     c0015b23 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015aac:	a0 61 dd 02 c0       	mov    al,ds:0xc002dd61
c0015ab1:	84 c0                	test   al,al
c0015ab3:	74 41                	je     c0015af6 <sendKeyboardToken(KeyboardToken)+0x312>
c0015ab5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ab9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015abd:	74 2b                	je     c0015aea <sendKeyboardToken(KeyboardToken)+0x306>
c0015abf:	8b 15 64 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e064
c0015ac5:	89 d0                	mov    eax,edx
c0015ac7:	c1 e0 02             	shl    eax,0x2
c0015aca:	01 d0                	add    eax,edx
c0015acc:	01 c0                	add    eax,eax
c0015ace:	a3 64 e0 02 c0       	mov    ds:0xc002e064,eax
c0015ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad6:	0f b7 c0             	movzx  eax,ax
c0015ad9:	8d 50 d0             	lea    edx,[eax-0x30]
c0015adc:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0015ae1:	01 d0                	add    eax,edx
c0015ae3:	a3 64 e0 02 c0       	mov    ds:0xc002e064,eax
c0015ae8:	eb 6d                	jmp    c0015b57 <sendKeyboardToken(KeyboardToken)+0x373>
c0015aea:	c7 05 64 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e064,0x0
c0015af4:	eb 61                	jmp    c0015b57 <sendKeyboardToken(KeyboardToken)+0x373>
c0015af6:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0015afb:	85 c0                	test   eax,eax
c0015afd:	74 18                	je     c0015b17 <sendKeyboardToken(KeyboardToken)+0x333>
c0015aff:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0015b04:	0f b6 c0             	movzx  eax,al
c0015b07:	83 ec 0c             	sub    esp,0xc
c0015b0a:	50                   	push   eax
c0015b0b:	e8 16 fc ff ff       	call   c0015726 <sendKeyToTerminal(unsigned char)>
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b17:	c7 05 64 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e064,0x0
c0015b21:	eb 34                	jmp    c0015b57 <sendKeyboardToken(KeyboardToken)+0x373>
c0015b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b26:	66 3d 01 01          	cmp    ax,0x101
c0015b2a:	75 2b                	jne    c0015b57 <sendKeyboardToken(KeyboardToken)+0x373>
c0015b2c:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0015b31:	85 c0                	test   eax,eax
c0015b33:	74 18                	je     c0015b4d <sendKeyboardToken(KeyboardToken)+0x369>
c0015b35:	a1 64 e0 02 c0       	mov    eax,ds:0xc002e064
c0015b3a:	0f b6 c0             	movzx  eax,al
c0015b3d:	83 ec 0c             	sub    esp,0xc
c0015b40:	50                   	push   eax
c0015b41:	e8 e0 fb ff ff       	call   c0015726 <sendKeyToTerminal(unsigned char)>
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b4d:	c7 05 64 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e064,0x0
c0015b57:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b5a:	83 f0 01             	xor    eax,0x1
c0015b5d:	84 c0                	test   al,al
c0015b5f:	74 4c                	je     c0015bad <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b61:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b64:	83 f0 01             	xor    eax,0x1
c0015b67:	84 c0                	test   al,al
c0015b69:	74 42                	je     c0015bad <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b6b:	a0 60 dd 02 c0       	mov    al,ds:0xc002dd60
c0015b70:	83 f0 01             	xor    eax,0x1
c0015b73:	84 c0                	test   al,al
c0015b75:	74 36                	je     c0015bad <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7a:	66 83 f8 1f          	cmp    ax,0x1f
c0015b7e:	76 09                	jbe    c0015b89 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 83 f8 7e          	cmp    ax,0x7e
c0015b87:	76 12                	jbe    c0015b9b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8c:	66 83 f8 0a          	cmp    ax,0xa
c0015b90:	74 09                	je     c0015b9b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b95:	66 83 f8 08          	cmp    ax,0x8
c0015b99:	75 12                	jne    c0015bad <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9e:	0f b6 c0             	movzx  eax,al
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	50                   	push   eax
c0015ba5:	e8 7c fb ff ff       	call   c0015726 <sendKeyToTerminal(unsigned char)>
c0015baa:	83 c4 10             	add    esp,0x10
c0015bad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015bb0:	83 f0 01             	xor    eax,0x1
c0015bb3:	84 c0                	test   al,al
c0015bb5:	74 4f                	je     c0015c06 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bb7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bba:	83 f0 01             	xor    eax,0x1
c0015bbd:	84 c0                	test   al,al
c0015bbf:	74 45                	je     c0015c06 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bc1:	a0 60 dd 02 c0       	mov    al,ds:0xc002dd60
c0015bc6:	84 c0                	test   al,al
c0015bc8:	74 3c                	je     c0015c06 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcd:	66 83 f8 3f          	cmp    ax,0x3f
c0015bd1:	76 33                	jbe    c0015c06 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd6:	66 83 f8 7f          	cmp    ax,0x7f
c0015bda:	77 2a                	ja     c0015c06 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdf:	88 c2                	mov    dl,al
c0015be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be4:	66 83 f8 5f          	cmp    ax,0x5f
c0015be8:	76 04                	jbe    c0015bee <sendKeyboardToken(KeyboardToken)+0x40a>
c0015bea:	b0 20                	mov    al,0x20
c0015bec:	eb 02                	jmp    c0015bf0 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015bee:	b0 00                	mov    al,0x0
c0015bf0:	29 c2                	sub    edx,eax
c0015bf2:	88 d0                	mov    al,dl
c0015bf4:	83 e8 40             	sub    eax,0x40
c0015bf7:	0f b6 c0             	movzx  eax,al
c0015bfa:	83 ec 0c             	sub    esp,0xc
c0015bfd:	50                   	push   eax
c0015bfe:	e8 23 fb ff ff       	call   c0015726 <sendKeyToTerminal(unsigned char)>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c09:	66 3d 00 03          	cmp    ax,0x300
c0015c0d:	75 0f                	jne    c0015c1e <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c0f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c12:	83 f0 01             	xor    eax,0x1
c0015c15:	84 c0                	test   al,al
c0015c17:	74 05                	je     c0015c1e <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c19:	e8 97 a7 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015c1e:	90                   	nop
c0015c1f:	c9                   	leave  
c0015c20:	c3                   	ret    

c0015c21 <clearInternalKeybuffer(VgaText*)>:
c0015c21:	55                   	push   ebp
c0015c22:	89 e5                	mov    ebp,esp
c0015c24:	83 ec 08             	sub    esp,0x8
c0015c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2a:	05 98 01 00 00       	add    eax,0x198
c0015c2f:	83 ec 0c             	sub    esp,0xc
c0015c32:	50                   	push   eax
c0015c33:	e8 34 ab fe ff       	call   c000076c <strlen>
c0015c38:	83 c4 10             	add    esp,0x10
c0015c3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c3e:	81 c2 98 01 00 00    	add    edx,0x198
c0015c44:	83 ec 04             	sub    esp,0x4
c0015c47:	50                   	push   eax
c0015c48:	6a 00                	push   0x0
c0015c4a:	52                   	push   edx
c0015c4b:	e8 00 ab fe ff       	call   c0000750 <memset>
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	90                   	nop
c0015c54:	c9                   	leave  
c0015c55:	c3                   	ret    

c0015c56 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c56:	55                   	push   ebp
c0015c57:	89 e5                	mov    ebp,esp
c0015c59:	83 ec 18             	sub    esp,0x18
c0015c5c:	a1 48 dc 02 c0       	mov    eax,ds:0xc002dc48
c0015c61:	85 c0                	test   eax,eax
c0015c63:	74 2a                	je     c0015c8f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015c65:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015c6b:	8b 0d 48 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc48
c0015c71:	83 ec 04             	sub    esp,0x4
c0015c74:	68 60 dc 02 c0       	push   0xc002dc60
c0015c79:	83 ec 08             	sub    esp,0x8
c0015c7c:	89 e2                	mov    edx,esp
c0015c7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c81:	89 02                	mov    DWORD PTR [edx],eax
c0015c83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c86:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c8a:	ff d1                	call   ecx
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	fb                   	sti    
c0015c90:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c97:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c9b:	0f 84 a1 00 00 00    	je     c0015d42 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca4:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015caa:	84 c0                	test   al,al
c0015cac:	75 28                	jne    c0015cd6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015cae:	fa                   	cli    
c0015caf:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0015cb4:	40                   	inc    eax
c0015cb5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0015cba:	e8 cc 7d 00 00       	call   c001da8b <schedule()>
c0015cbf:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0015cc4:	48                   	dec    eax
c0015cc5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c0015cca:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c0015ccf:	85 c0                	test   eax,eax
c0015cd1:	75 ce                	jne    c0015ca1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cd3:	fb                   	sti    
c0015cd4:	eb cb                	jmp    c0015ca1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cd9:	8d 50 01             	lea    edx,[eax+0x1]
c0015cdc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015cdf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ce2:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015ce8:	88 10                	mov    BYTE PTR [eax],dl
c0015cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ced:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cf3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf9:	05 98 01 00 00       	add    eax,0x198
c0015cfe:	83 ec 0c             	sub    esp,0xc
c0015d01:	50                   	push   eax
c0015d02:	e8 65 aa fe ff       	call   c000076c <strlen>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d0d:	81 c2 98 01 00 00    	add    edx,0x198
c0015d13:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015d16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d19:	81 c2 98 01 00 00    	add    edx,0x198
c0015d1f:	83 ec 04             	sub    esp,0x4
c0015d22:	50                   	push   eax
c0015d23:	51                   	push   ecx
c0015d24:	52                   	push   edx
c0015d25:	e8 5e a9 fe ff       	call   c0000688 <memmove>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015d30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015d33:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015d37:	0f 85 5a ff ff ff    	jne    c0015c97 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d40:	eb 03                	jmp    c0015d45 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d45:	c9                   	leave  
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <Keyboard::Keyboard(char const*)>:
c0015d48:	83 ec 0c             	sub    esp,0xc
c0015d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d4f:	83 ec 08             	sub    esp,0x8
c0015d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d56:	50                   	push   eax
c0015d57:	e8 70 e0 ff ff       	call   c0013dcc <Device::Device(char const*)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	ba 3c b0 02 c0       	mov    edx,0xc002b03c
c0015d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d68:	89 10                	mov    DWORD PTR [eax],edx
c0015d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d6e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d78:	c6 05 44 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc44,0x1
c0015d7f:	90                   	nop
c0015d80:	83 c4 0c             	add    esp,0xc
c0015d83:	c3                   	ret    

c0015d84 <Keyboard::~Keyboard()>:
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	ba 3c b0 02 c0       	mov    edx,0xc002b03c
c0015d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d90:	89 10                	mov    DWORD PTR [eax],edx
c0015d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d96:	83 ec 0c             	sub    esp,0xc
c0015d99:	50                   	push   eax
c0015d9a:	e8 f7 dc ff ff       	call   c0013a96 <Device::~Device()>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	90                   	nop
c0015da3:	83 c4 0c             	add    esp,0xc
c0015da6:	c3                   	ret    
c0015da7:	90                   	nop

c0015da8 <Keyboard::~Keyboard()>:
c0015da8:	83 ec 0c             	sub    esp,0xc
c0015dab:	83 ec 0c             	sub    esp,0xc
c0015dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db2:	e8 cd ff ff ff       	call   c0015d84 <Keyboard::~Keyboard()>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	83 ec 08             	sub    esp,0x8
c0015dbd:	68 5c 01 00 00       	push   0x15c
c0015dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dc6:	e8 ec c8 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	83 c4 0c             	add    esp,0xc
c0015dd1:	c3                   	ret    

c0015dd2 <LogicalDisk::close(int, int, void*)>:
c0015dd2:	83 c8 ff             	or     eax,0xffffffff
c0015dd5:	c3                   	ret    

c0015dd6 <LogicalDisk::~LogicalDisk()>:
c0015dd6:	83 ec 0c             	sub    esp,0xc
c0015dd9:	ba b4 b0 02 c0       	mov    edx,0xc002b0b4
c0015dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de2:	89 10                	mov    DWORD PTR [eax],edx
c0015de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	50                   	push   eax
c0015dec:	e8 a5 dc ff ff       	call   c0013a96 <Device::~Device()>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	90                   	nop
c0015df5:	83 c4 0c             	add    esp,0xc
c0015df8:	c3                   	ret    
c0015df9:	90                   	nop

c0015dfa <LogicalDisk::~LogicalDisk()>:
c0015dfa:	83 ec 0c             	sub    esp,0xc
c0015dfd:	83 ec 0c             	sub    esp,0xc
c0015e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e04:	e8 cd ff ff ff       	call   c0015dd6 <LogicalDisk::~LogicalDisk()>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	83 ec 08             	sub    esp,0x8
c0015e0f:	68 74 01 00 00       	push   0x174
c0015e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e18:	e8 9a c8 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0015e1d:	83 c4 10             	add    esp,0x10
c0015e20:	83 c4 0c             	add    esp,0xc
c0015e23:	c3                   	ret    

c0015e24 <LogicalDisk::open(int, int, void*)>:
c0015e24:	83 ec 18             	sub    esp,0x18
c0015e27:	68 68 b0 02 c0       	push   0xc002b068
c0015e2c:	e8 ca 40 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0015e31:	83 c8 ff             	or     eax,0xffffffff
c0015e34:	83 c4 1c             	add    esp,0x1c
c0015e37:	c3                   	ret    

c0015e38 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015e38:	53                   	push   ebx
c0015e39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e45:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015e4b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015e51:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015e57:	77 10                	ja     c0015e69 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015e59:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e5f:	89 d3                	mov    ebx,edx
c0015e61:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e67:	72 05                	jb     c0015e6e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e69:	83 c8 ff             	or     eax,0xffffffff
c0015e6c:	89 c2                	mov    edx,eax
c0015e6e:	5b                   	pop    ebx
c0015e6f:	c3                   	ret    

c0015e70 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e70:	56                   	push   esi
c0015e71:	83 c8 ff             	or     eax,0xffffffff
c0015e74:	53                   	push   ebx
c0015e75:	89 c2                	mov    edx,eax
c0015e77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e7b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e89:	77 27                	ja     c0015eb2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e8b:	89 d8                	mov    eax,ebx
c0015e8d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e93:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e9e:	89 c2                	mov    edx,eax
c0015ea0:	73 10                	jae    c0015eb2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ea2:	89 c8                	mov    eax,ecx
c0015ea4:	89 da                	mov    edx,ebx
c0015ea6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015eac:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015eb2:	5b                   	pop    ebx
c0015eb3:	5e                   	pop    esi
c0015eb4:	c3                   	ret    
c0015eb5:	90                   	nop

c0015eb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015eb6:	83 ec 1c             	sub    esp,0x1c
c0015eb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ec9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ed4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015edc:	83 ec 08             	sub    esp,0x8
c0015edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ee3:	50                   	push   eax
c0015ee4:	e8 e3 de ff ff       	call   c0013dcc <Device::Device(char const*)>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	ba b4 b0 02 c0       	mov    edx,0xc002b0b4
c0015ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef5:	89 10                	mov    DWORD PTR [eax],edx
c0015ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015efb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f06:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f11:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015f1b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f27:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015f2d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015f33:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f3e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015f44:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f52:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f5c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f66:	90                   	nop
c0015f67:	83 c4 1c             	add    esp,0x1c
c0015f6a:	c3                   	ret    
c0015f6b:	90                   	nop

c0015f6c <LogicalDisk::assignDriveLetter()>:
c0015f6c:	55                   	push   ebp
c0015f6d:	57                   	push   edi
c0015f6e:	56                   	push   esi
c0015f6f:	53                   	push   ebx
c0015f70:	83 ec 14             	sub    esp,0x14
c0015f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f77:	8b 3d 80 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e080
c0015f7d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f83:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f87:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f8d:	8b 3d 84 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e084
c0015f93:	3c 01                	cmp    al,0x1
c0015f95:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f99:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f9d:	19 c0                	sbb    eax,eax
c0015f9f:	83 e0 02             	and    eax,0x2
c0015fa2:	83 c0 41             	add    eax,0x41
c0015fa5:	0f be e8             	movsx  ebp,al
c0015fa8:	3c 43                	cmp    al,0x43
c0015faa:	75 10                	jne    c0015fbc <LogicalDisk::assignDriveLetter()+0x50>
c0015fac:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015fb3:	75 5d                	jne    c0016012 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fb5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015fba:	75 56                	jne    c0016012 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fbc:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015fbf:	ba 01 00 00 00       	mov    edx,0x1
c0015fc4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015fc8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015fcc:	d3 e2                	shl    edx,cl
c0015fce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fd2:	89 d7                	mov    edi,edx
c0015fd4:	89 d6                	mov    esi,edx
c0015fd6:	c1 ff 1f             	sar    edi,0x1f
c0015fd9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015fdd:	21 f9                	and    ecx,edi
c0015fdf:	09 d1                	or     ecx,edx
c0015fe1:	75 2f                	jne    c0016012 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fe3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015fe7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015feb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015ff1:	09 f2                	or     edx,esi
c0015ff3:	89 15 80 e0 02 c0    	mov    DWORD PTR ds:0xc002e080,edx
c0015ff9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ffd:	09 fa                	or     edx,edi
c0015fff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016003:	89 15 84 e0 02 c0    	mov    DWORD PTR ds:0xc002e084,edx
c0016009:	89 1c bd a0 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f60],ebx
c0016010:	eb 08                	jmp    c001601a <LogicalDisk::assignDriveLetter()+0xae>
c0016012:	45                   	inc    ebp
c0016013:	40                   	inc    eax
c0016014:	3c 5b                	cmp    al,0x5b
c0016016:	75 90                	jne    c0015fa8 <LogicalDisk::assignDriveLetter()+0x3c>
c0016018:	31 c0                	xor    eax,eax
c001601a:	83 c4 14             	add    esp,0x14
c001601d:	5b                   	pop    ebx
c001601e:	5e                   	pop    esi
c001601f:	5f                   	pop    edi
c0016020:	5d                   	pop    ebp
c0016021:	c3                   	ret    

c0016022 <LogicalDisk::mount()>:
c0016022:	56                   	push   esi
c0016023:	53                   	push   ebx
c0016024:	53                   	push   ebx
c0016025:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016029:	8b 1d 14 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc14
c001602f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016039:	85 db                	test   ebx,ebx
c001603b:	74 27                	je     c0016064 <LogicalDisk::mount()+0x42>
c001603d:	51                   	push   ecx
c001603e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016045:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016047:	83 e8 41             	sub    eax,0x41
c001604a:	50                   	push   eax
c001604b:	56                   	push   esi
c001604c:	53                   	push   ebx
c001604d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	84 c0                	test   al,al
c0016055:	74 08                	je     c001605f <LogicalDisk::mount()+0x3d>
c0016057:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001605d:	eb 07                	jmp    c0016066 <LogicalDisk::mount()+0x44>
c001605f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016062:	eb d5                	jmp    c0016039 <LogicalDisk::mount()+0x17>
c0016064:	31 c0                	xor    eax,eax
c0016066:	5a                   	pop    edx
c0016067:	5b                   	pop    ebx
c0016068:	5e                   	pop    esi
c0016069:	c3                   	ret    

c001606a <LogicalDisk::unmount()>:
c001606a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001606e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016078:	c3                   	ret    
c0016079:	90                   	nop

c001607a <LogicalDisk::eject()>:
c001607a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001607e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016084:	8b 10                	mov    edx,DWORD PTR [eax]
c0016086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001608a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001608d:	90                   	nop

c001608e <LogicalDisk::unassignDriveLetter()>:
c001608e:	57                   	push   edi
c001608f:	56                   	push   esi
c0016090:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016094:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001609b:	84 c9                	test   cl,cl
c001609d:	75 0f                	jne    c00160ae <LogicalDisk::unassignDriveLetter()+0x20>
c001609f:	c7 44 24 0c 8c b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b08c
c00160a7:	5e                   	pop    esi
c00160a8:	5f                   	pop    edi
c00160a9:	e9 4d 3e 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c00160ae:	83 e9 41             	sub    ecx,0x41
c00160b1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00160b8:	b8 01 00 00 00       	mov    eax,0x1
c00160bd:	c7 04 8d a0 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f60],0x0
c00160c8:	d3 e0                	shl    eax,cl
c00160ca:	89 c7                	mov    edi,eax
c00160cc:	f7 d0                	not    eax
c00160ce:	c1 ff 1f             	sar    edi,0x1f
c00160d1:	21 05 80 e0 02 c0    	and    DWORD PTR ds:0xc002e080,eax
c00160d7:	89 fe                	mov    esi,edi
c00160d9:	f7 d6                	not    esi
c00160db:	21 35 84 e0 02 c0    	and    DWORD PTR ds:0xc002e084,esi
c00160e1:	5e                   	pop    esi
c00160e2:	5f                   	pop    edi
c00160e3:	c3                   	ret    

c00160e4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160e4:	57                   	push   edi
c00160e5:	56                   	push   esi
c00160e6:	53                   	push   ebx
c00160e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160fd:	77 41                	ja     c0016140 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160ff:	99                   	cdq    
c0016100:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016106:	01 c8                	add    eax,ecx
c0016108:	11 da                	adc    edx,ebx
c001610a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016110:	19 d7                	sbb    edi,edx
c0016112:	72 33                	jb     c0016147 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016114:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001611a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016120:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016124:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016128:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001612e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016138:	5b                   	pop    ebx
c0016139:	5e                   	pop    esi
c001613a:	5f                   	pop    edi
c001613b:	e9 cc 0a 00 00       	jmp    c0016c0c <VCache::read(unsigned long long, int, void*)>
c0016140:	b8 05 00 00 00       	mov    eax,0x5
c0016145:	eb 05                	jmp    c001614c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016147:	b8 07 00 00 00       	mov    eax,0x7
c001614c:	5b                   	pop    ebx
c001614d:	5e                   	pop    esi
c001614e:	5f                   	pop    edi
c001614f:	c3                   	ret    

c0016150 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016150:	57                   	push   edi
c0016151:	56                   	push   esi
c0016152:	53                   	push   ebx
c0016153:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016157:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001615b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001615f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016163:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016169:	77 41                	ja     c00161ac <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001616b:	99                   	cdq    
c001616c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016172:	01 c8                	add    eax,ecx
c0016174:	11 da                	adc    edx,ebx
c0016176:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001617c:	19 d7                	sbb    edi,edx
c001617e:	72 33                	jb     c00161b3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016180:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016186:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001618c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016190:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016194:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001619a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161a4:	5b                   	pop    ebx
c00161a5:	5e                   	pop    esi
c00161a6:	5f                   	pop    edi
c00161a7:	e9 76 09 00 00       	jmp    c0016b22 <VCache::write(unsigned long long, int, void*)>
c00161ac:	b8 05 00 00 00       	mov    eax,0x5
c00161b1:	eb 05                	jmp    c00161b8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00161b3:	b8 07 00 00 00       	mov    eax,0x7
c00161b8:	5b                   	pop    ebx
c00161b9:	5e                   	pop    esi
c00161ba:	5f                   	pop    edi
c00161bb:	c3                   	ret    

c00161bc <Mouse::Mouse(char const*)>:
c00161bc:	83 ec 0c             	sub    esp,0xc
c00161bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c3:	83 ec 08             	sub    esp,0x8
c00161c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ca:	50                   	push   eax
c00161cb:	e8 fc db ff ff       	call   c0013dcc <Device::Device(char const*)>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	ba e0 b0 02 c0       	mov    edx,0xc002b0e0
c00161d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161dc:	89 10                	mov    DWORD PTR [eax],edx
c00161de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161ec:	90                   	nop
c00161ed:	83 c4 0c             	add    esp,0xc
c00161f0:	c3                   	ret    
c00161f1:	90                   	nop

c00161f2 <Mouse::~Mouse()>:
c00161f2:	83 ec 0c             	sub    esp,0xc
c00161f5:	ba e0 b0 02 c0       	mov    edx,0xc002b0e0
c00161fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161fe:	89 10                	mov    DWORD PTR [eax],edx
c0016200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	50                   	push   eax
c0016208:	e8 89 d8 ff ff       	call   c0013a96 <Device::~Device()>
c001620d:	83 c4 10             	add    esp,0x10
c0016210:	90                   	nop
c0016211:	83 c4 0c             	add    esp,0xc
c0016214:	c3                   	ret    
c0016215:	90                   	nop

c0016216 <Mouse::~Mouse()>:
c0016216:	83 ec 0c             	sub    esp,0xc
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016220:	e8 cd ff ff ff       	call   c00161f2 <Mouse::~Mouse()>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	83 ec 08             	sub    esp,0x8
c001622b:	68 58 01 00 00       	push   0x158
c0016230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016234:	e8 7e c4 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	83 c4 0c             	add    esp,0xc
c001623f:	c3                   	ret    

c0016240 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016240:	55                   	push   ebp
c0016241:	57                   	push   edi
c0016242:	56                   	push   esi
c0016243:	53                   	push   ebx
c0016244:	81 ec 28 01 00 00    	sub    esp,0x128
c001624a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016251:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016258:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001625f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016266:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001626a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001626e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016275:	e8 4e dc ff ff       	call   c0013ec8 <Device::getName()>
c001627a:	5a                   	pop    edx
c001627b:	59                   	pop    ecx
c001627c:	50                   	push   eax
c001627d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016281:	55                   	push   ebp
c0016282:	e8 85 a5 fe ff       	call   c000080c <strcpy>
c0016287:	5b                   	pop    ebx
c0016288:	58                   	pop    eax
c0016289:	68 04 b1 02 c0       	push   0xc002b104
c001628e:	55                   	push   ebp
c001628f:	e8 b8 a6 fe ff       	call   c000094c <strcat>
c0016294:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001629b:	e8 f9 92 ff ff       	call   c000f599 <malloc>
c00162a0:	83 c4 0c             	add    esp,0xc
c00162a3:	89 c3                	mov    ebx,eax
c00162a5:	57                   	push   edi
c00162a6:	56                   	push   esi
c00162a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162af:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00162b6:	55                   	push   ebp
c00162b7:	50                   	push   eax
c00162b8:	e8 f9 fb ff ff       	call   c0015eb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00162bd:	83 c4 14             	add    esp,0x14
c00162c0:	53                   	push   ebx
c00162c1:	e8 a6 fc ff ff       	call   c0015f6c <LogicalDisk::assignDriveLetter()>
c00162c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162c9:	e8 54 fd ff ff       	call   c0016022 <LogicalDisk::mount()>
c00162ce:	58                   	pop    eax
c00162cf:	5a                   	pop    edx
c00162d0:	53                   	push   ebx
c00162d1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162d8:	e8 eb d8 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c00162dd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162e3:	5b                   	pop    ebx
c00162e4:	5e                   	pop    esi
c00162e5:	5f                   	pop    edi
c00162e6:	5d                   	pop    ebp
c00162e7:	c3                   	ret    

c00162e8 <createPartitionsForDisk(PhysicalDisk*)>:
c00162e8:	55                   	push   ebp
c00162e9:	57                   	push   edi
c00162ea:	56                   	push   esi
c00162eb:	53                   	push   ebx
c00162ec:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162f2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162f9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162ff:	3d 00 02 00 00       	cmp    eax,0x200
c0016304:	74 27                	je     c001632d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016306:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001630c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016312:	83 ec 10             	sub    esp,0x10
c0016315:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016319:	99                   	cdq    
c001631a:	c1 e6 0a             	shl    esi,0xa
c001631d:	52                   	push   edx
c001631e:	89 fd                	mov    ebp,edi
c0016320:	50                   	push   eax
c0016321:	55                   	push   ebp
c0016322:	56                   	push   esi
c0016323:	e8 ac 04 01 00       	call   c00267d4 <__udivdi3>
c0016328:	e9 b1 00 00 00       	jmp    c00163de <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001632d:	83 ec 0c             	sub    esp,0xc
c0016330:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016332:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016336:	56                   	push   esi
c0016337:	6a 01                	push   0x1
c0016339:	6a 00                	push   0x0
c001633b:	6a 00                	push   0x0
c001633d:	53                   	push   ebx
c001633e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016341:	83 c4 20             	add    esp,0x20
c0016344:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001634c:	75 0a                	jne    c0016358 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001634e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016356:	74 2c                	je     c0016384 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016358:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001635e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016364:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001636a:	83 ec 10             	sub    esp,0x10
c001636d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016371:	89 f7                	mov    edi,esi
c0016373:	c1 e0 0a             	shl    eax,0xa
c0016376:	c1 ff 1f             	sar    edi,0x1f
c0016379:	57                   	push   edi
c001637a:	56                   	push   esi
c001637b:	52                   	push   edx
c001637c:	50                   	push   eax
c001637d:	e8 52 04 01 00       	call   c00267d4 <__udivdi3>
c0016382:	eb 5a                	jmp    c00163de <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016384:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001638b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016392:	83 e1 7f             	and    ecx,0x7f
c0016395:	83 e0 7f             	and    eax,0x7f
c0016398:	01 c1                	add    ecx,eax
c001639a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00163a1:	83 e0 7f             	and    eax,0x7f
c00163a4:	01 c1                	add    ecx,eax
c00163a6:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00163ad:	83 e0 7f             	and    eax,0x7f
c00163b0:	00 c1                	add    cl,al
c00163b2:	74 41                	je     c00163f5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00163b4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163ba:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163c0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163c6:	83 ec 10             	sub    esp,0x10
c00163c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163cd:	89 f7                	mov    edi,esi
c00163cf:	c1 e0 0a             	shl    eax,0xa
c00163d2:	c1 ff 1f             	sar    edi,0x1f
c00163d5:	57                   	push   edi
c00163d6:	56                   	push   esi
c00163d7:	52                   	push   edx
c00163d8:	50                   	push   eax
c00163d9:	e8 f6 03 01 00       	call   c00267d4 <__udivdi3>
c00163de:	83 c4 14             	add    esp,0x14
c00163e1:	52                   	push   edx
c00163e2:	50                   	push   eax
c00163e3:	6a 00                	push   0x0
c00163e5:	6a 00                	push   0x0
c00163e7:	53                   	push   ebx
c00163e8:	e8 53 fe ff ff       	call   c0016240 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163ed:	83 c4 20             	add    esp,0x20
c00163f0:	e9 79 01 00 00       	jmp    c001656e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163f5:	89 f0                	mov    eax,esi
c00163f7:	31 f6                	xor    esi,esi
c00163f9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016400:	75 02                	jne    c0016404 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016402:	89 f1                	mov    ecx,esi
c0016404:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001640b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016412:	c1 e2 08             	shl    edx,0x8
c0016415:	c1 e7 10             	shl    edi,0x10
c0016418:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016420:	09 fa                	or     edx,edi
c0016422:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001642a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016431:	83 c0 10             	add    eax,0x10
c0016434:	09 fa                	or     edx,edi
c0016436:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001643d:	c1 e7 18             	shl    edi,0x18
c0016440:	09 fa                	or     edx,edi
c0016442:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016449:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001644d:	c1 e7 10             	shl    edi,0x10
c0016450:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016457:	c1 e2 08             	shl    edx,0x8
c001645a:	09 fa                	or     edx,edi
c001645c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016463:	09 fa                	or     edx,edi
c0016465:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001646c:	c1 e7 18             	shl    edi,0x18
c001646f:	09 fa                	or     edx,edi
c0016471:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016475:	46                   	inc    esi
c0016476:	83 fe 04             	cmp    esi,0x4
c0016479:	0f 85 7a ff ff ff    	jne    c00163f9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001647f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016483:	83 f0 01             	xor    eax,0x1
c0016486:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001648a:	75 57                	jne    c00164e3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001648c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016490:	83 f0 01             	xor    eax,0x1
c0016493:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016497:	75 4a                	jne    c00164e3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016499:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001649d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00164a5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00164ad:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164b3:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164b9:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164bf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164c3:	89 f7                	mov    edi,esi
c00164c5:	c1 e0 0a             	shl    eax,0xa
c00164c8:	c1 ff 1f             	sar    edi,0x1f
c00164cb:	57                   	push   edi
c00164cc:	56                   	push   esi
c00164cd:	52                   	push   edx
c00164ce:	50                   	push   eax
c00164cf:	e8 00 03 01 00       	call   c00267d4 <__udivdi3>
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164df:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164e3:	84 c9                	test   cl,cl
c00164e5:	74 53                	je     c001653a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164e7:	0f b6 c9             	movzx  ecx,cl
c00164ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016502:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016506:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001650a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001650e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016516:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001651a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001651e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016522:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016526:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001652a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001652e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016532:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016536:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001653a:	31 ed                	xor    ebp,ebp
c001653c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016540:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016544:	89 f8                	mov    eax,edi
c0016546:	09 f0                	or     eax,esi
c0016548:	74 1e                	je     c0016568 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001654a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001654e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016552:	89 d1                	mov    ecx,edx
c0016554:	09 c1                	or     ecx,eax
c0016556:	74 10                	je     c0016568 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	57                   	push   edi
c001655c:	56                   	push   esi
c001655d:	52                   	push   edx
c001655e:	50                   	push   eax
c001655f:	53                   	push   ebx
c0016560:	e8 db fc ff ff       	call   c0016240 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016565:	83 c4 20             	add    esp,0x20
c0016568:	45                   	inc    ebp
c0016569:	83 fd 04             	cmp    ebp,0x4
c001656c:	75 ce                	jne    c001653c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001656e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016574:	5b                   	pop    ebx
c0016575:	5e                   	pop    esi
c0016576:	5f                   	pop    edi
c0016577:	5d                   	pop    ebp
c0016578:	c3                   	ret    
c0016579:	90                   	nop

c001657a <Serial::Serial(char const*)>:
c001657a:	83 ec 0c             	sub    esp,0xc
c001657d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016581:	83 ec 08             	sub    esp,0x8
c0016584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016588:	50                   	push   eax
c0016589:	e8 3e d8 ff ff       	call   c0013dcc <Device::Device(char const*)>
c001658e:	83 c4 10             	add    esp,0x10
c0016591:	ba 18 b1 02 c0       	mov    edx,0xc002b118
c0016596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659a:	89 10                	mov    DWORD PTR [eax],edx
c001659c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a0:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00165aa:	90                   	nop
c00165ab:	83 c4 0c             	add    esp,0xc
c00165ae:	c3                   	ret    
c00165af:	90                   	nop

c00165b0 <Serial::~Serial()>:
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	ba 18 b1 02 c0       	mov    edx,0xc002b118
c00165b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165bc:	89 10                	mov    DWORD PTR [eax],edx
c00165be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165c2:	83 ec 0c             	sub    esp,0xc
c00165c5:	50                   	push   eax
c00165c6:	e8 cb d4 ff ff       	call   c0013a96 <Device::~Device()>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	90                   	nop
c00165cf:	83 c4 0c             	add    esp,0xc
c00165d2:	c3                   	ret    
c00165d3:	90                   	nop

c00165d4 <Serial::~Serial()>:
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165de:	e8 cd ff ff ff       	call   c00165b0 <Serial::~Serial()>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	83 ec 08             	sub    esp,0x8
c00165e9:	68 58 01 00 00       	push   0x158
c00165ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f2:	e8 c0 c0 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 c4 0c             	add    esp,0xc
c00165fd:	c3                   	ret    

c00165fe <Timer::Timer(char const*)>:
c00165fe:	83 ec 0c             	sub    esp,0xc
c0016601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016605:	83 ec 08             	sub    esp,0x8
c0016608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660c:	50                   	push   eax
c001660d:	e8 ba d7 ff ff       	call   c0013dcc <Device::Device(char const*)>
c0016612:	83 c4 10             	add    esp,0x10
c0016615:	ba 5c b1 02 c0       	mov    edx,0xc002b15c
c001661a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661e:	89 10                	mov    DWORD PTR [eax],edx
c0016620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016624:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001662e:	90                   	nop
c001662f:	83 c4 0c             	add    esp,0xc
c0016632:	c3                   	ret    
c0016633:	90                   	nop

c0016634 <Timer::~Timer()>:
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	ba 5c b1 02 c0       	mov    edx,0xc002b15c
c001663c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016640:	89 10                	mov    DWORD PTR [eax],edx
c0016642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016646:	83 ec 0c             	sub    esp,0xc
c0016649:	50                   	push   eax
c001664a:	e8 47 d4 ff ff       	call   c0013a96 <Device::~Device()>
c001664f:	83 c4 10             	add    esp,0x10
c0016652:	90                   	nop
c0016653:	83 c4 0c             	add    esp,0xc
c0016656:	c3                   	ret    
c0016657:	90                   	nop

c0016658 <Timer::~Timer()>:
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	83 ec 0c             	sub    esp,0xc
c001665e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016662:	e8 cd ff ff ff       	call   c0016634 <Timer::~Timer()>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	83 ec 08             	sub    esp,0x8
c001666d:	68 5c 01 00 00       	push   0x15c
c0016672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016676:	e8 3c c0 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	83 c4 0c             	add    esp,0xc
c0016681:	c3                   	ret    

c0016682 <Timer::read()>:
c0016682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016686:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001668c:	c3                   	ret    

c001668d <timerHandler(unsigned long long)>:
c001668d:	55                   	push   ebp
c001668e:	57                   	push   edi
c001668f:	56                   	push   esi
c0016690:	53                   	push   ebx
c0016691:	83 ec 0c             	sub    esp,0xc
c0016694:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016698:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001669c:	01 35 10 e1 02 c0    	add    DWORD PTR ds:0xc002e110,esi
c00166a2:	11 3d 14 e1 02 c0    	adc    DWORD PTR ds:0xc002e114,edi
c00166a8:	80 3d ad da 02 c0 00 	cmp    BYTE PTR ds:0xc002daad,0x0
c00166af:	0f 84 42 01 00 00    	je     c00167f7 <timerHandler(unsigned long long)+0x16a>
c00166b5:	fa                   	cli    
c00166b6:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c00166bc:	83 ec 0c             	sub    esp,0xc
c00166bf:	ff 05 c4 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc4
c00166c5:	68 d8 0f 03 c0       	push   0xc0030fd8
c00166ca:	e8 5f 21 01 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	84 c0                	test   al,al
c00166d4:	0f 85 a2 00 00 00    	jne    c001677c <timerHandler(unsigned long long)+0xef>
c00166da:	83 ec 0c             	sub    esp,0xc
c00166dd:	68 d8 0f 03 c0       	push   0xc0030fd8
c00166e2:	e8 63 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166e7:	83 c4 10             	add    esp,0x10
c00166ea:	89 c3                	mov    ebx,eax
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 d8 0f 03 c0       	push   0xc0030fd8
c00166f4:	e8 51 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f9:	c7 04 24 d8 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fd8
c0016700:	89 c5                	mov    ebp,eax
c0016702:	e8 4b 21 01 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016707:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016710:	39 15 10 e1 02 c0    	cmp    DWORD PTR ds:0xc002e110,edx
c0016716:	a1 14 e1 02 c0       	mov    eax,ds:0xc002e114
c001671b:	19 c8                	sbb    eax,ecx
c001671d:	72 21                	jb     c0016740 <timerHandler(unsigned long long)+0xb3>
c001671f:	83 ec 0c             	sub    esp,0xc
c0016722:	55                   	push   ebp
c0016723:	e8 e6 77 00 00       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	39 eb                	cmp    ebx,ebp
c001672d:	75 21                	jne    c0016750 <timerHandler(unsigned long long)+0xc3>
c001672f:	83 ec 0c             	sub    esp,0xc
c0016732:	68 d8 0f 03 c0       	push   0xc0030fd8
c0016737:	e8 0e 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001673c:	89 c3                	mov    ebx,eax
c001673e:	eb 0d                	jmp    c001674d <timerHandler(unsigned long long)+0xc0>
c0016740:	50                   	push   eax
c0016741:	50                   	push   eax
c0016742:	55                   	push   ebp
c0016743:	68 d8 0f 03 c0       	push   0xc0030fd8
c0016748:	e8 b3 21 01 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001674d:	83 c4 10             	add    esp,0x10
c0016750:	83 ec 0c             	sub    esp,0xc
c0016753:	68 d8 0f 03 c0       	push   0xc0030fd8
c0016758:	e8 d1 20 01 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	84 c0                	test   al,al
c0016762:	75 18                	jne    c001677c <timerHandler(unsigned long long)+0xef>
c0016764:	83 ec 0c             	sub    esp,0xc
c0016767:	68 d8 0f 03 c0       	push   0xc0030fd8
c001676c:	e8 d9 20 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	39 d8                	cmp    eax,ebx
c0016776:	0f 85 70 ff ff ff    	jne    c00166ec <timerHandler(unsigned long long)+0x5f>
c001677c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016781:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016785:	74 3d                	je     c00167c4 <timerHandler(unsigned long long)+0x137>
c0016787:	80 3d ac da 02 c0 00 	cmp    BYTE PTR ds:0xc002daac,0x0
c001678e:	74 34                	je     c00167c4 <timerHandler(unsigned long long)+0x137>
c0016790:	fa                   	cli    
c0016791:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c0016797:	31 d2                	xor    edx,edx
c0016799:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001679e:	89 f9                	mov    ecx,edi
c00167a0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00167a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167ab:	39 c6                	cmp    esi,eax
c00167ad:	19 d1                	sbb    ecx,edx
c00167af:	72 05                	jb     c00167b6 <timerHandler(unsigned long long)+0x129>
c00167b1:	e8 d5 72 00 00       	call   c001da8b <schedule()>
c00167b6:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00167bb:	48                   	dec    eax
c00167bc:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00167c1:	75 01                	jne    c00167c4 <timerHandler(unsigned long long)+0x137>
c00167c3:	fb                   	sti    
c00167c4:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c00167c9:	48                   	dec    eax
c00167ca:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c00167cf:	75 18                	jne    c00167e9 <timerHandler(unsigned long long)+0x15c>
c00167d1:	83 3d c0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fc0,0x0
c00167d8:	74 0f                	je     c00167e9 <timerHandler(unsigned long long)+0x15c>
c00167da:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c00167e4:	e8 a2 72 00 00       	call   c001da8b <schedule()>
c00167e9:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00167ee:	48                   	dec    eax
c00167ef:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00167f4:	75 01                	jne    c00167f7 <timerHandler(unsigned long long)+0x16a>
c00167f6:	fb                   	sti    
c00167f7:	83 c4 0c             	add    esp,0xc
c00167fa:	5b                   	pop    ebx
c00167fb:	5e                   	pop    esi
c00167fc:	5f                   	pop    edi
c00167fd:	5d                   	pop    ebp
c00167fe:	c3                   	ret    

c00167ff <setupTimer(int)>:
c00167ff:	57                   	push   edi
c0016800:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0016805:	56                   	push   esi
c0016806:	53                   	push   ebx
c0016807:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016811:	83 ec 0c             	sub    esp,0xc
c0016814:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001681a:	e8 a9 d6 ff ff       	call   c0013ec8 <Device::getName()>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016825:	0f 85 8d 00 00 00    	jne    c00168b8 <setupTimer(int)+0xb9>
c001682b:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0016830:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016837:	74 7f                	je     c00168b8 <setupTimer(int)+0xb9>
c0016839:	83 ec 0c             	sub    esp,0xc
c001683c:	68 5c 01 00 00       	push   0x15c
c0016841:	e8 53 8d ff ff       	call   c000f599 <malloc>
c0016846:	89 04 24             	mov    DWORD PTR [esp],eax
c0016849:	89 c3                	mov    ebx,eax
c001684b:	e8 5a fb 00 00       	call   c00263aa <PIT::PIT()>
c0016850:	59                   	pop    ecx
c0016851:	5f                   	pop    edi
c0016852:	53                   	push   ebx
c0016853:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0016859:	e8 6a d3 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c001685e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016860:	6a 00                	push   0x0
c0016862:	6a 00                	push   0x0
c0016864:	56                   	push   esi
c0016865:	53                   	push   ebx
c0016866:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016869:	83 c4 14             	add    esp,0x14
c001686c:	68 60 01 00 00       	push   0x160
c0016871:	e8 23 8d ff ff       	call   c000f599 <malloc>
c0016876:	89 04 24             	mov    DWORD PTR [esp],eax
c0016879:	89 c7                	mov    edi,eax
c001687b:	e8 da f9 00 00       	call   c002625a <APICTimer::APICTimer()>
c0016880:	6a 00                	push   0x0
c0016882:	6a 00                	push   0x0
c0016884:	56                   	push   esi
c0016885:	57                   	push   edi
c0016886:	e8 d1 f8 00 00       	call   c002615c <APICTimer::open(int, int, void*)>
c001688b:	83 c4 20             	add    esp,0x20
c001688e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016890:	6a 00                	push   0x0
c0016892:	6a 00                	push   0x0
c0016894:	6a 00                	push   0x0
c0016896:	53                   	push   ebx
c0016897:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001689a:	58                   	pop    eax
c001689b:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00168a0:	5a                   	pop    edx
c00168a1:	57                   	push   edi
c00168a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168a8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168ae:	e8 15 d3 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c00168b3:	83 c4 10             	add    esp,0x10
c00168b6:	eb 33                	jmp    c00168eb <setupTimer(int)+0xec>
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 5c 01 00 00       	push   0x15c
c00168c0:	e8 d4 8c ff ff       	call   c000f599 <malloc>
c00168c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00168c8:	89 c3                	mov    ebx,eax
c00168ca:	e8 db fa 00 00       	call   c00263aa <PIT::PIT()>
c00168cf:	58                   	pop    eax
c00168d0:	5a                   	pop    edx
c00168d1:	53                   	push   ebx
c00168d2:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c00168d8:	e8 eb d2 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c00168dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168df:	6a 00                	push   0x0
c00168e1:	6a 00                	push   0x0
c00168e3:	56                   	push   esi
c00168e4:	53                   	push   ebx
c00168e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168e8:	83 c4 20             	add    esp,0x20
c00168eb:	89 d8                	mov    eax,ebx
c00168ed:	5b                   	pop    ebx
c00168ee:	5e                   	pop    esi
c00168ef:	5f                   	pop    edi
c00168f0:	c3                   	ret    
c00168f1:	90                   	nop

c00168f2 <VCache::VCache(PhysicalDisk*)>:
c00168f2:	53                   	push   ebx
c00168f3:	83 ec 18             	sub    esp,0x18
c00168f6:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c00168fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ff:	89 10                	mov    DWORD PTR [eax],edx
c0016901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016905:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001690c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016910:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016922:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001692d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016934:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001693b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001694e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016952:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016959:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016964:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016974:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016983:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016992:	e8 02 8c ff ff       	call   c000f599 <malloc>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	89 c3                	mov    ebx,eax
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	53                   	push   ebx
c00169a0:	e8 af 6e 00 00       	call   c001d854 <Mutex::Mutex()>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ac:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00169af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00169ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169be:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00169c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169c9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00169cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00169d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169da:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00169e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00169ea:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00169ed:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00169f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00169f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a02:	05 00 01 00 00       	add    eax,0x100
c0016a07:	c1 e0 04             	shl    eax,0x4
c0016a0a:	83 ec 0c             	sub    esp,0xc
c0016a0d:	50                   	push   eax
c0016a0e:	e8 86 8b ff ff       	call   c000f599 <malloc>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	89 c2                	mov    edx,eax
c0016a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a23:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a2e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a32:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a36:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a3c:	c1 e0 07             	shl    eax,0x7
c0016a3f:	83 ec 0c             	sub    esp,0xc
c0016a42:	50                   	push   eax
c0016a43:	e8 51 8b ff ff       	call   c000f599 <malloc>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	89 c2                	mov    edx,eax
c0016a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a51:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016a54:	90                   	nop
c0016a55:	83 c4 18             	add    esp,0x18
c0016a58:	5b                   	pop    ebx
c0016a59:	c3                   	ret    

c0016a5a <VCache::invalidateReadBuffer()>:
c0016a5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a5e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016a64:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a68:	c3                   	ret    
c0016a69:	90                   	nop

c0016a6a <VCache::writeWriteBuffer()>:
c0016a6a:	53                   	push   ebx
c0016a6b:	83 ec 14             	sub    esp,0x14
c0016a6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a72:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a75:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a77:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a7d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a80:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a83:	50                   	push   eax
c0016a84:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a87:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a8e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a95:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a99:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016aa0:	83 c4 28             	add    esp,0x28
c0016aa3:	5b                   	pop    ebx
c0016aa4:	c3                   	ret    
c0016aa5:	90                   	nop

c0016aa6 <VCache::~VCache()>:
c0016aa6:	83 ec 0c             	sub    esp,0xc
c0016aa9:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c0016aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab2:	89 10                	mov    DWORD PTR [eax],edx
c0016ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016abb:	84 c0                	test   al,al
c0016abd:	74 0f                	je     c0016ace <VCache::~VCache()+0x28>
c0016abf:	83 ec 0c             	sub    esp,0xc
c0016ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ac6:	e8 9f ff ff ff       	call   c0016a6a <VCache::writeWriteBuffer()>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	50                   	push   eax
c0016ad9:	e8 cb 8a ff ff       	call   c000f5a9 <free>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ae8:	83 ec 0c             	sub    esp,0xc
c0016aeb:	50                   	push   eax
c0016aec:	e8 b8 8a ff ff       	call   c000f5a9 <free>
c0016af1:	83 c4 10             	add    esp,0x10
c0016af4:	90                   	nop
c0016af5:	83 c4 0c             	add    esp,0xc
c0016af8:	c3                   	ret    
c0016af9:	90                   	nop

c0016afa <VCache::~VCache()>:
c0016afa:	83 ec 0c             	sub    esp,0xc
c0016afd:	83 ec 0c             	sub    esp,0xc
c0016b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b04:	e8 9d ff ff ff       	call   c0016aa6 <VCache::~VCache()>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	83 ec 08             	sub    esp,0x8
c0016b0f:	6a 44                	push   0x44
c0016b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b15:	e8 9d bb ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0016b1a:	83 c4 10             	add    esp,0x10
c0016b1d:	83 c4 0c             	add    esp,0xc
c0016b20:	c3                   	ret    
c0016b21:	90                   	nop

c0016b22 <VCache::write(unsigned long long, int, void*)>:
c0016b22:	55                   	push   ebp
c0016b23:	57                   	push   edi
c0016b24:	56                   	push   esi
c0016b25:	53                   	push   ebx
c0016b26:	83 ec 18             	sub    esp,0x18
c0016b29:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b38:	e8 5d 72 00 00       	call   c001dd9a <Semaphore::acquire()>
c0016b3d:	83 c4 10             	add    esp,0x10
c0016b40:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b44:	74 0c                	je     c0016b52 <VCache::write(unsigned long long, int, void*)+0x30>
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	53                   	push   ebx
c0016b4a:	e8 0b ff ff ff       	call   c0016a5a <VCache::invalidateReadBuffer()>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b56:	74 5c                	je     c0016bb4 <VCache::write(unsigned long long, int, void*)+0x92>
c0016b58:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016b5b:	89 e8                	mov    eax,ebp
c0016b5d:	99                   	cdq    
c0016b5e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b61:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b64:	89 c1                	mov    ecx,eax
c0016b66:	89 d0                	mov    eax,edx
c0016b68:	31 f1                	xor    ecx,esi
c0016b6a:	31 f8                	xor    eax,edi
c0016b6c:	09 c1                	or     ecx,eax
c0016b6e:	75 38                	jne    c0016ba8 <VCache::write(unsigned long long, int, void*)+0x86>
c0016b70:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016b75:	75 31                	jne    c0016ba8 <VCache::write(unsigned long long, int, void*)+0x86>
c0016b77:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b7a:	89 ef                	mov    edi,ebp
c0016b7c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b86:	0f af f9             	imul   edi,ecx
c0016b89:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016b8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b8e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b91:	40                   	inc    eax
c0016b92:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b95:	83 c0 80             	add    eax,0xffffff80
c0016b98:	75 5c                	jne    c0016bf6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	53                   	push   ebx
c0016b9e:	e8 c7 fe ff ff       	call   c0016a6a <VCache::writeWriteBuffer()>
c0016ba3:	83 c4 10             	add    esp,0x10
c0016ba6:	eb 4e                	jmp    c0016bf6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	53                   	push   ebx
c0016bac:	e8 b9 fe ff ff       	call   c0016a6a <VCache::writeWriteBuffer()>
c0016bb1:	83 c4 10             	add    esp,0x10
c0016bb4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bb7:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016bbc:	7f 22                	jg     c0016be0 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016bbe:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016bc1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016bc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bc8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016bcc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016bcf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016bd2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bd8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bdc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bde:	eb 16                	jmp    c0016bf6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016be0:	83 ec 0c             	sub    esp,0xc
c0016be3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016be5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016be9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bed:	57                   	push   edi
c0016bee:	56                   	push   esi
c0016bef:	50                   	push   eax
c0016bf0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bf3:	83 c4 20             	add    esp,0x20
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bfc:	e8 f5 77 00 00       	call   c001e3f6 <Semaphore::release()>
c0016c01:	83 c4 1c             	add    esp,0x1c
c0016c04:	31 c0                	xor    eax,eax
c0016c06:	5b                   	pop    ebx
c0016c07:	5e                   	pop    esi
c0016c08:	5f                   	pop    edi
c0016c09:	5d                   	pop    ebp
c0016c0a:	c3                   	ret    
c0016c0b:	90                   	nop

c0016c0c <VCache::read(unsigned long long, int, void*)>:
c0016c0c:	55                   	push   ebp
c0016c0d:	57                   	push   edi
c0016c0e:	56                   	push   esi
c0016c0f:	53                   	push   ebx
c0016c10:	83 ec 28             	sub    esp,0x28
c0016c13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c17:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c1b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016c1f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016c23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c26:	e8 6f 71 00 00       	call   c001dd9a <Semaphore::acquire()>
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c32:	74 0c                	je     c0016c40 <VCache::read(unsigned long long, int, void*)+0x34>
c0016c34:	83 ec 0c             	sub    esp,0xc
c0016c37:	53                   	push   ebx
c0016c38:	e8 2d fe ff ff       	call   c0016a6a <VCache::writeWriteBuffer()>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 fd 01             	cmp    ebp,0x1
c0016c43:	0f 85 80 00 00 00    	jne    c0016cc9 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c50:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c57:	75 70                	jne    c0016cc9 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c59:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016c5c:	89 e9                	mov    ecx,ebp
c0016c5e:	f7 d9                	neg    ecx
c0016c60:	89 c8                	mov    eax,ecx
c0016c62:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016c66:	c1 f8 1f             	sar    eax,0x1f
c0016c69:	21 f1                	and    ecx,esi
c0016c6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c6f:	89 c8                	mov    eax,ecx
c0016c71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c75:	21 f9                	and    ecx,edi
c0016c77:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c7b:	89 ca                	mov    edx,ecx
c0016c7d:	74 0a                	je     c0016c89 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c7f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016c82:	75 05                	jne    c0016c89 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c84:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016c87:	74 23                	je     c0016cac <VCache::read(unsigned long long, int, void*)+0xa0>
c0016c89:	83 ec 0c             	sub    esp,0xc
c0016c8c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c94:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016c97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c9a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c9c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c9f:	55                   	push   ebp
c0016ca0:	52                   	push   edx
c0016ca1:	50                   	push   eax
c0016ca2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ca6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ca9:	83 c4 20             	add    esp,0x20
c0016cac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016caf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016cb3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cb9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cbc:	48                   	dec    eax
c0016cbd:	21 c6                	and    esi,eax
c0016cbf:	0f af f1             	imul   esi,ecx
c0016cc2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016cc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cc7:	eb 1d                	jmp    c0016ce6 <VCache::read(unsigned long long, int, void*)+0xda>
c0016cc9:	83 ec 0c             	sub    esp,0xc
c0016ccc:	53                   	push   ebx
c0016ccd:	e8 88 fd ff ff       	call   c0016a5a <VCache::invalidateReadBuffer()>
c0016cd2:	5a                   	pop    edx
c0016cd3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016cdc:	55                   	push   ebp
c0016cdd:	57                   	push   edi
c0016cde:	56                   	push   esi
c0016cdf:	50                   	push   eax
c0016ce0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ce3:	83 c4 20             	add    esp,0x20
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cec:	e8 05 77 00 00       	call   c001e3f6 <Semaphore::release()>
c0016cf1:	83 c4 2c             	add    esp,0x2c
c0016cf4:	31 c0                	xor    eax,eax
c0016cf6:	5b                   	pop    ebx
c0016cf7:	5e                   	pop    esi
c0016cf8:	5f                   	pop    edi
c0016cf9:	5d                   	pop    ebp
c0016cfa:	c3                   	ret    
c0016cfb:	90                   	nop

c0016cfc <Video::putrect(int, int, int, int, unsigned int)>:
c0016cfc:	55                   	push   ebp
c0016cfd:	57                   	push   edi
c0016cfe:	56                   	push   esi
c0016cff:	53                   	push   ebx
c0016d00:	83 ec 1c             	sub    esp,0x1c
c0016d03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d0f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d1b:	01 df                	add    edi,ebx
c0016d1d:	39 fb                	cmp    ebx,edi
c0016d1f:	7d 1f                	jge    c0016d40 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d25:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016d29:	7d 12                	jge    c0016d3d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016d2b:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d31:	53                   	push   ebx
c0016d32:	55                   	push   ebp
c0016d33:	45                   	inc    ebp
c0016d34:	56                   	push   esi
c0016d35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	eb e8                	jmp    c0016d25 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d3d:	43                   	inc    ebx
c0016d3e:	eb dd                	jmp    c0016d1d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d40:	83 c4 1c             	add    esp,0x1c
c0016d43:	5b                   	pop    ebx
c0016d44:	5e                   	pop    esi
c0016d45:	5f                   	pop    edi
c0016d46:	5d                   	pop    ebp
c0016d47:	c3                   	ret    

c0016d48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d48:	55                   	push   ebp
c0016d49:	57                   	push   edi
c0016d4a:	31 ff                	xor    edi,edi
c0016d4c:	56                   	push   esi
c0016d4d:	53                   	push   ebx
c0016d4e:	83 ec 1c             	sub    esp,0x1c
c0016d51:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016d55:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d59:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016d60:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016d65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d69:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016d6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d71:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016d74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d78:	01 f9                	add    ecx,edi
c0016d7a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016d7e:	7d 2f                	jge    c0016daf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016d80:	31 f6                	xor    esi,esi
c0016d82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d86:	01 f2                	add    edx,esi
c0016d88:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016d8c:	7d 1a                	jge    c0016da8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016d8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d91:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016d94:	46                   	inc    esi
c0016d95:	51                   	push   ecx
c0016d96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d9a:	52                   	push   edx
c0016d9b:	55                   	push   ebp
c0016d9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016da6:	eb da                	jmp    c0016d82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016da8:	47                   	inc    edi
c0016da9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016dad:	eb c5                	jmp    c0016d74 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016daf:	83 c4 1c             	add    esp,0x1c
c0016db2:	5b                   	pop    ebx
c0016db3:	5e                   	pop    esi
c0016db4:	5f                   	pop    edi
c0016db5:	5d                   	pop    ebp
c0016db6:	c3                   	ret    
c0016db7:	90                   	nop

c0016db8 <Video::blit(unsigned int*, int, int, int, int)>:
c0016db8:	55                   	push   ebp
c0016db9:	57                   	push   edi
c0016dba:	56                   	push   esi
c0016dbb:	53                   	push   ebx
c0016dbc:	83 ec 1c             	sub    esp,0x1c
c0016dbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016dc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016dc7:	85 c0                	test   eax,eax
c0016dc9:	79 02                	jns    c0016dcd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016dcb:	31 c0                	xor    eax,eax
c0016dcd:	c1 e0 02             	shl    eax,0x2
c0016dd0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ddc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016de0:	39 d8                	cmp    eax,ebx
c0016de2:	7e 49                	jle    c0016e2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016de4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016dea:	7c 41                	jl     c0016e2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016dec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016df0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016df4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016df8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016dfc:	39 f9                	cmp    ecx,edi
c0016dfe:	7e 22                	jle    c0016e22 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e00:	83 c5 04             	add    ebp,0x4
c0016e03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e09:	7c 14                	jl     c0016e1f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e0d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e18:	56                   	push   esi
c0016e19:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	47                   	inc    edi
c0016e20:	eb d2                	jmp    c0016df4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e26:	43                   	inc    ebx
c0016e27:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016e2b:	eb ab                	jmp    c0016dd8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016e2d:	83 c4 1c             	add    esp,0x1c
c0016e30:	5b                   	pop    ebx
c0016e31:	5e                   	pop    esi
c0016e32:	5f                   	pop    edi
c0016e33:	5d                   	pop    ebp
c0016e34:	c3                   	ret    
c0016e35:	90                   	nop

c0016e36 <Video::clearScreen(unsigned int)>:
c0016e36:	57                   	push   edi
c0016e37:	56                   	push   esi
c0016e38:	53                   	push   ebx
c0016e39:	31 db                	xor    ebx,ebx
c0016e3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e3f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e45:	7e 1f                	jle    c0016e66 <Video::clearScreen(unsigned int)+0x30>
c0016e47:	31 ff                	xor    edi,edi
c0016e49:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e4f:	7e 12                	jle    c0016e63 <Video::clearScreen(unsigned int)+0x2d>
c0016e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e57:	53                   	push   ebx
c0016e58:	57                   	push   edi
c0016e59:	47                   	inc    edi
c0016e5a:	56                   	push   esi
c0016e5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	eb e6                	jmp    c0016e49 <Video::clearScreen(unsigned int)+0x13>
c0016e63:	43                   	inc    ebx
c0016e64:	eb d9                	jmp    c0016e3f <Video::clearScreen(unsigned int)+0x9>
c0016e66:	5b                   	pop    ebx
c0016e67:	5e                   	pop    esi
c0016e68:	5f                   	pop    edi
c0016e69:	c3                   	ret    

c0016e6a <Video::putpixel(int, int, unsigned int)>:
c0016e6a:	c7 44 24 04 94 b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b194
c0016e72:	e9 84 30 00 00       	jmp    c0019efb <Krnl::panic(char const*)>
c0016e77:	90                   	nop

c0016e78 <Video::Video(char const*)>:
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e7f:	83 ec 08             	sub    esp,0x8
c0016e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e86:	50                   	push   eax
c0016e87:	e8 40 cf ff ff       	call   c0013dcc <Device::Device(char const*)>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	ba 04 b2 02 c0       	mov    edx,0xc002b204
c0016e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e98:	89 10                	mov    DWORD PTR [eax],edx
c0016e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e9e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016ea8:	90                   	nop
c0016ea9:	83 c4 0c             	add    esp,0xc
c0016eac:	c3                   	ret    
c0016ead:	90                   	nop

c0016eae <Video::~Video()>:
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	ba 04 b2 02 c0       	mov    edx,0xc002b204
c0016eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eba:	89 10                	mov    DWORD PTR [eax],edx
c0016ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	50                   	push   eax
c0016ec4:	e8 cd cb ff ff       	call   c0013a96 <Device::~Device()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	90                   	nop
c0016ecd:	83 c4 0c             	add    esp,0xc
c0016ed0:	c3                   	ret    
c0016ed1:	90                   	nop

c0016ed2 <Video::~Video()>:
c0016ed2:	83 ec 0c             	sub    esp,0xc
c0016ed5:	83 ec 0c             	sub    esp,0xc
c0016ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016edc:	e8 cd ff ff ff       	call   c0016eae <Video::~Video()>
c0016ee1:	83 c4 10             	add    esp,0x10
c0016ee4:	83 ec 08             	sub    esp,0x8
c0016ee7:	68 64 01 00 00       	push   0x164
c0016eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ef0:	e8 c2 b7 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0016ef5:	83 c4 10             	add    esp,0x10
c0016ef8:	83 c4 0c             	add    esp,0xc
c0016efb:	c3                   	ret    

c0016efc <Video::isMonochrome()>:
c0016efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f00:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f06:	c3                   	ret    
c0016f07:	90                   	nop

c0016f08 <Video::getWidth()>:
c0016f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f12:	c3                   	ret    
c0016f13:	90                   	nop

c0016f14 <Video::getHeight()>:
c0016f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f1e:	c3                   	ret    
c0016f1f:	90                   	nop

c0016f20 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f20:	55                   	push   ebp
c0016f21:	57                   	push   edi
c0016f22:	56                   	push   esi
c0016f23:	53                   	push   ebx
c0016f24:	83 ec 2c             	sub    esp,0x2c
c0016f27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f2b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f2f:	83 f8 01             	cmp    eax,0x1
c0016f32:	19 c9                	sbb    ecx,ecx
c0016f34:	31 db                	xor    ebx,ebx
c0016f36:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f3a:	89 cd                	mov    ebp,ecx
c0016f3c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f44:	f7 d5                	not    ebp
c0016f46:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f4c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f50:	01 d8                	add    eax,ebx
c0016f52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f56:	56                   	push   esi
c0016f57:	e8 b8 ff ff ff       	call   c0016f14 <Video::getHeight()>
c0016f5c:	59                   	pop    ecx
c0016f5d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016f61:	7e 70                	jle    c0016fd3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016f63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f67:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f6b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016f6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f72:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f76:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016f7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f81:	89 f8                	mov    eax,edi
c0016f83:	83 c0 20             	add    eax,0x20
c0016f86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f8a:	56                   	push   esi
c0016f8b:	e8 78 ff ff ff       	call   c0016f08 <Video::getWidth()>
c0016f90:	5a                   	pop    edx
c0016f91:	39 c7                	cmp    edi,eax
c0016f93:	7d 34                	jge    c0016fc9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016f95:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f9a:	74 05                	je     c0016fa1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016f9c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f9e:	55                   	push   ebp
c0016f9f:	eb 0d                	jmp    c0016fae <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016fa1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016fa6:	74 12                	je     c0016fba <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016fa8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016faa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fb2:	57                   	push   edi
c0016fb3:	56                   	push   esi
c0016fb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016fbe:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016fc2:	47                   	inc    edi
c0016fc3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016fc7:	75 c1                	jne    c0016f8a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016fc9:	43                   	inc    ebx
c0016fca:	83 fb 20             	cmp    ebx,0x20
c0016fcd:	0f 85 79 ff ff ff    	jne    c0016f4c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016fd3:	83 c4 2c             	add    esp,0x2c
c0016fd6:	5b                   	pop    ebx
c0016fd7:	5e                   	pop    esi
c0016fd8:	5f                   	pop    edi
c0016fd9:	5d                   	pop    ebp
c0016fda:	c3                   	ret    
c0016fdb:	90                   	nop

c0016fdc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016fdc:	55                   	push   ebp
c0016fdd:	57                   	push   edi
c0016fde:	56                   	push   esi
c0016fdf:	53                   	push   ebx
c0016fe0:	83 ec 28             	sub    esp,0x28
c0016fe3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016fe7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016feb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016fef:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ff3:	c1 e6 08             	shl    esi,0x8
c0016ff6:	01 c6                	add    esi,eax
c0016ff8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016ffc:	c1 e0 08             	shl    eax,0x8
c0016fff:	01 d0                	add    eax,edx
c0017001:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017009:	0f af c6             	imul   eax,esi
c001700c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017013:	50                   	push   eax
c0017014:	e8 80 85 ff ff       	call   c000f599 <malloc>
c0017019:	83 c4 10             	add    esp,0x10
c001701c:	89 c7                	mov    edi,eax
c001701e:	85 c0                	test   eax,eax
c0017020:	75 10                	jne    c0017032 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	68 b5 b1 02 c0       	push   0xc002b1b5
c001702a:	e8 cc 2e 00 00       	call   c0019efb <Krnl::panic(char const*)>
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017035:	ba 12 00 00 00       	mov    edx,0x12
c001703a:	84 c0                	test   al,al
c001703c:	74 11                	je     c001704f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001703e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0017042:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0017046:	c1 fa 03             	sar    edx,0x3
c0017049:	0f af d1             	imul   edx,ecx
c001704c:	83 c2 12             	add    edx,0x12
c001704f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017053:	74 04                	je     c0017059 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017055:	85 f6                	test   esi,esi
c0017057:	75 12                	jne    c001706b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017059:	83 ec 0c             	sub    esp,0xc
c001705c:	68 c5 b1 02 c0       	push   0xc002b1c5
c0017061:	e8 29 b7 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0017066:	e9 b8 00 00 00       	jmp    c0017123 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001706b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001706f:	80 f9 02             	cmp    cl,0x2
c0017072:	0f 85 96 00 00 00    	jne    c001710e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017078:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001707d:	75 0e                	jne    c001708d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001707f:	84 c0                	test   al,al
c0017081:	75 0a                	jne    c001708d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017083:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017086:	83 e8 18             	sub    eax,0x18
c0017089:	a8 f7                	test   al,0xf7
c001708b:	74 0a                	je     c0017097 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001708d:	83 ec 0c             	sub    esp,0xc
c0017090:	68 da b1 02 c0       	push   0xc002b1da
c0017095:	eb 7f                	jmp    c0017116 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001709f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00170a7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00170ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170b3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00170b7:	75 0c                	jne    c00170c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00170b9:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00170be:	c1 e0 18             	shl    eax,0x18
c00170c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170c5:	45                   	inc    ebp
c00170c6:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00170cb:	c1 e1 10             	shl    ecx,0x10
c00170ce:	89 c8                	mov    eax,ecx
c00170d0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00170d5:	c1 e1 08             	shl    ecx,0x8
c00170d8:	09 c1                	or     ecx,eax
c00170da:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00170de:	09 c1                	or     ecx,eax
c00170e0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00170e4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00170e8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00170ec:	c1 f8 03             	sar    eax,0x3
c00170ef:	01 c2                	add    edx,eax
c00170f1:	89 e8                	mov    eax,ebp
c00170f3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00170f7:	39 c6                	cmp    esi,eax
c00170f9:	7f b0                	jg     c00170ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00170fb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017103:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0017106:	7e 22                	jle    c001712a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0017108:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c001710c:	eb 99                	jmp    c00170a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001710e:	50                   	push   eax
c001710f:	50                   	push   eax
c0017110:	51                   	push   ecx
c0017111:	68 e8 b1 02 c0       	push   0xc002b1e8
c0017116:	e8 74 b6 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001711b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001711e:	e8 86 84 ff ff       	call   c000f5a9 <free>
c0017123:	83 c4 10             	add    esp,0x10
c0017126:	31 ff                	xor    edi,edi
c0017128:	eb 0f                	jmp    c0017139 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001712a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001712e:	89 30                	mov    DWORD PTR [eax],esi
c0017130:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017134:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017137:	89 30                	mov    DWORD PTR [eax],esi
c0017139:	83 c4 1c             	add    esp,0x1c
c001713c:	89 f8                	mov    eax,edi
c001713e:	5b                   	pop    ebx
c001713f:	5e                   	pop    esi
c0017140:	5f                   	pop    edi
c0017141:	5d                   	pop    ebp
c0017142:	c3                   	ret    
c0017143:	90                   	nop

c0017144 <Video::putTGA(int, int, unsigned char*, int)>:
c0017144:	55                   	push   ebp
c0017145:	57                   	push   edi
c0017146:	56                   	push   esi
c0017147:	53                   	push   ebx
c0017148:	83 ec 28             	sub    esp,0x28
c001714b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001714f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017153:	50                   	push   eax
c0017154:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017158:	50                   	push   eax
c0017159:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001715d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017161:	56                   	push   esi
c0017162:	e8 75 fe ff ff       	call   c0016fdc <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017167:	83 c4 20             	add    esp,0x20
c001716a:	85 c0                	test   eax,eax
c001716c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017170:	74 35                	je     c00171a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017172:	89 c7                	mov    edi,eax
c0017174:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017178:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001717c:	39 d8                	cmp    eax,ebx
c001717e:	7e 27                	jle    c00171a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017180:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017184:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017188:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001718c:	39 e8                	cmp    eax,ebp
c001718e:	7e 14                	jle    c00171a4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017190:	8b 06                	mov    eax,DWORD PTR [esi]
c0017192:	83 c7 04             	add    edi,0x4
c0017195:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017198:	53                   	push   ebx
c0017199:	55                   	push   ebp
c001719a:	45                   	inc    ebp
c001719b:	56                   	push   esi
c001719c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	eb e0                	jmp    c0017184 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00171a4:	43                   	inc    ebx
c00171a5:	eb cd                	jmp    c0017174 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00171a7:	83 c4 1c             	add    esp,0x1c
c00171aa:	5b                   	pop    ebx
c00171ab:	5e                   	pop    esi
c00171ac:	5f                   	pop    edi
c00171ad:	5d                   	pop    ebp
c00171ae:	c3                   	ret    
c00171af:	90                   	nop

c00171b0 <ACPI::close(int, int, void*)>:
c00171b0:	83 ec 1c             	sub    esp,0x1c
c00171b3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00171bb:	74 0a                	je     c00171c7 <ACPI::close(int, int, void*)+0x17>
c00171bd:	b8 00 00 00 00       	mov    eax,0x0
c00171c2:	e9 8a 00 00 00       	jmp    c0017251 <ACPI::close(int, int, void*)+0xa1>
c00171c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00171cc:	75 27                	jne    c00171f5 <ACPI::close(int, int, void*)+0x45>
c00171ce:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c00171d3:	85 c0                	test   eax,eax
c00171d5:	74 07                	je     c00171de <ACPI::close(int, int, void*)+0x2e>
c00171d7:	a1 48 01 03 c0       	mov    eax,ds:0xc0030148
c00171dc:	ff d0                	call   eax
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	68 44 b2 02 c0       	push   0xc002b244
c00171e6:	e8 10 2d 00 00       	call   c0019efb <Krnl::panic(char const*)>
c00171eb:	83 c4 10             	add    esp,0x10
c00171ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171f3:	eb 5c                	jmp    c0017251 <ACPI::close(int, int, void*)+0xa1>
c00171f5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00171fa:	75 50                	jne    c001724c <ACPI::close(int, int, void*)+0x9c>
c00171fc:	a1 44 01 03 c0       	mov    eax,ds:0xc0030144
c0017201:	85 c0                	test   eax,eax
c0017203:	74 07                	je     c001720c <ACPI::close(int, int, void*)+0x5c>
c0017205:	a1 44 01 03 c0       	mov    eax,ds:0xc0030144
c001720a:	ff d0                	call   eax
c001720c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017211:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017216:	83 e0 02             	and    eax,0x2
c0017219:	74 1c                	je     c0017237 <ACPI::close(int, int, void*)+0x87>
c001721b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017226:	89 c2                	mov    edx,eax
c0017228:	ec                   	in     al,dx
c0017229:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001722d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017231:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017235:	eb da                	jmp    c0017211 <ACPI::close(int, int, void*)+0x61>
c0017237:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001723e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017243:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017247:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001724b:	ee                   	out    dx,al
c001724c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017251:	83 c4 1c             	add    esp,0x1c
c0017254:	c3                   	ret    

c0017255 <findRSDP()>:
c0017255:	83 ec 1c             	sub    esp,0x1c
c0017258:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001725d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017263:	83 e0 04             	and    eax,0x4
c0017266:	84 c0                	test   al,al
c0017268:	75 07                	jne    c0017271 <findRSDP()+0x1c>
c001726a:	b8 00 00 00 00       	mov    eax,0x0
c001726f:	eb 6a                	jmp    c00172db <findRSDP()+0x86>
c0017271:	a1 f4 da 02 c0       	mov    eax,ds:0xc002daf4
c0017276:	3d ff 07 00 00       	cmp    eax,0x7ff
c001727b:	7f 1b                	jg     c0017298 <findRSDP()+0x43>
c001727d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017282:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017288:	83 e2 fb             	and    edx,0xfffffffb
c001728b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017291:	b8 00 00 00 00       	mov    eax,0x0
c0017296:	eb 43                	jmp    c00172db <findRSDP()+0x86>
c0017298:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00172a0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00172a8:	77 2c                	ja     c00172d6 <findRSDP()+0x81>
c00172aa:	83 ec 04             	sub    esp,0x4
c00172ad:	6a 08                	push   0x8
c00172af:	68 df b2 02 c0       	push   0xc002b2df
c00172b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172b8:	e8 8f 93 fe ff       	call   c000064c <memcmp>
c00172bd:	83 c4 10             	add    esp,0x10
c00172c0:	85 c0                	test   eax,eax
c00172c2:	0f 94 c0             	sete   al
c00172c5:	84 c0                	test   al,al
c00172c7:	74 06                	je     c00172cf <findRSDP()+0x7a>
c00172c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172cd:	eb 0c                	jmp    c00172db <findRSDP()+0x86>
c00172cf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00172d4:	eb ca                	jmp    c00172a0 <findRSDP()+0x4b>
c00172d6:	b8 00 00 00 00       	mov    eax,0x0
c00172db:	83 c4 1c             	add    esp,0x1c
c00172de:	c3                   	ret    

c00172df <loadACPITables(unsigned char*)>:
c00172df:	57                   	push   edi
c00172e0:	56                   	push   esi
c00172e1:	53                   	push   ebx
c00172e2:	83 ec 60             	sub    esp,0x60
c00172e5:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00172ea:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172f0:	83 e0 04             	and    eax,0x4
c00172f3:	84 c0                	test   al,al
c00172f5:	0f 84 33 02 00 00    	je     c001752e <loadACPITables(unsigned char*)+0x24f>
c00172fb:	a0 60 03 03 c0       	mov    al,ds:0xc0030360
c0017300:	84 c0                	test   al,al
c0017302:	74 75                	je     c0017379 <loadACPITables(unsigned char*)+0x9a>
c0017304:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017308:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001730c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017310:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017313:	83 e8 24             	sub    eax,0x24
c0017316:	c1 e8 03             	shr    eax,0x3
c0017319:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001731d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017325:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017329:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001732d:	0f 8d b2 00 00 00    	jge    c00173e5 <loadACPITables(unsigned char*)+0x106>
c0017333:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017337:	83 c0 24             	add    eax,0x24
c001733a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001733e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017342:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017346:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001734a:	c1 e0 03             	shl    eax,0x3
c001734d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017351:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017355:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017358:	8b 00                	mov    eax,DWORD PTR [eax]
c001735a:	89 c1                	mov    ecx,eax
c001735c:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c0017361:	8d 50 01             	lea    edx,[eax+0x1]
c0017364:	89 15 4c 01 03 c0    	mov    DWORD PTR ds:0xc003014c,edx
c001736a:	89 ca                	mov    edx,ecx
c001736c:	89 14 c5 64 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe9c],edx
c0017373:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017377:	eb ac                	jmp    c0017325 <loadACPITables(unsigned char*)+0x46>
c0017379:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001737d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017381:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017385:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017388:	83 e8 24             	sub    eax,0x24
c001738b:	c1 e8 02             	shr    eax,0x2
c001738e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017392:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001739a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001739e:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00173a2:	7d 41                	jge    c00173e5 <loadACPITables(unsigned char*)+0x106>
c00173a4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173a8:	83 c0 24             	add    eax,0x24
c00173ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00173b7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00173bb:	c1 e0 02             	shl    eax,0x2
c00173be:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00173c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173c8:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c00173cd:	8d 50 01             	lea    edx,[eax+0x1]
c00173d0:	89 15 4c 01 03 c0    	mov    DWORD PTR ds:0xc003014c,edx
c00173d6:	89 ca                	mov    edx,ecx
c00173d8:	89 14 c5 64 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe9c],edx
c00173df:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00173e3:	eb b5                	jmp    c001739a <loadACPITables(unsigned char*)+0xbb>
c00173e5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00173ed:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c00173f2:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00173f6:	0f 8d 33 01 00 00    	jge    c001752f <loadACPITables(unsigned char*)+0x250>
c00173fc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017400:	8b 04 c5 64 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe9c]
c0017407:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001740b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001740f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017417:	25 ff 0f 00 00       	and    eax,0xfff
c001741c:	89 c6                	mov    esi,eax
c001741e:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c0017424:	83 ec 0c             	sub    esp,0xc
c0017427:	6a 01                	push   0x1
c0017429:	e8 ef 9d ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017435:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001743b:	83 ec 0c             	sub    esp,0xc
c001743e:	6a 01                	push   0x1
c0017440:	6a 01                	push   0x1
c0017442:	50                   	push   eax
c0017443:	52                   	push   edx
c0017444:	53                   	push   ebx
c0017445:	e8 2c a9 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001744a:	83 c4 20             	add    esp,0x20
c001744d:	09 f0                	or     eax,esi
c001744f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017453:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017457:	c1 e0 03             	shl    eax,0x3
c001745a:	05 60 01 03 c0       	add    eax,0xc0030160
c001745f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017463:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017467:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001746b:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017477:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001747b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001747f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017483:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017487:	89 c6                	mov    esi,eax
c0017489:	89 d7                	mov    edi,edx
c001748b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001748d:	89 c8                	mov    eax,ecx
c001748f:	89 fa                	mov    edx,edi
c0017491:	89 f3                	mov    ebx,esi
c0017493:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017497:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001749b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001749f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174ae:	05 00 10 00 00       	add    eax,0x1000
c00174b3:	c1 e8 0c             	shr    eax,0xc
c00174b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00174c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174c6:	25 ff 0f 00 00       	and    eax,0xfff
c00174cb:	89 c6                	mov    esi,eax
c00174cd:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c00174d3:	83 ec 0c             	sub    esp,0xc
c00174d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00174da:	e8 3e 9d ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00174df:	83 c4 10             	add    esp,0x10
c00174e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174e6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174ec:	83 ec 0c             	sub    esp,0xc
c00174ef:	6a 01                	push   0x1
c00174f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00174f5:	50                   	push   eax
c00174f6:	52                   	push   edx
c00174f7:	53                   	push   ebx
c00174f8:	e8 79 a8 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174fd:	83 c4 20             	add    esp,0x20
c0017500:	09 f0                	or     eax,esi
c0017502:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001750a:	83 ec 0c             	sub    esp,0xc
c001750d:	50                   	push   eax
c001750e:	e8 14 a1 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001751a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001751e:	89 14 c5 64 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe9c],edx
c0017525:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017529:	e9 bf fe ff ff       	jmp    c00173ed <loadACPITables(unsigned char*)+0x10e>
c001752e:	90                   	nop
c001752f:	83 c4 60             	add    esp,0x60
c0017532:	5b                   	pop    ebx
c0017533:	5e                   	pop    esi
c0017534:	5f                   	pop    edi
c0017535:	c3                   	ret    

c0017536 <findRSDT(unsigned char*)>:
c0017536:	57                   	push   edi
c0017537:	56                   	push   esi
c0017538:	53                   	push   ebx
c0017539:	83 ec 50             	sub    esp,0x50
c001753c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017541:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017547:	83 e0 04             	and    eax,0x4
c001754a:	84 c0                	test   al,al
c001754c:	75 0a                	jne    c0017558 <findRSDT(unsigned char*)+0x22>
c001754e:	b8 00 00 00 00       	mov    eax,0x0
c0017553:	e9 21 01 00 00       	jmp    c0017679 <findRSDT(unsigned char*)+0x143>
c0017558:	89 e0                	mov    eax,esp
c001755a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001755e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017562:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017566:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001756e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017572:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017576:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001757a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001757e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017582:	89 c6                	mov    esi,eax
c0017584:	89 d7                	mov    edi,edx
c0017586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017588:	89 c8                	mov    eax,ecx
c001758a:	89 fa                	mov    edx,edi
c001758c:	89 f3                	mov    ebx,esi
c001758e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017592:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017596:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001759a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001759e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00175a2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00175aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175c2:	25 ff 0f 00 00       	and    eax,0xfff
c00175c7:	89 c6                	mov    esi,eax
c00175c9:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c00175cf:	83 ec 0c             	sub    esp,0xc
c00175d2:	6a 02                	push   0x2
c00175d4:	e8 44 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00175e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	6a 01                	push   0x1
c00175eb:	6a 02                	push   0x2
c00175ed:	50                   	push   eax
c00175ee:	52                   	push   edx
c00175ef:	53                   	push   ebx
c00175f0:	e8 81 a7 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175f5:	83 c4 20             	add    esp,0x20
c00175f8:	09 f0                	or     eax,esi
c00175fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017602:	25 ff 0f 00 00       	and    eax,0xfff
c0017607:	89 c6                	mov    esi,eax
c0017609:	8b 1d 10 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc10
c001760f:	83 ec 0c             	sub    esp,0xc
c0017612:	6a 02                	push   0x2
c0017614:	e8 04 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017620:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	6a 01                	push   0x1
c001762b:	6a 02                	push   0x2
c001762d:	50                   	push   eax
c001762e:	52                   	push   edx
c001762f:	53                   	push   ebx
c0017630:	e8 41 a7 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017635:	83 c4 20             	add    esp,0x20
c0017638:	09 f0                	or     eax,esi
c001763a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001763e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017643:	75 11                	jne    c0017656 <findRSDT(unsigned char*)+0x120>
c0017645:	c6 05 60 03 03 c0 00 	mov    BYTE PTR ds:0xc0030360,0x0
c001764c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017650:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017654:	eb 1f                	jmp    c0017675 <findRSDT(unsigned char*)+0x13f>
c0017656:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001765b:	75 11                	jne    c001766e <findRSDT(unsigned char*)+0x138>
c001765d:	c6 05 60 03 03 c0 01 	mov    BYTE PTR ds:0xc0030360,0x1
c0017664:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017668:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001766c:	eb 07                	jmp    c0017675 <findRSDT(unsigned char*)+0x13f>
c001766e:	b8 00 00 00 00       	mov    eax,0x0
c0017673:	eb 04                	jmp    c0017679 <findRSDT(unsigned char*)+0x143>
c0017675:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017679:	83 c4 50             	add    esp,0x50
c001767c:	5b                   	pop    ebx
c001767d:	5e                   	pop    esi
c001767e:	5f                   	pop    edi
c001767f:	c3                   	ret    

c0017680 <findDataTable(unsigned char*, char*)>:
c0017680:	83 ec 1c             	sub    esp,0x1c
c0017683:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017688:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001768e:	83 e0 04             	and    eax,0x4
c0017691:	84 c0                	test   al,al
c0017693:	75 07                	jne    c001769c <findDataTable(unsigned char*, char*)+0x1c>
c0017695:	b8 00 00 00 00       	mov    eax,0x0
c001769a:	eb 52                	jmp    c00176ee <findDataTable(unsigned char*, char*)+0x6e>
c001769c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176a4:	a1 4c 01 03 c0       	mov    eax,ds:0xc003014c
c00176a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176ad:	7d 3a                	jge    c00176e9 <findDataTable(unsigned char*, char*)+0x69>
c00176af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b3:	c1 e0 03             	shl    eax,0x3
c00176b6:	05 60 01 03 c0       	add    eax,0xc0030160
c00176bb:	83 ec 04             	sub    esp,0x4
c00176be:	6a 04                	push   0x4
c00176c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176c4:	50                   	push   eax
c00176c5:	e8 82 8f fe ff       	call   c000064c <memcmp>
c00176ca:	83 c4 10             	add    esp,0x10
c00176cd:	85 c0                	test   eax,eax
c00176cf:	0f 94 c0             	sete   al
c00176d2:	84 c0                	test   al,al
c00176d4:	74 0d                	je     c00176e3 <findDataTable(unsigned char*, char*)+0x63>
c00176d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176da:	8b 04 c5 64 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe9c]
c00176e1:	eb 0b                	jmp    c00176ee <findDataTable(unsigned char*, char*)+0x6e>
c00176e3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176e7:	eb bb                	jmp    c00176a4 <findDataTable(unsigned char*, char*)+0x24>
c00176e9:	b8 00 00 00 00       	mov    eax,0x0
c00176ee:	83 c4 1c             	add    esp,0x1c
c00176f1:	c3                   	ret    

c00176f2 <scanMADT()>:
c00176f2:	53                   	push   ebx
c00176f3:	83 ec 38             	sub    esp,0x38
c00176f6:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00176fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017701:	83 e0 04             	and    eax,0x4
c0017704:	84 c0                	test   al,al
c0017706:	0f 84 4a 04 00 00    	je     c0017b56 <scanMADT()+0x464>
c001770c:	e8 44 fb ff ff       	call   c0017255 <findRSDP()>
c0017711:	a3 6c 03 03 c0       	mov    ds:0xc003036c,eax
c0017716:	a1 6c 03 03 c0       	mov    eax,ds:0xc003036c
c001771b:	85 c0                	test   eax,eax
c001771d:	75 19                	jne    c0017738 <scanMADT()+0x46>
c001771f:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017724:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001772a:	83 e2 fb             	and    edx,0xfffffffb
c001772d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017733:	e9 22 04 00 00       	jmp    c0017b5a <scanMADT()+0x468>
c0017738:	a1 6c 03 03 c0       	mov    eax,ds:0xc003036c
c001773d:	83 ec 0c             	sub    esp,0xc
c0017740:	50                   	push   eax
c0017741:	e8 f0 fd ff ff       	call   c0017536 <findRSDT(unsigned char*)>
c0017746:	83 c4 10             	add    esp,0x10
c0017749:	a3 68 03 03 c0       	mov    ds:0xc0030368,eax
c001774e:	a1 68 03 03 c0       	mov    eax,ds:0xc0030368
c0017753:	85 c0                	test   eax,eax
c0017755:	75 19                	jne    c0017770 <scanMADT()+0x7e>
c0017757:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001775c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017762:	83 e2 fb             	and    edx,0xfffffffb
c0017765:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001776b:	e9 ea 03 00 00       	jmp    c0017b5a <scanMADT()+0x468>
c0017770:	a1 68 03 03 c0       	mov    eax,ds:0xc0030368
c0017775:	83 ec 0c             	sub    esp,0xc
c0017778:	50                   	push   eax
c0017779:	e8 61 fb ff ff       	call   c00172df <loadACPITables(unsigned char*)>
c001777e:	83 c4 10             	add    esp,0x10
c0017781:	a1 68 03 03 c0       	mov    eax,ds:0xc0030368
c0017786:	83 ec 08             	sub    esp,0x8
c0017789:	68 e8 b2 02 c0       	push   0xc002b2e8
c001778e:	50                   	push   eax
c001778f:	e8 ec fe ff ff       	call   c0017680 <findDataTable(unsigned char*, char*)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001779b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00177a0:	75 19                	jne    c00177bb <scanMADT()+0xc9>
c00177a2:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00177a7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177ad:	83 e2 fe             	and    edx,0xfffffffe
c00177b0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177b6:	e9 9f 03 00 00       	jmp    c0017b5a <scanMADT()+0x468>
c00177bb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00177c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177ca:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00177ce:	0f 87 86 03 00 00    	ja     c0017b5a <scanMADT()+0x468>
c00177d4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00177dc:	0f 87 78 03 00 00    	ja     c0017b5a <scanMADT()+0x468>
c00177e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ee:	8d 50 01             	lea    edx,[eax+0x1]
c00177f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177fd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017801:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017805:	8d 50 01             	lea    edx,[eax+0x1]
c0017808:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001780c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017810:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017814:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017818:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001781d:	0f 86 36 03 00 00    	jbe    c0017b59 <scanMADT()+0x467>
c0017823:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017828:	75 57                	jne    c0017881 <scanMADT()+0x18f>
c001782a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782e:	8d 50 01             	lea    edx,[eax+0x1]
c0017831:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017835:	8a 15 60 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030560
c001783b:	0f b6 d2             	movzx  edx,dl
c001783e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017842:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017846:	88 82 a0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa60],al
c001784c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017850:	8d 50 01             	lea    edx,[eax+0x1]
c0017853:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017857:	8a 15 60 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030560
c001785d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017860:	88 0d 60 05 03 c0    	mov    BYTE PTR ds:0xc0030560,cl
c0017866:	0f b6 d2             	movzx  edx,dl
c0017869:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001786d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017871:	88 82 80 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa80],al
c0017877:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001787c:	e9 c1 02 00 00       	jmp    c0017b42 <scanMADT()+0x450>
c0017881:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017886:	0f 85 14 01 00 00    	jne    c00179a0 <scanMADT()+0x2ae>
c001788c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017890:	8d 50 01             	lea    edx,[eax+0x1]
c0017893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017897:	8a 15 20 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030420
c001789d:	0f b6 d2             	movzx  edx,dl
c00178a0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178a4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178a8:	88 82 40 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfbc0],al
c00178ae:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00178b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ba:	01 d0                	add    eax,edx
c00178bc:	83 c0 2c             	add    eax,0x2c
c00178bf:	8a 00                	mov    al,BYTE PTR [eax]
c00178c1:	0f b6 d0             	movzx  edx,al
c00178c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c8:	8d 48 01             	lea    ecx,[eax+0x1]
c00178cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178cf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178d3:	0f b6 c0             	movzx  eax,al
c00178d6:	c1 e0 08             	shl    eax,0x8
c00178d9:	89 d1                	mov    ecx,edx
c00178db:	09 c1                	or     ecx,eax
c00178dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e1:	8d 50 02             	lea    edx,[eax+0x2]
c00178e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178e8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178ec:	0f b6 c0             	movzx  eax,al
c00178ef:	c1 e0 10             	shl    eax,0x10
c00178f2:	09 c1                	or     ecx,eax
c00178f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f8:	8d 50 03             	lea    edx,[eax+0x3]
c00178fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017903:	0f b6 c0             	movzx  eax,al
c0017906:	c1 e0 18             	shl    eax,0x18
c0017909:	09 c1                	or     ecx,eax
c001790b:	89 ca                	mov    edx,ecx
c001790d:	a0 20 04 03 c0       	mov    al,ds:0xc0030420
c0017912:	0f b6 c0             	movzx  eax,al
c0017915:	89 14 85 60 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfba0],edx
c001791c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017925:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017929:	01 d0                	add    eax,edx
c001792b:	83 c0 2c             	add    eax,0x2c
c001792e:	8a 00                	mov    al,BYTE PTR [eax]
c0017930:	0f b6 d0             	movzx  edx,al
c0017933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017937:	8d 48 01             	lea    ecx,[eax+0x1]
c001793a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017942:	0f b6 c0             	movzx  eax,al
c0017945:	c1 e0 08             	shl    eax,0x8
c0017948:	89 d1                	mov    ecx,edx
c001794a:	09 c1                	or     ecx,eax
c001794c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017950:	8d 50 02             	lea    edx,[eax+0x2]
c0017953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017957:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001795b:	0f b6 c0             	movzx  eax,al
c001795e:	c1 e0 10             	shl    eax,0x10
c0017961:	09 c1                	or     ecx,eax
c0017963:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017967:	8d 50 03             	lea    edx,[eax+0x3]
c001796a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001796e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017972:	0f b6 c0             	movzx  eax,al
c0017975:	c1 e0 18             	shl    eax,0x18
c0017978:	09 c1                	or     ecx,eax
c001797a:	89 ca                	mov    edx,ecx
c001797c:	a0 20 04 03 c0       	mov    al,ds:0xc0030420
c0017981:	0f b6 c0             	movzx  eax,al
c0017984:	89 14 85 e0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb20],edx
c001798b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017990:	a0 20 04 03 c0       	mov    al,ds:0xc0030420
c0017995:	40                   	inc    eax
c0017996:	a2 20 04 03 c0       	mov    ds:0xc0030420,al
c001799b:	e9 a2 01 00 00       	jmp    c0017b42 <scanMADT()+0x450>
c00179a0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00179a5:	0f 85 e9 00 00 00    	jne    c0017a94 <scanMADT()+0x3a2>
c00179ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179af:	8d 50 01             	lea    edx,[eax+0x1]
c00179b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179be:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00179c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c6:	8d 50 01             	lea    edx,[eax+0x1]
c00179c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00179d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e1:	01 d0                	add    eax,edx
c00179e3:	83 c0 2c             	add    eax,0x2c
c00179e6:	8a 00                	mov    al,BYTE PTR [eax]
c00179e8:	0f b6 d0             	movzx  edx,al
c00179eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00179f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179fa:	0f b6 c0             	movzx  eax,al
c00179fd:	c1 e0 08             	shl    eax,0x8
c0017a00:	89 d1                	mov    ecx,edx
c0017a02:	09 c1                	or     ecx,eax
c0017a04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a08:	8d 50 02             	lea    edx,[eax+0x2]
c0017a0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a13:	0f b6 c0             	movzx  eax,al
c0017a16:	c1 e0 10             	shl    eax,0x10
c0017a19:	09 c1                	or     ecx,eax
c0017a1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1f:	8d 50 03             	lea    edx,[eax+0x3]
c0017a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a2a:	0f b6 c0             	movzx  eax,al
c0017a2d:	c1 e0 18             	shl    eax,0x18
c0017a30:	09 c8                	or     eax,ecx
c0017a32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a36:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a43:	01 d0                	add    eax,edx
c0017a45:	83 c0 2c             	add    eax,0x2c
c0017a48:	8a 00                	mov    al,BYTE PTR [eax]
c0017a4a:	0f b6 c0             	movzx  eax,al
c0017a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a51:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a58:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017a5c:	0f b6 d2             	movzx  edx,dl
c0017a5f:	c1 e2 08             	shl    edx,0x8
c0017a62:	09 d0                	or     eax,edx
c0017a64:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017a69:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a6e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017a73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a77:	88 90 00 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd3300],dl
c0017a7d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017a82:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017a87:	66 89 84 12 00 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfc00],ax
c0017a8f:	e9 ae 00 00 00       	jmp    c0017b42 <scanMADT()+0x450>
c0017a94:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017a99:	0f 85 97 00 00 00    	jne    c0017b36 <scanMADT()+0x444>
c0017a9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa3:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aaa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ab2:	0f b6 c0             	movzx  eax,al
c0017ab5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017abd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac1:	01 d0                	add    eax,edx
c0017ac3:	83 c0 2c             	add    eax,0x2c
c0017ac6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac8:	0f b6 d0             	movzx  edx,al
c0017acb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017acf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ad2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ada:	0f b6 c0             	movzx  eax,al
c0017add:	c1 e0 08             	shl    eax,0x8
c0017ae0:	09 d0                	or     eax,edx
c0017ae2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ae6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017aeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aef:	8d 50 01             	lea    edx,[eax+0x1]
c0017af2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017af6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017afa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017afe:	0f b6 c0             	movzx  eax,al
c0017b01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b09:	c1 e0 08             	shl    eax,0x8
c0017b0c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b10:	89 c1                	mov    ecx,eax
c0017b12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b16:	c1 e0 18             	shl    eax,0x18
c0017b19:	89 c3                	mov    ebx,eax
c0017b1b:	a1 70 03 03 c0       	mov    eax,ds:0xc0030370
c0017b20:	8d 50 01             	lea    edx,[eax+0x1]
c0017b23:	89 15 70 03 03 c0    	mov    DWORD PTR ds:0xc0030370,edx
c0017b29:	09 d9                	or     ecx,ebx
c0017b2b:	89 ca                	mov    edx,ecx
c0017b2d:	89 14 85 80 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc80],edx
c0017b34:	eb 0c                	jmp    c0017b42 <scanMADT()+0x450>
c0017b36:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b3b:	75 05                	jne    c0017b42 <scanMADT()+0x450>
c0017b3d:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017b42:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017b47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b4b:	01 d0                	add    eax,edx
c0017b4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b51:	e9 6d fc ff ff       	jmp    c00177c3 <scanMADT()+0xd1>
c0017b56:	90                   	nop
c0017b57:	eb 01                	jmp    c0017b5a <scanMADT()+0x468>
c0017b59:	90                   	nop
c0017b5a:	83 c4 38             	add    esp,0x38
c0017b5d:	5b                   	pop    ebx
c0017b5e:	c3                   	ret    
c0017b5f:	90                   	nop

c0017b60 <ACPI::ACPI()>:
c0017b60:	83 ec 0c             	sub    esp,0xc
c0017b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b67:	83 ec 08             	sub    esp,0x8
c0017b6a:	68 ed b2 02 c0       	push   0xc002b2ed
c0017b6f:	50                   	push   eax
c0017b70:	e8 57 c2 ff ff       	call   c0013dcc <Device::Device(char const*)>
c0017b75:	83 c4 10             	add    esp,0x10
c0017b78:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c0017b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b81:	89 10                	mov    DWORD PTR [eax],edx
c0017b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b87:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b92:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017baa:	e8 43 fb ff ff       	call   c00176f2 <scanMADT()>
c0017baf:	90                   	nop
c0017bb0:	83 c4 0c             	add    esp,0xc
c0017bb3:	c3                   	ret    

c0017bb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017bb4:	83 ec 2c             	sub    esp,0x2c
c0017bb7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017bbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017bbf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017bc3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017bc7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017bcc:	88 d0                	mov    al,dl
c0017bce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bd2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017bd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017bdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017be9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017bed:	0f 8d 97 00 00 00    	jge    c0017c8a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017bf3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bfb:	83 c2 2a             	add    edx,0x2a
c0017bfe:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c02:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c07:	75 78                	jne    c0017c81 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c11:	83 c2 2a             	add    edx,0x2a
c0017c14:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c18:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c1c:	75 63                	jne    c0017c81 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c23:	74 3a                	je     c0017c5f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017c25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c2d:	83 c2 2a             	add    edx,0x2a
c0017c30:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c3b:	39 c2                	cmp    edx,eax
c0017c3d:	74 10                	je     c0017c4f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017c3f:	83 ec 0c             	sub    esp,0xc
c0017c42:	68 68 b2 02 c0       	push   0xc002b268
c0017c47:	e8 af 22 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0017c4c:	83 c4 10             	add    esp,0x10
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	68 f2 b2 02 c0       	push   0xc002b2f2
c0017c57:	e8 9f 22 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017c63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c6b:	83 c2 2a             	add    edx,0x2a
c0017c6e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017c72:	8b 02                	mov    eax,DWORD PTR [edx]
c0017c74:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017c77:	89 01                	mov    DWORD PTR [ecx],eax
c0017c79:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017c7c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c81:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017c85:	e9 55 ff ff ff       	jmp    c0017bdf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017c8a:	90                   	nop
c0017c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8f:	83 c4 2c             	add    esp,0x2c
c0017c92:	c2 04 00             	ret    0x4
c0017c95:	90                   	nop

c0017c96 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017c96:	83 ec 1c             	sub    esp,0x1c
c0017c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ca1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ca5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017caa:	88 c8                	mov    al,cl
c0017cac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017cb0:	88 d0                	mov    al,dl
c0017cb2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cba:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017cc7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ccb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cd3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cdd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ced:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cf3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017cf7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cfe:	83 c2 2a             	add    edx,0x2a
c0017d01:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d09:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d13:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d16:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d1a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d22:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d28:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d2f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d3f:	3d 00 02 00 00       	cmp    eax,0x200
c0017d44:	75 10                	jne    c0017d56 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017d46:	83 ec 0c             	sub    esp,0xc
c0017d49:	68 01 b3 02 c0       	push   0xc002b301
c0017d4e:	e8 a8 21 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	90                   	nop
c0017d57:	83 c4 1c             	add    esp,0x1c
c0017d5a:	c3                   	ret    
c0017d5b:	90                   	nop

c0017d5c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017d5c:	b8 00 00 00 00       	mov    eax,0x0
c0017d61:	c3                   	ret    

c0017d62 <ACPI::detectPCI()>:
c0017d62:	53                   	push   ebx
c0017d63:	83 ec 28             	sub    esp,0x28
c0017d66:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017d6b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017d70:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017d75:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d7b:	83 e0 04             	and    eax,0x4
c0017d7e:	84 c0                	test   al,al
c0017d80:	74 2b                	je     c0017dad <ACPI::detectPCI()+0x4b>
c0017d82:	a1 68 03 03 c0       	mov    eax,ds:0xc0030368
c0017d87:	83 ec 08             	sub    esp,0x8
c0017d8a:	68 1e b3 02 c0       	push   0xc002b31e
c0017d8f:	50                   	push   eax
c0017d90:	e8 eb f8 ff ff       	call   c0017680 <findDataTable(unsigned char*, char*)>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017da1:	74 0a                	je     c0017dad <ACPI::detectPCI()+0x4b>
c0017da3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017da8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017dad:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017db5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017db9:	8a 00                	mov    al,BYTE PTR [eax]
c0017dbb:	3c 01                	cmp    al,0x1
c0017dbd:	75 0c                	jne    c0017dcb <ACPI::detectPCI()+0x69>
c0017dbf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017dc4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017dc9:	eb 26                	jmp    c0017df1 <ACPI::detectPCI()+0x8f>
c0017dcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017dcf:	8a 00                	mov    al,BYTE PTR [eax]
c0017dd1:	3c 02                	cmp    al,0x2
c0017dd3:	75 1c                	jne    c0017df1 <ACPI::detectPCI()+0x8f>
c0017dd5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017dda:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ddf:	74 10                	je     c0017df1 <ACPI::detectPCI()+0x8f>
c0017de1:	83 ec 0c             	sub    esp,0xc
c0017de4:	68 98 b2 02 c0       	push   0xc002b298
c0017de9:	e8 0d 21 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0017dee:	83 c4 10             	add    esp,0x10
c0017df1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017df5:	83 f0 01             	xor    eax,0x1
c0017df8:	84 c0                	test   al,al
c0017dfa:	74 3f                	je     c0017e3b <ACPI::detectPCI()+0xd9>
c0017dfc:	e8 4f 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017e01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e05:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e0a:	75 0c                	jne    c0017e18 <ACPI::detectPCI()+0xb6>
c0017e0c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e11:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e16:	eb 23                	jmp    c0017e3b <ACPI::detectPCI()+0xd9>
c0017e18:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017e1d:	75 1c                	jne    c0017e3b <ACPI::detectPCI()+0xd9>
c0017e1f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e24:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e29:	74 10                	je     c0017e3b <ACPI::detectPCI()+0xd9>
c0017e2b:	83 ec 0c             	sub    esp,0xc
c0017e2e:	68 98 b2 02 c0       	push   0xc002b298
c0017e33:	e8 c3 20 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e40:	74 7e                	je     c0017ec0 <ACPI::detectPCI()+0x15e>
c0017e42:	83 ec 0c             	sub    esp,0xc
c0017e45:	68 23 b3 02 c0       	push   0xc002b323
c0017e4a:	e8 a4 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017e5a:	83 ec 0c             	sub    esp,0xc
c0017e5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e61:	e8 33 77 ff ff       	call   c000f599 <malloc>
c0017e66:	83 c4 10             	add    esp,0x10
c0017e69:	89 c3                	mov    ebx,eax
c0017e6b:	83 ec 0c             	sub    esp,0xc
c0017e6e:	53                   	push   ebx
c0017e6f:	e8 b0 a5 00 00       	call   c0022424 <PCI::PCI()>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e7f:	83 ec 08             	sub    esp,0x8
c0017e82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e86:	50                   	push   eax
c0017e87:	e8 3c bd ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e95:	83 c0 08             	add    eax,0x8
c0017e98:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e9a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e9f:	74 07                	je     c0017ea8 <ACPI::detectPCI()+0x146>
c0017ea1:	ba 01 00 00 00       	mov    edx,0x1
c0017ea6:	eb 05                	jmp    c0017ead <ACPI::detectPCI()+0x14b>
c0017ea8:	ba 02 00 00 00       	mov    edx,0x2
c0017ead:	6a 00                	push   0x0
c0017eaf:	6a 00                	push   0x0
c0017eb1:	52                   	push   edx
c0017eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017eb6:	ff d0                	call   eax
c0017eb8:	83 c4 10             	add    esp,0x10
c0017ebb:	e9 9e 00 00 00       	jmp    c0017f5e <ACPI::detectPCI()+0x1fc>
c0017ec0:	83 ec 0c             	sub    esp,0xc
c0017ec3:	68 3b b3 02 c0       	push   0xc002b33b
c0017ec8:	e8 c2 a8 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	83 ec 0c             	sub    esp,0xc
c0017ed3:	68 46 b3 02 c0       	push   0xc002b346
c0017ed8:	e8 16 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017ee7:	83 ec 0c             	sub    esp,0xc
c0017eea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017eee:	e8 a6 76 ff ff       	call   c000f599 <malloc>
c0017ef3:	83 c4 10             	add    esp,0x10
c0017ef6:	89 c3                	mov    ebx,eax
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	53                   	push   ebx
c0017efc:	e8 8d b0 00 00       	call   c0022f8e <IDE::IDE()>
c0017f01:	83 c4 10             	add    esp,0x10
c0017f04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f0c:	83 ec 08             	sub    esp,0x8
c0017f0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f13:	50                   	push   eax
c0017f14:	e8 af bc ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0017f19:	83 c4 10             	add    esp,0x10
c0017f1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f20:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f2e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017f37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f3b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f4a:	83 c0 08             	add    eax,0x8
c0017f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f4f:	6a 00                	push   0x0
c0017f51:	6a 00                	push   0x0
c0017f53:	6a 00                	push   0x0
c0017f55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f59:	ff d0                	call   eax
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	90                   	nop
c0017f5f:	83 c4 28             	add    esp,0x28
c0017f62:	5b                   	pop    ebx
c0017f63:	c3                   	ret    

c0017f64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f64:	83 ec 1c             	sub    esp,0x1c
c0017f67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f6e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f72:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017f77:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f7c:	83 ec 08             	sub    esp,0x8
c0017f7f:	52                   	push   edx
c0017f80:	50                   	push   eax
c0017f81:	e8 2a 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f8d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0017f92:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f97:	83 ec 04             	sub    esp,0x4
c0017f9a:	6a 01                	push   0x1
c0017f9c:	52                   	push   edx
c0017f9d:	50                   	push   eax
c0017f9e:	e8 3f 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	90                   	nop
c0017fa7:	83 c4 1c             	add    esp,0x1c
c0017faa:	c3                   	ret    
c0017fab:	90                   	nop

c0017fac <ACPI::sleep()>:
c0017fac:	83 ec 0c             	sub    esp,0xc
c0017faf:	a1 40 01 03 c0       	mov    eax,ds:0xc0030140
c0017fb4:	85 c0                	test   eax,eax
c0017fb6:	74 07                	je     c0017fbf <ACPI::sleep()+0x13>
c0017fb8:	a1 40 01 03 c0       	mov    eax,ds:0xc0030140
c0017fbd:	ff d0                	call   eax
c0017fbf:	90                   	nop
c0017fc0:	83 c4 0c             	add    esp,0xc
c0017fc3:	c3                   	ret    

c0017fc4 <ACPI::open(int, int, void*)>:
c0017fc4:	57                   	push   edi
c0017fc5:	56                   	push   esi
c0017fc6:	53                   	push   ebx
c0017fc7:	81 ec 60 01 00 00    	sub    esp,0x160
c0017fcd:	83 ec 0c             	sub    esp,0xc
c0017fd0:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017fd7:	e8 86 fd ff ff       	call   c0017d62 <ACPI::detectPCI()>
c0017fdc:	83 c4 10             	add    esp,0x10
c0017fdf:	83 ec 0c             	sub    esp,0xc
c0017fe2:	68 c0 b2 02 c0       	push   0xc002b2c0
c0017fe7:	e8 07 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	83 ec 0c             	sub    esp,0xc
c0017ff2:	68 5b b3 02 c0       	push   0xc002b35b
c0017ff7:	e8 52 46 00 00       	call   c001c64e <Thr::loadKernelSymbolTable(char const*)>
c0017ffc:	83 c4 10             	add    esp,0x10
c0017fff:	83 ec 0c             	sub    esp,0xc
c0018002:	68 79 b3 02 c0       	push   0xc002b379
c0018007:	e8 e7 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	83 ec 04             	sub    esp,0x4
c0018012:	6a 0c                	push   0xc
c0018014:	68 94 b3 02 c0       	push   0xc002b394
c0018019:	68 a5 b3 02 c0       	push   0xc002b3a5
c001801e:	e8 94 2c 00 00       	call   c001acb7 <Reg::readIntWithDefault(char*, char*, int)>
c0018023:	83 c4 10             	add    esp,0x10
c0018026:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001802d:	83 ec 0c             	sub    esp,0xc
c0018030:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018037:	e8 eb 93 ff ff       	call   c0011427 <Virt::setupPageSwapping(int)>
c001803c:	83 c4 10             	add    esp,0x10
c001803f:	83 ec 0c             	sub    esp,0xc
c0018042:	68 d5 9e 02 c0       	push   0xc0029ed5
c0018047:	e8 a7 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001804c:	83 c4 10             	add    esp,0x10
c001804f:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0018055:	83 ec 08             	sub    esp,0x8
c0018058:	6a 01                	push   0x1
c001805a:	68 ac b3 02 c0       	push   0xc002b3ac
c001805f:	e8 61 50 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c0018064:	83 c4 10             	add    esp,0x10
c0018067:	83 ec 08             	sub    esp,0x8
c001806a:	53                   	push   ebx
c001806b:	50                   	push   eax
c001806c:	e8 85 52 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001807b:	83 ec 08             	sub    esp,0x8
c001807e:	6a 12                	push   0x12
c0018080:	50                   	push   eax
c0018081:	e8 c6 be ff ff       	call   c0013f4c <getDevicesOfType(DeviceType)>
c0018086:	83 c4 0c             	add    esp,0xc
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018093:	50                   	push   eax
c0018094:	e8 8b 09 01 00       	call   c0028a24 <LinkedList<Device>::isEmpty()>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	83 f0 01             	xor    eax,0x1
c001809f:	84 c0                	test   al,al
c00180a1:	0f 84 43 01 00 00    	je     c00181ea <ACPI::open(int, int, void*)+0x226>
c00180a7:	83 ec 0c             	sub    esp,0xc
c00180aa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180b1:	50                   	push   eax
c00180b2:	e8 89 09 01 00       	call   c0028a40 <LinkedList<Device>::getFirstElement()>
c00180b7:	83 c4 10             	add    esp,0x10
c00180ba:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00180c1:	83 ec 0c             	sub    esp,0xc
c00180c4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180cb:	50                   	push   eax
c00180cc:	e8 77 09 01 00       	call   c0028a48 <LinkedList<Device>::removeFirst()>
c00180d1:	83 c4 10             	add    esp,0x10
c00180d4:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00180db:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00180e2:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00180e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180ed:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00180f3:	ba 09 00 00 00       	mov    edx,0x9
c00180f8:	fc                   	cld    
c00180f9:	89 c7                	mov    edi,eax
c00180fb:	89 de                	mov    esi,ebx
c00180fd:	89 d1                	mov    ecx,edx
c00180ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018101:	83 ec 08             	sub    esp,0x8
c0018104:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018108:	50                   	push   eax
c0018109:	83 ec 24             	sub    esp,0x24
c001810c:	89 e0                	mov    eax,esp
c001810e:	89 c3                	mov    ebx,eax
c0018110:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018114:	ba 09 00 00 00       	mov    edx,0x9
c0018119:	89 df                	mov    edi,ebx
c001811b:	89 c6                	mov    esi,eax
c001811d:	89 d1                	mov    ecx,edx
c001811f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018121:	e8 dc a7 00 00       	call   c0022902 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018126:	83 c4 30             	add    esp,0x30
c0018129:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018130:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018138:	0f 84 4b ff ff ff    	je     c0018089 <ACPI::open(int, int, void*)+0xc5>
c001813e:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018153:	e8 41 74 ff ff       	call   c000f599 <malloc>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	89 c3                	mov    ebx,eax
c001815d:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0018162:	83 ec 04             	sub    esp,0x4
c0018165:	50                   	push   eax
c0018166:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001816d:	53                   	push   ebx
c001816e:	e8 7b ab ff ff       	call   c0012cee <File::File(char const*, Process*)>
c0018173:	83 c4 10             	add    esp,0x10
c0018176:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001817d:	83 ec 0c             	sub    esp,0xc
c0018180:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018187:	e8 34 ae ff ff       	call   c0012fc0 <File::exists()>
c001818c:	83 c4 10             	add    esp,0x10
c001818f:	84 c0                	test   al,al
c0018191:	74 27                	je     c00181ba <ACPI::open(int, int, void*)+0x1f6>
c0018193:	83 ec 08             	sub    esp,0x8
c0018196:	6a 01                	push   0x1
c0018198:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001819f:	e8 21 4f 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	83 ec 08             	sub    esp,0x8
c00181aa:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00181b1:	50                   	push   eax
c00181b2:	e8 3f 51 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00181c2:	0f 84 c1 fe ff ff    	je     c0018089 <ACPI::open(int, int, void*)+0xc5>
c00181c8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00181cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d1:	83 c0 08             	add    eax,0x8
c00181d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00181e0:	ff d0                	call   eax
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	e9 9f fe ff ff       	jmp    c0018089 <ACPI::open(int, int, void*)+0xc5>
c00181ea:	83 ec 0c             	sub    esp,0xc
c00181ed:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181f4:	50                   	push   eax
c00181f5:	e8 28 08 01 00       	call   c0028a22 <LinkedList<Device>::~LinkedList()>
c00181fa:	83 c4 10             	add    esp,0x10
c00181fd:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0018203:	83 ec 08             	sub    esp,0x8
c0018206:	6a 01                	push   0x1
c0018208:	68 c7 b3 02 c0       	push   0xc002b3c7
c001820d:	e8 b3 4e 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	83 ec 08             	sub    esp,0x8
c0018218:	53                   	push   ebx
c0018219:	50                   	push   eax
c001821a:	e8 d7 50 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c001821f:	83 c4 10             	add    esp,0x10
c0018222:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c0018228:	83 ec 08             	sub    esp,0x8
c001822b:	6a 01                	push   0x1
c001822d:	68 e4 b3 02 c0       	push   0xc002b3e4
c0018232:	e8 8e 4e 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c0018237:	83 c4 10             	add    esp,0x10
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	53                   	push   ebx
c001823e:	50                   	push   eax
c001823f:	e8 b2 50 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001824c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018252:	83 e0 04             	and    eax,0x4
c0018255:	84 c0                	test   al,al
c0018257:	0f 84 0d 01 00 00    	je     c001836a <ACPI::open(int, int, void*)+0x3a6>
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	68 01 b4 02 c0       	push   0xc002b401
c0018265:	e8 89 73 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018282:	e8 12 73 ff ff       	call   c000f599 <malloc>
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	89 c3                	mov    ebx,eax
c001828c:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0018291:	83 ec 04             	sub    esp,0x4
c0018294:	50                   	push   eax
c0018295:	68 1e b4 02 c0       	push   0xc002b41e
c001829a:	53                   	push   ebx
c001829b:	e8 4e aa ff ff       	call   c0012cee <File::File(char const*, Process*)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00182aa:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00182b2:	74 1a                	je     c00182ce <ACPI::open(int, int, void*)+0x30a>
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00182be:	e8 fd ac ff ff       	call   c0012fc0 <File::exists()>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	84 c0                	test   al,al
c00182c8:	74 04                	je     c00182ce <ACPI::open(int, int, void*)+0x30a>
c00182ca:	b0 01                	mov    al,0x1
c00182cc:	eb 02                	jmp    c00182d0 <ACPI::open(int, int, void*)+0x30c>
c00182ce:	b0 00                	mov    al,0x0
c00182d0:	84 c0                	test   al,al
c00182d2:	74 25                	je     c00182f9 <ACPI::open(int, int, void*)+0x335>
c00182d4:	83 ec 08             	sub    esp,0x8
c00182d7:	6a 01                	push   0x1
c00182d9:	68 1e b4 02 c0       	push   0xc002b41e
c00182de:	e8 e2 4d 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c00182e3:	83 c4 10             	add    esp,0x10
c00182e6:	83 ec 08             	sub    esp,0x8
c00182e9:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00182f0:	50                   	push   eax
c00182f1:	e8 00 50 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c00182f6:	83 c4 10             	add    esp,0x10
c00182f9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018301:	74 27                	je     c001832a <ACPI::open(int, int, void*)+0x366>
c0018303:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001830b:	74 1d                	je     c001832a <ACPI::open(int, int, void*)+0x366>
c001830d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018314:	8b 00                	mov    eax,DWORD PTR [eax]
c0018316:	83 c0 08             	add    eax,0x8
c0018319:	8b 00                	mov    eax,DWORD PTR [eax]
c001831b:	83 ec 0c             	sub    esp,0xc
c001831e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018325:	ff d0                	call   eax
c0018327:	83 c4 10             	add    esp,0x10
c001832a:	a1 68 03 03 c0       	mov    eax,ds:0xc0030368
c001832f:	83 ec 08             	sub    esp,0x8
c0018332:	68 3b b4 02 c0       	push   0xc002b43b
c0018337:	50                   	push   eax
c0018338:	e8 43 f3 ff ff       	call   c0017680 <findDataTable(unsigned char*, char*)>
c001833d:	83 c4 10             	add    esp,0x10
c0018340:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018347:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001834f:	74 19                	je     c001836a <ACPI::open(int, int, void*)+0x3a6>
c0018351:	83 ec 08             	sub    esp,0x8
c0018354:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001835b:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018362:	e8 fd fb ff ff       	call   c0017f64 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018367:	83 c4 10             	add    esp,0x10
c001836a:	b8 00 00 00 00       	mov    eax,0x0
c001836f:	81 c4 60 01 00 00    	add    esp,0x160
c0018375:	5b                   	pop    ebx
c0018376:	5e                   	pop    esi
c0018377:	5f                   	pop    edi
c0018378:	c3                   	ret    
c0018379:	90                   	nop

c001837a <CPU::close(int, int, void*)>:
c001837a:	31 c0                	xor    eax,eax
c001837c:	c3                   	ret    
c001837d:	90                   	nop

c001837e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001837e:	55                   	push   ebp
c001837f:	57                   	push   edi
c0018380:	56                   	push   esi
c0018381:	53                   	push   ebx
c0018382:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018386:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838a:	89 ce                	mov    esi,ecx
c001838c:	89 d5                	mov    ebp,edx
c001838e:	80 f9 04             	cmp    cl,0x4
c0018391:	75 28                	jne    c00183bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018393:	8d 42 f9             	lea    eax,[edx-0x7]
c0018396:	3c 03                	cmp    al,0x3
c0018398:	0f 86 63 01 00 00    	jbe    c0018501 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001839e:	80 fa 03             	cmp    dl,0x3
c00183a1:	0f 84 5a 01 00 00    	je     c0018501 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183a7:	8d 7a f2             	lea    edi,[edx-0xe]
c00183aa:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c00183af:	89 fb                	mov    ebx,edi
c00183b1:	80 fb 01             	cmp    bl,0x1
c00183b4:	77 4e                	ja     c0018404 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00183b6:	e9 52 01 00 00       	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bb:	80 f9 05             	cmp    cl,0x5
c00183be:	75 4d                	jne    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00183c0:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c00183c5:	80 fa 03             	cmp    dl,0x3
c00183c8:	0f 86 3f 01 00 00    	jbe    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ce:	8d 7a fa             	lea    edi,[edx-0x6]
c00183d1:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00183d6:	89 fb                	mov    ebx,edi
c00183d8:	80 fb 01             	cmp    bl,0x1
c00183db:	0f 86 2c 01 00 00    	jbe    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e1:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c00183e6:	80 fa 08             	cmp    dl,0x8
c00183e9:	0f 84 1e 01 00 00    	je     c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ef:	89 d7                	mov    edi,edx
c00183f1:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c00183f6:	83 e7 fb             	and    edi,0xfffffffb
c00183f9:	89 fb                	mov    ebx,edi
c00183fb:	80 fb 09             	cmp    bl,0x9
c00183fe:	0f 84 09 01 00 00    	je     c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018404:	31 c0                	xor    eax,eax
c0018406:	89 eb                	mov    ebx,ebp
c0018408:	0f b6 fb             	movzx  edi,bl
c001840b:	eb 30                	jmp    c001843d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001840d:	31 c0                	xor    eax,eax
c001840f:	80 f9 06             	cmp    cl,0x6
c0018412:	75 f2                	jne    c0018406 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018414:	80 fa 0a             	cmp    dl,0xa
c0018417:	77 ed                	ja     c0018406 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018419:	bf de 05 00 00       	mov    edi,0x5de
c001841e:	0f a3 d7             	bt     edi,edx
c0018421:	73 e3                	jae    c0018406 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018423:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c0018428:	e9 e0 00 00 00       	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842d:	39 c7                	cmp    edi,eax
c001842f:	0f 84 d3 00 00 00    	je     c0018508 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018435:	40                   	inc    eax
c0018436:	3d d0 00 00 00       	cmp    eax,0xd0
c001843b:	74 09                	je     c0018446 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001843d:	89 f3                	mov    ebx,esi
c001843f:	80 fb 0f             	cmp    bl,0xf
c0018442:	75 f1                	jne    c0018435 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018444:	eb e7                	jmp    c001842d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018446:	80 f9 10             	cmp    cl,0x10
c0018449:	75 14                	jne    c001845f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001844b:	8d 42 fc             	lea    eax,[edx-0x4]
c001844e:	83 e0 fb             	and    eax,0xfffffffb
c0018451:	3c 02                	cmp    al,0x2
c0018453:	76 34                	jbe    c0018489 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018455:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c001845a:	80 fa 02             	cmp    dl,0x2
c001845d:	eb 24                	jmp    c0018483 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001845f:	80 f9 11             	cmp    cl,0x11
c0018462:	75 13                	jne    c0018477 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018464:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c0018469:	80 fa 03             	cmp    dl,0x3
c001846c:	0f 85 9b 00 00 00    	jne    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018472:	e9 91 00 00 00       	jmp    c0018508 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018477:	80 f9 12             	cmp    cl,0x12
c001847a:	75 14                	jne    c0018490 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001847c:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c0018481:	fe ca                	dec    dl
c0018483:	0f 85 84 00 00 00    	jne    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018489:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c001848e:	eb 7d                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018490:	80 f9 14             	cmp    cl,0x14
c0018493:	75 12                	jne    c00184a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018495:	4a                   	dec    edx
c0018496:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c001849b:	80 fa 01             	cmp    dl,0x1
c001849e:	77 6d                	ja     c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a0:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c00184a5:	eb 66                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a7:	80 f9 15             	cmp    cl,0x15
c00184aa:	75 31                	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00184ac:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c00184b1:	80 fa 01             	cmp    dl,0x1
c00184b4:	74 57                	je     c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b6:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c00184bb:	80 fa 13             	cmp    dl,0x13
c00184be:	76 0c                	jbe    c00184cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00184c0:	80 fa 30             	cmp    dl,0x30
c00184c3:	75 48                	jne    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c5:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c00184ca:	eb 41                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184cc:	b9 04 00 09 00       	mov    ecx,0x90004
c00184d1:	0f a3 d1             	bt     ecx,edx
c00184d4:	73 37                	jae    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d6:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c00184db:	eb 30                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184dd:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c00184e2:	80 f9 16             	cmp    cl,0x16
c00184e5:	75 26                	jne    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184e7:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c00184ec:	84 d2                	test   dl,dl
c00184ee:	74 1d                	je     c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f0:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c00184f5:	80 fa 30             	cmp    dl,0x30
c00184f8:	75 13                	jne    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fa:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c00184ff:	eb 0c                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018501:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018506:	eb 05                	jmp    c001850d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018508:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c001850d:	5b                   	pop    ebx
c001850e:	5e                   	pop    esi
c001850f:	5f                   	pop    edi
c0018510:	5d                   	pop    ebp
c0018511:	c3                   	ret    

c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018512:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001851a:	80 f9 04             	cmp    cl,0x4
c001851d:	75 6b                	jne    c001858a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001851f:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018524:	80 fa 01             	cmp    dl,0x1
c0018527:	0f 86 92 02 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852d:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c0018532:	80 fa 02             	cmp    dl,0x2
c0018535:	0f 84 84 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853b:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018540:	80 fa 03             	cmp    dl,0x3
c0018543:	0f 84 76 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018549:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c001854e:	80 fa 04             	cmp    dl,0x4
c0018551:	0f 84 68 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018557:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c001855c:	80 fa 05             	cmp    dl,0x5
c001855f:	0f 84 5a 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018565:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c001856a:	80 fa 07             	cmp    dl,0x7
c001856d:	0f 84 4c 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018573:	83 ea 08             	sub    edx,0x8
c0018576:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c001857b:	80 fa 01             	cmp    dl,0x1
c001857e:	0f 87 3b 02 00 00    	ja     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018584:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c0018589:	c3                   	ret    
c001858a:	80 f9 05             	cmp    cl,0x5
c001858d:	75 45                	jne    c00185d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001858f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018592:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018597:	80 f9 02             	cmp    cl,0x2
c001859a:	0f 86 1f 02 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a0:	80 fa 04             	cmp    dl,0x4
c00185a3:	0f 84 f3 01 00 00    	je     c001879c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00185a9:	80 fa 07             	cmp    dl,0x7
c00185ac:	0f 84 0d 02 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b2:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00185b7:	80 fa 08             	cmp    dl,0x8
c00185ba:	0f 84 ff 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c0:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c00185c5:	80 fa 09             	cmp    dl,0x9
c00185c8:	0f 85 f1 01 00 00    	jne    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ce:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00185d3:	c3                   	ret    
c00185d4:	80 f9 06             	cmp    cl,0x6
c00185d7:	0f 85 85 01 00 00    	jne    c0018762 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00185dd:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00185e2:	80 fa 01             	cmp    dl,0x1
c00185e5:	0f 84 d4 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185eb:	8d 42 fb             	lea    eax,[edx-0x5]
c00185ee:	3c 01                	cmp    al,0x1
c00185f0:	0f 86 ac 01 00 00    	jbe    c00187a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185f6:	80 fa 03             	cmp    dl,0x3
c00185f9:	0f 84 a3 01 00 00    	je     c00187a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185ff:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018602:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018607:	80 f9 01             	cmp    cl,0x1
c001860a:	0f 86 af 01 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018610:	80 fa 09             	cmp    dl,0x9
c0018613:	0f 84 8f 01 00 00    	je     c00187a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018619:	8d 4a f6             	lea    ecx,[edx-0xa]
c001861c:	80 f9 01             	cmp    cl,0x1
c001861f:	0f 86 9a 01 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018625:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001862a:	80 fa 0d             	cmp    dl,0xd
c001862d:	0f 84 8c 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018633:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018638:	80 fa 0e             	cmp    dl,0xe
c001863b:	0f 84 7e 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018641:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018646:	80 fa 0f             	cmp    dl,0xf
c0018649:	0f 84 70 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864f:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018654:	80 fa 15             	cmp    dl,0x15
c0018657:	0f 84 62 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018660:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018665:	80 f9 01             	cmp    cl,0x1
c0018668:	0f 86 51 01 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866e:	80 fa 1a             	cmp    dl,0x1a
c0018671:	0f 84 37 01 00 00    	je     c00187ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018677:	80 fa 1c             	cmp    dl,0x1c
c001867a:	0f 84 34 01 00 00    	je     c00187b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018680:	80 fa 1d             	cmp    dl,0x1d
c0018683:	0f 84 36 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018689:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001868e:	80 fa 25             	cmp    dl,0x25
c0018691:	0f 84 28 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018697:	8d 4a da             	lea    ecx,[edx-0x26]
c001869a:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001869f:	80 f9 01             	cmp    cl,0x1
c00186a2:	0f 86 17 01 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a8:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00186ad:	80 fa 2a             	cmp    dl,0x2a
c00186b0:	0f 84 09 01 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b6:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00186bb:	80 fa 2c             	cmp    dl,0x2c
c00186be:	0f 84 fb 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c4:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00186c9:	80 fa 2d             	cmp    dl,0x2d
c00186cc:	0f 84 ed 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d2:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00186d7:	80 fa 2e             	cmp    dl,0x2e
c00186da:	0f 84 df 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e0:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00186e5:	80 fa 2f             	cmp    dl,0x2f
c00186e8:	0f 84 d1 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ee:	8d 4a cb             	lea    ecx,[edx-0x35]
c00186f1:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00186f6:	80 f9 01             	cmp    cl,0x1
c00186f9:	0f 86 c0 00 00 00    	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ff:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018704:	80 fa 37             	cmp    dl,0x37
c0018707:	0f 84 b2 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870d:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018712:	80 fa 3a             	cmp    dl,0x3a
c0018715:	0f 84 a4 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871b:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018720:	80 fa 3c             	cmp    dl,0x3c
c0018723:	0f 84 96 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018729:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c001872e:	80 fa 3d             	cmp    dl,0x3d
c0018731:	0f 84 88 00 00 00    	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018737:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001873c:	80 fa 3e             	cmp    dl,0x3e
c001873f:	74 7e                	je     c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018741:	8d 42 bb             	lea    eax,[edx-0x45]
c0018744:	3c 01                	cmp    al,0x1
c0018746:	76 72                	jbe    c00187ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018748:	80 fa 3f             	cmp    dl,0x3f
c001874b:	74 6d                	je     c00187ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001874d:	80 fa 4a             	cmp    dl,0x4a
c0018750:	74 0a                	je     c001875c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018752:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c0018757:	80 fa 4d             	cmp    dl,0x4d
c001875a:	75 63                	jne    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001875c:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018761:	c3                   	ret    
c0018762:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c0018767:	80 f9 0b             	cmp    cl,0xb
c001876a:	75 0a                	jne    c0018776 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001876c:	fe ca                	dec    dl
c001876e:	75 4f                	jne    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018770:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018775:	c3                   	ret    
c0018776:	80 f9 0f             	cmp    cl,0xf
c0018779:	75 44                	jne    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877b:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018780:	80 fa 02             	cmp    dl,0x2
c0018783:	76 3a                	jbe    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018785:	8d 42 fd             	lea    eax,[edx-0x3]
c0018788:	3c 01                	cmp    al,0x1
c001878a:	76 0a                	jbe    c0018796 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001878c:	b8 c1 b5 02 c0       	mov    eax,0xc002b5c1
c0018791:	80 fa 06             	cmp    dl,0x6
c0018794:	75 29                	jne    c00187bf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018796:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001879b:	c3                   	ret    
c001879c:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00187a1:	c3                   	ret    
c00187a2:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c00187a7:	c3                   	ret    
c00187a8:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00187ad:	c3                   	ret    
c00187ae:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00187b3:	c3                   	ret    
c00187b4:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00187b9:	c3                   	ret    
c00187ba:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00187bf:	c3                   	ret    

c00187c0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00187c0:	60                   	pusha  
c00187c1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187cd:	9c                   	pushf  
c00187ce:	fa                   	cli    
c00187cf:	0f 09                	wbinvd 
c00187d1:	0f 30                	wrmsr  
c00187d3:	9d                   	popf   
c00187d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187d8:	89 02                	mov    DWORD PTR [edx],eax
c00187da:	61                   	popa   
c00187db:	c3                   	ret    

c00187dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00187dc:	60                   	pusha  
c00187dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187e1:	9c                   	pushf  
c00187e2:	fa                   	cli    
c00187e3:	0f 09                	wbinvd 
c00187e5:	31 c0                	xor    eax,eax
c00187e7:	31 d2                	xor    edx,edx
c00187e9:	0f 32                	rdmsr  
c00187eb:	9d                   	popf   
c00187ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187f0:	89 02                	mov    DWORD PTR [edx],eax
c00187f2:	61                   	popa   
c00187f3:	c3                   	ret    

c00187f4 <CPU::AMD_K6_writeback(int, int, int)>:
c00187f4:	56                   	push   esi
c00187f5:	53                   	push   ebx
c00187f6:	83 ec 10             	sub    esp,0x10
c00187f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018802:	75 5d                	jne    c0018861 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018804:	83 f8 08             	cmp    eax,0x8
c0018807:	75 09                	jne    c0018812 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018809:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001880e:	7e 13                	jle    c0018823 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018810:	eb 30                	jmp    c0018842 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018812:	83 f8 06             	cmp    eax,0x6
c0018815:	7c 4a                	jl     c0018861 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018817:	83 f8 07             	cmp    eax,0x7
c001881a:	7e 07                	jle    c0018823 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001881c:	83 f8 09             	cmp    eax,0x9
c001881f:	74 21                	je     c0018842 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018821:	eb 3e                	jmp    c0018861 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018823:	89 e6                	mov    esi,esp
c0018825:	8b 1d e8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dae8
c001882b:	56                   	push   esi
c001882c:	c1 eb 15             	shr    ebx,0x15
c001882f:	68 82 00 00 c0       	push   0xc0000082
c0018834:	83 e3 7e             	and    ebx,0x7e
c0018837:	e8 a0 ff ff ff       	call   c00187dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001883c:	56                   	push   esi
c001883d:	6a 00                	push   0x0
c001883f:	53                   	push   ebx
c0018840:	eb 12                	jmp    c0018854 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018842:	89 e3                	mov    ebx,esp
c0018844:	53                   	push   ebx
c0018845:	68 82 00 00 c0       	push   0xc0000082
c001884a:	e8 8d ff ff ff       	call   c00187dc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001884f:	53                   	push   ebx
c0018850:	6a 00                	push   0x0
c0018852:	6a 00                	push   0x0
c0018854:	68 82 00 00 c0       	push   0xc0000082
c0018859:	e8 62 ff ff ff       	call   c00187c0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001885e:	83 c4 18             	add    esp,0x18
c0018861:	83 c4 10             	add    esp,0x10
c0018864:	5b                   	pop    ebx
c0018865:	5e                   	pop    esi
c0018866:	c3                   	ret    
c0018867:	90                   	nop

c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018868:	55                   	push   ebp
c0018869:	57                   	push   edi
c001886a:	56                   	push   esi
c001886b:	53                   	push   ebx
c001886c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018870:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018874:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018878:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001887c:	39 05 c0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfc0,eax
c0018882:	75 23                	jne    c00188a7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018884:	a1 cc 05 03 c0       	mov    eax,ds:0xc00305cc
c0018889:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001888d:	89 06                	mov    DWORD PTR [esi],eax
c001888f:	a1 c8 05 03 c0       	mov    eax,ds:0xc00305c8
c0018894:	89 07                	mov    DWORD PTR [edi],eax
c0018896:	a1 c4 05 03 c0       	mov    eax,ds:0xc00305c4
c001889b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001889e:	a1 c0 05 03 c0       	mov    eax,ds:0xc00305c0
c00188a3:	89 02                	mov    DWORD PTR [edx],eax
c00188a5:	eb 3f                	jmp    c00188e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00188a7:	31 c9                	xor    ecx,ecx
c00188a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188ad:	0f a2                	cpuid  
c00188af:	89 06                	mov    DWORD PTR [esi],eax
c00188b1:	89 1f                	mov    DWORD PTR [edi],ebx
c00188b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188b7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00188ba:	89 10                	mov    DWORD PTR [eax],edx
c00188bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188c0:	a3 c0 cf 02 c0       	mov    ds:0xc002cfc0,eax
c00188c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00188c7:	a3 cc 05 03 c0       	mov    ds:0xc00305cc,eax
c00188cc:	8b 07                	mov    eax,DWORD PTR [edi]
c00188ce:	a3 c8 05 03 c0       	mov    ds:0xc00305c8,eax
c00188d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188d6:	a3 c4 05 03 c0       	mov    ds:0xc00305c4,eax
c00188db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188df:	8b 00                	mov    eax,DWORD PTR [eax]
c00188e1:	a3 c0 05 03 c0       	mov    ds:0xc00305c0,eax
c00188e6:	5b                   	pop    ebx
c00188e7:	5e                   	pop    esi
c00188e8:	5f                   	pop    edi
c00188e9:	5d                   	pop    ebp
c00188ea:	c3                   	ret    
c00188eb:	90                   	nop

c00188ec <CPU::cpuidCheckEDX(unsigned int)>:
c00188ec:	83 ec 10             	sub    esp,0x10
c00188ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f3:	50                   	push   eax
c00188f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f8:	50                   	push   eax
c00188f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188fd:	50                   	push   eax
c00188fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018902:	50                   	push   eax
c0018903:	6a 01                	push   0x1
c0018905:	e8 5e ff ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001890a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001890e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018912:	0f 95 c0             	setne  al
c0018915:	83 c4 24             	add    esp,0x24
c0018918:	c3                   	ret    
c0018919:	90                   	nop

c001891a <CPU::cpuidCheckECX(unsigned int)>:
c001891a:	83 ec 10             	sub    esp,0x10
c001891d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018921:	50                   	push   eax
c0018922:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018926:	50                   	push   eax
c0018927:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001892b:	50                   	push   eax
c001892c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018930:	50                   	push   eax
c0018931:	6a 01                	push   0x1
c0018933:	e8 30 ff ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018938:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001893c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018940:	0f 95 c0             	setne  al
c0018943:	83 c4 24             	add    esp,0x24
c0018946:	c3                   	ret    
c0018947:	90                   	nop

c0018948 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018948:	83 ec 10             	sub    esp,0x10
c001894b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001894f:	50                   	push   eax
c0018950:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018954:	50                   	push   eax
c0018955:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018959:	50                   	push   eax
c001895a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001895e:	50                   	push   eax
c001895f:	6a 07                	push   0x7
c0018961:	e8 02 ff ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001896e:	0f 95 c0             	setne  al
c0018971:	83 c4 24             	add    esp,0x24
c0018974:	c3                   	ret    
c0018975:	90                   	nop

c0018976 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018976:	83 ec 10             	sub    esp,0x10
c0018979:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001897d:	50                   	push   eax
c001897e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018982:	50                   	push   eax
c0018983:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018987:	50                   	push   eax
c0018988:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001898c:	50                   	push   eax
c001898d:	6a 07                	push   0x7
c001898f:	e8 d4 fe ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018998:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001899c:	0f 95 c0             	setne  al
c001899f:	83 c4 24             	add    esp,0x24
c00189a2:	c3                   	ret    
c00189a3:	90                   	nop

c00189a4 <CPU::CPU()>:
c00189a4:	83 ec 0c             	sub    esp,0xc
c00189a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ab:	83 ec 08             	sub    esp,0x8
c00189ae:	68 c1 b5 02 c0       	push   0xc002b5c1
c00189b3:	50                   	push   eax
c00189b4:	e8 13 b4 ff ff       	call   c0013dcc <Device::Device(char const*)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	ba 98 b6 02 c0       	mov    edx,0xc002b698
c00189c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189c5:	89 10                	mov    DWORD PTR [eax],edx
c00189c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189cb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00189d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189d9:	05 78 01 00 00       	add    eax,0x178
c00189de:	83 ec 0c             	sub    esp,0xc
c00189e1:	50                   	push   eax
c00189e2:	e8 e5 63 ff ff       	call   c000edcc <GDT::GDT()>
c00189e7:	83 c4 10             	add    esp,0x10
c00189ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ee:	05 7c 09 00 00       	add    eax,0x97c
c00189f3:	83 ec 0c             	sub    esp,0xc
c00189f6:	50                   	push   eax
c00189f7:	e8 20 66 ff ff       	call   c000f01c <IDT::IDT()>
c00189fc:	83 c4 10             	add    esp,0x10
c00189ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a03:	05 7c 11 00 00       	add    eax,0x117c
c0018a08:	83 ec 0c             	sub    esp,0xc
c0018a0b:	50                   	push   eax
c0018a0c:	e8 53 81 ff ff       	call   c0010b64 <TSS::TSS()>
c0018a11:	83 c4 10             	add    esp,0x10
c0018a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a18:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a23:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018a2d:	90                   	nop
c0018a2e:	83 c4 0c             	add    esp,0xc
c0018a31:	c3                   	ret    

c0018a32 <CPU::displayFeatures()>:
c0018a32:	c3                   	ret    
c0018a33:	90                   	nop

c0018a34 <CPU::detectFeatures()>:
c0018a34:	55                   	push   ebp
c0018a35:	57                   	push   edi
c0018a36:	56                   	push   esi
c0018a37:	53                   	push   ebx
c0018a38:	83 ec 50             	sub    esp,0x50
c0018a3b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018a3f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018a49:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018a50:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018a56:	6a 0d                	push   0xd
c0018a58:	6a 00                	push   0x0
c0018a5a:	55                   	push   ebp
c0018a5b:	e8 f0 7c fe ff       	call   c0000750 <memset>
c0018a60:	83 c4 10             	add    esp,0x10
c0018a63:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0018a68:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018a6f:	0f 84 22 09 00 00    	je     c0019397 <CPU::detectFeatures()+0x963>
c0018a75:	83 ec 0c             	sub    esp,0xc
c0018a78:	89 ef                	mov    edi,ebp
c0018a7a:	6a 10                	push   0x10
c0018a7c:	e8 6b fe ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018a81:	83 e0 01             	and    eax,0x1
c0018a84:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a87:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a8d:	83 e0 fd             	and    eax,0xfffffffd
c0018a90:	09 d0                	or     eax,edx
c0018a92:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a98:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018a9f:	e8 48 fe ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018aa4:	83 e0 01             	and    eax,0x1
c0018aa7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018aae:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ab4:	83 e0 fb             	and    eax,0xfffffffb
c0018ab7:	09 d0                	or     eax,edx
c0018ab9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018abf:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018ac6:	e8 21 fe ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018acb:	83 e0 01             	and    eax,0x1
c0018ace:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ad5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018adb:	83 e0 f7             	and    eax,0xfffffff7
c0018ade:	09 d0                	or     eax,edx
c0018ae0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ae6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018aed:	e8 fa fd ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018af2:	83 e0 01             	and    eax,0x1
c0018af5:	c1 e0 04             	shl    eax,0x4
c0018af8:	88 c2                	mov    dl,al
c0018afa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b00:	83 e0 ef             	and    eax,0xffffffef
c0018b03:	09 d0                	or     eax,edx
c0018b05:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b0b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b12:	e8 d5 fd ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018b17:	83 e0 01             	and    eax,0x1
c0018b1a:	c1 e0 05             	shl    eax,0x5
c0018b1d:	88 c2                	mov    dl,al
c0018b1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b25:	83 e0 df             	and    eax,0xffffffdf
c0018b28:	09 d0                	or     eax,edx
c0018b2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b30:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018b37:	e8 b0 fd ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018b3c:	83 e0 01             	and    eax,0x1
c0018b3f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b42:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018b48:	83 e0 fd             	and    eax,0xfffffffd
c0018b4b:	09 d0                	or     eax,edx
c0018b4d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018b53:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018b5a:	e8 8d fd ff ff       	call   c00188ec <CPU::cpuidCheckEDX(unsigned int)>
c0018b5f:	83 e0 01             	and    eax,0x1
c0018b62:	c1 e0 06             	shl    eax,0x6
c0018b65:	88 c2                	mov    dl,al
c0018b67:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b6d:	83 e0 bf             	and    eax,0xffffffbf
c0018b70:	09 d0                	or     eax,edx
c0018b72:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b78:	58                   	pop    eax
c0018b79:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b7d:	50                   	push   eax
c0018b7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b82:	50                   	push   eax
c0018b83:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018b87:	56                   	push   esi
c0018b88:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b8c:	50                   	push   eax
c0018b8d:	6a 00                	push   0x0
c0018b8f:	e8 d4 fc ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b94:	b8 04 00 00 00       	mov    eax,0x4
c0018b99:	89 c1                	mov    ecx,eax
c0018b9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b9d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ba3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018ba7:	89 c1                	mov    ecx,eax
c0018ba9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bab:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018bb1:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018bb5:	89 c1                	mov    ecx,eax
c0018bb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bb9:	83 c4 18             	add    esp,0x18
c0018bbc:	68 6c b4 02 c0       	push   0xc002b46c
c0018bc1:	55                   	push   ebp
c0018bc2:	e8 d1 7c fe ff       	call   c0000898 <strcmp>
c0018bc7:	83 c4 10             	add    esp,0x10
c0018bca:	85 c0                	test   eax,eax
c0018bcc:	75 0f                	jne    c0018bdd <CPU::detectFeatures()+0x1a9>
c0018bce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018bd8:	e9 22 02 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018bdd:	50                   	push   eax
c0018bde:	50                   	push   eax
c0018bdf:	68 79 b4 02 c0       	push   0xc002b479
c0018be4:	55                   	push   ebp
c0018be5:	e8 ae 7c fe ff       	call   c0000898 <strcmp>
c0018bea:	83 c4 10             	add    esp,0x10
c0018bed:	85 c0                	test   eax,eax
c0018bef:	74 dd                	je     c0018bce <CPU::detectFeatures()+0x19a>
c0018bf1:	50                   	push   eax
c0018bf2:	50                   	push   eax
c0018bf3:	68 86 b4 02 c0       	push   0xc002b486
c0018bf8:	55                   	push   ebp
c0018bf9:	e8 9a 7c fe ff       	call   c0000898 <strcmp>
c0018bfe:	83 c4 10             	add    esp,0x10
c0018c01:	85 c0                	test   eax,eax
c0018c03:	74 2a                	je     c0018c2f <CPU::detectFeatures()+0x1fb>
c0018c05:	50                   	push   eax
c0018c06:	50                   	push   eax
c0018c07:	68 93 b4 02 c0       	push   0xc002b493
c0018c0c:	55                   	push   ebp
c0018c0d:	e8 86 7c fe ff       	call   c0000898 <strcmp>
c0018c12:	83 c4 10             	add    esp,0x10
c0018c15:	85 c0                	test   eax,eax
c0018c17:	74 16                	je     c0018c2f <CPU::detectFeatures()+0x1fb>
c0018c19:	50                   	push   eax
c0018c1a:	50                   	push   eax
c0018c1b:	68 a0 b4 02 c0       	push   0xc002b4a0
c0018c20:	55                   	push   ebp
c0018c21:	e8 72 7c fe ff       	call   c0000898 <strcmp>
c0018c26:	83 c4 10             	add    esp,0x10
c0018c29:	85 c0                	test   eax,eax
c0018c2b:	74 48                	je     c0018c75 <CPU::detectFeatures()+0x241>
c0018c2d:	eb 0f                	jmp    c0018c3e <CPU::detectFeatures()+0x20a>
c0018c2f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018c39:	e9 c1 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018c3e:	50                   	push   eax
c0018c3f:	50                   	push   eax
c0018c40:	68 ad b4 02 c0       	push   0xc002b4ad
c0018c45:	55                   	push   ebp
c0018c46:	e8 4d 7c fe ff       	call   c0000898 <strcmp>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	85 c0                	test   eax,eax
c0018c50:	74 23                	je     c0018c75 <CPU::detectFeatures()+0x241>
c0018c52:	57                   	push   edi
c0018c53:	57                   	push   edi
c0018c54:	68 ba b4 02 c0       	push   0xc002b4ba
c0018c59:	55                   	push   ebp
c0018c5a:	e8 39 7c fe ff       	call   c0000898 <strcmp>
c0018c5f:	83 c4 10             	add    esp,0x10
c0018c62:	85 c0                	test   eax,eax
c0018c64:	75 1e                	jne    c0018c84 <CPU::detectFeatures()+0x250>
c0018c66:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018c70:	e9 8a 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018c75:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018c7f:	e9 7b 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018c84:	56                   	push   esi
c0018c85:	56                   	push   esi
c0018c86:	68 c7 b4 02 c0       	push   0xc002b4c7
c0018c8b:	55                   	push   ebp
c0018c8c:	e8 07 7c fe ff       	call   c0000898 <strcmp>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	85 c0                	test   eax,eax
c0018c96:	75 0f                	jne    c0018ca7 <CPU::detectFeatures()+0x273>
c0018c98:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ca2:	e9 58 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018ca7:	51                   	push   ecx
c0018ca8:	51                   	push   ecx
c0018ca9:	68 86 b4 02 c0       	push   0xc002b486
c0018cae:	55                   	push   ebp
c0018caf:	e8 e4 7b fe ff       	call   c0000898 <strcmp>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	85 c0                	test   eax,eax
c0018cb9:	75 0f                	jne    c0018cca <CPU::detectFeatures()+0x296>
c0018cbb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018cc5:	e9 35 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018cca:	52                   	push   edx
c0018ccb:	52                   	push   edx
c0018ccc:	68 d4 b4 02 c0       	push   0xc002b4d4
c0018cd1:	55                   	push   ebp
c0018cd2:	e8 c1 7b fe ff       	call   c0000898 <strcmp>
c0018cd7:	83 c4 10             	add    esp,0x10
c0018cda:	85 c0                	test   eax,eax
c0018cdc:	75 0f                	jne    c0018ced <CPU::detectFeatures()+0x2b9>
c0018cde:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018ce8:	e9 12 01 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018ced:	50                   	push   eax
c0018cee:	50                   	push   eax
c0018cef:	68 e1 b4 02 c0       	push   0xc002b4e1
c0018cf4:	55                   	push   ebp
c0018cf5:	e8 9e 7b fe ff       	call   c0000898 <strcmp>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	85 c0                	test   eax,eax
c0018cff:	75 0f                	jne    c0018d10 <CPU::detectFeatures()+0x2dc>
c0018d01:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d0b:	e9 ef 00 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018d10:	50                   	push   eax
c0018d11:	50                   	push   eax
c0018d12:	68 ee b4 02 c0       	push   0xc002b4ee
c0018d17:	55                   	push   ebp
c0018d18:	e8 7b 7b fe ff       	call   c0000898 <strcmp>
c0018d1d:	83 c4 10             	add    esp,0x10
c0018d20:	85 c0                	test   eax,eax
c0018d22:	75 0f                	jne    c0018d33 <CPU::detectFeatures()+0x2ff>
c0018d24:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018d2e:	e9 cc 00 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018d33:	50                   	push   eax
c0018d34:	50                   	push   eax
c0018d35:	68 fb b4 02 c0       	push   0xc002b4fb
c0018d3a:	55                   	push   ebp
c0018d3b:	e8 58 7b fe ff       	call   c0000898 <strcmp>
c0018d40:	83 c4 10             	add    esp,0x10
c0018d43:	85 c0                	test   eax,eax
c0018d45:	75 0f                	jne    c0018d56 <CPU::detectFeatures()+0x322>
c0018d47:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018d51:	e9 a9 00 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018d56:	50                   	push   eax
c0018d57:	50                   	push   eax
c0018d58:	68 08 b5 02 c0       	push   0xc002b508
c0018d5d:	55                   	push   ebp
c0018d5e:	e8 35 7b fe ff       	call   c0000898 <strcmp>
c0018d63:	83 c4 10             	add    esp,0x10
c0018d66:	85 c0                	test   eax,eax
c0018d68:	75 0f                	jne    c0018d79 <CPU::detectFeatures()+0x345>
c0018d6a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018d74:	e9 86 00 00 00       	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018d79:	50                   	push   eax
c0018d7a:	50                   	push   eax
c0018d7b:	68 15 b5 02 c0       	push   0xc002b515
c0018d80:	55                   	push   ebp
c0018d81:	e8 12 7b fe ff       	call   c0000898 <strcmp>
c0018d86:	83 c4 10             	add    esp,0x10
c0018d89:	85 c0                	test   eax,eax
c0018d8b:	75 0c                	jne    c0018d99 <CPU::detectFeatures()+0x365>
c0018d8d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018d97:	eb 66                	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018d99:	50                   	push   eax
c0018d9a:	50                   	push   eax
c0018d9b:	68 22 b5 02 c0       	push   0xc002b522
c0018da0:	55                   	push   ebp
c0018da1:	e8 f2 7a fe ff       	call   c0000898 <strcmp>
c0018da6:	83 c4 10             	add    esp,0x10
c0018da9:	85 c0                	test   eax,eax
c0018dab:	75 0c                	jne    c0018db9 <CPU::detectFeatures()+0x385>
c0018dad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018db7:	eb 46                	jmp    c0018dff <CPU::detectFeatures()+0x3cb>
c0018db9:	57                   	push   edi
c0018dba:	57                   	push   edi
c0018dbb:	68 2f b5 02 c0       	push   0xc002b52f
c0018dc0:	55                   	push   ebp
c0018dc1:	e8 d2 7a fe ff       	call   c0000898 <strcmp>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	85 c0                	test   eax,eax
c0018dcb:	74 e0                	je     c0018dad <CPU::detectFeatures()+0x379>
c0018dcd:	56                   	push   esi
c0018dce:	56                   	push   esi
c0018dcf:	68 3c b5 02 c0       	push   0xc002b53c
c0018dd4:	55                   	push   ebp
c0018dd5:	e8 be 7a fe ff       	call   c0000898 <strcmp>
c0018dda:	83 c4 10             	add    esp,0x10
c0018ddd:	85 c0                	test   eax,eax
c0018ddf:	74 cc                	je     c0018dad <CPU::detectFeatures()+0x379>
c0018de1:	51                   	push   ecx
c0018de2:	51                   	push   ecx
c0018de3:	68 49 b5 02 c0       	push   0xc002b549
c0018de8:	55                   	push   ebp
c0018de9:	e8 aa 7a fe ff       	call   c0000898 <strcmp>
c0018dee:	83 c4 10             	add    esp,0x10
c0018df1:	85 c0                	test   eax,eax
c0018df3:	74 b8                	je     c0018dad <CPU::detectFeatures()+0x379>
c0018df5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018dff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e04:	0f 86 be 00 00 00    	jbe    c0018ec8 <CPU::detectFeatures()+0x494>
c0018e0a:	83 ec 0c             	sub    esp,0xc
c0018e0d:	68 80 00 00 00       	push   0x80
c0018e12:	e8 31 fb ff ff       	call   c0018948 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e17:	83 e0 01             	and    eax,0x1
c0018e1a:	c1 e0 06             	shl    eax,0x6
c0018e1d:	88 c2                	mov    dl,al
c0018e1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e25:	83 e0 bf             	and    eax,0xffffffbf
c0018e28:	09 d0                	or     eax,edx
c0018e2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e30:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018e37:	e8 0c fb ff ff       	call   c0018948 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e3c:	83 e0 01             	and    eax,0x1
c0018e3f:	c1 e0 04             	shl    eax,0x4
c0018e42:	88 c2                	mov    dl,al
c0018e44:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e4a:	83 e0 ef             	and    eax,0xffffffef
c0018e4d:	09 d0                	or     eax,edx
c0018e4f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e55:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018e5c:	e8 e7 fa ff ff       	call   c0018948 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e61:	c1 e0 07             	shl    eax,0x7
c0018e64:	88 c2                	mov    dl,al
c0018e66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e6c:	83 e0 7f             	and    eax,0x7f
c0018e6f:	09 d0                	or     eax,edx
c0018e71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e7e:	e8 f3 fa ff ff       	call   c0018976 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e83:	83 e0 01             	and    eax,0x1
c0018e86:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e8d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e93:	83 e0 f7             	and    eax,0xfffffff7
c0018e96:	09 d0                	or     eax,edx
c0018e98:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e9e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018ea5:	e8 cc fa ff ff       	call   c0018976 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	83 e0 01             	and    eax,0x1
c0018eb0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018eb7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ebd:	83 e0 fb             	and    eax,0xfffffffb
c0018ec0:	09 d0                	or     eax,edx
c0018ec2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ecf:	50                   	push   eax
c0018ed0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ed4:	50                   	push   eax
c0018ed5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ed9:	56                   	push   esi
c0018eda:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ede:	50                   	push   eax
c0018edf:	6a 01                	push   0x1
c0018ee1:	e8 82 f9 ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ee6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018eea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018ef0:	88 ca                	mov    dl,cl
c0018ef2:	83 e0 f0             	and    eax,0xfffffff0
c0018ef5:	83 e2 0f             	and    edx,0xf
c0018ef8:	09 d0                	or     eax,edx
c0018efa:	88 ca                	mov    dl,cl
c0018efc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f02:	c0 ea 04             	shr    dl,0x4
c0018f05:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f09:	0f b6 c2             	movzx  eax,dl
c0018f0c:	83 c4 20             	add    esp,0x20
c0018f0f:	c1 e0 06             	shl    eax,0x6
c0018f12:	89 c7                	mov    edi,eax
c0018f14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1a:	66 25 3f c0          	and    ax,0xc03f
c0018f1e:	09 f8                	or     eax,edi
c0018f20:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f27:	89 c8                	mov    eax,ecx
c0018f29:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018f30:	c1 e8 08             	shr    eax,0x8
c0018f33:	83 e5 3f             	and    ebp,0x3f
c0018f36:	83 e0 0f             	and    eax,0xf
c0018f39:	89 c7                	mov    edi,eax
c0018f3b:	c1 e7 06             	shl    edi,0x6
c0018f3e:	09 ef                	or     edi,ebp
c0018f40:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018f47:	89 fa                	mov    edx,edi
c0018f49:	83 e5 c0             	and    ebp,0xffffffc0
c0018f4c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018f52:	88 c2                	mov    dl,al
c0018f54:	c0 ea 02             	shr    dl,0x2
c0018f57:	89 d7                	mov    edi,edx
c0018f59:	09 ef                	or     edi,ebp
c0018f5b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018f61:	89 fa                	mov    edx,edi
c0018f63:	83 e5 cf             	and    ebp,0xffffffcf
c0018f66:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018f6c:	89 cf                	mov    edi,ecx
c0018f6e:	c1 ef 0c             	shr    edi,0xc
c0018f71:	83 e7 03             	and    edi,0x3
c0018f74:	c1 e7 04             	shl    edi,0x4
c0018f77:	09 ef                	or     edi,ebp
c0018f79:	3c 06                	cmp    al,0x6
c0018f7b:	89 fa                	mov    edx,edi
c0018f7d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018f83:	74 04                	je     c0018f89 <CPU::detectFeatures()+0x555>
c0018f85:	3c 0f                	cmp    al,0xf
c0018f87:	75 5c                	jne    c0018fe5 <CPU::detectFeatures()+0x5b1>
c0018f89:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f8d:	89 cf                	mov    edi,ecx
c0018f8f:	c1 ef 10             	shr    edi,0x10
c0018f92:	c1 e7 04             	shl    edi,0x4
c0018f95:	09 fa                	or     edx,edi
c0018f97:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018f9d:	0f b6 d2             	movzx  edx,dl
c0018fa0:	66 81 e7 3f c0       	and    di,0xc03f
c0018fa5:	c1 e2 06             	shl    edx,0x6
c0018fa8:	09 fa                	or     edx,edi
c0018faa:	3c 0f                	cmp    al,0xf
c0018fac:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018fb3:	75 30                	jne    c0018fe5 <CPU::detectFeatures()+0x5b1>
c0018fb5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018fbb:	c1 e9 14             	shr    ecx,0x14
c0018fbe:	83 e0 3f             	and    eax,0x3f
c0018fc1:	83 c1 0f             	add    ecx,0xf
c0018fc4:	88 ca                	mov    dl,cl
c0018fc6:	c0 e9 02             	shr    cl,0x2
c0018fc9:	c1 e2 06             	shl    edx,0x6
c0018fcc:	09 d0                	or     eax,edx
c0018fce:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018fd4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018fda:	83 e0 c0             	and    eax,0xffffffc0
c0018fdd:	09 c1                	or     ecx,eax
c0018fdf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018fe5:	83 ec 0c             	sub    esp,0xc
c0018fe8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018fef:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ff3:	50                   	push   eax
c0018ff4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ff8:	55                   	push   ebp
c0018ff9:	56                   	push   esi
c0018ffa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018ffe:	57                   	push   edi
c0018fff:	68 00 00 00 80       	push   0x80000000
c0019004:	e8 5f f8 ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019009:	83 c4 20             	add    esp,0x20
c001900c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019014:	76 22                	jbe    c0019038 <CPU::detectFeatures()+0x604>
c0019016:	83 ec 0c             	sub    esp,0xc
c0019019:	8d 44 24 28          	lea    eax,[esp+0x28]
c001901d:	50                   	push   eax
c001901e:	55                   	push   ebp
c001901f:	56                   	push   esi
c0019020:	57                   	push   edi
c0019021:	68 01 00 00 80       	push   0x80000001
c0019026:	e8 3d f8 ff ff       	call   c0018868 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001902b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019035:	83 c4 20             	add    esp,0x20
c0019038:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001903e:	83 f8 01             	cmp    eax,0x1
c0019041:	75 6f                	jne    c00190b2 <CPU::detectFeatures()+0x67e>
c0019043:	51                   	push   ecx
c0019044:	51                   	push   ecx
c0019045:	68 55 b5 02 c0       	push   0xc002b555
c001904a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001904e:	56                   	push   esi
c001904f:	e8 b8 77 fe ff       	call   c000080c <strcpy>
c0019054:	5f                   	pop    edi
c0019055:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001905b:	5d                   	pop    ebp
c001905c:	66 c1 e8 06          	shr    ax,0x6
c0019060:	0f b6 c0             	movzx  eax,al
c0019063:	50                   	push   eax
c0019064:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001906a:	c1 e8 0e             	shr    eax,0xe
c001906d:	0f b6 c0             	movzx  eax,al
c0019070:	50                   	push   eax
c0019071:	e8 9c f4 ff ff       	call   c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019076:	5a                   	pop    edx
c0019077:	59                   	pop    ecx
c0019078:	50                   	push   eax
c0019079:	56                   	push   esi
c001907a:	e8 cd 78 fe ff       	call   c000094c <strcat>
c001907f:	5f                   	pop    edi
c0019080:	5d                   	pop    ebp
c0019081:	56                   	push   esi
c0019082:	53                   	push   ebx
c0019083:	e8 36 ad ff ff       	call   c0013dbe <Device::setName(char const*)>
c0019088:	58                   	pop    eax
c0019089:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001908f:	5a                   	pop    edx
c0019090:	68 5c b5 02 c0       	push   0xc002b55c
c0019095:	50                   	push   eax
c0019096:	e8 fd 77 fe ff       	call   c0000898 <strcmp>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	85 c0                	test   eax,eax
c00190a0:	0f 85 71 03 00 00    	jne    c0019417 <CPU::detectFeatures()+0x9e3>
c00190a6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00190ad:	e9 65 03 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x9e3>
c00190b2:	83 f8 02             	cmp    eax,0x2
c00190b5:	0f 85 b5 00 00 00    	jne    c0019170 <CPU::detectFeatures()+0x73c>
c00190bb:	57                   	push   edi
c00190bc:	57                   	push   edi
c00190bd:	68 6e b5 02 c0       	push   0xc002b56e
c00190c2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190c6:	56                   	push   esi
c00190c7:	e8 40 77 fe ff       	call   c000080c <strcpy>
c00190cc:	5d                   	pop    ebp
c00190cd:	58                   	pop    eax
c00190ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d4:	66 c1 e8 06          	shr    ax,0x6
c00190d8:	0f b6 c0             	movzx  eax,al
c00190db:	50                   	push   eax
c00190dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190e2:	c1 e8 0e             	shr    eax,0xe
c00190e5:	0f b6 c0             	movzx  eax,al
c00190e8:	50                   	push   eax
c00190e9:	e8 90 f2 ff ff       	call   c001837e <CPU::lookupAMDName(unsigned char, unsigned char)>
c00190ee:	5a                   	pop    edx
c00190ef:	59                   	pop    ecx
c00190f0:	50                   	push   eax
c00190f1:	56                   	push   esi
c00190f2:	e8 55 78 fe ff       	call   c000094c <strcat>
c00190f7:	5f                   	pop    edi
c00190f8:	5d                   	pop    ebp
c00190f9:	56                   	push   esi
c00190fa:	53                   	push   ebx
c00190fb:	e8 be ac ff ff       	call   c0013dbe <Device::setName(char const*)>
c0019100:	58                   	pop    eax
c0019101:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019107:	5a                   	pop    edx
c0019108:	68 73 b5 02 c0       	push   0xc002b573
c001910d:	50                   	push   eax
c001910e:	e8 85 77 fe ff       	call   c0000898 <strcmp>
c0019113:	83 c4 10             	add    esp,0x10
c0019116:	85 c0                	test   eax,eax
c0019118:	75 20                	jne    c001913a <CPU::detectFeatures()+0x706>
c001911a:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c0019120:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019126:	a8 01                	test   al,0x1
c0019128:	74 10                	je     c001913a <CPU::detectFeatures()+0x706>
c001912a:	83 e0 fe             	and    eax,0xfffffffe
c001912d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019133:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001913a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019140:	c1 e8 0e             	shr    eax,0xe
c0019143:	3c 05                	cmp    al,0x5
c0019145:	0f 85 cc 02 00 00    	jne    c0019417 <CPU::detectFeatures()+0x9e3>
c001914b:	56                   	push   esi
c001914c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019152:	83 e0 0f             	and    eax,0xf
c0019155:	50                   	push   eax
c0019156:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001915c:	66 c1 e8 06          	shr    ax,0x6
c0019160:	0f b6 c0             	movzx  eax,al
c0019163:	50                   	push   eax
c0019164:	6a 05                	push   0x5
c0019166:	e8 89 f6 ff ff       	call   c00187f4 <CPU::AMD_K6_writeback(int, int, int)>
c001916b:	e9 1f 02 00 00       	jmp    c001938f <CPU::detectFeatures()+0x95b>
c0019170:	8d 50 fd             	lea    edx,[eax-0x3]
c0019173:	83 fa 01             	cmp    edx,0x1
c0019176:	76 09                	jbe    c0019181 <CPU::detectFeatures()+0x74d>
c0019178:	83 f8 06             	cmp    eax,0x6
c001917b:	0f 85 91 01 00 00    	jne    c0019312 <CPU::detectFeatures()+0x8de>
c0019181:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019187:	c1 ea 0e             	shr    edx,0xe
c001918a:	80 fa 05             	cmp    dl,0x5
c001918d:	75 7b                	jne    c001920a <CPU::detectFeatures()+0x7d6>
c001918f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019195:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001919a:	66 81 fa 00 01       	cmp    dx,0x100
c001919f:	75 0c                	jne    c00191ad <CPU::detectFeatures()+0x779>
c00191a1:	51                   	push   ecx
c00191a2:	51                   	push   ecx
c00191a3:	68 7a b5 02 c0       	push   0xc002b57a
c00191a8:	e9 dc 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c00191ad:	66 81 fa 00 02       	cmp    dx,0x200
c00191b2:	75 0c                	jne    c00191c0 <CPU::detectFeatures()+0x78c>
c00191b4:	52                   	push   edx
c00191b5:	52                   	push   edx
c00191b6:	68 8d b5 02 c0       	push   0xc002b58d
c00191bb:	e9 c9 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c00191c0:	66 81 fa 40 02       	cmp    dx,0x240
c00191c5:	75 0c                	jne    c00191d3 <CPU::detectFeatures()+0x79f>
c00191c7:	50                   	push   eax
c00191c8:	50                   	push   eax
c00191c9:	68 9f b5 02 c0       	push   0xc002b59f
c00191ce:	e9 b6 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c00191d3:	83 f8 06             	cmp    eax,0x6
c00191d6:	75 0c                	jne    c00191e4 <CPU::detectFeatures()+0x7b0>
c00191d8:	50                   	push   eax
c00191d9:	50                   	push   eax
c00191da:	68 b1 b5 02 c0       	push   0xc002b5b1
c00191df:	e9 a5 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c00191e4:	83 f8 04             	cmp    eax,0x4
c00191e7:	75 0c                	jne    c00191f5 <CPU::detectFeatures()+0x7c1>
c00191e9:	50                   	push   eax
c00191ea:	50                   	push   eax
c00191eb:	68 bd b5 02 c0       	push   0xc002b5bd
c00191f0:	e9 94 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c00191f5:	83 f8 03             	cmp    eax,0x3
c00191f8:	0f 85 19 02 00 00    	jne    c0019417 <CPU::detectFeatures()+0x9e3>
c00191fe:	50                   	push   eax
c00191ff:	50                   	push   eax
c0019200:	68 c5 b5 02 c0       	push   0xc002b5c5
c0019205:	e9 7f 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001920a:	80 fa 06             	cmp    dl,0x6
c001920d:	0f 85 db 00 00 00    	jne    c00192ee <CPU::detectFeatures()+0x8ba>
c0019213:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019219:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001921e:	66 81 fa 80 01       	cmp    dx,0x180
c0019223:	75 0c                	jne    c0019231 <CPU::detectFeatures()+0x7fd>
c0019225:	50                   	push   eax
c0019226:	50                   	push   eax
c0019227:	68 d0 b5 02 c0       	push   0xc002b5d0
c001922c:	e9 58 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019231:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019237:	66 f7 c1 80 ff       	test   cx,0xff80
c001923c:	75 0c                	jne    c001924a <CPU::detectFeatures()+0x816>
c001923e:	50                   	push   eax
c001923f:	50                   	push   eax
c0019240:	68 e0 b5 02 c0       	push   0xc002b5e0
c0019245:	e9 3f 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001924a:	66 81 fa 40 02       	cmp    dx,0x240
c001924f:	75 0c                	jne    c001925d <CPU::detectFeatures()+0x829>
c0019251:	55                   	push   ebp
c0019252:	55                   	push   ebp
c0019253:	68 e7 b5 02 c0       	push   0xc002b5e7
c0019258:	e9 2c 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001925d:	66 81 fa 80 02       	cmp    dx,0x280
c0019262:	75 0c                	jne    c0019270 <CPU::detectFeatures()+0x83c>
c0019264:	57                   	push   edi
c0019265:	57                   	push   edi
c0019266:	68 f0 b5 02 c0       	push   0xc002b5f0
c001926b:	e9 19 01 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019270:	66 81 fa 40 03       	cmp    dx,0x340
c0019275:	74 ed                	je     c0019264 <CPU::detectFeatures()+0x830>
c0019277:	66 81 fa c0 03       	cmp    dx,0x3c0
c001927c:	75 0c                	jne    c001928a <CPU::detectFeatures()+0x856>
c001927e:	56                   	push   esi
c001927f:	56                   	push   esi
c0019280:	68 f7 b5 02 c0       	push   0xc002b5f7
c0019285:	e9 ff 00 00 00       	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001928a:	83 f8 06             	cmp    eax,0x6
c001928d:	0f 84 45 ff ff ff    	je     c00191d8 <CPU::detectFeatures()+0x7a4>
c0019293:	83 f8 04             	cmp    eax,0x4
c0019296:	0f 84 4d ff ff ff    	je     c00191e9 <CPU::detectFeatures()+0x7b5>
c001929c:	83 f8 03             	cmp    eax,0x3
c001929f:	0f 85 72 01 00 00    	jne    c0019417 <CPU::detectFeatures()+0x9e3>
c00192a5:	51                   	push   ecx
c00192a6:	51                   	push   ecx
c00192a7:	68 00 b6 02 c0       	push   0xc002b600
c00192ac:	53                   	push   ebx
c00192ad:	e8 0c ab ff ff       	call   c0013dbe <Device::setName(char const*)>
c00192b2:	b1 c1                	mov    cl,0xc1
c00192b4:	88 c8                	mov    al,cl
c00192b6:	e6 22                	out    0x22,al
c00192b8:	e4 23                	in     al,0x23
c00192ba:	88 c2                	mov    dl,al
c00192bc:	88 c8                	mov    al,cl
c00192be:	e6 22                	out    0x22,al
c00192c0:	88 d0                	mov    al,dl
c00192c2:	83 c8 10             	or     eax,0x10
c00192c5:	e6 23                	out    0x23,al
c00192c7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00192ce:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00192d1:	89 d0                	mov    eax,edx
c00192d3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00192d9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00192dd:	40                   	inc    eax
c00192de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00192e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00192e9:	e9 a1 00 00 00       	jmp    c001938f <CPU::detectFeatures()+0x95b>
c00192ee:	83 f8 06             	cmp    eax,0x6
c00192f1:	0f 84 e1 fe ff ff    	je     c00191d8 <CPU::detectFeatures()+0x7a4>
c00192f7:	83 f8 04             	cmp    eax,0x4
c00192fa:	0f 84 e9 fe ff ff    	je     c00191e9 <CPU::detectFeatures()+0x7b5>
c0019300:	83 f8 03             	cmp    eax,0x3
c0019303:	0f 85 0e 01 00 00    	jne    c0019417 <CPU::detectFeatures()+0x9e3>
c0019309:	52                   	push   edx
c001930a:	52                   	push   edx
c001930b:	68 0b b6 02 c0       	push   0xc002b60b
c0019310:	eb 77                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019312:	83 f8 07             	cmp    eax,0x7
c0019315:	75 09                	jne    c0019320 <CPU::detectFeatures()+0x8ec>
c0019317:	50                   	push   eax
c0019318:	50                   	push   eax
c0019319:	68 15 b6 02 c0       	push   0xc002b615
c001931e:	eb 69                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019320:	83 f8 0a             	cmp    eax,0xa
c0019323:	75 09                	jne    c001932e <CPU::detectFeatures()+0x8fa>
c0019325:	50                   	push   eax
c0019326:	50                   	push   eax
c0019327:	68 20 b6 02 c0       	push   0xc002b620
c001932c:	eb 5b                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001932e:	83 f8 0b             	cmp    eax,0xb
c0019331:	75 09                	jne    c001933c <CPU::detectFeatures()+0x908>
c0019333:	50                   	push   eax
c0019334:	50                   	push   eax
c0019335:	68 28 b6 02 c0       	push   0xc002b628
c001933a:	eb 4d                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001933c:	83 f8 08             	cmp    eax,0x8
c001933f:	75 09                	jne    c001934a <CPU::detectFeatures()+0x916>
c0019341:	50                   	push   eax
c0019342:	50                   	push   eax
c0019343:	68 31 b6 02 c0       	push   0xc002b631
c0019348:	eb 3f                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c001934a:	83 f8 09             	cmp    eax,0x9
c001934d:	75 09                	jne    c0019358 <CPU::detectFeatures()+0x924>
c001934f:	50                   	push   eax
c0019350:	50                   	push   eax
c0019351:	68 39 b6 02 c0       	push   0xc002b639
c0019356:	eb 31                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019358:	83 f8 05             	cmp    eax,0x5
c001935b:	75 09                	jne    c0019366 <CPU::detectFeatures()+0x932>
c001935d:	50                   	push   eax
c001935e:	50                   	push   eax
c001935f:	68 41 b6 02 c0       	push   0xc002b641
c0019364:	eb 23                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019366:	83 f8 0c             	cmp    eax,0xc
c0019369:	75 09                	jne    c0019374 <CPU::detectFeatures()+0x940>
c001936b:	55                   	push   ebp
c001936c:	55                   	push   ebp
c001936d:	68 4f b6 02 c0       	push   0xc002b64f
c0019372:	eb 15                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019374:	83 f8 0d             	cmp    eax,0xd
c0019377:	75 09                	jne    c0019382 <CPU::detectFeatures()+0x94e>
c0019379:	57                   	push   edi
c001937a:	57                   	push   edi
c001937b:	68 5a b6 02 c0       	push   0xc002b65a
c0019380:	eb 07                	jmp    c0019389 <CPU::detectFeatures()+0x955>
c0019382:	56                   	push   esi
c0019383:	56                   	push   esi
c0019384:	68 6e b6 02 c0       	push   0xc002b66e
c0019389:	53                   	push   ebx
c001938a:	e8 2f aa ff ff       	call   c0013dbe <Device::setName(char const*)>
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	e9 80 00 00 00       	jmp    c0019417 <CPU::detectFeatures()+0x9e3>
c0019397:	51                   	push   ecx
c0019398:	51                   	push   ecx
c0019399:	68 ba b4 02 c0       	push   0xc002b4ba
c001939e:	55                   	push   ebp
c001939f:	e8 68 74 fe ff       	call   c000080c <strcpy>
c00193a4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193ae:	e8 fb 6e fe ff       	call   c00002ae <is486>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	85 c0                	test   eax,eax
c00193b8:	74 2b                	je     c00193e5 <CPU::detectFeatures()+0x9b1>
c00193ba:	52                   	push   edx
c00193bb:	52                   	push   edx
c00193bc:	68 7a b6 02 c0       	push   0xc002b67a
c00193c1:	53                   	push   ebx
c00193c2:	e8 f7 a9 ff ff       	call   c0013dbe <Device::setName(char const*)>
c00193c7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193ce:	0f 20 c0             	mov    eax,cr0
c00193d1:	83 e0 14             	and    eax,0x14
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	83 f8 04             	cmp    eax,0x4
c00193da:	75 1f                	jne    c00193fb <CPU::detectFeatures()+0x9c7>
c00193dc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00193e3:	eb 32                	jmp    c0019417 <CPU::detectFeatures()+0x9e3>
c00193e5:	50                   	push   eax
c00193e6:	50                   	push   eax
c00193e7:	68 85 b6 02 c0       	push   0xc002b685
c00193ec:	53                   	push   ebx
c00193ed:	e8 cc a9 ff ff       	call   c0013dbe <Device::setName(char const*)>
c00193f2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00193f9:	eb d3                	jmp    c00193ce <CPU::detectFeatures()+0x99a>
c00193fb:	e8 89 6e fe ff       	call   c0000289 <hasLegacyFPU>
c0019400:	83 e0 01             	and    eax,0x1
c0019403:	8d 14 00             	lea    edx,[eax+eax*1]
c0019406:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001940c:	83 e0 fd             	and    eax,0xfffffffd
c001940f:	09 d0                	or     eax,edx
c0019411:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019417:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001941e:	83 c4 4c             	add    esp,0x4c
c0019421:	5b                   	pop    ebx
c0019422:	5e                   	pop    esi
c0019423:	5f                   	pop    edi
c0019424:	5d                   	pop    ebp
c0019425:	c3                   	ret    

c0019426 <CPU::setupSMEP()>:
c0019426:	0f 20 e0             	mov    eax,cr4
c0019429:	0d 00 00 10 00       	or     eax,0x100000
c001942e:	0f 22 e0             	mov    cr4,eax
c0019431:	c3                   	ret    

c0019432 <CPU::setupUMIP()>:
c0019432:	0f 20 e0             	mov    eax,cr4
c0019435:	80 cc 08             	or     ah,0x8
c0019438:	0f 22 e0             	mov    cr4,eax
c001943b:	c3                   	ret    

c001943c <CPU::setupTSC()>:
c001943c:	0f 20 e0             	mov    eax,cr4
c001943f:	83 c8 04             	or     eax,0x4
c0019442:	0f 22 e0             	mov    cr4,eax
c0019445:	c3                   	ret    

c0019446 <CPU::setupLargePages()>:
c0019446:	0f 20 e0             	mov    eax,cr4
c0019449:	83 c8 10             	or     eax,0x10
c001944c:	0f 22 e0             	mov    cr4,eax
c001944f:	c3                   	ret    

c0019450 <CPU::setupPAT()>:
c0019450:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0019455:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001945c:	74 2c                	je     c001948a <CPU::setupPAT()+0x3a>
c001945e:	53                   	push   ebx
c001945f:	83 ec 10             	sub    esp,0x10
c0019462:	68 77 02 00 00       	push   0x277
c0019467:	50                   	push   eax
c0019468:	e8 d3 56 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001946d:	83 e2 f8             	and    edx,0xfffffff8
c0019470:	83 ca 01             	or     edx,0x1
c0019473:	52                   	push   edx
c0019474:	50                   	push   eax
c0019475:	68 77 02 00 00       	push   0x277
c001947a:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0019480:	e8 e7 56 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019485:	83 c4 28             	add    esp,0x28
c0019488:	5b                   	pop    ebx
c0019489:	c3                   	ret    
c001948a:	c3                   	ret    
c001948b:	90                   	nop

c001948c <CPU::setupMTRR()>:
c001948c:	c3                   	ret    
c001948d:	90                   	nop

c001948e <CPU::setupGlobalPages()>:
c001948e:	0f 20 e0             	mov    eax,cr4
c0019491:	0c 80                	or     al,0x80
c0019493:	0f 22 e0             	mov    cr4,eax
c0019496:	c3                   	ret    
c0019497:	90                   	nop

c0019498 <CPU::allowUsermodeDataAccess()>:
c0019498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001949c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00194a3:	74 03                	je     c00194a8 <CPU::allowUsermodeDataAccess()+0x10>
c00194a5:	0f 01 cb             	stac   
c00194a8:	c3                   	ret    
c00194a9:	90                   	nop

c00194aa <CPU::prohibitUsermodeDataAccess()>:
c00194aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194ae:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00194b5:	74 03                	je     c00194ba <CPU::prohibitUsermodeDataAccess()+0x10>
c00194b7:	0f 01 ca             	clac   
c00194ba:	c3                   	ret    
c00194bb:	90                   	nop

c00194bc <CPU::setupSMAP()>:
c00194bc:	0f 20 e0             	mov    eax,cr4
c00194bf:	0d 00 00 20 00       	or     eax,0x200000
c00194c4:	0f 22 e0             	mov    cr4,eax
c00194c7:	eb e1                	jmp    c00194aa <CPU::prohibitUsermodeDataAccess()>
c00194c9:	90                   	nop

c00194ca <CPU::setupFeatures()>:
c00194ca:	83 ec 0c             	sub    esp,0xc
c00194cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194d1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00194d8:	74 07                	je     c00194e1 <CPU::setupFeatures()+0x17>
c00194da:	52                   	push   edx
c00194db:	e8 46 ff ff ff       	call   c0019426 <CPU::setupSMEP()>
c00194e0:	58                   	pop    eax
c00194e1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00194e8:	74 07                	je     c00194f1 <CPU::setupFeatures()+0x27>
c00194ea:	52                   	push   edx
c00194eb:	e8 cc ff ff ff       	call   c00194bc <CPU::setupSMAP()>
c00194f0:	58                   	pop    eax
c00194f1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00194f8:	74 07                	je     c0019501 <CPU::setupFeatures()+0x37>
c00194fa:	52                   	push   edx
c00194fb:	e8 32 ff ff ff       	call   c0019432 <CPU::setupUMIP()>
c0019500:	58                   	pop    eax
c0019501:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019508:	74 07                	je     c0019511 <CPU::setupFeatures()+0x47>
c001950a:	52                   	push   edx
c001950b:	e8 2c ff ff ff       	call   c001943c <CPU::setupTSC()>
c0019510:	58                   	pop    eax
c0019511:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019518:	74 07                	je     c0019521 <CPU::setupFeatures()+0x57>
c001951a:	52                   	push   edx
c001951b:	e8 26 ff ff ff       	call   c0019446 <CPU::setupLargePages()>
c0019520:	59                   	pop    ecx
c0019521:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019528:	74 07                	je     c0019531 <CPU::setupFeatures()+0x67>
c001952a:	52                   	push   edx
c001952b:	e8 5e ff ff ff       	call   c001948e <CPU::setupGlobalPages()>
c0019530:	58                   	pop    eax
c0019531:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019538:	74 0c                	je     c0019546 <CPU::setupFeatures()+0x7c>
c001953a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001953e:	83 c4 0c             	add    esp,0xc
c0019541:	e9 0a ff ff ff       	jmp    c0019450 <CPU::setupPAT()>
c0019546:	83 c4 0c             	add    esp,0xc
c0019549:	c3                   	ret    

c001954a <CPU::open(int, int, void*)>:
c001954a:	57                   	push   edi
c001954b:	56                   	push   esi
c001954c:	53                   	push   ebx
c001954d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019551:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019555:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001955b:	83 ec 0c             	sub    esp,0xc
c001955e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019564:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001956a:	50                   	push   eax
c001956b:	e8 be 58 ff ff       	call   c000ee2e <GDT::setup()>
c0019570:	83 c4 0c             	add    esp,0xc
c0019573:	6a 00                	push   0x0
c0019575:	68 ef be ad de       	push   0xdeadbeef
c001957a:	57                   	push   edi
c001957b:	e8 24 76 ff ff       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c0019580:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019583:	e8 fc 75 ff ff       	call   c0010b84 <TSS::flush()>
c0019588:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001958e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019591:	e8 fc 5a ff ff       	call   c000f092 <IDT::setup()>
c0019596:	b8 00 04 00 00       	mov    eax,0x400
c001959b:	0f 23 f8             	mov    db7,eax
c001959e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00195a8:	e8 e8 63 ff ff       	call   c000f995 <Phys::allocatePage()>
c00195ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00195b3:	89 30                	mov    DWORD PTR [eax],esi
c00195b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00195bb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00195be:	58                   	pop    eax
c00195bf:	5a                   	pop    edx
c00195c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195ca:	e8 8b 87 ff ff       	call   c0011d5a <VAS::setCPUSpecific(unsigned long)>
c00195cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195d2:	e8 5d f4 ff ff       	call   c0018a34 <CPU::detectFeatures()>
c00195d7:	e8 35 bc ff ff       	call   c0015211 <setupInterruptController()>
c00195dc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00195e2:	a1 c0 da 02 c0       	mov    eax,ds:0xc002dac0
c00195e7:	83 e0 10             	and    eax,0x10
c00195ea:	83 f8 01             	cmp    eax,0x1
c00195ed:	19 c0                	sbb    eax,eax
c00195ef:	83 e0 46             	and    eax,0x46
c00195f2:	83 c0 1e             	add    eax,0x1e
c00195f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00195f8:	e8 02 d2 ff ff       	call   c00167ff <setupTimer(int)>
c00195fd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019603:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019606:	e8 bf fe ff ff       	call   c00194ca <CPU::setupFeatures()>
c001960b:	83 c4 10             	add    esp,0x10
c001960e:	31 c0                	xor    eax,eax
c0019610:	5b                   	pop    ebx
c0019611:	5e                   	pop    esi
c0019612:	5f                   	pop    edi
c0019613:	c3                   	ret    

c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019614:	57                   	push   edi
c0019615:	56                   	push   esi
c0019616:	53                   	push   ebx
c0019617:	51                   	push   ecx
c0019618:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001961c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001961f:	0f 02 c0             	lar    eax,ax
c0019622:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019625:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019629:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001962c:	88 ca                	mov    dl,cl
c001962e:	c0 ea 06             	shr    dl,0x6
c0019631:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019635:	89 ca                	mov    edx,ecx
c0019637:	66 c1 ea 03          	shr    dx,0x3
c001963b:	83 e2 07             	and    edx,0x7
c001963e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019643:	88 17                	mov    BYTE PTR [edi],dl
c0019645:	0f 84 a6 01 00 00    	je     c00197f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001964b:	83 e1 07             	and    ecx,0x7
c001964e:	80 f9 04             	cmp    cl,0x4
c0019651:	0f 84 98 00 00 00    	je     c00196ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019657:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001965c:	0f 95 c0             	setne  al
c001965f:	80 f9 05             	cmp    cl,0x5
c0019662:	0f 95 c2             	setne  dl
c0019665:	08 c2                	or     dl,al
c0019667:	74 79                	je     c00196e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019669:	84 c9                	test   cl,cl
c001966b:	75 05                	jne    c0019672 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001966d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019670:	eb 3c                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019672:	80 f9 01             	cmp    cl,0x1
c0019675:	75 05                	jne    c001967c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019677:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001967a:	eb 32                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001967c:	80 f9 02             	cmp    cl,0x2
c001967f:	75 05                	jne    c0019686 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019681:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019684:	eb 28                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019686:	31 c0                	xor    eax,eax
c0019688:	80 f9 03             	cmp    cl,0x3
c001968b:	75 05                	jne    c0019692 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001968d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019690:	eb 1c                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019692:	80 f9 05             	cmp    cl,0x5
c0019695:	75 05                	jne    c001969c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019697:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001969a:	eb 12                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001969c:	80 f9 06             	cmp    cl,0x6
c001969f:	75 05                	jne    c00196a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00196a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196a4:	eb 08                	jmp    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196a6:	80 f9 07             	cmp    cl,0x7
c00196a9:	75 03                	jne    c00196ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196ab:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196ae:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196b3:	75 10                	jne    c00196c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00196b5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00196b9:	b9 03 00 00 00       	mov    ecx,0x3
c00196be:	01 d0                	add    eax,edx
c00196c0:	e9 37 01 00 00       	jmp    c00197fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196c5:	b9 02 00 00 00       	mov    ecx,0x2
c00196ca:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00196cf:	0f 85 27 01 00 00    	jne    c00197fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196d5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00196d8:	b9 06 00 00 00       	mov    ecx,0x6
c00196dd:	e9 1a 01 00 00       	jmp    c00197fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196e2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00196e5:	b9 06 00 00 00       	mov    ecx,0x6
c00196ea:	e9 0f 01 00 00       	jmp    c00197fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196ef:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00196f2:	88 ca                	mov    dl,cl
c00196f4:	c0 ea 06             	shr    dl,0x6
c00196f7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00196fb:	89 ca                	mov    edx,ecx
c00196fd:	66 c1 ea 03          	shr    dx,0x3
c0019701:	83 e2 07             	and    edx,0x7
c0019704:	80 e1 07             	and    cl,0x7
c0019707:	75 05                	jne    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019709:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001970c:	eb 4c                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001970e:	80 f9 01             	cmp    cl,0x1
c0019711:	75 05                	jne    c0019718 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019713:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019716:	eb 42                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019718:	80 f9 02             	cmp    cl,0x2
c001971b:	75 05                	jne    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001971d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019720:	eb 38                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019722:	80 f9 03             	cmp    cl,0x3
c0019725:	75 05                	jne    c001972c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019727:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001972a:	eb 2e                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001972c:	80 f9 04             	cmp    cl,0x4
c001972f:	75 12                	jne    c0019743 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019731:	f6 c4 60             	test   ah,0x60
c0019734:	75 08                	jne    c001973e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019736:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019739:	8d 78 14             	lea    edi,[eax+0x14]
c001973c:	eb 1c                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001973e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019741:	eb 17                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019743:	80 f9 05             	cmp    cl,0x5
c0019746:	75 05                	jne    c001974d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019748:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001974b:	eb 0d                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001974d:	80 f9 06             	cmp    cl,0x6
c0019750:	75 05                	jne    c0019757 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019752:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019755:	eb 03                	jmp    c001975a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019757:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001975a:	84 d2                	test   dl,dl
c001975c:	75 05                	jne    c0019763 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001975e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019761:	eb 3c                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019763:	80 fa 01             	cmp    dl,0x1
c0019766:	75 05                	jne    c001976d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019768:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001976b:	eb 32                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001976d:	80 fa 02             	cmp    dl,0x2
c0019770:	75 05                	jne    c0019777 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019772:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019775:	eb 28                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019777:	80 fa 03             	cmp    dl,0x3
c001977a:	75 05                	jne    c0019781 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001977c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001977f:	eb 1e                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019781:	31 c0                	xor    eax,eax
c0019783:	80 fa 04             	cmp    dl,0x4
c0019786:	74 17                	je     c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019788:	80 fa 05             	cmp    dl,0x5
c001978b:	75 05                	jne    c0019792 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001978d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019790:	eb 0d                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019792:	80 fa 06             	cmp    dl,0x6
c0019795:	75 05                	jne    c001979c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019797:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001979a:	eb 03                	jmp    c001979f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001979c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001979f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00197a4:	0f 94 c2             	sete   dl
c00197a7:	80 f9 05             	cmp    cl,0x5
c00197aa:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00197ae:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00197b3:	d3 e0                	shl    eax,cl
c00197b5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00197b9:	74 0a                	je     c00197c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00197bb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00197be:	b9 07 00 00 00       	mov    ecx,0x7
c00197c3:	eb 37                	jmp    c00197fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197c5:	01 f8                	add    eax,edi
c00197c7:	b9 03 00 00 00       	mov    ecx,0x3
c00197cc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00197d1:	74 2b                	je     c00197fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197d3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00197d8:	75 0d                	jne    c00197e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00197da:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00197de:	01 c8                	add    eax,ecx
c00197e0:	b9 04 00 00 00       	mov    ecx,0x4
c00197e5:	eb 17                	jmp    c00197fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197e7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00197ea:	b9 07 00 00 00       	mov    ecx,0x7
c00197ef:	eb 0d                	jmp    c00197fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197f1:	b9 02 00 00 00       	mov    ecx,0x2
c00197f6:	b2 01                	mov    dl,0x1
c00197f8:	31 c0                	xor    eax,eax
c00197fa:	eb 02                	jmp    c00197fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197fc:	31 d2                	xor    edx,edx
c00197fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019802:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019808:	88 11                	mov    BYTE PTR [ecx],dl
c001980a:	5a                   	pop    edx
c001980b:	5b                   	pop    ebx
c001980c:	5e                   	pop    esi
c001980d:	5f                   	pop    edi
c001980e:	c3                   	ret    

c001980f <Krnl::smpEntry()>:
c001980f:	eb fe                	jmp    c001980f <Krnl::smpEntry()>

c0019811 <Krnl::startCPU(int)>:
c0019811:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0019816:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001981d:	0f 84 36 01 00 00    	je     c0019959 <Krnl::startCPU(int)+0x148>
c0019823:	53                   	push   ebx
c0019824:	83 ec 10             	sub    esp,0x10
c0019827:	fa                   	cli    
c0019828:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001982e:	6a 1b                	push   0x1b
c0019830:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c0019836:	e8 05 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001983b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019840:	89 c3                	mov    ebx,eax
c0019842:	58                   	pop    eax
c0019843:	5a                   	pop    edx
c0019844:	53                   	push   ebx
c0019845:	68 bc b6 02 c0       	push   0xc002b6bc
c001984a:	e8 40 8f ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001984f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001985d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019867:	c1 e0 18             	shl    eax,0x18
c001986a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019879:	09 c2                	or     edx,eax
c001987b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019881:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019887:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001988d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019893:	80 cd c5             	or     ch,0xc5
c0019896:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001989c:	f3 90                	pause  
c001989e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198a0:	0f ba e1 0c          	bt     ecx,0xc
c00198a4:	72 f6                	jb     c001989c <Krnl::startCPU(int)+0x8b>
c00198a6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198ac:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198b2:	09 c1                	or     ecx,eax
c00198b4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00198ba:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00198c0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00198c6:	80 cd 85             	or     ch,0x85
c00198c9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00198cf:	f3 90                	pause  
c00198d1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198d3:	0f ba e1 0c          	bt     ecx,0xc
c00198d7:	72 f6                	jb     c00198cf <Krnl::startCPU(int)+0xbe>
c00198d9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198e3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198e9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198ef:	09 c1                	or     ecx,eax
c00198f1:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00198f7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00198fd:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019903:	81 c9 02 06 00 00    	or     ecx,0x602
c0019909:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001990f:	f3 90                	pause  
c0019911:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019913:	0f ba e1 0c          	bt     ecx,0xc
c0019917:	72 f6                	jb     c001990f <Krnl::startCPU(int)+0xfe>
c0019919:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019923:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019929:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001992f:	09 c8                	or     eax,ecx
c0019931:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019937:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001993d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019942:	0d 02 06 00 00       	or     eax,0x602
c0019947:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001994d:	f3 90                	pause  
c001994f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019951:	0f ba e0 0c          	bt     eax,0xc
c0019955:	72 f6                	jb     c001994d <Krnl::startCPU(int)+0x13c>
c0019957:	eb fe                	jmp    c0019957 <Krnl::startCPU(int)+0x146>
c0019959:	c3                   	ret    

c001995a <Krnl::startCPUs()>:
c001995a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001995f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019965:	88 c2                	mov    dl,al
c0019967:	83 e2 0a             	and    edx,0xa
c001996a:	80 fa 0a             	cmp    dl,0xa
c001996d:	75 09                	jne    c0019978 <Krnl::startCPUs()+0x1e>
c001996f:	a8 01                	test   al,0x1
c0019971:	74 05                	je     c0019978 <Krnl::startCPUs()+0x1e>
c0019973:	e9 23 68 fe ff       	jmp    c000019b <prepareTramp>
c0019978:	c3                   	ret    
c0019979:	90                   	nop

c001997a <EnvVarContainer::getEnv(char const*)>:
c001997a:	57                   	push   edi
c001997b:	56                   	push   esi
c001997c:	53                   	push   ebx
c001997d:	31 db                	xor    ebx,ebx
c001997f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019983:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019985:	7e 2b                	jle    c00199b2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019987:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001998e:	50                   	push   eax
c001998f:	50                   	push   eax
c0019990:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019993:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019996:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001999a:	e8 f9 6e fe ff       	call   c0000898 <strcmp>
c001999f:	83 c4 10             	add    esp,0x10
c00199a2:	85 c0                	test   eax,eax
c00199a4:	75 09                	jne    c00199af <EnvVarContainer::getEnv(char const*)+0x35>
c00199a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00199a9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00199ad:	eb 05                	jmp    c00199b4 <EnvVarContainer::getEnv(char const*)+0x3a>
c00199af:	43                   	inc    ebx
c00199b0:	eb d1                	jmp    c0019983 <EnvVarContainer::getEnv(char const*)+0x9>
c00199b2:	31 c0                	xor    eax,eax
c00199b4:	5b                   	pop    ebx
c00199b5:	5e                   	pop    esi
c00199b6:	5f                   	pop    edi
c00199b7:	c3                   	ret    

c00199b8 <EnvVarContainer::setEnv(char const*, char const*)>:
c00199b8:	55                   	push   ebp
c00199b9:	57                   	push   edi
c00199ba:	56                   	push   esi
c00199bb:	53                   	push   ebx
c00199bc:	83 ec 28             	sub    esp,0x28
c00199bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00199c3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00199c7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00199cb:	56                   	push   esi
c00199cc:	e8 9b 6d fe ff       	call   c000076c <strlen>
c00199d1:	40                   	inc    eax
c00199d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d5:	e8 bf 5b ff ff       	call   c000f599 <malloc>
c00199da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199e1:	e8 86 6d fe ff       	call   c000076c <strlen>
c00199e6:	40                   	inc    eax
c00199e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ea:	e8 aa 5b ff ff       	call   c000f599 <malloc>
c00199ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199f6:	e8 71 6d fe ff       	call   c000076c <strlen>
c00199fb:	83 c4 0c             	add    esp,0xc
c00199fe:	40                   	inc    eax
c00199ff:	50                   	push   eax
c0019a00:	6a 00                	push   0x0
c0019a02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019a06:	e8 45 6d fe ff       	call   c0000750 <memset>
c0019a0b:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a0e:	e8 59 6d fe ff       	call   c000076c <strlen>
c0019a13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019a17:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a1f:	89 de                	mov    esi,ebx
c0019a21:	e8 46 6d fe ff       	call   c000076c <strlen>
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	40                   	inc    eax
c0019a2a:	50                   	push   eax
c0019a2b:	6a 00                	push   0x0
c0019a2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a31:	e8 1a 6d fe ff       	call   c0000750 <memset>
c0019a36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a39:	e8 2e 6d fe ff       	call   c000076c <strlen>
c0019a3e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019a42:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a4a:	40                   	inc    eax
c0019a4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a4e:	c1 e0 03             	shl    eax,0x3
c0019a51:	5a                   	pop    edx
c0019a52:	59                   	pop    ecx
c0019a53:	50                   	push   eax
c0019a54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a57:	e8 29 5b ff ff       	call   c000f585 <realloc>
c0019a5c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a60:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a63:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a66:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a6a:	b9 08 00 00 00       	mov    ecx,0x8
c0019a6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a71:	83 c4 2c             	add    esp,0x2c
c0019a74:	5b                   	pop    ebx
c0019a75:	5e                   	pop    esi
c0019a76:	5f                   	pop    edi
c0019a77:	5d                   	pop    ebp
c0019a78:	c3                   	ret    
c0019a79:	90                   	nop

c0019a7a <EnvVarContainer::deleteEnv(char const*)>:
c0019a7a:	c3                   	ret    
c0019a7b:	90                   	nop

c0019a7c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019a7c:	55                   	push   ebp
c0019a7d:	57                   	push   edi
c0019a7e:	56                   	push   esi
c0019a7f:	53                   	push   ebx
c0019a80:	81 ec 38 01 00 00    	sub    esp,0x138
c0019a86:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019a8d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019a94:	68 14 01 00 00       	push   0x114
c0019a99:	e8 fb 5a ff ff       	call   c000f599 <malloc>
c0019a9e:	83 c4 0c             	add    esp,0xc
c0019aa1:	89 c3                	mov    ebx,eax
c0019aa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019aa6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019aad:	50                   	push   eax
c0019aae:	e8 3b 92 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c0019ab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ab6:	e8 05 95 ff ff       	call   c0012fc0 <File::exists()>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	84 c0                	test   al,al
c0019ac0:	75 31                	jne    c0019af3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019ac2:	50                   	push   eax
c0019ac3:	50                   	push   eax
c0019ac4:	6a 12                	push   0x12
c0019ac6:	53                   	push   ebx
c0019ac7:	e8 86 92 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c0019acc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ace:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019ad1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ad4:	e8 93 6c fe ff       	call   c000076c <strlen>
c0019ad9:	5a                   	pop    edx
c0019ada:	31 d2                	xor    edx,edx
c0019adc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ae0:	51                   	push   ecx
c0019ae1:	56                   	push   esi
c0019ae2:	52                   	push   edx
c0019ae3:	50                   	push   eax
c0019ae4:	53                   	push   ebx
c0019ae5:	ff d7                	call   edi
c0019ae7:	83 c4 14             	add    esp,0x14
c0019aea:	53                   	push   ebx
c0019aeb:	e8 c0 92 ff ff       	call   c0012db0 <File::close()>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	56                   	push   esi
c0019af4:	31 f6                	xor    esi,esi
c0019af6:	68 00 01 00 00       	push   0x100
c0019afb:	6a 00                	push   0x0
c0019afd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b01:	50                   	push   eax
c0019b02:	e8 49 6c fe ff       	call   c0000750 <memset>
c0019b07:	5f                   	pop    edi
c0019b08:	58                   	pop    eax
c0019b09:	6a 01                	push   0x1
c0019b0b:	53                   	push   ebx
c0019b0c:	e8 41 92 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b1c:	83 ec 0c             	sub    esp,0xc
c0019b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b21:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b25:	51                   	push   ecx
c0019b26:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019b2a:	52                   	push   edx
c0019b2b:	6a 00                	push   0x0
c0019b2d:	6a 01                	push   0x1
c0019b2f:	53                   	push   ebx
c0019b30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b33:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019b37:	83 c4 20             	add    esp,0x20
c0019b3a:	3c 0d                	cmp    al,0xd
c0019b3c:	0f 84 09 01 00 00    	je     c0019c4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b42:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019b47:	0f 84 ef 00 00 00    	je     c0019c3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b4d:	3c 0a                	cmp    al,0xa
c0019b4f:	74 13                	je     c0019b64 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b51:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b56:	74 0c                	je     c0019b64 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b58:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019b5e:	0f 8e d8 00 00 00    	jle    c0019c3c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b68:	83 ec 0c             	sub    esp,0xc
c0019b6b:	8d 78 01             	lea    edi,[eax+0x1]
c0019b6e:	57                   	push   edi
c0019b6f:	e8 25 5a ff ff       	call   c000f599 <malloc>
c0019b74:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019b78:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b7c:	8d 56 04             	lea    edx,[esi+0x4]
c0019b7f:	89 14 24             	mov    DWORD PTR [esp],edx
c0019b82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019b86:	e8 0e 5a ff ff       	call   c000f599 <malloc>
c0019b8b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b8f:	83 c4 0c             	add    esp,0xc
c0019b92:	57                   	push   edi
c0019b93:	6a 00                	push   0x0
c0019b95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b99:	e8 b2 6b fe ff       	call   c0000750 <memset>
c0019b9e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ba2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019ba6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019baa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bac:	83 c4 0c             	add    esp,0xc
c0019baf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb3:	52                   	push   edx
c0019bb4:	6a 00                	push   0x0
c0019bb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bba:	e8 91 6b fe ff       	call   c0000750 <memset>
c0019bbf:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019bc3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019bc7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019bca:	e8 9d 6b fe ff       	call   c000076c <strlen>
c0019bcf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019bd3:	89 c1                	mov    ecx,eax
c0019bd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019bda:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019bdd:	40                   	inc    eax
c0019bde:	83 c4 10             	add    esp,0x10
c0019be1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019be4:	85 d2                	test   edx,edx
c0019be6:	75 0c                	jne    c0019bf4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	6a 08                	push   0x8
c0019bed:	e8 a7 59 ff ff       	call   c000f599 <malloc>
c0019bf2:	eb 0c                	jmp    c0019c00 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019bf4:	c1 e0 03             	shl    eax,0x3
c0019bf7:	51                   	push   ecx
c0019bf8:	51                   	push   ecx
c0019bf9:	50                   	push   eax
c0019bfa:	52                   	push   edx
c0019bfb:	e8 85 59 ff ff       	call   c000f585 <realloc>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019c06:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c09:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019c0c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c10:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019c14:	b9 08 00 00 00       	mov    ecx,0x8
c0019c19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c1b:	31 f6                	xor    esi,esi
c0019c1d:	50                   	push   eax
c0019c1e:	68 00 01 00 00       	push   0x100
c0019c23:	6a 00                	push   0x0
c0019c25:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c29:	50                   	push   eax
c0019c2a:	e8 21 6b fe ff       	call   c0000750 <memset>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c3a:	eb 0f                	jmp    c0019c4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c3c:	3c 3d                	cmp    al,0x3d
c0019c3e:	74 07                	je     c0019c47 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019c40:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019c44:	46                   	inc    esi
c0019c45:	eb 04                	jmp    c0019c4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c47:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019c4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c50:	0f 85 c6 fe ff ff    	jne    c0019b1c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019c56:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c5c:	5b                   	pop    ebx
c0019c5d:	5e                   	pop    esi
c0019c5e:	5f                   	pop    edi
c0019c5f:	5d                   	pop    ebp
c0019c60:	c3                   	ret    
c0019c61:	90                   	nop

c0019c62 <EnvVarContainer::__loadSystem()>:
c0019c62:	83 ec 10             	sub    esp,0x10
c0019c65:	68 e0 cf 02 c0       	push   0xc002cfe0
c0019c6a:	68 cd b6 02 c0       	push   0xc002b6cd
c0019c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c73:	e8 04 fe ff ff       	call   c0019a7c <EnvVarContainer::loadFrom(char const*, char const*)>
c0019c78:	83 c4 1c             	add    esp,0x1c
c0019c7b:	c3                   	ret    

c0019c7c <EnvVarContainer::__loadUser()>:
c0019c7c:	c3                   	ret    
c0019c7d:	90                   	nop

c0019c7e <EnvVarContainer::EnvVarContainer(Process*)>:
c0019c7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c9e:	90                   	nop
c0019c9f:	c3                   	ret    

c0019ca0 <EnvVarContainer::~EnvVarContainer()>:
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019caa:	85 c0                	test   eax,eax
c0019cac:	74 1d                	je     c0019ccb <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cb4:	85 c0                	test   eax,eax
c0019cb6:	74 13                	je     c0019ccb <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019cbf:	83 ec 0c             	sub    esp,0xc
c0019cc2:	50                   	push   eax
c0019cc3:	e8 e1 58 ff ff       	call   c000f5a9 <free>
c0019cc8:	83 c4 10             	add    esp,0x10
c0019ccb:	90                   	nop
c0019ccc:	83 c4 0c             	add    esp,0xc
c0019ccf:	c3                   	ret    

c0019cd0 <Krnl::getEnv(Process*, char const*)>:
c0019cd0:	53                   	push   ebx
c0019cd1:	83 ec 08             	sub    esp,0x8
c0019cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019cdc:	39 05 f0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030ff0,eax
c0019ce2:	74 04                	je     c0019ce8 <Krnl::getEnv(Process*, char const*)+0x18>
c0019ce4:	85 c0                	test   eax,eax
c0019ce6:	75 0b                	jne    c0019cf3 <Krnl::getEnv(Process*, char const*)+0x23>
c0019ce8:	a1 d4 05 03 c0       	mov    eax,ds:0xc00305d4
c0019ced:	85 c0                	test   eax,eax
c0019cef:	75 19                	jne    c0019d0a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019cf1:	eb 27                	jmp    c0019d1a <Krnl::getEnv(Process*, char const*)+0x4a>
c0019cf3:	52                   	push   edx
c0019cf4:	52                   	push   edx
c0019cf5:	53                   	push   ebx
c0019cf6:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019cfc:	e8 79 fc ff ff       	call   c001997a <EnvVarContainer::getEnv(char const*)>
c0019d01:	83 c4 10             	add    esp,0x10
c0019d04:	85 c0                	test   eax,eax
c0019d06:	75 28                	jne    c0019d30 <Krnl::getEnv(Process*, char const*)+0x60>
c0019d08:	eb de                	jmp    c0019ce8 <Krnl::getEnv(Process*, char const*)+0x18>
c0019d0a:	52                   	push   edx
c0019d0b:	52                   	push   edx
c0019d0c:	53                   	push   ebx
c0019d0d:	50                   	push   eax
c0019d0e:	e8 67 fc ff ff       	call   c001997a <EnvVarContainer::getEnv(char const*)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	85 c0                	test   eax,eax
c0019d18:	75 16                	jne    c0019d30 <Krnl::getEnv(Process*, char const*)+0x60>
c0019d1a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019d1e:	a1 d8 05 03 c0       	mov    eax,ds:0xc00305d8
c0019d23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d27:	83 c4 08             	add    esp,0x8
c0019d2a:	5b                   	pop    ebx
c0019d2b:	e9 4a fc ff ff       	jmp    c001997a <EnvVarContainer::getEnv(char const*)>
c0019d30:	83 c4 08             	add    esp,0x8
c0019d33:	5b                   	pop    ebx
c0019d34:	c3                   	ret    

c0019d35 <Krnl::setEnvSystem(char const*, char const*)>:
c0019d35:	83 ec 10             	sub    esp,0x10
c0019d38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d40:	ff 35 d8 05 03 c0    	push   DWORD PTR ds:0xc00305d8
c0019d46:	e8 6d fc ff ff       	call   c00199b8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019d4b:	83 c4 1c             	add    esp,0x1c
c0019d4e:	c3                   	ret    

c0019d4f <Krnl::setEnvUser(char const*, char const*)>:
c0019d4f:	a1 d4 05 03 c0       	mov    eax,ds:0xc00305d4
c0019d54:	85 c0                	test   eax,eax
c0019d56:	74 15                	je     c0019d6d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019d58:	83 ec 10             	sub    esp,0x10
c0019d5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d63:	50                   	push   eax
c0019d64:	e8 4f fc ff ff       	call   c00199b8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019d69:	83 c4 1c             	add    esp,0x1c
c0019d6c:	c3                   	ret    
c0019d6d:	c3                   	ret    

c0019d6e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d72:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019d78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d7c:	e9 37 fc ff ff       	jmp    c00199b8 <EnvVarContainer::setEnv(char const*, char const*)>

c0019d81 <Krnl::deleteEnvSystem(char const*)>:
c0019d81:	c3                   	ret    

c0019d82 <Krnl::deleteEnvUser(char const*)>:
c0019d82:	c3                   	ret    

c0019d83 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019d83:	c3                   	ret    

c0019d84 <Krnl::newProcessEnv(Process*)>:
c0019d84:	83 ec 28             	sub    esp,0x28
c0019d87:	6a 0c                	push   0xc
c0019d89:	e8 0b 58 ff ff       	call   c000f599 <malloc>
c0019d8e:	5a                   	pop    edx
c0019d8f:	59                   	pop    ecx
c0019d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d94:	50                   	push   eax
c0019d95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d99:	e8 e0 fe ff ff       	call   c0019c7e <EnvVarContainer::EnvVarContainer(Process*)>
c0019d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da2:	83 c4 2c             	add    esp,0x2c
c0019da5:	c3                   	ret    

c0019da6 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019da6:	57                   	push   edi
c0019da7:	56                   	push   esi
c0019da8:	53                   	push   ebx
c0019da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dad:	83 ec 0c             	sub    esp,0xc
c0019db0:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019db6:	6a 0c                	push   0xc
c0019db8:	e8 dc 57 ff ff       	call   c000f599 <malloc>
c0019dbd:	89 c3                	mov    ebx,eax
c0019dbf:	58                   	pop    eax
c0019dc0:	5a                   	pop    edx
c0019dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dc5:	53                   	push   ebx
c0019dc6:	e8 b3 fe ff ff       	call   c0019c7e <EnvVarContainer::EnvVarContainer(Process*)>
c0019dcb:	8b 07                	mov    eax,DWORD PTR [edi]
c0019dcd:	89 03                	mov    DWORD PTR [ebx],eax
c0019dcf:	c1 e0 03             	shl    eax,0x3
c0019dd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd5:	e8 bf 57 ff ff       	call   c000f599 <malloc>
c0019dda:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ddd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019ddf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019de2:	c1 e1 03             	shl    ecx,0x3
c0019de5:	89 c7                	mov    edi,eax
c0019de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	89 d8                	mov    eax,ebx
c0019dee:	5b                   	pop    ebx
c0019def:	5e                   	pop    esi
c0019df0:	5f                   	pop    edi
c0019df1:	c3                   	ret    

c0019df2 <Krnl::loadSystemEnv()>:
c0019df2:	53                   	push   ebx
c0019df3:	83 ec 14             	sub    esp,0x14
c0019df6:	6a 0c                	push   0xc
c0019df8:	e8 9c 57 ff ff       	call   c000f599 <malloc>
c0019dfd:	89 c3                	mov    ebx,eax
c0019dff:	58                   	pop    eax
c0019e00:	5a                   	pop    edx
c0019e01:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c0019e07:	53                   	push   ebx
c0019e08:	e8 71 fe ff ff       	call   c0019c7e <EnvVarContainer::EnvVarContainer(Process*)>
c0019e0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e10:	89 1d d8 05 03 c0    	mov    DWORD PTR ds:0xc00305d8,ebx
c0019e16:	e8 47 fe ff ff       	call   c0019c62 <EnvVarContainer::__loadSystem()>
c0019e1b:	83 c4 18             	add    esp,0x18
c0019e1e:	5b                   	pop    ebx
c0019e1f:	c3                   	ret    

c0019e20 <Krnl::loadUserEnv()>:
c0019e20:	53                   	push   ebx
c0019e21:	83 ec 14             	sub    esp,0x14
c0019e24:	6a 0c                	push   0xc
c0019e26:	e8 6e 57 ff ff       	call   c000f599 <malloc>
c0019e2b:	89 c3                	mov    ebx,eax
c0019e2d:	58                   	pop    eax
c0019e2e:	5a                   	pop    edx
c0019e2f:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c0019e35:	53                   	push   ebx
c0019e36:	e8 43 fe ff ff       	call   c0019c7e <EnvVarContainer::EnvVarContainer(Process*)>
c0019e3b:	89 1d d4 05 03 c0    	mov    DWORD PTR ds:0xc00305d4,ebx
c0019e41:	83 c4 18             	add    esp,0x18
c0019e44:	5b                   	pop    ebx
c0019e45:	c3                   	ret    

c0019e46 <Krnl::flushEnv()>:
c0019e46:	c3                   	ret    

c0019e47 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019e47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e4b:	8b 15 d4 05 03 c0    	mov    edx,DWORD PTR ds:0xc00305d4
c0019e51:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e57:	a1 d8 05 03 c0       	mov    eax,ds:0xc00305d8
c0019e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e5e:	03 01                	add    eax,DWORD PTR [ecx]
c0019e60:	85 d2                	test   edx,edx
c0019e62:	74 02                	je     c0019e66 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019e64:	03 02                	add    eax,DWORD PTR [edx]
c0019e66:	c3                   	ret    

c0019e67 <Krnl::getProcessEnvPair(Process*, int)>:
c0019e67:	57                   	push   edi
c0019e68:	56                   	push   esi
c0019e69:	8b 35 d4 05 03 c0    	mov    esi,DWORD PTR ds:0xc00305d4
c0019e6f:	53                   	push   ebx
c0019e70:	85 f6                	test   esi,esi
c0019e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e7a:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e84:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019e86:	75 16                	jne    c0019e9e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019e88:	39 c2                	cmp    edx,eax
c0019e8a:	7c 16                	jl     c0019ea2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e8c:	8b 0d d8 05 03 c0    	mov    ecx,DWORD PTR ds:0xc00305d8
c0019e92:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019e94:	01 c6                	add    esi,eax
c0019e96:	39 d6                	cmp    esi,edx
c0019e98:	7e 3c                	jle    c0019ed6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e9a:	29 c2                	sub    edx,eax
c0019e9c:	eb 04                	jmp    c0019ea2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e9e:	39 c2                	cmp    edx,eax
c0019ea0:	7d 05                	jge    c0019ea7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019ea2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019ea5:	eb 20                	jmp    c0019ec7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019ea7:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019ea9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019eac:	39 d1                	cmp    ecx,edx
c0019eae:	7e 04                	jle    c0019eb4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019eb0:	29 c2                	sub    edx,eax
c0019eb2:	eb 10                	jmp    c0019ec4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019eb4:	8b 35 d8 05 03 c0    	mov    esi,DWORD PTR ds:0xc00305d8
c0019eba:	03 0e                	add    ecx,DWORD PTR [esi]
c0019ebc:	39 d1                	cmp    ecx,edx
c0019ebe:	7e 16                	jle    c0019ed6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019ec0:	29 c2                	sub    edx,eax
c0019ec2:	29 fa                	sub    edx,edi
c0019ec4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ec7:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019eca:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ecc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019ecf:	89 03                	mov    DWORD PTR [ebx],eax
c0019ed1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019ed4:	eb 1d                	jmp    c0019ef3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019ed6:	83 ec 0c             	sub    esp,0xc
c0019ed9:	68 ef b6 02 c0       	push   0xc002b6ef
c0019ede:	e8 18 00 00 00       	call   c0019efb <Krnl::panic(char const*)>
c0019ee3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019ee9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019ef0:	83 c4 10             	add    esp,0x10
c0019ef3:	89 d8                	mov    eax,ebx
c0019ef5:	5b                   	pop    ebx
c0019ef6:	5e                   	pop    esi
c0019ef7:	5f                   	pop    edi
c0019ef8:	c2 04 00             	ret    0x4

c0019efb <Krnl::panic(char const*)>:
c0019efb:	55                   	push   ebp
c0019efc:	89 e5                	mov    ebp,esp
c0019efe:	53                   	push   ebx
c0019eff:	83 ec 10             	sub    esp,0x10
c0019f02:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019f05:	fa                   	cli    
c0019f06:	c6 05 e4 05 03 c0 01 	mov    BYTE PTR ds:0xc00305e4,0x1
c0019f0d:	53                   	push   ebx
c0019f0e:	e8 e0 56 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019f13:	58                   	pop    eax
c0019f14:	c6 05 e0 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c9e0,0x0
c0019f1b:	5a                   	pop    edx
c0019f1c:	53                   	push   ebx
c0019f1d:	68 09 b7 02 c0       	push   0xc002b709
c0019f22:	e8 68 88 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0019f27:	59                   	pop    ecx
c0019f28:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f33:	e8 1b 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019f38:	83 c4 0c             	add    esp,0xc
c0019f3b:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f40:	6a 01                	push   0x1
c0019f42:	6a 0f                	push   0xf
c0019f44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f4a:	e8 63 62 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f4f:	58                   	pop    eax
c0019f50:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5b:	e8 74 67 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019f60:	58                   	pop    eax
c0019f61:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f66:	5a                   	pop    edx
c0019f67:	68 22 b7 02 c0       	push   0xc002b722
c0019f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f72:	e8 e9 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f77:	59                   	pop    ecx
c0019f78:	58                   	pop    eax
c0019f79:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f7e:	68 c8 b7 02 c0       	push   0xc002b7c8
c0019f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f89:	e8 d2 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f8e:	58                   	pop    eax
c0019f8f:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019f94:	5a                   	pop    edx
c0019f95:	68 3e b7 02 c0       	push   0xc002b73e
c0019f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa0:	e8 bb 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa5:	59                   	pop    ecx
c0019fa6:	58                   	pop    eax
c0019fa7:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019fac:	53                   	push   ebx
c0019fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb3:	e8 a8 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fb8:	58                   	pop    eax
c0019fb9:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019fbe:	5a                   	pop    edx
c0019fbf:	68 5e b7 02 c0       	push   0xc002b75e
c0019fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fca:	e8 91 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fcf:	a1 e0 05 03 c0       	mov    eax,ds:0xc00305e0
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	85 c0                	test   eax,eax
c0019fd9:	74 02                	je     c0019fdd <Krnl::panic(char const*)+0xe2>
c0019fdb:	ff d0                	call   eax
c0019fdd:	83 ec 0c             	sub    esp,0xc
c0019fe0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fe3:	e8 8c 30 00 00       	call   c001d074 <Thr::getDriverNameFromAddress(unsigned long)>
c0019fe8:	83 c4 10             	add    esp,0x10
c0019feb:	89 c3                	mov    ebx,eax
c0019fed:	85 c0                	test   eax,eax
c0019fef:	0f 84 4e 02 00 00    	je     c001a243 <Krnl::panic(char const*)+0x348>
c0019ff5:	83 ec 08             	sub    esp,0x8
c0019ff8:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c0019ffd:	68 04 b8 02 c0       	push   0xc002b804
c001a002:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a008:	e8 53 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a00d:	58                   	pop    eax
c001a00e:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a013:	5a                   	pop    edx
c001a014:	68 3e b7 02 c0       	push   0xc002b73e
c001a019:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01f:	e8 3c 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a024:	59                   	pop    ecx
c001a025:	58                   	pop    eax
c001a026:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a02b:	53                   	push   ebx
c001a02c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a032:	e8 29 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a037:	83 c4 10             	add    esp,0x10
c001a03a:	83 ec 08             	sub    esp,0x8
c001a03d:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a042:	68 5d b7 02 c0       	push   0xc002b75d
c001a047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04d:	e8 0e 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a052:	58                   	pop    eax
c001a053:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a058:	5a                   	pop    edx
c001a059:	68 5c b8 02 c0       	push   0xc002b85c
c001a05e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a064:	e8 f7 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a069:	59                   	pop    ecx
c001a06a:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a06f:	5b                   	pop    ebx
c001a070:	68 9c b8 02 c0       	push   0xc002b89c
c001a075:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a07b:	e8 e0 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a080:	58                   	pop    eax
c001a081:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a086:	5a                   	pop    edx
c001a087:	68 49 b7 02 c0       	push   0xc002b749
c001a08c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a092:	e8 c9 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a097:	59                   	pop    ecx
c001a098:	5b                   	pop    ebx
c001a099:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a09c:	68 61 b7 02 c0       	push   0xc002b761
c001a0a1:	e8 e9 86 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001a0a6:	58                   	pop    eax
c001a0a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0aa:	5a                   	pop    edx
c001a0ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a0ae:	68 6a b7 02 c0       	push   0xc002b76a
c001a0b3:	e8 d7 86 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001a0b8:	59                   	pop    ecx
c001a0b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0bc:	5b                   	pop    ebx
c001a0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a0c2:	68 73 b7 02 c0       	push   0xc002b773
c001a0c7:	e8 c3 86 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001a0cc:	58                   	pop    eax
c001a0cd:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a0d2:	5a                   	pop    edx
c001a0d3:	68 e0 b8 02 c0       	push   0xc002b8e0
c001a0d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0de:	e8 7d 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e3:	59                   	pop    ecx
c001a0e4:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a0e9:	5b                   	pop    ebx
c001a0ea:	68 7c b7 02 c0       	push   0xc002b77c
c001a0ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f5:	e8 66 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0fa:	0f 20 c0             	mov    eax,cr0
c001a0fd:	5a                   	pop    edx
c001a0fe:	59                   	pop    ecx
c001a0ff:	50                   	push   eax
c001a100:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a105:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10b:	e8 0a 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a110:	5b                   	pop    ebx
c001a111:	58                   	pop    eax
c001a112:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a117:	68 86 b7 02 c0       	push   0xc002b786
c001a11c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a122:	e8 39 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a127:	0f 20 d0             	mov    eax,cr2
c001a12a:	5a                   	pop    edx
c001a12b:	59                   	pop    ecx
c001a12c:	50                   	push   eax
c001a12d:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a132:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a138:	e8 dd 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a13d:	5b                   	pop    ebx
c001a13e:	58                   	pop    eax
c001a13f:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a144:	68 90 b7 02 c0       	push   0xc002b790
c001a149:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14f:	e8 0c 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a154:	0f 20 d8             	mov    eax,cr3
c001a157:	5a                   	pop    edx
c001a158:	59                   	pop    ecx
c001a159:	50                   	push   eax
c001a15a:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a15f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a165:	e8 b0 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a16a:	5b                   	pop    ebx
c001a16b:	58                   	pop    eax
c001a16c:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a171:	68 a3 b7 02 c0       	push   0xc002b7a3
c001a176:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a17c:	e8 df 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a181:	0f 20 e0             	mov    eax,cr4
c001a184:	5a                   	pop    edx
c001a185:	59                   	pop    ecx
c001a186:	50                   	push   eax
c001a187:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a18c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a192:	e8 83 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a197:	5b                   	pop    ebx
c001a198:	58                   	pop    eax
c001a199:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a19e:	68 ad b7 02 c0       	push   0xc002b7ad
c001a1a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a9:	e8 b2 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ae:	5a                   	pop    edx
c001a1af:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a1b4:	59                   	pop    ecx
c001a1b5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1be:	50                   	push   eax
c001a1bf:	e8 56 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1c4:	5b                   	pop    ebx
c001a1c5:	58                   	pop    eax
c001a1c6:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a1cb:	68 c4 b7 02 c0       	push   0xc002b7c4
c001a1d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1d6:	e8 85 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1db:	5a                   	pop    edx
c001a1dc:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a1e1:	59                   	pop    ecx
c001a1e2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1e8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1eb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1ee:	50                   	push   eax
c001a1ef:	e8 26 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1f4:	5b                   	pop    ebx
c001a1f5:	58                   	pop    eax
c001a1f6:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a1fb:	68 c4 b7 02 c0       	push   0xc002b7c4
c001a200:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a206:	e8 55 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a20b:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a210:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a213:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a219:	8b 12                	mov    edx,DWORD PTR [edx]
c001a21b:	59                   	pop    ecx
c001a21c:	5b                   	pop    ebx
c001a21d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a220:	50                   	push   eax
c001a221:	e8 f4 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a226:	83 c4 10             	add    esp,0x10
c001a229:	b2 fe                	mov    dl,0xfe
c001a22b:	e4 60                	in     al,0x60
c001a22d:	3c 1c                	cmp    al,0x1c
c001a22f:	74 04                	je     c001a235 <Krnl::panic(char const*)+0x33a>
c001a231:	3c 5a                	cmp    al,0x5a
c001a233:	75 f6                	jne    c001a22b <Krnl::panic(char const*)+0x330>
c001a235:	e4 64                	in     al,0x64
c001a237:	a8 02                	test   al,0x2
c001a239:	75 fa                	jne    c001a235 <Krnl::panic(char const*)+0x33a>
c001a23b:	88 d0                	mov    al,dl
c001a23d:	e6 64                	out    0x64,al
c001a23f:	fa                   	cli    
c001a240:	f4                   	hlt    
c001a241:	eb e8                	jmp    c001a22b <Krnl::panic(char const*)+0x330>
c001a243:	50                   	push   eax
c001a244:	50                   	push   eax
c001a245:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a24a:	68 30 b8 02 c0       	push   0xc002b830
c001a24f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a255:	e8 06 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a25a:	58                   	pop    eax
c001a25b:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a260:	5a                   	pop    edx
c001a261:	68 3e b7 02 c0       	push   0xc002b73e
c001a266:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a26c:	e8 ef 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a271:	59                   	pop    ecx
c001a272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a277:	5b                   	pop    ebx
c001a278:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a27b:	83 c0 0c             	add    eax,0xc
c001a27e:	50                   	push   eax
c001a27f:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001a284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28a:	e8 d1 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	e9 a3 fd ff ff       	jmp    c001a03a <Krnl::panic(char const*)+0x13f>

c001a297 <Net::switchEndian16(unsigned short)>:
c001a297:	83 ec 04             	sub    esp,0x4
c001a29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a29e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a2a2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a2a6:	c1 f8 08             	sar    eax,0x8
c001a2a9:	89 c2                	mov    edx,eax
c001a2ab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a2af:	c1 e0 08             	shl    eax,0x8
c001a2b2:	09 d0                	or     eax,edx
c001a2b4:	83 c4 04             	add    esp,0x4
c001a2b7:	c3                   	ret    

c001a2b8 <Net::switchEndian32(unsigned int)>:
c001a2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2bc:	c1 e8 18             	shr    eax,0x18
c001a2bf:	89 c2                	mov    edx,eax
c001a2c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c5:	c1 e0 08             	shl    eax,0x8
c001a2c8:	25 00 00 ff 00       	and    eax,0xff0000
c001a2cd:	09 c2                	or     edx,eax
c001a2cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d3:	c1 e8 08             	shr    eax,0x8
c001a2d6:	25 00 ff 00 00       	and    eax,0xff00
c001a2db:	09 c2                	or     edx,eax
c001a2dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e1:	c1 e0 18             	shl    eax,0x18
c001a2e4:	09 d0                	or     eax,edx
c001a2e6:	c3                   	ret    

c001a2e7 <Net::crc32Calc(unsigned char*, int)>:
c001a2e7:	83 ec 10             	sub    esp,0x10
c001a2ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2ef:	75 07                	jne    c001a2f8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a2f1:	b8 00 00 00 00       	mov    eax,0x0
c001a2f6:	eb 7c                	jmp    c001a374 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a2f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a2fd:	7f 07                	jg     c001a306 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a2ff:	b8 00 00 00 00       	mov    eax,0x0
c001a304:	eb 6e                	jmp    c001a374 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a306:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a30e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a31a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a31e:	7d 4e                	jge    c001a36e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a320:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a324:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a328:	01 d0                	add    eax,edx
c001a32a:	8a 00                	mov    al,BYTE PTR [eax]
c001a32c:	0f b6 c0             	movzx  eax,al
c001a32f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a333:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a33b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a340:	7f 26                	jg     c001a368 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a346:	83 e0 01             	and    eax,0x1
c001a349:	74 0d                	je     c001a358 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a34b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34f:	d1 e8                	shr    eax,1
c001a351:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a356:	eb 06                	jmp    c001a35e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35c:	d1 e8                	shr    eax,1
c001a35e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a362:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a366:	eb d3                	jmp    c001a33b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a368:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a36c:	eb a8                	jmp    c001a316 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a372:	f7 d0                	not    eax
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	c3                   	ret    

c001a378 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a378:	57                   	push   edi
c001a379:	56                   	push   esi
c001a37a:	53                   	push   ebx
c001a37b:	83 ec 60             	sub    esp,0x60
c001a37e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a385:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a389:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a391:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a396:	7f 1a                	jg     c001a3b2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a398:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a39f:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3a9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a3ac:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a3b0:	eb df                	jmp    c001a391 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a3b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3c3:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a3c6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3d1:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a3d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3d9:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a3e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a3f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a3f5:	89 c6                	mov    esi,eax
c001a3f7:	89 d7                	mov    edi,edx
c001a3f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3fb:	89 c8                	mov    eax,ecx
c001a3fd:	89 fa                	mov    edx,edi
c001a3ff:	89 f3                	mov    ebx,esi
c001a401:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a405:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a409:	89 04 24             	mov    DWORD PTR [esp],eax
c001a40c:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a414:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a41b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a41f:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a423:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a427:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a42f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a433:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a437:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a43b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a43f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a443:	89 c6                	mov    esi,eax
c001a445:	89 d7                	mov    edi,edx
c001a447:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a449:	89 c8                	mov    eax,ecx
c001a44b:	89 fa                	mov    edx,edi
c001a44d:	89 f3                	mov    ebx,esi
c001a44f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a453:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a45b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a463:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a46a:	0f b7 c0             	movzx  eax,ax
c001a46d:	c1 f8 08             	sar    eax,0x8
c001a470:	89 c1                	mov    ecx,eax
c001a472:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a479:	8d 50 01             	lea    edx,[eax+0x1]
c001a47c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a483:	88 ca                	mov    dl,cl
c001a485:	88 10                	mov    BYTE PTR [eax],dl
c001a487:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a48e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a495:	8d 48 01             	lea    ecx,[eax+0x1]
c001a498:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a49f:	88 10                	mov    BYTE PTR [eax],dl
c001a4a1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4a5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a4a9:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a4b0:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a4b4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a4b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a4bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a4c0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a4c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a4c8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a4cc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a4d0:	89 c6                	mov    esi,eax
c001a4d2:	89 d7                	mov    edi,edx
c001a4d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4d6:	89 c8                	mov    eax,ecx
c001a4d8:	89 fa                	mov    edx,edi
c001a4da:	89 f3                	mov    ebx,esi
c001a4dc:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a4e0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a4e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4e8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4ec:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a4f3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4fa:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a4fe:	50                   	push   eax
c001a4ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a503:	e8 df fd ff ff       	call   c001a2e7 <Net::crc32Calc(unsigned char*, int)>
c001a508:	83 c4 08             	add    esp,0x8
c001a50b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a50f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a513:	c1 e8 18             	shr    eax,0x18
c001a516:	89 c1                	mov    ecx,eax
c001a518:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a51f:	8d 50 01             	lea    edx,[eax+0x1]
c001a522:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a529:	88 ca                	mov    dl,cl
c001a52b:	88 10                	mov    BYTE PTR [eax],dl
c001a52d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a531:	c1 e8 10             	shr    eax,0x10
c001a534:	89 c1                	mov    ecx,eax
c001a536:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a53d:	8d 50 01             	lea    edx,[eax+0x1]
c001a540:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a547:	88 ca                	mov    dl,cl
c001a549:	88 10                	mov    BYTE PTR [eax],dl
c001a54b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a54f:	c1 e8 08             	shr    eax,0x8
c001a552:	89 c1                	mov    ecx,eax
c001a554:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a55b:	8d 50 01             	lea    edx,[eax+0x1]
c001a55e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a565:	88 ca                	mov    dl,cl
c001a567:	88 10                	mov    BYTE PTR [eax],dl
c001a569:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a570:	8d 50 01             	lea    edx,[eax+0x1]
c001a573:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a57a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a57e:	88 10                	mov    BYTE PTR [eax],dl
c001a580:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a584:	83 c4 60             	add    esp,0x60
c001a587:	5b                   	pop    ebx
c001a588:	5e                   	pop    esi
c001a589:	5f                   	pop    edi
c001a58a:	c3                   	ret    

c001a58b <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a58b:	57                   	push   edi
c001a58c:	56                   	push   esi
c001a58d:	53                   	push   ebx
c001a58e:	83 ec 70             	sub    esp,0x70
c001a591:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a598:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a59c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a5a4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5ab:	83 c0 0e             	add    eax,0xe
c001a5ae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a5b2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a5bd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a5c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5d1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5d5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a5d9:	89 c6                	mov    esi,eax
c001a5db:	89 d7                	mov    edi,edx
c001a5dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5df:	89 c8                	mov    eax,ecx
c001a5e1:	89 fa                	mov    edx,edi
c001a5e3:	89 f3                	mov    ebx,esi
c001a5e5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a5e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a5ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5f1:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a600:	83 c0 08             	add    eax,0x8
c001a603:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a607:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a60e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a612:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a61a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a61e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a622:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a626:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a62a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a62e:	89 c6                	mov    esi,eax
c001a630:	89 d7                	mov    edi,edx
c001a632:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a634:	89 c8                	mov    eax,ecx
c001a636:	89 fa                	mov    edx,edi
c001a638:	89 f3                	mov    ebx,esi
c001a63a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a63e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a642:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a646:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a64e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a655:	8d 50 01             	lea    edx,[eax+0x1]
c001a658:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a65f:	8a 00                	mov    al,BYTE PTR [eax]
c001a661:	0f b6 c0             	movzx  eax,al
c001a664:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a669:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a670:	8d 50 01             	lea    edx,[eax+0x1]
c001a673:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a67a:	8a 00                	mov    al,BYTE PTR [eax]
c001a67c:	0f b6 c0             	movzx  eax,al
c001a67f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a684:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a689:	c1 e0 08             	shl    eax,0x8
c001a68c:	89 c2                	mov    edx,eax
c001a68e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a692:	09 d0                	or     eax,edx
c001a694:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a69b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a69f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a6a7:	75 46                	jne    c001a6ef <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a6a9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a6b3:	66 3d dc 05          	cmp    ax,0x5dc
c001a6b7:	77 16                	ja     c001a6cf <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a6b9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6c0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a6c3:	0f b7 c0             	movzx  eax,ax
c001a6c6:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a6cd:	eb 20                	jmp    c001a6ef <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a6cf:	83 ec 0c             	sub    esp,0xc
c001a6d2:	68 08 b9 02 c0       	push   0xc002b908
c001a6d7:	e8 b3 80 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6e6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a6ea:	e9 17 01 00 00       	jmp    c001a806 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a6ef:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6f6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a6fd:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a703:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a70a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a70e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a712:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a71a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a71e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a722:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a726:	89 c6                	mov    esi,eax
c001a728:	89 d7                	mov    edi,edx
c001a72a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a72c:	89 c8                	mov    eax,ecx
c001a72e:	89 fa                	mov    edx,edi
c001a730:	89 f3                	mov    ebx,esi
c001a732:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a736:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a73a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a73d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a744:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a74b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a752:	8d 50 01             	lea    edx,[eax+0x1]
c001a755:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a75c:	8a 00                	mov    al,BYTE PTR [eax]
c001a75e:	0f b6 c0             	movzx  eax,al
c001a761:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a765:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a76c:	8d 50 01             	lea    edx,[eax+0x1]
c001a76f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a776:	8a 00                	mov    al,BYTE PTR [eax]
c001a778:	0f b6 c0             	movzx  eax,al
c001a77b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a77f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a786:	8d 50 01             	lea    edx,[eax+0x1]
c001a789:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a790:	8a 00                	mov    al,BYTE PTR [eax]
c001a792:	0f b6 c0             	movzx  eax,al
c001a795:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a799:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ac:	0f b6 c0             	movzx  eax,al
c001a7af:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7b3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a7b7:	c1 e0 18             	shl    eax,0x18
c001a7ba:	89 c2                	mov    edx,eax
c001a7bc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a7c0:	c1 e0 10             	shl    eax,0x10
c001a7c3:	09 c2                	or     edx,eax
c001a7c5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a7c9:	c1 e0 08             	shl    eax,0x8
c001a7cc:	09 d0                	or     eax,edx
c001a7ce:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a7d2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a7d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7dd:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a7e1:	83 e8 04             	sub    eax,0x4
c001a7e4:	83 ec 08             	sub    esp,0x8
c001a7e7:	50                   	push   eax
c001a7e8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a7ec:	e8 f6 fa ff ff       	call   c001a2e7 <Net::crc32Calc(unsigned char*, int)>
c001a7f1:	83 c4 10             	add    esp,0x10
c001a7f4:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a7f8:	0f 94 c2             	sete   dl
c001a7fb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a802:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a805:	90                   	nop
c001a806:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a80d:	83 c4 70             	add    esp,0x70
c001a810:	5b                   	pop    ebx
c001a811:	5e                   	pop    esi
c001a812:	5f                   	pop    edi
c001a813:	c2 04 00             	ret    0x4

c001a816 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a816:	55                   	push   ebp
c001a817:	57                   	push   edi
c001a818:	56                   	push   esi
c001a819:	53                   	push   ebx
c001a81a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a820:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a827:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a829:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a82c:	80 fb 40             	cmp    bl,0x40
c001a82f:	75 1b                	jne    c001a84c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a831:	8a 16                	mov    dl,BYTE PTR [esi]
c001a833:	84 d2                	test   dl,dl
c001a835:	0f 84 f1 00 00 00    	je     c001a92c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a83b:	8d 46 01             	lea    eax,[esi+0x1]
c001a83e:	80 fa 3a             	cmp    dl,0x3a
c001a841:	74 04                	je     c001a847 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a843:	89 c6                	mov    esi,eax
c001a845:	eb ea                	jmp    c001a831 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a847:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a84a:	89 c6                	mov    esi,eax
c001a84c:	50                   	push   eax
c001a84d:	6a 40                	push   0x40
c001a84f:	6a 00                	push   0x0
c001a851:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a855:	50                   	push   eax
c001a856:	e8 f5 5e fe ff       	call   c0000750 <memset>
c001a85b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a862:	31 c0                	xor    eax,eax
c001a864:	83 c4 10             	add    esp,0x10
c001a867:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a869:	84 c9                	test   cl,cl
c001a86b:	0f 84 bb 00 00 00    	je     c001a92c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a871:	3d c7 00 00 00       	cmp    eax,0xc7
c001a876:	0f 8f b0 00 00 00    	jg     c001a92c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a87c:	80 f9 0a             	cmp    cl,0xa
c001a87f:	0f 85 98 00 00 00    	jne    c001a91d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a885:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a88a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a88e:	a8 df                	test   al,0xdf
c001a890:	0f 94 c1             	sete   cl
c001a893:	3c 23                	cmp    al,0x23
c001a895:	0f 94 c2             	sete   dl
c001a898:	08 d1                	or     cl,dl
c001a89a:	75 4a                	jne    c001a8e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a89c:	8d 50 f7             	lea    edx,[eax-0x9]
c001a89f:	80 fa 01             	cmp    dl,0x1
c001a8a2:	76 42                	jbe    c001a8e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8a4:	3c 5b                	cmp    al,0x5b
c001a8a6:	75 42                	jne    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a8a8:	80 fb 40             	cmp    bl,0x40
c001a8ab:	75 39                	jne    c001a8e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8ad:	83 ec 0c             	sub    esp,0xc
c001a8b0:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a8b4:	52                   	push   edx
c001a8b5:	e8 b2 5e fe ff       	call   c000076c <strlen>
c001a8ba:	83 c4 10             	add    esp,0x10
c001a8bd:	83 f8 3f             	cmp    eax,0x3f
c001a8c0:	77 6a                	ja     c001a92c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8c2:	50                   	push   eax
c001a8c3:	50                   	push   eax
c001a8c4:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a8c8:	52                   	push   edx
c001a8c9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a8cd:	52                   	push   edx
c001a8ce:	e8 39 5f fe ff       	call   c000080c <strcpy>
c001a8d3:	58                   	pop    eax
c001a8d4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a8d8:	52                   	push   edx
c001a8d9:	e8 8e 5e fe ff       	call   c000076c <strlen>
c001a8de:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	31 d2                	xor    edx,edx
c001a8e8:	eb 3a                	jmp    c001a924 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a8ea:	80 fb 40             	cmp    bl,0x40
c001a8ed:	74 06                	je     c001a8f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a8ef:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a8f3:	eb 20                	jmp    c001a915 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a8f5:	50                   	push   eax
c001a8f6:	50                   	push   eax
c001a8f7:	55                   	push   ebp
c001a8f8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8fc:	50                   	push   eax
c001a8fd:	e8 96 5f fe ff       	call   c0000898 <strcmp>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	85 c0                	test   eax,eax
c001a907:	75 dd                	jne    c001a8e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a909:	eb e4                	jmp    c001a8ef <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a90b:	8d 50 01             	lea    edx,[eax+0x1]
c001a90e:	80 f9 3d             	cmp    cl,0x3d
c001a911:	74 1d                	je     c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a913:	89 d0                	mov    eax,edx
c001a915:	8a 08                	mov    cl,BYTE PTR [eax]
c001a917:	84 c9                	test   cl,cl
c001a919:	75 f0                	jne    c001a90b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a91b:	eb 0f                	jmp    c001a92c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a91d:	8d 50 01             	lea    edx,[eax+0x1]
c001a920:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a924:	47                   	inc    edi
c001a925:	89 d0                	mov    eax,edx
c001a927:	e9 3b ff ff ff       	jmp    c001a867 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a92c:	31 c0                	xor    eax,eax
c001a92e:	eb 33                	jmp    c001a963 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a930:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a934:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a937:	50                   	push   eax
c001a938:	50                   	push   eax
c001a939:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a93d:	50                   	push   eax
c001a93e:	56                   	push   esi
c001a93f:	e8 54 5f fe ff       	call   c0000898 <strcmp>
c001a944:	83 c4 10             	add    esp,0x10
c001a947:	85 c0                	test   eax,eax
c001a949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a94d:	75 97                	jne    c001a8e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a94f:	51                   	push   ecx
c001a950:	51                   	push   ecx
c001a951:	52                   	push   edx
c001a952:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a959:	e8 ae 5e fe ff       	call   c000080c <strcpy>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	b0 01                	mov    al,0x1
c001a963:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a969:	5b                   	pop    ebx
c001a96a:	5e                   	pop    esi
c001a96b:	5f                   	pop    edi
c001a96c:	5d                   	pop    ebp
c001a96d:	c3                   	ret    

c001a96e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a96e:	57                   	push   edi
c001a96f:	56                   	push   esi
c001a970:	53                   	push   ebx
c001a971:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a977:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a97e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a985:	53                   	push   ebx
c001a986:	e8 e1 5d fe ff       	call   c000076c <strlen>
c001a98b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a98e:	89 c7                	mov    edi,eax
c001a990:	e8 d7 5d fe ff       	call   c000076c <strlen>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a99c:	3d ff 00 00 00       	cmp    eax,0xff
c001a9a1:	0f 87 d3 00 00 00    	ja     c001aa7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a9a7:	57                   	push   edi
c001a9a8:	57                   	push   edi
c001a9a9:	56                   	push   esi
c001a9aa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a9ae:	56                   	push   esi
c001a9af:	e8 58 5e fe ff       	call   c000080c <strcpy>
c001a9b4:	58                   	pop    eax
c001a9b5:	5a                   	pop    edx
c001a9b6:	68 aa bc 02 c0       	push   0xc002bcaa
c001a9bb:	56                   	push   esi
c001a9bc:	e8 8b 5f fe ff       	call   c000094c <strcat>
c001a9c1:	59                   	pop    ecx
c001a9c2:	5f                   	pop    edi
c001a9c3:	53                   	push   ebx
c001a9c4:	56                   	push   esi
c001a9c5:	e8 82 5f fe ff       	call   c000094c <strcat>
c001a9ca:	58                   	pop    eax
c001a9cb:	5a                   	pop    edx
c001a9cc:	68 54 b9 02 c0       	push   0xc002b954
c001a9d1:	56                   	push   esi
c001a9d2:	e8 75 5f fe ff       	call   c000094c <strcat>
c001a9d7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a9de:	e8 b6 4b ff ff       	call   c000f599 <malloc>
c001a9e3:	83 c4 0c             	add    esp,0xc
c001a9e6:	89 c3                	mov    ebx,eax
c001a9e8:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c001a9ee:	56                   	push   esi
c001a9ef:	50                   	push   eax
c001a9f0:	e8 f9 82 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	85 db                	test   ebx,ebx
c001a9fa:	74 7e                	je     c001aa7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a9fc:	51                   	push   ecx
c001a9fd:	51                   	push   ecx
c001a9fe:	6a 01                	push   0x1
c001aa00:	53                   	push   ebx
c001aa01:	e8 4c 83 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	85 c0                	test   eax,eax
c001aa0b:	74 08                	je     c001aa15 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa12:	53                   	push   ebx
c001aa13:	eb 5f                	jmp    c001aa74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aa15:	52                   	push   edx
c001aa16:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aa1a:	50                   	push   eax
c001aa1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aa1f:	50                   	push   eax
c001aa20:	53                   	push   ebx
c001aa21:	e8 d8 85 ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c001aa26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa2a:	83 c4 10             	add    esp,0x10
c001aa2d:	89 c1                	mov    ecx,eax
c001aa2f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aa33:	74 31                	je     c001aa66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa35:	83 ec 0c             	sub    esp,0xc
c001aa38:	50                   	push   eax
c001aa39:	e8 5b 4b ff ff       	call   c000f599 <malloc>
c001aa3e:	89 c6                	mov    esi,eax
c001aa40:	58                   	pop    eax
c001aa41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa43:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aa47:	52                   	push   edx
c001aa48:	56                   	push   esi
c001aa49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa51:	53                   	push   ebx
c001aa52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa55:	83 c4 20             	add    esp,0x20
c001aa58:	85 c0                	test   eax,eax
c001aa5a:	75 0a                	jne    c001aa66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa60:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aa64:	74 18                	je     c001aa7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aa66:	83 ec 0c             	sub    esp,0xc
c001aa69:	53                   	push   ebx
c001aa6a:	e8 41 83 ff ff       	call   c0012db0 <File::close()>
c001aa6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	31 c0                	xor    eax,eax
c001aa7c:	eb 3b                	jmp    c001aab9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aa7e:	83 ec 0c             	sub    esp,0xc
c001aa81:	53                   	push   ebx
c001aa82:	e8 29 83 ff ff       	call   c0012db0 <File::close()>
c001aa87:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa8f:	83 c4 0c             	add    esp,0xc
c001aa92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa99:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aaa0:	56                   	push   esi
c001aaa1:	e8 70 fd ff ff       	call   c001a816 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aaa6:	89 34 24             	mov    DWORD PTR [esp],esi
c001aaa9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aaad:	e8 f7 4a ff ff       	call   c000f5a9 <free>
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aab9:	81 c4 20 01 00 00    	add    esp,0x120
c001aabf:	5b                   	pop    ebx
c001aac0:	5e                   	pop    esi
c001aac1:	5f                   	pop    edi
c001aac2:	c3                   	ret    

c001aac3 <Reg::getLine(char*, char*, char*)>:
c001aac3:	57                   	push   edi
c001aac4:	56                   	push   esi
c001aac5:	53                   	push   ebx
c001aac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aace:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aad2:	57                   	push   edi
c001aad3:	56                   	push   esi
c001aad4:	53                   	push   ebx
c001aad5:	68 59 b9 02 c0       	push   0xc002b959
c001aada:	e8 8f fe ff ff       	call   c001a96e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aadf:	83 c4 10             	add    esp,0x10
c001aae2:	84 c0                	test   al,al
c001aae4:	75 10                	jne    c001aaf6 <Reg::getLine(char*, char*, char*)+0x33>
c001aae6:	57                   	push   edi
c001aae7:	56                   	push   esi
c001aae8:	53                   	push   ebx
c001aae9:	68 7e b9 02 c0       	push   0xc002b97e
c001aaee:	e8 7b fe ff ff       	call   c001a96e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	5b                   	pop    ebx
c001aaf7:	5e                   	pop    esi
c001aaf8:	5f                   	pop    edi
c001aaf9:	c3                   	ret    

c001aafa <Reg::readInt(char*, char*, int*)>:
c001aafa:	55                   	push   ebp
c001aafb:	57                   	push   edi
c001aafc:	56                   	push   esi
c001aafd:	53                   	push   ebx
c001aafe:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ab04:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab08:	57                   	push   edi
c001ab09:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab10:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab17:	e8 a7 ff ff ff       	call   c001aac3 <Reg::getLine(char*, char*, char*)>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	84 c0                	test   al,al
c001ab21:	0f 84 b3 00 00 00    	je     c001abda <Reg::readInt(char*, char*, int*)+0xe0>
c001ab27:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ab2b:	80 fa 2b             	cmp    dl,0x2b
c001ab2e:	74 0c                	je     c001ab3c <Reg::readInt(char*, char*, int*)+0x42>
c001ab30:	80 fa 2d             	cmp    dl,0x2d
c001ab33:	75 0e                	jne    c001ab43 <Reg::readInt(char*, char*, int*)+0x49>
c001ab35:	ba 01 00 00 00       	mov    edx,0x1
c001ab3a:	eb 0b                	jmp    c001ab47 <Reg::readInt(char*, char*, int*)+0x4d>
c001ab3c:	ba 01 00 00 00       	mov    edx,0x1
c001ab41:	eb 02                	jmp    c001ab45 <Reg::readInt(char*, char*, int*)+0x4b>
c001ab43:	31 d2                	xor    edx,edx
c001ab45:	31 c0                	xor    eax,eax
c001ab47:	be 0a 00 00 00       	mov    esi,0xa
c001ab4c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ab51:	75 20                	jne    c001ab73 <Reg::readInt(char*, char*, int*)+0x79>
c001ab53:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ab57:	80 f9 78             	cmp    cl,0x78
c001ab5a:	75 0a                	jne    c001ab66 <Reg::readInt(char*, char*, int*)+0x6c>
c001ab5c:	83 c2 02             	add    edx,0x2
c001ab5f:	be 10 00 00 00       	mov    esi,0x10
c001ab64:	eb 0d                	jmp    c001ab73 <Reg::readInt(char*, char*, int*)+0x79>
c001ab66:	80 f9 62             	cmp    cl,0x62
c001ab69:	75 08                	jne    c001ab73 <Reg::readInt(char*, char*, int*)+0x79>
c001ab6b:	83 c2 02             	add    edx,0x2
c001ab6e:	be 02 00 00 00       	mov    esi,0x2
c001ab73:	01 d7                	add    edi,edx
c001ab75:	31 d2                	xor    edx,edx
c001ab77:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ab79:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ab7d:	80 fb 0d             	cmp    bl,0xd
c001ab80:	0f 94 c3             	sete   bl
c001ab83:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ab88:	0f 94 c1             	sete   cl
c001ab8b:	08 cb                	or     bl,cl
c001ab8d:	75 3a                	jne    c001abc9 <Reg::readInt(char*, char*, int*)+0xcf>
c001ab8f:	0f af d6             	imul   edx,esi
c001ab92:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab97:	83 fe 10             	cmp    esi,0x10
c001ab9a:	75 26                	jne    c001abc2 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab9c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aba0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aba3:	89 e9                	mov    ecx,ebp
c001aba5:	80 f9 05             	cmp    cl,0x5
c001aba8:	77 06                	ja     c001abb0 <Reg::readInt(char*, char*, int*)+0xb6>
c001abaa:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001abae:	eb 16                	jmp    c001abc6 <Reg::readInt(char*, char*, int*)+0xcc>
c001abb0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001abb4:	83 e9 61             	sub    ecx,0x61
c001abb7:	80 f9 05             	cmp    cl,0x5
c001abba:	77 06                	ja     c001abc2 <Reg::readInt(char*, char*, int*)+0xc8>
c001abbc:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001abc0:	eb 04                	jmp    c001abc6 <Reg::readInt(char*, char*, int*)+0xcc>
c001abc2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001abc6:	47                   	inc    edi
c001abc7:	eb ae                	jmp    c001ab77 <Reg::readInt(char*, char*, int*)+0x7d>
c001abc9:	84 c0                	test   al,al
c001abcb:	74 02                	je     c001abcf <Reg::readInt(char*, char*, int*)+0xd5>
c001abcd:	f7 da                	neg    edx
c001abcf:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001abd6:	89 10                	mov    DWORD PTR [eax],edx
c001abd8:	88 d8                	mov    al,bl
c001abda:	81 c4 ec 00 00 00    	add    esp,0xec
c001abe0:	5b                   	pop    ebx
c001abe1:	5e                   	pop    esi
c001abe2:	5f                   	pop    edi
c001abe3:	5d                   	pop    ebp
c001abe4:	c3                   	ret    

c001abe5 <Reg::readString(char*, char*, char*, int)>:
c001abe5:	57                   	push   edi
c001abe6:	56                   	push   esi
c001abe7:	53                   	push   ebx
c001abe8:	81 ec d4 00 00 00    	sub    esp,0xd4
c001abee:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001abf5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001abf9:	57                   	push   edi
c001abfa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac01:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac08:	e8 b6 fe ff ff       	call   c001aac3 <Reg::getLine(char*, char*, char*)>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	89 c6                	mov    esi,eax
c001ac12:	84 c0                	test   al,al
c001ac14:	74 44                	je     c001ac5a <Reg::readString(char*, char*, char*, int)+0x75>
c001ac16:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ac1d:	31 c0                	xor    eax,eax
c001ac1f:	4a                   	dec    edx
c001ac20:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ac23:	84 c9                	test   cl,cl
c001ac25:	74 0f                	je     c001ac36 <Reg::readString(char*, char*, char*, int)+0x51>
c001ac27:	39 c2                	cmp    edx,eax
c001ac29:	7e 0b                	jle    c001ac36 <Reg::readString(char*, char*, char*, int)+0x51>
c001ac2b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ac2e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ac33:	40                   	inc    eax
c001ac34:	eb ea                	jmp    c001ac20 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	53                   	push   ebx
c001ac3a:	e8 2d 5b fe ff       	call   c000076c <strlen>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ac47:	75 11                	jne    c001ac5a <Reg::readString(char*, char*, char*, int)+0x75>
c001ac49:	83 ec 0c             	sub    esp,0xc
c001ac4c:	53                   	push   ebx
c001ac4d:	e8 1a 5b fe ff       	call   c000076c <strlen>
c001ac52:	83 c4 10             	add    esp,0x10
c001ac55:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ac5a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ac60:	89 f0                	mov    eax,esi
c001ac62:	5b                   	pop    ebx
c001ac63:	5e                   	pop    esi
c001ac64:	5f                   	pop    edi
c001ac65:	c3                   	ret    

c001ac66 <Reg::readBool(char*, char*, bool*)>:
c001ac66:	83 ec 20             	sub    esp,0x20
c001ac69:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac6d:	50                   	push   eax
c001ac6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac76:	e8 7f fe ff ff       	call   c001aafa <Reg::readInt(char*, char*, int*)>
c001ac7b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac80:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac84:	0f 95 02             	setne  BYTE PTR [edx]
c001ac87:	83 c4 2c             	add    esp,0x2c
c001ac8a:	c3                   	ret    

c001ac8b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ac8b:	53                   	push   ebx
c001ac8c:	83 ec 1c             	sub    esp,0x1c
c001ac8f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac93:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac97:	50                   	push   eax
c001ac98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aca0:	e8 c1 ff ff ff       	call   c001ac66 <Reg::readBool(char*, char*, bool*)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	84 c0                	test   al,al
c001acaa:	74 04                	je     c001acb0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001acac:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001acb0:	88 d8                	mov    al,bl
c001acb2:	83 c4 18             	add    esp,0x18
c001acb5:	5b                   	pop    ebx
c001acb6:	c3                   	ret    

c001acb7 <Reg::readIntWithDefault(char*, char*, int)>:
c001acb7:	53                   	push   ebx
c001acb8:	83 ec 1c             	sub    esp,0x1c
c001acbb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001acbf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001acc3:	50                   	push   eax
c001acc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001accc:	e8 29 fe ff ff       	call   c001aafa <Reg::readInt(char*, char*, int*)>
c001acd1:	83 c4 10             	add    esp,0x10
c001acd4:	84 c0                	test   al,al
c001acd6:	74 04                	je     c001acdc <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001acd8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001acdc:	89 d8                	mov    eax,ebx
c001acde:	83 c4 18             	add    esp,0x18
c001ace1:	5b                   	pop    ebx
c001ace2:	c3                   	ret    

c001ace3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ace3:	57                   	push   edi
c001ace4:	56                   	push   esi
c001ace5:	56                   	push   esi
c001ace6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001acea:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001acee:	56                   	push   esi
c001acef:	57                   	push   edi
c001acf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf8:	e8 e8 fe ff ff       	call   c001abe5 <Reg::readString(char*, char*, char*, int)>
c001acfd:	83 c4 10             	add    esp,0x10
c001ad00:	84 c0                	test   al,al
c001ad02:	75 1a                	jne    c001ad1e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ad04:	51                   	push   ecx
c001ad05:	56                   	push   esi
c001ad06:	6a 00                	push   0x0
c001ad08:	57                   	push   edi
c001ad09:	e8 42 5a fe ff       	call   c0000750 <memset>
c001ad0e:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ad11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad17:	83 c4 10             	add    esp,0x10
c001ad1a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad1e:	89 f8                	mov    eax,edi
c001ad20:	5a                   	pop    edx
c001ad21:	5e                   	pop    esi
c001ad22:	5f                   	pop    edi
c001ad23:	c3                   	ret    

c001ad24 <Sys::eject(regs*)>:
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	83 ca ff             	or     edx,0xffffffff
c001ad2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ad31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad36:	83 e9 41             	sub    ecx,0x41
c001ad39:	83 f9 19             	cmp    ecx,0x19
c001ad3c:	77 18                	ja     c001ad56 <Sys::eject(regs*)+0x32>
c001ad3e:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c001ad45:	85 c9                	test   ecx,ecx
c001ad47:	74 0d                	je     c001ad56 <Sys::eject(regs*)+0x32>
c001ad49:	83 ec 0c             	sub    esp,0xc
c001ad4c:	51                   	push   ecx
c001ad4d:	e8 28 b3 ff ff       	call   c001607a <LogicalDisk::eject()>
c001ad52:	83 c4 10             	add    esp,0x10
c001ad55:	99                   	cdq    
c001ad56:	83 c4 0c             	add    esp,0xc
c001ad59:	c3                   	ret    

c001ad5a <Sys::exit(regs*)>:
c001ad5a:	83 ec 18             	sub    esp,0x18
c001ad5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad61:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad64:	e8 c2 35 00 00       	call   c001e32b <terminateTask(int)>
c001ad69:	83 c8 ff             	or     eax,0xffffffff
c001ad6c:	83 c4 1c             	add    esp,0x1c
c001ad6f:	89 c2                	mov    edx,eax
c001ad71:	c3                   	ret    

c001ad72 <Sys::getCwd(regs*)>:
c001ad72:	83 ec 10             	sub    esp,0x10
c001ad75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad79:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad84:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad87:	e8 64 7d ff ff       	call   c0012af0 <Fs::getcwd(Process*, char*, int)>
c001ad8c:	83 c4 1c             	add    esp,0x1c
c001ad8f:	99                   	cdq    
c001ad90:	c3                   	ret    

c001ad91 <Sys::getPID(regs*)>:
c001ad91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad99:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad9b:	99                   	cdq    
c001ad9c:	c3                   	ret    

c001ad9d <Sys::getRAMData(regs*)>:
c001ad9d:	8b 0d f4 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002daf4
c001ada3:	6b 05 f0 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002daf0,0x64
c001adaa:	99                   	cdq    
c001adab:	f7 f9                	idiv   ecx
c001adad:	c1 e0 18             	shl    eax,0x18
c001adb0:	09 c8                	or     eax,ecx
c001adb2:	99                   	cdq    
c001adb3:	c3                   	ret    

c001adb4 <Sys::getVGAPtr(regs*)>:
c001adb4:	55                   	push   ebp
c001adb5:	57                   	push   edi
c001adb6:	56                   	push   esi
c001adb7:	53                   	push   ebx
c001adb8:	83 ec 18             	sub    esp,0x18
c001adbb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adbf:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001adc2:	e8 b0 30 00 00       	call   c001de77 <Thr::processFromPID(int)>
c001adc7:	83 c4 10             	add    esp,0x10
c001adca:	89 c1                	mov    ecx,eax
c001adcc:	b8 01 00 00 00       	mov    eax,0x1
c001add1:	85 c9                	test   ecx,ecx
c001add3:	74 59                	je     c001ae2e <Sys::getVGAPtr(regs*)+0x7a>
c001add5:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001addb:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001addf:	74 0c                	je     c001aded <Sys::getVGAPtr(regs*)+0x39>
c001ade1:	83 ec 0c             	sub    esp,0xc
c001ade4:	53                   	push   ebx
c001ade5:	e8 69 55 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001adf0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001adf3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001adf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adfa:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001adfd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae00:	81 c3 82 00 00 00    	add    ebx,0x82
c001ae06:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ae0c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae0f:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ae12:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ae18:	50                   	push   eax
c001ae19:	50                   	push   eax
c001ae1a:	53                   	push   ebx
c001ae1b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae1e:	05 a8 0f 00 00       	add    eax,0xfa8
c001ae23:	50                   	push   eax
c001ae24:	e8 e3 59 fe ff       	call   c000080c <strcpy>
c001ae29:	83 c4 10             	add    esp,0x10
c001ae2c:	31 c0                	xor    eax,eax
c001ae2e:	83 c4 0c             	add    esp,0xc
c001ae31:	31 d2                	xor    edx,edx
c001ae33:	5b                   	pop    ebx
c001ae34:	5e                   	pop    esi
c001ae35:	5f                   	pop    edi
c001ae36:	5d                   	pop    ebp
c001ae37:	c3                   	ret    

c001ae38 <Sys::loadDLL(regs*)>:
c001ae38:	56                   	push   esi
c001ae39:	53                   	push   ebx
c001ae3a:	31 d2                	xor    edx,edx
c001ae3c:	51                   	push   ecx
c001ae3d:	b8 01 00 00 00       	mov    eax,0x1
c001ae42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae46:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ae4a:	0f 84 8c 00 00 00    	je     c001aedc <Sys::loadDLL(regs*)+0xa4>
c001ae50:	83 ec 0c             	sub    esp,0xc
c001ae53:	68 14 01 00 00       	push   0x114
c001ae58:	e8 3c 47 ff ff       	call   c000f599 <malloc>
c001ae5d:	83 c4 0c             	add    esp,0xc
c001ae60:	89 c3                	mov    ebx,eax
c001ae62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae67:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae6a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae6d:	53                   	push   ebx
c001ae6e:	e8 7b 7e ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	31 d2                	xor    edx,edx
c001ae78:	b8 02 00 00 00       	mov    eax,0x2
c001ae7d:	85 db                	test   ebx,ebx
c001ae7f:	74 5b                	je     c001aedc <Sys::loadDLL(regs*)+0xa4>
c001ae81:	83 ec 0c             	sub    esp,0xc
c001ae84:	53                   	push   ebx
c001ae85:	e8 36 81 ff ff       	call   c0012fc0 <File::exists()>
c001ae8a:	83 c4 10             	add    esp,0x10
c001ae8d:	84 c0                	test   al,al
c001ae8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae91:	75 11                	jne    c001aea4 <Sys::loadDLL(regs*)+0x6c>
c001ae93:	83 ec 0c             	sub    esp,0xc
c001ae96:	53                   	push   ebx
c001ae97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae9a:	83 c4 10             	add    esp,0x10
c001ae9d:	b8 03 00 00 00       	mov    eax,0x3
c001aea2:	eb 36                	jmp    c001aeda <Sys::loadDLL(regs*)+0xa2>
c001aea4:	83 ec 0c             	sub    esp,0xc
c001aea7:	53                   	push   ebx
c001aea8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeab:	58                   	pop    eax
c001aeac:	5a                   	pop    edx
c001aead:	6a 00                	push   0x0
c001aeaf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aeb2:	e8 0e 22 00 00       	call   c001d0c5 <Thr::loadDLL(char const*, bool)>
c001aeb7:	83 c4 10             	add    esp,0x10
c001aeba:	89 c1                	mov    ecx,eax
c001aebc:	31 d2                	xor    edx,edx
c001aebe:	b8 04 00 00 00       	mov    eax,0x4
c001aec3:	85 c9                	test   ecx,ecx
c001aec5:	74 15                	je     c001aedc <Sys::loadDLL(regs*)+0xa4>
c001aec7:	53                   	push   ebx
c001aec8:	53                   	push   ebx
c001aec9:	ff 35 a8 da 02 c0    	push   DWORD PTR ds:0xc002daa8
c001aecf:	51                   	push   ecx
c001aed0:	e8 21 24 00 00       	call   c001d2f6 <Thr::executeDLL(unsigned long, void*)>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	31 c0                	xor    eax,eax
c001aeda:	31 d2                	xor    edx,edx
c001aedc:	59                   	pop    ecx
c001aedd:	5b                   	pop    ebx
c001aede:	5e                   	pop    esi
c001aedf:	c3                   	ret    

c001aee0 <Sys::read(regs*)>:
c001aee0:	57                   	push   edi
c001aee1:	56                   	push   esi
c001aee2:	53                   	push   ebx
c001aee3:	83 ec 10             	sub    esp,0x10
c001aee6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aeed:	83 f8 02             	cmp    eax,0x2
c001aef0:	77 10                	ja     c001af02 <Sys::read(regs*)+0x22>
c001aef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aefa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af00:	eb 0e                	jmp    c001af10 <Sys::read(regs*)+0x30>
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	50                   	push   eax
c001af06:	e8 bc 61 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	89 c1                	mov    ecx,eax
c001af10:	83 c8 ff             	or     eax,0xffffffff
c001af13:	85 c9                	test   ecx,ecx
c001af15:	89 c2                	mov    edx,eax
c001af17:	74 28                	je     c001af41 <Sys::read(regs*)+0x61>
c001af19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af21:	31 ff                	xor    edi,edi
c001af23:	83 ec 0c             	sub    esp,0xc
c001af26:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af28:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af2c:	52                   	push   edx
c001af2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af30:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af33:	57                   	push   edi
c001af34:	56                   	push   esi
c001af35:	51                   	push   ecx
c001af36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af3d:	83 c4 20             	add    esp,0x20
c001af40:	99                   	cdq    
c001af41:	83 c4 10             	add    esp,0x10
c001af44:	5b                   	pop    ebx
c001af45:	5e                   	pop    esi
c001af46:	5f                   	pop    edi
c001af47:	c3                   	ret    

c001af48 <Sys::sbrk(regs*)>:
c001af48:	56                   	push   esi
c001af49:	53                   	push   ebx
c001af4a:	50                   	push   eax
c001af4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af54:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af57:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001af5a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001af60:	85 db                	test   ebx,ebx
c001af62:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001af65:	74 02                	je     c001af69 <Sys::sbrk(regs*)+0x21>
c001af67:	79 06                	jns    c001af6f <Sys::sbrk(regs*)+0x27>
c001af69:	89 f0                	mov    eax,esi
c001af6b:	31 d2                	xor    edx,edx
c001af6d:	eb 2a                	jmp    c001af99 <Sys::sbrk(regs*)+0x51>
c001af6f:	83 c8 ff             	or     eax,0xffffffff
c001af72:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001af78:	89 c2                	mov    edx,eax
c001af7a:	77 1d                	ja     c001af99 <Sys::sbrk(regs*)+0x51>
c001af7c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001af82:	50                   	push   eax
c001af83:	c1 ea 0c             	shr    edx,0xc
c001af86:	68 07 0c 00 00       	push   0xc07
c001af8b:	52                   	push   edx
c001af8c:	51                   	push   ecx
c001af8d:	e8 f0 6b ff ff       	call   c0011b82 <VAS::allocatePages(int, int)>
c001af92:	89 f0                	mov    eax,esi
c001af94:	31 d2                	xor    edx,edx
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	59                   	pop    ecx
c001af9a:	5b                   	pop    ebx
c001af9b:	5e                   	pop    esi
c001af9c:	c3                   	ret    

c001af9d <Sys::setCwd(regs*)>:
c001af9d:	83 ec 14             	sub    esp,0x14
c001afa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afa4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afaf:	e8 ab 80 ff ff       	call   c001305f <Fs::setcwd(Process*, char*)>
c001afb4:	83 c4 1c             	add    esp,0x1c
c001afb7:	99                   	cdq    
c001afb8:	c3                   	ret    

c001afb9 <Sys::setTime(regs*)>:
c001afb9:	55                   	push   ebp
c001afba:	31 c9                	xor    ecx,ecx
c001afbc:	57                   	push   edi
c001afbd:	bd 0c 00 00 00       	mov    ebp,0xc
c001afc2:	56                   	push   esi
c001afc3:	53                   	push   ebx
c001afc4:	31 db                	xor    ebx,ebx
c001afc6:	83 ec 10             	sub    esp,0x10
c001afc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afcd:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001afd0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001afd3:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001afd6:	89 c2                	mov    edx,eax
c001afd8:	66 81 ef 6c 07       	sub    di,0x76c
c001afdd:	83 e2 1f             	and    edx,0x1f
c001afe0:	c1 e7 10             	shl    edi,0x10
c001afe3:	42                   	inc    edx
c001afe4:	c1 e8 05             	shr    eax,0x5
c001afe7:	88 d1                	mov    cl,dl
c001afe9:	31 d2                	xor    edx,edx
c001afeb:	f7 f5                	div    ebp
c001afed:	89 dd                	mov    ebp,ebx
c001afef:	88 d5                	mov    ch,dl
c001aff1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001aff7:	0f b7 c1             	movzx  eax,cx
c001affa:	31 d2                	xor    edx,edx
c001affc:	09 f8                	or     eax,edi
c001affe:	bf 3c 00 00 00       	mov    edi,0x3c
c001b003:	89 c1                	mov    ecx,eax
c001b005:	89 f0                	mov    eax,esi
c001b007:	f7 f7                	div    edi
c001b009:	c1 e2 10             	shl    edx,0x10
c001b00c:	09 d5                	or     ebp,edx
c001b00e:	31 d2                	xor    edx,edx
c001b010:	89 eb                	mov    ebx,ebp
c001b012:	f7 f7                	div    edi
c001b014:	bf 10 0e 00 00       	mov    edi,0xe10
c001b019:	88 d7                	mov    bh,dl
c001b01b:	89 f0                	mov    eax,esi
c001b01d:	31 d2                	xor    edx,edx
c001b01f:	f7 f7                	div    edi
c001b021:	bf 18 00 00 00       	mov    edi,0x18
c001b026:	31 d2                	xor    edx,edx
c001b028:	f7 f7                	div    edi
c001b02a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001b02f:	88 d3                	mov    bl,dl
c001b031:	53                   	push   ebx
c001b032:	51                   	push   ecx
c001b033:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b039:	e8 6a 88 ff ff       	call   c00138a8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b03e:	83 c4 1c             	add    esp,0x1c
c001b041:	83 f0 01             	xor    eax,0x1
c001b044:	5b                   	pop    ebx
c001b045:	0f b6 c0             	movzx  eax,al
c001b048:	5e                   	pop    esi
c001b049:	31 d2                	xor    edx,edx
c001b04b:	5f                   	pop    edi
c001b04c:	5d                   	pop    ebp
c001b04d:	c3                   	ret    

c001b04e <Sys::timezone(regs*)>:
c001b04e:	53                   	push   ebx
c001b04f:	83 ec 08             	sub    esp,0x8
c001b052:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b056:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b05a:	75 17                	jne    c001b073 <Sys::timezone(regs*)+0x25>
c001b05c:	83 ec 0c             	sub    esp,0xc
c001b05f:	68 99 b9 02 c0       	push   0xc002b999
c001b064:	e8 26 77 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001b069:	83 c8 ff             	or     eax,0xffffffff
c001b06c:	83 c4 10             	add    esp,0x10
c001b06f:	89 c2                	mov    edx,eax
c001b071:	eb 20                	jmp    c001b093 <Sys::timezone(regs*)+0x45>
c001b073:	83 ec 0c             	sub    esp,0xc
c001b076:	68 ae b9 02 c0       	push   0xc002b9ae
c001b07b:	e8 0f 77 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001b080:	58                   	pop    eax
c001b081:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b084:	e8 81 85 ff ff       	call   c001360a <User::loadClockSettings(int)>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	b8 01 00 00 00       	mov    eax,0x1
c001b091:	31 d2                	xor    edx,edx
c001b093:	83 c4 08             	add    esp,0x8
c001b096:	5b                   	pop    ebx
c001b097:	c3                   	ret    

c001b098 <Sys::write(regs*)>:
c001b098:	57                   	push   edi
c001b099:	56                   	push   esi
c001b09a:	53                   	push   ebx
c001b09b:	83 ec 10             	sub    esp,0x10
c001b09e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b0a5:	83 f8 02             	cmp    eax,0x2
c001b0a8:	77 10                	ja     c001b0ba <Sys::write(regs*)+0x22>
c001b0aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0b2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b0b8:	eb 0e                	jmp    c001b0c8 <Sys::write(regs*)+0x30>
c001b0ba:	83 ec 0c             	sub    esp,0xc
c001b0bd:	50                   	push   eax
c001b0be:	e8 04 60 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b0c3:	83 c4 10             	add    esp,0x10
c001b0c6:	89 c1                	mov    ecx,eax
c001b0c8:	83 c8 ff             	or     eax,0xffffffff
c001b0cb:	85 c9                	test   ecx,ecx
c001b0cd:	89 c2                	mov    edx,eax
c001b0cf:	74 28                	je     c001b0f9 <Sys::write(regs*)+0x61>
c001b0d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0d9:	31 ff                	xor    edi,edi
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b0e4:	52                   	push   edx
c001b0e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0e8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b0eb:	57                   	push   edi
c001b0ec:	56                   	push   esi
c001b0ed:	51                   	push   ecx
c001b0ee:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b0f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0f5:	83 c4 20             	add    esp,0x20
c001b0f8:	99                   	cdq    
c001b0f9:	83 c4 10             	add    esp,0x10
c001b0fc:	5b                   	pop    ebx
c001b0fd:	5e                   	pop    esi
c001b0fe:	5f                   	pop    edi
c001b0ff:	c3                   	ret    

c001b100 <Sys::wsbe(regs*)>:
c001b100:	57                   	push   edi
c001b101:	b9 0b 00 00 00       	mov    ecx,0xb
c001b106:	56                   	push   esi
c001b107:	be ed b9 02 c0       	mov    esi,0xc002b9ed
c001b10c:	53                   	push   ebx
c001b10d:	83 ec 30             	sub    esp,0x30
c001b110:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b114:	fc                   	cld    
c001b115:	83 ec 0c             	sub    esp,0xc
c001b118:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b11a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b11e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b123:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b126:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b12c:	8b 06                	mov    eax,DWORD PTR [esi]
c001b12e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b131:	57                   	push   edi
c001b132:	e8 35 56 fe ff       	call   c000076c <strlen>
c001b137:	5a                   	pop    edx
c001b138:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b13c:	52                   	push   edx
c001b13d:	31 d2                	xor    edx,edx
c001b13f:	57                   	push   edi
c001b140:	52                   	push   edx
c001b141:	50                   	push   eax
c001b142:	56                   	push   esi
c001b143:	ff d3                	call   ebx
c001b145:	83 c4 14             	add    esp,0x14
c001b148:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b14c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b14f:	e8 d7 31 00 00       	call   c001e32b <terminateTask(int)>
c001b154:	83 c4 40             	add    esp,0x40
c001b157:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b15c:	5b                   	pop    ebx
c001b15d:	31 d2                	xor    edx,edx
c001b15f:	5e                   	pop    esi
c001b160:	5f                   	pop    edi
c001b161:	c3                   	ret    

c001b162 <Sys::yield(regs*)>:
c001b162:	57                   	push   edi
c001b163:	56                   	push   esi
c001b164:	53                   	push   ebx
c001b165:	fa                   	cli    
c001b166:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001b16c:	e8 1a 29 00 00       	call   c001da8b <schedule()>
c001b171:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001b176:	48                   	dec    eax
c001b177:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001b17c:	75 01                	jne    c001b17f <Sys::yield(regs*)+0x1d>
c001b17e:	fb                   	sti    
c001b17f:	8b 35 10 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e110
c001b185:	8b 3d 14 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e114
c001b18b:	89 f0                	mov    eax,esi
c001b18d:	89 fb                	mov    ebx,edi
c001b18f:	89 f1                	mov    ecx,esi
c001b191:	c1 e0 07             	shl    eax,0x7
c001b194:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b198:	25 80 30 0f 00       	and    eax,0xf3080
c001b19d:	c1 eb 17             	shr    ebx,0x17
c001b1a0:	31 c8                	xor    eax,ecx
c001b1a2:	89 da                	mov    edx,ebx
c001b1a4:	5b                   	pop    ebx
c001b1a5:	5e                   	pop    esi
c001b1a6:	5f                   	pop    edi
c001b1a7:	c3                   	ret    

c001b1a8 <sysCallSeekDir(regs*)>:
c001b1a8:	31 c0                	xor    eax,eax
c001b1aa:	31 d2                	xor    edx,edx
c001b1ac:	c3                   	ret    

c001b1ad <sysCallTellDir(regs*)>:
c001b1ad:	31 c0                	xor    eax,eax
c001b1af:	31 d2                	xor    edx,edx
c001b1b1:	c3                   	ret    

c001b1b2 <sysCallVerify(regs*)>:
c001b1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1b6:	31 d2                	xor    edx,edx
c001b1b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1bb:	c3                   	ret    

c001b1bc <sysCallGetArgc(regs*)>:
c001b1bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1c4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b1ca:	99                   	cdq    
c001b1cb:	c3                   	ret    

c001b1cc <sysFormatDisk(regs*)>:
c001b1cc:	56                   	push   esi
c001b1cd:	53                   	push   ebx
c001b1ce:	53                   	push   ebx
c001b1cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1d3:	8b 1d 14 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc14
c001b1d9:	eb 25                	jmp    c001b200 <sysFormatDisk(regs*)+0x34>
c001b1db:	83 ec 0c             	sub    esp,0xc
c001b1de:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b1e1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1e3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b1e6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b1e9:	50                   	push   eax
c001b1ea:	ff 34 85 a0 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f60]
c001b1f1:	53                   	push   ebx
c001b1f2:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b1f5:	83 c4 20             	add    esp,0x20
c001b1f8:	83 f8 08             	cmp    eax,0x8
c001b1fb:	75 12                	jne    c001b20f <sysFormatDisk(regs*)+0x43>
c001b1fd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b200:	85 db                	test   ebx,ebx
c001b202:	75 d7                	jne    c001b1db <sysFormatDisk(regs*)+0xf>
c001b204:	59                   	pop    ecx
c001b205:	b8 03 00 00 00       	mov    eax,0x3
c001b20a:	31 d2                	xor    edx,edx
c001b20c:	5b                   	pop    ebx
c001b20d:	5e                   	pop    esi
c001b20e:	c3                   	ret    
c001b20f:	85 c0                	test   eax,eax
c001b211:	74 1b                	je     c001b22e <sysFormatDisk(regs*)+0x62>
c001b213:	83 f8 09             	cmp    eax,0x9
c001b216:	74 0b                	je     c001b223 <sysFormatDisk(regs*)+0x57>
c001b218:	59                   	pop    ecx
c001b219:	b8 02 00 00 00       	mov    eax,0x2
c001b21e:	31 d2                	xor    edx,edx
c001b220:	5b                   	pop    ebx
c001b221:	5e                   	pop    esi
c001b222:	c3                   	ret    
c001b223:	59                   	pop    ecx
c001b224:	b8 01 00 00 00       	mov    eax,0x1
c001b229:	31 d2                	xor    edx,edx
c001b22b:	5b                   	pop    ebx
c001b22c:	5e                   	pop    esi
c001b22d:	c3                   	ret    
c001b22e:	59                   	pop    ecx
c001b22f:	31 c0                	xor    eax,eax
c001b231:	31 d2                	xor    edx,edx
c001b233:	5b                   	pop    ebx
c001b234:	5e                   	pop    esi
c001b235:	c3                   	ret    

c001b236 <sysSetDiskVolumeLabel(regs*)>:
c001b236:	56                   	push   esi
c001b237:	53                   	push   ebx
c001b238:	53                   	push   ebx
c001b239:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b23d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b240:	83 f8 19             	cmp    eax,0x19
c001b243:	77 29                	ja     c001b26e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b245:	8b 0c 85 a0 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f60]
c001b24c:	85 c9                	test   ecx,ecx
c001b24e:	74 1e                	je     c001b26e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b250:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b253:	85 d2                	test   edx,edx
c001b255:	74 17                	je     c001b26e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b257:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b25d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b25f:	52                   	push   edx
c001b260:	50                   	push   eax
c001b261:	51                   	push   ecx
c001b262:	53                   	push   ebx
c001b263:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	99                   	cdq    
c001b26a:	59                   	pop    ecx
c001b26b:	5b                   	pop    ebx
c001b26c:	5e                   	pop    esi
c001b26d:	c3                   	ret    
c001b26e:	59                   	pop    ecx
c001b26f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b274:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b279:	5b                   	pop    ebx
c001b27a:	5e                   	pop    esi
c001b27b:	c3                   	ret    

c001b27c <sysGetDiskVolumeLabel(regs*)>:
c001b27c:	57                   	push   edi
c001b27d:	56                   	push   esi
c001b27e:	53                   	push   ebx
c001b27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b283:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b286:	83 fa 19             	cmp    edx,0x19
c001b289:	77 34                	ja     c001b2bf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b28b:	8b 0c 95 a0 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f60]
c001b292:	85 c9                	test   ecx,ecx
c001b294:	74 29                	je     c001b2bf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b296:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b299:	85 db                	test   ebx,ebx
c001b29b:	74 22                	je     c001b2bf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b29d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b2a0:	85 c0                	test   eax,eax
c001b2a2:	74 1b                	je     c001b2bf <sysGetDiskVolumeLabel(regs*)+0x43>
c001b2a4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b2aa:	83 ec 0c             	sub    esp,0xc
c001b2ad:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b2af:	50                   	push   eax
c001b2b0:	53                   	push   ebx
c001b2b1:	52                   	push   edx
c001b2b2:	51                   	push   ecx
c001b2b3:	56                   	push   esi
c001b2b4:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b2b7:	83 c4 20             	add    esp,0x20
c001b2ba:	99                   	cdq    
c001b2bb:	5b                   	pop    ebx
c001b2bc:	5e                   	pop    esi
c001b2bd:	5f                   	pop    edi
c001b2be:	c3                   	ret    
c001b2bf:	5b                   	pop    ebx
c001b2c0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2ca:	5e                   	pop    esi
c001b2cb:	5f                   	pop    edi
c001b2cc:	c3                   	ret    

c001b2cd <sysShutdown(regs*)>:
c001b2cd:	83 ec 0c             	sub    esp,0xc
c001b2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2d7:	85 c0                	test   eax,eax
c001b2d9:	74 18                	je     c001b2f3 <sysShutdown(regs*)+0x26>
c001b2db:	83 f8 01             	cmp    eax,0x1
c001b2de:	74 38                	je     c001b318 <sysShutdown(regs*)+0x4b>
c001b2e0:	83 f8 02             	cmp    eax,0x2
c001b2e3:	74 24                	je     c001b309 <sysShutdown(regs*)+0x3c>
c001b2e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2ef:	83 c4 0c             	add    esp,0xc
c001b2f2:	c3                   	ret    
c001b2f3:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001b2f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2fa:	6a 00                	push   0x0
c001b2fc:	6a 00                	push   0x0
c001b2fe:	6a 00                	push   0x0
c001b300:	50                   	push   eax
c001b301:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	eb dc                	jmp    c001b2e5 <sysShutdown(regs*)+0x18>
c001b309:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001b30e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b310:	6a 00                	push   0x0
c001b312:	6a 00                	push   0x0
c001b314:	6a 01                	push   0x1
c001b316:	eb e8                	jmp    c001b300 <sysShutdown(regs*)+0x33>
c001b318:	a1 40 01 03 c0       	mov    eax,ds:0xc0030140
c001b31d:	85 c0                	test   eax,eax
c001b31f:	74 02                	je     c001b323 <sysShutdown(regs*)+0x56>
c001b321:	ff d0                	call   eax
c001b323:	31 c0                	xor    eax,eax
c001b325:	31 d2                	xor    edx,edx
c001b327:	83 c4 0c             	add    esp,0xc
c001b32a:	c3                   	ret    

c001b32b <sysCallRealpath(regs*)>:
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b332:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b335:	85 d2                	test   edx,edx
c001b337:	74 07                	je     c001b340 <sysCallRealpath(regs*)+0x15>
c001b339:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b33c:	85 c0                	test   eax,eax
c001b33e:	75 0b                	jne    c001b34b <sysCallRealpath(regs*)+0x20>
c001b340:	b8 01 00 00 00       	mov    eax,0x1
c001b345:	31 d2                	xor    edx,edx
c001b347:	83 c4 0c             	add    esp,0xc
c001b34a:	c3                   	ret    
c001b34b:	51                   	push   ecx
c001b34c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b352:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b355:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b35b:	51                   	push   ecx
c001b35c:	52                   	push   edx
c001b35d:	50                   	push   eax
c001b35e:	e8 e1 77 ff ff       	call   c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	31 c0                	xor    eax,eax
c001b368:	31 d2                	xor    edx,edx
c001b36a:	83 c4 0c             	add    esp,0xc
c001b36d:	c3                   	ret    

c001b36e <sysCallReadDir(regs*)>:
c001b36e:	53                   	push   ebx
c001b36f:	83 ec 18             	sub    esp,0x18
c001b372:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b376:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b379:	83 f8 02             	cmp    eax,0x2
c001b37c:	76 60                	jbe    c001b3de <sysCallReadDir(regs*)+0x70>
c001b37e:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b385:	77 48                	ja     c001b3cf <sysCallReadDir(regs*)+0x61>
c001b387:	83 ec 0c             	sub    esp,0xc
c001b38a:	50                   	push   eax
c001b38b:	e8 37 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b390:	83 c4 10             	add    esp,0x10
c001b393:	85 c0                	test   eax,eax
c001b395:	74 38                	je     c001b3cf <sysCallReadDir(regs*)+0x61>
c001b397:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b39f:	83 ec 0c             	sub    esp,0xc
c001b3a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3a4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b3a8:	51                   	push   ecx
c001b3a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ac:	6a 00                	push   0x0
c001b3ae:	68 10 01 00 00       	push   0x110
c001b3b3:	50                   	push   eax
c001b3b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b3b7:	83 c4 20             	add    esp,0x20
c001b3ba:	85 c0                	test   eax,eax
c001b3bc:	74 29                	je     c001b3e7 <sysCallReadDir(regs*)+0x79>
c001b3be:	83 f8 07             	cmp    eax,0x7
c001b3c1:	74 1b                	je     c001b3de <sysCallReadDir(regs*)+0x70>
c001b3c3:	b8 02 00 00 00       	mov    eax,0x2
c001b3c8:	31 d2                	xor    edx,edx
c001b3ca:	83 c4 18             	add    esp,0x18
c001b3cd:	5b                   	pop    ebx
c001b3ce:	c3                   	ret    
c001b3cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3d9:	83 c4 18             	add    esp,0x18
c001b3dc:	5b                   	pop    ebx
c001b3dd:	c3                   	ret    
c001b3de:	b8 01 00 00 00       	mov    eax,0x1
c001b3e3:	31 d2                	xor    edx,edx
c001b3e5:	eb e3                	jmp    c001b3ca <sysCallReadDir(regs*)+0x5c>
c001b3e7:	31 c0                	xor    eax,eax
c001b3e9:	31 d2                	xor    edx,edx
c001b3eb:	eb dd                	jmp    c001b3ca <sysCallReadDir(regs*)+0x5c>

c001b3ed <sysCallIsATTY(regs*)>:
c001b3ed:	83 ec 0c             	sub    esp,0xc
c001b3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3f7:	83 f8 02             	cmp    eax,0x2
c001b3fa:	76 07                	jbe    c001b403 <sysCallIsATTY(regs*)+0x16>
c001b3fc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b401:	75 26                	jne    c001b429 <sysCallIsATTY(regs*)+0x3c>
c001b403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b408:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b40b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b411:	85 c0                	test   eax,eax
c001b413:	74 24                	je     c001b439 <sysCallIsATTY(regs*)+0x4c>
c001b415:	83 ec 0c             	sub    esp,0xc
c001b418:	8b 10                	mov    edx,DWORD PTR [eax]
c001b41a:	50                   	push   eax
c001b41b:	ff 12                	call   DWORD PTR [edx]
c001b41d:	31 d2                	xor    edx,edx
c001b41f:	0f b6 c0             	movzx  eax,al
c001b422:	83 c4 10             	add    esp,0x10
c001b425:	83 c4 0c             	add    esp,0xc
c001b428:	c3                   	ret    
c001b429:	83 ec 0c             	sub    esp,0xc
c001b42c:	50                   	push   eax
c001b42d:	e8 95 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b432:	83 c4 10             	add    esp,0x10
c001b435:	85 c0                	test   eax,eax
c001b437:	75 dc                	jne    c001b415 <sysCallIsATTY(regs*)+0x28>
c001b439:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b43e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b443:	83 c4 0c             	add    esp,0xc
c001b446:	c3                   	ret    

c001b447 <sysCallSeek(regs*)>:
c001b447:	53                   	push   ebx
c001b448:	83 ec 08             	sub    esp,0x8
c001b44b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b44f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b452:	8d 50 fd             	lea    edx,[eax-0x3]
c001b455:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b45b:	77 32                	ja     c001b48f <sysCallSeek(regs*)+0x48>
c001b45d:	83 ec 0c             	sub    esp,0xc
c001b460:	50                   	push   eax
c001b461:	e8 61 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b466:	83 c4 0c             	add    esp,0xc
c001b469:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b46c:	31 db                	xor    ebx,ebx
c001b46e:	53                   	push   ebx
c001b46f:	51                   	push   ecx
c001b470:	50                   	push   eax
c001b471:	e8 9a 79 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001b476:	83 c4 10             	add    esp,0x10
c001b479:	85 c0                	test   eax,eax
c001b47b:	0f 95 c0             	setne  al
c001b47e:	31 d2                	xor    edx,edx
c001b480:	0f b6 c0             	movzx  eax,al
c001b483:	f7 d8                	neg    eax
c001b485:	83 d2 00             	adc    edx,0x0
c001b488:	83 c4 08             	add    esp,0x8
c001b48b:	f7 da                	neg    edx
c001b48d:	5b                   	pop    ebx
c001b48e:	c3                   	ret    
c001b48f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b494:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b499:	83 c4 08             	add    esp,0x8
c001b49c:	5b                   	pop    ebx
c001b49d:	c3                   	ret    

c001b49e <sysCallTell(regs*)>:
c001b49e:	53                   	push   ebx
c001b49f:	83 ec 08             	sub    esp,0x8
c001b4a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4a9:	83 f8 02             	cmp    eax,0x2
c001b4ac:	76 4d                	jbe    c001b4fb <sysCallTell(regs*)+0x5d>
c001b4ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4b3:	76 19                	jbe    c001b4ce <sysCallTell(regs*)+0x30>
c001b4b5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b4b8:	31 d2                	xor    edx,edx
c001b4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4c7:	31 c0                	xor    eax,eax
c001b4c9:	83 c4 08             	add    esp,0x8
c001b4cc:	5b                   	pop    ebx
c001b4cd:	c3                   	ret    
c001b4ce:	83 ec 0c             	sub    esp,0xc
c001b4d1:	50                   	push   eax
c001b4d2:	e8 f0 5b ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b4d7:	5a                   	pop    edx
c001b4d8:	59                   	pop    ecx
c001b4d9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4dc:	50                   	push   eax
c001b4dd:	e8 84 79 ff ff       	call   c0012e66 <File::tell(unsigned long long*)>
c001b4e2:	83 c4 10             	add    esp,0x10
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	0f 95 c0             	setne  al
c001b4ea:	31 d2                	xor    edx,edx
c001b4ec:	0f b6 c0             	movzx  eax,al
c001b4ef:	f7 d8                	neg    eax
c001b4f1:	83 d2 00             	adc    edx,0x0
c001b4f4:	83 c4 08             	add    esp,0x8
c001b4f7:	f7 da                	neg    edx
c001b4f9:	5b                   	pop    ebx
c001b4fa:	c3                   	ret    
c001b4fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b500:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b505:	83 c4 08             	add    esp,0x8
c001b508:	5b                   	pop    ebx
c001b509:	c3                   	ret    

c001b50a <sysCallSize(regs*)>:
c001b50a:	53                   	push   ebx
c001b50b:	83 ec 18             	sub    esp,0x18
c001b50e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b512:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b515:	83 f8 02             	cmp    eax,0x2
c001b518:	76 53                	jbe    c001b56d <sysCallSize(regs*)+0x63>
c001b51a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b51f:	76 19                	jbe    c001b53a <sysCallSize(regs*)+0x30>
c001b521:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b524:	31 d2                	xor    edx,edx
c001b526:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b52c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b533:	31 c0                	xor    eax,eax
c001b535:	83 c4 18             	add    esp,0x18
c001b538:	5b                   	pop    ebx
c001b539:	c3                   	ret    
c001b53a:	83 ec 0c             	sub    esp,0xc
c001b53d:	50                   	push   eax
c001b53e:	e8 84 5b ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b543:	83 c4 0c             	add    esp,0xc
c001b546:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b54a:	52                   	push   edx
c001b54b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b54e:	50                   	push   eax
c001b54f:	e8 aa 7a ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c001b554:	83 c4 10             	add    esp,0x10
c001b557:	85 c0                	test   eax,eax
c001b559:	0f 95 c0             	setne  al
c001b55c:	31 d2                	xor    edx,edx
c001b55e:	0f b6 c0             	movzx  eax,al
c001b561:	f7 d8                	neg    eax
c001b563:	83 d2 00             	adc    edx,0x0
c001b566:	83 c4 18             	add    esp,0x18
c001b569:	f7 da                	neg    edx
c001b56b:	5b                   	pop    ebx
c001b56c:	c3                   	ret    
c001b56d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b572:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b577:	83 c4 18             	add    esp,0x18
c001b57a:	5b                   	pop    ebx
c001b57b:	c3                   	ret    

c001b57c <sysCallSizeFromFilename(regs*)>:
c001b57c:	57                   	push   edi
c001b57d:	56                   	push   esi
c001b57e:	53                   	push   ebx
c001b57f:	83 ec 20             	sub    esp,0x20
c001b582:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b586:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b589:	83 fb 02             	cmp    ebx,0x2
c001b58c:	0f 86 88 00 00 00    	jbe    c001b61a <sysCallSizeFromFilename(regs*)+0x9e>
c001b592:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b598:	76 1b                	jbe    c001b5b5 <sysCallSizeFromFilename(regs*)+0x39>
c001b59a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b59d:	31 d2                	xor    edx,edx
c001b59f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5ac:	83 c4 20             	add    esp,0x20
c001b5af:	31 c0                	xor    eax,eax
c001b5b1:	5b                   	pop    ebx
c001b5b2:	5e                   	pop    esi
c001b5b3:	5f                   	pop    edi
c001b5b4:	c3                   	ret    
c001b5b5:	83 ec 0c             	sub    esp,0xc
c001b5b8:	68 14 01 00 00       	push   0x114
c001b5bd:	e8 d7 3f ff ff       	call   c000f599 <malloc>
c001b5c2:	83 c4 0c             	add    esp,0xc
c001b5c5:	89 c7                	mov    edi,eax
c001b5c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5cc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5cf:	53                   	push   ebx
c001b5d0:	57                   	push   edi
c001b5d1:	e8 18 77 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001b5d6:	83 c4 0c             	add    esp,0xc
c001b5d9:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b5dd:	50                   	push   eax
c001b5de:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5e1:	57                   	push   edi
c001b5e2:	e8 17 7a ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	85 ff                	test   edi,edi
c001b5ec:	74 14                	je     c001b602 <sysCallSizeFromFilename(regs*)+0x86>
c001b5ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5f2:	8b 17                	mov    edx,DWORD PTR [edi]
c001b5f4:	83 ec 0c             	sub    esp,0xc
c001b5f7:	57                   	push   edi
c001b5f8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b602:	85 c0                	test   eax,eax
c001b604:	0f 95 c0             	setne  al
c001b607:	31 d2                	xor    edx,edx
c001b609:	0f b6 c0             	movzx  eax,al
c001b60c:	f7 d8                	neg    eax
c001b60e:	83 d2 00             	adc    edx,0x0
c001b611:	83 c4 20             	add    esp,0x20
c001b614:	f7 da                	neg    edx
c001b616:	5b                   	pop    ebx
c001b617:	5e                   	pop    esi
c001b618:	5f                   	pop    edi
c001b619:	c3                   	ret    
c001b61a:	83 c4 20             	add    esp,0x20
c001b61d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b622:	5b                   	pop    ebx
c001b623:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b628:	5e                   	pop    esi
c001b629:	5f                   	pop    edi
c001b62a:	c3                   	ret    

c001b62b <sysCallClose(regs*)>:
c001b62b:	53                   	push   ebx
c001b62c:	83 ec 08             	sub    esp,0x8
c001b62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b633:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b636:	83 f8 02             	cmp    eax,0x2
c001b639:	76 41                	jbe    c001b67c <sysCallClose(regs*)+0x51>
c001b63b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b641:	83 fa 01             	cmp    edx,0x1
c001b644:	76 2d                	jbe    c001b673 <sysCallClose(regs*)+0x48>
c001b646:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b64b:	77 2f                	ja     c001b67c <sysCallClose(regs*)+0x51>
c001b64d:	83 ec 0c             	sub    esp,0xc
c001b650:	50                   	push   eax
c001b651:	e8 71 5a ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b656:	89 c3                	mov    ebx,eax
c001b658:	89 04 24             	mov    DWORD PTR [esp],eax
c001b65b:	e8 50 77 ff ff       	call   c0012db0 <File::close()>
c001b660:	83 c4 10             	add    esp,0x10
c001b663:	85 db                	test   ebx,ebx
c001b665:	74 0c                	je     c001b673 <sysCallClose(regs*)+0x48>
c001b667:	83 ec 0c             	sub    esp,0xc
c001b66a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b66c:	53                   	push   ebx
c001b66d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	31 c0                	xor    eax,eax
c001b675:	31 d2                	xor    edx,edx
c001b677:	83 c4 08             	add    esp,0x8
c001b67a:	5b                   	pop    ebx
c001b67b:	c3                   	ret    
c001b67c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b681:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b686:	83 c4 08             	add    esp,0x8
c001b689:	5b                   	pop    ebx
c001b68a:	c3                   	ret    

c001b68b <sysCallOpenDir(regs*)>:
c001b68b:	56                   	push   esi
c001b68c:	53                   	push   ebx
c001b68d:	53                   	push   ebx
c001b68e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b692:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b695:	85 f6                	test   esi,esi
c001b697:	74 59                	je     c001b6f2 <sysCallOpenDir(regs*)+0x67>
c001b699:	83 ec 0c             	sub    esp,0xc
c001b69c:	68 14 01 00 00       	push   0x114
c001b6a1:	e8 f3 3e ff ff       	call   c000f599 <malloc>
c001b6a6:	83 c4 0c             	add    esp,0xc
c001b6a9:	89 c6                	mov    esi,eax
c001b6ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6b6:	56                   	push   esi
c001b6b7:	e8 de 7a ff ff       	call   c001319a <Directory::Directory(char const*, Process*)>
c001b6bc:	83 c4 10             	add    esp,0x10
c001b6bf:	85 f6                	test   esi,esi
c001b6c1:	74 2f                	je     c001b6f2 <sysCallOpenDir(regs*)+0x67>
c001b6c3:	83 ec 0c             	sub    esp,0xc
c001b6c6:	56                   	push   esi
c001b6c7:	e8 32 7b ff ff       	call   c00131fe <Directory::open()>
c001b6cc:	83 c4 10             	add    esp,0x10
c001b6cf:	85 c0                	test   eax,eax
c001b6d1:	75 1f                	jne    c001b6f2 <sysCallOpenDir(regs*)+0x67>
c001b6d3:	83 ec 0c             	sub    esp,0xc
c001b6d6:	56                   	push   esi
c001b6d7:	e8 f6 56 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001b6dc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b6df:	83 c4 10             	add    esp,0x10
c001b6e2:	89 02                	mov    DWORD PTR [edx],eax
c001b6e4:	c1 f8 1f             	sar    eax,0x1f
c001b6e7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b6ea:	31 c0                	xor    eax,eax
c001b6ec:	59                   	pop    ecx
c001b6ed:	31 d2                	xor    edx,edx
c001b6ef:	5b                   	pop    ebx
c001b6f0:	5e                   	pop    esi
c001b6f1:	c3                   	ret    
c001b6f2:	59                   	pop    ecx
c001b6f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6fd:	5b                   	pop    ebx
c001b6fe:	5e                   	pop    esi
c001b6ff:	c3                   	ret    

c001b700 <sysCallCloseDir(regs*)>:
c001b700:	53                   	push   ebx
c001b701:	83 ec 08             	sub    esp,0x8
c001b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b708:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b70b:	8d 50 fd             	lea    edx,[eax-0x3]
c001b70e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b714:	77 2f                	ja     c001b745 <sysCallCloseDir(regs*)+0x45>
c001b716:	83 ec 0c             	sub    esp,0xc
c001b719:	50                   	push   eax
c001b71a:	e8 a8 59 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b71f:	89 c3                	mov    ebx,eax
c001b721:	89 04 24             	mov    DWORD PTR [esp],eax
c001b724:	e8 31 7b ff ff       	call   c001325a <Directory::close()>
c001b729:	83 c4 10             	add    esp,0x10
c001b72c:	85 db                	test   ebx,ebx
c001b72e:	74 0c                	je     c001b73c <sysCallCloseDir(regs*)+0x3c>
c001b730:	83 ec 0c             	sub    esp,0xc
c001b733:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b735:	53                   	push   ebx
c001b736:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b739:	83 c4 10             	add    esp,0x10
c001b73c:	31 c0                	xor    eax,eax
c001b73e:	31 d2                	xor    edx,edx
c001b740:	83 c4 08             	add    esp,0x8
c001b743:	5b                   	pop    ebx
c001b744:	c3                   	ret    
c001b745:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b74a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74f:	83 c4 08             	add    esp,0x8
c001b752:	5b                   	pop    ebx
c001b753:	c3                   	ret    

c001b754 <sysCallMakeDir(regs*)>:
c001b754:	56                   	push   esi
c001b755:	53                   	push   ebx
c001b756:	83 ec 10             	sub    esp,0x10
c001b759:	68 14 01 00 00       	push   0x114
c001b75e:	e8 36 3e ff ff       	call   c000f599 <malloc>
c001b763:	83 c4 0c             	add    esp,0xc
c001b766:	89 c3                	mov    ebx,eax
c001b768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b76d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b774:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b777:	53                   	push   ebx
c001b778:	e8 1d 7a ff ff       	call   c001319a <Directory::Directory(char const*, Process*)>
c001b77d:	83 c4 10             	add    esp,0x10
c001b780:	85 db                	test   ebx,ebx
c001b782:	74 32                	je     c001b7b6 <sysCallMakeDir(regs*)+0x62>
c001b784:	83 ec 0c             	sub    esp,0xc
c001b787:	53                   	push   ebx
c001b788:	e8 51 7c ff ff       	call   c00133de <Directory::create()>
c001b78d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b790:	89 c6                	mov    esi,eax
c001b792:	e8 c3 7a ff ff       	call   c001325a <Directory::close()>
c001b797:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b79c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b79f:	83 c4 10             	add    esp,0x10
c001b7a2:	31 c0                	xor    eax,eax
c001b7a4:	59                   	pop    ecx
c001b7a5:	85 f6                	test   esi,esi
c001b7a7:	5b                   	pop    ebx
c001b7a8:	0f 95 c0             	setne  al
c001b7ab:	5e                   	pop    esi
c001b7ac:	31 d2                	xor    edx,edx
c001b7ae:	f7 d8                	neg    eax
c001b7b0:	83 d2 00             	adc    edx,0x0
c001b7b3:	f7 da                	neg    edx
c001b7b5:	c3                   	ret    
c001b7b6:	59                   	pop    ecx
c001b7b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c1:	5b                   	pop    ebx
c001b7c2:	5e                   	pop    esi
c001b7c3:	c3                   	ret    

c001b7c4 <sysCallWait(regs*)>:
c001b7c4:	83 ec 10             	sub    esp,0x10
c001b7c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7cb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b7ce:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7d1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7d4:	e8 b5 24 00 00       	call   c001dc8e <waitTask(int, int*, int)>
c001b7d9:	83 c4 1c             	add    esp,0x1c
c001b7dc:	99                   	cdq    
c001b7dd:	c3                   	ret    

c001b7de <sysCallNotImpl(regs*)>:
c001b7de:	83 ec 18             	sub    esp,0x18
c001b7e1:	68 19 ba 02 c0       	push   0xc002ba19
c001b7e6:	e8 10 e7 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001b7eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7f5:	83 c4 1c             	add    esp,0x1c
c001b7f8:	c3                   	ret    

c001b7f9 <sysPanic(regs*)>:
c001b7f9:	83 ec 18             	sub    esp,0x18
c001b7fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b800:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b803:	e8 f3 e6 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001b808:	b8 01 00 00 00       	mov    eax,0x1
c001b80d:	31 d2                	xor    edx,edx
c001b80f:	83 c4 1c             	add    esp,0x1c
c001b812:	c3                   	ret    

c001b813 <sysCallRmdir(regs*)>:
c001b813:	56                   	push   esi
c001b814:	53                   	push   ebx
c001b815:	83 ec 20             	sub    esp,0x20
c001b818:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b81c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b81f:	68 14 01 00 00       	push   0x114
c001b824:	e8 70 3d ff ff       	call   c000f599 <malloc>
c001b829:	83 c4 0c             	add    esp,0xc
c001b82c:	89 c3                	mov    ebx,eax
c001b82e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b833:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b836:	56                   	push   esi
c001b837:	53                   	push   ebx
c001b838:	e8 b1 74 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001b83d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b840:	e8 85 76 ff ff       	call   c0012eca <File::unlink()>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	85 db                	test   ebx,ebx
c001b84a:	74 14                	je     c001b860 <sysCallRmdir(regs*)+0x4d>
c001b84c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b850:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b852:	83 ec 0c             	sub    esp,0xc
c001b855:	53                   	push   ebx
c001b856:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b860:	85 c0                	test   eax,eax
c001b862:	0f 95 c0             	setne  al
c001b865:	31 d2                	xor    edx,edx
c001b867:	0f b6 c0             	movzx  eax,al
c001b86a:	f7 d8                	neg    eax
c001b86c:	83 d2 00             	adc    edx,0x0
c001b86f:	83 c4 14             	add    esp,0x14
c001b872:	f7 da                	neg    edx
c001b874:	5b                   	pop    ebx
c001b875:	5e                   	pop    esi
c001b876:	c3                   	ret    

c001b877 <sysCallUnlink(regs*)>:
c001b877:	56                   	push   esi
c001b878:	53                   	push   ebx
c001b879:	83 ec 20             	sub    esp,0x20
c001b87c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b880:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b883:	68 14 01 00 00       	push   0x114
c001b888:	e8 0c 3d ff ff       	call   c000f599 <malloc>
c001b88d:	83 c4 0c             	add    esp,0xc
c001b890:	89 c3                	mov    ebx,eax
c001b892:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b897:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b89a:	56                   	push   esi
c001b89b:	53                   	push   ebx
c001b89c:	e8 4d 74 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001b8a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8a4:	e8 21 76 ff ff       	call   c0012eca <File::unlink()>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	85 db                	test   ebx,ebx
c001b8ae:	74 14                	je     c001b8c4 <sysCallUnlink(regs*)+0x4d>
c001b8b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b8b6:	83 ec 0c             	sub    esp,0xc
c001b8b9:	53                   	push   ebx
c001b8ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8c4:	85 c0                	test   eax,eax
c001b8c6:	0f 95 c0             	setne  al
c001b8c9:	31 d2                	xor    edx,edx
c001b8cb:	0f b6 c0             	movzx  eax,al
c001b8ce:	f7 d8                	neg    eax
c001b8d0:	83 d2 00             	adc    edx,0x0
c001b8d3:	83 c4 14             	add    esp,0x14
c001b8d6:	f7 da                	neg    edx
c001b8d8:	5b                   	pop    ebx
c001b8d9:	5e                   	pop    esi
c001b8da:	c3                   	ret    

c001b8db <sysCallGetArgv(regs*)>:
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8e2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b8e5:	85 c0                	test   eax,eax
c001b8e7:	78 2b                	js     c001b914 <sysCallGetArgv(regs*)+0x39>
c001b8e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ef:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8f2:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b8f8:	7d 1a                	jge    c001b914 <sysCallGetArgv(regs*)+0x39>
c001b8fa:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b901:	85 c0                	test   eax,eax
c001b903:	74 17                	je     c001b91c <sysCallGetArgv(regs*)+0x41>
c001b905:	83 ec 08             	sub    esp,0x8
c001b908:	50                   	push   eax
c001b909:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b90c:	e8 fb 4e fe ff       	call   c000080c <strcpy>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	31 c0                	xor    eax,eax
c001b916:	31 d2                	xor    edx,edx
c001b918:	83 c4 0c             	add    esp,0xc
c001b91b:	c3                   	ret    
c001b91c:	b8 01 00 00 00       	mov    eax,0x1
c001b921:	31 d2                	xor    edx,edx
c001b923:	83 c4 0c             	add    esp,0xc
c001b926:	c3                   	ret    

c001b927 <sysCallTTYName(regs*)>:
c001b927:	56                   	push   esi
c001b928:	53                   	push   ebx
c001b929:	53                   	push   ebx
c001b92a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b92e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b931:	85 c0                	test   eax,eax
c001b933:	74 5f                	je     c001b994 <sysCallTTYName(regs*)+0x6d>
c001b935:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b938:	83 f8 02             	cmp    eax,0x2
c001b93b:	77 3e                	ja     c001b97b <sysCallTTYName(regs*)+0x54>
c001b93d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b945:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b94b:	85 db                	test   ebx,ebx
c001b94d:	74 45                	je     c001b994 <sysCallTTYName(regs*)+0x6d>
c001b94f:	83 ec 0c             	sub    esp,0xc
c001b952:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b954:	53                   	push   ebx
c001b955:	ff 10                	call   DWORD PTR [eax]
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	84 c0                	test   al,al
c001b95c:	74 41                	je     c001b99f <sysCallTTYName(regs*)+0x78>
c001b95e:	83 ec 08             	sub    esp,0x8
c001b961:	81 c3 82 00 00 00    	add    ebx,0x82
c001b967:	53                   	push   ebx
c001b968:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b96b:	e8 9c 4e fe ff       	call   c000080c <strcpy>
c001b970:	83 c4 10             	add    esp,0x10
c001b973:	31 c0                	xor    eax,eax
c001b975:	59                   	pop    ecx
c001b976:	31 d2                	xor    edx,edx
c001b978:	5b                   	pop    ebx
c001b979:	5e                   	pop    esi
c001b97a:	c3                   	ret    
c001b97b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b980:	74 bb                	je     c001b93d <sysCallTTYName(regs*)+0x16>
c001b982:	83 ec 0c             	sub    esp,0xc
c001b985:	50                   	push   eax
c001b986:	e8 3c 57 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b98b:	83 c4 10             	add    esp,0x10
c001b98e:	89 c3                	mov    ebx,eax
c001b990:	85 db                	test   ebx,ebx
c001b992:	75 bb                	jne    c001b94f <sysCallTTYName(regs*)+0x28>
c001b994:	59                   	pop    ecx
c001b995:	b8 01 00 00 00       	mov    eax,0x1
c001b99a:	31 d2                	xor    edx,edx
c001b99c:	5b                   	pop    ebx
c001b99d:	5e                   	pop    esi
c001b99e:	c3                   	ret    
c001b99f:	59                   	pop    ecx
c001b9a0:	b8 02 00 00 00       	mov    eax,0x2
c001b9a5:	31 d2                	xor    edx,edx
c001b9a7:	5b                   	pop    ebx
c001b9a8:	5e                   	pop    esi
c001b9a9:	c3                   	ret    

c001b9aa <sysCallUSleep(regs*)>:
c001b9aa:	83 ec 14             	sub    esp,0x14
c001b9ad:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b9b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9b6:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b9bd:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b9c0:	01 ca                	add    edx,ecx
c001b9c2:	52                   	push   edx
c001b9c3:	50                   	push   eax
c001b9c4:	e8 9c 23 00 00       	call   c001dd65 <nanoSleep(unsigned long long)>
c001b9c9:	31 c0                	xor    eax,eax
c001b9cb:	31 d2                	xor    edx,edx
c001b9cd:	83 c4 1c             	add    esp,0x1c
c001b9d0:	c3                   	ret    

c001b9d1 <sysCallSpawn(regs*)>:
c001b9d1:	56                   	push   esi
c001b9d2:	53                   	push   ebx
c001b9d3:	50                   	push   eax
c001b9d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b9db:	85 c0                	test   eax,eax
c001b9dd:	75 08                	jne    c001b9e7 <sysCallSpawn(regs*)+0x16>
c001b9df:	59                   	pop    ecx
c001b9e0:	31 c0                	xor    eax,eax
c001b9e2:	31 d2                	xor    edx,edx
c001b9e4:	5b                   	pop    ebx
c001b9e5:	5e                   	pop    esi
c001b9e6:	c3                   	ret    
c001b9e7:	83 ec 0c             	sub    esp,0xc
c001b9ea:	68 3f 07 00 00       	push   0x73f
c001b9ef:	e8 a5 3b ff ff       	call   c000f599 <malloc>
c001b9f4:	83 c4 10             	add    esp,0x10
c001b9f7:	89 c6                	mov    esi,eax
c001b9f9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b9fc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9ff:	85 c0                	test   eax,eax
c001ba01:	75 32                	jne    c001ba35 <sysCallSpawn(regs*)+0x64>
c001ba03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba0b:	52                   	push   edx
c001ba0c:	50                   	push   eax
c001ba0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba10:	56                   	push   esi
c001ba11:	e8 74 1a 00 00       	call   c001d48a <Process::Process(char const*, Process*, char**)>
c001ba16:	83 c4 10             	add    esp,0x10
c001ba19:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001ba20:	75 bd                	jne    c001b9df <sysCallSpawn(regs*)+0xe>
c001ba22:	83 ec 0c             	sub    esp,0xc
c001ba25:	56                   	push   esi
c001ba26:	e8 41 1f 00 00       	call   c001d96c <Process::createUserThread()>
c001ba2b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	99                   	cdq    
c001ba31:	59                   	pop    ecx
c001ba32:	5b                   	pop    ebx
c001ba33:	5e                   	pop    esi
c001ba34:	c3                   	ret    
c001ba35:	31 c0                	xor    eax,eax
c001ba37:	eb d2                	jmp    c001ba0b <sysCallSpawn(regs*)+0x3a>

c001ba39 <sysCallGetEnv(regs*)>:
c001ba39:	57                   	push   edi
c001ba3a:	56                   	push   esi
c001ba3b:	53                   	push   ebx
c001ba3c:	83 ec 1c             	sub    esp,0x1c
c001ba3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba48:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001ba4b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001ba4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba51:	e8 f1 e3 ff ff       	call   c0019e47 <Krnl::getProcessTotalEnvCount(Process*)>
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	39 c7                	cmp    edi,eax
c001ba5b:	7c 14                	jl     c001ba71 <sysCallGetEnv(regs*)+0x38>
c001ba5d:	85 f6                	test   esi,esi
c001ba5f:	75 0b                	jne    c001ba6c <sysCallGetEnv(regs*)+0x33>
c001ba61:	83 c4 10             	add    esp,0x10
c001ba64:	31 c0                	xor    eax,eax
c001ba66:	5b                   	pop    ebx
c001ba67:	31 d2                	xor    edx,edx
c001ba69:	5e                   	pop    esi
c001ba6a:	5f                   	pop    edi
c001ba6b:	c3                   	ret    
c001ba6c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba6f:	eb f0                	jmp    c001ba61 <sysCallGetEnv(regs*)+0x28>
c001ba71:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba75:	52                   	push   edx
c001ba76:	57                   	push   edi
c001ba77:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ba7d:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001ba80:	50                   	push   eax
c001ba81:	e8 e1 e3 ff ff       	call   c0019e67 <Krnl::getProcessEnvPair(Process*, int)>
c001ba86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba91:	83 c4 0c             	add    esp,0xc
c001ba94:	85 c9                	test   ecx,ecx
c001ba96:	75 23                	jne    c001babb <sysCallGetEnv(regs*)+0x82>
c001ba98:	83 ec 0c             	sub    esp,0xc
c001ba9b:	50                   	push   eax
c001ba9c:	e8 cb 4c fe ff       	call   c000076c <strlen>
c001baa1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001baa4:	89 c3                	mov    ebx,eax
c001baa6:	e8 c1 4c fe ff       	call   c000076c <strlen>
c001baab:	83 c4 10             	add    esp,0x10
c001baae:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bab2:	83 c4 10             	add    esp,0x10
c001bab5:	31 d2                	xor    edx,edx
c001bab7:	5b                   	pop    ebx
c001bab8:	5e                   	pop    esi
c001bab9:	5f                   	pop    edi
c001baba:	c3                   	ret    
c001babb:	83 ec 08             	sub    esp,0x8
c001babe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bac1:	50                   	push   eax
c001bac2:	56                   	push   esi
c001bac3:	e8 44 4d fe ff       	call   c000080c <strcpy>
c001bac8:	58                   	pop    eax
c001bac9:	5a                   	pop    edx
c001baca:	68 33 ba 02 c0       	push   0xc002ba33
c001bacf:	56                   	push   esi
c001bad0:	e8 77 4e fe ff       	call   c000094c <strcat>
c001bad5:	59                   	pop    ecx
c001bad6:	5b                   	pop    ebx
c001bad7:	57                   	push   edi
c001bad8:	56                   	push   esi
c001bad9:	e8 6e 4e fe ff       	call   c000094c <strcat>
c001bade:	83 c4 10             	add    esp,0x10
c001bae1:	e9 7b ff ff ff       	jmp    c001ba61 <sysCallGetEnv(regs*)+0x28>

c001bae6 <sysAppSettings(regs*)>:
c001bae6:	57                   	push   edi
c001bae7:	56                   	push   esi
c001bae8:	56                   	push   esi
c001bae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baed:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001baf0:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001baf6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bafb:	66 3d c0 09          	cmp    ax,0x9c0
c001baff:	75 2e                	jne    c001bb2f <sysAppSettings(regs*)+0x49>
c001bb01:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bb07:	83 e0 1f             	and    eax,0x1f
c001bb0a:	3c 01                	cmp    al,0x1
c001bb0c:	74 2c                	je     c001bb3a <sysAppSettings(regs*)+0x54>
c001bb0e:	3c 07                	cmp    al,0x7
c001bb10:	0f 84 b3 00 00 00    	je     c001bbc9 <sysAppSettings(regs*)+0xe3>
c001bb16:	84 c0                	test   al,al
c001bb18:	0f 84 d2 00 00 00    	je     c001bbf0 <sysAppSettings(regs*)+0x10a>
c001bb1e:	3c 08                	cmp    al,0x8
c001bb20:	74 63                	je     c001bb85 <sysAppSettings(regs*)+0x9f>
c001bb22:	59                   	pop    ecx
c001bb23:	0f b6 c0             	movzx  eax,al
c001bb26:	5e                   	pop    esi
c001bb27:	05 e8 03 00 00       	add    eax,0x3e8
c001bb2c:	5f                   	pop    edi
c001bb2d:	99                   	cdq    
c001bb2e:	c3                   	ret    
c001bb2f:	b8 01 00 00 00       	mov    eax,0x1
c001bb34:	59                   	pop    ecx
c001bb35:	31 d2                	xor    edx,edx
c001bb37:	5e                   	pop    esi
c001bb38:	5f                   	pop    edi
c001bb39:	c3                   	ret    
c001bb3a:	50                   	push   eax
c001bb3b:	68 00 01 00 00       	push   0x100
c001bb40:	6a 00                	push   0x0
c001bb42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb4a:	83 c0 0c             	add    eax,0xc
c001bb4d:	50                   	push   eax
c001bb4e:	e8 fd 4b fe ff       	call   c0000750 <memset>
c001bb53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb58:	b9 ff 00 00 00       	mov    ecx,0xff
c001bb5d:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bb60:	83 c7 0c             	add    edi,0xc
c001bb63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb6a:	5a                   	pop    edx
c001bb6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb6e:	59                   	pop    ecx
c001bb6f:	8d 50 0c             	lea    edx,[eax+0xc]
c001bb72:	52                   	push   edx
c001bb73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb79:	e8 74 46 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bb7e:	83 c4 10             	add    esp,0x10
c001bb81:	31 c0                	xor    eax,eax
c001bb83:	eb af                	jmp    c001bb34 <sysAppSettings(regs*)+0x4e>
c001bb85:	83 ec 08             	sub    esp,0x8
c001bb88:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb8e:	83 e0 0f             	and    eax,0xf
c001bb91:	50                   	push   eax
c001bb92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bba0:	e8 3d 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bba5:	5f                   	pop    edi
c001bba6:	58                   	pop    eax
c001bba7:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bbad:	c1 e8 04             	shr    eax,0x4
c001bbb0:	83 e0 0f             	and    eax,0xf
c001bbb3:	50                   	push   eax
c001bbb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bbc2:	e8 0b 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bbc7:	eb b5                	jmp    c001bb7e <sysAppSettings(regs*)+0x98>
c001bbc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbd1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bbd7:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bbdd:	c0 e8 06             	shr    al,0x6
c001bbe0:	83 e0 01             	and    eax,0x1
c001bbe3:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bbe9:	31 c0                	xor    eax,eax
c001bbeb:	e9 44 ff ff ff       	jmp    c001bb34 <sysAppSettings(regs*)+0x4e>
c001bbf0:	b8 02 00 00 00       	mov    eax,0x2
c001bbf5:	e9 3a ff ff ff       	jmp    c001bb34 <sysAppSettings(regs*)+0x4e>

c001bbfa <sysSetFatAttrib(regs*)>:
c001bbfa:	57                   	push   edi
c001bbfb:	56                   	push   esi
c001bbfc:	53                   	push   ebx
c001bbfd:	83 ec 1c             	sub    esp,0x1c
c001bc00:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bc04:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bc07:	68 14 01 00 00       	push   0x114
c001bc0c:	e8 88 39 ff ff       	call   c000f599 <malloc>
c001bc11:	83 c4 0c             	add    esp,0xc
c001bc14:	89 c3                	mov    ebx,eax
c001bc16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc1e:	57                   	push   edi
c001bc1f:	53                   	push   ebx
c001bc20:	e8 c9 70 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001bc25:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bc28:	83 c4 0c             	add    esp,0xc
c001bc2b:	0f b6 d4             	movzx  edx,ah
c001bc2e:	0f b6 c0             	movzx  eax,al
c001bc31:	52                   	push   edx
c001bc32:	50                   	push   eax
c001bc33:	53                   	push   ebx
c001bc34:	e8 2b 73 ff ff       	call   c0012f64 <File::chfatattr(unsigned char, unsigned char)>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	85 db                	test   ebx,ebx
c001bc3e:	74 14                	je     c001bc54 <sysSetFatAttrib(regs*)+0x5a>
c001bc40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc44:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	53                   	push   ebx
c001bc4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc4d:	83 c4 10             	add    esp,0x10
c001bc50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc54:	85 c0                	test   eax,eax
c001bc56:	0f 95 c0             	setne  al
c001bc59:	31 d2                	xor    edx,edx
c001bc5b:	0f b6 c0             	movzx  eax,al
c001bc5e:	f7 d8                	neg    eax
c001bc60:	83 d2 00             	adc    edx,0x0
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	f7 da                	neg    edx
c001bc68:	5b                   	pop    ebx
c001bc69:	5e                   	pop    esi
c001bc6a:	5f                   	pop    edi
c001bc6b:	c3                   	ret    

c001bc6c <sysPipe(regs*)>:
c001bc6c:	57                   	push   edi
c001bc6d:	56                   	push   esi
c001bc6e:	53                   	push   ebx
c001bc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc73:	83 ec 0c             	sub    esp,0xc
c001bc76:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc79:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc7c:	6a 20                	push   0x20
c001bc7e:	e8 16 39 ff ff       	call   c000f599 <malloc>
c001bc83:	89 c3                	mov    ebx,eax
c001bc85:	58                   	pop    eax
c001bc86:	5a                   	pop    edx
c001bc87:	68 00 50 00 00       	push   0x5000
c001bc8c:	53                   	push   ebx
c001bc8d:	e8 d8 42 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bc92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc95:	e8 38 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bc9a:	89 07                	mov    DWORD PTR [edi],eax
c001bc9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc9f:	e8 2e 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bca4:	83 c4 10             	add    esp,0x10
c001bca7:	89 06                	mov    DWORD PTR [esi],eax
c001bca9:	31 d2                	xor    edx,edx
c001bcab:	5b                   	pop    ebx
c001bcac:	31 c0                	xor    eax,eax
c001bcae:	5e                   	pop    esi
c001bcaf:	5f                   	pop    edi
c001bcb0:	c3                   	ret    

c001bcb1 <sysGetUnixTime(regs*)>:
c001bcb1:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001bcb6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bcbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcc0:	e9 1b 7a ff ff       	jmp    c00136e0 <Clock::timeInSecondsLocal()>

c001bcc5 <string_ends_with(char const*, char const*)>:
c001bcc5:	57                   	push   edi
c001bcc6:	56                   	push   esi
c001bcc7:	53                   	push   ebx
c001bcc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bccc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bcd0:	83 ec 0c             	sub    esp,0xc
c001bcd3:	53                   	push   ebx
c001bcd4:	e8 93 4a fe ff       	call   c000076c <strlen>
c001bcd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bcdc:	89 c6                	mov    esi,eax
c001bcde:	e8 89 4a fe ff       	call   c000076c <strlen>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	39 c6                	cmp    esi,eax
c001bce8:	7d 06                	jge    c001bcf0 <string_ends_with(char const*, char const*)+0x2b>
c001bcea:	5b                   	pop    ebx
c001bceb:	31 c0                	xor    eax,eax
c001bced:	5e                   	pop    esi
c001bcee:	5f                   	pop    edi
c001bcef:	c3                   	ret    
c001bcf0:	83 ec 08             	sub    esp,0x8
c001bcf3:	29 c6                	sub    esi,eax
c001bcf5:	57                   	push   edi
c001bcf6:	01 f3                	add    ebx,esi
c001bcf8:	53                   	push   ebx
c001bcf9:	e8 9a 4b fe ff       	call   c0000898 <strcmp>
c001bcfe:	83 c4 10             	add    esp,0x10
c001bd01:	85 c0                	test   eax,eax
c001bd03:	5b                   	pop    ebx
c001bd04:	0f 94 c0             	sete   al
c001bd07:	5e                   	pop    esi
c001bd08:	0f b6 c0             	movzx  eax,al
c001bd0b:	5f                   	pop    edi
c001bd0c:	c3                   	ret    

c001bd0d <sysCallOpen(regs*)>:
c001bd0d:	56                   	push   esi
c001bd0e:	53                   	push   ebx
c001bd0f:	81 ec 04 01 00 00    	sub    esp,0x104
c001bd15:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bd1c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bd1f:	85 c9                	test   ecx,ecx
c001bd21:	0f 84 ad 01 00 00    	je     c001bed4 <sysCallOpen(regs*)+0x1c7>
c001bd27:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bd2a:	85 c0                	test   eax,eax
c001bd2c:	0f 84 a2 01 00 00    	je     c001bed4 <sysCallOpen(regs*)+0x1c7>
c001bd32:	52                   	push   edx
c001bd33:	68 35 ba 02 c0       	push   0xc002ba35
c001bd38:	50                   	push   eax
c001bd39:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bd3d:	56                   	push   esi
c001bd3e:	e8 01 6e ff ff       	call   c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bd43:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd46:	e8 21 4a fe ff       	call   c000076c <strlen>
c001bd4b:	83 c4 10             	add    esp,0x10
c001bd4e:	48                   	dec    eax
c001bd4f:	74 1d                	je     c001bd6e <sysCallOpen(regs*)+0x61>
c001bd51:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bd54:	eb 0f                	jmp    c001bd65 <sysCallOpen(regs*)+0x58>
c001bd56:	80 fa 3a             	cmp    dl,0x3a
c001bd59:	74 0f                	je     c001bd6a <sysCallOpen(regs*)+0x5d>
c001bd5b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bd5f:	48                   	dec    eax
c001bd60:	74 0c                	je     c001bd6e <sysCallOpen(regs*)+0x61>
c001bd62:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bd65:	80 fa 2e             	cmp    dl,0x2e
c001bd68:	75 ec                	jne    c001bd56 <sysCallOpen(regs*)+0x49>
c001bd6a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bd6e:	83 ec 08             	sub    esp,0x8
c001bd71:	68 39 ba 02 c0       	push   0xc002ba39
c001bd76:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd79:	e8 47 ff ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001bd7e:	83 c4 10             	add    esp,0x10
c001bd81:	85 c0                	test   eax,eax
c001bd83:	74 1d                	je     c001bda2 <sysCallOpen(regs*)+0x95>
c001bd85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd88:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd95:	81 c4 04 01 00 00    	add    esp,0x104
c001bd9b:	31 c0                	xor    eax,eax
c001bd9d:	31 d2                	xor    edx,edx
c001bd9f:	5b                   	pop    ebx
c001bda0:	5e                   	pop    esi
c001bda1:	c3                   	ret    
c001bda2:	83 ec 08             	sub    esp,0x8
c001bda5:	68 3e ba 02 c0       	push   0xc002ba3e
c001bdaa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdad:	e8 13 ff ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001bdb2:	83 c4 10             	add    esp,0x10
c001bdb5:	85 c0                	test   eax,eax
c001bdb7:	75 cc                	jne    c001bd85 <sysCallOpen(regs*)+0x78>
c001bdb9:	83 ec 08             	sub    esp,0x8
c001bdbc:	68 3a ba 02 c0       	push   0xc002ba3a
c001bdc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdc4:	e8 cf 4a fe ff       	call   c0000898 <strcmp>
c001bdc9:	83 c4 10             	add    esp,0x10
c001bdcc:	85 c0                	test   eax,eax
c001bdce:	74 b5                	je     c001bd85 <sysCallOpen(regs*)+0x78>
c001bdd0:	83 ec 08             	sub    esp,0x8
c001bdd3:	68 39 ba 02 c0       	push   0xc002ba39
c001bdd8:	56                   	push   esi
c001bdd9:	e8 e7 fe ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	85 c0                	test   eax,eax
c001bde3:	75 a0                	jne    c001bd85 <sysCallOpen(regs*)+0x78>
c001bde5:	83 ec 08             	sub    esp,0x8
c001bde8:	68 43 ba 02 c0       	push   0xc002ba43
c001bded:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdf0:	e8 d0 fe ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	85 c0                	test   eax,eax
c001bdfa:	0f 85 e7 00 00 00    	jne    c001bee7 <sysCallOpen(regs*)+0x1da>
c001be00:	83 ec 08             	sub    esp,0x8
c001be03:	68 48 ba 02 c0       	push   0xc002ba48
c001be08:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be0b:	e8 b5 fe ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	85 c0                	test   eax,eax
c001be15:	0f 85 cc 00 00 00    	jne    c001bee7 <sysCallOpen(regs*)+0x1da>
c001be1b:	83 ec 08             	sub    esp,0x8
c001be1e:	68 44 ba 02 c0       	push   0xc002ba44
c001be23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be26:	e8 6d 4a fe ff       	call   c0000898 <strcmp>
c001be2b:	83 c4 10             	add    esp,0x10
c001be2e:	85 c0                	test   eax,eax
c001be30:	0f 84 b1 00 00 00    	je     c001bee7 <sysCallOpen(regs*)+0x1da>
c001be36:	83 ec 08             	sub    esp,0x8
c001be39:	68 43 ba 02 c0       	push   0xc002ba43
c001be3e:	56                   	push   esi
c001be3f:	e8 81 fe ff ff       	call   c001bcc5 <string_ends_with(char const*, char const*)>
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	85 c0                	test   eax,eax
c001be49:	0f 85 98 00 00 00    	jne    c001bee7 <sysCallOpen(regs*)+0x1da>
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	68 14 01 00 00       	push   0x114
c001be57:	e8 3d 37 ff ff       	call   c000f599 <malloc>
c001be5c:	83 c4 0c             	add    esp,0xc
c001be5f:	89 c6                	mov    esi,eax
c001be61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be66:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be6c:	56                   	push   esi
c001be6d:	e8 7c 6e ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001be72:	83 c4 10             	add    esp,0x10
c001be75:	85 f6                	test   esi,esi
c001be77:	74 5b                	je     c001bed4 <sysCallOpen(regs*)+0x1c7>
c001be79:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be7c:	0f b6 c2             	movzx  eax,dl
c001be7f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be82:	89 d0                	mov    eax,edx
c001be84:	83 e0 01             	and    eax,0x1
c001be87:	f6 c2 02             	test   dl,0x2
c001be8a:	74 03                	je     c001be8f <sysCallOpen(regs*)+0x182>
c001be8c:	83 c8 02             	or     eax,0x2
c001be8f:	f6 c2 04             	test   dl,0x4
c001be92:	74 03                	je     c001be97 <sysCallOpen(regs*)+0x18a>
c001be94:	83 c8 04             	or     eax,0x4
c001be97:	f6 c2 08             	test   dl,0x8
c001be9a:	74 03                	je     c001be9f <sysCallOpen(regs*)+0x192>
c001be9c:	83 c8 0a             	or     eax,0xa
c001be9f:	83 e2 10             	and    edx,0x10
c001bea2:	74 03                	je     c001bea7 <sysCallOpen(regs*)+0x19a>
c001bea4:	83 c8 12             	or     eax,0x12
c001bea7:	83 ec 08             	sub    esp,0x8
c001beaa:	50                   	push   eax
c001beab:	56                   	push   esi
c001beac:	e8 a1 6e ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	85 c0                	test   eax,eax
c001beb6:	75 1c                	jne    c001bed4 <sysCallOpen(regs*)+0x1c7>
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	56                   	push   esi
c001bebc:	e8 11 4f ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bec1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	89 02                	mov    DWORD PTR [edx],eax
c001bec9:	c1 f8 1f             	sar    eax,0x1f
c001becc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001becf:	e9 c1 fe ff ff       	jmp    c001bd95 <sysCallOpen(regs*)+0x88>
c001bed4:	81 c4 04 01 00 00    	add    esp,0x104
c001beda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bedf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bee4:	5b                   	pop    ebx
c001bee5:	5e                   	pop    esi
c001bee6:	c3                   	ret    
c001bee7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001beea:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bef0:	e9 99 fe ff ff       	jmp    c001bd8e <sysCallOpen(regs*)+0x81>

c001bef5 <Sys::loadSyscalls()>:
c001bef5:	c7 05 00 06 03 c0 62 b1 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001b162
c001beff:	c7 05 04 06 03 c0 5a ad 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001ad5a
c001bf09:	c7 05 08 06 03 c0 48 af 01 c0 	mov    DWORD PTR ds:0xc0030608,0xc001af48
c001bf13:	c7 05 0c 06 03 c0 98 b0 01 c0 	mov    DWORD PTR ds:0xc003060c,0xc001b098
c001bf1d:	c7 05 10 06 03 c0 e0 ae 01 c0 	mov    DWORD PTR ds:0xc0030610,0xc001aee0
c001bf27:	c7 05 14 06 03 c0 91 ad 01 c0 	mov    DWORD PTR ds:0xc0030614,0xc001ad91
c001bf31:	c7 05 18 06 03 c0 72 ad 01 c0 	mov    DWORD PTR ds:0xc0030618,0xc001ad72
c001bf3b:	c7 05 1c 06 03 c0 9d af 01 c0 	mov    DWORD PTR ds:0xc003061c,0xc001af9d
c001bf45:	c7 05 24 06 03 c0 2b b6 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001b62b
c001bf4f:	c7 05 20 06 03 c0 0d bd 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001bd0d
c001bf59:	c7 05 28 06 03 c0 8b b6 01 c0 	mov    DWORD PTR ds:0xc0030628,0xc001b68b
c001bf63:	c7 05 2c 06 03 c0 6e b3 01 c0 	mov    DWORD PTR ds:0xc003062c,0xc001b36e
c001bf6d:	c7 05 30 06 03 c0 a8 b1 01 c0 	mov    DWORD PTR ds:0xc0030630,0xc001b1a8
c001bf77:	c7 05 34 06 03 c0 ad b1 01 c0 	mov    DWORD PTR ds:0xc0030634,0xc001b1ad
c001bf81:	c7 05 38 06 03 c0 54 b7 01 c0 	mov    DWORD PTR ds:0xc0030638,0xc001b754
c001bf8b:	c7 05 3c 06 03 c0 00 b7 01 c0 	mov    DWORD PTR ds:0xc003063c,0xc001b700
c001bf95:	c7 05 40 06 03 c0 47 b4 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001b447
c001bf9f:	c7 05 44 06 03 c0 9e b4 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001b49e
c001bfa9:	c7 05 48 06 03 c0 0a b5 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001b50a
c001bfb3:	c7 05 4c 06 03 c0 b2 b1 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001b1b2
c001bfbd:	c7 05 50 06 03 c0 c4 b7 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001b7c4
c001bfc7:	c7 05 54 06 03 c0 de b7 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001b7de
c001bfd1:	c7 05 58 06 03 c0 de b7 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001b7de
c001bfdb:	c7 05 5c 06 03 c0 13 b8 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001b813
c001bfe5:	c7 05 60 06 03 c0 77 b8 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001b877
c001bfef:	c7 05 64 06 03 c0 bc b1 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001b1bc
c001bff9:	c7 05 68 06 03 c0 db b8 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001b8db
c001c003:	c7 05 6c 06 03 c0 2b b3 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001b32b
c001c00d:	c7 05 70 06 03 c0 27 b9 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001b927
c001c017:	c7 05 74 06 03 c0 ed b3 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001b3ed
c001c021:	c7 05 78 06 03 c0 aa b9 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001b9aa
c001c02b:	c7 05 7c 06 03 c0 7c b5 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001b57c
c001c035:	c7 05 80 06 03 c0 d1 b9 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001b9d1
c001c03f:	c7 05 84 06 03 c0 39 ba 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001ba39
c001c049:	c7 05 88 06 03 c0 e6 ba 01 c0 	mov    DWORD PTR ds:0xc0030688,0xc001bae6
c001c053:	c7 05 8c 06 03 c0 cc b1 01 c0 	mov    DWORD PTR ds:0xc003068c,0xc001b1cc
c001c05d:	c7 05 90 06 03 c0 36 b2 01 c0 	mov    DWORD PTR ds:0xc0030690,0xc001b236
c001c067:	c7 05 94 06 03 c0 7c b2 01 c0 	mov    DWORD PTR ds:0xc0030694,0xc001b27c
c001c071:	c7 05 98 06 03 c0 fa bb 01 c0 	mov    DWORD PTR ds:0xc0030698,0xc001bbfa
c001c07b:	c7 05 9c 06 03 c0 f9 b7 01 c0 	mov    DWORD PTR ds:0xc003069c,0xc001b7f9
c001c085:	c7 05 a0 06 03 c0 cd b2 01 c0 	mov    DWORD PTR ds:0xc00306a0,0xc001b2cd
c001c08f:	c7 05 a4 06 03 c0 6c bc 01 c0 	mov    DWORD PTR ds:0xc00306a4,0xc001bc6c
c001c099:	c7 05 a8 06 03 c0 b1 bc 01 c0 	mov    DWORD PTR ds:0xc00306a8,0xc001bcb1
c001c0a3:	c7 05 ac 06 03 c0 38 ae 01 c0 	mov    DWORD PTR ds:0xc00306ac,0xc001ae38
c001c0ad:	c7 05 b0 06 03 c0 b9 af 01 c0 	mov    DWORD PTR ds:0xc00306b0,0xc001afb9
c001c0b7:	c7 05 b4 06 03 c0 4e b0 01 c0 	mov    DWORD PTR ds:0xc00306b4,0xc001b04e
c001c0c1:	c7 05 b8 06 03 c0 24 ad 01 c0 	mov    DWORD PTR ds:0xc00306b8,0xc001ad24
c001c0cb:	c7 05 bc 06 03 c0 00 b1 01 c0 	mov    DWORD PTR ds:0xc00306bc,0xc001b100
c001c0d5:	c7 05 c0 06 03 c0 9d ad 01 c0 	mov    DWORD PTR ds:0xc00306c0,0xc001ad9d
c001c0df:	c7 05 c4 06 03 c0 b4 ad 01 c0 	mov    DWORD PTR ds:0xc00306c4,0xc001adb4
c001c0e9:	c3                   	ret    

c001c0ea <Sys::systemCall(regs*, void*)>:
c001c0ea:	53                   	push   ebx
c001c0eb:	83 ec 08             	sub    esp,0x8
c001c0ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c0f5:	83 f8 7f             	cmp    eax,0x7f
c001c0f8:	77 16                	ja     c001c110 <Sys::systemCall(regs*, void*)+0x26>
c001c0fa:	8b 14 85 00 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa00]
c001c101:	85 d2                	test   edx,edx
c001c103:	74 0b                	je     c001c110 <Sys::systemCall(regs*, void*)+0x26>
c001c105:	83 ec 0c             	sub    esp,0xc
c001c108:	53                   	push   ebx
c001c109:	ff d2                	call   edx
c001c10b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c10e:	eb 0d                	jmp    c001c11d <Sys::systemCall(regs*, void*)+0x33>
c001c110:	52                   	push   edx
c001c111:	52                   	push   edx
c001c112:	50                   	push   eax
c001c113:	68 4d ba 02 c0       	push   0xc002ba4d
c001c118:	e8 72 66 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c11d:	83 c4 10             	add    esp,0x10
c001c120:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c125:	31 d2                	xor    edx,edx
c001c127:	83 c4 08             	add    esp,0x8
c001c12a:	5b                   	pop    ebx
c001c12b:	c3                   	ret    

c001c12c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c12c:	55                   	push   ebp
c001c12d:	57                   	push   edi
c001c12e:	56                   	push   esi
c001c12f:	53                   	push   ebx
c001c130:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c136:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c13d:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c144:	85 c0                	test   eax,eax
c001c146:	0f 95 c1             	setne  cl
c001c149:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c151:	0f 94 c2             	sete   dl
c001c154:	84 d1                	test   cl,dl
c001c156:	74 23                	je     c001c17b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c158:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c15e:	74 1b                	je     c001c17b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c160:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c166:	89 da                	mov    edx,ebx
c001c168:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c16e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c174:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c17b:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c182:	05 ff 0f 00 00       	add    eax,0xfff
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c18e:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c194:	c1 e8 0c             	shr    eax,0xc
c001c197:	89 fe                	mov    esi,edi
c001c199:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c19d:	c1 ee 0c             	shr    esi,0xc
c001c1a0:	6a 01                	push   0x1
c001c1a2:	e8 76 50 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001c1a7:	89 c5                	mov    ebp,eax
c001c1a9:	58                   	pop    eax
c001c1aa:	5a                   	pop    edx
c001c1ab:	56                   	push   esi
c001c1ac:	68 61 ba 02 c0       	push   0xc002ba61
c001c1b1:	e8 d9 65 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c1b6:	59                   	pop    ecx
c001c1b7:	58                   	pop    eax
c001c1b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c1bc:	68 73 ba 02 c0       	push   0xc002ba73
c001c1c1:	e8 c9 65 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c1c6:	83 c4 10             	add    esp,0x10
c001c1c9:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c1cf:	0f 86 31 01 00 00    	jbe    c001c306 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c1d5:	c1 e6 0c             	shl    esi,0xc
c001c1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1db:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c1de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1e2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c1e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c1ec:	01 df                	add    edi,ebx
c001c1ee:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c1f1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c1f5:	0f 84 08 01 00 00    	je     c001c303 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c1fb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c201:	76 05                	jbe    c001c208 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c203:	bf 00 10 00 00       	mov    edi,0x1000
c001c208:	83 ec 0c             	sub    esp,0xc
c001c20b:	31 d2                	xor    edx,edx
c001c20d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c214:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c216:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c21a:	50                   	push   eax
c001c21b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c21f:	56                   	push   esi
c001c220:	52                   	push   edx
c001c221:	57                   	push   edi
c001c222:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c229:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c22c:	83 c4 20             	add    esp,0x20
c001c22f:	85 c0                	test   eax,eax
c001c231:	74 0a                	je     c001c23d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c233:	53                   	push   ebx
c001c234:	53                   	push   ebx
c001c235:	50                   	push   eax
c001c236:	68 85 ba 02 c0       	push   0xc002ba85
c001c23b:	eb 0f                	jmp    c001c24c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c23d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c241:	74 20                	je     c001c263 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c243:	51                   	push   ecx
c001c244:	51                   	push   ecx
c001c245:	6a 00                	push   0x0
c001c247:	68 b0 ba 02 c0       	push   0xc002bab0
c001c24c:	e8 3e 65 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c254:	e8 ce 53 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	31 c0                	xor    eax,eax
c001c25e:	e9 68 01 00 00       	jmp    c001c3cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c263:	fa                   	cli    
c001c264:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001c26a:	e8 26 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c26f:	6a 07                	push   0x7
c001c271:	89 c7                	mov    edi,eax
c001c273:	55                   	push   ebp
c001c274:	50                   	push   eax
c001c275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c283:	e8 f8 57 ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c288:	83 c4 0c             	add    esp,0xc
c001c28b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c292:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c298:	6a 00                	push   0x0
c001c29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a8:	e8 2d 56 ff ff       	call   c00118da <VAS::mapOtherVASIn(bool, VAS*)>
c001c2ad:	58                   	pop    eax
c001c2ae:	5a                   	pop    edx
c001c2af:	68 07 0c 00 00       	push   0xc07
c001c2b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c2b8:	57                   	push   edi
c001c2b9:	89 ef                	mov    edi,ebp
c001c2bb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2c8:	6a 00                	push   0x0
c001c2ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2d8:	e8 5f 5b ff ff       	call   c0011e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2dd:	b9 00 10 00 00       	mov    ecx,0x1000
c001c2e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2e4:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001c2e9:	83 c4 20             	add    esp,0x20
c001c2ec:	48                   	dec    eax
c001c2ed:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001c2f2:	85 c0                	test   eax,eax
c001c2f4:	75 01                	jne    c001c2f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c2f6:	fb                   	sti    
c001c2f7:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c2fe:	e9 df fe ff ff       	jmp    c001c1e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c303:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c306:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c30e:	0f 86 a9 00 00 00    	jbe    c001c3bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c314:	fa                   	cli    
c001c315:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001c31b:	51                   	push   ecx
c001c31c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c323:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c329:	6a 00                	push   0x0
c001c32b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c330:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c333:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c339:	e8 9c 55 ff ff       	call   c00118da <VAS::mapOtherVASIn(bool, VAS*)>
c001c33e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c342:	c1 e6 0c             	shl    esi,0xc
c001c345:	01 de                	add    esi,ebx
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	39 de                	cmp    esi,ebx
c001c34c:	74 61                	je     c001c3af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c34e:	e8 42 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c353:	6a 07                	push   0x7
c001c355:	89 c7                	mov    edi,eax
c001c357:	55                   	push   ebp
c001c358:	50                   	push   eax
c001c359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c35e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c361:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c367:	e8 14 57 ff ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c36c:	58                   	pop    eax
c001c36d:	5a                   	pop    edx
c001c36e:	68 07 0c 00 00       	push   0xc07
c001c373:	53                   	push   ebx
c001c374:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c37a:	57                   	push   edi
c001c37b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c382:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c388:	6a 00                	push   0x0
c001c38a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c392:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c398:	e8 9f 5a ff ff       	call   c0011e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c39d:	83 c4 1c             	add    esp,0x1c
c001c3a0:	68 00 10 00 00       	push   0x1000
c001c3a5:	6a 00                	push   0x0
c001c3a7:	55                   	push   ebp
c001c3a8:	e8 a3 43 fe ff       	call   c0000750 <memset>
c001c3ad:	eb 98                	jmp    c001c347 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c3af:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001c3b4:	48                   	dec    eax
c001c3b5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001c3ba:	75 01                	jne    c001c3bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c3bc:	fb                   	sti    
c001c3bd:	83 ec 0c             	sub    esp,0xc
c001c3c0:	55                   	push   ebp
c001c3c1:	e8 61 52 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c001c3c6:	83 c4 10             	add    esp,0x10
c001c3c9:	b0 01                	mov    al,0x1
c001c3cb:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c3d1:	5b                   	pop    ebx
c001c3d2:	5e                   	pop    esi
c001c3d3:	5f                   	pop    edi
c001c3d4:	5d                   	pop    ebp
c001c3d5:	c3                   	ret    

c001c3d6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c3d6:	55                   	push   ebp
c001c3d7:	57                   	push   edi
c001c3d8:	56                   	push   esi
c001c3d9:	53                   	push   ebx
c001c3da:	83 ec 48             	sub    esp,0x48
c001c3dd:	68 14 01 00 00       	push   0x114
c001c3e2:	e8 b2 31 ff ff       	call   c000f599 <malloc>
c001c3e7:	83 c4 0c             	add    esp,0xc
c001c3ea:	89 c6                	mov    esi,eax
c001c3ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c3f0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c3f4:	50                   	push   eax
c001c3f5:	e8 f4 68 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001c3fa:	58                   	pop    eax
c001c3fb:	5a                   	pop    edx
c001c3fc:	6a 01                	push   0x1
c001c3fe:	56                   	push   esi
c001c3ff:	e8 4e 69 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	85 c0                	test   eax,eax
c001c409:	0f 85 47 01 00 00    	jne    c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c40f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c417:	83 ec 0c             	sub    esp,0xc
c001c41a:	6a 34                	push   0x34
c001c41c:	e8 78 31 ff ff       	call   c000f599 <malloc>
c001c421:	89 c3                	mov    ebx,eax
c001c423:	58                   	pop    eax
c001c424:	8b 06                	mov    eax,DWORD PTR [esi]
c001c426:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c42a:	57                   	push   edi
c001c42b:	53                   	push   ebx
c001c42c:	6a 00                	push   0x0
c001c42e:	6a 34                	push   0x34
c001c430:	56                   	push   esi
c001c431:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c434:	83 c4 20             	add    esp,0x20
c001c437:	85 c0                	test   eax,eax
c001c439:	0f 85 17 01 00 00    	jne    c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c43f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c445:	0f 85 0b 01 00 00    	jne    c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c44b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c44e:	85 c0                	test   eax,eax
c001c450:	0f 84 00 01 00 00    	je     c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c456:	31 d2                	xor    edx,edx
c001c458:	55                   	push   ebp
c001c459:	52                   	push   edx
c001c45a:	50                   	push   eax
c001c45b:	56                   	push   esi
c001c45c:	e8 af 69 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c461:	83 c4 10             	add    esp,0x10
c001c464:	85 c0                	test   eax,eax
c001c466:	0f 85 ea 00 00 00    	jne    c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c46c:	83 ec 0c             	sub    esp,0xc
c001c46f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c472:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c47a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c47e:	0f af c2             	imul   eax,edx
c001c481:	50                   	push   eax
c001c482:	e8 12 31 ff ff       	call   c000f599 <malloc>
c001c487:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c48d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c490:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c494:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c498:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c49c:	0f af c2             	imul   eax,edx
c001c49f:	99                   	cdq    
c001c4a0:	52                   	push   edx
c001c4a1:	50                   	push   eax
c001c4a2:	56                   	push   esi
c001c4a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c4a9:	83 c4 20             	add    esp,0x20
c001c4ac:	85 c0                	test   eax,eax
c001c4ae:	0f 84 a2 00 00 00    	je     c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4b4:	31 d2                	xor    edx,edx
c001c4b6:	51                   	push   ecx
c001c4b7:	52                   	push   edx
c001c4b8:	50                   	push   eax
c001c4b9:	56                   	push   esi
c001c4ba:	e8 51 69 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	85 c0                	test   eax,eax
c001c4c4:	0f 85 8c 00 00 00    	jne    c001c556 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4d1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4d5:	31 ed                	xor    ebp,ebp
c001c4d7:	0f af c2             	imul   eax,edx
c001c4da:	50                   	push   eax
c001c4db:	e8 b9 30 ff ff       	call   c000f599 <malloc>
c001c4e0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c4e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ed:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4f1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4f5:	0f af c2             	imul   eax,edx
c001c4f8:	99                   	cdq    
c001c4f9:	52                   	push   edx
c001c4fa:	50                   	push   eax
c001c4fb:	56                   	push   esi
c001c4fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4ff:	83 c4 20             	add    esp,0x20
c001c502:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c50a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c50e:	0f 86 80 00 00 00    	jbe    c001c594 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c514:	0f b7 fd             	movzx  edi,bp
c001c517:	c1 e7 05             	shl    edi,0x5
c001c51a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c51e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c521:	75 6b                	jne    c001c58e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c523:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c526:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c52a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c52d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c531:	52                   	push   edx
c001c532:	31 d2                	xor    edx,edx
c001c534:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c537:	52                   	push   edx
c001c538:	50                   	push   eax
c001c539:	56                   	push   esi
c001c53a:	e8 d1 68 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c53f:	83 c4 10             	add    esp,0x10
c001c542:	85 c0                	test   eax,eax
c001c544:	74 17                	je     c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c546:	83 ec 0c             	sub    esp,0xc
c001c549:	68 dc ba 02 c0       	push   0xc002badc
c001c54e:	e8 3c 62 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c553:	83 c4 10             	add    esp,0x10
c001c556:	31 c0                	xor    eax,eax
c001c558:	e9 87 00 00 00       	jmp    c001c5e4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c55d:	83 ec 0c             	sub    esp,0xc
c001c560:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c563:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c566:	50                   	push   eax
c001c567:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c56b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c56f:	56                   	push   esi
c001c570:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c574:	e8 b3 fb ff ff       	call   c001c12c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c579:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c57d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c581:	83 c4 20             	add    esp,0x20
c001c584:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c588:	73 04                	jae    c001c58e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c58a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c58e:	45                   	inc    ebp
c001c58f:	e9 76 ff ff ff       	jmp    c001c50a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c594:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c598:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c59c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5a0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c5a6:	83 ec 0c             	sub    esp,0xc
c001c5a9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c5af:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c5b4:	05 00 10 00 00       	add    eax,0x1000
c001c5b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c0:	e8 e4 2f ff ff       	call   c000f5a9 <free>
c001c5c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5c8:	e8 dc 2f ff ff       	call   c000f5a9 <free>
c001c5cd:	58                   	pop    eax
c001c5ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5d2:	e8 d2 2f ff ff       	call   c000f5a9 <free>
c001c5d7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5da:	e8 d1 67 ff ff       	call   c0012db0 <File::close()>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	b0 01                	mov    al,0x1
c001c5e4:	83 c4 3c             	add    esp,0x3c
c001c5e7:	5b                   	pop    ebx
c001c5e8:	5e                   	pop    esi
c001c5e9:	5f                   	pop    edi
c001c5ea:	5d                   	pop    ebp
c001c5eb:	c3                   	ret    

c001c5ec <Thr::runtimeReferenceHelper()>:
c001c5ec:	83 ec 18             	sub    esp,0x18
c001c5ef:	68 e4 ba 02 c0       	push   0xc002bae4
c001c5f4:	e8 96 61 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001c5f9:	fa                   	cli    
c001c5fa:	83 c4 10             	add    esp,0x10
c001c5fd:	eb fe                	jmp    c001c5fd <Thr::runtimeReferenceHelper()+0x11>

c001c5ff <Thr::getAddressOfKernelSymbol(char const*)>:
c001c5ff:	57                   	push   edi
c001c600:	56                   	push   esi
c001c601:	53                   	push   ebx
c001c602:	31 db                	xor    ebx,ebx
c001c604:	39 1d a0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fa0,ebx
c001c60a:	7e 3c                	jle    c001c648 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c60c:	8b 34 9d 20 0f 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf0e0]
c001c613:	31 ff                	xor    edi,edi
c001c615:	39 3c 9d 20 0e 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf1e0],edi
c001c61c:	7e 27                	jle    c001c645 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c61e:	50                   	push   eax
c001c61f:	50                   	push   eax
c001c620:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c624:	8b 06                	mov    eax,DWORD PTR [esi]
c001c626:	03 04 9d a0 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf160]
c001c62d:	50                   	push   eax
c001c62e:	e8 65 42 fe ff       	call   c0000898 <strcmp>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	85 c0                	test   eax,eax
c001c638:	75 05                	jne    c001c63f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c63a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c63d:	eb 0b                	jmp    c001c64a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c63f:	83 c6 10             	add    esi,0x10
c001c642:	47                   	inc    edi
c001c643:	eb d0                	jmp    c001c615 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c645:	43                   	inc    ebx
c001c646:	eb bc                	jmp    c001c604 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c648:	31 c0                	xor    eax,eax
c001c64a:	5b                   	pop    ebx
c001c64b:	5e                   	pop    esi
c001c64c:	5f                   	pop    edi
c001c64d:	c3                   	ret    

c001c64e <Thr::loadKernelSymbolTable(char const*)>:
c001c64e:	55                   	push   ebp
c001c64f:	57                   	push   edi
c001c650:	56                   	push   esi
c001c651:	53                   	push   ebx
c001c652:	83 ec 68             	sub    esp,0x68
c001c655:	8b 35 f0 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030ff0
c001c65b:	68 14 01 00 00       	push   0x114
c001c660:	e8 34 2f ff ff       	call   c000f599 <malloc>
c001c665:	83 c4 0c             	add    esp,0xc
c001c668:	89 c3                	mov    ebx,eax
c001c66a:	56                   	push   esi
c001c66b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c66f:	50                   	push   eax
c001c670:	e8 79 66 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001c675:	5e                   	pop    esi
c001c676:	5f                   	pop    edi
c001c677:	6a 01                	push   0x1
c001c679:	53                   	push   ebx
c001c67a:	e8 d3 66 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001c67f:	83 c4 10             	add    esp,0x10
c001c682:	85 c0                	test   eax,eax
c001c684:	74 0a                	je     c001c690 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	68 06 bb 02 c0       	push   0xc002bb06
c001c68e:	eb 34                	jmp    c001c6c4 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c690:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	6a 34                	push   0x34
c001c69d:	e8 f7 2e ff ff       	call   c000f599 <malloc>
c001c6a2:	59                   	pop    ecx
c001c6a3:	89 c7                	mov    edi,eax
c001c6a5:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c6a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6ab:	56                   	push   esi
c001c6ac:	57                   	push   edi
c001c6ad:	6a 00                	push   0x0
c001c6af:	6a 34                	push   0x34
c001c6b1:	53                   	push   ebx
c001c6b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6b5:	83 c4 20             	add    esp,0x20
c001c6b8:	85 c0                	test   eax,eax
c001c6ba:	74 17                	je     c001c6d3 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	68 1d bb 02 c0       	push   0xc002bb1d
c001c6c4:	e8 32 d8 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001c6c9:	83 c4 10             	add    esp,0x10
c001c6cc:	31 c0                	xor    eax,eax
c001c6ce:	e9 31 02 00 00       	jmp    c001c904 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c6d3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c6d9:	75 e1                	jne    c001c6bc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6db:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c6de:	85 c0                	test   eax,eax
c001c6e0:	74 da                	je     c001c6bc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6e2:	52                   	push   edx
c001c6e3:	31 d2                	xor    edx,edx
c001c6e5:	52                   	push   edx
c001c6e6:	50                   	push   eax
c001c6e7:	53                   	push   ebx
c001c6e8:	e8 23 67 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c6ed:	83 c4 10             	add    esp,0x10
c001c6f0:	85 c0                	test   eax,eax
c001c6f2:	75 c8                	jne    c001c6bc <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c6fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c6ff:	31 ed                	xor    ebp,ebp
c001c701:	0f af c2             	imul   eax,edx
c001c704:	50                   	push   eax
c001c705:	e8 8f 2e ff ff       	call   c000f599 <malloc>
c001c70a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c70c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c710:	89 34 24             	mov    DWORD PTR [esp],esi
c001c713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c717:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c71b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c71f:	0f af c2             	imul   eax,edx
c001c722:	99                   	cdq    
c001c723:	52                   	push   edx
c001c724:	50                   	push   eax
c001c725:	53                   	push   ebx
c001c726:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c729:	83 c4 20             	add    esp,0x20
c001c72c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c734:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c73c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c744:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c74c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c750:	0f 86 aa 00 00 00    	jbe    c001c800 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c756:	0f b7 f5             	movzx  esi,bp
c001c759:	6b f6 28             	imul   esi,esi,0x28
c001c75c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c760:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c767:	50                   	push   eax
c001c768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c76c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c770:	8b 16                	mov    edx,DWORD PTR [esi]
c001c772:	6b c0 28             	imul   eax,eax,0x28
c001c775:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c779:	89 d0                	mov    eax,edx
c001c77b:	31 d2                	xor    edx,edx
c001c77d:	52                   	push   edx
c001c77e:	50                   	push   eax
c001c77f:	53                   	push   ebx
c001c780:	e8 8b 66 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c785:	83 c4 0c             	add    esp,0xc
c001c788:	6a 20                	push   0x20
c001c78a:	6a 00                	push   0x0
c001c78c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c790:	52                   	push   edx
c001c791:	e8 ba 3f fe ff       	call   c0000750 <memset>
c001c796:	58                   	pop    eax
c001c797:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c799:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c79d:	51                   	push   ecx
c001c79e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c7a2:	52                   	push   edx
c001c7a3:	6a 00                	push   0x0
c001c7a5:	6a 1f                	push   0x1f
c001c7a7:	53                   	push   ebx
c001c7a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7ab:	83 c4 18             	add    esp,0x18
c001c7ae:	68 34 bb 02 c0       	push   0xc002bb34
c001c7b3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c7b7:	52                   	push   edx
c001c7b8:	e8 db 40 fe ff       	call   c0000898 <strcmp>
c001c7bd:	83 c4 10             	add    esp,0x10
c001c7c0:	85 c0                	test   eax,eax
c001c7c2:	75 0f                	jne    c001c7d3 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c7c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7d3:	50                   	push   eax
c001c7d4:	50                   	push   eax
c001c7d5:	68 3c bb 02 c0       	push   0xc002bb3c
c001c7da:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c7de:	50                   	push   eax
c001c7df:	e8 b4 40 fe ff       	call   c0000898 <strcmp>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	85 c0                	test   eax,eax
c001c7e9:	75 0f                	jne    c001c7fa <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c7eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7fa:	45                   	inc    ebp
c001c7fb:	e9 4c ff ff ff       	jmp    c001c74c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c800:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c805:	75 10                	jne    c001c817 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c807:	83 ec 0c             	sub    esp,0xc
c001c80a:	68 44 bb 02 c0       	push   0xc002bb44
c001c80f:	e8 e7 d6 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c81c:	75 10                	jne    c001c82e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c81e:	83 ec 0c             	sub    esp,0xc
c001c821:	68 44 bb 02 c0       	push   0xc002bb44
c001c826:	e8 d0 d6 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	31 d2                	xor    edx,edx
c001c830:	50                   	push   eax
c001c831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c835:	52                   	push   edx
c001c836:	50                   	push   eax
c001c837:	53                   	push   ebx
c001c838:	e8 d3 65 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c83d:	5a                   	pop    edx
c001c83e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c842:	e8 52 2d ff ff       	call   c000f599 <malloc>
c001c847:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c84b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c84f:	31 c9                	xor    ecx,ecx
c001c851:	5e                   	pop    esi
c001c852:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c854:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c858:	55                   	push   ebp
c001c859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c85d:	51                   	push   ecx
c001c85e:	52                   	push   edx
c001c85f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c863:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c867:	53                   	push   ebx
c001c868:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c86b:	83 c4 14             	add    esp,0x14
c001c86e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c872:	e8 22 2d ff ff       	call   c000f599 <malloc>
c001c877:	89 c6                	mov    esi,eax
c001c879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c87b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c87e:	56                   	push   esi
c001c87f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c883:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c887:	51                   	push   ecx
c001c888:	52                   	push   edx
c001c889:	53                   	push   ebx
c001c88a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c88d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c891:	8b 15 a0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fa0
c001c897:	83 c4 1c             	add    esp,0x1c
c001c89a:	c1 e8 04             	shr    eax,0x4
c001c89d:	89 04 95 20 0e 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf1e0],eax
c001c8a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8a8:	31 d2                	xor    edx,edx
c001c8aa:	52                   	push   edx
c001c8ab:	50                   	push   eax
c001c8ac:	53                   	push   ebx
c001c8ad:	e8 5e 65 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c8b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c8b4:	31 d2                	xor    edx,edx
c001c8b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c8b9:	56                   	push   esi
c001c8ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8be:	52                   	push   edx
c001c8bf:	50                   	push   eax
c001c8c0:	53                   	push   ebx
c001c8c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8c4:	83 c4 14             	add    esp,0x14
c001c8c7:	53                   	push   ebx
c001c8c8:	e8 e3 64 ff ff       	call   c0012db0 <File::close()>
c001c8cd:	5d                   	pop    ebp
c001c8ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8d2:	e8 d2 2c ff ff       	call   c000f5a9 <free>
c001c8d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8da:	e8 ca 2c ff ff       	call   c000f5a9 <free>
c001c8df:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c001c8e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c8e8:	8d 50 01             	lea    edx,[eax+0x1]
c001c8eb:	89 0c 85 20 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0e0],ecx
c001c8f2:	89 34 85 a0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf160],esi
c001c8f9:	89 15 a0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fa0,edx
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	b0 01                	mov    al,0x1
c001c904:	83 c4 5c             	add    esp,0x5c
c001c907:	5b                   	pop    ebx
c001c908:	5e                   	pop    esi
c001c909:	5f                   	pop    edi
c001c90a:	5d                   	pop    ebp
c001c90b:	c3                   	ret    

c001c90c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c90c:	55                   	push   ebp
c001c90d:	57                   	push   edi
c001c90e:	56                   	push   esi
c001c90f:	53                   	push   ebx
c001c910:	81 ec 68 03 00 00    	sub    esp,0x368
c001c916:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c91d:	8b 1d f0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ff0
c001c923:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c927:	68 14 01 00 00       	push   0x114
c001c92c:	e8 68 2c ff ff       	call   c000f599 <malloc>
c001c931:	83 c4 0c             	add    esp,0xc
c001c934:	89 c5                	mov    ebp,eax
c001c936:	53                   	push   ebx
c001c937:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c93e:	50                   	push   eax
c001c93f:	e8 aa 63 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001c944:	5e                   	pop    esi
c001c945:	5f                   	pop    edi
c001c946:	6a 01                	push   0x1
c001c948:	55                   	push   ebp
c001c949:	e8 04 64 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	85 c0                	test   eax,eax
c001c953:	0f 85 a7 06 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c959:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c961:	83 ec 0c             	sub    esp,0xc
c001c964:	6a 34                	push   0x34
c001c966:	e8 2e 2c ff ff       	call   c000f599 <malloc>
c001c96b:	5b                   	pop    ebx
c001c96c:	89 c7                	mov    edi,eax
c001c96e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c972:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c975:	53                   	push   ebx
c001c976:	57                   	push   edi
c001c977:	6a 00                	push   0x0
c001c979:	6a 34                	push   0x34
c001c97b:	55                   	push   ebp
c001c97c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c97f:	83 c4 20             	add    esp,0x20
c001c982:	85 c0                	test   eax,eax
c001c984:	0f 85 76 06 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c98a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c990:	0f 85 6a 06 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c996:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c999:	85 c0                	test   eax,eax
c001c99b:	0f 84 5f 06 00 00    	je     c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9a1:	31 d2                	xor    edx,edx
c001c9a3:	51                   	push   ecx
c001c9a4:	52                   	push   edx
c001c9a5:	50                   	push   eax
c001c9a6:	55                   	push   ebp
c001c9a7:	e8 64 64 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	0f 85 49 06 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9b7:	83 ec 0c             	sub    esp,0xc
c001c9ba:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c9bd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9c1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c9c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9c9:	0f af c2             	imul   eax,edx
c001c9cc:	50                   	push   eax
c001c9cd:	e8 c7 2b ff ff       	call   c000f599 <malloc>
c001c9d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9e0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9e8:	0f af c2             	imul   eax,edx
c001c9eb:	99                   	cdq    
c001c9ec:	52                   	push   edx
c001c9ed:	50                   	push   eax
c001c9ee:	55                   	push   ebp
c001c9ef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9f2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c9f5:	83 c4 20             	add    esp,0x20
c001c9f8:	85 c0                	test   eax,eax
c001c9fa:	0f 84 00 06 00 00    	je     c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca00:	52                   	push   edx
c001ca01:	31 d2                	xor    edx,edx
c001ca03:	52                   	push   edx
c001ca04:	50                   	push   eax
c001ca05:	55                   	push   ebp
c001ca06:	e8 05 64 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	85 c0                	test   eax,eax
c001ca10:	0f 85 ea 05 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca16:	83 ec 0c             	sub    esp,0xc
c001ca19:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca1d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ca21:	31 f6                	xor    esi,esi
c001ca23:	0f af c2             	imul   eax,edx
c001ca26:	50                   	push   eax
c001ca27:	e8 6d 2b ff ff       	call   c000f599 <malloc>
c001ca2c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca3a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca3e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ca42:	0f af c2             	imul   eax,edx
c001ca45:	99                   	cdq    
c001ca46:	52                   	push   edx
c001ca47:	50                   	push   eax
c001ca48:	55                   	push   ebp
c001ca49:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca4c:	83 c4 20             	add    esp,0x20
c001ca4f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001ca53:	0f 86 8a 00 00 00    	jbe    c001cae3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001ca59:	0f b7 de             	movzx  ebx,si
c001ca5c:	c1 e3 05             	shl    ebx,0x5
c001ca5f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001ca63:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ca66:	75 75                	jne    c001cadd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001ca68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca6b:	31 d2                	xor    edx,edx
c001ca6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca71:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca78:	50                   	push   eax
c001ca79:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ca7c:	52                   	push   edx
c001ca7d:	50                   	push   eax
c001ca7e:	55                   	push   ebp
c001ca7f:	e8 8c 63 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	85 c0                	test   eax,eax
c001ca89:	0f 85 71 05 00 00    	jne    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca8f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca96:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca99:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca9d:	31 d2                	xor    edx,edx
c001ca9f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001caa3:	83 ec 0c             	sub    esp,0xc
c001caa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001caaa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cab1:	50                   	push   eax
c001cab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caba:	52                   	push   edx
c001cabb:	50                   	push   eax
c001cabc:	55                   	push   ebp
c001cabd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cac0:	83 c4 1c             	add    esp,0x1c
c001cac3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cac6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cac9:	50                   	push   eax
c001caca:	6a 00                	push   0x0
c001cacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cad4:	50                   	push   eax
c001cad5:	e8 76 3c fe ff       	call   c0000750 <memset>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	46                   	inc    esi
c001cade:	e9 6c ff ff ff       	jmp    c001ca4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cae3:	53                   	push   ebx
c001cae4:	31 db                	xor    ebx,ebx
c001cae6:	68 00 01 00 00       	push   0x100
c001caeb:	6a 00                	push   0x0
c001caed:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001caf1:	50                   	push   eax
c001caf2:	e8 59 3c fe ff       	call   c0000750 <memset>
c001caf7:	83 c4 0c             	add    esp,0xc
c001cafa:	68 00 01 00 00       	push   0x100
c001caff:	6a 00                	push   0x0
c001cb01:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cb08:	50                   	push   eax
c001cb09:	e8 42 3c fe ff       	call   c0000750 <memset>
c001cb0e:	83 c4 10             	add    esp,0x10
c001cb11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cb19:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb21:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cb29:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb31:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cb39:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cb3d:	0f 86 30 01 00 00    	jbe    c001cc73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cb43:	0f b7 f3             	movzx  esi,bx
c001cb46:	6b f6 28             	imul   esi,esi,0x28
c001cb49:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cb4d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb54:	52                   	push   edx
c001cb55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb59:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cb5d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb5f:	6b d2 28             	imul   edx,edx,0x28
c001cb62:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cb66:	31 d2                	xor    edx,edx
c001cb68:	52                   	push   edx
c001cb69:	50                   	push   eax
c001cb6a:	55                   	push   ebp
c001cb6b:	e8 a0 62 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001cb70:	83 c4 0c             	add    esp,0xc
c001cb73:	6a 20                	push   0x20
c001cb75:	6a 00                	push   0x0
c001cb77:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb7e:	51                   	push   ecx
c001cb7f:	e8 cc 3b fe ff       	call   c0000750 <memset>
c001cb84:	59                   	pop    ecx
c001cb85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb88:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb8c:	52                   	push   edx
c001cb8d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb94:	51                   	push   ecx
c001cb95:	6a 00                	push   0x0
c001cb97:	6a 1f                	push   0x1f
c001cb99:	55                   	push   ebp
c001cb9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb9d:	83 c4 1c             	add    esp,0x1c
c001cba0:	6a 09                	push   0x9
c001cba2:	68 5e bb 02 c0       	push   0xc002bb5e
c001cba7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cbae:	51                   	push   ecx
c001cbaf:	e8 98 3a fe ff       	call   c000064c <memcmp>
c001cbb4:	83 c4 10             	add    esp,0x10
c001cbb7:	85 c0                	test   eax,eax
c001cbb9:	75 21                	jne    c001cbdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cbbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbc3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cbc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbcb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbce:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cbd5:	89 d0                	mov    eax,edx
c001cbd7:	40                   	inc    eax
c001cbd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbdc:	50                   	push   eax
c001cbdd:	6a 09                	push   0x9
c001cbdf:	68 68 bb 02 c0       	push   0xc002bb68
c001cbe4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbeb:	50                   	push   eax
c001cbec:	e8 5b 3a fe ff       	call   c000064c <memcmp>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	85 c0                	test   eax,eax
c001cbf6:	75 21                	jne    c001cc19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc00:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc04:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc08:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc0b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cc12:	89 d0                	mov    eax,edx
c001cc14:	40                   	inc    eax
c001cc15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc19:	50                   	push   eax
c001cc1a:	50                   	push   eax
c001cc1b:	68 34 bb 02 c0       	push   0xc002bb34
c001cc20:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc27:	50                   	push   eax
c001cc28:	e8 6b 3c fe ff       	call   c0000898 <strcmp>
c001cc2d:	83 c4 10             	add    esp,0x10
c001cc30:	85 c0                	test   eax,eax
c001cc32:	75 0f                	jne    c001cc43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cc34:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc43:	50                   	push   eax
c001cc44:	50                   	push   eax
c001cc45:	68 3c bb 02 c0       	push   0xc002bb3c
c001cc4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc51:	50                   	push   eax
c001cc52:	e8 41 3c fe ff       	call   c0000898 <strcmp>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	85 c0                	test   eax,eax
c001cc5c:	75 0f                	jne    c001cc6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cc5e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cc6d:	43                   	inc    ebx
c001cc6e:	e9 c6 fe ff ff       	jmp    c001cb39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cc73:	31 d2                	xor    edx,edx
c001cc75:	50                   	push   eax
c001cc76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc7a:	52                   	push   edx
c001cc7b:	50                   	push   eax
c001cc7c:	55                   	push   ebp
c001cc7d:	e8 8e 61 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001cc82:	58                   	pop    eax
c001cc83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc87:	e8 0d 29 ff ff       	call   c000f599 <malloc>
c001cc8c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc8f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc93:	31 d2                	xor    edx,edx
c001cc95:	58                   	pop    eax
c001cc96:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc9a:	53                   	push   ebx
c001cc9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cca3:	52                   	push   edx
c001cca4:	50                   	push   eax
c001cca5:	55                   	push   ebp
c001cca6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cca9:	83 c4 14             	add    esp,0x14
c001ccac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccb0:	e8 e4 28 ff ff       	call   c000f599 <malloc>
c001ccb5:	31 d2                	xor    edx,edx
c001ccb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ccbb:	83 c4 0c             	add    esp,0xc
c001ccbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccc2:	52                   	push   edx
c001ccc3:	50                   	push   eax
c001ccc4:	55                   	push   ebp
c001ccc5:	e8 46 61 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001ccca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cccd:	31 d2                	xor    edx,edx
c001cccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ccd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccda:	52                   	push   edx
c001ccdb:	50                   	push   eax
c001ccdc:	55                   	push   ebp
c001ccdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce0:	83 c4 20             	add    esp,0x20
c001cce3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cceb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ccef:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ccf3:	0f 84 0b 03 00 00    	je     c001d004 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ccf9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cd00:	31 d2                	xor    edx,edx
c001cd02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd06:	c1 e8 03             	shr    eax,0x3
c001cd09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cd0d:	51                   	push   ecx
c001cd0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd12:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cd16:	52                   	push   edx
c001cd17:	50                   	push   eax
c001cd18:	55                   	push   ebp
c001cd19:	e8 f2 60 ff ff       	call   c0012e10 <File::seek(unsigned long long)>
c001cd1e:	5b                   	pop    ebx
c001cd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd23:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cd2a:	e8 6a 28 ff ff       	call   c000f599 <malloc>
c001cd2f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd36:	31 d2                	xor    edx,edx
c001cd38:	5e                   	pop    esi
c001cd39:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cd3d:	50                   	push   eax
c001cd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd46:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cd4d:	52                   	push   edx
c001cd4e:	50                   	push   eax
c001cd4f:	55                   	push   ebp
c001cd50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd53:	83 c4 20             	add    esp,0x20
c001cd56:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cd5e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cd62:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cd66:	0f 8d 7c 02 00 00    	jge    c001cfe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cd6c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd74:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cd79:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cd7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cd80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd84:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cd88:	89 d8                	mov    eax,ebx
c001cd8a:	c1 e8 08             	shr    eax,0x8
c001cd8d:	89 c6                	mov    esi,eax
c001cd8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd93:	c1 e6 04             	shl    esi,0x4
c001cd96:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd9a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd9d:	85 d2                	test   edx,edx
c001cd9f:	0f 85 bf 00 00 00    	jne    c001ce64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdac:	03 06                	add    eax,DWORD PTR [esi]
c001cdae:	50                   	push   eax
c001cdaf:	e8 4b f8 ff ff       	call   c001c5ff <Thr::getAddressOfKernelSymbol(char const*)>
c001cdb4:	83 c4 10             	add    esp,0x10
c001cdb7:	89 c2                	mov    edx,eax
c001cdb9:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cdbe:	85 c0                	test   eax,eax
c001cdc0:	0f 85 9e 00 00 00    	jne    c001ce64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cdc6:	83 ec 0c             	sub    esp,0xc
c001cdc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdcd:	03 06                	add    eax,DWORD PTR [esi]
c001cdcf:	50                   	push   eax
c001cdd0:	e8 6a 17 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cdd5:	83 c4 10             	add    esp,0x10
c001cdd8:	89 c2                	mov    edx,eax
c001cdda:	85 c0                	test   eax,eax
c001cddc:	0f 85 82 00 00 00    	jne    c001ce64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cde2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cde6:	50                   	push   eax
c001cde7:	50                   	push   eax
c001cde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdec:	03 06                	add    eax,DWORD PTR [esi]
c001cdee:	50                   	push   eax
c001cdef:	68 72 bb 02 c0       	push   0xc002bb72
c001cdf4:	e8 96 59 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001cdf9:	58                   	pop    eax
c001cdfa:	5a                   	pop    edx
c001cdfb:	68 8c bb 02 c0       	push   0xc002bb8c
c001ce00:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce07:	50                   	push   eax
c001ce08:	e8 ff 39 fe ff       	call   c000080c <strcpy>
c001ce0d:	59                   	pop    ecx
c001ce0e:	58                   	pop    eax
c001ce0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce13:	03 06                	add    eax,DWORD PTR [esi]
c001ce15:	50                   	push   eax
c001ce16:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce1d:	50                   	push   eax
c001ce1e:	e8 29 3b fe ff       	call   c000094c <strcat>
c001ce23:	58                   	pop    eax
c001ce24:	5a                   	pop    edx
c001ce25:	68 22 bc 02 c0       	push   0xc002bc22
c001ce2a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce31:	50                   	push   eax
c001ce32:	e8 15 3b fe ff       	call   c000094c <strcat>
c001ce37:	83 c4 10             	add    esp,0x10
c001ce3a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce3f:	0f 84 5d 01 00 00    	je     c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce45:	83 ec 0c             	sub    esp,0xc
c001ce48:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce4f:	50                   	push   eax
c001ce50:	e8 a6 d0 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001ce55:	83 c4 10             	add    esp,0x10
c001ce58:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ce5c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce60:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ce64:	80 fb 01             	cmp    bl,0x1
c001ce67:	0f 85 88 00 00 00    	jne    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ce6d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ce74:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce78:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ce7c:	01 ce                	add    esi,ecx
c001ce7e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce84:	0f 94 c0             	sete   al
c001ce87:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce8d:	0f 94 c3             	sete   bl
c001ce90:	09 c3                	or     ebx,eax
c001ce92:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce94:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce99:	74 41                	je     c001cedc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ce9b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce9e:	84 db                	test   bl,bl
c001cea0:	75 15                	jne    c001ceb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cea2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cea6:	66 83 f8 0c          	cmp    ax,0xc
c001ceaa:	76 05                	jbe    c001ceb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ceac:	b8 0c 00 00 00       	mov    eax,0xc
c001ceb1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ceb5:	76 37                	jbe    c001ceee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ceb7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cebb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cec0:	0f 84 dc 00 00 00    	je     c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	68 a3 bb 02 c0       	push   0xc002bba3
c001cece:	e8 28 d0 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001ced3:	83 c4 10             	add    esp,0x10
c001ced6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ceda:	eb 12                	jmp    c001ceee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cedc:	01 c1                	add    ecx,eax
c001cede:	84 db                	test   bl,bl
c001cee0:	75 0c                	jne    c001ceee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cee2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cee6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ceea:	77 02                	ja     c001ceee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ceec:	01 d1                	add    ecx,edx
c001ceee:	89 0e                	mov    DWORD PTR [esi],ecx
c001cef0:	e9 ea 00 00 00       	jmp    c001cfdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cef5:	80 fb 02             	cmp    bl,0x2
c001cef8:	75 7c                	jne    c001cf76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cefa:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cf01:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cf05:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cf09:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf0f:	74 20                	je     c001cf31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf11:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf17:	74 18                	je     c001cf31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf19:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf1d:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf22:	66 83 f8 0e          	cmp    ax,0xe
c001cf26:	77 03                	ja     c001cf2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cf28:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cf2b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cf2f:	76 1f                	jbe    c001cf50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cf31:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cf35:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf3a:	74 66                	je     c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	68 bf bb 02 c0       	push   0xc002bbbf
c001cf44:	e8 b2 cf ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf50:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf52:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf57:	74 13                	je     c001cf6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cf59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cf5d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cf64:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cf68:	01 c8                	add    eax,ecx
c001cf6a:	eb 04                	jmp    c001cf70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cf6c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cf70:	01 c2                	add    edx,eax
c001cf72:	89 16                	mov    DWORD PTR [esi],edx
c001cf74:	eb 69                	jmp    c001cfdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf76:	0f b6 db             	movzx  ebx,bl
c001cf79:	50                   	push   eax
c001cf7a:	50                   	push   eax
c001cf7b:	53                   	push   ebx
c001cf7c:	68 db bb 02 c0       	push   0xc002bbdb
c001cf81:	e8 09 58 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf8e:	74 12                	je     c001cfa2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf90:	83 ec 0c             	sub    esp,0xc
c001cf93:	68 e6 bb 02 c0       	push   0xc002bbe6
c001cf98:	e8 5e cf ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001cf9d:	83 c4 10             	add    esp,0x10
c001cfa0:	eb 3d                	jmp    c001cfdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cfa2:	83 ec 0c             	sub    esp,0xc
c001cfa5:	55                   	push   ebp
c001cfa6:	e8 05 5e ff ff       	call   c0012db0 <File::close()>
c001cfab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfb4:	59                   	pop    ecx
c001cfb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfb9:	e8 eb 25 ff ff       	call   c000f5a9 <free>
c001cfbe:	5b                   	pop    ebx
c001cfbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfc3:	e8 e1 25 ff ff       	call   c000f5a9 <free>
c001cfc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfcb:	e8 d9 25 ff ff       	call   c000f5a9 <free>
c001cfd0:	5e                   	pop    esi
c001cfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd5:	e8 cf 25 ff ff       	call   c000f5a9 <free>
c001cfda:	83 c4 10             	add    esp,0x10
c001cfdd:	eb 21                	jmp    c001d000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfdf:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cfe3:	e9 76 fd ff ff       	jmp    c001cd5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfef:	e8 b5 25 ff ff       	call   c000f5a9 <free>
c001cff4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cff8:	83 c4 10             	add    esp,0x10
c001cffb:	e9 eb fc ff ff       	jmp    c001cceb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d000:	31 c0                	xor    eax,eax
c001d002:	eb 33                	jmp    c001d037 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	55                   	push   ebp
c001d008:	e8 a3 5d ff ff       	call   c0012db0 <File::close()>
c001d00d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d010:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d013:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d016:	58                   	pop    eax
c001d017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d01b:	e8 89 25 ff ff       	call   c000f5a9 <free>
c001d020:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d023:	e8 81 25 ff ff       	call   c000f5a9 <free>
c001d028:	5a                   	pop    edx
c001d029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d02d:	e8 77 25 ff ff       	call   c000f5a9 <free>
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	b0 01                	mov    al,0x1
c001d037:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d03d:	5b                   	pop    ebx
c001d03e:	5e                   	pop    esi
c001d03f:	5f                   	pop    edi
c001d040:	5d                   	pop    ebp
c001d041:	c3                   	ret    

c001d042 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d042:	56                   	push   esi
c001d043:	31 d2                	xor    edx,edx
c001d045:	53                   	push   ebx
c001d046:	8b 1d 00 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030800
c001d04c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d050:	39 d3                	cmp    ebx,edx
c001d052:	7e 1b                	jle    c001d06f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d054:	8b 04 95 20 0a 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf5e0]
c001d05b:	39 c8                	cmp    eax,ecx
c001d05d:	77 0d                	ja     c001d06c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d05f:	8b 34 95 20 08 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf7e0]
c001d066:	01 c6                	add    esi,eax
c001d068:	39 ce                	cmp    esi,ecx
c001d06a:	77 05                	ja     c001d071 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d06c:	42                   	inc    edx
c001d06d:	eb e1                	jmp    c001d050 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d06f:	31 c0                	xor    eax,eax
c001d071:	5b                   	pop    ebx
c001d072:	5e                   	pop    esi
c001d073:	c3                   	ret    

c001d074 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d074:	53                   	push   ebx
c001d075:	31 c0                	xor    eax,eax
c001d077:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d07b:	8b 1d 00 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030800
c001d081:	39 c3                	cmp    ebx,eax
c001d083:	7e 22                	jle    c001d0a7 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d085:	8b 14 85 20 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf5e0]
c001d08c:	39 ca                	cmp    edx,ecx
c001d08e:	77 14                	ja     c001d0a4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d090:	03 14 85 20 08 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf7e0]
c001d097:	39 ca                	cmp    edx,ecx
c001d099:	76 09                	jbe    c001d0a4 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d09b:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001d0a2:	eb 05                	jmp    c001d0a9 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d0a4:	40                   	inc    eax
c001d0a5:	eb da                	jmp    c001d081 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d0a7:	31 c0                	xor    eax,eax
c001d0a9:	5b                   	pop    ebx
c001d0aa:	c3                   	ret    

c001d0ab <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d0ab:	53                   	push   ebx
c001d0ac:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d0b0:	53                   	push   ebx
c001d0b1:	e8 8c ff ff ff       	call   c001d042 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d0b6:	5a                   	pop    edx
c001d0b7:	31 d2                	xor    edx,edx
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	74 04                	je     c001d0c1 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d0bd:	89 da                	mov    edx,ebx
c001d0bf:	29 c2                	sub    edx,eax
c001d0c1:	89 d0                	mov    eax,edx
c001d0c3:	5b                   	pop    ebx
c001d0c4:	c3                   	ret    

c001d0c5 <Thr::loadDLL(char const*, bool)>:
c001d0c5:	55                   	push   ebp
c001d0c6:	57                   	push   edi
c001d0c7:	56                   	push   esi
c001d0c8:	53                   	push   ebx
c001d0c9:	81 ec 34 01 00 00    	sub    esp,0x134
c001d0cf:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d0d6:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d0dd:	56                   	push   esi
c001d0de:	68 fe bb 02 c0       	push   0xc002bbfe
c001d0e3:	e8 a7 56 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001d0e8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d0ef:	e8 a5 24 ff ff       	call   c000f599 <malloc>
c001d0f4:	83 c4 0c             	add    esp,0xc
c001d0f7:	89 c3                	mov    ebx,eax
c001d0f9:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c001d0ff:	56                   	push   esi
c001d100:	50                   	push   eax
c001d101:	e8 e8 5b ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001d106:	83 c4 10             	add    esp,0x10
c001d109:	85 db                	test   ebx,ebx
c001d10b:	75 3c                	jne    c001d149 <Thr::loadDLL(char const*, bool)+0x84>
c001d10d:	89 f8                	mov    eax,edi
c001d10f:	84 c0                	test   al,al
c001d111:	0f 84 d2 01 00 00    	je     c001d2e9 <Thr::loadDLL(char const*, bool)+0x224>
c001d117:	55                   	push   ebp
c001d118:	55                   	push   ebp
c001d119:	68 0f bc 02 c0       	push   0xc002bc0f
c001d11e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d122:	55                   	push   ebp
c001d123:	e8 e4 36 fe ff       	call   c000080c <strcpy>
c001d128:	58                   	pop    eax
c001d129:	5a                   	pop    edx
c001d12a:	56                   	push   esi
c001d12b:	55                   	push   ebp
c001d12c:	e8 1b 38 fe ff       	call   c000094c <strcat>
c001d131:	59                   	pop    ecx
c001d132:	58                   	pop    eax
c001d133:	68 22 bc 02 c0       	push   0xc002bc22
c001d138:	55                   	push   ebp
c001d139:	e8 0e 38 fe ff       	call   c000094c <strcat>
c001d13e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d141:	e8 b5 cd ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	51                   	push   ecx
c001d14a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d14e:	50                   	push   eax
c001d14f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d153:	50                   	push   eax
c001d154:	53                   	push   ebx
c001d155:	e8 a4 5e ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c001d15a:	83 c4 10             	add    esp,0x10
c001d15d:	85 db                	test   ebx,ebx
c001d15f:	74 0c                	je     c001d16d <Thr::loadDLL(char const*, bool)+0xa8>
c001d161:	83 ec 0c             	sub    esp,0xc
c001d164:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d166:	53                   	push   ebx
c001d167:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d16a:	83 c4 10             	add    esp,0x10
c001d16d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d172:	75 0a                	jne    c001d17e <Thr::loadDLL(char const*, bool)+0xb9>
c001d174:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d178:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d17c:	75 3c                	jne    c001d1ba <Thr::loadDLL(char const*, bool)+0xf5>
c001d17e:	89 f8                	mov    eax,edi
c001d180:	84 c0                	test   al,al
c001d182:	0f 84 49 01 00 00    	je     c001d2d1 <Thr::loadDLL(char const*, bool)+0x20c>
c001d188:	51                   	push   ecx
c001d189:	51                   	push   ecx
c001d18a:	68 0f bc 02 c0       	push   0xc002bc0f
c001d18f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d193:	53                   	push   ebx
c001d194:	e8 73 36 fe ff       	call   c000080c <strcpy>
c001d199:	5d                   	pop    ebp
c001d19a:	58                   	pop    eax
c001d19b:	56                   	push   esi
c001d19c:	53                   	push   ebx
c001d19d:	e8 aa 37 fe ff       	call   c000094c <strcat>
c001d1a2:	58                   	pop    eax
c001d1a3:	5a                   	pop    edx
c001d1a4:	68 22 bc 02 c0       	push   0xc002bc22
c001d1a9:	53                   	push   ebx
c001d1aa:	e8 9d 37 fe ff       	call   c000094c <strcat>
c001d1af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1b2:	e8 44 cd ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001d1b7:	83 c4 10             	add    esp,0x10
c001d1ba:	52                   	push   edx
c001d1bb:	6a 03                	push   0x3
c001d1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d1c5:	05 ff 0f 00 00       	add    eax,0xfff
c001d1ca:	83 d2 00             	adc    edx,0x0
c001d1cd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1d1:	50                   	push   eax
c001d1d2:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c001d1d8:	e8 a5 49 ff ff       	call   c0011b82 <VAS::allocatePages(int, int)>
c001d1dd:	59                   	pop    ecx
c001d1de:	89 c3                	mov    ebx,eax
c001d1e0:	5d                   	pop    ebp
c001d1e1:	50                   	push   eax
c001d1e2:	68 71 a1 02 c0       	push   0xc002a171
c001d1e7:	e8 a3 55 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001d1ec:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1ef:	e8 78 35 fe ff       	call   c000076c <strlen>
c001d1f4:	8b 2d 00 08 03 c0    	mov    ebp,DWORD PTR ds:0xc0030800
c001d1fa:	40                   	inc    eax
c001d1fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1fe:	e8 96 23 ff ff       	call   c000f599 <malloc>
c001d203:	89 04 ad 20 0c 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf3e0],eax
c001d20a:	58                   	pop    eax
c001d20b:	a1 00 08 03 c0       	mov    eax,ds:0xc0030800
c001d210:	5a                   	pop    edx
c001d211:	56                   	push   esi
c001d212:	ff 34 85 20 0c 03 c0 	push   DWORD PTR [eax*4-0x3ffcf3e0]
c001d219:	e8 ee 35 fe ff       	call   c000080c <strcpy>
c001d21e:	a1 00 08 03 c0       	mov    eax,ds:0xc0030800
c001d223:	8d 50 01             	lea    edx,[eax+0x1]
c001d226:	89 1c 85 20 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5e0],ebx
c001d22d:	89 15 00 08 03 c0    	mov    DWORD PTR ds:0xc0030800,edx
c001d233:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d237:	83 c4 0c             	add    esp,0xc
c001d23a:	89 14 85 20 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf7e0],edx
c001d241:	6a 01                	push   0x1
c001d243:	53                   	push   ebx
c001d244:	56                   	push   esi
c001d245:	e8 c2 f6 ff ff       	call   c001c90c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d24a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d24e:	83 c4 10             	add    esp,0x10
c001d251:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d256:	0f 85 89 00 00 00    	jne    c001d2e5 <Thr::loadDLL(char const*, bool)+0x220>
c001d25c:	89 f8                	mov    eax,edi
c001d25e:	84 c0                	test   al,al
c001d260:	74 73                	je     c001d2d5 <Thr::loadDLL(char const*, bool)+0x210>
c001d262:	83 ec 0c             	sub    esp,0xc
c001d265:	68 24 bc 02 c0       	push   0xc002bc24
c001d26a:	e8 8c cc ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001d26f:	83 c4 10             	add    esp,0x10
c001d272:	eb 61                	jmp    c001d2d5 <Thr::loadDLL(char const*, bool)+0x210>
c001d274:	50                   	push   eax
c001d275:	50                   	push   eax
c001d276:	89 e8                	mov    eax,ebp
c001d278:	c1 e0 0c             	shl    eax,0xc
c001d27b:	01 d8                	add    eax,ebx
c001d27d:	50                   	push   eax
c001d27e:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c001d284:	e8 7f 43 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001d289:	83 c4 10             	add    esp,0x10
c001d28c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d28e:	a8 60                	test   al,0x60
c001d290:	75 11                	jne    c001d2a3 <Thr::loadDLL(char const*, bool)+0x1de>
c001d292:	83 ec 0c             	sub    esp,0xc
c001d295:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d29a:	50                   	push   eax
c001d29b:	e8 84 26 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d2a0:	83 c4 10             	add    esp,0x10
c001d2a3:	45                   	inc    ebp
c001d2a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2ac:	05 ff 0f 00 00       	add    eax,0xfff
c001d2b1:	bf 00 00 00 00       	mov    edi,0x0
c001d2b6:	83 d2 00             	adc    edx,0x0
c001d2b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d2bd:	c1 ea 0c             	shr    edx,0xc
c001d2c0:	39 c5                	cmp    ebp,eax
c001d2c2:	89 d1                	mov    ecx,edx
c001d2c4:	89 f8                	mov    eax,edi
c001d2c6:	19 c8                	sbb    eax,ecx
c001d2c8:	72 aa                	jb     c001d274 <Thr::loadDLL(char const*, bool)+0x1af>
c001d2ca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d2cf:	75 18                	jne    c001d2e9 <Thr::loadDLL(char const*, bool)+0x224>
c001d2d1:	31 db                	xor    ebx,ebx
c001d2d3:	eb 14                	jmp    c001d2e9 <Thr::loadDLL(char const*, bool)+0x224>
c001d2d5:	83 ec 0c             	sub    esp,0xc
c001d2d8:	68 43 bc 02 c0       	push   0xc002bc43
c001d2dd:	e8 19 cc ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	31 ed                	xor    ebp,ebp
c001d2e7:	eb bb                	jmp    c001d2a4 <Thr::loadDLL(char const*, bool)+0x1df>
c001d2e9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2ef:	89 d8                	mov    eax,ebx
c001d2f1:	5b                   	pop    ebx
c001d2f2:	5e                   	pop    esi
c001d2f3:	5f                   	pop    edi
c001d2f4:	5d                   	pop    ebp
c001d2f5:	c3                   	ret    

c001d2f6 <Thr::executeDLL(unsigned long, void*)>:
c001d2f6:	56                   	push   esi
c001d2f7:	53                   	push   ebx
c001d2f8:	52                   	push   edx
c001d2f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d301:	85 db                	test   ebx,ebx
c001d303:	75 10                	jne    c001d315 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d305:	83 ec 0c             	sub    esp,0xc
c001d308:	68 5f bc 02 c0       	push   0xc002bc5f
c001d30d:	e8 e9 cb ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001d312:	83 c4 10             	add    esp,0x10
c001d315:	50                   	push   eax
c001d316:	50                   	push   eax
c001d317:	53                   	push   ebx
c001d318:	68 89 bc 02 c0       	push   0xc002bc89
c001d31d:	e8 6d 54 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001d322:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d326:	89 d8                	mov    eax,ebx
c001d328:	83 c4 14             	add    esp,0x14
c001d32b:	5b                   	pop    ebx
c001d32c:	5e                   	pop    esi
c001d32d:	ff e0                	jmp    eax
c001d32f:	90                   	nop

c001d330 <userModeEntryPoint(void*)>:
c001d330:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001d335:	48                   	dec    eax
c001d336:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001d33b:	75 01                	jne    c001d33e <userModeEntryPoint(void*)+0xe>
c001d33d:	fb                   	sti    
c001d33e:	fb                   	sti    
c001d33f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d344:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d347:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d34d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d351:	e9 d4 2f fe ff       	jmp    c000032a <goToUsermode>

c001d356 <changeTSS>:
c001d356:	83 ec 14             	sub    esp,0x14
c001d359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d35e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d361:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d366:	c1 e2 15             	shl    edx,0x15
c001d369:	29 d0                	sub    eax,edx
c001d36b:	50                   	push   eax
c001d36c:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001d371:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d377:	05 7c 11 00 00       	add    eax,0x117c
c001d37c:	50                   	push   eax
c001d37d:	e8 f0 37 ff ff       	call   c0010b72 <TSS::setESP(unsigned long)>
c001d382:	83 c4 1c             	add    esp,0x1c
c001d385:	c3                   	ret    

c001d386 <switchToThread(ThreadControlBlock*)>:
c001d386:	57                   	push   edi
c001d387:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001d38c:	56                   	push   esi
c001d38d:	85 c0                	test   eax,eax
c001d38f:	53                   	push   ebx
c001d390:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d394:	0f 85 88 00 00 00    	jne    c001d422 <switchToThread(ThreadControlBlock*)+0x9c>
c001d39a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d39d:	3c ff                	cmp    al,0xff
c001d39f:	74 7d                	je     c001d41e <switchToThread(ThreadControlBlock*)+0x98>
c001d3a1:	0f b6 d0             	movzx  edx,al
c001d3a4:	b8 84 03 00 00       	mov    eax,0x384
c001d3a9:	29 d0                	sub    eax,edx
c001d3ab:	c1 e0 10             	shl    eax,0x10
c001d3ae:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d3b1:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d3b4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c001d3b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3bf:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d3c6:	74 4a                	je     c001d412 <switchToThread(ThreadControlBlock*)+0x8c>
c001d3c8:	0f 31                	rdtsc  
c001d3ca:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c001d3cf:	89 c6                	mov    esi,eax
c001d3d1:	89 d7                	mov    edi,edx
c001d3d3:	2b 35 f8 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030ff8
c001d3d9:	89 15 0c 10 03 c0    	mov    DWORD PTR ds:0xc003100c,edx
c001d3df:	1b 3d fc 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030ffc
c001d3e5:	89 35 00 10 03 c0    	mov    DWORD PTR ds:0xc0031000,esi
c001d3eb:	a3 f8 0f 03 c0       	mov    ds:0xc0030ff8,eax
c001d3f0:	89 3d 04 10 03 c0    	mov    DWORD PTR ds:0xc0031004,edi
c001d3f6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d3fc:	89 15 fc 0f 03 c0    	mov    DWORD PTR ds:0xc0030ffc,edx
c001d402:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d405:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d408:	01 c6                	add    esi,eax
c001d40a:	11 d7                	adc    edi,edx
c001d40c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d40f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d412:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d416:	5b                   	pop    ebx
c001d417:	5e                   	pop    esi
c001d418:	5f                   	pop    edi
c001d419:	e9 44 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d41e:	31 c0                	xor    eax,eax
c001d420:	eb 8f                	jmp    c001d3b1 <switchToThread(ThreadControlBlock*)+0x2b>
c001d422:	5b                   	pop    ebx
c001d423:	c7 05 c0 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x1
c001d42d:	5e                   	pop    esi
c001d42e:	5f                   	pop    edi
c001d42f:	c3                   	ret    

c001d430 <Process::addArgs(char**)>:
c001d430:	57                   	push   edi
c001d431:	56                   	push   esi
c001d432:	53                   	push   ebx
c001d433:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d437:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d43b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d445:	85 ff                	test   edi,edi
c001d447:	74 3d                	je     c001d486 <Process::addArgs(char**)+0x56>
c001d449:	8b 07                	mov    eax,DWORD PTR [edi]
c001d44b:	85 c0                	test   eax,eax
c001d44d:	74 37                	je     c001d486 <Process::addArgs(char**)+0x56>
c001d44f:	31 db                	xor    ebx,ebx
c001d451:	83 ec 0c             	sub    esp,0xc
c001d454:	50                   	push   eax
c001d455:	e8 12 33 fe ff       	call   c000076c <strlen>
c001d45a:	40                   	inc    eax
c001d45b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d45e:	e8 36 21 ff ff       	call   c000f599 <malloc>
c001d463:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d46a:	5a                   	pop    edx
c001d46b:	59                   	pop    ecx
c001d46c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d46f:	43                   	inc    ebx
c001d470:	50                   	push   eax
c001d471:	e8 96 33 fe ff       	call   c000080c <strcpy>
c001d476:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d482:	85 c0                	test   eax,eax
c001d484:	75 cb                	jne    c001d451 <Process::addArgs(char**)+0x21>
c001d486:	5b                   	pop    ebx
c001d487:	5e                   	pop    esi
c001d488:	5f                   	pop    edi
c001d489:	c3                   	ret    

c001d48a <Process::Process(char const*, Process*, char**)>:
c001d48a:	56                   	push   esi
c001d48b:	53                   	push   ebx
c001d48c:	83 ec 14             	sub    esp,0x14
c001d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d493:	05 0c 02 00 00       	add    eax,0x20c
c001d498:	bb 07 00 00 00       	mov    ebx,0x7
c001d49d:	89 c6                	mov    esi,eax
c001d49f:	85 db                	test   ebx,ebx
c001d4a1:	78 12                	js     c001d4b5 <Process::Process(char const*, Process*, char**)+0x2b>
c001d4a3:	83 ec 0c             	sub    esp,0xc
c001d4a6:	56                   	push   esi
c001d4a7:	e8 9a b6 00 00       	call   c0028b46 <ThreadControlBlock::ThreadControlBlock()>
c001d4ac:	83 c4 10             	add    esp,0x10
c001d4af:	83 c6 63             	add    esi,0x63
c001d4b2:	4b                   	dec    ebx
c001d4b3:	eb ea                	jmp    c001d49f <Process::Process(char const*, Process*, char**)+0x15>
c001d4b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4c0:	83 ec 0c             	sub    esp,0xc
c001d4c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4c7:	e8 b8 c8 ff ff       	call   c0019d84 <Krnl::newProcessEnv(Process*)>
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	89 c2                	mov    edx,eax
c001d4d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4df:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4e8:	a1 30 d0 02 c0       	mov    eax,ds:0xc002d030
c001d4ed:	8d 50 01             	lea    edx,[eax+0x1]
c001d4f0:	89 15 30 d0 02 c0    	mov    DWORD PTR ds:0xc002d030,edx
c001d4f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d4fa:	89 02                	mov    DWORD PTR [edx],eax
c001d4fc:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d504:	83 ec 0c             	sub    esp,0xc
c001d507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d50b:	e8 89 20 ff ff       	call   c000f599 <malloc>
c001d510:	83 c4 10             	add    esp,0x10
c001d513:	89 c3                	mov    ebx,eax
c001d515:	83 ec 08             	sub    esp,0x8
c001d518:	6a 00                	push   0x0
c001d51a:	53                   	push   ebx
c001d51b:	e8 0a 4a ff ff       	call   c0011f2a <VAS::VAS(bool)>
c001d520:	83 c4 10             	add    esp,0x10
c001d523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d527:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d531:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d53b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d543:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d54d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d553:	85 c0                	test   eax,eax
c001d555:	74 42                	je     c001d599 <Process::Process(char const*, Process*, char**)+0x10f>
c001d557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d55b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d561:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d56b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d575:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d57b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d585:	05 0c 01 00 00       	add    eax,0x10c
c001d58a:	83 ec 08             	sub    esp,0x8
c001d58d:	52                   	push   edx
c001d58e:	50                   	push   eax
c001d58f:	e8 78 32 fe ff       	call   c000080c <strcpy>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	eb 63                	jmp    c001d5fc <Process::Process(char const*, Process*, char**)+0x172>
c001d599:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d5a1:	83 ec 0c             	sub    esp,0xc
c001d5a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5a8:	e8 ec 1f ff ff       	call   c000f599 <malloc>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	89 c3                	mov    ebx,eax
c001d5b2:	83 ec 08             	sub    esp,0x8
c001d5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5b9:	53                   	push   ebx
c001d5ba:	e8 c7 32 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d5bf:	83 c4 10             	add    esp,0x10
c001d5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5c6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5d6:	83 ec 0c             	sub    esp,0xc
c001d5d9:	50                   	push   eax
c001d5da:	e8 66 2a ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d5df:	83 c4 10             	add    esp,0x10
c001d5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5e6:	05 0c 01 00 00       	add    eax,0x10c
c001d5eb:	83 ec 08             	sub    esp,0x8
c001d5ee:	68 a8 bc 02 c0       	push   0xc002bca8
c001d5f3:	50                   	push   eax
c001d5f4:	e8 13 32 fe ff       	call   c000080c <strcpy>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d600:	83 c0 0c             	add    eax,0xc
c001d603:	83 ec 08             	sub    esp,0x8
c001d606:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d60a:	50                   	push   eax
c001d60b:	e8 fc 31 fe ff       	call   c000080c <strcpy>
c001d610:	83 c4 10             	add    esp,0x10
c001d613:	83 ec 08             	sub    esp,0x8
c001d616:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d61a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d61e:	e8 0d fe ff ff       	call   c001d430 <Process::addArgs(char**)>
c001d623:	83 c4 10             	add    esp,0x10
c001d626:	83 ec 08             	sub    esp,0x8
c001d629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d62d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d631:	e8 a0 ed ff ff       	call   c001c3d6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d636:	83 c4 10             	add    esp,0x10
c001d639:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d63d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d641:	83 f0 01             	xor    eax,0x1
c001d644:	88 c2                	mov    dl,al
c001d646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d64a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d650:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d655:	83 ec 08             	sub    esp,0x8
c001d658:	50                   	push   eax
c001d659:	68 00 bd 02 c0       	push   0xc002bd00
c001d65e:	e8 2c 51 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001d663:	83 c4 10             	add    esp,0x10
c001d666:	90                   	nop
c001d667:	83 c4 14             	add    esp,0x14
c001d66a:	5b                   	pop    ebx
c001d66b:	5e                   	pop    esi
c001d66c:	c3                   	ret    
c001d66d:	90                   	nop

c001d66e <Process::Process(bool, char const*, Process*, char**)>:
c001d66e:	56                   	push   esi
c001d66f:	53                   	push   ebx
c001d670:	83 ec 24             	sub    esp,0x24
c001d673:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d677:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d67b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d67f:	05 0c 02 00 00       	add    eax,0x20c
c001d684:	bb 07 00 00 00       	mov    ebx,0x7
c001d689:	89 c6                	mov    esi,eax
c001d68b:	85 db                	test   ebx,ebx
c001d68d:	78 12                	js     c001d6a1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d68f:	83 ec 0c             	sub    esp,0xc
c001d692:	56                   	push   esi
c001d693:	e8 ae b4 00 00       	call   c0028b46 <ThreadControlBlock::ThreadControlBlock()>
c001d698:	83 c4 10             	add    esp,0x10
c001d69b:	83 c6 63             	add    esi,0x63
c001d69e:	4b                   	dec    ebx
c001d69f:	eb ea                	jmp    c001d68b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d6a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6a5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6b3:	e8 cc c6 ff ff       	call   c0019d84 <Krnl::newProcessEnv(Process*)>
c001d6b8:	83 c4 10             	add    esp,0x10
c001d6bb:	89 c2                	mov    edx,eax
c001d6bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6cb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6d4:	a1 30 d0 02 c0       	mov    eax,ds:0xc002d030
c001d6d9:	8d 50 01             	lea    edx,[eax+0x1]
c001d6dc:	89 15 30 d0 02 c0    	mov    DWORD PTR ds:0xc002d030,edx
c001d6e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6e6:	89 02                	mov    DWORD PTR [edx],eax
c001d6e8:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d6f0:	83 ec 0c             	sub    esp,0xc
c001d6f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6f7:	e8 9d 1e ff ff       	call   c000f599 <malloc>
c001d6fc:	83 c4 10             	add    esp,0x10
c001d6ff:	89 c3                	mov    ebx,eax
c001d701:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d706:	83 ec 08             	sub    esp,0x8
c001d709:	50                   	push   eax
c001d70a:	53                   	push   ebx
c001d70b:	e8 1a 48 ff ff       	call   c0011f2a <VAS::VAS(bool)>
c001d710:	83 c4 10             	add    esp,0x10
c001d713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d717:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d71d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d721:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d72b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d72f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d733:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d73d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d743:	85 c0                	test   eax,eax
c001d745:	74 42                	je     c001d789 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d747:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d74b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d751:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d757:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d75b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d765:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d76b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d771:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d775:	05 0c 01 00 00       	add    eax,0x10c
c001d77a:	83 ec 08             	sub    esp,0x8
c001d77d:	52                   	push   edx
c001d77e:	50                   	push   eax
c001d77f:	e8 88 30 fe ff       	call   c000080c <strcpy>
c001d784:	83 c4 10             	add    esp,0x10
c001d787:	eb 63                	jmp    c001d7ec <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d789:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d798:	e8 fc 1d ff ff       	call   c000f599 <malloc>
c001d79d:	83 c4 10             	add    esp,0x10
c001d7a0:	89 c3                	mov    ebx,eax
c001d7a2:	83 ec 08             	sub    esp,0x8
c001d7a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7a9:	53                   	push   ebx
c001d7aa:	e8 d7 30 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d7af:	83 c4 10             	add    esp,0x10
c001d7b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7b6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7c0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7c6:	83 ec 0c             	sub    esp,0xc
c001d7c9:	50                   	push   eax
c001d7ca:	e8 76 28 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d7cf:	83 c4 10             	add    esp,0x10
c001d7d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7d6:	05 0c 01 00 00       	add    eax,0x10c
c001d7db:	83 ec 08             	sub    esp,0x8
c001d7de:	68 a8 bc 02 c0       	push   0xc002bca8
c001d7e3:	50                   	push   eax
c001d7e4:	e8 23 30 fe ff       	call   c000080c <strcpy>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7f0:	83 c0 0c             	add    eax,0xc
c001d7f3:	83 ec 08             	sub    esp,0x8
c001d7f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7fa:	50                   	push   eax
c001d7fb:	e8 0c 30 fe ff       	call   c000080c <strcpy>
c001d800:	83 c4 10             	add    esp,0x10
c001d803:	83 ec 08             	sub    esp,0x8
c001d806:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d80a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d80e:	e8 1d fc ff ff       	call   c001d430 <Process::addArgs(char**)>
c001d813:	83 c4 10             	add    esp,0x10
c001d816:	90                   	nop
c001d817:	83 c4 24             	add    esp,0x24
c001d81a:	5b                   	pop    ebx
c001d81b:	5e                   	pop    esi
c001d81c:	c3                   	ret    

c001d81d <taskStartupFunction>:
c001d81d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d822:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d825:	c3                   	ret    

c001d826 <Semaphore::Semaphore(int)>:
c001d826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d82a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d82e:	89 10                	mov    DWORD PTR [eax],edx
c001d830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d834:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d83f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d84a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d851:	90                   	nop
c001d852:	c3                   	ret    
c001d853:	90                   	nop

c001d854 <Mutex::Mutex()>:
c001d854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d858:	6a 01                	push   0x1
c001d85a:	50                   	push   eax
c001d85b:	e8 c6 ff ff ff       	call   c001d826 <Semaphore::Semaphore(int)>
c001d860:	83 c4 08             	add    esp,0x8
c001d863:	90                   	nop
c001d864:	c3                   	ret    
c001d865:	90                   	nop

c001d866 <Process::createThread(void (*)(void*), void*, int)>:
c001d866:	55                   	push   ebp
c001d867:	31 c9                	xor    ecx,ecx
c001d869:	57                   	push   edi
c001d86a:	56                   	push   esi
c001d86b:	53                   	push   ebx
c001d86c:	83 ec 1c             	sub    esp,0x1c
c001d86f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d873:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d87a:	89 f2                	mov    edx,esi
c001d87c:	0f b7 c2             	movzx  eax,dx
c001d87f:	83 e2 01             	and    edx,0x1
c001d882:	74 16                	je     c001d89a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d884:	d1 f8                	sar    eax,1
c001d886:	41                   	inc    ecx
c001d887:	89 c2                	mov    edx,eax
c001d889:	83 f9 10             	cmp    ecx,0x10
c001d88c:	75 ee                	jne    c001d87c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d88e:	83 c4 1c             	add    esp,0x1c
c001d891:	31 db                	xor    ebx,ebx
c001d893:	89 d8                	mov    eax,ebx
c001d895:	5b                   	pop    ebx
c001d896:	5e                   	pop    esi
c001d897:	5f                   	pop    edi
c001d898:	5d                   	pop    ebp
c001d899:	c3                   	ret    
c001d89a:	b8 01 00 00 00       	mov    eax,0x1
c001d89f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d8a2:	d3 e0                	shl    eax,cl
c001d8a4:	09 c6                	or     esi,eax
c001d8a6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d8a9:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d8b0:	89 c6                	mov    esi,eax
c001d8b2:	c1 e6 05             	shl    esi,0x5
c001d8b5:	01 f0                	add    eax,esi
c001d8b7:	01 d8                	add    eax,ebx
c001d8b9:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d8c0:	75 0a                	jne    c001d8cc <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d8c2:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d8cc:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d8d2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d8d6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d8d9:	01 ca                	add    edx,ecx
c001d8db:	83 ec 08             	sub    esp,0x8
c001d8de:	89 d0                	mov    eax,edx
c001d8e0:	c1 e0 05             	shl    eax,0x5
c001d8e3:	01 d0                	add    eax,edx
c001d8e5:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d8e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8ed:	01 d8                	add    eax,ebx
c001d8ef:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d8f5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d8fb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d901:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d907:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d90d:	89 cd                	mov    ebp,ecx
c001d90f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d913:	f7 dd                	neg    ebp
c001d915:	c1 e5 15             	shl    ebp,0x15
c001d918:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d91e:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d924:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d92e:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d934:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d93e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d948:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d94c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d953:	53                   	push   ebx
c001d954:	68 e4 0f 03 c0       	push   0xc0030fe4
c001d959:	e8 a2 af 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d95e:	89 d8                	mov    eax,ebx
c001d960:	83 c4 10             	add    esp,0x10
c001d963:	83 c4 1c             	add    esp,0x1c
c001d966:	5b                   	pop    ebx
c001d967:	5e                   	pop    esi
c001d968:	5f                   	pop    edi
c001d969:	5d                   	pop    ebp
c001d96a:	c3                   	ret    
c001d96b:	90                   	nop

c001d96c <Process::createUserThread()>:
c001d96c:	83 ec 0c             	sub    esp,0xc
c001d96f:	68 80 00 00 00       	push   0x80
c001d974:	6a 00                	push   0x0
c001d976:	68 30 d3 01 c0       	push   0xc001d330
c001d97b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d97f:	e8 e2 fe ff ff       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c001d984:	83 c4 1c             	add    esp,0x1c
c001d987:	c3                   	ret    

c001d988 <setupMultitasking(void (*)())>:
c001d988:	56                   	push   esi
c001d989:	53                   	push   ebx
c001d98a:	51                   	push   ecx
c001d98b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d98f:	eb 10                	jmp    c001d9a1 <setupMultitasking(void (*)())+0x19>
c001d991:	83 ec 0c             	sub    esp,0xc
c001d994:	68 e4 0f 03 c0       	push   0xc0030fe4
c001d999:	e8 b4 ae 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	83 ec 0c             	sub    esp,0xc
c001d9a4:	68 e4 0f 03 c0       	push   0xc0030fe4
c001d9a9:	e8 80 ae 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	84 c0                	test   al,al
c001d9b3:	74 dc                	je     c001d991 <setupMultitasking(void (*)())+0x9>
c001d9b5:	83 ec 0c             	sub    esp,0xc
c001d9b8:	68 3f 07 00 00       	push   0x73f
c001d9bd:	e8 d7 1b ff ff       	call   c000f599 <malloc>
c001d9c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9c9:	89 c3                	mov    ebx,eax
c001d9cb:	6a 00                	push   0x0
c001d9cd:	68 ac bc 02 c0       	push   0xc002bcac
c001d9d2:	6a 01                	push   0x1
c001d9d4:	50                   	push   eax
c001d9d5:	e8 94 fc ff ff       	call   c001d66e <Process::Process(bool, char const*, Process*, char**)>
c001d9da:	83 c4 14             	add    esp,0x14
c001d9dd:	89 1d f0 0f 03 c0    	mov    DWORD PTR ds:0xc0030ff0,ebx
c001d9e3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d9e9:	e8 65 29 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d9ee:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d9f6:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001da00:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001da06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da09:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001da13:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001da19:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001da1f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001da29:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001da33:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001da3d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001da43:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001da4d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001da53:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001da5d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001da63:	58                   	pop    eax
c001da64:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001da6a:	5a                   	pop    edx
c001da6b:	68 a8 bc 02 c0       	push   0xc002bca8
c001da70:	50                   	push   eax
c001da71:	e8 96 2d fe ff       	call   c000080c <strcpy>
c001da76:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001da7d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da81:	83 c4 14             	add    esp,0x14
c001da84:	5b                   	pop    ebx
c001da85:	5e                   	pop    esi
c001da86:	e9 c9 28 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001da8b <schedule()>:
c001da8b:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001da90:	85 c0                	test   eax,eax
c001da92:	74 0b                	je     c001da9f <schedule()+0x14>
c001da94:	c7 05 c0 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x1
c001da9e:	c3                   	ret    
c001da9f:	53                   	push   ebx
c001daa0:	83 ec 14             	sub    esp,0x14
c001daa3:	68 e4 0f 03 c0       	push   0xc0030fe4
c001daa8:	e8 81 ad 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001daad:	83 c4 10             	add    esp,0x10
c001dab0:	84 c0                	test   al,al
c001dab2:	75 38                	jne    c001daec <schedule()+0x61>
c001dab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dab9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dabc:	4a                   	dec    edx
c001dabd:	74 32                	je     c001daf1 <schedule()+0x66>
c001dabf:	83 ec 0c             	sub    esp,0xc
c001dac2:	68 e4 0f 03 c0       	push   0xc0030fe4
c001dac7:	e8 7e ad 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dacc:	c7 04 24 e4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe4
c001dad3:	89 c3                	mov    ebx,eax
c001dad5:	e8 78 ad 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dada:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dae1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dae4:	e8 9d f8 ff ff       	call   c001d386 <switchToThread(ThreadControlBlock*)>
c001dae9:	83 c4 10             	add    esp,0x10
c001daec:	83 c4 08             	add    esp,0x8
c001daef:	5b                   	pop    ebx
c001daf0:	c3                   	ret    
c001daf1:	83 ec 08             	sub    esp,0x8
c001daf4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dafb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db01:	68 e4 0f 03 c0       	push   0xc0030fe4
c001db06:	e8 f5 ad 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db0b:	83 c4 10             	add    esp,0x10
c001db0e:	eb af                	jmp    c001dabf <schedule()+0x34>

c001db10 <Semaphore::tryAcquire()>:
c001db10:	53                   	push   ebx
c001db11:	83 ec 08             	sub    esp,0x8
c001db14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db18:	fa                   	cli    
c001db19:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001db1e:	8d 50 01             	lea    edx,[eax+0x1]
c001db21:	89 15 c8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc8,edx
c001db27:	8b 15 c4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc4
c001db2d:	8d 5a 01             	lea    ebx,[edx+0x1]
c001db30:	89 1d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ebx
c001db36:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001db39:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001db3b:	7c 2a                	jl     c001db67 <Semaphore::tryAcquire()+0x57>
c001db3d:	89 15 c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,edx
c001db43:	85 d2                	test   edx,edx
c001db45:	75 0a                	jne    c001db51 <Semaphore::tryAcquire()+0x41>
c001db47:	8b 15 c0 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fc0
c001db4d:	85 d2                	test   edx,edx
c001db4f:	75 5b                	jne    c001dbac <Semaphore::tryAcquire()+0x9c>
c001db51:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001db56:	85 c0                	test   eax,eax
c001db58:	74 07                	je     c001db61 <Semaphore::tryAcquire()+0x51>
c001db5a:	31 c0                	xor    eax,eax
c001db5c:	83 c4 08             	add    esp,0x8
c001db5f:	5b                   	pop    ebx
c001db60:	c3                   	ret    
c001db61:	fb                   	sti    
c001db62:	83 c4 08             	add    esp,0x8
c001db65:	5b                   	pop    ebx
c001db66:	c3                   	ret    
c001db67:	43                   	inc    ebx
c001db68:	89 15 c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,edx
c001db6e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001db71:	85 d2                	test   edx,edx
c001db73:	75 1f                	jne    c001db94 <Semaphore::tryAcquire()+0x84>
c001db75:	8b 0d c0 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fc0
c001db7b:	85 c9                	test   ecx,ecx
c001db7d:	74 15                	je     c001db94 <Semaphore::tryAcquire()+0x84>
c001db7f:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001db89:	e8 fd fe ff ff       	call   c001da8b <schedule()>
c001db8e:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001db93:	48                   	dec    eax
c001db94:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001db99:	85 c0                	test   eax,eax
c001db9b:	75 08                	jne    c001dba5 <Semaphore::tryAcquire()+0x95>
c001db9d:	fb                   	sti    
c001db9e:	b0 01                	mov    al,0x1
c001dba0:	83 c4 08             	add    esp,0x8
c001dba3:	5b                   	pop    ebx
c001dba4:	c3                   	ret    
c001dba5:	b0 01                	mov    al,0x1
c001dba7:	83 c4 08             	add    esp,0x8
c001dbaa:	5b                   	pop    ebx
c001dbab:	c3                   	ret    
c001dbac:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001dbb6:	e8 d0 fe ff ff       	call   c001da8b <schedule()>
c001dbbb:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dbc0:	48                   	dec    eax
c001dbc1:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001dbc6:	85 c0                	test   eax,eax
c001dbc8:	75 90                	jne    c001db5a <Semaphore::tryAcquire()+0x4a>
c001dbca:	eb 95                	jmp    c001db61 <Semaphore::tryAcquire()+0x51>

c001dbcc <Semaphore::assertLocked(char const*)>:
c001dbcc:	83 ec 0c             	sub    esp,0xc
c001dbcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbd3:	fa                   	cli    
c001dbd4:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001dbda:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001dbdf:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbe2:	89 0d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ecx
c001dbe8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dbea:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dbed:	7c 24                	jl     c001dc13 <Semaphore::assertLocked(char const*)+0x47>
c001dbef:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001dbf4:	85 c0                	test   eax,eax
c001dbf6:	75 09                	jne    c001dc01 <Semaphore::assertLocked(char const*)+0x35>
c001dbf8:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001dbfd:	85 c0                	test   eax,eax
c001dbff:	75 29                	jne    c001dc2a <Semaphore::assertLocked(char const*)+0x5e>
c001dc01:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dc06:	48                   	dec    eax
c001dc07:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001dc0c:	75 01                	jne    c001dc0f <Semaphore::assertLocked(char const*)+0x43>
c001dc0e:	fb                   	sti    
c001dc0f:	83 c4 0c             	add    esp,0xc
c001dc12:	c3                   	ret    
c001dc13:	83 ec 0c             	sub    esp,0xc
c001dc16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dc1a:	e8 dc c2 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001dc1f:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001dc24:	83 c4 10             	add    esp,0x10
c001dc27:	48                   	dec    eax
c001dc28:	eb c5                	jmp    c001dbef <Semaphore::assertLocked(char const*)+0x23>
c001dc2a:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001dc34:	e8 52 fe ff ff       	call   c001da8b <schedule()>
c001dc39:	eb c6                	jmp    c001dc01 <Semaphore::assertLocked(char const*)+0x35>

c001dc3b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dc3b:	83 ec 0c             	sub    esp,0xc
c001dc3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc47:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc4a:	e8 3c fe ff ff       	call   c001da8b <schedule()>
c001dc4f:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dc54:	48                   	dec    eax
c001dc55:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001dc5a:	75 01                	jne    c001dc5d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dc5c:	fb                   	sti    
c001dc5d:	83 c4 0c             	add    esp,0xc
c001dc60:	c3                   	ret    

c001dc61 <blockTask(TaskState)>:
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	fa                   	cli    
c001dc65:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001dc6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc77:	e8 0f fe ff ff       	call   c001da8b <schedule()>
c001dc7c:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dc81:	48                   	dec    eax
c001dc82:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001dc87:	75 01                	jne    c001dc8a <blockTask(TaskState)+0x29>
c001dc89:	fb                   	sti    
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	c3                   	ret    

c001dc8e <waitTask(int, int*, int)>:
c001dc8e:	83 ec 18             	sub    esp,0x18
c001dc91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc9a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dc9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dca1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca6:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dca9:	6a 07                	push   0x7
c001dcab:	e8 b1 ff ff ff       	call   c001dc61 <blockTask(TaskState)>
c001dcb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb5:	83 c4 10             	add    esp,0x10
c001dcb8:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dcbb:	85 d2                	test   edx,edx
c001dcbd:	74 0a                	je     c001dcc9 <waitTask(int, int*, int)+0x3b>
c001dcbf:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dcc2:	89 02                	mov    DWORD PTR [edx],eax
c001dcc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcc9:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dccc:	83 c4 0c             	add    esp,0xc
c001dccf:	c3                   	ret    

c001dcd0 <nanoSleepUntil(unsigned long long)>:
c001dcd0:	83 ec 0c             	sub    esp,0xc
c001dcd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcdb:	3b 05 10 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e110
c001dce1:	89 d1                	mov    ecx,edx
c001dce3:	1b 0d 14 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e114
c001dce9:	73 04                	jae    c001dcef <nanoSleepUntil(unsigned long long)+0x1f>
c001dceb:	83 c4 0c             	add    esp,0xc
c001dcee:	c3                   	ret    
c001dcef:	fa                   	cli    
c001dcf0:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001dcf6:	83 ec 08             	sub    esp,0x8
c001dcf9:	ff 05 c4 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc4
c001dcff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd05:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dd08:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dd0b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dd11:	68 d8 0f 03 c0       	push   0xc0030fd8
c001dd16:	e8 e5 ab 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd1b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dd22:	e8 3a ff ff ff       	call   c001dc61 <blockTask(TaskState)>
c001dd27:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	48                   	dec    eax
c001dd30:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001dd35:	85 c0                	test   eax,eax
c001dd37:	75 09                	jne    c001dd42 <nanoSleepUntil(unsigned long long)+0x72>
c001dd39:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001dd3e:	85 c0                	test   eax,eax
c001dd40:	75 12                	jne    c001dd54 <nanoSleepUntil(unsigned long long)+0x84>
c001dd42:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dd47:	48                   	dec    eax
c001dd48:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001dd4d:	75 9c                	jne    c001dceb <nanoSleepUntil(unsigned long long)+0x1b>
c001dd4f:	fb                   	sti    
c001dd50:	83 c4 0c             	add    esp,0xc
c001dd53:	c3                   	ret    
c001dd54:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001dd5e:	e8 28 fd ff ff       	call   c001da8b <schedule()>
c001dd63:	eb dd                	jmp    c001dd42 <nanoSleepUntil(unsigned long long)+0x72>

c001dd65 <nanoSleep(unsigned long long)>:
c001dd65:	a1 10 e1 02 c0       	mov    eax,ds:0xc002e110
c001dd6a:	8b 15 14 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e114
c001dd70:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dd74:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dd78:	e9 53 ff ff ff       	jmp    c001dcd0 <nanoSleepUntil(unsigned long long)>

c001dd7d <sleep(unsigned long long)>:
c001dd7d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dd85:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dd8a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dd8e:	01 ca                	add    edx,ecx
c001dd90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd94:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd98:	eb cb                	jmp    c001dd65 <nanoSleep(unsigned long long)>

c001dd9a <Semaphore::acquire()>:
c001dd9a:	83 ec 0c             	sub    esp,0xc
c001dd9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dda1:	fa                   	cli    
c001dda2:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001dda7:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001ddad:	8d 48 01             	lea    ecx,[eax+0x1]
c001ddb0:	89 0d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ecx
c001ddb6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ddb9:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ddbb:	7d 28                	jge    c001dde5 <Semaphore::acquire()+0x4b>
c001ddbd:	41                   	inc    ecx
c001ddbe:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001ddc1:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001ddc6:	85 c0                	test   eax,eax
c001ddc8:	75 09                	jne    c001ddd3 <Semaphore::acquire()+0x39>
c001ddca:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001ddcf:	85 c0                	test   eax,eax
c001ddd1:	75 4e                	jne    c001de21 <Semaphore::acquire()+0x87>
c001ddd3:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001ddd8:	48                   	dec    eax
c001ddd9:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001ddde:	75 01                	jne    c001dde1 <Semaphore::acquire()+0x47>
c001dde0:	fb                   	sti    
c001dde1:	83 c4 0c             	add    esp,0xc
c001dde4:	c3                   	ret    
c001dde5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddea:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ddf1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ddf4:	85 c9                	test   ecx,ecx
c001ddf6:	74 3a                	je     c001de32 <Semaphore::acquire()+0x98>
c001ddf8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ddfb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de01:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001de04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de09:	83 ec 0c             	sub    esp,0xc
c001de0c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001de0f:	6a 05                	push   0x5
c001de11:	e8 4b fe ff ff       	call   c001dc61 <blockTask(TaskState)>
c001de16:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001de1b:	83 c4 10             	add    esp,0x10
c001de1e:	48                   	dec    eax
c001de1f:	eb a0                	jmp    c001ddc1 <Semaphore::acquire()+0x27>
c001de21:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001de2b:	e8 5b fc ff ff       	call   c001da8b <schedule()>
c001de30:	eb a1                	jmp    c001ddd3 <Semaphore::acquire()+0x39>
c001de32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001de3a:	eb c8                	jmp    c001de04 <Semaphore::acquire()+0x6a>

c001de3c <taskReturned>:
c001de3c:	83 ec 18             	sub    esp,0x18
c001de3f:	68 28 bd 02 c0       	push   0xc002bd28
c001de44:	e8 b2 c0 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	6a 02                	push   0x2
c001de51:	e8 0b fe ff ff       	call   c001dc61 <blockTask(TaskState)>
c001de56:	fa                   	cli    
c001de57:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001de5d:	e8 29 fc ff ff       	call   c001da8b <schedule()>
c001de62:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001de67:	83 c4 10             	add    esp,0x10
c001de6a:	48                   	dec    eax
c001de6b:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001de70:	85 c0                	test   eax,eax
c001de72:	75 d8                	jne    c001de4c <taskReturned+0x10>
c001de74:	fb                   	sti    
c001de75:	eb d5                	jmp    c001de4c <taskReturned+0x10>

c001de77 <Thr::processFromPID(int)>:
c001de77:	57                   	push   edi
c001de78:	56                   	push   esi
c001de79:	53                   	push   ebx
c001de7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de7e:	fa                   	cli    
c001de7f:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001de85:	83 ec 0c             	sub    esp,0xc
c001de88:	68 e4 0f 03 c0       	push   0xc0030fe4
c001de8d:	e8 b8 a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de92:	83 c4 10             	add    esp,0x10
c001de95:	89 c7                	mov    edi,eax
c001de97:	eb 14                	jmp    c001dead <Thr::processFromPID(int)+0x36>
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	68 e4 0f 03 c0       	push   0xc0030fe4
c001dea1:	e8 a4 a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dea6:	83 c4 10             	add    esp,0x10
c001dea9:	39 f8                	cmp    eax,edi
c001deab:	74 49                	je     c001def6 <Thr::processFromPID(int)+0x7f>
c001dead:	83 ec 0c             	sub    esp,0xc
c001deb0:	68 e4 0f 03 c0       	push   0xc0030fe4
c001deb5:	e8 90 a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001deba:	c7 04 24 e4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe4
c001dec1:	89 c3                	mov    ebx,eax
c001dec3:	e8 8a a9 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dec8:	58                   	pop    eax
c001dec9:	5a                   	pop    edx
c001deca:	53                   	push   ebx
c001decb:	68 e4 0f 03 c0       	push   0xc0030fe4
c001ded0:	e8 2b aa 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ded5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ded8:	83 c4 10             	add    esp,0x10
c001dedb:	39 30                	cmp    DWORD PTR [eax],esi
c001dedd:	75 ba                	jne    c001de99 <Thr::processFromPID(int)+0x22>
c001dedf:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001dee4:	48                   	dec    eax
c001dee5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001deea:	74 07                	je     c001def3 <Thr::processFromPID(int)+0x7c>
c001deec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deef:	5b                   	pop    ebx
c001def0:	5e                   	pop    esi
c001def1:	5f                   	pop    edi
c001def2:	c3                   	ret    
c001def3:	fb                   	sti    
c001def4:	eb f6                	jmp    c001deec <Thr::processFromPID(int)+0x75>
c001def6:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001defb:	48                   	dec    eax
c001defc:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001df01:	75 05                	jne    c001df08 <Thr::processFromPID(int)+0x91>
c001df03:	fb                   	sti    
c001df04:	5b                   	pop    ebx
c001df05:	5e                   	pop    esi
c001df06:	5f                   	pop    edi
c001df07:	c3                   	ret    
c001df08:	5b                   	pop    ebx
c001df09:	31 c0                	xor    eax,eax
c001df0b:	5e                   	pop    esi
c001df0c:	5f                   	pop    edi
c001df0d:	c3                   	ret    

c001df0e <unblockTask(ThreadControlBlock*)>:
c001df0e:	53                   	push   ebx
c001df0f:	83 ec 08             	sub    esp,0x8
c001df12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df16:	fa                   	cli    
c001df17:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001df1d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001df20:	85 c0                	test   eax,eax
c001df22:	74 5a                	je     c001df7e <unblockTask(ThreadControlBlock*)+0x70>
c001df24:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001df27:	48                   	dec    eax
c001df28:	74 31                	je     c001df5b <unblockTask(ThreadControlBlock*)+0x4d>
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	68 e4 0f 03 c0       	push   0xc0030fe4
c001df32:	e8 13 a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df37:	83 c4 10             	add    esp,0x10
c001df3a:	85 c0                	test   eax,eax
c001df3c:	75 17                	jne    c001df55 <unblockTask(ThreadControlBlock*)+0x47>
c001df3e:	eb 50                	jmp    c001df90 <unblockTask(ThreadControlBlock*)+0x82>
c001df40:	83 ec 08             	sub    esp,0x8
c001df43:	50                   	push   eax
c001df44:	68 e4 0f 03 c0       	push   0xc0030fe4
c001df49:	e8 84 ac 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001df4e:	83 c4 10             	add    esp,0x10
c001df51:	85 c0                	test   eax,eax
c001df53:	74 3b                	je     c001df90 <unblockTask(ThreadControlBlock*)+0x82>
c001df55:	39 c3                	cmp    ebx,eax
c001df57:	75 e7                	jne    c001df40 <unblockTask(ThreadControlBlock*)+0x32>
c001df59:	eb 10                	jmp    c001df6b <unblockTask(ThreadControlBlock*)+0x5d>
c001df5b:	83 ec 0c             	sub    esp,0xc
c001df5e:	68 ca bc 02 c0       	push   0xc002bcca
c001df63:	e8 27 48 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001df70:	48                   	dec    eax
c001df71:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001df76:	75 01                	jne    c001df79 <unblockTask(ThreadControlBlock*)+0x6b>
c001df78:	fb                   	sti    
c001df79:	83 c4 08             	add    esp,0x8
c001df7c:	5b                   	pop    ebx
c001df7d:	c3                   	ret    
c001df7e:	83 ec 0c             	sub    esp,0xc
c001df81:	68 b3 bc 02 c0       	push   0xc002bcb3
c001df86:	e8 04 48 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	eb db                	jmp    c001df6b <unblockTask(ThreadControlBlock*)+0x5d>
c001df90:	83 ec 08             	sub    esp,0x8
c001df93:	53                   	push   ebx
c001df94:	68 e4 0f 03 c0       	push   0xc0030fe4
c001df99:	e8 62 a9 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df9e:	83 c4 10             	add    esp,0x10
c001dfa1:	eb c8                	jmp    c001df6b <unblockTask(ThreadControlBlock*)+0x5d>

c001dfa3 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dfa3:	55                   	push   ebp
c001dfa4:	57                   	push   edi
c001dfa5:	56                   	push   esi
c001dfa6:	53                   	push   ebx
c001dfa7:	83 ec 1c             	sub    esp,0x1c
c001dfaa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfb1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dfb7:	85 ff                	test   edi,edi
c001dfb9:	7e 20                	jle    c001dfdb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dfbb:	31 f6                	xor    esi,esi
c001dfbd:	83 ec 0c             	sub    esp,0xc
c001dfc0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dfc7:	46                   	inc    esi
c001dfc8:	e8 dc 15 ff ff       	call   c000f5a9 <free>
c001dfcd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dfd9:	7f e2                	jg     c001dfbd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dfdb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dfe5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dfea:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dfed:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dff0:	d3 c0                	rol    eax,cl
c001dff2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dff9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dffc:	89 f7                	mov    edi,esi
c001dffe:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e006:	0f 85 64 01 00 00    	jne    c001e170 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e00c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e012:	85 ed                	test   ebp,ebp
c001e014:	74 1b                	je     c001e031 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e016:	83 ec 0c             	sub    esp,0xc
c001e019:	55                   	push   ebp
c001e01a:	e8 81 bc ff ff       	call   c0019ca0 <EnvVarContainer::~EnvVarContainer()>
c001e01f:	59                   	pop    ecx
c001e020:	5e                   	pop    esi
c001e021:	6a 0c                	push   0xc
c001e023:	55                   	push   ebp
c001e024:	e8 8e 46 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c001e029:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	89 f7                	mov    edi,esi
c001e031:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e037:	85 c0                	test   eax,eax
c001e039:	0f 84 aa 00 00 00    	je     c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e03f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e042:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e046:	31 c9                	xor    ecx,ecx
c001e048:	eb 10                	jmp    c001e05a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e04a:	41                   	inc    ecx
c001e04b:	83 f9 10             	cmp    ecx,0x10
c001e04e:	0f 84 95 00 00 00    	je     c001e0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e054:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e05a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e061:	d3 fa                	sar    edx,cl
c001e063:	83 e2 01             	and    edx,0x1
c001e066:	74 e2                	je     c001e04a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e068:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e06b:	01 ca                	add    edx,ecx
c001e06d:	89 d5                	mov    ebp,edx
c001e06f:	c1 e5 05             	shl    ebp,0x5
c001e072:	01 ea                	add    edx,ebp
c001e074:	01 d0                	add    eax,edx
c001e076:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e07c:	83 fd 07             	cmp    ebp,0x7
c001e07f:	75 c9                	jne    c001e04a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e081:	05 40 02 00 00       	add    eax,0x240
c001e086:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e089:	83 fd ff             	cmp    ebp,0xffffffff
c001e08c:	0f 8c e6 00 00 00    	jl     c001e178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e092:	0f 84 97 01 00 00    	je     c001e22f <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e098:	85 ed                	test   ebp,ebp
c001e09a:	0f 84 7e 01 00 00    	je     c001e21e <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e0a0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e0a2:	75 a6                	jne    c001e04a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0a4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0ae:	01 d0                	add    eax,edx
c001e0b0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e0b4:	83 ec 0c             	sub    esp,0xc
c001e0b7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e0bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0c0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0c6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e0cd:	50                   	push   eax
c001e0ce:	e8 3b fe ff ff       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0dd:	89 f7                	mov    edi,esi
c001e0df:	41                   	inc    ecx
c001e0e0:	83 f9 10             	cmp    ecx,0x10
c001e0e3:	0f 85 6b ff ff ff    	jne    c001e054 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e0e9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e0ef:	85 c0                	test   eax,eax
c001e0f1:	74 5d                	je     c001e150 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e0f3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e0f9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e0ff:	74 4f                	je     c001e150 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e101:	83 ec 0c             	sub    esp,0xc
c001e104:	68 e4 0f 03 c0       	push   0xc0030fe4
c001e109:	e8 3c a7 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e10e:	c7 04 24 e4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe4
c001e115:	89 c7                	mov    edi,eax
c001e117:	e8 12 a7 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e11c:	83 c4 10             	add    esp,0x10
c001e11f:	84 c0                	test   al,al
c001e121:	0f 84 c2 00 00 00    	je     c001e1e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e127:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e12a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e130:	85 d2                	test   edx,edx
c001e132:	74 0f                	je     c001e143 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e134:	83 ec 0c             	sub    esp,0xc
c001e137:	8b 02                	mov    eax,DWORD PTR [edx]
c001e139:	52                   	push   edx
c001e13a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e13d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e140:	83 c4 10             	add    esp,0x10
c001e143:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e14d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e150:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e156:	85 db                	test   ebx,ebx
c001e158:	74 16                	je     c001e170 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	53                   	push   ebx
c001e15e:	e8 a1 37 ff ff       	call   c0011904 <VAS::~VAS()>
c001e163:	58                   	pop    eax
c001e164:	5a                   	pop    edx
c001e165:	6a 14                	push   0x14
c001e167:	53                   	push   ebx
c001e168:	e8 4a 45 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	83 c4 1c             	add    esp,0x1c
c001e173:	5b                   	pop    ebx
c001e174:	5e                   	pop    esi
c001e175:	5f                   	pop    edi
c001e176:	5d                   	pop    ebp
c001e177:	c3                   	ret    
c001e178:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e17c:	83 ec 0c             	sub    esp,0xc
c001e17f:	68 5c bd 02 c0       	push   0xc002bd5c
c001e184:	e8 72 bd ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001e189:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e18c:	83 c4 10             	add    esp,0x10
c001e18f:	89 f7                	mov    edi,esi
c001e191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e195:	e9 b0 fe ff ff       	jmp    c001e04a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e19a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1a0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e1a6:	75 1c                	jne    c001e1c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e1a8:	83 ec 0c             	sub    esp,0xc
c001e1ab:	68 c4 bd 02 c0       	push   0xc002bdc4
c001e1b0:	e8 da 45 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001e1b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e1bc:	e8 a0 fa ff ff       	call   c001dc61 <blockTask(TaskState)>
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	83 ec 08             	sub    esp,0x8
c001e1c7:	56                   	push   esi
c001e1c8:	68 e4 0f 03 c0       	push   0xc0030fe4
c001e1cd:	e8 2e a7 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1d2:	c7 04 24 e4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe4
c001e1d9:	e8 6c a6 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1de:	83 c4 10             	add    esp,0x10
c001e1e1:	39 f8                	cmp    eax,edi
c001e1e3:	0f 84 3e ff ff ff    	je     c001e127 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e1e9:	83 ec 0c             	sub    esp,0xc
c001e1ec:	68 e4 0f 03 c0       	push   0xc0030fe4
c001e1f1:	e8 54 a6 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1f6:	c7 04 24 e4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fe4
c001e1fd:	89 c6                	mov    esi,eax
c001e1ff:	e8 4e a6 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	39 f3                	cmp    ebx,esi
c001e209:	74 b9                	je     c001e1c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e20b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e20e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e211:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e217:	75 ab                	jne    c001e1c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e219:	e9 7c ff ff ff       	jmp    c001e19a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e21e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	68 90 bd 02 c0       	push   0xc002bd90
c001e22a:	e9 55 ff ff ff       	jmp    c001e184 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e22f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e235:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e238:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e23b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e241:	01 d7                	add    edi,edx
c001e243:	89 f8                	mov    eax,edi
c001e245:	e9 66 fe ff ff       	jmp    c001e0b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e24a <cleanerTaskFunction(void*)>:
c001e24a:	53                   	push   ebx
c001e24b:	83 ec 08             	sub    esp,0x8
c001e24e:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e253:	48                   	dec    eax
c001e254:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e259:	75 01                	jne    c001e25c <cleanerTaskFunction(void*)+0x12>
c001e25b:	fb                   	sti    
c001e25c:	fa                   	cli    
c001e25d:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e262:	80 3d ac 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fac,0x0
c001e269:	8d 50 01             	lea    edx,[eax+0x1]
c001e26c:	89 15 c8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc8,edx
c001e272:	0f 84 a1 00 00 00    	je     c001e319 <cleanerTaskFunction(void*)+0xcf>
c001e278:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e27d:	85 c0                	test   eax,eax
c001e27f:	75 01                	jne    c001e282 <cleanerTaskFunction(void*)+0x38>
c001e281:	fb                   	sti    
c001e282:	c6 05 ac 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fac,0x0
c001e289:	fa                   	cli    
c001e28a:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e290:	ff 05 c4 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc4
c001e296:	fa                   	cli    
c001e297:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e29d:	eb 26                	jmp    c001e2c5 <cleanerTaskFunction(void*)+0x7b>
c001e29f:	83 ec 0c             	sub    esp,0xc
c001e2a2:	68 cc 0f 03 c0       	push   0xc0030fcc
c001e2a7:	e8 9e a5 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2ac:	c7 04 24 cc 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fcc
c001e2b3:	89 c3                	mov    ebx,eax
c001e2b5:	e8 98 a5 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2bd:	e8 e1 fc ff ff       	call   c001dfa3 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e2c2:	83 c4 10             	add    esp,0x10
c001e2c5:	83 ec 0c             	sub    esp,0xc
c001e2c8:	68 cc 0f 03 c0       	push   0xc0030fcc
c001e2cd:	e8 5c a5 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e2d2:	83 c4 10             	add    esp,0x10
c001e2d5:	84 c0                	test   al,al
c001e2d7:	74 c6                	je     c001e29f <cleanerTaskFunction(void*)+0x55>
c001e2d9:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e2de:	48                   	dec    eax
c001e2df:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e2e4:	75 01                	jne    c001e2e7 <cleanerTaskFunction(void*)+0x9d>
c001e2e6:	fb                   	sti    
c001e2e7:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001e2ec:	48                   	dec    eax
c001e2ed:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001e2f2:	0f 85 56 ff ff ff    	jne    c001e24e <cleanerTaskFunction(void*)+0x4>
c001e2f8:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001e2fd:	85 c0                	test   eax,eax
c001e2ff:	0f 84 49 ff ff ff    	je     c001e24e <cleanerTaskFunction(void*)+0x4>
c001e305:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001e30f:	e8 77 f7 ff ff       	call   c001da8b <schedule()>
c001e314:	e9 35 ff ff ff       	jmp    c001e24e <cleanerTaskFunction(void*)+0x4>
c001e319:	83 ec 0c             	sub    esp,0xc
c001e31c:	6a 02                	push   0x2
c001e31e:	e8 18 f9 ff ff       	call   c001dc3b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	e9 57 ff ff ff       	jmp    c001e282 <cleanerTaskFunction(void*)+0x38>

c001e32b <terminateTask(int)>:
c001e32b:	83 ec 14             	sub    esp,0x14
c001e32e:	fa                   	cli    
c001e32f:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e335:	ff 05 c4 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc4
c001e33b:	fa                   	cli    
c001e33c:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e342:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e346:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e34b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e34e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e353:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e356:	50                   	push   eax
c001e357:	68 cc 0f 03 c0       	push   0xc0030fcc
c001e35c:	e8 9f a5 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e366:	83 c4 10             	add    esp,0x10
c001e369:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e370:	a1 a8 0f 03 c0       	mov    eax,ds:0xc0030fa8
c001e375:	85 c0                	test   eax,eax
c001e377:	74 53                	je     c001e3cc <terminateTask(int)+0xa1>
c001e379:	83 ec 0c             	sub    esp,0xc
c001e37c:	c6 05 ac 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fac,0x1
c001e383:	50                   	push   eax
c001e384:	e8 85 fb ff ff       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e391:	48                   	dec    eax
c001e392:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e397:	75 01                	jne    c001e39a <terminateTask(int)+0x6f>
c001e399:	fb                   	sti    
c001e39a:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001e39f:	48                   	dec    eax
c001e3a0:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001e3a5:	75 09                	jne    c001e3b0 <terminateTask(int)+0x85>
c001e3a7:	83 3d c0 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030fc0,0x0
c001e3ae:	75 2e                	jne    c001e3de <terminateTask(int)+0xb3>
c001e3b0:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e3b5:	48                   	dec    eax
c001e3b6:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e3bb:	75 01                	jne    c001e3be <terminateTask(int)+0x93>
c001e3bd:	fb                   	sti    
c001e3be:	fa                   	cli    
c001e3bf:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e3c5:	e8 c1 f6 ff ff       	call   c001da8b <schedule()>
c001e3ca:	eb e4                	jmp    c001e3b0 <terminateTask(int)+0x85>
c001e3cc:	83 ec 0c             	sub    esp,0xc
c001e3cf:	68 e1 bc 02 c0       	push   0xc002bce1
c001e3d4:	e8 b6 43 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001e3d9:	83 c4 10             	add    esp,0x10
c001e3dc:	eb ae                	jmp    c001e38c <terminateTask(int)+0x61>
c001e3de:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001e3e8:	eb db                	jmp    c001e3c5 <terminateTask(int)+0x9a>

c001e3ea <Thr::terminateFromIRQ(int)>:
c001e3ea:	83 ec 18             	sub    esp,0x18
c001e3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3f1:	e8 35 ff ff ff       	call   c001e32b <terminateTask(int)>

c001e3f6 <Semaphore::release()>:
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3fd:	fa                   	cli    
c001e3fe:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001e403:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e409:	8d 48 01             	lea    ecx,[eax+0x1]
c001e40c:	89 0d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,ecx
c001e412:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e415:	85 c9                	test   ecx,ecx
c001e417:	74 3c                	je     c001e455 <Semaphore::release()+0x5f>
c001e419:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e41c:	83 ec 0c             	sub    esp,0xc
c001e41f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e422:	51                   	push   ecx
c001e423:	e8 e6 fa ff ff       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001e428:	a1 c4 0f 03 c0       	mov    eax,ds:0xc0030fc4
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	48                   	dec    eax
c001e431:	a3 c4 0f 03 c0       	mov    ds:0xc0030fc4,eax
c001e436:	85 c0                	test   eax,eax
c001e438:	75 09                	jne    c001e443 <Semaphore::release()+0x4d>
c001e43a:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001e43f:	85 c0                	test   eax,eax
c001e441:	75 17                	jne    c001e45a <Semaphore::release()+0x64>
c001e443:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e448:	48                   	dec    eax
c001e449:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e44e:	75 01                	jne    c001e451 <Semaphore::release()+0x5b>
c001e450:	fb                   	sti    
c001e451:	83 c4 0c             	add    esp,0xc
c001e454:	c3                   	ret    
c001e455:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e458:	eb d7                	jmp    c001e431 <Semaphore::release()+0x3b>
c001e45a:	c7 05 c0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fc0,0x0
c001e464:	e8 22 f6 ff ff       	call   c001da8b <schedule()>
c001e469:	eb d8                	jmp    c001e443 <Semaphore::release()+0x4d>

c001e46b <__static_initialization_and_destruction_0(int, int)>:
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e473:	0f 85 88 00 00 00    	jne    c001e501 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e479:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e481:	75 7e                	jne    c001e501 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e483:	83 ec 0c             	sub    esp,0xc
c001e486:	68 e4 0f 03 c0       	push   0xc0030fe4
c001e48b:	e8 00 a7 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e490:	83 c4 10             	add    esp,0x10
c001e493:	83 ec 04             	sub    esp,0x4
c001e496:	68 78 c8 02 c0       	push   0xc002c878
c001e49b:	68 e4 0f 03 c0       	push   0xc0030fe4
c001e4a0:	68 44 8b 02 c0       	push   0xc0028b44
c001e4a5:	e8 87 41 ff ff       	call   c0012631 <__cxa_atexit>
c001e4aa:	83 c4 10             	add    esp,0x10
c001e4ad:	83 ec 0c             	sub    esp,0xc
c001e4b0:	68 d8 0f 03 c0       	push   0xc0030fd8
c001e4b5:	e8 d6 a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e4ba:	83 c4 10             	add    esp,0x10
c001e4bd:	83 ec 04             	sub    esp,0x4
c001e4c0:	68 78 c8 02 c0       	push   0xc002c878
c001e4c5:	68 d8 0f 03 c0       	push   0xc0030fd8
c001e4ca:	68 44 8b 02 c0       	push   0xc0028b44
c001e4cf:	e8 5d 41 ff ff       	call   c0012631 <__cxa_atexit>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	83 ec 0c             	sub    esp,0xc
c001e4da:	68 cc 0f 03 c0       	push   0xc0030fcc
c001e4df:	e8 ac a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	83 ec 04             	sub    esp,0x4
c001e4ea:	68 78 c8 02 c0       	push   0xc002c878
c001e4ef:	68 cc 0f 03 c0       	push   0xc0030fcc
c001e4f4:	68 44 8b 02 c0       	push   0xc0028b44
c001e4f9:	e8 33 41 ff ff       	call   c0012631 <__cxa_atexit>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	90                   	nop
c001e502:	83 c4 0c             	add    esp,0xc
c001e505:	c3                   	ret    

c001e506 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e506:	83 ec 0c             	sub    esp,0xc
c001e509:	83 ec 08             	sub    esp,0x8
c001e50c:	68 ff ff 00 00       	push   0xffff
c001e511:	6a 01                	push   0x1
c001e513:	e8 53 ff ff ff       	call   c001e46b <__static_initialization_and_destruction_0(int, int)>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	83 c4 0c             	add    esp,0xc
c001e51e:	c3                   	ret    

c001e51f <Vm::inbv(unsigned short)>:
c001e51f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e523:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e528:	75 06                	jne    c001e530 <Vm::inbv(unsigned short)+0x11>
c001e52a:	a0 2c 10 03 c0       	mov    al,ds:0xc003102c
c001e52f:	c3                   	ret    
c001e530:	ec                   	in     al,dx
c001e531:	c3                   	ret    

c001e532 <Vm::outbv(unsigned short, unsigned char)>:
c001e532:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e53a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e53f:	75 25                	jne    c001e566 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e541:	8b 0d 2c 10 03 c0    	mov    ecx,DWORD PTR ds:0xc003102c
c001e547:	8d 51 01             	lea    edx,[ecx+0x1]
c001e54a:	88 81 40 10 03 c0    	mov    BYTE PTR [ecx-0x3ffcefc0],al
c001e550:	89 15 2c 10 03 c0    	mov    DWORD PTR ds:0xc003102c,edx
c001e556:	83 fa 20             	cmp    edx,0x20
c001e559:	75 0c                	jne    c001e567 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e55b:	c7 05 2c 10 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003102c,0x1f
c001e565:	c3                   	ret    
c001e566:	ee                   	out    dx,al
c001e567:	c3                   	ret    

c001e568 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e568:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e56d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e572:	c1 e0 04             	shl    eax,0x4
c001e575:	01 d0                	add    eax,edx
c001e577:	c3                   	ret    

c001e578 <Vm::getSegment(unsigned int)>:
c001e578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e57c:	c1 e8 10             	shr    eax,0x10
c001e57f:	c3                   	ret    

c001e580 <Vm::getOffset(unsigned int)>:
c001e580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e584:	c3                   	ret    

c001e585 <Vm::mainloop2()>:
c001e585:	83 ec 18             	sub    esp,0x18
c001e588:	fa                   	cli    
c001e589:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e58f:	6a 02                	push   0x2
c001e591:	c6 05 25 10 03 c0 01 	mov    BYTE PTR ds:0xc0031025,0x1
c001e598:	e8 9e f6 ff ff       	call   c001dc3b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e59d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5a2:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e5a6:	52                   	push   edx
c001e5a7:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e5ab:	52                   	push   edx
c001e5ac:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e5b0:	52                   	push   edx
c001e5b1:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e5b5:	50                   	push   eax
c001e5b6:	e8 3f 1d fe ff       	call   c00002fa <goToVM86>
c001e5bb:	83 c4 2c             	add    esp,0x2c
c001e5be:	c3                   	ret    

c001e5bf <Vm::mainVm8086Loop(void*)>:
c001e5bf:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e5c4:	48                   	dec    eax
c001e5c5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e5ca:	75 01                	jne    c001e5cd <Vm::mainVm8086Loop(void*)+0xe>
c001e5cc:	fb                   	sti    
c001e5cd:	eb b6                	jmp    c001e585 <Vm::mainloop2()>

c001e5cf <Vm::mainloop3(unsigned long)>:
c001e5cf:	83 ec 18             	sub    esp,0x18
c001e5d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e5d6:	fa                   	cli    
c001e5d7:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e5dd:	6a 02                	push   0x2
c001e5df:	c6 05 24 10 03 c0 01 	mov    BYTE PTR ds:0xc0031024,0x1
c001e5e6:	a3 20 10 03 c0       	mov    ds:0xc0031020,eax
c001e5eb:	e8 4b f6 ff ff       	call   c001dc3b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e5f0:	83 c4 1c             	add    esp,0x1c
c001e5f3:	eb 90                	jmp    c001e585 <Vm::mainloop2()>

c001e5f5 <Vm::initialise8086()>:
c001e5f5:	83 ec 0c             	sub    esp,0xc
c001e5f8:	68 80 00 00 00       	push   0x80
c001e5fd:	6a 00                	push   0x0
c001e5ff:	68 bf e5 01 c0       	push   0xc001e5bf
c001e604:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c001e60a:	e8 57 f2 ff ff       	call   c001d866 <Process::createThread(void (*)(void*), void*, int)>
c001e60f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e616:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e61b:	68 00 01 00 00       	push   0x100
c001e620:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c001e625:	6a 00                	push   0x0
c001e627:	6a 00                	push   0x0
c001e629:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e62f:	e8 42 37 ff ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e634:	83 c4 2c             	add    esp,0x2c
c001e637:	c3                   	ret    

c001e638 <Vm::finish8086()>:
c001e638:	53                   	push   ebx
c001e639:	83 ec 08             	sub    esp,0x8
c001e63c:	fa                   	cli    
c001e63d:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e643:	80 3d 24 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031024,0x0
c001e64a:	75 15                	jne    c001e661 <Vm::finish8086()+0x29>
c001e64c:	e8 3a f4 ff ff       	call   c001da8b <schedule()>
c001e651:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e656:	48                   	dec    eax
c001e657:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e65c:	75 de                	jne    c001e63c <Vm::finish8086()+0x4>
c001e65e:	fb                   	sti    
c001e65f:	eb db                	jmp    c001e63c <Vm::finish8086()+0x4>
c001e661:	83 ec 0c             	sub    esp,0xc
c001e664:	8b 1d 20 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031020
c001e66a:	ff 35 28 10 03 c0    	push   DWORD PTR ds:0xc0031028
c001e670:	c6 05 24 10 03 c0 00 	mov    BYTE PTR ds:0xc0031024,0x0
c001e677:	e8 92 f8 ff ff       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001e67c:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e681:	83 c4 10             	add    esp,0x10
c001e684:	8d 50 ff             	lea    edx,[eax-0x1]
c001e687:	89 15 c8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc8,edx
c001e68d:	85 d2                	test   edx,edx
c001e68f:	75 01                	jne    c001e692 <Vm::finish8086()+0x5a>
c001e691:	fb                   	sti    
c001e692:	89 d8                	mov    eax,ebx
c001e694:	83 c4 08             	add    esp,0x8
c001e697:	5b                   	pop    ebx
c001e698:	c3                   	ret    

c001e699 <Vm::getOutput8086(unsigned char*)>:
c001e699:	57                   	push   edi
c001e69a:	8b 0d 2c 10 03 c0    	mov    ecx,DWORD PTR ds:0xc003102c
c001e6a0:	56                   	push   esi
c001e6a1:	be 40 10 03 c0       	mov    esi,0xc0031040
c001e6a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6ac:	a1 2c 10 03 c0       	mov    eax,ds:0xc003102c
c001e6b1:	5e                   	pop    esi
c001e6b2:	c7 05 2c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003102c,0x0
c001e6bc:	5f                   	pop    edi
c001e6bd:	c3                   	ret    

c001e6be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e6be:	55                   	push   ebp
c001e6bf:	57                   	push   edi
c001e6c0:	56                   	push   esi
c001e6c1:	53                   	push   ebx
c001e6c2:	83 ec 2c             	sub    esp,0x2c
c001e6c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e6c9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e6cd:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e6d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e6d5:	fa                   	cli    
c001e6d6:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c001e6dc:	0f b6 35 25 10 03 c0 	movzx  esi,BYTE PTR ds:0xc0031025
c001e6e3:	89 f0                	mov    eax,esi
c001e6e5:	84 c0                	test   al,al
c001e6e7:	75 1d                	jne    c001e706 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e6e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e6ed:	e8 99 f3 ff ff       	call   c001da8b <schedule()>
c001e6f2:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e6f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e6fb:	48                   	dec    eax
c001e6fc:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e701:	75 d2                	jne    c001e6d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e703:	fb                   	sti    
c001e704:	eb cf                	jmp    c001e6d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e706:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e70b:	c7 05 2c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003102c,0x0
c001e715:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e719:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e71d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e721:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e725:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e729:	50                   	push   eax
c001e72a:	6a 20                	push   0x20
c001e72c:	6a 00                	push   0x0
c001e72e:	68 40 10 03 c0       	push   0xc0031040
c001e733:	e8 18 20 fe ff       	call   c0000750 <memset>
c001e738:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e73f:	e8 55 0e ff ff       	call   c000f599 <malloc>
c001e744:	83 c4 0c             	add    esp,0xc
c001e747:	89 c3                	mov    ebx,eax
c001e749:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c001e74f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e753:	50                   	push   eax
c001e754:	e8 95 45 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	85 db                	test   ebx,ebx
c001e75e:	75 0a                	jne    c001e76a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e760:	83 ec 0c             	sub    esp,0xc
c001e763:	68 ec bd 02 c0       	push   0xc002bdec
c001e768:	eb 3e                	jmp    c001e7a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e76a:	50                   	push   eax
c001e76b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e76f:	50                   	push   eax
c001e770:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e774:	50                   	push   eax
c001e775:	53                   	push   ebx
c001e776:	e8 83 48 ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c001e77b:	83 c4 10             	add    esp,0x10
c001e77e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e783:	74 0a                	je     c001e78f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e785:	83 ec 0c             	sub    esp,0xc
c001e788:	68 00 be 02 c0       	push   0xc002be00
c001e78d:	eb 19                	jmp    c001e7a8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e78f:	51                   	push   ecx
c001e790:	51                   	push   ecx
c001e791:	6a 01                	push   0x1
c001e793:	53                   	push   ebx
c001e794:	e8 b9 45 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	85 c0                	test   eax,eax
c001e79e:	74 24                	je     c001e7c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e7a0:	83 ec 0c             	sub    esp,0xc
c001e7a3:	68 19 be 02 c0       	push   0xc002be19
c001e7a8:	e8 4e b7 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001e7ad:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	48                   	dec    eax
c001e7b6:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e7bb:	85 c0                	test   eax,eax
c001e7bd:	75 01                	jne    c001e7c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e7bf:	fb                   	sti    
c001e7c0:	31 f6                	xor    esi,esi
c001e7c2:	eb 58                	jmp    c001e81c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e7c4:	0f b7 ed             	movzx  ebp,bp
c001e7c7:	50                   	push   eax
c001e7c8:	0f b7 ff             	movzx  edi,di
c001e7cb:	50                   	push   eax
c001e7cc:	55                   	push   ebp
c001e7cd:	57                   	push   edi
c001e7ce:	e8 95 fd ff ff       	call   c001e568 <Vm::realToLinear(unsigned short, unsigned short)>
c001e7d3:	5a                   	pop    edx
c001e7d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e7d6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e7da:	51                   	push   ecx
c001e7db:	50                   	push   eax
c001e7dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7e4:	53                   	push   ebx
c001e7e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e7e8:	83 c4 14             	add    esp,0x14
c001e7eb:	53                   	push   ebx
c001e7ec:	e8 bf 45 ff ff       	call   c0012db0 <File::close()>
c001e7f1:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	48                   	dec    eax
c001e7fa:	c6 05 25 10 03 c0 00 	mov    BYTE PTR ds:0xc0031025,0x0
c001e801:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001e806:	85 c0                	test   eax,eax
c001e808:	75 01                	jne    c001e80b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e80a:	fb                   	sti    
c001e80b:	83 ec 0c             	sub    esp,0xc
c001e80e:	ff 35 28 10 03 c0    	push   DWORD PTR ds:0xc0031028
c001e814:	e8 f5 f6 ff ff       	call   c001df0e <unblockTask(ThreadControlBlock*)>
c001e819:	83 c4 10             	add    esp,0x10
c001e81c:	83 c4 2c             	add    esp,0x2c
c001e81f:	89 f0                	mov    eax,esi
c001e821:	5b                   	pop    ebx
c001e822:	5e                   	pop    esi
c001e823:	5f                   	pop    edi
c001e824:	5d                   	pop    ebp
c001e825:	c3                   	ret    

c001e826 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e826:	57                   	push   edi
c001e827:	56                   	push   esi
c001e828:	53                   	push   ebx
c001e829:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e831:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e835:	83 e8 06             	sub    eax,0x6
c001e838:	0f b7 c0             	movzx  eax,ax
c001e83b:	50                   	push   eax
c001e83c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e841:	50                   	push   eax
c001e842:	e8 21 fd ff ff       	call   c001e568 <Vm::realToLinear(unsigned short, unsigned short)>
c001e847:	5a                   	pop    edx
c001e848:	5e                   	pop    esi
c001e849:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e84c:	8d 56 fa             	lea    edx,[esi-0x6]
c001e84f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e855:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e858:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e85b:	83 c2 02             	add    edx,0x2
c001e85e:	66 89 10             	mov    WORD PTR [eax],dx
c001e861:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e864:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e868:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e86b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e86f:	89 d6                	mov    esi,edx
c001e871:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e877:	66 81 e6 ff fd       	and    si,0xfdff
c001e87c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e880:	74 07                	je     c001e889 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e882:	89 d6                	mov    esi,edx
c001e884:	66 81 ce 00 02       	or     si,0x200
c001e889:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e892:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e896:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e89e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e8a1:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e8a9:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e8ac:	5b                   	pop    ebx
c001e8ad:	5e                   	pop    esi
c001e8ae:	5f                   	pop    edi
c001e8af:	c3                   	ret    

c001e8b0 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e8b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ba:	c1 e0 04             	shl    eax,0x4
c001e8bd:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e8c0:	c3                   	ret    

c001e8c1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e8c1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8c6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8cb:	c1 e0 04             	shl    eax,0x4
c001e8ce:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e8d2:	c3                   	ret    

c001e8d3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e8d3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8dd:	c1 e0 04             	shl    eax,0x4
c001e8e0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e8e3:	c3                   	ret    

c001e8e4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e8e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ee:	c1 e0 04             	shl    eax,0x4
c001e8f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8f5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e8f8:	c3                   	ret    

c001e8f9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e8f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e903:	c1 e0 04             	shl    eax,0x4
c001e906:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e90a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e90e:	c3                   	ret    

c001e90f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e90f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e914:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e919:	c1 e0 04             	shl    eax,0x4
c001e91c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e920:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e923:	c3                   	ret    

c001e924 <Vm::faultHandler(regs*)>:
c001e924:	55                   	push   ebp
c001e925:	57                   	push   edi
c001e926:	56                   	push   esi
c001e927:	53                   	push   ebx
c001e928:	83 ec 1c             	sub    esp,0x1c
c001e92b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e92f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e932:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e936:	0f b7 f8             	movzx  edi,ax
c001e939:	52                   	push   edx
c001e93a:	0f b7 c0             	movzx  eax,ax
c001e93d:	50                   	push   eax
c001e93e:	e8 25 fc ff ff       	call   c001e568 <Vm::realToLinear(unsigned short, unsigned short)>
c001e943:	5a                   	pop    edx
c001e944:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e947:	59                   	pop    ecx
c001e948:	89 c1                	mov    ecx,eax
c001e94a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e94d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e951:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e95a:	0f b7 c5             	movzx  eax,bp
c001e95d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e961:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e969:	e8 fa fb ff ff       	call   c001e568 <Vm::realToLinear(unsigned short, unsigned short)>
c001e96e:	5e                   	pop    esi
c001e96f:	be 06 00 00 00       	mov    esi,0x6
c001e974:	5a                   	pop    edx
c001e975:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e97a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e97f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e982:	80 fa 9d             	cmp    dl,0x9d
c001e985:	0f 84 2c 02 00 00    	je     c001ebb7 <Vm::faultHandler(regs*)+0x293>
c001e98b:	0f 87 91 00 00 00    	ja     c001ea22 <Vm::faultHandler(regs*)+0xfe>
c001e991:	80 fa 66             	cmp    dl,0x66
c001e994:	0f 84 98 01 00 00    	je     c001eb32 <Vm::faultHandler(regs*)+0x20e>
c001e99a:	77 47                	ja     c001e9e3 <Vm::faultHandler(regs*)+0xbf>
c001e99c:	80 fa 36             	cmp    dl,0x36
c001e99f:	0f 84 80 01 00 00    	je     c001eb25 <Vm::faultHandler(regs*)+0x201>
c001e9a5:	77 1a                	ja     c001e9c1 <Vm::faultHandler(regs*)+0x9d>
c001e9a7:	80 fa 26             	cmp    dl,0x26
c001e9aa:	0f 84 4e 01 00 00    	je     c001eafe <Vm::faultHandler(regs*)+0x1da>
c001e9b0:	80 fa 2e             	cmp    dl,0x2e
c001e9b3:	0f 85 e2 05 00 00    	jne    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001e9b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9bc:	31 f6                	xor    esi,esi
c001e9be:	41                   	inc    ecx
c001e9bf:	eb be                	jmp    c001e97f <Vm::faultHandler(regs*)+0x5b>
c001e9c1:	80 fa 64             	cmp    dl,0x64
c001e9c4:	0f 84 41 01 00 00    	je     c001eb0b <Vm::faultHandler(regs*)+0x1e7>
c001e9ca:	0f 87 48 01 00 00    	ja     c001eb18 <Vm::faultHandler(regs*)+0x1f4>
c001e9d0:	80 fa 3e             	cmp    dl,0x3e
c001e9d3:	0f 85 c2 05 00 00    	jne    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001e9d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9dc:	be 01 00 00 00       	mov    esi,0x1
c001e9e1:	eb db                	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001e9e3:	80 fa 6d             	cmp    dl,0x6d
c001e9e6:	0f 84 ec 02 00 00    	je     c001ecd8 <Vm::faultHandler(regs*)+0x3b4>
c001e9ec:	77 17                	ja     c001ea05 <Vm::faultHandler(regs*)+0xe1>
c001e9ee:	80 fa 67             	cmp    dl,0x67
c001e9f1:	0f 84 48 01 00 00    	je     c001eb3f <Vm::faultHandler(regs*)+0x21b>
c001e9f7:	80 fa 6c             	cmp    dl,0x6c
c001e9fa:	0f 84 69 02 00 00    	je     c001ec69 <Vm::faultHandler(regs*)+0x345>
c001ea00:	e9 96 05 00 00       	jmp    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001ea05:	80 fa 6f             	cmp    dl,0x6f
c001ea08:	0f 84 f4 03 00 00    	je     c001ee02 <Vm::faultHandler(regs*)+0x4de>
c001ea0e:	0f 82 59 03 00 00    	jb     c001ed6d <Vm::faultHandler(regs*)+0x449>
c001ea14:	80 fa 9c             	cmp    dl,0x9c
c001ea17:	0f 84 2f 01 00 00    	je     c001eb4c <Vm::faultHandler(regs*)+0x228>
c001ea1d:	e9 79 05 00 00       	jmp    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001ea22:	80 fa ec             	cmp    dl,0xec
c001ea25:	0f 84 14 05 00 00    	je     c001ef3f <Vm::faultHandler(regs*)+0x61b>
c001ea2b:	77 7b                	ja     c001eaa8 <Vm::faultHandler(regs*)+0x184>
c001ea2d:	80 fa e4             	cmp    dl,0xe4
c001ea30:	0f 84 93 04 00 00    	je     c001eec9 <Vm::faultHandler(regs*)+0x5a5>
c001ea36:	77 53                	ja     c001ea8b <Vm::faultHandler(regs*)+0x167>
c001ea38:	80 fa cd             	cmp    dl,0xcd
c001ea3b:	0f 84 d9 01 00 00    	je     c001ec1a <Vm::faultHandler(regs*)+0x2f6>
c001ea41:	80 fa cf             	cmp    dl,0xcf
c001ea44:	0f 85 51 05 00 00    	jne    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001ea4a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea4d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ea50:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ea54:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ea57:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ea5b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea61:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea64:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ea68:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea6e:	66 c1 e8 09          	shr    ax,0x9
c001ea72:	83 e0 01             	and    eax,0x1
c001ea75:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea78:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea7b:	83 c0 06             	add    eax,0x6
c001ea7e:	25 ff ff 00 00       	and    eax,0xffff
c001ea83:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea86:	e9 0c 05 00 00       	jmp    c001ef97 <Vm::faultHandler(regs*)+0x673>
c001ea8b:	80 fa e6             	cmp    dl,0xe6
c001ea8e:	0f 84 7f 04 00 00    	je     c001ef13 <Vm::faultHandler(regs*)+0x5ef>
c001ea94:	0f 82 4b 04 00 00    	jb     c001eee5 <Vm::faultHandler(regs*)+0x5c1>
c001ea9a:	80 fa e7             	cmp    dl,0xe7
c001ea9d:	0f 84 87 04 00 00    	je     c001ef2a <Vm::faultHandler(regs*)+0x606>
c001eaa3:	e9 f3 04 00 00       	jmp    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001eaa8:	80 fa ef             	cmp    dl,0xef
c001eaab:	0f 84 d1 04 00 00    	je     c001ef82 <Vm::faultHandler(regs*)+0x65e>
c001eab1:	77 28                	ja     c001eadb <Vm::faultHandler(regs*)+0x1b7>
c001eab3:	80 fa ed             	cmp    dl,0xed
c001eab6:	0f 84 9f 04 00 00    	je     c001ef5b <Vm::faultHandler(regs*)+0x637>
c001eabc:	80 fa ee             	cmp    dl,0xee
c001eabf:	0f 85 d6 04 00 00    	jne    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001eac5:	50                   	push   eax
c001eac6:	50                   	push   eax
c001eac7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eacb:	50                   	push   eax
c001eacc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ead0:	50                   	push   eax
c001ead1:	e8 5c fa ff ff       	call   c001e532 <Vm::outbv(unsigned short, unsigned char)>
c001ead6:	e9 9f 04 00 00       	jmp    c001ef7a <Vm::faultHandler(regs*)+0x656>
c001eadb:	80 fa fa             	cmp    dl,0xfa
c001eade:	0f 84 69 01 00 00    	je     c001ec4d <Vm::faultHandler(regs*)+0x329>
c001eae4:	80 fa fb             	cmp    dl,0xfb
c001eae7:	0f 84 6e 01 00 00    	je     c001ec5b <Vm::faultHandler(regs*)+0x337>
c001eaed:	80 fa f3             	cmp    dl,0xf3
c001eaf0:	0f 85 a5 04 00 00    	jne    c001ef9b <Vm::faultHandler(regs*)+0x677>
c001eaf6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaf9:	e9 c0 fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eafe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb01:	be 02 00 00 00       	mov    esi,0x2
c001eb06:	e9 b3 fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb0e:	be 03 00 00 00       	mov    esi,0x3
c001eb13:	e9 a6 fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb18:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb1b:	be 04 00 00 00       	mov    esi,0x4
c001eb20:	e9 99 fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb25:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb28:	be 05 00 00 00       	mov    esi,0x5
c001eb2d:	e9 8c fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb32:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb35:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eb3a:	e9 7f fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb42:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eb47:	e9 72 fe ff ff       	jmp    c001e9be <Vm::faultHandler(regs*)+0x9a>
c001eb4c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eb4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eb53:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb58:	74 30                	je     c001eb8a <Vm::faultHandler(regs*)+0x266>
c001eb5a:	83 e9 04             	sub    ecx,0x4
c001eb5d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb63:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb69:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb6c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb6f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb75:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb79:	0f 84 15 04 00 00    	je     c001ef94 <Vm::faultHandler(regs*)+0x670>
c001eb7f:	80 ce 02             	or     dh,0x2
c001eb82:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb85:	e9 0a 04 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001eb8a:	83 e9 02             	sub    ecx,0x2
c001eb8d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb93:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb96:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb9a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eba0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eba4:	74 05                	je     c001ebab <Vm::faultHandler(regs*)+0x287>
c001eba6:	80 ce 02             	or     dh,0x2
c001eba9:	eb 03                	jmp    c001ebae <Vm::faultHandler(regs*)+0x28a>
c001ebab:	80 e6 fd             	and    dh,0xfd
c001ebae:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ebb2:	e9 dd 03 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ebb7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebbc:	74 2a                	je     c001ebe8 <Vm::faultHandler(regs*)+0x2c4>
c001ebbe:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebc0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ebc6:	81 ca 00 02 02 00    	or     edx,0x20200
c001ebcc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ebcf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebd7:	c1 e8 09             	shr    eax,0x9
c001ebda:	83 e0 01             	and    eax,0x1
c001ebdd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebe0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ebe3:	83 c0 04             	add    eax,0x4
c001ebe6:	eb 25                	jmp    c001ec0d <Vm::faultHandler(regs*)+0x2e9>
c001ebe8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ebeb:	81 ca 00 02 02 00    	or     edx,0x20200
c001ebf1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ebf4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ebf7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebfd:	66 c1 e8 09          	shr    ax,0x9
c001ec01:	83 e0 01             	and    eax,0x1
c001ec04:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ec07:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec0a:	83 c0 02             	add    eax,0x2
c001ec0d:	25 ff ff 00 00       	and    eax,0xffff
c001ec12:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ec15:	e9 7a 03 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ec1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec1e:	3c ee                	cmp    al,0xee
c001ec20:	75 10                	jne    c001ec32 <Vm::faultHandler(regs*)+0x30e>
c001ec22:	83 ec 0c             	sub    esp,0xc
c001ec25:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ec28:	e8 a2 f9 ff ff       	call   c001e5cf <Vm::mainloop3(unsigned long)>
c001ec2d:	e9 4b 03 00 00       	jmp    c001ef7d <Vm::faultHandler(regs*)+0x659>
c001ec32:	83 ec 0c             	sub    esp,0xc
c001ec35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec3d:	51                   	push   ecx
c001ec3e:	50                   	push   eax
c001ec3f:	53                   	push   ebx
c001ec40:	e8 e1 fb ff ff       	call   c001e826 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ec45:	83 c4 20             	add    esp,0x20
c001ec48:	e9 4a 03 00 00       	jmp    c001ef97 <Vm::faultHandler(regs*)+0x673>
c001ec4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec56:	e9 39 03 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ec5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec60:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ec64:	e9 2b 03 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ec69:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec6c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec71:	74 2b                	je     c001ec9e <Vm::faultHandler(regs*)+0x37a>
c001ec73:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ec7a:	76 22                	jbe    c001ec9e <Vm::faultHandler(regs*)+0x37a>
c001ec7c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec80:	50                   	push   eax
c001ec81:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec85:	50                   	push   eax
c001ec86:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec8a:	50                   	push   eax
c001ec8b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec8f:	50                   	push   eax
c001ec90:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec94:	50                   	push   eax
c001ec95:	6a 6c                	push   0x6c
c001ec97:	6a 6c                	push   0x6c
c001ec99:	e9 b9 01 00 00       	jmp    c001ee57 <Vm::faultHandler(regs*)+0x533>
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eca5:	0f b7 f6             	movzx  esi,si
c001eca8:	50                   	push   eax
c001eca9:	e8 71 f8 ff ff       	call   c001e51f <Vm::inbv(unsigned short)>
c001ecae:	83 c4 0c             	add    esp,0xc
c001ecb1:	0f b6 c0             	movzx  eax,al
c001ecb4:	50                   	push   eax
c001ecb5:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ecb9:	50                   	push   eax
c001ecba:	56                   	push   esi
c001ecbb:	e8 24 fc ff ff       	call   c001e8e4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ecc0:	83 c4 10             	add    esp,0x10
c001ecc3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecc6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecca:	74 03                	je     c001eccf <Vm::faultHandler(regs*)+0x3ab>
c001eccc:	48                   	dec    eax
c001eccd:	eb 01                	jmp    c001ecd0 <Vm::faultHandler(regs*)+0x3ac>
c001eccf:	40                   	inc    eax
c001ecd0:	0f b7 c0             	movzx  eax,ax
c001ecd3:	e9 8d 00 00 00       	jmp    c001ed65 <Vm::faultHandler(regs*)+0x441>
c001ecd8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ecdb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecde:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ece3:	74 29                	je     c001ed0e <Vm::faultHandler(regs*)+0x3ea>
c001ece5:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecea:	76 22                	jbe    c001ed0e <Vm::faultHandler(regs*)+0x3ea>
c001ecec:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecf0:	50                   	push   eax
c001ecf1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecf5:	50                   	push   eax
c001ecf6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecfa:	50                   	push   eax
c001ecfb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecff:	50                   	push   eax
c001ed00:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed04:	50                   	push   eax
c001ed05:	6a 6d                	push   0x6d
c001ed07:	6a 6d                	push   0x6d
c001ed09:	e9 49 01 00 00       	jmp    c001ee57 <Vm::faultHandler(regs*)+0x533>
c001ed0e:	0f b7 c8             	movzx  ecx,ax
c001ed11:	0f b7 f6             	movzx  esi,si
c001ed14:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed17:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed1c:	74 20                	je     c001ed3e <Vm::faultHandler(regs*)+0x41a>
c001ed1e:	ed                   	in     eax,dx
c001ed1f:	55                   	push   ebp
c001ed20:	50                   	push   eax
c001ed21:	51                   	push   ecx
c001ed22:	56                   	push   esi
c001ed23:	e8 e7 fb ff ff       	call   c001e90f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed2e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed32:	74 05                	je     c001ed39 <Vm::faultHandler(regs*)+0x415>
c001ed34:	83 e8 04             	sub    eax,0x4
c001ed37:	eb 27                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x43c>
c001ed39:	83 c0 04             	add    eax,0x4
c001ed3c:	eb 22                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x43c>
c001ed3e:	66 ed                	in     ax,dx
c001ed40:	0f b7 c0             	movzx  eax,ax
c001ed43:	57                   	push   edi
c001ed44:	50                   	push   eax
c001ed45:	51                   	push   ecx
c001ed46:	56                   	push   esi
c001ed47:	e8 ad fb ff ff       	call   c001e8f9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed52:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed56:	74 05                	je     c001ed5d <Vm::faultHandler(regs*)+0x439>
c001ed58:	83 e8 02             	sub    eax,0x2
c001ed5b:	eb 03                	jmp    c001ed60 <Vm::faultHandler(regs*)+0x43c>
c001ed5d:	83 c0 02             	add    eax,0x2
c001ed60:	25 ff ff 00 00       	and    eax,0xffff
c001ed65:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ed68:	e9 27 02 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ed6d:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed70:	3c 05                	cmp    al,0x5
c001ed72:	77 24                	ja     c001ed98 <Vm::faultHandler(regs*)+0x474>
c001ed74:	0f b6 c0             	movzx  eax,al
c001ed77:	ff 24 85 8c be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4174]
c001ed7e:	0f b7 fd             	movzx  edi,bp
c001ed81:	eb 15                	jmp    c001ed98 <Vm::faultHandler(regs*)+0x474>
c001ed83:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ed87:	eb 0f                	jmp    c001ed98 <Vm::faultHandler(regs*)+0x474>
c001ed89:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ed8d:	eb 09                	jmp    c001ed98 <Vm::faultHandler(regs*)+0x474>
c001ed8f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ed93:	eb 03                	jmp    c001ed98 <Vm::faultHandler(regs*)+0x474>
c001ed95:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ed98:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed9b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eda0:	74 29                	je     c001edcb <Vm::faultHandler(regs*)+0x4a7>
c001eda2:	3d ff ff 00 00       	cmp    eax,0xffff
c001eda7:	76 22                	jbe    c001edcb <Vm::faultHandler(regs*)+0x4a7>
c001eda9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edad:	50                   	push   eax
c001edae:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edb2:	50                   	push   eax
c001edb3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edb7:	50                   	push   eax
c001edb8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edbc:	50                   	push   eax
c001edbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edc1:	50                   	push   eax
c001edc2:	6a 6e                	push   0x6e
c001edc4:	6a 6e                	push   0x6e
c001edc6:	e9 8c 00 00 00       	jmp    c001ee57 <Vm::faultHandler(regs*)+0x533>
c001edcb:	0f b7 c0             	movzx  eax,ax
c001edce:	52                   	push   edx
c001edcf:	52                   	push   edx
c001edd0:	50                   	push   eax
c001edd1:	57                   	push   edi
c001edd2:	e8 d9 fa ff ff       	call   c001e8b0 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001edd7:	59                   	pop    ecx
c001edd8:	0f b6 c0             	movzx  eax,al
c001eddb:	5e                   	pop    esi
c001eddc:	50                   	push   eax
c001eddd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ede1:	50                   	push   eax
c001ede2:	e8 4b f7 ff ff       	call   c001e532 <Vm::outbv(unsigned short, unsigned char)>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eded:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edf1:	74 03                	je     c001edf6 <Vm::faultHandler(regs*)+0x4d2>
c001edf3:	48                   	dec    eax
c001edf4:	eb 01                	jmp    c001edf7 <Vm::faultHandler(regs*)+0x4d3>
c001edf6:	40                   	inc    eax
c001edf7:	0f b7 c0             	movzx  eax,ax
c001edfa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001edfd:	e9 92 01 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ee02:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee05:	3c 05                	cmp    al,0x5
c001ee07:	77 1f                	ja     c001ee28 <Vm::faultHandler(regs*)+0x504>
c001ee09:	0f b6 c0             	movzx  eax,al
c001ee0c:	ff 24 85 a4 be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd415c]
c001ee13:	89 ef                	mov    edi,ebp
c001ee15:	eb 11                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x504>
c001ee17:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ee1a:	eb 0c                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x504>
c001ee1c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ee1f:	eb 07                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x504>
c001ee21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ee24:	eb 02                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x504>
c001ee26:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ee28:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ee2b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee30:	74 37                	je     c001ee69 <Vm::faultHandler(regs*)+0x545>
c001ee32:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ee38:	76 2f                	jbe    c001ee69 <Vm::faultHandler(regs*)+0x545>
c001ee3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee3e:	50                   	push   eax
c001ee3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee43:	50                   	push   eax
c001ee44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee48:	50                   	push   eax
c001ee49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee4d:	50                   	push   eax
c001ee4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee52:	50                   	push   eax
c001ee53:	6a 6f                	push   0x6f
c001ee55:	6a 6f                	push   0x6f
c001ee57:	68 32 be 02 c0       	push   0xc002be32
c001ee5c:	e8 2e 39 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001ee61:	83 c4 20             	add    esp,0x20
c001ee64:	e9 86 01 00 00       	jmp    c001efef <Vm::faultHandler(regs*)+0x6cb>
c001ee69:	0f b7 d7             	movzx  edx,di
c001ee6c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ee6f:	0f b7 c6             	movzx  eax,si
c001ee72:	81 e1 00 04 00 00    	and    ecx,0x400
c001ee78:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ee7b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee80:	74 1d                	je     c001ee9f <Vm::faultHandler(regs*)+0x57b>
c001ee82:	55                   	push   ebp
c001ee83:	55                   	push   ebp
c001ee84:	50                   	push   eax
c001ee85:	52                   	push   edx
c001ee86:	e8 48 fa ff ff       	call   c001e8d3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ee8b:	83 c4 10             	add    esp,0x10
c001ee8e:	89 fa                	mov    edx,edi
c001ee90:	ef                   	out    dx,eax
c001ee91:	85 c9                	test   ecx,ecx
c001ee93:	74 05                	je     c001ee9a <Vm::faultHandler(regs*)+0x576>
c001ee95:	83 ee 04             	sub    esi,0x4
c001ee98:	eb 21                	jmp    c001eebb <Vm::faultHandler(regs*)+0x597>
c001ee9a:	83 c6 04             	add    esi,0x4
c001ee9d:	eb 1c                	jmp    c001eebb <Vm::faultHandler(regs*)+0x597>
c001ee9f:	55                   	push   ebp
c001eea0:	55                   	push   ebp
c001eea1:	50                   	push   eax
c001eea2:	52                   	push   edx
c001eea3:	e8 19 fa ff ff       	call   c001e8c1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eea8:	83 c4 10             	add    esp,0x10
c001eeab:	89 fa                	mov    edx,edi
c001eead:	66 ef                	out    dx,ax
c001eeaf:	85 c9                	test   ecx,ecx
c001eeb1:	74 05                	je     c001eeb8 <Vm::faultHandler(regs*)+0x594>
c001eeb3:	83 ee 02             	sub    esi,0x2
c001eeb6:	eb 03                	jmp    c001eebb <Vm::faultHandler(regs*)+0x597>
c001eeb8:	83 c6 02             	add    esi,0x2
c001eebb:	81 e6 ff ff 00 00    	and    esi,0xffff
c001eec1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001eec4:	e9 cb 00 00 00       	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001eec9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eed0:	83 ec 0c             	sub    esp,0xc
c001eed3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eed7:	50                   	push   eax
c001eed8:	e8 42 f6 ff ff       	call   c001e51f <Vm::inbv(unsigned short)>
c001eedd:	0f b6 c0             	movzx  eax,al
c001eee0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eee3:	eb 3f                	jmp    c001ef24 <Vm::faultHandler(regs*)+0x600>
c001eee5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eeea:	74 07                	je     c001eef3 <Vm::faultHandler(regs*)+0x5cf>
c001eeec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001eef0:	ed                   	in     eax,dx
c001eef1:	eb 14                	jmp    c001ef07 <Vm::faultHandler(regs*)+0x5e3>
c001eef3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001eef6:	66 31 f6             	xor    si,si
c001eef9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001eefc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef00:	66 ed                	in     ax,dx
c001ef02:	0f b7 c0             	movzx  eax,ax
c001ef05:	09 f0                	or     eax,esi
c001ef07:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef0a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef0e:	e9 84 00 00 00       	jmp    c001ef97 <Vm::faultHandler(regs*)+0x673>
c001ef13:	52                   	push   edx
c001ef14:	52                   	push   edx
c001ef15:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef19:	50                   	push   eax
c001ef1a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef1e:	50                   	push   eax
c001ef1f:	e8 0e f6 ff ff       	call   c001e532 <Vm::outbv(unsigned short, unsigned char)>
c001ef24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef28:	eb 53                	jmp    c001ef7d <Vm::faultHandler(regs*)+0x659>
c001ef2a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef2d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef31:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef36:	74 03                	je     c001ef3b <Vm::faultHandler(regs*)+0x617>
c001ef38:	ef                   	out    dx,eax
c001ef39:	eb cf                	jmp    c001ef0a <Vm::faultHandler(regs*)+0x5e6>
c001ef3b:	66 ef                	out    dx,ax
c001ef3d:	eb cb                	jmp    c001ef0a <Vm::faultHandler(regs*)+0x5e6>
c001ef3f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ef46:	83 ec 0c             	sub    esp,0xc
c001ef49:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef4d:	50                   	push   eax
c001ef4e:	e8 cc f5 ff ff       	call   c001e51f <Vm::inbv(unsigned short)>
c001ef53:	0f b6 c0             	movzx  eax,al
c001ef56:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ef59:	eb 1f                	jmp    c001ef7a <Vm::faultHandler(regs*)+0x656>
c001ef5b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef5e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef63:	74 03                	je     c001ef68 <Vm::faultHandler(regs*)+0x644>
c001ef65:	ed                   	in     eax,dx
c001ef66:	eb 0d                	jmp    c001ef75 <Vm::faultHandler(regs*)+0x651>
c001ef68:	66 ed                	in     ax,dx
c001ef6a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ef6d:	0f b7 c0             	movzx  eax,ax
c001ef70:	66 31 d2             	xor    dx,dx
c001ef73:	09 d0                	or     eax,edx
c001ef75:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef78:	eb 1a                	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ef7a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	eb 15                	jmp    c001ef97 <Vm::faultHandler(regs*)+0x673>
c001ef82:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef85:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef88:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef8d:	74 03                	je     c001ef92 <Vm::faultHandler(regs*)+0x66e>
c001ef8f:	ef                   	out    dx,eax
c001ef90:	eb 02                	jmp    c001ef94 <Vm::faultHandler(regs*)+0x670>
c001ef92:	66 ef                	out    dx,ax
c001ef94:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef97:	b0 01                	mov    al,0x1
c001ef99:	eb 56                	jmp    c001eff1 <Vm::faultHandler(regs*)+0x6cd>
c001ef9b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef9f:	50                   	push   eax
c001efa0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001efa4:	50                   	push   eax
c001efa5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001efa9:	50                   	push   eax
c001efaa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001efae:	50                   	push   eax
c001efaf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efb3:	50                   	push   eax
c001efb4:	52                   	push   edx
c001efb5:	52                   	push   edx
c001efb6:	68 5f be 02 c0       	push   0xc002be5f
c001efbb:	e8 cf 37 ff ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c001efc0:	83 c4 20             	add    esp,0x20
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	6a 60                	push   0x60
c001efc8:	e8 52 f5 ff ff       	call   c001e51f <Vm::inbv(unsigned short)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	3c 1c                	cmp    al,0x1c
c001efd2:	74 04                	je     c001efd8 <Vm::faultHandler(regs*)+0x6b4>
c001efd4:	3c 5a                	cmp    al,0x5a
c001efd6:	75 eb                	jne    c001efc3 <Vm::faultHandler(regs*)+0x69f>
c001efd8:	3c 5a                	cmp    al,0x5a
c001efda:	74 04                	je     c001efe0 <Vm::faultHandler(regs*)+0x6bc>
c001efdc:	3c 1c                	cmp    al,0x1c
c001efde:	75 0f                	jne    c001efef <Vm::faultHandler(regs*)+0x6cb>
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	6a 60                	push   0x60
c001efe5:	e8 35 f5 ff ff       	call   c001e51f <Vm::inbv(unsigned short)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	eb e9                	jmp    c001efd8 <Vm::faultHandler(regs*)+0x6b4>
c001efef:	31 c0                	xor    eax,eax
c001eff1:	83 c4 1c             	add    esp,0x1c
c001eff4:	5b                   	pop    ebx
c001eff5:	5e                   	pop    esi
c001eff6:	5f                   	pop    edi
c001eff7:	5d                   	pop    ebp
c001eff8:	c3                   	ret    

c001eff9 <Vm::fpuInternalTo32(unsigned long long)>:
c001eff9:	57                   	push   edi
c001effa:	56                   	push   esi
c001effb:	53                   	push   ebx
c001effc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f004:	89 d6                	mov    esi,edx
c001f006:	89 d7                	mov    edi,edx
c001f008:	89 c1                	mov    ecx,eax
c001f00a:	c1 ef 14             	shr    edi,0x14
c001f00d:	89 d3                	mov    ebx,edx
c001f00f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f015:	31 d2                	xor    edx,edx
c001f017:	89 f8                	mov    eax,edi
c001f019:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f01f:	bf ff 00 00 00       	mov    edi,0xff
c001f024:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f029:	83 d2 ff             	adc    edx,0xffffffff
c001f02c:	39 c7                	cmp    edi,eax
c001f02e:	bf 00 00 00 00       	mov    edi,0x0
c001f033:	19 d7                	sbb    edi,edx
c001f035:	72 15                	jb     c001f04c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f037:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f03b:	c1 e0 17             	shl    eax,0x17
c001f03e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f044:	09 f1                	or     ecx,esi
c001f046:	09 c1                	or     ecx,eax
c001f048:	89 cf                	mov    edi,ecx
c001f04a:	eb 02                	jmp    c001f04e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f04c:	31 ff                	xor    edi,edi
c001f04e:	89 f8                	mov    eax,edi
c001f050:	5b                   	pop    ebx
c001f051:	5e                   	pop    esi
c001f052:	5f                   	pop    edi
c001f053:	c3                   	ret    

c001f054 <Vm::fpuInternalTo64(unsigned long long)>:
c001f054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f05c:	c3                   	ret    

c001f05d <Vm::fpu32ToInternal(unsigned int)>:
c001f05d:	57                   	push   edi
c001f05e:	31 ff                	xor    edi,edi
c001f060:	56                   	push   esi
c001f061:	53                   	push   ebx
c001f062:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f066:	89 cb                	mov    ebx,ecx
c001f068:	89 ce                	mov    esi,ecx
c001f06a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f070:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f076:	c1 e9 17             	shr    ecx,0x17
c001f079:	89 f0                	mov    eax,esi
c001f07b:	0f b6 d1             	movzx  edx,cl
c001f07e:	81 c2 80 03 00 00    	add    edx,0x380
c001f084:	89 d1                	mov    ecx,edx
c001f086:	89 fa                	mov    edx,edi
c001f088:	c1 e1 14             	shl    ecx,0x14
c001f08b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f08f:	c1 e0 1d             	shl    eax,0x1d
c001f092:	89 d7                	mov    edi,edx
c001f094:	89 c6                	mov    esi,eax
c001f096:	89 ca                	mov    edx,ecx
c001f098:	89 f0                	mov    eax,esi
c001f09a:	09 fa                	or     edx,edi
c001f09c:	09 da                	or     edx,ebx
c001f09e:	5b                   	pop    ebx
c001f09f:	5e                   	pop    esi
c001f0a0:	5f                   	pop    edi
c001f0a1:	c3                   	ret    

c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>:
c001f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0aa:	c3                   	ret    

c001f0ab <Vm::fpuFloatToLong(unsigned long long)>:
c001f0ab:	57                   	push   edi
c001f0ac:	31 c0                	xor    eax,eax
c001f0ae:	56                   	push   esi
c001f0af:	31 d2                	xor    edx,edx
c001f0b1:	53                   	push   ebx
c001f0b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f0ba:	89 d9                	mov    ecx,ebx
c001f0bc:	c1 e9 14             	shr    ecx,0x14
c001f0bf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f0c5:	89 cf                	mov    edi,ecx
c001f0c7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f0cd:	78 33                	js     c001f102 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f0cf:	89 d9                	mov    ecx,ebx
c001f0d1:	89 f0                	mov    eax,esi
c001f0d3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0d9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f0df:	89 ca                	mov    edx,ecx
c001f0e1:	b9 34 00 00 00       	mov    ecx,0x34
c001f0e6:	29 f9                	sub    ecx,edi
c001f0e8:	0f ad d0             	shrd   eax,edx,cl
c001f0eb:	d3 fa                	sar    edx,cl
c001f0ed:	f6 c1 20             	test   cl,0x20
c001f0f0:	74 05                	je     c001f0f7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f0f2:	89 d0                	mov    eax,edx
c001f0f4:	c1 fa 1f             	sar    edx,0x1f
c001f0f7:	85 db                	test   ebx,ebx
c001f0f9:	79 07                	jns    c001f102 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f0fb:	f7 d8                	neg    eax
c001f0fd:	83 d2 00             	adc    edx,0x0
c001f100:	f7 da                	neg    edx
c001f102:	5b                   	pop    ebx
c001f103:	5e                   	pop    esi
c001f104:	5f                   	pop    edi
c001f105:	c3                   	ret    

c001f106 <Vm::fpuULongToFloat(unsigned long long)>:
c001f106:	57                   	push   edi
c001f107:	31 c9                	xor    ecx,ecx
c001f109:	56                   	push   esi
c001f10a:	53                   	push   ebx
c001f10b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f10f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f113:	0f ba e7 14          	bt     edi,0x14
c001f117:	72 07                	jb     c001f120 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f119:	01 f6                	add    esi,esi
c001f11b:	11 ff                	adc    edi,edi
c001f11d:	41                   	inc    ecx
c001f11e:	eb f3                	jmp    c001f113 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f120:	89 fa                	mov    edx,edi
c001f122:	89 f0                	mov    eax,esi
c001f124:	bb 33 04 00 00       	mov    ebx,0x433
c001f129:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f12f:	29 cb                	sub    ebx,ecx
c001f131:	89 d9                	mov    ecx,ebx
c001f133:	5b                   	pop    ebx
c001f134:	c1 e1 14             	shl    ecx,0x14
c001f137:	5e                   	pop    esi
c001f138:	09 ca                	or     edx,ecx
c001f13a:	5f                   	pop    edi
c001f13b:	c3                   	ret    

c001f13c <Vm::fpuLongToFloat(long long)>:
c001f13c:	56                   	push   esi
c001f13d:	31 c0                	xor    eax,eax
c001f13f:	53                   	push   ebx
c001f140:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f144:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f148:	39 c8                	cmp    eax,ecx
c001f14a:	19 d8                	sbb    eax,ebx
c001f14c:	7d 04                	jge    c001f152 <Vm::fpuLongToFloat(long long)+0x16>
c001f14e:	31 f6                	xor    esi,esi
c001f150:	eb 0c                	jmp    c001f15e <Vm::fpuLongToFloat(long long)+0x22>
c001f152:	f7 d9                	neg    ecx
c001f154:	be 01 00 00 00       	mov    esi,0x1
c001f159:	83 d3 00             	adc    ebx,0x0
c001f15c:	f7 db                	neg    ebx
c001f15e:	31 c0                	xor    eax,eax
c001f160:	0f ba e3 14          	bt     ebx,0x14
c001f164:	72 07                	jb     c001f16d <Vm::fpuLongToFloat(long long)+0x31>
c001f166:	01 c9                	add    ecx,ecx
c001f168:	11 db                	adc    ebx,ebx
c001f16a:	40                   	inc    eax
c001f16b:	eb f3                	jmp    c001f160 <Vm::fpuLongToFloat(long long)+0x24>
c001f16d:	ba 33 04 00 00       	mov    edx,0x433
c001f172:	29 c2                	sub    edx,eax
c001f174:	89 c8                	mov    eax,ecx
c001f176:	c1 e2 14             	shl    edx,0x14
c001f179:	89 d9                	mov    ecx,ebx
c001f17b:	89 f3                	mov    ebx,esi
c001f17d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f183:	09 ca                	or     edx,ecx
c001f185:	84 db                	test   bl,bl
c001f187:	74 06                	je     c001f18f <Vm::fpuLongToFloat(long long)+0x53>
c001f189:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f18f:	5b                   	pop    ebx
c001f190:	5e                   	pop    esi
c001f191:	c3                   	ret    

c001f192 <Vm::fpuGet0()>:
c001f192:	31 c0                	xor    eax,eax
c001f194:	31 d2                	xor    edx,edx
c001f196:	c3                   	ret    

c001f197 <Vm::fpuGet1()>:
c001f197:	b8 01 00 00 00       	mov    eax,0x1
c001f19c:	31 d2                	xor    edx,edx
c001f19e:	c3                   	ret    

c001f19f <Vm::fpuGetPi()>:
c001f19f:	b8 03 00 00 00       	mov    eax,0x3
c001f1a4:	31 d2                	xor    edx,edx
c001f1a6:	c3                   	ret    

c001f1a7 <Vm::fpuGetLog2E()>:
c001f1a7:	83 ec 18             	sub    esp,0x18
c001f1aa:	68 bc be 02 c0       	push   0xc002bebc
c001f1af:	e8 47 ad ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f1b4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1b9:	31 d2                	xor    edx,edx
c001f1bb:	83 c4 1c             	add    esp,0x1c
c001f1be:	c3                   	ret    

c001f1bf <Vm::fpuGetLogE2()>:
c001f1bf:	83 ec 18             	sub    esp,0x18
c001f1c2:	68 c8 be 02 c0       	push   0xc002bec8
c001f1c7:	e8 2f ad ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f1cc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1d1:	31 d2                	xor    edx,edx
c001f1d3:	83 c4 1c             	add    esp,0x1c
c001f1d6:	c3                   	ret    

c001f1d7 <Vm::fpuGetLog210()>:
c001f1d7:	83 ec 18             	sub    esp,0x18
c001f1da:	68 d4 be 02 c0       	push   0xc002bed4
c001f1df:	e8 17 ad ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f1e4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1e9:	31 d2                	xor    edx,edx
c001f1eb:	83 c4 1c             	add    esp,0x1c
c001f1ee:	c3                   	ret    

c001f1ef <Vm::fpuGetLog102()>:
c001f1ef:	83 ec 18             	sub    esp,0x18
c001f1f2:	68 e1 be 02 c0       	push   0xc002bee1
c001f1f7:	e8 ff ac ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f1fc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f201:	31 d2                	xor    edx,edx
c001f203:	83 c4 1c             	add    esp,0x1c
c001f206:	c3                   	ret    

c001f207 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f20f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f213:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f217:	0f 92 c0             	setb   al
c001f21a:	c3                   	ret    

c001f21b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f21b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f223:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f227:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f22b:	09 c2                	or     edx,eax
c001f22d:	0f 94 c0             	sete   al
c001f230:	c3                   	ret    

c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f238:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f23c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f240:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f244:	57                   	push   edi
c001f245:	56                   	push   esi
c001f246:	53                   	push   ebx
c001f247:	51                   	push   ecx
c001f248:	e8 ce ff ff ff       	call   c001f21b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f24d:	83 c4 10             	add    esp,0x10
c001f250:	88 c2                	mov    dl,al
c001f252:	31 c0                	xor    eax,eax
c001f254:	84 d2                	test   dl,dl
c001f256:	75 0c                	jne    c001f264 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f258:	57                   	push   edi
c001f259:	56                   	push   esi
c001f25a:	53                   	push   ebx
c001f25b:	51                   	push   ecx
c001f25c:	e8 a6 ff ff ff       	call   c001f207 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f261:	83 c4 10             	add    esp,0x10
c001f264:	83 e0 01             	and    eax,0x1
c001f267:	5b                   	pop    ebx
c001f268:	88 c1                	mov    cl,al
c001f26a:	83 e2 01             	and    edx,0x1
c001f26d:	a0 61 10 03 c0       	mov    al,ds:0xc0031061
c001f272:	c1 e2 06             	shl    edx,0x6
c001f275:	83 e0 ba             	and    eax,0xffffffba
c001f278:	5e                   	pop    esi
c001f279:	09 c8                	or     eax,ecx
c001f27b:	5f                   	pop    edi
c001f27c:	09 d0                	or     eax,edx
c001f27e:	a2 61 10 03 c0       	mov    ds:0xc0031061,al
c001f283:	c3                   	ret    

c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f28c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f290:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f294:	c3                   	ret    

c001f295 <Vm::fpuAbs(unsigned long long)>:
c001f295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f299:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f29d:	c3                   	ret    

c001f29e <Vm::fpuChs(unsigned long long)>:
c001f29e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2a6:	f7 d8                	neg    eax
c001f2a8:	83 d2 00             	adc    edx,0x0
c001f2ab:	f7 da                	neg    edx
c001f2ad:	c3                   	ret    

c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f2ae:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f2b2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f2b7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f2bb:	eb c7                	jmp    c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f2bd:	53                   	push   ebx
c001f2be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f2c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f2ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2ce:	0f af ca             	imul   ecx,edx
c001f2d1:	0f af d8             	imul   ebx,eax
c001f2d4:	f7 e2                	mul    edx
c001f2d6:	01 d9                	add    ecx,ebx
c001f2d8:	5b                   	pop    ebx
c001f2d9:	01 ca                	add    edx,ecx
c001f2db:	c3                   	ret    

c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f2dc:	83 ec 0c             	sub    esp,0xc
c001f2df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ef:	e8 e0 74 00 00       	call   c00267d4 <__udivdi3>
c001f2f4:	83 c4 1c             	add    esp,0x1c
c001f2f7:	c3                   	ret    

c001f2f8 <Vm::fpuSquare(unsigned long long)>:
c001f2f8:	50                   	push   eax
c001f2f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f301:	52                   	push   edx
c001f302:	50                   	push   eax
c001f303:	52                   	push   edx
c001f304:	50                   	push   eax
c001f305:	e8 b3 ff ff ff       	call   c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f30a:	83 c4 14             	add    esp,0x14
c001f30d:	c3                   	ret    

c001f30e <Vm::fpuGetReg(int)>:
c001f30e:	83 ec 0c             	sub    esp,0xc
c001f311:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f316:	76 10                	jbe    c001f328 <Vm::fpuGetReg(int)+0x1a>
c001f318:	83 ec 0c             	sub    esp,0xc
c001f31b:	68 ee be 02 c0       	push   0xc002beee
c001f320:	e8 d6 ab ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f325:	83 c4 10             	add    esp,0x10
c001f328:	a0 61 10 03 c0       	mov    al,ds:0xc0031061
c001f32d:	b9 08 00 00 00       	mov    ecx,0x8
c001f332:	c0 e8 03             	shr    al,0x3
c001f335:	83 e0 07             	and    eax,0x7
c001f338:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f33c:	99                   	cdq    
c001f33d:	f7 f9                	idiv   ecx
c001f33f:	8b 04 d5 64 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcef9c]
c001f346:	8b 14 d5 68 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcef98]
c001f34d:	83 c4 0c             	add    esp,0xc
c001f350:	c3                   	ret    

c001f351 <Vm::fpuSetReg(int, unsigned long long)>:
c001f351:	57                   	push   edi
c001f352:	56                   	push   esi
c001f353:	52                   	push   edx
c001f354:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f358:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f35c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f361:	76 10                	jbe    c001f373 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f363:	83 ec 0c             	sub    esp,0xc
c001f366:	68 01 bf 02 c0       	push   0xc002bf01
c001f36b:	e8 8b ab ff ff       	call   c0019efb <Krnl::panic(char const*)>
c001f370:	83 c4 10             	add    esp,0x10
c001f373:	a0 61 10 03 c0       	mov    al,ds:0xc0031061
c001f378:	b9 08 00 00 00       	mov    ecx,0x8
c001f37d:	c0 e8 03             	shr    al,0x3
c001f380:	83 e0 07             	and    eax,0x7
c001f383:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f387:	99                   	cdq    
c001f388:	f7 f9                	idiv   ecx
c001f38a:	89 34 d5 64 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef9c],esi
c001f391:	89 3c d5 68 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef98],edi
c001f398:	58                   	pop    eax
c001f399:	5e                   	pop    esi
c001f39a:	5f                   	pop    edi
c001f39b:	c3                   	ret    

c001f39c <Vm::fpuPush(unsigned long long)>:
c001f39c:	a0 61 10 03 c0       	mov    al,ds:0xc0031061
c001f3a1:	c0 e8 03             	shr    al,0x3
c001f3a4:	83 e0 07             	and    eax,0x7
c001f3a7:	83 c0 07             	add    eax,0x7
c001f3aa:	88 c2                	mov    dl,al
c001f3ac:	83 e0 07             	and    eax,0x7
c001f3af:	83 e2 07             	and    edx,0x7
c001f3b2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f3b9:	8a 15 61 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031061
c001f3bf:	83 e2 c7             	and    edx,0xffffffc7
c001f3c2:	09 ca                	or     edx,ecx
c001f3c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3c8:	88 15 61 10 03 c0    	mov    BYTE PTR ds:0xc0031061,dl
c001f3ce:	89 0c c5 68 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef98],ecx
c001f3d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3d9:	89 14 c5 64 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef9c],edx
c001f3e0:	a1 a4 10 03 c0       	mov    eax,ds:0xc00310a4
c001f3e5:	83 f8 08             	cmp    eax,0x8
c001f3e8:	75 08                	jne    c001f3f2 <Vm::fpuPush(unsigned long long)+0x56>
c001f3ea:	80 0d 60 10 03 c0 40 	or     BYTE PTR ds:0xc0031060,0x40
c001f3f1:	c3                   	ret    
c001f3f2:	40                   	inc    eax
c001f3f3:	a3 a4 10 03 c0       	mov    ds:0xc00310a4,eax
c001f3f8:	c3                   	ret    

c001f3f9 <Vm::fpuPop()>:
c001f3f9:	8a 0d 61 10 03 c0    	mov    cl,BYTE PTR ds:0xc0031061
c001f3ff:	53                   	push   ebx
c001f400:	c0 e9 03             	shr    cl,0x3
c001f403:	8a 1d 61 10 03 c0    	mov    bl,BYTE PTR ds:0xc0031061
c001f409:	83 e1 07             	and    ecx,0x7
c001f40c:	83 e3 c7             	and    ebx,0xffffffc7
c001f40f:	8b 04 cd 64 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcef9c]
c001f416:	8b 14 cd 68 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcef98]
c001f41d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f424:	83 e1 38             	and    ecx,0x38
c001f427:	09 d9                	or     ecx,ebx
c001f429:	88 0d 61 10 03 c0    	mov    BYTE PTR ds:0xc0031061,cl
c001f42f:	8b 0d a4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310a4
c001f435:	85 c9                	test   ecx,ecx
c001f437:	74 09                	je     c001f442 <Vm::fpuPop()+0x49>
c001f439:	49                   	dec    ecx
c001f43a:	89 0d a4 10 03 c0    	mov    DWORD PTR ds:0xc00310a4,ecx
c001f440:	eb 07                	jmp    c001f449 <Vm::fpuPop()+0x50>
c001f442:	80 0d 60 10 03 c0 40 	or     BYTE PTR ds:0xc0031060,0x40
c001f449:	5b                   	pop    ebx
c001f44a:	c3                   	ret    

c001f44b <Vm::x87Handler(regs*)>:
c001f44b:	55                   	push   ebp
c001f44c:	57                   	push   edi
c001f44d:	56                   	push   esi
c001f44e:	53                   	push   ebx
c001f44f:	83 ec 1c             	sub    esp,0x1c
c001f452:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f456:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f45b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f45e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f466:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f46a:	50                   	push   eax
c001f46b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f46f:	50                   	push   eax
c001f470:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f474:	50                   	push   eax
c001f475:	53                   	push   ebx
c001f476:	e8 99 a1 ff ff       	call   c0019614 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f47b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f47e:	83 c4 10             	add    esp,0x10
c001f481:	89 c6                	mov    esi,eax
c001f483:	80 fa d9             	cmp    dl,0xd9
c001f486:	0f 85 52 01 00 00    	jne    c001f5de <Vm::x87Handler(regs*)+0x193>
c001f48c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f490:	8d 50 20             	lea    edx,[eax+0x20]
c001f493:	80 fa 0e             	cmp    dl,0xe
c001f496:	0f 87 86 00 00 00    	ja     c001f522 <Vm::x87Handler(regs*)+0xd7>
c001f49c:	0f b6 d2             	movzx  edx,dl
c001f49f:	ff 24 95 14 bf 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd40ec]
c001f4a6:	e8 e7 fc ff ff       	call   c001f192 <Vm::fpuGet0()>
c001f4ab:	eb 05                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f4ad:	e8 e5 fc ff ff       	call   c001f197 <Vm::fpuGet1()>
c001f4b2:	57                   	push   edi
c001f4b3:	57                   	push   edi
c001f4b4:	52                   	push   edx
c001f4b5:	50                   	push   eax
c001f4b6:	e8 e1 fe ff ff       	call   c001f39c <Vm::fpuPush(unsigned long long)>
c001f4bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f4bf:	83 c4 10             	add    esp,0x10
c001f4c2:	b0 01                	mov    al,0x1
c001f4c4:	e9 e3 09 00 00       	jmp    c001feac <Vm::x87Handler(regs*)+0xa61>
c001f4c9:	83 ec 0c             	sub    esp,0xc
c001f4cc:	6a 00                	push   0x0
c001f4ce:	e8 3b fe ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f4d3:	59                   	pop    ecx
c001f4d4:	5e                   	pop    esi
c001f4d5:	52                   	push   edx
c001f4d6:	50                   	push   eax
c001f4d7:	e8 c2 fd ff ff       	call   c001f29e <Vm::fpuChs(unsigned long long)>
c001f4dc:	eb 13                	jmp    c001f4f1 <Vm::x87Handler(regs*)+0xa6>
c001f4de:	83 ec 0c             	sub    esp,0xc
c001f4e1:	6a 00                	push   0x0
c001f4e3:	e8 26 fe ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f4e8:	5f                   	pop    edi
c001f4e9:	5d                   	pop    ebp
c001f4ea:	52                   	push   edx
c001f4eb:	50                   	push   eax
c001f4ec:	e8 a4 fd ff ff       	call   c001f295 <Vm::fpuAbs(unsigned long long)>
c001f4f1:	83 c4 0c             	add    esp,0xc
c001f4f4:	52                   	push   edx
c001f4f5:	50                   	push   eax
c001f4f6:	6a 00                	push   0x0
c001f4f8:	e8 54 fe ff ff       	call   c001f351 <Vm::fpuSetReg(int, unsigned long long)>
c001f4fd:	eb bc                	jmp    c001f4bb <Vm::x87Handler(regs*)+0x70>
c001f4ff:	e8 d3 fc ff ff       	call   c001f1d7 <Vm::fpuGetLog210()>
c001f504:	eb ac                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f506:	e8 9c fc ff ff       	call   c001f1a7 <Vm::fpuGetLog2E()>
c001f50b:	eb a5                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f50d:	e8 8d fc ff ff       	call   c001f19f <Vm::fpuGetPi()>
c001f512:	eb 9e                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f514:	e8 d6 fc ff ff       	call   c001f1ef <Vm::fpuGetLog102()>
c001f519:	eb 97                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f51b:	e8 9f fc ff ff       	call   c001f1bf <Vm::fpuGetLogE2()>
c001f520:	eb 90                	jmp    c001f4b2 <Vm::x87Handler(regs*)+0x67>
c001f522:	8d 50 40             	lea    edx,[eax+0x40]
c001f525:	80 fa 07             	cmp    dl,0x7
c001f528:	77 15                	ja     c001f53f <Vm::x87Handler(regs*)+0xf4>
c001f52a:	83 ec 0c             	sub    esp,0xc
c001f52d:	2d c0 00 00 00       	sub    eax,0xc0
c001f532:	50                   	push   eax
c001f533:	e8 d6 fd ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f538:	59                   	pop    ecx
c001f539:	5e                   	pop    esi
c001f53a:	e9 75 ff ff ff       	jmp    c001f4b4 <Vm::x87Handler(regs*)+0x69>
c001f53f:	8d 50 38             	lea    edx,[eax+0x38]
c001f542:	80 fa 07             	cmp    dl,0x7
c001f545:	77 3c                	ja     c001f583 <Vm::x87Handler(regs*)+0x138>
c001f547:	83 ec 0c             	sub    esp,0xc
c001f54a:	2d c8 00 00 00       	sub    eax,0xc8
c001f54f:	50                   	push   eax
c001f550:	e8 b9 fd ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f55c:	89 c6                	mov    esi,eax
c001f55e:	89 d7                	mov    edi,edx
c001f560:	e8 a9 fd ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f565:	83 c4 0c             	add    esp,0xc
c001f568:	52                   	push   edx
c001f569:	50                   	push   eax
c001f56a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f56e:	2d c8 00 00 00       	sub    eax,0xc8
c001f573:	50                   	push   eax
c001f574:	e8 d8 fd ff ff       	call   c001f351 <Vm::fpuSetReg(int, unsigned long long)>
c001f579:	83 c4 0c             	add    esp,0xc
c001f57c:	57                   	push   edi
c001f57d:	56                   	push   esi
c001f57e:	e9 73 ff ff ff       	jmp    c001f4f6 <Vm::x87Handler(regs*)+0xab>
c001f583:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f587:	84 d2                	test   dl,dl
c001f589:	75 0f                	jne    c001f59a <Vm::x87Handler(regs*)+0x14f>
c001f58b:	83 ec 0c             	sub    esp,0xc
c001f58e:	ff 36                	push   DWORD PTR [esi]
c001f590:	e8 c8 fa ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001f595:	e9 bf 00 00 00       	jmp    c001f659 <Vm::x87Handler(regs*)+0x20e>
c001f59a:	80 fa 03             	cmp    dl,0x3
c001f59d:	75 13                	jne    c001f5b2 <Vm::x87Handler(regs*)+0x167>
c001f59f:	e8 55 fe ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001f5a4:	55                   	push   ebp
c001f5a5:	55                   	push   ebp
c001f5a6:	52                   	push   edx
c001f5a7:	50                   	push   eax
c001f5a8:	e8 4c fa ff ff       	call   c001eff9 <Vm::fpuInternalTo32(unsigned long long)>
c001f5ad:	e9 88 00 00 00       	jmp    c001f63a <Vm::x87Handler(regs*)+0x1ef>
c001f5b2:	80 fa 05             	cmp    dl,0x5
c001f5b5:	75 0e                	jne    c001f5c5 <Vm::x87Handler(regs*)+0x17a>
c001f5b7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f5ba:	66 a3 62 10 03 c0    	mov    ds:0xc0031062,ax
c001f5c0:	e9 df 00 00 00       	jmp    c001f6a4 <Vm::x87Handler(regs*)+0x259>
c001f5c5:	31 c0                	xor    eax,eax
c001f5c7:	80 fa 07             	cmp    dl,0x7
c001f5ca:	0f 85 dc 08 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001f5d0:	66 a1 62 10 03 c0    	mov    ax,ds:0xc0031062
c001f5d6:	66 89 06             	mov    WORD PTR [esi],ax
c001f5d9:	e9 c6 00 00 00       	jmp    c001f6a4 <Vm::x87Handler(regs*)+0x259>
c001f5de:	80 fa d8             	cmp    dl,0xd8
c001f5e1:	0f 84 c9 00 00 00    	je     c001f6b0 <Vm::x87Handler(regs*)+0x265>
c001f5e7:	80 fa dc             	cmp    dl,0xdc
c001f5ea:	0f 84 0d 02 00 00    	je     c001f7fd <Vm::x87Handler(regs*)+0x3b2>
c001f5f0:	80 fa de             	cmp    dl,0xde
c001f5f3:	0f 84 cd 02 00 00    	je     c001f8c6 <Vm::x87Handler(regs*)+0x47b>
c001f5f9:	80 fa dd             	cmp    dl,0xdd
c001f5fc:	0f 84 5f 04 00 00    	je     c001fa61 <Vm::x87Handler(regs*)+0x616>
c001f602:	80 fa da             	cmp    dl,0xda
c001f605:	0f 84 24 05 00 00    	je     c001fb2f <Vm::x87Handler(regs*)+0x6e4>
c001f60b:	80 fa df             	cmp    dl,0xdf
c001f60e:	0f 84 68 05 00 00    	je     c001fb7c <Vm::x87Handler(regs*)+0x731>
c001f614:	31 c0                	xor    eax,eax
c001f616:	80 fa db             	cmp    dl,0xdb
c001f619:	0f 85 8d 08 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001f61f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f623:	80 fa 03             	cmp    dl,0x3
c001f626:	0f 85 70 06 00 00    	jne    c001fc9c <Vm::x87Handler(regs*)+0x851>
c001f62c:	e8 c8 fd ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001f631:	55                   	push   ebp
c001f632:	55                   	push   ebp
c001f633:	52                   	push   edx
c001f634:	50                   	push   eax
c001f635:	e8 71 fa ff ff       	call   c001f0ab <Vm::fpuFloatToLong(unsigned long long)>
c001f63a:	83 c4 10             	add    esp,0x10
c001f63d:	89 06                	mov    DWORD PTR [esi],eax
c001f63f:	eb 63                	jmp    c001f6a4 <Vm::x87Handler(regs*)+0x259>
c001f641:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f645:	84 d2                	test   dl,dl
c001f647:	0f 85 e6 05 00 00    	jne    c001fc33 <Vm::x87Handler(regs*)+0x7e8>
c001f64d:	57                   	push   edi
c001f64e:	57                   	push   edi
c001f64f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f652:	ff 36                	push   DWORD PTR [esi]
c001f654:	e8 49 fa ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001f659:	5e                   	pop    esi
c001f65a:	5f                   	pop    edi
c001f65b:	52                   	push   edx
c001f65c:	50                   	push   eax
c001f65d:	e8 3a fd ff ff       	call   c001f39c <Vm::fpuPush(unsigned long long)>
c001f662:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f666:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f669:	e9 51 fe ff ff       	jmp    c001f4bf <Vm::x87Handler(regs*)+0x74>
c001f66e:	80 fa 03             	cmp    dl,0x3
c001f671:	0f 85 d7 06 00 00    	jne    c001fd4e <Vm::x87Handler(regs*)+0x903>
c001f677:	57                   	push   edi
c001f678:	57                   	push   edi
c001f679:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f67c:	ff 36                	push   DWORD PTR [esi]
c001f67e:	e8 1f fa ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001f683:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f68a:	89 c6                	mov    esi,eax
c001f68c:	89 d7                	mov    edi,edx
c001f68e:	e8 7b fc ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f693:	57                   	push   edi
c001f694:	56                   	push   esi
c001f695:	52                   	push   edx
c001f696:	50                   	push   eax
c001f697:	e8 95 fb ff ff       	call   c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f69c:	83 c4 20             	add    esp,0x20
c001f69f:	e8 55 fd ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001f6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6a8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6ab:	e9 12 fe ff ff       	jmp    c001f4c2 <Vm::x87Handler(regs*)+0x77>
c001f6b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6b4:	8d 50 40             	lea    edx,[eax+0x40]
c001f6b7:	80 fa 07             	cmp    dl,0x7
c001f6ba:	77 29                	ja     c001f6e5 <Vm::x87Handler(regs*)+0x29a>
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	2d c0 00 00 00       	sub    eax,0xc0
c001f6c4:	50                   	push   eax
c001f6c5:	e8 44 fc ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f6ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d1:	89 c6                	mov    esi,eax
c001f6d3:	89 d7                	mov    edi,edx
c001f6d5:	e8 34 fc ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f6da:	57                   	push   edi
c001f6db:	56                   	push   esi
c001f6dc:	52                   	push   edx
c001f6dd:	50                   	push   eax
c001f6de:	e8 a1 fb ff ff       	call   c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6e3:	eb 2f                	jmp    c001f714 <Vm::x87Handler(regs*)+0x2c9>
c001f6e5:	8d 50 38             	lea    edx,[eax+0x38]
c001f6e8:	80 fa 07             	cmp    dl,0x7
c001f6eb:	77 2f                	ja     c001f71c <Vm::x87Handler(regs*)+0x2d1>
c001f6ed:	83 ec 0c             	sub    esp,0xc
c001f6f0:	2d c8 00 00 00       	sub    eax,0xc8
c001f6f5:	50                   	push   eax
c001f6f6:	e8 13 fc ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f6fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f702:	89 c6                	mov    esi,eax
c001f704:	89 d7                	mov    edi,edx
c001f706:	e8 03 fc ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f70b:	57                   	push   edi
c001f70c:	56                   	push   esi
c001f70d:	52                   	push   edx
c001f70e:	50                   	push   eax
c001f70f:	e8 a9 fb ff ff       	call   c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f714:	83 c4 1c             	add    esp,0x1c
c001f717:	e9 d8 fd ff ff       	jmp    c001f4f4 <Vm::x87Handler(regs*)+0xa9>
c001f71c:	8d 50 30             	lea    edx,[eax+0x30]
c001f71f:	80 fa 07             	cmp    dl,0x7
c001f722:	77 0d                	ja     c001f731 <Vm::x87Handler(regs*)+0x2e6>
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	2d d0 00 00 00       	sub    eax,0xd0
c001f72c:	e9 99 03 00 00       	jmp    c001faca <Vm::x87Handler(regs*)+0x67f>
c001f731:	8d 50 28             	lea    edx,[eax+0x28]
c001f734:	80 fa 07             	cmp    dl,0x7
c001f737:	77 0d                	ja     c001f746 <Vm::x87Handler(regs*)+0x2fb>
c001f739:	83 ec 0c             	sub    esp,0xc
c001f73c:	2d d8 00 00 00       	sub    eax,0xd8
c001f741:	e9 c0 03 00 00       	jmp    c001fb06 <Vm::x87Handler(regs*)+0x6bb>
c001f746:	8d 50 20             	lea    edx,[eax+0x20]
c001f749:	80 fa 07             	cmp    dl,0x7
c001f74c:	77 1b                	ja     c001f769 <Vm::x87Handler(regs*)+0x31e>
c001f74e:	83 ec 0c             	sub    esp,0xc
c001f751:	2d e0 00 00 00       	sub    eax,0xe0
c001f756:	50                   	push   eax
c001f757:	e8 b2 fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f75c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f763:	89 c6                	mov    esi,eax
c001f765:	89 d7                	mov    edi,edx
c001f767:	eb 22                	jmp    c001f78b <Vm::x87Handler(regs*)+0x340>
c001f769:	8d 50 18             	lea    edx,[eax+0x18]
c001f76c:	80 fa 07             	cmp    dl,0x7
c001f76f:	77 2d                	ja     c001f79e <Vm::x87Handler(regs*)+0x353>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	6a 00                	push   0x0
c001f776:	e8 93 fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f77b:	89 c6                	mov    esi,eax
c001f77d:	89 d7                	mov    edi,edx
c001f77f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f783:	2d e8 00 00 00       	sub    eax,0xe8
c001f788:	89 04 24             	mov    DWORD PTR [esp],eax
c001f78b:	e8 7e fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f790:	57                   	push   edi
c001f791:	56                   	push   esi
c001f792:	52                   	push   edx
c001f793:	50                   	push   eax
c001f794:	e8 15 fb ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f799:	e9 76 ff ff ff       	jmp    c001f714 <Vm::x87Handler(regs*)+0x2c9>
c001f79e:	8d 50 10             	lea    edx,[eax+0x10]
c001f7a1:	80 fa 07             	cmp    dl,0x7
c001f7a4:	77 1b                	ja     c001f7c1 <Vm::x87Handler(regs*)+0x376>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	2d f0 00 00 00       	sub    eax,0xf0
c001f7ae:	50                   	push   eax
c001f7af:	e8 5a fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f7b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7bb:	89 c6                	mov    esi,eax
c001f7bd:	89 d7                	mov    edi,edx
c001f7bf:	eb 22                	jmp    c001f7e3 <Vm::x87Handler(regs*)+0x398>
c001f7c1:	3c f7                	cmp    al,0xf7
c001f7c3:	0f 86 d1 03 00 00    	jbe    c001fb9a <Vm::x87Handler(regs*)+0x74f>
c001f7c9:	83 ec 0c             	sub    esp,0xc
c001f7cc:	6a 00                	push   0x0
c001f7ce:	e8 3b fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f7d3:	89 c6                	mov    esi,eax
c001f7d5:	89 d7                	mov    edi,edx
c001f7d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7db:	2d f8 00 00 00       	sub    eax,0xf8
c001f7e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7e3:	e8 26 fb ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f7e8:	57                   	push   edi
c001f7e9:	56                   	push   esi
c001f7ea:	52                   	push   edx
c001f7eb:	50                   	push   eax
c001f7ec:	e8 eb fa ff ff       	call   c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7f1:	83 c4 1c             	add    esp,0x1c
c001f7f4:	52                   	push   edx
c001f7f5:	50                   	push   eax
c001f7f6:	6a 00                	push   0x0
c001f7f8:	e9 51 02 00 00       	jmp    c001fa4e <Vm::x87Handler(regs*)+0x603>
c001f7fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f801:	8d 50 40             	lea    edx,[eax+0x40]
c001f804:	80 fa 07             	cmp    dl,0x7
c001f807:	77 37                	ja     c001f840 <Vm::x87Handler(regs*)+0x3f5>
c001f809:	83 ec 0c             	sub    esp,0xc
c001f80c:	2d c0 00 00 00       	sub    eax,0xc0
c001f811:	50                   	push   eax
c001f812:	e8 f7 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f817:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f81e:	89 c6                	mov    esi,eax
c001f820:	89 d7                	mov    edi,edx
c001f822:	e8 e7 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f827:	57                   	push   edi
c001f828:	56                   	push   esi
c001f829:	52                   	push   edx
c001f82a:	50                   	push   eax
c001f82b:	e8 54 fa ff ff       	call   c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f830:	83 c4 1c             	add    esp,0x1c
c001f833:	52                   	push   edx
c001f834:	50                   	push   eax
c001f835:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f839:	2d c0 00 00 00       	sub    eax,0xc0
c001f83e:	eb 3d                	jmp    c001f87d <Vm::x87Handler(regs*)+0x432>
c001f840:	8d 50 38             	lea    edx,[eax+0x38]
c001f843:	80 fa 07             	cmp    dl,0x7
c001f846:	77 3b                	ja     c001f883 <Vm::x87Handler(regs*)+0x438>
c001f848:	83 ec 0c             	sub    esp,0xc
c001f84b:	2d c8 00 00 00       	sub    eax,0xc8
c001f850:	50                   	push   eax
c001f851:	e8 b8 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f856:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f85d:	89 c6                	mov    esi,eax
c001f85f:	89 d7                	mov    edi,edx
c001f861:	e8 a8 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f866:	57                   	push   edi
c001f867:	56                   	push   esi
c001f868:	52                   	push   edx
c001f869:	50                   	push   eax
c001f86a:	e8 4e fa ff ff       	call   c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f86f:	83 c4 1c             	add    esp,0x1c
c001f872:	52                   	push   edx
c001f873:	50                   	push   eax
c001f874:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f878:	2d c8 00 00 00       	sub    eax,0xc8
c001f87d:	50                   	push   eax
c001f87e:	e9 75 fc ff ff       	jmp    c001f4f8 <Vm::x87Handler(regs*)+0xad>
c001f883:	83 c0 18             	add    eax,0x18
c001f886:	3c 07                	cmp    al,0x7
c001f888:	0f 87 3b 04 00 00    	ja     c001fcc9 <Vm::x87Handler(regs*)+0x87e>
c001f88e:	83 ec 0c             	sub    esp,0xc
c001f891:	6a 00                	push   0x0
c001f893:	e8 76 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f898:	89 c6                	mov    esi,eax
c001f89a:	89 d7                	mov    edi,edx
c001f89c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a0:	2d e8 00 00 00       	sub    eax,0xe8
c001f8a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8a8:	e8 61 fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f8ad:	57                   	push   edi
c001f8ae:	56                   	push   esi
c001f8af:	52                   	push   edx
c001f8b0:	50                   	push   eax
c001f8b1:	e8 f8 f9 ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8b6:	83 c4 1c             	add    esp,0x1c
c001f8b9:	52                   	push   edx
c001f8ba:	50                   	push   eax
c001f8bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8bf:	2d e8 00 00 00       	sub    eax,0xe8
c001f8c4:	eb b7                	jmp    c001f87d <Vm::x87Handler(regs*)+0x432>
c001f8c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ca:	8d 50 40             	lea    edx,[eax+0x40]
c001f8cd:	80 fa 07             	cmp    dl,0x7
c001f8d0:	77 3a                	ja     c001f90c <Vm::x87Handler(regs*)+0x4c1>
c001f8d2:	83 ec 0c             	sub    esp,0xc
c001f8d5:	2d c0 00 00 00       	sub    eax,0xc0
c001f8da:	50                   	push   eax
c001f8db:	e8 2e fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f8e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e7:	89 c6                	mov    esi,eax
c001f8e9:	89 d7                	mov    edi,edx
c001f8eb:	e8 1e fa ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f8f0:	57                   	push   edi
c001f8f1:	56                   	push   esi
c001f8f2:	52                   	push   edx
c001f8f3:	50                   	push   eax
c001f8f4:	e8 8b f9 ff ff       	call   c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8f9:	83 c4 1c             	add    esp,0x1c
c001f8fc:	52                   	push   edx
c001f8fd:	50                   	push   eax
c001f8fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f902:	2d c0 00 00 00       	sub    eax,0xc0
c001f907:	e9 9e 01 00 00       	jmp    c001faaa <Vm::x87Handler(regs*)+0x65f>
c001f90c:	8d 50 20             	lea    edx,[eax+0x20]
c001f90f:	80 fa 07             	cmp    dl,0x7
c001f912:	77 3a                	ja     c001f94e <Vm::x87Handler(regs*)+0x503>
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	2d e0 00 00 00       	sub    eax,0xe0
c001f91c:	50                   	push   eax
c001f91d:	e8 ec f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f922:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f929:	89 c6                	mov    esi,eax
c001f92b:	89 d7                	mov    edi,edx
c001f92d:	e8 dc f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f932:	57                   	push   edi
c001f933:	56                   	push   esi
c001f934:	52                   	push   edx
c001f935:	50                   	push   eax
c001f936:	e8 73 f9 ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f93b:	83 c4 1c             	add    esp,0x1c
c001f93e:	52                   	push   edx
c001f93f:	50                   	push   eax
c001f940:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f944:	2d e0 00 00 00       	sub    eax,0xe0
c001f949:	e9 5c 01 00 00       	jmp    c001faaa <Vm::x87Handler(regs*)+0x65f>
c001f94e:	8d 50 18             	lea    edx,[eax+0x18]
c001f951:	80 fa 07             	cmp    dl,0x7
c001f954:	77 3b                	ja     c001f991 <Vm::x87Handler(regs*)+0x546>
c001f956:	83 ec 0c             	sub    esp,0xc
c001f959:	6a 00                	push   0x0
c001f95b:	e8 ae f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f960:	89 c6                	mov    esi,eax
c001f962:	89 d7                	mov    edi,edx
c001f964:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f968:	2d e8 00 00 00       	sub    eax,0xe8
c001f96d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f970:	e8 99 f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f975:	57                   	push   edi
c001f976:	56                   	push   esi
c001f977:	52                   	push   edx
c001f978:	50                   	push   eax
c001f979:	e8 30 f9 ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f97e:	83 c4 1c             	add    esp,0x1c
c001f981:	52                   	push   edx
c001f982:	50                   	push   eax
c001f983:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f987:	2d e8 00 00 00       	sub    eax,0xe8
c001f98c:	e9 19 01 00 00       	jmp    c001faaa <Vm::x87Handler(regs*)+0x65f>
c001f991:	8d 50 38             	lea    edx,[eax+0x38]
c001f994:	80 fa 07             	cmp    dl,0x7
c001f997:	77 37                	ja     c001f9d0 <Vm::x87Handler(regs*)+0x585>
c001f999:	83 ec 0c             	sub    esp,0xc
c001f99c:	2d c8 00 00 00       	sub    eax,0xc8
c001f9a1:	50                   	push   eax
c001f9a2:	e8 67 f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f9a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ae:	89 c6                	mov    esi,eax
c001f9b0:	89 d7                	mov    edi,edx
c001f9b2:	e8 57 f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f9b7:	57                   	push   edi
c001f9b8:	56                   	push   esi
c001f9b9:	52                   	push   edx
c001f9ba:	50                   	push   eax
c001f9bb:	e8 fd f8 ff ff       	call   c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9c0:	83 c4 1c             	add    esp,0x1c
c001f9c3:	52                   	push   edx
c001f9c4:	50                   	push   eax
c001f9c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9c9:	2d c8 00 00 00       	sub    eax,0xc8
c001f9ce:	eb 7d                	jmp    c001fa4d <Vm::x87Handler(regs*)+0x602>
c001f9d0:	3c f7                	cmp    al,0xf7
c001f9d2:	76 38                	jbe    c001fa0c <Vm::x87Handler(regs*)+0x5c1>
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	6a 00                	push   0x0
c001f9d9:	e8 30 f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f9de:	89 c6                	mov    esi,eax
c001f9e0:	89 d7                	mov    edi,edx
c001f9e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9e6:	2d f8 00 00 00       	sub    eax,0xf8
c001f9eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9ee:	e8 1b f9 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001f9f3:	57                   	push   edi
c001f9f4:	56                   	push   esi
c001f9f5:	52                   	push   edx
c001f9f6:	50                   	push   eax
c001f9f7:	e8 e0 f8 ff ff       	call   c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f9fc:	83 c4 1c             	add    esp,0x1c
c001f9ff:	52                   	push   edx
c001fa00:	50                   	push   eax
c001fa01:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa05:	2d f8 00 00 00       	sub    eax,0xf8
c001fa0a:	eb 41                	jmp    c001fa4d <Vm::x87Handler(regs*)+0x602>
c001fa0c:	8d 50 10             	lea    edx,[eax+0x10]
c001fa0f:	80 fa 07             	cmp    dl,0x7
c001fa12:	0f 87 5a 01 00 00    	ja     c001fb72 <Vm::x87Handler(regs*)+0x727>
c001fa18:	83 ec 0c             	sub    esp,0xc
c001fa1b:	2d f0 00 00 00       	sub    eax,0xf0
c001fa20:	50                   	push   eax
c001fa21:	e8 e8 f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fa26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa2d:	89 c6                	mov    esi,eax
c001fa2f:	89 d7                	mov    edi,edx
c001fa31:	e8 d8 f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fa36:	57                   	push   edi
c001fa37:	56                   	push   esi
c001fa38:	52                   	push   edx
c001fa39:	50                   	push   eax
c001fa3a:	e8 9d f8 ff ff       	call   c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa3f:	83 c4 1c             	add    esp,0x1c
c001fa42:	52                   	push   edx
c001fa43:	50                   	push   eax
c001fa44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa48:	2d f0 00 00 00       	sub    eax,0xf0
c001fa4d:	50                   	push   eax
c001fa4e:	e8 fe f8 ff ff       	call   c001f351 <Vm::fpuSetReg(int, unsigned long long)>
c001fa53:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa57:	e8 9d f9 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fa5c:	e9 5e fa ff ff       	jmp    c001f4bf <Vm::x87Handler(regs*)+0x74>
c001fa61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa65:	8d 50 30             	lea    edx,[eax+0x30]
c001fa68:	80 fa 07             	cmp    dl,0x7
c001fa6b:	77 1d                	ja     c001fa8a <Vm::x87Handler(regs*)+0x63f>
c001fa6d:	83 ec 0c             	sub    esp,0xc
c001fa70:	6a 00                	push   0x0
c001fa72:	e8 97 f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fa77:	83 c4 0c             	add    esp,0xc
c001fa7a:	52                   	push   edx
c001fa7b:	50                   	push   eax
c001fa7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa80:	2d d0 00 00 00       	sub    eax,0xd0
c001fa85:	e9 f3 fd ff ff       	jmp    c001f87d <Vm::x87Handler(regs*)+0x432>
c001fa8a:	8d 50 28             	lea    edx,[eax+0x28]
c001fa8d:	80 fa 07             	cmp    dl,0x7
c001fa90:	77 28                	ja     c001faba <Vm::x87Handler(regs*)+0x66f>
c001fa92:	83 ec 0c             	sub    esp,0xc
c001fa95:	6a 00                	push   0x0
c001fa97:	e8 72 f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fa9c:	83 c4 0c             	add    esp,0xc
c001fa9f:	52                   	push   edx
c001faa0:	50                   	push   eax
c001faa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faa5:	2d d8 00 00 00       	sub    eax,0xd8
c001faaa:	50                   	push   eax
c001faab:	e8 a1 f8 ff ff       	call   c001f351 <Vm::fpuSetReg(int, unsigned long long)>
c001fab0:	e8 44 f9 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fab5:	e9 01 fa ff ff       	jmp    c001f4bb <Vm::x87Handler(regs*)+0x70>
c001faba:	8d 50 20             	lea    edx,[eax+0x20]
c001fabd:	80 fa 07             	cmp    dl,0x7
c001fac0:	77 30                	ja     c001faf2 <Vm::x87Handler(regs*)+0x6a7>
c001fac2:	83 ec 0c             	sub    esp,0xc
c001fac5:	2d e0 00 00 00       	sub    eax,0xe0
c001faca:	50                   	push   eax
c001facb:	e8 3e f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fad0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fad7:	89 c6                	mov    esi,eax
c001fad9:	89 d7                	mov    edi,edx
c001fadb:	e8 2e f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fae0:	57                   	push   edi
c001fae1:	56                   	push   esi
c001fae2:	52                   	push   edx
c001fae3:	50                   	push   eax
c001fae4:	e8 48 f7 ff ff       	call   c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fae9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faed:	e9 54 02 00 00       	jmp    c001fd46 <Vm::x87Handler(regs*)+0x8fb>
c001faf2:	8d 50 18             	lea    edx,[eax+0x18]
c001faf5:	80 fa 07             	cmp    dl,0x7
c001faf8:	0f 87 43 fb ff ff    	ja     c001f641 <Vm::x87Handler(regs*)+0x1f6>
c001fafe:	83 ec 0c             	sub    esp,0xc
c001fb01:	2d e8 00 00 00       	sub    eax,0xe8
c001fb06:	50                   	push   eax
c001fb07:	e8 02 f8 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fb0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb13:	89 c6                	mov    esi,eax
c001fb15:	89 d7                	mov    edi,edx
c001fb17:	e8 f2 f7 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fb1c:	57                   	push   edi
c001fb1d:	56                   	push   esi
c001fb1e:	52                   	push   edx
c001fb1f:	50                   	push   eax
c001fb20:	e8 0c f7 ff ff       	call   c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb25:	83 c4 20             	add    esp,0x20
c001fb28:	e8 cc f8 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fb2d:	eb 62                	jmp    c001fb91 <Vm::x87Handler(regs*)+0x746>
c001fb2f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fb33:	0f 85 0f 01 00 00    	jne    c001fc48 <Vm::x87Handler(regs*)+0x7fd>
c001fb39:	83 ec 0c             	sub    esp,0xc
c001fb3c:	6a 01                	push   0x1
c001fb3e:	e8 cb f7 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fb43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4a:	89 c6                	mov    esi,eax
c001fb4c:	89 d7                	mov    edi,edx
c001fb4e:	e8 bb f7 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fb53:	57                   	push   edi
c001fb54:	56                   	push   esi
c001fb55:	52                   	push   edx
c001fb56:	50                   	push   eax
c001fb57:	e8 d5 f6 ff ff       	call   c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb5c:	83 c4 20             	add    esp,0x20
c001fb5f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb63:	e8 91 f8 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fb68:	e8 8c f8 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fb6d:	e9 50 f9 ff ff       	jmp    c001f4c2 <Vm::x87Handler(regs*)+0x77>
c001fb72:	3c d9                	cmp    al,0xd9
c001fb74:	0f 85 b5 02 00 00    	jne    c001fe2f <Vm::x87Handler(regs*)+0x9e4>
c001fb7a:	eb bd                	jmp    c001fb39 <Vm::x87Handler(regs*)+0x6ee>
c001fb7c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fb80:	0f 85 ea 02 00 00    	jne    c001fe70 <Vm::x87Handler(regs*)+0xa25>
c001fb86:	0f b7 05 60 10 03 c0 	movzx  eax,WORD PTR ds:0xc0031060
c001fb8d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fb91:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb95:	e9 28 f9 ff ff       	jmp    c001f4c2 <Vm::x87Handler(regs*)+0x77>
c001fb9a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb9e:	84 d2                	test   dl,dl
c001fba0:	75 0f                	jne    c001fbb1 <Vm::x87Handler(regs*)+0x766>
c001fba2:	83 ec 0c             	sub    esp,0xc
c001fba5:	ff 36                	push   DWORD PTR [esi]
c001fba7:	e8 b1 f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fbac:	e9 2c 01 00 00       	jmp    c001fcdd <Vm::x87Handler(regs*)+0x892>
c001fbb1:	80 fa 01             	cmp    dl,0x1
c001fbb4:	75 0f                	jne    c001fbc5 <Vm::x87Handler(regs*)+0x77a>
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	ff 36                	push   DWORD PTR [esi]
c001fbbb:	e8 9d f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fbc0:	e9 81 02 00 00       	jmp    c001fe46 <Vm::x87Handler(regs*)+0x9fb>
c001fbc5:	80 fa 04             	cmp    dl,0x4
c001fbc8:	75 0f                	jne    c001fbd9 <Vm::x87Handler(regs*)+0x78e>
c001fbca:	83 ec 0c             	sub    esp,0xc
c001fbcd:	ff 36                	push   DWORD PTR [esi]
c001fbcf:	e8 89 f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fbd4:	e9 86 01 00 00       	jmp    c001fd5f <Vm::x87Handler(regs*)+0x914>
c001fbd9:	80 fa 05             	cmp    dl,0x5
c001fbdc:	75 1b                	jne    c001fbf9 <Vm::x87Handler(regs*)+0x7ae>
c001fbde:	83 ec 0c             	sub    esp,0xc
c001fbe1:	6a 00                	push   0x0
c001fbe3:	e8 26 f7 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fbe8:	89 c7                	mov    edi,eax
c001fbea:	89 d5                	mov    ebp,edx
c001fbec:	58                   	pop    eax
c001fbed:	ff 36                	push   DWORD PTR [esi]
c001fbef:	e8 69 f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fbf4:	e9 a3 01 00 00       	jmp    c001fd9c <Vm::x87Handler(regs*)+0x951>
c001fbf9:	80 fa 06             	cmp    dl,0x6
c001fbfc:	75 0f                	jne    c001fc0d <Vm::x87Handler(regs*)+0x7c2>
c001fbfe:	83 ec 0c             	sub    esp,0xc
c001fc01:	ff 36                	push   DWORD PTR [esi]
c001fc03:	e8 55 f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fc08:	e9 ae 01 00 00       	jmp    c001fdbb <Vm::x87Handler(regs*)+0x970>
c001fc0d:	31 c0                	xor    eax,eax
c001fc0f:	80 fa 07             	cmp    dl,0x7
c001fc12:	0f 85 94 02 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fc18:	83 ec 0c             	sub    esp,0xc
c001fc1b:	6a 00                	push   0x0
c001fc1d:	e8 ec f6 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fc22:	89 c7                	mov    edi,eax
c001fc24:	89 d5                	mov    ebp,edx
c001fc26:	58                   	pop    eax
c001fc27:	ff 36                	push   DWORD PTR [esi]
c001fc29:	e8 2f f4 ff ff       	call   c001f05d <Vm::fpu32ToInternal(unsigned int)>
c001fc2e:	e9 cb 01 00 00       	jmp    c001fdfe <Vm::x87Handler(regs*)+0x9b3>
c001fc33:	80 fa 03             	cmp    dl,0x3
c001fc36:	0f 85 d3 01 00 00    	jne    c001fe0f <Vm::x87Handler(regs*)+0x9c4>
c001fc3c:	e8 b8 f7 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fc41:	51                   	push   ecx
c001fc42:	51                   	push   ecx
c001fc43:	e9 de 01 00 00       	jmp    c001fe26 <Vm::x87Handler(regs*)+0x9db>
c001fc48:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc4c:	80 fa 01             	cmp    dl,0x1
c001fc4f:	75 09                	jne    c001fc5a <Vm::x87Handler(regs*)+0x80f>
c001fc51:	57                   	push   edi
c001fc52:	57                   	push   edi
c001fc53:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc55:	e9 e3 01 00 00       	jmp    c001fe3d <Vm::x87Handler(regs*)+0x9f2>
c001fc5a:	80 fa 04             	cmp    dl,0x4
c001fc5d:	75 12                	jne    c001fc71 <Vm::x87Handler(regs*)+0x826>
c001fc5f:	31 d2                	xor    edx,edx
c001fc61:	51                   	push   ecx
c001fc62:	51                   	push   ecx
c001fc63:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc65:	52                   	push   edx
c001fc66:	50                   	push   eax
c001fc67:	e8 d0 f4 ff ff       	call   c001f13c <Vm::fpuLongToFloat(long long)>
c001fc6c:	e9 ee 00 00 00       	jmp    c001fd5f <Vm::x87Handler(regs*)+0x914>
c001fc71:	31 c0                	xor    eax,eax
c001fc73:	80 fa 07             	cmp    dl,0x7
c001fc76:	0f 85 30 02 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	6a 00                	push   0x0
c001fc81:	e8 88 f6 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fc86:	89 c7                	mov    edi,eax
c001fc88:	89 d5                	mov    ebp,edx
c001fc8a:	58                   	pop    eax
c001fc8b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc8d:	5a                   	pop    edx
c001fc8e:	31 d2                	xor    edx,edx
c001fc90:	52                   	push   edx
c001fc91:	50                   	push   eax
c001fc92:	e8 a5 f4 ff ff       	call   c001f13c <Vm::fpuLongToFloat(long long)>
c001fc97:	e9 62 01 00 00       	jmp    c001fdfe <Vm::x87Handler(regs*)+0x9b3>
c001fc9c:	84 d2                	test   dl,dl
c001fc9e:	75 0d                	jne    c001fcad <Vm::x87Handler(regs*)+0x862>
c001fca0:	31 d2                	xor    edx,edx
c001fca2:	55                   	push   ebp
c001fca3:	55                   	push   ebp
c001fca4:	8b 06                	mov    eax,DWORD PTR [esi]
c001fca6:	52                   	push   edx
c001fca7:	50                   	push   eax
c001fca8:	e9 d3 01 00 00       	jmp    c001fe80 <Vm::x87Handler(regs*)+0xa35>
c001fcad:	31 c0                	xor    eax,eax
c001fcaf:	80 fa 02             	cmp    dl,0x2
c001fcb2:	0f 85 f4 01 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fcb8:	83 ec 0c             	sub    esp,0xc
c001fcbb:	6a 00                	push   0x0
c001fcbd:	e8 4c f6 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fcc2:	59                   	pop    ecx
c001fcc3:	5f                   	pop    edi
c001fcc4:	e9 6a f9 ff ff       	jmp    c001f633 <Vm::x87Handler(regs*)+0x1e8>
c001fcc9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fccd:	84 d2                	test   dl,dl
c001fccf:	75 2a                	jne    c001fcfb <Vm::x87Handler(regs*)+0x8b0>
c001fcd1:	50                   	push   eax
c001fcd2:	50                   	push   eax
c001fcd3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcd6:	ff 36                	push   DWORD PTR [esi]
c001fcd8:	e8 c5 f3 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fcdd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce4:	89 c6                	mov    esi,eax
c001fce6:	89 d7                	mov    edi,edx
c001fce8:	e8 21 f6 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fced:	57                   	push   edi
c001fcee:	56                   	push   esi
c001fcef:	52                   	push   edx
c001fcf0:	50                   	push   eax
c001fcf1:	e8 8e f5 ff ff       	call   c001f284 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcf6:	e9 64 01 00 00       	jmp    c001fe5f <Vm::x87Handler(regs*)+0xa14>
c001fcfb:	80 fa 01             	cmp    dl,0x1
c001fcfe:	75 11                	jne    c001fd11 <Vm::x87Handler(regs*)+0x8c6>
c001fd00:	50                   	push   eax
c001fd01:	50                   	push   eax
c001fd02:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd05:	ff 36                	push   DWORD PTR [esi]
c001fd07:	e8 96 f3 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fd0c:	e9 35 01 00 00       	jmp    c001fe46 <Vm::x87Handler(regs*)+0x9fb>
c001fd11:	80 fa 02             	cmp    dl,0x2
c001fd14:	0f 85 54 f9 ff ff    	jne    c001f66e <Vm::x87Handler(regs*)+0x223>
c001fd1a:	55                   	push   ebp
c001fd1b:	55                   	push   ebp
c001fd1c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd1f:	ff 36                	push   DWORD PTR [esi]
c001fd21:	e8 7c f3 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fd26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2d:	89 c6                	mov    esi,eax
c001fd2f:	89 d7                	mov    edi,edx
c001fd31:	e8 d8 f5 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fd36:	57                   	push   edi
c001fd37:	56                   	push   esi
c001fd38:	52                   	push   edx
c001fd39:	50                   	push   eax
c001fd3a:	e8 f2 f4 ff ff       	call   c001f231 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd43:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd46:	83 c4 20             	add    esp,0x20
c001fd49:	e9 74 f7 ff ff       	jmp    c001f4c2 <Vm::x87Handler(regs*)+0x77>
c001fd4e:	80 fa 04             	cmp    dl,0x4
c001fd51:	75 2a                	jne    c001fd7d <Vm::x87Handler(regs*)+0x932>
c001fd53:	51                   	push   ecx
c001fd54:	51                   	push   ecx
c001fd55:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd58:	ff 36                	push   DWORD PTR [esi]
c001fd5a:	e8 43 f3 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fd5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd66:	89 c6                	mov    esi,eax
c001fd68:	89 d7                	mov    edi,edx
c001fd6a:	e8 9f f5 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fd6f:	57                   	push   edi
c001fd70:	56                   	push   esi
c001fd71:	52                   	push   edx
c001fd72:	50                   	push   eax
c001fd73:	e8 36 f5 ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd78:	e9 e2 00 00 00       	jmp    c001fe5f <Vm::x87Handler(regs*)+0xa14>
c001fd7d:	80 fa 05             	cmp    dl,0x5
c001fd80:	75 28                	jne    c001fdaa <Vm::x87Handler(regs*)+0x95f>
c001fd82:	83 ec 0c             	sub    esp,0xc
c001fd85:	6a 00                	push   0x0
c001fd87:	e8 82 f5 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fd8c:	89 c7                	mov    edi,eax
c001fd8e:	89 d5                	mov    ebp,edx
c001fd90:	58                   	pop    eax
c001fd91:	5a                   	pop    edx
c001fd92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd95:	ff 36                	push   DWORD PTR [esi]
c001fd97:	e8 06 f3 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fd9c:	83 c4 10             	add    esp,0x10
c001fd9f:	55                   	push   ebp
c001fda0:	57                   	push   edi
c001fda1:	52                   	push   edx
c001fda2:	50                   	push   eax
c001fda3:	e8 06 f5 ff ff       	call   c001f2ae <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fda8:	eb 60                	jmp    c001fe0a <Vm::x87Handler(regs*)+0x9bf>
c001fdaa:	80 fa 06             	cmp    dl,0x6
c001fdad:	75 2a                	jne    c001fdd9 <Vm::x87Handler(regs*)+0x98e>
c001fdaf:	51                   	push   ecx
c001fdb0:	51                   	push   ecx
c001fdb1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb4:	ff 36                	push   DWORD PTR [esi]
c001fdb6:	e8 e7 f2 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fdbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc2:	89 c6                	mov    esi,eax
c001fdc4:	89 d7                	mov    edi,edx
c001fdc6:	e8 43 f5 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fdcb:	57                   	push   edi
c001fdcc:	56                   	push   esi
c001fdcd:	52                   	push   edx
c001fdce:	50                   	push   eax
c001fdcf:	e8 08 f5 ff ff       	call   c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdd4:	e9 86 00 00 00       	jmp    c001fe5f <Vm::x87Handler(regs*)+0xa14>
c001fdd9:	31 c0                	xor    eax,eax
c001fddb:	80 fa 07             	cmp    dl,0x7
c001fdde:	0f 85 c8 00 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	6a 00                	push   0x0
c001fde9:	e8 20 f5 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fdee:	89 c7                	mov    edi,eax
c001fdf0:	89 d5                	mov    ebp,edx
c001fdf2:	58                   	pop    eax
c001fdf3:	5a                   	pop    edx
c001fdf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdf7:	ff 36                	push   DWORD PTR [esi]
c001fdf9:	e8 a4 f2 ff ff       	call   c001f0a2 <Vm::fpu64ToInternal(unsigned long long)>
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	55                   	push   ebp
c001fe02:	57                   	push   edi
c001fe03:	52                   	push   edx
c001fe04:	50                   	push   eax
c001fe05:	e8 d2 f4 ff ff       	call   c001f2dc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe0a:	83 c4 0c             	add    esp,0xc
c001fe0d:	eb 53                	jmp    c001fe62 <Vm::x87Handler(regs*)+0xa17>
c001fe0f:	31 c0                	xor    eax,eax
c001fe11:	80 fa 02             	cmp    dl,0x2
c001fe14:	0f 85 92 00 00 00    	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	6a 00                	push   0x0
c001fe1f:	e8 ea f4 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fe24:	59                   	pop    ecx
c001fe25:	5f                   	pop    edi
c001fe26:	52                   	push   edx
c001fe27:	50                   	push   eax
c001fe28:	e8 27 f2 ff ff       	call   c001f054 <Vm::fpuInternalTo64(unsigned long long)>
c001fe2d:	eb 70                	jmp    c001fe9f <Vm::x87Handler(regs*)+0xa54>
c001fe2f:	31 c0                	xor    eax,eax
c001fe31:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fe36:	75 74                	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fe38:	50                   	push   eax
c001fe39:	50                   	push   eax
c001fe3a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fe3d:	31 d2                	xor    edx,edx
c001fe3f:	52                   	push   edx
c001fe40:	50                   	push   eax
c001fe41:	e8 f6 f2 ff ff       	call   c001f13c <Vm::fpuLongToFloat(long long)>
c001fe46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe4d:	89 c6                	mov    esi,eax
c001fe4f:	89 d7                	mov    edi,edx
c001fe51:	e8 b8 f4 ff ff       	call   c001f30e <Vm::fpuGetReg(int)>
c001fe56:	57                   	push   edi
c001fe57:	56                   	push   esi
c001fe58:	52                   	push   edx
c001fe59:	50                   	push   eax
c001fe5a:	e8 5e f4 ff ff       	call   c001f2bd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe5f:	83 c4 1c             	add    esp,0x1c
c001fe62:	52                   	push   edx
c001fe63:	50                   	push   eax
c001fe64:	6a 00                	push   0x0
c001fe66:	e8 e6 f4 ff ff       	call   c001f351 <Vm::fpuSetReg(int, unsigned long long)>
c001fe6b:	e9 f2 f7 ff ff       	jmp    c001f662 <Vm::x87Handler(regs*)+0x217>
c001fe70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe74:	80 fa 05             	cmp    dl,0x5
c001fe77:	75 11                	jne    c001fe8a <Vm::x87Handler(regs*)+0xa3f>
c001fe79:	55                   	push   ebp
c001fe7a:	55                   	push   ebp
c001fe7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe7e:	ff 36                	push   DWORD PTR [esi]
c001fe80:	e8 81 f2 ff ff       	call   c001f106 <Vm::fpuULongToFloat(unsigned long long)>
c001fe85:	e9 cf f7 ff ff       	jmp    c001f659 <Vm::x87Handler(regs*)+0x20e>
c001fe8a:	31 c0                	xor    eax,eax
c001fe8c:	80 fa 07             	cmp    dl,0x7
c001fe8f:	75 1b                	jne    c001feac <Vm::x87Handler(regs*)+0xa61>
c001fe91:	e8 63 f5 ff ff       	call   c001f3f9 <Vm::fpuPop()>
c001fe96:	51                   	push   ecx
c001fe97:	51                   	push   ecx
c001fe98:	52                   	push   edx
c001fe99:	50                   	push   eax
c001fe9a:	e8 0c f2 ff ff       	call   c001f0ab <Vm::fpuFloatToLong(unsigned long long)>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	89 06                	mov    DWORD PTR [esi],eax
c001fea4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fea7:	e9 f8 f7 ff ff       	jmp    c001f6a4 <Vm::x87Handler(regs*)+0x259>
c001feac:	83 c4 1c             	add    esp,0x1c
c001feaf:	5b                   	pop    ebx
c001feb0:	5e                   	pop    esi
c001feb1:	5f                   	pop    edi
c001feb2:	5d                   	pop    ebp
c001feb3:	c3                   	ret    

c001feb4 <__static_initialization_and_destruction_0(int, int)>:
c001feb4:	83 ec 0c             	sub    esp,0xc
c001feb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001febc:	75 1a                	jne    c001fed8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001febe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fec6:	75 10                	jne    c001fed8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	68 60 10 03 c0       	push   0xc0031060
c001fed0:	e8 05 8d 00 00       	call   c0028bda <Vm::_FPUState::_FPUState()>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	90                   	nop
c001fed9:	83 c4 0c             	add    esp,0xc
c001fedc:	c3                   	ret    

c001fedd <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fedd:	83 ec 0c             	sub    esp,0xc
c001fee0:	83 ec 08             	sub    esp,0x8
c001fee3:	68 ff ff 00 00       	push   0xffff
c001fee8:	6a 01                	push   0x1
c001feea:	e8 c5 ff ff ff       	call   c001feb4 <__static_initialization_and_destruction_0(int, int)>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	83 c4 0c             	add    esp,0xc
c001fef5:	c3                   	ret    

c001fef6 <FAT::getName()>:
c001fef6:	b8 50 bf 02 c0       	mov    eax,0xc002bf50
c001fefb:	c3                   	ret    

c001fefc <FAT::tell(void*, unsigned long long*)>:
c001fefc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff01:	75 06                	jne    c001ff09 <FAT::tell(void*, unsigned long long*)+0xd>
c001ff03:	b8 04 00 00 00       	mov    eax,0x4
c001ff08:	c3                   	ret    
c001ff09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff0e:	75 06                	jne    c001ff16 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ff10:	b8 04 00 00 00       	mov    eax,0x4
c001ff15:	c3                   	ret    
c001ff16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff1a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ff1d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ff20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff24:	89 01                	mov    DWORD PTR [ecx],eax
c001ff26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ff29:	b8 00 00 00 00       	mov    eax,0x0
c001ff2e:	c3                   	ret    
c001ff2f:	90                   	nop

c001ff30 <FAT::stat(void*, unsigned long long*)>:
c001ff30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff35:	75 06                	jne    c001ff3d <FAT::stat(void*, unsigned long long*)+0xd>
c001ff37:	b8 04 00 00 00       	mov    eax,0x4
c001ff3c:	c3                   	ret    
c001ff3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff42:	75 06                	jne    c001ff4a <FAT::stat(void*, unsigned long long*)+0x1a>
c001ff44:	b8 04 00 00 00       	mov    eax,0x4
c001ff49:	c3                   	ret    
c001ff4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ff51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ff54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff58:	89 01                	mov    DWORD PTR [ecx],eax
c001ff5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ff5d:	b8 00 00 00 00       	mov    eax,0x0
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <FAT::~FAT()>:
c001ff64:	83 ec 0c             	sub    esp,0xc
c001ff67:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c001ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff70:	89 10                	mov    DWORD PTR [eax],edx
c001ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	50                   	push   eax
c001ff7a:	e8 3f 2b ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	90                   	nop
c001ff83:	83 c4 0c             	add    esp,0xc
c001ff86:	c3                   	ret    
c001ff87:	90                   	nop

c001ff88 <FAT::~FAT()>:
c001ff88:	83 ec 0c             	sub    esp,0xc
c001ff8b:	83 ec 0c             	sub    esp,0xc
c001ff8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff92:	e8 cd ff ff ff       	call   c001ff64 <FAT::~FAT()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	83 ec 08             	sub    esp,0x8
c001ff9d:	6a 08                	push   0x8
c001ff9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa3:	e8 0f 27 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c001ffa8:	83 c4 10             	add    esp,0x10
c001ffab:	83 c4 0c             	add    esp,0xc
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop

c001ffb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ffb0:	83 ec 1c             	sub    esp,0x1c
c001ffb3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ffba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ffbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffc3:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c001ffca:	83 f8 ff             	cmp    eax,0xffffffff
c001ffcd:	75 34                	jne    c0020003 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ffcf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ffd3:	88 c2                	mov    dl,al
c001ffd5:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c001ffda:	01 d0                	add    eax,edx
c001ffdc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ffe0:	8b 15 c0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310c0
c001ffe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffea:	89 14 85 e0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef20],edx
c001fff1:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c001fff6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fffa:	89 14 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],edx
c0020001:	eb 17                	jmp    c002001a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020003:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020007:	88 c2                	mov    dl,al
c0020009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002000d:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c0020014:	01 d0                	add    eax,edx
c0020016:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002001a:	83 ec 04             	sub    esp,0x4
c002001d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020021:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020025:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020029:	50                   	push   eax
c002002a:	e8 cf 6c fe ff       	call   c0006cfe <f_getlabel>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020036:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002003b:	75 07                	jne    c0020044 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002003d:	b8 00 00 00 00       	mov    eax,0x0
c0020042:	eb 05                	jmp    c0020049 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020044:	b8 01 00 00 00       	mov    eax,0x1
c0020049:	83 c4 1c             	add    esp,0x1c
c002004c:	c3                   	ret    
c002004d:	90                   	nop

c002004e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002004e:	57                   	push   edi
c002004f:	83 ec 58             	sub    esp,0x58
c0020052:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002005a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002005e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020063:	b8 00 00 00 00       	mov    eax,0x0
c0020068:	fc                   	cld    
c0020069:	89 d7                	mov    edi,edx
c002006b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002006d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020071:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c0020078:	83 f8 ff             	cmp    eax,0xffffffff
c002007b:	75 34                	jne    c00200b1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002007d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020081:	88 c2                	mov    dl,al
c0020083:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0020088:	01 d0                	add    eax,edx
c002008a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002008e:	8b 15 c0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310c0
c0020094:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020098:	89 14 85 e0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef20],edx
c002009f:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c00200a4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00200a8:	89 14 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],edx
c00200af:	eb 17                	jmp    c00200c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00200b1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200b5:	88 c2                	mov    dl,al
c00200b7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00200bb:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c00200c2:	01 d0                	add    eax,edx
c00200c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00200c8:	83 ec 08             	sub    esp,0x8
c00200cb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00200cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200d3:	50                   	push   eax
c00200d4:	e8 73 08 fe ff       	call   c000094c <strcat>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200e3:	50                   	push   eax
c00200e4:	e8 03 6e fe ff       	call   c0006eec <f_setlabel>
c00200e9:	83 c4 10             	add    esp,0x10
c00200ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00200f0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00200f5:	75 07                	jne    c00200fe <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00200f7:	b8 00 00 00 00       	mov    eax,0x0
c00200fc:	eb 05                	jmp    c0020103 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00200fe:	b8 01 00 00 00       	mov    eax,0x1
c0020103:	83 c4 58             	add    esp,0x58
c0020106:	5f                   	pop    edi
c0020107:	c3                   	ret    

c0020108 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020108:	83 ec 2c             	sub    esp,0x2c
c002010b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020113:	83 ec 08             	sub    esp,0x8
c0020116:	68 74 bf 02 c0       	push   0xc002bf74
c002011b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002011f:	e8 74 07 fe ff       	call   c0000898 <strcmp>
c0020124:	83 c4 10             	add    esp,0x10
c0020127:	85 c0                	test   eax,eax
c0020129:	0f 94 c0             	sete   al
c002012c:	84 c0                	test   al,al
c002012e:	74 0d                	je     c002013d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020130:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020138:	e9 a6 00 00 00       	jmp    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002013d:	83 ec 08             	sub    esp,0x8
c0020140:	68 66 bf 02 c0       	push   0xc002bf66
c0020145:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020149:	e8 4a 07 fe ff       	call   c0000898 <strcmp>
c002014e:	83 c4 10             	add    esp,0x10
c0020151:	85 c0                	test   eax,eax
c0020153:	0f 94 c0             	sete   al
c0020156:	84 c0                	test   al,al
c0020158:	74 0a                	je     c0020164 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002015a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020162:	eb 7f                	jmp    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020164:	83 ec 08             	sub    esp,0x8
c0020167:	68 6c bf 02 c0       	push   0xc002bf6c
c002016c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020170:	e8 23 07 fe ff       	call   c0000898 <strcmp>
c0020175:	83 c4 10             	add    esp,0x10
c0020178:	85 c0                	test   eax,eax
c002017a:	0f 94 c0             	sete   al
c002017d:	84 c0                	test   al,al
c002017f:	74 0a                	je     c002018b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020181:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020189:	eb 58                	jmp    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002018b:	83 ec 08             	sub    esp,0x8
c002018e:	68 4c 93 02 c0       	push   0xc002934c
c0020193:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020197:	e8 fc 06 fe ff       	call   c0000898 <strcmp>
c002019c:	83 c4 10             	add    esp,0x10
c002019f:	85 c0                	test   eax,eax
c00201a1:	0f 94 c0             	sete   al
c00201a4:	84 c0                	test   al,al
c00201a6:	74 0a                	je     c00201b2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00201a8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00201b0:	eb 31                	jmp    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201b2:	83 ec 08             	sub    esp,0x8
c00201b5:	68 72 bf 02 c0       	push   0xc002bf72
c00201ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201be:	e8 d5 06 fe ff       	call   c0000898 <strcmp>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	85 c0                	test   eax,eax
c00201c8:	0f 94 c0             	sete   al
c00201cb:	84 c0                	test   al,al
c00201cd:	74 0a                	je     c00201d9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00201cf:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00201d7:	eb 0a                	jmp    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201d9:	b8 08 00 00 00       	mov    eax,0x8
c00201de:	e9 df 00 00 00       	jmp    c00202c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201e3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00201ea:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00201ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201f3:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c00201fa:	83 f8 ff             	cmp    eax,0xffffffff
c00201fd:	75 34                	jne    c0020233 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00201ff:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020203:	88 c2                	mov    dl,al
c0020205:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c002020a:	01 d0                	add    eax,edx
c002020c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020210:	8b 15 c0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310c0
c0020216:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002021a:	89 14 85 e0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef20],edx
c0020221:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0020226:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002022a:	89 14 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],edx
c0020231:	eb 17                	jmp    c002024a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020233:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020237:	88 c2                	mov    dl,al
c0020239:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002023d:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c0020244:	01 d0                	add    eax,edx
c0020246:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002024a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002024e:	88 04 24             	mov    BYTE PTR [esp],al
c0020251:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020255:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020259:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020261:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020266:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	68 00 20 00 00       	push   0x2000
c0020276:	e8 1e f3 fe ff       	call   c000f599 <malloc>
c002027b:	83 c4 10             	add    esp,0x10
c002027e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020282:	68 00 20 00 00       	push   0x2000
c0020287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002028f:	50                   	push   eax
c0020290:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020294:	50                   	push   eax
c0020295:	e8 9d 70 fe ff       	call   c0007337 <f_mkfs>
c002029a:	83 c4 10             	add    esp,0x10
c002029d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202a1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00202a6:	75 07                	jne    c00202af <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00202a8:	b8 00 00 00 00       	mov    eax,0x0
c00202ad:	eb 13                	jmp    c00202c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00202af:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00202b4:	75 07                	jne    c00202bd <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00202b6:	b8 09 00 00 00       	mov    eax,0x9
c00202bb:	eb 05                	jmp    c00202c2 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00202bd:	b8 01 00 00 00       	mov    eax,0x1
c00202c2:	83 c4 2c             	add    esp,0x2c
c00202c5:	c3                   	ret    

c00202c6 <FAT::tryMount(LogicalDisk*, int)>:
c00202c6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00202cc:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c00202d1:	83 f8 14             	cmp    eax,0x14
c00202d4:	75 17                	jne    c00202ed <FAT::tryMount(LogicalDisk*, int)+0x27>
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	68 78 bf 02 c0       	push   0xc002bf78
c00202de:	e8 18 9c ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	b0 00                	mov    al,0x0
c00202e8:	e9 d7 01 00 00       	jmp    c00204c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202ed:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00202f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00202fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020300:	3d 00 02 00 00       	cmp    eax,0x200
c0020305:	74 07                	je     c002030e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020307:	b0 00                	mov    al,0x0
c0020309:	e9 b6 01 00 00       	jmp    c00204c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002030e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020316:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002031d:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c0020324:	83 f8 ff             	cmp    eax,0xffffffff
c0020327:	74 07                	je     c0020330 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020329:	b0 01                	mov    al,0x1
c002032b:	e9 94 01 00 00       	jmp    c00204c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020330:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002033a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020342:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020349:	88 c2                	mov    dl,al
c002034b:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0020350:	01 d0                	add    eax,edx
c0020352:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020359:	8b 15 c0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310c0
c002035f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020366:	89 14 85 e0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef20],edx
c002036d:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0020372:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020379:	89 14 85 60 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceea0],edx
c0020380:	83 ec 0c             	sub    esp,0xc
c0020383:	68 54 02 00 00       	push   0x254
c0020388:	e8 0c f2 fe ff       	call   c000f599 <malloc>
c002038d:	83 c4 10             	add    esp,0x10
c0020390:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020397:	83 ec 04             	sub    esp,0x4
c002039a:	6a 00                	push   0x0
c002039c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203a3:	50                   	push   eax
c00203a4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203ab:	e8 45 4b fe ff       	call   c0004ef5 <f_mount>
c00203b0:	83 c4 10             	add    esp,0x10
c00203b3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203ba:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00203c2:	74 19                	je     c00203dd <FAT::tryMount(LogicalDisk*, int)+0x117>
c00203c4:	83 ec 0c             	sub    esp,0xc
c00203c7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203ce:	e8 e6 f1 fe ff       	call   c000f5b9 <rfree>
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	b0 00                	mov    al,0x0
c00203d8:	e9 e7 00 00 00       	jmp    c00204c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203dd:	83 ec 04             	sub    esp,0x4
c00203e0:	68 00 01 00 00       	push   0x100
c00203e5:	6a 00                	push   0x0
c00203e7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203ee:	50                   	push   eax
c00203ef:	e8 5c 03 fe ff       	call   c0000750 <memset>
c00203f4:	83 c4 10             	add    esp,0x10
c00203f7:	83 ec 08             	sub    esp,0x8
c00203fa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020401:	50                   	push   eax
c0020402:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020409:	50                   	push   eax
c002040a:	e8 3d 05 fe ff       	call   c000094c <strcat>
c002040f:	83 c4 10             	add    esp,0x10
c0020412:	83 ec 08             	sub    esp,0x8
c0020415:	68 86 bf 02 c0       	push   0xc002bf86
c002041a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020421:	50                   	push   eax
c0020422:	e8 25 05 fe ff       	call   c000094c <strcat>
c0020427:	83 c4 10             	add    esp,0x10
c002042a:	83 ec 04             	sub    esp,0x4
c002042d:	6a 01                	push   0x1
c002042f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020436:	50                   	push   eax
c0020437:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002043b:	50                   	push   eax
c002043c:	e8 16 4b fe ff       	call   c0004f57 <f_open>
c0020441:	83 c4 10             	add    esp,0x10
c0020444:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002044b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020452:	85 c0                	test   eax,eax
c0020454:	74 0a                	je     c0020460 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020456:	78 2d                	js     c0020485 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020458:	83 e8 04             	sub    eax,0x4
c002045b:	83 f8 01             	cmp    eax,0x1
c002045e:	77 25                	ja     c0020485 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020460:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020468:	83 ec 0c             	sub    esp,0xc
c002046b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002046f:	50                   	push   eax
c0020470:	e8 34 56 fe ff       	call   c0005aa9 <f_close>
c0020475:	83 c4 10             	add    esp,0x10
c0020478:	90                   	nop
c0020479:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020481:	74 3a                	je     c00204bd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020483:	eb 2d                	jmp    c00204b2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020485:	83 ec 0c             	sub    esp,0xc
c0020488:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002048f:	e8 25 f1 fe ff       	call   c000f5b9 <rfree>
c0020494:	83 c4 10             	add    esp,0x10
c0020497:	83 ec 04             	sub    esp,0x4
c002049a:	6a 00                	push   0x0
c002049c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00204a3:	50                   	push   eax
c00204a4:	6a 00                	push   0x0
c00204a6:	e8 4a 4a fe ff       	call   c0004ef5 <f_mount>
c00204ab:	83 c4 10             	add    esp,0x10
c00204ae:	b0 00                	mov    al,0x0
c00204b0:	eb 12                	jmp    c00204c4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00204b2:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c00204b7:	40                   	inc    eax
c00204b8:	a3 c0 10 03 c0       	mov    ds:0xc00310c0,eax
c00204bd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00204c4:	81 c4 6c 03 00 00    	add    esp,0x36c
c00204ca:	c3                   	ret    
c00204cb:	90                   	nop

c00204cc <FAT::getFileFirstSector(char const*)>:
c00204cc:	53                   	push   ebx
c00204cd:	83 ec 28             	sub    esp,0x28
c00204d0:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00204d8:	83 ec 0c             	sub    esp,0xc
c00204db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204df:	e8 b5 f0 fe ff       	call   c000f599 <malloc>
c00204e4:	83 c4 10             	add    esp,0x10
c00204e7:	89 c3                	mov    ebx,eax
c00204e9:	a1 f0 0f 03 c0       	mov    eax,ds:0xc0030ff0
c00204ee:	83 ec 04             	sub    esp,0x4
c00204f1:	50                   	push   eax
c00204f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204f6:	53                   	push   ebx
c00204f7:	e8 f2 27 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c00204fc:	83 c4 10             	add    esp,0x10
c00204ff:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020503:	83 ec 08             	sub    esp,0x8
c0020506:	6a 01                	push   0x1
c0020508:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002050c:	e8 41 28 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c0020511:	83 c4 10             	add    esp,0x10
c0020514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020518:	8b 00                	mov    eax,DWORD PTR [eax]
c002051a:	83 c0 0c             	add    eax,0xc
c002051d:	8b 00                	mov    eax,DWORD PTR [eax]
c002051f:	83 ec 0c             	sub    esp,0xc
c0020522:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020526:	52                   	push   edx
c0020527:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002052b:	52                   	push   edx
c002052c:	6a 00                	push   0x0
c002052e:	6a 04                	push   0x4
c0020530:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020534:	ff d0                	call   eax
c0020536:	83 c4 20             	add    esp,0x20
c0020539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002053d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020543:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020547:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002054b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002054e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020551:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020555:	83 ec 0c             	sub    esp,0xc
c0020558:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002055c:	e8 4f 28 ff ff       	call   c0012db0 <File::close()>
c0020561:	83 c4 10             	add    esp,0x10
c0020564:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020568:	ba 00 00 00 00       	mov    edx,0x0
c002056d:	83 c4 28             	add    esp,0x28
c0020570:	5b                   	pop    ebx
c0020571:	c3                   	ret    

c0020572 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020572:	57                   	push   edi
c0020573:	56                   	push   esi
c0020574:	53                   	push   ebx
c0020575:	81 ec 50 02 00 00    	sub    esp,0x250
c002057b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020583:	74 0a                	je     c002058f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020585:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002058d:	75 0a                	jne    c0020599 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002058f:	b8 04 00 00 00       	mov    eax,0x4
c0020594:	e9 29 01 00 00       	jmp    c00206c2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020599:	83 ec 08             	sub    esp,0x8
c002059c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00205a3:	50                   	push   eax
c00205a4:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00205ab:	e8 03 5b fe ff       	call   c00060b3 <f_readdir>
c00205b0:	83 c4 10             	add    esp,0x10
c00205b3:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00205ba:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00205c1:	83 ec 0c             	sub    esp,0xc
c00205c4:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00205cb:	83 c0 1a             	add    eax,0x1a
c00205ce:	50                   	push   eax
c00205cf:	e8 98 01 fe ff       	call   c000076c <strlen>
c00205d4:	83 c4 10             	add    esp,0x10
c00205d7:	ba 00 00 00 00       	mov    edx,0x0
c00205dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00205e4:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00205eb:	0f b6 c0             	movzx  eax,al
c00205ee:	83 e0 10             	and    eax,0x10
c00205f1:	74 07                	je     c00205fa <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00205f3:	b8 02 00 00 00       	mov    eax,0x2
c00205f8:	eb 05                	jmp    c00205ff <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00205fa:	b8 01 00 00 00       	mov    eax,0x1
c00205ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020603:	83 ec 08             	sub    esp,0x8
c0020606:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002060d:	83 c0 1a             	add    eax,0x1a
c0020610:	50                   	push   eax
c0020611:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020615:	83 c0 10             	add    eax,0x10
c0020618:	50                   	push   eax
c0020619:	e8 ee 01 fe ff       	call   c000080c <strcpy>
c002061e:	83 c4 10             	add    esp,0x10
c0020621:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020628:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002062f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020633:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002063a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020641:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020648:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002064f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020656:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002065d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020664:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002066b:	89 c6                	mov    esi,eax
c002066d:	89 d7                	mov    edi,edx
c002066f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020671:	89 c8                	mov    eax,ecx
c0020673:	89 fa                	mov    edx,edi
c0020675:	89 f3                	mov    ebx,esi
c0020677:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002067e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020685:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002068c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020693:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020699:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00206a0:	84 c0                	test   al,al
c00206a2:	75 07                	jne    c00206ab <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00206a4:	b8 07 00 00 00       	mov    eax,0x7
c00206a9:	eb 17                	jmp    c00206c2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00206ab:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00206b2:	85 c0                	test   eax,eax
c00206b4:	75 07                	jne    c00206bd <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00206b6:	b8 00 00 00 00       	mov    eax,0x0
c00206bb:	eb 05                	jmp    c00206c2 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00206bd:	b8 01 00 00 00       	mov    eax,0x1
c00206c2:	81 c4 50 02 00 00    	add    esp,0x250
c00206c8:	5b                   	pop    ebx
c00206c9:	5e                   	pop    esi
c00206ca:	5f                   	pop    edi
c00206cb:	c3                   	ret    

c00206cc <FAT::read(void*, unsigned long, void*, int*)>:
c00206cc:	83 ec 1c             	sub    esp,0x1c
c00206cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206d4:	74 07                	je     c00206dd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00206d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206db:	75 07                	jne    c00206e4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00206dd:	b8 04 00 00 00       	mov    eax,0x4
c00206e2:	eb 3d                	jmp    c0020721 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206e8:	50                   	push   eax
c00206e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206f5:	e8 99 4c fe ff       	call   c0005393 <f_read>
c00206fa:	83 c4 10             	add    esp,0x10
c00206fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020701:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020705:	89 c2                	mov    edx,eax
c0020707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002070b:	89 10                	mov    DWORD PTR [eax],edx
c002070d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020711:	85 c0                	test   eax,eax
c0020713:	75 07                	jne    c002071c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020715:	b8 00 00 00 00       	mov    eax,0x0
c002071a:	eb 05                	jmp    c0020721 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002071c:	b8 01 00 00 00       	mov    eax,0x1
c0020721:	83 c4 1c             	add    esp,0x1c
c0020724:	c3                   	ret    
c0020725:	90                   	nop

c0020726 <FAT::write(void*, unsigned long, void*, int*)>:
c0020726:	83 ec 1c             	sub    esp,0x1c
c0020729:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002072e:	74 07                	je     c0020737 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020730:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020735:	75 07                	jne    c002073e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020737:	b8 04 00 00 00       	mov    eax,0x4
c002073c:	eb 3d                	jmp    c002077b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002073e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020742:	50                   	push   eax
c0020743:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002074b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002074f:	e8 bf 4e fe ff       	call   c0005613 <f_write>
c0020754:	83 c4 10             	add    esp,0x10
c0020757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002075f:	89 c2                	mov    edx,eax
c0020761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020765:	89 10                	mov    DWORD PTR [eax],edx
c0020767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002076b:	85 c0                	test   eax,eax
c002076d:	75 07                	jne    c0020776 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002076f:	b8 00 00 00 00       	mov    eax,0x0
c0020774:	eb 05                	jmp    c002077b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020776:	b8 01 00 00 00       	mov    eax,0x1
c002077b:	83 c4 1c             	add    esp,0x1c
c002077e:	c3                   	ret    
c002077f:	90                   	nop

c0020780 <FAT::close(void*)>:
c0020780:	83 ec 1c             	sub    esp,0x1c
c0020783:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020788:	75 07                	jne    c0020791 <FAT::close(void*)+0x11>
c002078a:	b8 04 00 00 00       	mov    eax,0x4
c002078f:	eb 36                	jmp    c00207c7 <FAT::close(void*)+0x47>
c0020791:	83 ec 0c             	sub    esp,0xc
c0020794:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020798:	e8 0c 53 fe ff       	call   c0005aa9 <f_close>
c002079d:	83 c4 10             	add    esp,0x10
c00207a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207ab:	e8 f9 ed fe ff       	call   c000f5a9 <free>
c00207b0:	83 c4 10             	add    esp,0x10
c00207b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207b7:	85 c0                	test   eax,eax
c00207b9:	75 07                	jne    c00207c2 <FAT::close(void*)+0x42>
c00207bb:	b8 00 00 00 00       	mov    eax,0x0
c00207c0:	eb 05                	jmp    c00207c7 <FAT::close(void*)+0x47>
c00207c2:	b8 01 00 00 00       	mov    eax,0x1
c00207c7:	83 c4 1c             	add    esp,0x1c
c00207ca:	c3                   	ret    
c00207cb:	90                   	nop

c00207cc <FAT::closeDir(void*)>:
c00207cc:	83 ec 1c             	sub    esp,0x1c
c00207cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207d4:	75 07                	jne    c00207dd <FAT::closeDir(void*)+0x11>
c00207d6:	b8 04 00 00 00       	mov    eax,0x4
c00207db:	eb 36                	jmp    c0020813 <FAT::closeDir(void*)+0x47>
c00207dd:	83 ec 0c             	sub    esp,0xc
c00207e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207e4:	e8 a8 58 fe ff       	call   c0006091 <f_closedir>
c00207e9:	83 c4 10             	add    esp,0x10
c00207ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207f0:	83 ec 0c             	sub    esp,0xc
c00207f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207f7:	e8 ad ed fe ff       	call   c000f5a9 <free>
c00207fc:	83 c4 10             	add    esp,0x10
c00207ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020803:	85 c0                	test   eax,eax
c0020805:	75 07                	jne    c002080e <FAT::closeDir(void*)+0x42>
c0020807:	b8 00 00 00 00       	mov    eax,0x0
c002080c:	eb 05                	jmp    c0020813 <FAT::closeDir(void*)+0x47>
c002080e:	b8 01 00 00 00       	mov    eax,0x1
c0020813:	83 c4 1c             	add    esp,0x1c
c0020816:	c3                   	ret    
c0020817:	90                   	nop

c0020818 <FAT::seek(void*, unsigned long long)>:
c0020818:	83 ec 2c             	sub    esp,0x2c
c002081b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002081f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020823:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002082b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020830:	75 07                	jne    c0020839 <FAT::seek(void*, unsigned long long)+0x21>
c0020832:	b8 04 00 00 00       	mov    eax,0x4
c0020837:	eb 2f                	jmp    c0020868 <FAT::seek(void*, unsigned long long)+0x50>
c0020839:	83 ec 04             	sub    esp,0x4
c002083c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020840:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020844:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020848:	e8 8b 52 fe ff       	call   c0005ad8 <f_lseek>
c002084d:	83 c4 10             	add    esp,0x10
c0020850:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020854:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020858:	85 c0                	test   eax,eax
c002085a:	75 07                	jne    c0020863 <FAT::seek(void*, unsigned long long)+0x4b>
c002085c:	b8 00 00 00 00       	mov    eax,0x0
c0020861:	eb 05                	jmp    c0020868 <FAT::seek(void*, unsigned long long)+0x50>
c0020863:	b8 01 00 00 00       	mov    eax,0x1
c0020868:	83 c4 2c             	add    esp,0x2c
c002086b:	c3                   	ret    

c002086c <fatWrapperReadDisk>:
c002086c:	83 ec 1c             	sub    esp,0x1c
c002086f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020873:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020877:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002087b:	89 04 24             	mov    DWORD PTR [esp],eax
c002087e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020882:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020886:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002088b:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c0020892:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020896:	83 ec 0c             	sub    esp,0xc
c0020899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002089d:	52                   	push   edx
c002089e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208a6:	50                   	push   eax
c00208a7:	e8 38 58 ff ff       	call   c00160e4 <LogicalDisk::read(unsigned long long, int, void*)>
c00208ac:	83 c4 20             	add    esp,0x20
c00208af:	83 c4 1c             	add    esp,0x1c
c00208b2:	c3                   	ret    

c00208b3 <fatWrapperWriteDisk>:
c00208b3:	83 ec 1c             	sub    esp,0x1c
c00208b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00208c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00208c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00208c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208cd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208d2:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c00208d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00208dd:	83 ec 0c             	sub    esp,0xc
c00208e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208e4:	52                   	push   edx
c00208e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208ed:	50                   	push   eax
c00208ee:	e8 5d 58 ff ff       	call   c0016150 <LogicalDisk::write(unsigned long long, int, void*)>
c00208f3:	83 c4 20             	add    esp,0x20
c00208f6:	83 c4 1c             	add    esp,0x1c
c00208f9:	c3                   	ret    

c00208fa <fatWrapperIoctl>:
c00208fa:	53                   	push   ebx
c00208fb:	83 ec 28             	sub    esp,0x28
c00208fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020902:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020906:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002090a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002090e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020913:	75 31                	jne    c0020946 <fatWrapperIoctl+0x4c>
c0020915:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020919:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002091d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020922:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c0020929:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002092f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020935:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020939:	66 89 02             	mov    WORD PTR [edx],ax
c002093c:	b8 00 00 00 00       	mov    eax,0x0
c0020941:	e9 b2 00 00 00       	jmp    c00209f8 <fatWrapperIoctl+0xfe>
c0020946:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002094b:	75 6a                	jne    c00209b7 <fatWrapperIoctl+0xbd>
c002094d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020951:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020955:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002095a:	8b 04 85 a0 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f60]
c0020961:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020967:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002096d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020973:	89 c8                	mov    eax,ecx
c0020975:	89 da                	mov    edx,ebx
c0020977:	0f a4 c2 0a          	shld   edx,eax,0xa
c002097b:	c1 e0 0a             	shl    eax,0xa
c002097e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020983:	8b 0c 8d a0 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f60]
c002098a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020990:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020996:	89 cb                	mov    ebx,ecx
c0020998:	c1 fb 1f             	sar    ebx,0x1f
c002099b:	53                   	push   ebx
c002099c:	51                   	push   ecx
c002099d:	52                   	push   edx
c002099e:	50                   	push   eax
c002099f:	e8 30 5e 00 00       	call   c00267d4 <__udivdi3>
c00209a4:	83 c4 10             	add    esp,0x10
c00209a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00209ab:	89 01                	mov    DWORD PTR [ecx],eax
c00209ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00209b0:	b8 00 00 00 00       	mov    eax,0x0
c00209b5:	eb 41                	jmp    c00209f8 <fatWrapperIoctl+0xfe>
c00209b7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00209bc:	75 07                	jne    c00209c5 <fatWrapperIoctl+0xcb>
c00209be:	b8 00 00 00 00       	mov    eax,0x0
c00209c3:	eb 33                	jmp    c00209f8 <fatWrapperIoctl+0xfe>
c00209c5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00209ca:	75 19                	jne    c00209e5 <fatWrapperIoctl+0xeb>
c00209cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209d8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00209de:	b8 00 00 00 00       	mov    eax,0x0
c00209e3:	eb 13                	jmp    c00209f8 <fatWrapperIoctl+0xfe>
c00209e5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00209ea:	75 07                	jne    c00209f3 <fatWrapperIoctl+0xf9>
c00209ec:	b8 00 00 00 00       	mov    eax,0x0
c00209f1:	eb 05                	jmp    c00209f8 <fatWrapperIoctl+0xfe>
c00209f3:	b8 04 00 00 00       	mov    eax,0x4
c00209f8:	83 c4 28             	add    esp,0x28
c00209fb:	5b                   	pop    ebx
c00209fc:	c3                   	ret    
c00209fd:	90                   	nop

c00209fe <FAT::FAT()>:
c00209fe:	83 ec 1c             	sub    esp,0x1c
c0020a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a05:	83 ec 0c             	sub    esp,0xc
c0020a08:	50                   	push   eax
c0020a09:	e8 8c 20 ff ff       	call   c0012a9a <Filesystem::Filesystem()>
c0020a0e:	83 c4 10             	add    esp,0x10
c0020a11:	ba 9c bf 02 c0       	mov    edx,0xc002bf9c
c0020a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a1a:	89 10                	mov    DWORD PTR [eax],edx
c0020a1c:	c7 05 c0 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00310c0,0x0
c0020a26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020a2e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020a33:	7f 15                	jg     c0020a4a <FAT::FAT()+0x4c>
c0020a35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a39:	c7 04 85 e0 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcef20],0xffffffff
c0020a44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020a48:	eb e4                	jmp    c0020a2e <FAT::FAT()+0x30>
c0020a4a:	90                   	nop
c0020a4b:	83 c4 1c             	add    esp,0x1c
c0020a4e:	c3                   	ret    
c0020a4f:	90                   	nop

c0020a50 <FAT::fixFilepath(char*)>:
c0020a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a54:	8a 00                	mov    al,BYTE PTR [eax]
c0020a56:	3c 40                	cmp    al,0x40
c0020a58:	7e 2c                	jle    c0020a86 <FAT::fixFilepath(char*)+0x36>
c0020a5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a5e:	8a 00                	mov    al,BYTE PTR [eax]
c0020a60:	83 e8 41             	sub    eax,0x41
c0020a63:	88 c2                	mov    dl,al
c0020a65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a69:	88 10                	mov    BYTE PTR [eax],dl
c0020a6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a6f:	8a 00                	mov    al,BYTE PTR [eax]
c0020a71:	0f be c0             	movsx  eax,al
c0020a74:	8b 04 85 e0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef20]
c0020a7b:	83 c0 30             	add    eax,0x30
c0020a7e:	88 c2                	mov    dl,al
c0020a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a84:	88 10                	mov    BYTE PTR [eax],dl
c0020a86:	90                   	nop
c0020a87:	c3                   	ret    

c0020a88 <FAT::open(char const*, void**, FileOpenMode)>:
c0020a88:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a8e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a96:	74 0a                	je     c0020aa2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a98:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020aa0:	75 0a                	jne    c0020aac <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020aa2:	b8 04 00 00 00       	mov    eax,0x4
c0020aa7:	e9 fd 00 00 00       	jmp    c0020ba9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020aac:	83 ec 08             	sub    esp,0x8
c0020aaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020aba:	50                   	push   eax
c0020abb:	e8 4c fd fd ff       	call   c000080c <strcpy>
c0020ac0:	83 c4 10             	add    esp,0x10
c0020ac3:	83 ec 08             	sub    esp,0x8
c0020ac6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020aca:	50                   	push   eax
c0020acb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ad2:	e8 79 ff ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ae2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ae9:	83 e0 01             	and    eax,0x1
c0020aec:	74 08                	je     c0020af6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020aee:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020af6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020afd:	83 e0 04             	and    eax,0x4
c0020b00:	74 10                	je     c0020b12 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020b02:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020b0a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020b12:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b19:	83 e0 02             	and    eax,0x2
c0020b1c:	74 08                	je     c0020b26 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020b1e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020b26:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b2d:	83 e0 08             	and    eax,0x8
c0020b30:	74 08                	je     c0020b3a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020b32:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020b3a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b41:	83 e0 10             	and    eax,0x10
c0020b44:	74 08                	je     c0020b4e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020b46:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020b4e:	83 ec 0c             	sub    esp,0xc
c0020b51:	68 50 02 00 00       	push   0x250
c0020b56:	e8 3e ea fe ff       	call   c000f599 <malloc>
c0020b5b:	83 c4 10             	add    esp,0x10
c0020b5e:	89 c2                	mov    edx,eax
c0020b60:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b67:	89 10                	mov    DWORD PTR [eax],edx
c0020b69:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020b71:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b7a:	83 ec 04             	sub    esp,0x4
c0020b7d:	52                   	push   edx
c0020b7e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b82:	52                   	push   edx
c0020b83:	50                   	push   eax
c0020b84:	e8 ce 43 fe ff       	call   c0004f57 <f_open>
c0020b89:	83 c4 10             	add    esp,0x10
c0020b8c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b93:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b9b:	74 07                	je     c0020ba4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b9d:	b8 01 00 00 00       	mov    eax,0x1
c0020ba2:	eb 05                	jmp    c0020ba9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ba4:	b8 00 00 00 00       	mov    eax,0x0
c0020ba9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020baf:	c3                   	ret    

c0020bb0 <FAT::openDir(char const*, void**)>:
c0020bb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020bb6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020bbe:	74 0a                	je     c0020bca <FAT::openDir(char const*, void**)+0x1a>
c0020bc0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020bc8:	75 07                	jne    c0020bd1 <FAT::openDir(char const*, void**)+0x21>
c0020bca:	b8 04 00 00 00       	mov    eax,0x4
c0020bcf:	eb 7d                	jmp    c0020c4e <FAT::openDir(char const*, void**)+0x9e>
c0020bd1:	83 ec 08             	sub    esp,0x8
c0020bd4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bdf:	50                   	push   eax
c0020be0:	e8 27 fc fd ff       	call   c000080c <strcpy>
c0020be5:	83 c4 10             	add    esp,0x10
c0020be8:	83 ec 08             	sub    esp,0x8
c0020beb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bef:	50                   	push   eax
c0020bf0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bf7:	e8 54 fe ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020bfc:	83 c4 10             	add    esp,0x10
c0020bff:	83 ec 0c             	sub    esp,0xc
c0020c02:	6a 4c                	push   0x4c
c0020c04:	e8 90 e9 fe ff       	call   c000f599 <malloc>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	89 c2                	mov    edx,eax
c0020c0e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c15:	89 10                	mov    DWORD PTR [eax],edx
c0020c17:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c20:	83 ec 08             	sub    esp,0x8
c0020c23:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c27:	52                   	push   edx
c0020c28:	50                   	push   eax
c0020c29:	e8 61 53 fe ff       	call   c0005f8f <f_opendir>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c38:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020c40:	74 07                	je     c0020c49 <FAT::openDir(char const*, void**)+0x99>
c0020c42:	b8 01 00 00 00       	mov    eax,0x1
c0020c47:	eb 05                	jmp    c0020c4e <FAT::openDir(char const*, void**)+0x9e>
c0020c49:	b8 00 00 00 00       	mov    eax,0x0
c0020c4e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c54:	c3                   	ret    
c0020c55:	90                   	nop

c0020c56 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020c56:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c5c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020c64:	75 0a                	jne    c0020c70 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020c66:	b8 04 00 00 00       	mov    eax,0x4
c0020c6b:	e9 c9 00 00 00       	jmp    c0020d39 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c70:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020c78:	75 0a                	jne    c0020c84 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020c7a:	b8 04 00 00 00       	mov    eax,0x4
c0020c7f:	e9 b5 00 00 00       	jmp    c0020d39 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c84:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020c8c:	75 0a                	jne    c0020c98 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020c8e:	b8 04 00 00 00       	mov    eax,0x4
c0020c93:	e9 a1 00 00 00       	jmp    c0020d39 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c98:	83 ec 08             	sub    esp,0x8
c0020c9b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ca2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020ca9:	50                   	push   eax
c0020caa:	e8 5d fb fd ff       	call   c000080c <strcpy>
c0020caf:	83 c4 10             	add    esp,0x10
c0020cb2:	83 ec 08             	sub    esp,0x8
c0020cb5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020cbc:	50                   	push   eax
c0020cbd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020cc4:	e8 87 fd ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020cc9:	83 c4 10             	add    esp,0x10
c0020ccc:	83 ec 08             	sub    esp,0x8
c0020ccf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd3:	50                   	push   eax
c0020cd4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020cdb:	50                   	push   eax
c0020cdc:	e8 6d 54 fe ff       	call   c000614e <f_stat>
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ceb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cf2:	85 c0                	test   eax,eax
c0020cf4:	74 07                	je     c0020cfd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020cf6:	83 f8 04             	cmp    eax,0x4
c0020cf9:	74 32                	je     c0020d2d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020cfb:	eb 37                	jmp    c0020d34 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020cfd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d01:	0f b6 c0             	movzx  eax,al
c0020d04:	83 e0 10             	and    eax,0x10
c0020d07:	0f 95 c2             	setne  dl
c0020d0a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020d11:	88 10                	mov    BYTE PTR [eax],dl
c0020d13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020d1a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020d21:	89 01                	mov    DWORD PTR [ecx],eax
c0020d23:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d26:	b8 00 00 00 00       	mov    eax,0x0
c0020d2b:	eb 0c                	jmp    c0020d39 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d2d:	b8 02 00 00 00       	mov    eax,0x2
c0020d32:	eb 05                	jmp    c0020d39 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d34:	b8 01 00 00 00       	mov    eax,0x1
c0020d39:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020d3f:	c3                   	ret    

c0020d40 <FAT::unlink(char const*)>:
c0020d40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d4e:	75 07                	jne    c0020d57 <FAT::unlink(char const*)+0x17>
c0020d50:	b8 04 00 00 00       	mov    eax,0x4
c0020d55:	eb 5c                	jmp    c0020db3 <FAT::unlink(char const*)+0x73>
c0020d57:	83 ec 08             	sub    esp,0x8
c0020d5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d65:	50                   	push   eax
c0020d66:	e8 a1 fa fd ff       	call   c000080c <strcpy>
c0020d6b:	83 c4 10             	add    esp,0x10
c0020d6e:	83 ec 08             	sub    esp,0x8
c0020d71:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d75:	50                   	push   eax
c0020d76:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d7d:	e8 ce fc ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020d82:	83 c4 10             	add    esp,0x10
c0020d85:	83 ec 0c             	sub    esp,0xc
c0020d88:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d8c:	50                   	push   eax
c0020d8d:	e8 0e 57 fe ff       	call   c00064a0 <f_unlink>
c0020d92:	83 c4 10             	add    esp,0x10
c0020d95:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d9c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020da3:	85 c0                	test   eax,eax
c0020da5:	75 07                	jne    c0020dae <FAT::unlink(char const*)+0x6e>
c0020da7:	b8 00 00 00 00       	mov    eax,0x0
c0020dac:	eb 05                	jmp    c0020db3 <FAT::unlink(char const*)+0x73>
c0020dae:	b8 01 00 00 00       	mov    eax,0x1
c0020db3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020db9:	c3                   	ret    

c0020dba <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020dba:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020dc0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020dc7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020dce:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020dd2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020dd6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020dde:	75 0a                	jne    c0020dea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020de0:	b8 04 00 00 00       	mov    eax,0x4
c0020de5:	e9 1c 01 00 00       	jmp    c0020f06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020dea:	83 ec 08             	sub    esp,0x8
c0020ded:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020df8:	50                   	push   eax
c0020df9:	e8 0e fa fd ff       	call   c000080c <strcpy>
c0020dfe:	83 c4 10             	add    esp,0x10
c0020e01:	83 ec 08             	sub    esp,0x8
c0020e04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020e08:	50                   	push   eax
c0020e09:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e10:	e8 3b fc ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020e15:	83 c4 10             	add    esp,0x10
c0020e18:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020e20:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020e28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e2d:	83 e0 01             	and    eax,0x1
c0020e30:	74 08                	je     c0020e3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020e32:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020e3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e3f:	83 e0 02             	and    eax,0x2
c0020e42:	74 08                	je     c0020e4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020e44:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020e4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e51:	83 e0 04             	and    eax,0x4
c0020e54:	74 08                	je     c0020e5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020e56:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020e5e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e63:	83 e0 08             	and    eax,0x8
c0020e66:	74 08                	je     c0020e70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020e68:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020e70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e75:	83 e0 01             	and    eax,0x1
c0020e78:	74 08                	je     c0020e82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020e7a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020e82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e87:	83 e0 02             	and    eax,0x2
c0020e8a:	74 08                	je     c0020e94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020e8c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e99:	83 e0 04             	and    eax,0x4
c0020e9c:	74 08                	je     c0020ea6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e9e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020ea6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eab:	83 e0 08             	and    eax,0x8
c0020eae:	74 08                	je     c0020eb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020eb0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020eb8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020ebf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020ec6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020ece:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020ed6:	83 ec 04             	sub    esp,0x4
c0020ed9:	52                   	push   edx
c0020eda:	50                   	push   eax
c0020edb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020edf:	50                   	push   eax
c0020ee0:	e8 5d 5c fe ff       	call   c0006b42 <f_chmod>
c0020ee5:	83 c4 10             	add    esp,0x10
c0020ee8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020eef:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020ef6:	85 c0                	test   eax,eax
c0020ef8:	75 07                	jne    c0020f01 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020efa:	b8 00 00 00 00       	mov    eax,0x0
c0020eff:	eb 05                	jmp    c0020f06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020f01:	b8 01 00 00 00       	mov    eax,0x1
c0020f06:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020f0c:	c3                   	ret    
c0020f0d:	90                   	nop

c0020f0e <FAT::rename(char const*, char const*)>:
c0020f0e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f14:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020f1c:	74 0a                	je     c0020f28 <FAT::rename(char const*, char const*)+0x1a>
c0020f1e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020f26:	75 0a                	jne    c0020f32 <FAT::rename(char const*, char const*)+0x24>
c0020f28:	b8 04 00 00 00       	mov    eax,0x4
c0020f2d:	e9 98 00 00 00       	jmp    c0020fca <FAT::rename(char const*, char const*)+0xbc>
c0020f32:	83 ec 08             	sub    esp,0x8
c0020f35:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f3c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f43:	50                   	push   eax
c0020f44:	e8 c3 f8 fd ff       	call   c000080c <strcpy>
c0020f49:	83 c4 10             	add    esp,0x10
c0020f4c:	83 ec 08             	sub    esp,0x8
c0020f4f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020f56:	50                   	push   eax
c0020f57:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f5e:	e8 ed fa ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	83 ec 08             	sub    esp,0x8
c0020f69:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020f70:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f74:	50                   	push   eax
c0020f75:	e8 92 f8 fd ff       	call   c000080c <strcpy>
c0020f7a:	83 c4 10             	add    esp,0x10
c0020f7d:	83 ec 08             	sub    esp,0x8
c0020f80:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f84:	50                   	push   eax
c0020f85:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f8c:	e8 bf fa ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0020f91:	83 c4 10             	add    esp,0x10
c0020f94:	83 ec 08             	sub    esp,0x8
c0020f97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f9b:	50                   	push   eax
c0020f9c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020fa3:	50                   	push   eax
c0020fa4:	e8 a6 58 fe ff       	call   c000684f <f_rename>
c0020fa9:	83 c4 10             	add    esp,0x10
c0020fac:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020fb3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020fba:	85 c0                	test   eax,eax
c0020fbc:	75 07                	jne    c0020fc5 <FAT::rename(char const*, char const*)+0xb7>
c0020fbe:	b8 00 00 00 00       	mov    eax,0x0
c0020fc3:	eb 05                	jmp    c0020fca <FAT::rename(char const*, char const*)+0xbc>
c0020fc5:	b8 01 00 00 00       	mov    eax,0x1
c0020fca:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020fd0:	c3                   	ret    
c0020fd1:	90                   	nop

c0020fd2 <FAT::mkdir(char const*)>:
c0020fd2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fd8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe0:	75 07                	jne    c0020fe9 <FAT::mkdir(char const*)+0x17>
c0020fe2:	b8 04 00 00 00       	mov    eax,0x4
c0020fe7:	eb 5c                	jmp    c0021045 <FAT::mkdir(char const*)+0x73>
c0020fe9:	83 ec 08             	sub    esp,0x8
c0020fec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ff7:	50                   	push   eax
c0020ff8:	e8 0f f8 fd ff       	call   c000080c <strcpy>
c0020ffd:	83 c4 10             	add    esp,0x10
c0021000:	83 ec 08             	sub    esp,0x8
c0021003:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021007:	50                   	push   eax
c0021008:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002100f:	e8 3c fa ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c0021014:	83 c4 10             	add    esp,0x10
c0021017:	83 ec 0c             	sub    esp,0xc
c002101a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002101e:	50                   	push   eax
c002101f:	e8 ff 55 fe ff       	call   c0006623 <f_mkdir>
c0021024:	83 c4 10             	add    esp,0x10
c0021027:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002102e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021035:	85 c0                	test   eax,eax
c0021037:	75 07                	jne    c0021040 <FAT::mkdir(char const*)+0x6e>
c0021039:	b8 00 00 00 00       	mov    eax,0x0
c002103e:	eb 05                	jmp    c0021045 <FAT::mkdir(char const*)+0x73>
c0021040:	b8 01 00 00 00       	mov    eax,0x1
c0021045:	81 c4 1c 01 00 00    	add    esp,0x11c
c002104b:	c3                   	ret    

c002104c <FAT::exists(char const*)>:
c002104c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021052:	83 ec 08             	sub    esp,0x8
c0021055:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002105c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021060:	50                   	push   eax
c0021061:	e8 a6 f7 fd ff       	call   c000080c <strcpy>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	83 ec 08             	sub    esp,0x8
c002106c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021070:	50                   	push   eax
c0021071:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021078:	e8 d3 f9 ff ff       	call   c0020a50 <FAT::fixFilepath(char*)>
c002107d:	83 c4 10             	add    esp,0x10
c0021080:	83 ec 08             	sub    esp,0x8
c0021083:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002108a:	50                   	push   eax
c002108b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002108f:	50                   	push   eax
c0021090:	e8 b9 50 fe ff       	call   c000614e <f_stat>
c0021095:	83 c4 10             	add    esp,0x10
c0021098:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002109f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210a6:	85 c0                	test   eax,eax
c00210a8:	75 04                	jne    c00210ae <FAT::exists(char const*)+0x62>
c00210aa:	b0 01                	mov    al,0x1
c00210ac:	eb 02                	jmp    c00210b0 <FAT::exists(char const*)+0x64>
c00210ae:	b0 00                	mov    al,0x0
c00210b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00210b6:	c3                   	ret    
c00210b7:	90                   	nop

c00210b8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00210b8:	b8 08 00 00 00       	mov    eax,0x8
c00210bd:	c3                   	ret    

c00210be <ISO9660::seek(void*, unsigned long long)>:
c00210be:	53                   	push   ebx
c00210bf:	b8 04 00 00 00       	mov    eax,0x4
c00210c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00210c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00210d0:	85 d2                	test   edx,edx
c00210d2:	74 17                	je     c00210eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210d4:	89 c8                	mov    eax,ecx
c00210d6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00210d9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00210dc:	b8 01 00 00 00       	mov    eax,0x1
c00210e1:	73 08                	jae    c00210eb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210e3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00210e6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00210e9:	31 c0                	xor    eax,eax
c00210eb:	5b                   	pop    ebx
c00210ec:	c3                   	ret    
c00210ed:	90                   	nop

c00210ee <ISO9660::tell(void*, unsigned long long*)>:
c00210ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210f6:	85 d2                	test   edx,edx
c00210f8:	74 12                	je     c002110c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00210fa:	85 c0                	test   eax,eax
c00210fc:	74 0e                	je     c002110c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00210fe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021101:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021104:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021107:	89 10                	mov    DWORD PTR [eax],edx
c0021109:	31 c0                	xor    eax,eax
c002110b:	c3                   	ret    
c002110c:	b8 04 00 00 00       	mov    eax,0x4
c0021111:	c3                   	ret    

c0021112 <ISO9660::getName()>:
c0021112:	b8 fc bf 02 c0       	mov    eax,0xc002bffc
c0021117:	c3                   	ret    

c0021118 <ISO9660::stat(void*, unsigned long long*)>:
c0021118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002111c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021120:	85 d2                	test   edx,edx
c0021122:	74 12                	je     c0021136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021124:	85 c0                	test   eax,eax
c0021126:	74 0e                	je     c0021136 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021128:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002112b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002112e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021131:	89 10                	mov    DWORD PTR [eax],edx
c0021133:	31 c0                	xor    eax,eax
c0021135:	c3                   	ret    
c0021136:	b8 04 00 00 00       	mov    eax,0x4
c002113b:	c3                   	ret    

c002113c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002113c:	b8 01 00 00 00       	mov    eax,0x1
c0021141:	c3                   	ret    

c0021142 <ISO9660::unlink(char const*)>:
c0021142:	b8 01 00 00 00       	mov    eax,0x1
c0021147:	c3                   	ret    

c0021148 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021148:	b8 01 00 00 00       	mov    eax,0x1
c002114d:	c3                   	ret    

c002114e <ISO9660::rename(char const*, char const*)>:
c002114e:	b8 01 00 00 00       	mov    eax,0x1
c0021153:	c3                   	ret    

c0021154 <ISO9660::mkdir(char const*)>:
c0021154:	b8 01 00 00 00       	mov    eax,0x1
c0021159:	c3                   	ret    

c002115a <ISO9660::close(void*)>:
c002115a:	83 ec 0c             	sub    esp,0xc
c002115d:	b8 04 00 00 00       	mov    eax,0x4
c0021162:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021166:	85 d2                	test   edx,edx
c0021168:	74 0e                	je     c0021178 <ISO9660::close(void*)+0x1e>
c002116a:	83 ec 0c             	sub    esp,0xc
c002116d:	52                   	push   edx
c002116e:	e8 36 e4 fe ff       	call   c000f5a9 <free>
c0021173:	83 c4 10             	add    esp,0x10
c0021176:	31 c0                	xor    eax,eax
c0021178:	83 c4 0c             	add    esp,0xc
c002117b:	c3                   	ret    

c002117c <ISO9660::closeDir(void*)>:
c002117c:	83 ec 0c             	sub    esp,0xc
c002117f:	b8 04 00 00 00       	mov    eax,0x4
c0021184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021188:	85 d2                	test   edx,edx
c002118a:	74 0e                	je     c002119a <ISO9660::closeDir(void*)+0x1e>
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	52                   	push   edx
c0021190:	e8 14 e4 fe ff       	call   c000f5a9 <free>
c0021195:	83 c4 10             	add    esp,0x10
c0021198:	31 c0                	xor    eax,eax
c002119a:	83 c4 0c             	add    esp,0xc
c002119d:	c3                   	ret    

c002119e <ISO9660::~ISO9660()>:
c002119e:	83 ec 0c             	sub    esp,0xc
c00211a1:	ba 20 c0 02 c0       	mov    edx,0xc002c020
c00211a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211aa:	89 10                	mov    DWORD PTR [eax],edx
c00211ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b0:	83 ec 0c             	sub    esp,0xc
c00211b3:	50                   	push   eax
c00211b4:	e8 05 19 ff ff       	call   c0012abe <Filesystem::~Filesystem()>
c00211b9:	83 c4 10             	add    esp,0x10
c00211bc:	90                   	nop
c00211bd:	83 c4 0c             	add    esp,0xc
c00211c0:	c3                   	ret    
c00211c1:	90                   	nop

c00211c2 <ISO9660::~ISO9660()>:
c00211c2:	83 ec 0c             	sub    esp,0xc
c00211c5:	83 ec 0c             	sub    esp,0xc
c00211c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211cc:	e8 cd ff ff ff       	call   c002119e <ISO9660::~ISO9660()>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	83 ec 08             	sub    esp,0x8
c00211d7:	6a 08                	push   0x8
c00211d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211dd:	e8 d5 14 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00211e2:	83 c4 10             	add    esp,0x10
c00211e5:	83 c4 0c             	add    esp,0xc
c00211e8:	c3                   	ret    

c00211e9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00211e9:	55                   	push   ebp
c00211ea:	31 c9                	xor    ecx,ecx
c00211ec:	57                   	push   edi
c00211ed:	56                   	push   esi
c00211ee:	53                   	push   ebx
c00211ef:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00211f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00211f7:	89 eb                	mov    ebx,ebp
c00211f9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00211fd:	39 ce                	cmp    esi,ecx
c00211ff:	7e 17                	jle    c0021218 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021201:	31 d2                	xor    edx,edx
c0021203:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021207:	7d 13                	jge    c002121c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021209:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002120d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021210:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021213:	75 0d                	jne    c0021222 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021215:	42                   	inc    edx
c0021216:	eb eb                	jmp    c0021203 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021218:	31 c0                	xor    eax,eax
c002121a:	eb 0a                	jmp    c0021226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002121c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021220:	eb 04                	jmp    c0021226 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021222:	41                   	inc    ecx
c0021223:	43                   	inc    ebx
c0021224:	eb d7                	jmp    c00211fd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021226:	5b                   	pop    ebx
c0021227:	5e                   	pop    esi
c0021228:	5f                   	pop    edi
c0021229:	5d                   	pop    ebp
c002122a:	c3                   	ret    

c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002122b:	57                   	push   edi
c002122c:	56                   	push   esi
c002122d:	53                   	push   ebx
c002122e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021236:	39 0d c0 11 03 c0    	cmp    DWORD PTR ds:0xc00311c0,ecx
c002123c:	75 08                	jne    c0021246 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002123e:	38 05 34 d0 02 c0    	cmp    BYTE PTR ds:0xc002d034,al
c0021244:	74 2b                	je     c0021271 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021246:	83 ec 0c             	sub    esp,0xc
c0021249:	a2 34 d0 02 c0       	mov    ds:0xc002d034,al
c002124e:	68 e0 11 03 c0       	push   0xc00311e0
c0021253:	0f be c0             	movsx  eax,al
c0021256:	6a 01                	push   0x1
c0021258:	89 0d c0 11 03 c0    	mov    DWORD PTR ds:0xc00311c0,ecx
c002125e:	31 db                	xor    ebx,ebx
c0021260:	53                   	push   ebx
c0021261:	51                   	push   ecx
c0021262:	ff 34 85 9c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2064]
c0021269:	e8 76 4e ff ff       	call   c00160e4 <LogicalDisk::read(unsigned long long, int, void*)>
c002126e:	83 c4 20             	add    esp,0x20
c0021271:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021275:	be e0 11 03 c0       	mov    esi,0xc00311e0
c002127a:	b9 00 08 00 00       	mov    ecx,0x800
c002127f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021281:	5b                   	pop    ebx
c0021282:	5e                   	pop    esi
c0021283:	5f                   	pop    edi
c0021284:	c3                   	ret    
c0021285:	90                   	nop

c0021286 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021286:	81 ec 10 08 00 00    	sub    esp,0x810
c002128c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021293:	83 c0 41             	add    eax,0x41
c0021296:	0f be c0             	movsx  eax,al
c0021299:	50                   	push   eax
c002129a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002129e:	50                   	push   eax
c002129f:	6a 10                	push   0x10
c00212a1:	e8 85 ff ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212a6:	83 c4 10             	add    esp,0x10
c00212a9:	31 c0                	xor    eax,eax
c00212ab:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00212b0:	75 1d                	jne    c00212cf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212b2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00212b7:	75 16                	jne    c00212cf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212b9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00212be:	75 0f                	jne    c00212cf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212c0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00212c5:	75 08                	jne    c00212cf <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212c7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00212cc:	0f 94 c0             	sete   al
c00212cf:	81 c4 0c 08 00 00    	add    esp,0x80c
c00212d5:	c3                   	ret    

c00212d6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00212d6:	55                   	push   ebp
c00212d7:	57                   	push   edi
c00212d8:	56                   	push   esi
c00212d9:	53                   	push   ebx
c00212da:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00212e0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00212e7:	85 ed                	test   ebp,ebp
c00212e9:	0f 84 da 01 00 00    	je     c00214c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00212ef:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00212f7:	0f 84 cc 01 00 00    	je     c00214c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00212fd:	b8 01 00 00 00       	mov    eax,0x1
c0021302:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021306:	0f 85 c2 01 00 00    	jne    c00214ce <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002130c:	31 d2                	xor    edx,edx
c002130e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021315:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021318:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002131b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002131e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021321:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021325:	01 c8                	add    eax,ecx
c0021327:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002132a:	11 da                	adc    edx,ebx
c002132c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021330:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021334:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021338:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002133c:	19 d7                	sbb    edi,edx
c002133e:	72 11                	jb     c0021351 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021340:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021343:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002134b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002134f:	eb 0c                	jmp    c002135d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021351:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021355:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021359:	29 ce                	sub    esi,ecx
c002135b:	19 df                	sbb    edi,ebx
c002135d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021360:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021363:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021367:	c1 e0 0b             	shl    eax,0xb
c002136a:	01 c8                	add    eax,ecx
c002136c:	11 da                	adc    edx,ebx
c002136e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021371:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021375:	51                   	push   ecx
c0021376:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002137a:	50                   	push   eax
c002137b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002137f:	53                   	push   ebx
c0021380:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021388:	0f ac d0 0b          	shrd   eax,edx,0xb
c002138c:	50                   	push   eax
c002138d:	e8 99 fe ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021392:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021395:	b8 00 08 00 00       	mov    eax,0x800
c002139a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00213a0:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00213a4:	29 d0                	sub    eax,edx
c00213a6:	83 c4 10             	add    esp,0x10
c00213a9:	89 f9                	mov    ecx,edi
c00213ab:	39 c6                	cmp    esi,eax
c00213ad:	83 d9 00             	sbb    ecx,0x0
c00213b0:	7d 1b                	jge    c00213cd <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00213b2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00213b7:	75 12                	jne    c00213cb <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00213b9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213c6:	e9 fa 00 00 00       	jmp    c00214c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00213cb:	89 f0                	mov    eax,esi
c00213cd:	01 d3                	add    ebx,edx
c00213cf:	31 d2                	xor    edx,edx
c00213d1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00213d5:	39 c2                	cmp    edx,eax
c00213d7:	7d 14                	jge    c00213ed <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00213d9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00213e0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00213e4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00213e7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00213ea:	42                   	inc    edx
c00213eb:	eb e8                	jmp    c00213d5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00213ed:	89 c2                	mov    edx,eax
c00213ef:	85 c0                	test   eax,eax
c00213f1:	79 02                	jns    c00213f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00213f3:	31 d2                	xor    edx,edx
c00213f5:	01 c2                	add    edx,eax
c00213f7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00213fa:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021401:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021405:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021409:	99                   	cdq    
c002140a:	01 c1                	add    ecx,eax
c002140c:	11 d3                	adc    ebx,edx
c002140e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021412:	29 c6                	sub    esi,eax
c0021414:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021418:	19 d7                	sbb    edi,edx
c002141a:	89 34 24             	mov    DWORD PTR [esp],esi
c002141d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021421:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021426:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021429:	b8 00 00 00 00       	mov    eax,0x0
c002142e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021432:	7d 43                	jge    c0021477 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021434:	52                   	push   edx
c0021435:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021439:	50                   	push   eax
c002143a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002143e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021442:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021446:	0f ac d0 0b          	shrd   eax,edx,0xb
c002144a:	50                   	push   eax
c002144b:	e8 db fd ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021450:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021458:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002145d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021465:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002146d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021472:	83 c4 10             	add    esp,0x10
c0021475:	eb aa                	jmp    c0021421 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002147b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002147e:	74 2a                	je     c00214aa <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021480:	50                   	push   eax
c0021481:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021485:	50                   	push   eax
c0021486:	8d 74 24 28          	lea    esi,[esp+0x28]
c002148a:	56                   	push   esi
c002148b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002148f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021493:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021497:	51                   	push   ecx
c0021498:	e8 8e fd ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002149d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00214a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00214a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214a7:	83 c4 10             	add    esp,0x10
c00214aa:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00214b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214b9:	89 18                	mov    DWORD PTR [eax],ebx
c00214bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214bf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214c2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214c5:	31 c0                	xor    eax,eax
c00214c7:	eb 05                	jmp    c00214ce <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00214c9:	b8 04 00 00 00       	mov    eax,0x4
c00214ce:	81 c4 2c 08 00 00    	add    esp,0x82c
c00214d4:	5b                   	pop    ebx
c00214d5:	5e                   	pop    esi
c00214d6:	5f                   	pop    edi
c00214d7:	5d                   	pop    ebp
c00214d8:	c3                   	ret    
c00214d9:	90                   	nop

c00214da <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00214da:	55                   	push   ebp
c00214db:	57                   	push   edi
c00214dc:	56                   	push   esi
c00214dd:	53                   	push   ebx
c00214de:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00214e4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00214eb:	85 ed                	test   ebp,ebp
c00214ed:	0f 84 51 02 00 00    	je     c0021744 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00214f3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00214fb:	0f 84 43 02 00 00    	je     c0021744 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021501:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021504:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021507:	75 0a                	jne    c0021513 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021509:	b8 07 00 00 00       	mov    eax,0x7
c002150e:	e9 36 02 00 00       	jmp    c0021749 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021513:	50                   	push   eax
c0021514:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021518:	50                   	push   eax
c0021519:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021520:	53                   	push   ebx
c0021521:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021524:	c1 e0 0b             	shl    eax,0xb
c0021527:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002152a:	c1 e8 0b             	shr    eax,0xb
c002152d:	50                   	push   eax
c002152e:	e8 f8 fc ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021533:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021536:	83 c4 10             	add    esp,0x10
c0021539:	89 c1                	mov    ecx,eax
c002153b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002153e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021544:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021547:	84 db                	test   bl,bl
c0021549:	0f 85 8b 00 00 00    	jne    c00215da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002154f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021555:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021558:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002155e:	29 c6                	sub    esi,eax
c0021560:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021564:	89 f3                	mov    ebx,esi
c0021566:	89 f1                	mov    ecx,esi
c0021568:	c1 fb 1f             	sar    ebx,0x1f
c002156b:	01 f0                	add    eax,esi
c002156d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021570:	11 da                	adc    edx,ebx
c0021572:	89 04 24             	mov    DWORD PTR [esp],eax
c0021575:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021579:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002157c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002157f:	89 d8                	mov    eax,ebx
c0021581:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021585:	ba 00 00 00 00       	mov    edx,0x0
c002158a:	19 f8                	sbb    eax,edi
c002158c:	b8 00 00 00 00       	mov    eax,0x0
c0021591:	73 08                	jae    c002159b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021593:	89 f0                	mov    eax,esi
c0021595:	89 fa                	mov    edx,edi
c0021597:	29 c8                	sub    eax,ecx
c0021599:	19 da                	sbb    edx,ebx
c002159b:	89 d7                	mov    edi,edx
c002159d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00215a0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00215a3:	09 c7                	or     edi,eax
c00215a5:	0f 84 5e ff ff ff    	je     c0021509 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00215ab:	57                   	push   edi
c00215ac:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215b0:	50                   	push   eax
c00215b1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00215b8:	53                   	push   ebx
c00215b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215bc:	c1 e0 0b             	shl    eax,0xb
c00215bf:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00215c3:	c1 e8 0b             	shr    eax,0xb
c00215c6:	50                   	push   eax
c00215c7:	e8 5f fc ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215cf:	83 c4 10             	add    esp,0x10
c00215d2:	25 ff 07 00 00       	and    eax,0x7ff
c00215d7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00215da:	31 ff                	xor    edi,edi
c00215dc:	56                   	push   esi
c00215dd:	6a 28                	push   0x28
c00215df:	6a 00                	push   0x0
c00215e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00215e5:	50                   	push   eax
c00215e6:	e8 65 f1 fd ff       	call   c0000750 <memset>
c00215eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215ee:	25 ff 07 00 00       	and    eax,0x7ff
c00215f3:	89 c6                	mov    esi,eax
c00215f5:	83 c6 21             	add    esi,0x21
c00215f8:	83 d7 00             	adc    edi,0x0
c00215fb:	83 c4 10             	add    esp,0x10
c00215fe:	31 c9                	xor    ecx,ecx
c0021600:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021607:	83 f9 28             	cmp    ecx,0x28
c002160a:	88 04 24             	mov    BYTE PTR [esp],al
c002160d:	0f 94 c2             	sete   dl
c0021610:	88 d0                	mov    al,dl
c0021612:	ba ff 07 00 00       	mov    edx,0x7ff
c0021617:	39 f2                	cmp    edx,esi
c0021619:	ba 00 00 00 00       	mov    edx,0x0
c002161e:	19 fa                	sbb    edx,edi
c0021620:	0f 92 c2             	setb   dl
c0021623:	09 c2                	or     edx,eax
c0021625:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021629:	0f 94 c0             	sete   al
c002162c:	08 d0                	or     al,dl
c002162e:	75 16                	jne    c0021646 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021630:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021634:	74 10                	je     c0021646 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021636:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021639:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002163d:	41                   	inc    ecx
c002163e:	83 c6 01             	add    esi,0x1
c0021641:	83 d7 00             	adc    edi,0x0
c0021644:	eb ba                	jmp    c0021600 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021646:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002164d:	83 ec 0c             	sub    esp,0xc
c0021650:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021654:	56                   	push   esi
c0021655:	e8 12 f1 fd ff       	call   c000076c <strlen>
c002165a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021661:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021665:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002166d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021670:	5a                   	pop    edx
c0021671:	25 ff 07 00 00       	and    eax,0x7ff
c0021676:	59                   	pop    ecx
c0021677:	01 f8                	add    eax,edi
c0021679:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002167f:	83 e0 02             	and    eax,0x2
c0021682:	3c 01                	cmp    al,0x1
c0021684:	19 c0                	sbb    eax,eax
c0021686:	83 c0 02             	add    eax,0x2
c0021689:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002168d:	56                   	push   esi
c002168e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021692:	50                   	push   eax
c0021693:	e8 74 f1 fd ff       	call   c000080c <strcpy>
c0021698:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002169c:	83 c4 10             	add    esp,0x10
c002169f:	84 c0                	test   al,al
c00216a1:	75 21                	jne    c00216c4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00216a3:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00216ab:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00216b3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00216bb:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00216c2:	eb 28                	jmp    c00216ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00216c4:	fe c8                	dec    al
c00216c6:	75 24                	jne    c00216ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00216c8:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00216d0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00216d8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00216e0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00216e7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00216ec:	8d 74 24 40          	lea    esi,[esp+0x40]
c00216f0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00216f7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00216fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021700:	0f b6 f3             	movzx  esi,bl
c0021703:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002170a:	31 db                	xor    ebx,ebx
c002170c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021712:	89 df                	mov    edi,ebx
c0021714:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002171a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002171d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021720:	39 c6                	cmp    esi,eax
c0021722:	19 d7                	sbb    edi,edx
c0021724:	72 10                	jb     c0021736 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021726:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002172d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021734:	eb 0a                	jmp    c0021740 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021736:	29 f0                	sub    eax,esi
c0021738:	19 da                	sbb    edx,ebx
c002173a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002173d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021740:	31 c0                	xor    eax,eax
c0021742:	eb 05                	jmp    c0021749 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021744:	b8 04 00 00 00       	mov    eax,0x4
c0021749:	81 c4 5c 09 00 00    	add    esp,0x95c
c002174f:	5b                   	pop    ebx
c0021750:	5e                   	pop    esi
c0021751:	5f                   	pop    edi
c0021752:	5d                   	pop    ebp
c0021753:	c3                   	ret    

c0021754 <readRoot(unsigned int*, unsigned int*, char)>:
c0021754:	57                   	push   edi
c0021755:	56                   	push   esi
c0021756:	81 ec 38 08 00 00    	sub    esp,0x838
c002175c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021764:	50                   	push   eax
c0021765:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021769:	50                   	push   eax
c002176a:	6a 10                	push   0x10
c002176c:	e8 ba fa ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021771:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021778:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002177c:	b9 22 00 00 00       	mov    ecx,0x22
c0021781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021783:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002178a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002178e:	89 10                	mov    DWORD PTR [eax],edx
c0021790:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021797:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002179b:	89 10                	mov    DWORD PTR [eax],edx
c002179d:	81 c4 44 08 00 00    	add    esp,0x844
c00217a3:	b0 01                	mov    al,0x1
c00217a5:	5e                   	pop    esi
c00217a6:	5f                   	pop    edi
c00217a7:	c3                   	ret    

c00217a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00217a8:	55                   	push   ebp
c00217a9:	57                   	push   edi
c00217aa:	56                   	push   esi
c00217ab:	53                   	push   ebx
c00217ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217b2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00217b9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00217c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217c4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00217c8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00217cc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217d0:	75 03                	jne    c00217d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217d2:	83 c3 02             	add    ebx,0x2
c00217d5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00217d8:	75 03                	jne    c00217dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00217da:	43                   	inc    ebx
c00217db:	eb f8                	jmp    c00217d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217dd:	51                   	push   ecx
c00217de:	68 00 01 00 00       	push   0x100
c00217e3:	6a 00                	push   0x0
c00217e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217e9:	50                   	push   eax
c00217ea:	e8 61 ef fd ff       	call   c0000750 <memset>
c00217ef:	83 c4 10             	add    esp,0x10
c00217f2:	31 d2                	xor    edx,edx
c00217f4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217f7:	84 c0                	test   al,al
c00217f9:	74 21                	je     c002181c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00217fb:	3c 2f                	cmp    al,0x2f
c00217fd:	75 0b                	jne    c002180a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00217ff:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021803:	bd 01 00 00 00       	mov    ebp,0x1
c0021808:	eb 14                	jmp    c002181e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002180a:	8d 48 9f             	lea    ecx,[eax-0x61]
c002180d:	80 f9 19             	cmp    cl,0x19
c0021810:	77 03                	ja     c0021815 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021812:	83 e8 20             	sub    eax,0x20
c0021815:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021819:	42                   	inc    edx
c002181a:	eb d8                	jmp    c00217f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002181c:	31 ed                	xor    ebp,ebp
c002181e:	83 ec 0c             	sub    esp,0xc
c0021821:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021828:	e8 6c dd fe ff       	call   c000f599 <malloc>
c002182d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021834:	89 c6                	mov    esi,eax
c0021836:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002183c:	c1 ef 0b             	shr    edi,0xb
c002183f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021846:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021852:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021856:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002185d:	74 28                	je     c0021887 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002185f:	52                   	push   edx
c0021860:	57                   	push   edi
c0021861:	50                   	push   eax
c0021862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021866:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002186d:	e8 b9 f9 ff ff       	call   c002122b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021872:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021876:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002187d:	05 00 08 00 00       	add    eax,0x800
c0021882:	83 c4 10             	add    esp,0x10
c0021885:	eb cb                	jmp    c0021852 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021887:	83 ec 0c             	sub    esp,0xc
c002188a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002188e:	57                   	push   edi
c002188f:	e8 d8 ee fd ff       	call   c000076c <strlen>
c0021894:	50                   	push   eax
c0021895:	57                   	push   edi
c0021896:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002189d:	56                   	push   esi
c002189e:	e8 46 f9 ff ff       	call   c00211e9 <__memmem(unsigned char*, int, unsigned char*, int)>
c00218a3:	83 c4 20             	add    esp,0x20
c00218a6:	85 c0                	test   eax,eax
c00218a8:	75 13                	jne    c00218bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00218aa:	83 ec 0c             	sub    esp,0xc
c00218ad:	56                   	push   esi
c00218ae:	e8 f6 dc fe ff       	call   c000f5a9 <free>
c00218b3:	83 c4 10             	add    esp,0x10
c00218b6:	31 c0                	xor    eax,eax
c00218b8:	e9 b3 00 00 00       	jmp    c0021970 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218bd:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00218c1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00218c5:	c1 e7 08             	shl    edi,0x8
c00218c8:	c1 e2 10             	shl    edx,0x10
c00218cb:	09 d7                	or     edi,edx
c00218cd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00218d1:	09 d7                	or     edi,edx
c00218d3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00218d7:	c1 e2 18             	shl    edx,0x18
c00218da:	09 d7                	or     edi,edx
c00218dc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00218e0:	89 d1                	mov    ecx,edx
c00218e2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00218e6:	c1 e1 08             	shl    ecx,0x8
c00218e9:	c1 e2 10             	shl    edx,0x10
c00218ec:	09 ca                	or     edx,ecx
c00218ee:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00218f2:	09 ca                	or     edx,ecx
c00218f4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00218f8:	c1 e1 18             	shl    ecx,0x18
c00218fb:	09 ca                	or     edx,ecx
c00218fd:	89 e9                	mov    ecx,ebp
c00218ff:	84 c9                	test   cl,cl
c0021901:	74 3c                	je     c002193f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021903:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021907:	83 ec 0c             	sub    esp,0xc
c002190a:	56                   	push   esi
c002190b:	e8 99 dc fe ff       	call   c000f5a9 <free>
c0021910:	83 c4 0c             	add    esp,0xc
c0021913:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002191a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002191f:	50                   	push   eax
c0021920:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021927:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002192e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021932:	52                   	push   edx
c0021933:	57                   	push   edi
c0021934:	53                   	push   ebx
c0021935:	e8 6e fe ff ff       	call   c00217a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002193a:	83 c4 20             	add    esp,0x20
c002193d:	eb 31                	jmp    c0021970 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002193f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021942:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021949:	d0 e8                	shr    al,1
c002194b:	89 3b                	mov    DWORD PTR [ebx],edi
c002194d:	83 e0 01             	and    eax,0x1
c0021950:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021957:	83 ec 0c             	sub    esp,0xc
c002195a:	89 13                	mov    DWORD PTR [ebx],edx
c002195c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021963:	89 03                	mov    DWORD PTR [ebx],eax
c0021965:	56                   	push   esi
c0021966:	e8 3e dc fe ff       	call   c000f5a9 <free>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	b0 01                	mov    al,0x1
c0021970:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021976:	5b                   	pop    ebx
c0021977:	5e                   	pop    esi
c0021978:	5f                   	pop    edi
c0021979:	5d                   	pop    ebp
c002197a:	c3                   	ret    

c002197b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002197b:	55                   	push   ebp
c002197c:	57                   	push   edi
c002197d:	56                   	push   esi
c002197e:	53                   	push   ebx
c002197f:	83 ec 20             	sub    esp,0x20
c0021982:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021986:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002198a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002198e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021996:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002199e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00219a3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00219a9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00219af:	57                   	push   edi
c00219b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219b4:	50                   	push   eax
c00219b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219b9:	50                   	push   eax
c00219ba:	e8 95 fd ff ff       	call   c0021754 <readRoot(unsigned int*, unsigned int*, char)>
c00219bf:	5a                   	pop    edx
c00219c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219c4:	e8 a3 ed fd ff       	call   c000076c <strlen>
c00219c9:	83 c4 10             	add    esp,0x10
c00219cc:	83 f8 03             	cmp    eax,0x3
c00219cf:	77 17                	ja     c00219e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00219d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219d5:	89 03                	mov    DWORD PTR [ebx],eax
c00219d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219db:	89 06                	mov    DWORD PTR [esi],eax
c00219dd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00219e4:	b0 01                	mov    al,0x1
c00219e6:	eb 19                	jmp    c0021a01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00219e8:	50                   	push   eax
c00219e9:	55                   	push   ebp
c00219ea:	57                   	push   edi
c00219eb:	56                   	push   esi
c00219ec:	53                   	push   ebx
c00219ed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00219f9:	e8 aa fd ff ff       	call   c00217a8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219fe:	83 c4 20             	add    esp,0x20
c0021a01:	83 c4 1c             	add    esp,0x1c
c0021a04:	5b                   	pop    ebx
c0021a05:	5e                   	pop    esi
c0021a06:	5f                   	pop    edi
c0021a07:	5d                   	pop    ebp
c0021a08:	c3                   	ret    
c0021a09:	90                   	nop

c0021a0a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021a0a:	57                   	push   edi
c0021a0b:	56                   	push   esi
c0021a0c:	53                   	push   ebx
c0021a0d:	83 ec 10             	sub    esp,0x10
c0021a10:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a14:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a18:	85 ff                	test   edi,edi
c0021a1a:	0f 84 8b 00 00 00    	je     c0021aab <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021a20:	85 f6                	test   esi,esi
c0021a22:	0f 84 83 00 00 00    	je     c0021aab <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021a28:	b8 03 00 00 00       	mov    eax,0x3
c0021a2d:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021a32:	75 7c                	jne    c0021ab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a34:	83 ec 0c             	sub    esp,0xc
c0021a37:	6a 1c                	push   0x1c
c0021a39:	e8 5b db fe ff       	call   c000f599 <malloc>
c0021a3e:	89 07                	mov    DWORD PTR [edi],eax
c0021a40:	89 c3                	mov    ebx,eax
c0021a42:	58                   	pop    eax
c0021a43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a47:	50                   	push   eax
c0021a48:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a4b:	50                   	push   eax
c0021a4c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a50:	50                   	push   eax
c0021a51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a55:	50                   	push   eax
c0021a56:	56                   	push   esi
c0021a57:	e8 1f ff ff ff       	call   c002197b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a5c:	83 c4 20             	add    esp,0x20
c0021a5f:	84 c0                	test   al,al
c0021a61:	74 07                	je     c0021a6a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021a63:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a68:	74 0b                	je     c0021a75 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021a6a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a6e:	b8 01 00 00 00       	mov    eax,0x1
c0021a73:	eb 3b                	jmp    c0021ab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a79:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a7d:	89 03                	mov    DWORD PTR [ebx],eax
c0021a7f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a8a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a9b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021aa2:	8a 06                	mov    al,BYTE PTR [esi]
c0021aa4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021aa7:	31 c0                	xor    eax,eax
c0021aa9:	eb 05                	jmp    c0021ab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021aab:	b8 04 00 00 00       	mov    eax,0x4
c0021ab0:	83 c4 10             	add    esp,0x10
c0021ab3:	5b                   	pop    ebx
c0021ab4:	5e                   	pop    esi
c0021ab5:	5f                   	pop    edi
c0021ab6:	c3                   	ret    
c0021ab7:	90                   	nop

c0021ab8 <ISO9660::exists(char const*)>:
c0021ab8:	83 ec 28             	sub    esp,0x28
c0021abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021abf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ac3:	52                   	push   edx
c0021ac4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ac7:	52                   	push   edx
c0021ac8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021acc:	52                   	push   edx
c0021acd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ad1:	52                   	push   edx
c0021ad2:	50                   	push   eax
c0021ad3:	e8 a3 fe ff ff       	call   c002197b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ad8:	83 c4 3c             	add    esp,0x3c
c0021adb:	c3                   	ret    

c0021adc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021adc:	56                   	push   esi
c0021add:	53                   	push   ebx
c0021ade:	83 ec 14             	sub    esp,0x14
c0021ae1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021ae5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ae9:	85 db                	test   ebx,ebx
c0021aeb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021aef:	0f 94 c2             	sete   dl
c0021af2:	85 f6                	test   esi,esi
c0021af4:	0f 94 c0             	sete   al
c0021af7:	08 c2                	or     dl,al
c0021af9:	75 68                	jne    c0021b63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021afb:	85 c9                	test   ecx,ecx
c0021afd:	74 64                	je     c0021b63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021aff:	83 ec 0c             	sub    esp,0xc
c0021b02:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021b05:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b09:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b16:	50                   	push   eax
c0021b17:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021b1a:	50                   	push   eax
c0021b1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b1f:	50                   	push   eax
c0021b20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b24:	50                   	push   eax
c0021b25:	51                   	push   ecx
c0021b26:	e8 50 fe ff ff       	call   c002197b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b2b:	83 c4 20             	add    esp,0x20
c0021b2e:	ba 01 00 00 00       	mov    edx,0x1
c0021b33:	84 c0                	test   al,al
c0021b35:	74 31                	je     c0021b68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b3b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b42:	89 03                	mov    DWORD PTR [ebx],eax
c0021b44:	ba 00 00 00 00       	mov    edx,0x0
c0021b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b4d:	85 c0                	test   eax,eax
c0021b4f:	0f 95 06             	setne  BYTE PTR [esi]
c0021b52:	74 14                	je     c0021b68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b54:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b5a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b61:	eb 05                	jmp    c0021b68 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b63:	ba 04 00 00 00       	mov    edx,0x4
c0021b68:	83 c4 14             	add    esp,0x14
c0021b6b:	89 d0                	mov    eax,edx
c0021b6d:	5b                   	pop    ebx
c0021b6e:	5e                   	pop    esi
c0021b6f:	c3                   	ret    

c0021b70 <ISO9660::openDir(char const*, void**)>:
c0021b70:	57                   	push   edi
c0021b71:	56                   	push   esi
c0021b72:	53                   	push   ebx
c0021b73:	83 ec 10             	sub    esp,0x10
c0021b76:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021b7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b7e:	85 ff                	test   edi,edi
c0021b80:	74 7b                	je     c0021bfd <ISO9660::openDir(char const*, void**)+0x8d>
c0021b82:	85 f6                	test   esi,esi
c0021b84:	74 77                	je     c0021bfd <ISO9660::openDir(char const*, void**)+0x8d>
c0021b86:	83 ec 0c             	sub    esp,0xc
c0021b89:	6a 1c                	push   0x1c
c0021b8b:	e8 09 da fe ff       	call   c000f599 <malloc>
c0021b90:	89 07                	mov    DWORD PTR [edi],eax
c0021b92:	89 c3                	mov    ebx,eax
c0021b94:	58                   	pop    eax
c0021b95:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b99:	50                   	push   eax
c0021b9a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b9d:	50                   	push   eax
c0021b9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ba2:	50                   	push   eax
c0021ba3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ba7:	50                   	push   eax
c0021ba8:	56                   	push   esi
c0021ba9:	e8 cd fd ff ff       	call   c002197b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021bae:	83 c4 20             	add    esp,0x20
c0021bb1:	84 c0                	test   al,al
c0021bb3:	74 07                	je     c0021bbc <ISO9660::openDir(char const*, void**)+0x4c>
c0021bb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021bba:	75 0b                	jne    c0021bc7 <ISO9660::openDir(char const*, void**)+0x57>
c0021bbc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021bc0:	b8 01 00 00 00       	mov    eax,0x1
c0021bc5:	eb 3b                	jmp    c0021c02 <ISO9660::openDir(char const*, void**)+0x92>
c0021bc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bcb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021bcf:	89 03                	mov    DWORD PTR [ebx],eax
c0021bd1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bdc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021be3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021bed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021bf4:	8a 06                	mov    al,BYTE PTR [esi]
c0021bf6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021bf9:	31 c0                	xor    eax,eax
c0021bfb:	eb 05                	jmp    c0021c02 <ISO9660::openDir(char const*, void**)+0x92>
c0021bfd:	b8 04 00 00 00       	mov    eax,0x4
c0021c02:	83 c4 10             	add    esp,0x10
c0021c05:	5b                   	pop    ebx
c0021c06:	5e                   	pop    esi
c0021c07:	5f                   	pop    edi
c0021c08:	c3                   	ret    
c0021c09:	90                   	nop

c0021c0a <ISO9660::ISO9660()>:
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c11:	83 ec 0c             	sub    esp,0xc
c0021c14:	50                   	push   eax
c0021c15:	e8 80 0e ff ff       	call   c0012a9a <Filesystem::Filesystem()>
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	ba 20 c0 02 c0       	mov    edx,0xc002c020
c0021c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c26:	89 10                	mov    DWORD PTR [eax],edx
c0021c28:	90                   	nop
c0021c29:	83 c4 0c             	add    esp,0xc
c0021c2c:	c3                   	ret    
c0021c2d:	90                   	nop

c0021c2e <SoundChannel::SoundChannel(int, int, int, int)>:
c0021c2e:	83 ec 1c             	sub    esp,0x1c
c0021c31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021c39:	89 10                	mov    DWORD PTR [eax],edx
c0021c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c4a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c51:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021c56:	75 23                	jne    c0021c7b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c65:	0f af c2             	imul   eax,edx
c0021c68:	85 c0                	test   eax,eax
c0021c6a:	79 03                	jns    c0021c6f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021c6c:	83 c0 03             	add    eax,0x3
c0021c6f:	c1 f8 02             	sar    eax,0x2
c0021c72:	05 a0 0f 00 00       	add    eax,0xfa0
c0021c77:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021c83:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c8a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c95:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ca3:	c1 e0 02             	shl    eax,0x2
c0021ca6:	83 ec 0c             	sub    esp,0xc
c0021ca9:	50                   	push   eax
c0021caa:	e8 ea d8 fe ff       	call   c000f599 <malloc>
c0021caf:	83 c4 10             	add    esp,0x10
c0021cb2:	89 c2                	mov    edx,eax
c0021cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021cbb:	83 ec 04             	sub    esp,0x4
c0021cbe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cc2:	50                   	push   eax
c0021cc3:	6a 01                	push   0x1
c0021cc5:	6a 04                	push   0x4
c0021cc7:	e8 99 6e fe ff       	call   c0008b65 <src_new>
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	89 c2                	mov    edx,eax
c0021cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cdc:	85 c0                	test   eax,eax
c0021cde:	74 10                	je     c0021cf0 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	68 80 c0 02 c0       	push   0xc002c080
c0021ce8:	e8 0e 82 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0021ced:	83 c4 10             	add    esp,0x10
c0021cf0:	a0 e0 1d 03 c0       	mov    al,ds:0xc0031de0
c0021cf5:	83 f0 01             	xor    eax,0x1
c0021cf8:	84 c0                	test   al,al
c0021cfa:	74 57                	je     c0021d53 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021cfc:	a1 9c c0 02 c0       	mov    eax,ds:0xc002c09c
c0021d01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d0d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021d15:	7f 35                	jg     c0021d4c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021d17:	83 ec 0c             	sub    esp,0xc
c0021d1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d1e:	e8 dc 53 00 00       	call   c00270ff <__floatsisf>
c0021d23:	83 c4 10             	add    esp,0x10
c0021d26:	8b 15 9c c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c09c
c0021d2c:	83 ec 08             	sub    esp,0x8
c0021d2f:	52                   	push   edx
c0021d30:	50                   	push   eax
c0021d31:	e8 db 4f 00 00       	call   c0026d11 <__mulsf3>
c0021d36:	83 c4 10             	add    esp,0x10
c0021d39:	89 c2                	mov    edx,eax
c0021d3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d3f:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0021d46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d4a:	eb c1                	jmp    c0021d0d <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021d4c:	c6 05 e0 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031de0,0x1
c0021d53:	90                   	nop
c0021d54:	83 c4 1c             	add    esp,0x1c
c0021d57:	c3                   	ret    

c0021d58 <SoundChannel::~SoundChannel()>:
c0021d58:	83 ec 0c             	sub    esp,0xc
c0021d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d5f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021d62:	83 ec 0c             	sub    esp,0xc
c0021d65:	50                   	push   eax
c0021d66:	e8 3e d8 fe ff       	call   c000f5a9 <free>
c0021d6b:	83 c4 10             	add    esp,0x10
c0021d6e:	90                   	nop
c0021d6f:	83 c4 0c             	add    esp,0xc
c0021d72:	c3                   	ret    
c0021d73:	90                   	nop

c0021d74 <SoundChannel::getSampleRate()>:
c0021d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d7a:	c3                   	ret    
c0021d7b:	90                   	nop

c0021d7c <SoundChannel::getBits()>:
c0021d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d83:	c3                   	ret    

c0021d84 <SoundChannel::getBufferUsed()>:
c0021d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d88:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021d8b:	c3                   	ret    

c0021d8c <SoundChannel::getBufferSize()>:
c0021d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d93:	c3                   	ret    

c0021d94 <SoundChannel::unbuffer(float*, int, int)>:
c0021d94:	56                   	push   esi
c0021d95:	53                   	push   ebx
c0021d96:	83 ec 40             	sub    esp,0x40
c0021d99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021d9d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021da4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021da7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021dab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021daf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021db3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021db7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021dbb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021dbf:	e8 3b 53 00 00       	call   c00270ff <__floatsisf>
c0021dc4:	5a                   	pop    edx
c0021dc5:	89 c6                	mov    esi,eax
c0021dc7:	ff 33                	push   DWORD PTR [ebx]
c0021dc9:	e8 31 53 00 00       	call   c00270ff <__floatsisf>
c0021dce:	59                   	pop    ecx
c0021dcf:	5a                   	pop    edx
c0021dd0:	50                   	push   eax
c0021dd1:	56                   	push   esi
c0021dd2:	e8 fd 50 00 00       	call   c0026ed4 <__divsf3>
c0021dd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021dda:	e8 f0 65 00 00       	call   c00283cf <__extendsfdf2>
c0021ddf:	59                   	pop    ecx
c0021de0:	5e                   	pop    esi
c0021de1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021de5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021de9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021df1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021df5:	50                   	push   eax
c0021df6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021df9:	e8 5c 69 fe ff       	call   c000875a <src_process>
c0021dfe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e02:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021e05:	83 c4 0c             	add    esp,0xc
c0021e08:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021e0b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021e0e:	29 d0                	sub    eax,edx
c0021e10:	c1 e0 02             	shl    eax,0x2
c0021e13:	50                   	push   eax
c0021e14:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021e17:	50                   	push   eax
c0021e18:	51                   	push   ecx
c0021e19:	e8 6a e8 fd ff       	call   c0000688 <memmove>
c0021e1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e22:	83 c4 44             	add    esp,0x44
c0021e25:	5b                   	pop    ebx
c0021e26:	5e                   	pop    esi
c0021e27:	c3                   	ret    

c0021e28 <SoundChannel::buffer16(short*, int)>:
c0021e28:	55                   	push   ebp
c0021e29:	57                   	push   edi
c0021e2a:	56                   	push   esi
c0021e2b:	53                   	push   ebx
c0021e2c:	83 ec 1c             	sub    esp,0x1c
c0021e2f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021e33:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e36:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e39:	0f 84 d2 00 00 00    	je     c0021f11 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e3f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021e43:	85 ed                	test   ebp,ebp
c0021e45:	0f 8e c6 00 00 00    	jle    c0021f11 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e4f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021e54:	83 ec 0c             	sub    esp,0xc
c0021e57:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021e5a:	50                   	push   eax
c0021e5b:	e8 9f 52 00 00       	call   c00270ff <__floatsisf>
c0021e60:	59                   	pop    ecx
c0021e61:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e64:	5f                   	pop    edi
c0021e65:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e68:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e6b:	55                   	push   ebp
c0021e6c:	50                   	push   eax
c0021e6d:	e8 9f 4e 00 00       	call   c0026d11 <__mulsf3>
c0021e72:	83 c4 10             	add    esp,0x10
c0021e75:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e78:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e7b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e7e:	0f 84 99 00 00 00    	je     c0021f1d <SoundChannel::buffer16(short*, int)+0xf5>
c0021e84:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021e89:	74 78                	je     c0021f03 <SoundChannel::buffer16(short*, int)+0xdb>
c0021e8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e8f:	83 ec 0c             	sub    esp,0xc
c0021e92:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021e96:	50                   	push   eax
c0021e97:	e8 63 52 00 00       	call   c00270ff <__floatsisf>
c0021e9c:	5f                   	pop    edi
c0021e9d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ea0:	5a                   	pop    edx
c0021ea1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021ea4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ea7:	55                   	push   ebp
c0021ea8:	50                   	push   eax
c0021ea9:	e8 63 4e 00 00       	call   c0026d11 <__mulsf3>
c0021eae:	83 c4 10             	add    esp,0x10
c0021eb1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021eb4:	be 02 00 00 00       	mov    esi,0x2
c0021eb9:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021ebc:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021ebf:	74 46                	je     c0021f07 <SoundChannel::buffer16(short*, int)+0xdf>
c0021ec1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021ec5:	eb 36                	jmp    c0021efd <SoundChannel::buffer16(short*, int)+0xd5>
c0021ec7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021ecb:	83 ec 0c             	sub    esp,0xc
c0021ece:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021ed2:	46                   	inc    esi
c0021ed3:	50                   	push   eax
c0021ed4:	e8 26 52 00 00       	call   c00270ff <__floatsisf>
c0021ed9:	5a                   	pop    edx
c0021eda:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021edd:	59                   	pop    ecx
c0021ede:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021ee1:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ee8:	50                   	push   eax
c0021ee9:	e8 23 4e 00 00       	call   c0026d11 <__mulsf3>
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021ef5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021ef8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021efb:	74 0a                	je     c0021f07 <SoundChannel::buffer16(short*, int)+0xdf>
c0021efd:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021f01:	75 c4                	jne    c0021ec7 <SoundChannel::buffer16(short*, int)+0x9f>
c0021f03:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021f07:	83 c4 1c             	add    esp,0x1c
c0021f0a:	89 f0                	mov    eax,esi
c0021f0c:	5b                   	pop    ebx
c0021f0d:	5e                   	pop    esi
c0021f0e:	5f                   	pop    edi
c0021f0f:	5d                   	pop    ebp
c0021f10:	c3                   	ret    
c0021f11:	83 c4 1c             	add    esp,0x1c
c0021f14:	31 f6                	xor    esi,esi
c0021f16:	5b                   	pop    ebx
c0021f17:	89 f0                	mov    eax,esi
c0021f19:	5e                   	pop    esi
c0021f1a:	5f                   	pop    edi
c0021f1b:	5d                   	pop    ebp
c0021f1c:	c3                   	ret    
c0021f1d:	be 01 00 00 00       	mov    esi,0x1
c0021f22:	eb e3                	jmp    c0021f07 <SoundChannel::buffer16(short*, int)+0xdf>

c0021f24 <SoundChannel::buffer8(unsigned char*, int)>:
c0021f24:	55                   	push   ebp
c0021f25:	57                   	push   edi
c0021f26:	56                   	push   esi
c0021f27:	53                   	push   ebx
c0021f28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f2c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021f30:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f37:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f3a:	74 7a                	je     c0021fb6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f3c:	85 ff                	test   edi,edi
c0021f3e:	7e 76                	jle    c0021fb6 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f40:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021f44:	8d 70 01             	lea    esi,[eax+0x1]
c0021f47:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f4a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f4d:	8b 1c 9d e0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce620]
c0021f54:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f57:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f5a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f5d:	74 5e                	je     c0021fbd <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021f5f:	83 ff 01             	cmp    edi,0x1
c0021f62:	74 4b                	je     c0021faf <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021f64:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021f68:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f6b:	8d 70 01             	lea    esi,[eax+0x1]
c0021f6e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f71:	8b 1c 9d e0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce620]
c0021f78:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f7b:	b8 02 00 00 00       	mov    eax,0x2
c0021f80:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f83:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f86:	75 23                	jne    c0021fab <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021f88:	eb 27                	jmp    c0021fb1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f8a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021f8f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f92:	40                   	inc    eax
c0021f93:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f96:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f99:	8b 1c 9d e0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce620]
c0021fa0:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021fa3:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021fa6:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021fa9:	74 06                	je     c0021fb1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021fab:	39 c7                	cmp    edi,eax
c0021fad:	75 db                	jne    c0021f8a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021faf:	89 f8                	mov    eax,edi
c0021fb1:	5b                   	pop    ebx
c0021fb2:	5e                   	pop    esi
c0021fb3:	5f                   	pop    edi
c0021fb4:	5d                   	pop    ebp
c0021fb5:	c3                   	ret    
c0021fb6:	5b                   	pop    ebx
c0021fb7:	31 c0                	xor    eax,eax
c0021fb9:	5e                   	pop    esi
c0021fba:	5f                   	pop    edi
c0021fbb:	5d                   	pop    ebp
c0021fbc:	c3                   	ret    
c0021fbd:	b8 01 00 00 00       	mov    eax,0x1
c0021fc2:	eb ed                	jmp    c0021fb1 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021fc4 <SoundDevice::SoundDevice(char const*)>:
c0021fc4:	83 ec 1c             	sub    esp,0x1c
c0021fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fcb:	83 ec 08             	sub    esp,0x8
c0021fce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021fd2:	50                   	push   eax
c0021fd3:	e8 f4 1d ff ff       	call   c0013dcc <Device::Device(char const*)>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	ba a8 c0 02 c0       	mov    edx,0xc002c0a8
c0021fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fe4:	89 10                	mov    DWORD PTR [eax],edx
c0021fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fea:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ff8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022002:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002200a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002200f:	7f 19                	jg     c002202a <SoundDevice::SoundDevice(char const*)+0x66>
c0022011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022019:	83 c2 54             	add    edx,0x54
c002201c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022024:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022028:	eb e0                	jmp    c002200a <SoundDevice::SoundDevice(char const*)+0x46>
c002202a:	90                   	nop
c002202b:	83 c4 1c             	add    esp,0x1c
c002202e:	c3                   	ret    
c002202f:	90                   	nop

c0022030 <SoundDevice::~SoundDevice()>:
c0022030:	53                   	push   ebx
c0022031:	83 ec 18             	sub    esp,0x18
c0022034:	ba a8 c0 02 c0       	mov    edx,0xc002c0a8
c0022039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002203d:	89 10                	mov    DWORD PTR [eax],edx
c002203f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022047:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002204c:	7f 46                	jg     c0022094 <SoundDevice::~SoundDevice()+0x64>
c002204e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022056:	83 c2 54             	add    edx,0x54
c0022059:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002205d:	85 c0                	test   eax,eax
c002205f:	74 2d                	je     c002208e <SoundDevice::~SoundDevice()+0x5e>
c0022061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022065:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022069:	83 c2 54             	add    edx,0x54
c002206c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022070:	85 db                	test   ebx,ebx
c0022072:	74 1a                	je     c002208e <SoundDevice::~SoundDevice()+0x5e>
c0022074:	83 ec 0c             	sub    esp,0xc
c0022077:	53                   	push   ebx
c0022078:	e8 db fc ff ff       	call   c0021d58 <SoundChannel::~SoundChannel()>
c002207d:	83 c4 10             	add    esp,0x10
c0022080:	83 ec 08             	sub    esp,0x8
c0022083:	6a 2c                	push   0x2c
c0022085:	53                   	push   ebx
c0022086:	e8 2c 06 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c002208b:	83 c4 10             	add    esp,0x10
c002208e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022092:	eb b3                	jmp    c0022047 <SoundDevice::~SoundDevice()+0x17>
c0022094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	50                   	push   eax
c002209c:	e8 f5 19 ff ff       	call   c0013a96 <Device::~Device()>
c00220a1:	83 c4 10             	add    esp,0x10
c00220a4:	90                   	nop
c00220a5:	83 c4 18             	add    esp,0x18
c00220a8:	5b                   	pop    ebx
c00220a9:	c3                   	ret    

c00220aa <SoundDevice::~SoundDevice()>:
c00220aa:	83 ec 0c             	sub    esp,0xc
c00220ad:	83 ec 0c             	sub    esp,0xc
c00220b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b4:	e8 77 ff ff ff       	call   c0022030 <SoundDevice::~SoundDevice()>
c00220b9:	83 c4 10             	add    esp,0x10
c00220bc:	83 ec 08             	sub    esp,0x8
c00220bf:	68 e4 01 00 00       	push   0x1e4
c00220c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220c8:	e8 ea 05 ff ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00220cd:	83 c4 10             	add    esp,0x10
c00220d0:	83 c4 0c             	add    esp,0xc
c00220d3:	c3                   	ret    

c00220d4 <SoundDevice::getFreeChannelNum()>:
c00220d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220d8:	31 c0                	xor    eax,eax
c00220da:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00220e2:	74 09                	je     c00220ed <SoundDevice::getFreeChannelNum()+0x19>
c00220e4:	40                   	inc    eax
c00220e5:	83 f8 20             	cmp    eax,0x20
c00220e8:	75 f0                	jne    c00220da <SoundDevice::getFreeChannelNum()+0x6>
c00220ea:	83 c8 ff             	or     eax,0xffffffff
c00220ed:	c3                   	ret    

c00220ee <SoundDevice::addChannel(SoundChannel*)>:
c00220ee:	56                   	push   esi
c00220ef:	53                   	push   ebx
c00220f0:	51                   	push   ecx
c00220f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00220f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00220f9:	53                   	push   ebx
c00220fa:	e8 d5 ff ff ff       	call   c00220d4 <SoundDevice::getFreeChannelNum()>
c00220ff:	5a                   	pop    edx
c0022100:	83 f8 ff             	cmp    eax,0xffffffff
c0022103:	74 51                	je     c0022156 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022105:	85 f6                	test   esi,esi
c0022107:	74 4d                	je     c0022156 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022109:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022110:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022117:	75 30                	jne    c0022149 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022119:	83 ec 0c             	sub    esp,0xc
c002211c:	56                   	push   esi
c002211d:	e8 52 fc ff ff       	call   c0021d74 <SoundChannel::getSampleRate()>
c0022122:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022128:	89 34 24             	mov    DWORD PTR [esp],esi
c002212b:	e8 4c fc ff ff       	call   c0021d7c <SoundChannel::getBits()>
c0022130:	83 c4 0c             	add    esp,0xc
c0022133:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022139:	8b 13                	mov    edx,DWORD PTR [ebx]
c002213b:	50                   	push   eax
c002213c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022142:	53                   	push   ebx
c0022143:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022146:	83 c4 10             	add    esp,0x10
c0022149:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002214f:	b8 01 00 00 00       	mov    eax,0x1
c0022154:	eb 03                	jmp    c0022159 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022156:	83 c8 ff             	or     eax,0xffffffff
c0022159:	5a                   	pop    edx
c002215a:	5b                   	pop    ebx
c002215b:	5e                   	pop    esi
c002215c:	c3                   	ret    
c002215d:	90                   	nop

c002215e <SoundDevice::removeChannel(int)>:
c002215e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022166:	83 fa 1f             	cmp    edx,0x1f
c0022169:	77 23                	ja     c002218e <SoundDevice::removeChannel(int)+0x30>
c002216b:	8d 14 90             	lea    edx,[eax+edx*4]
c002216e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022175:	74 17                	je     c002218e <SoundDevice::removeChannel(int)+0x30>
c0022177:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022181:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022187:	75 05                	jne    c002218e <SoundDevice::removeChannel(int)+0x30>
c0022189:	8b 00                	mov    eax,DWORD PTR [eax]
c002218b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002218e:	c3                   	ret    
c002218f:	90                   	nop

c0022190 <SoundDevice::floatTo16(float*, short*, int)>:
c0022190:	57                   	push   edi
c0022191:	56                   	push   esi
c0022192:	53                   	push   ebx
c0022193:	31 db                	xor    ebx,ebx
c0022195:	83 ec 10             	sub    esp,0x10
c0022198:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002219c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221a0:	0f 8d d0 00 00 00    	jge    c0022276 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00221a6:	83 ec 0c             	sub    esp,0xc
c00221a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221ad:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221b0:	e8 1a 62 00 00       	call   c00283cf <__extendsfdf2>
c00221b5:	83 c4 10             	add    esp,0x10
c00221b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221c0:	68 00 00 f0 3f       	push   0x3ff00000
c00221c5:	6a 00                	push   0x0
c00221c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221cf:	e8 87 51 00 00       	call   c002735b <__adddf3>
c00221d4:	83 c4 10             	add    esp,0x10
c00221d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221df:	68 00 00 e0 3f       	push   0x3fe00000
c00221e4:	6a 00                	push   0x0
c00221e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ee:	e8 e5 57 00 00       	call   c00279d8 <__muldf3>
c00221f3:	83 c4 10             	add    esp,0x10
c00221f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221fe:	68 c0 ff df 40       	push   0x40dfffc0
c0022203:	6a 00                	push   0x0
c0022205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220d:	e8 c6 57 00 00       	call   c00279d8 <__muldf3>
c0022212:	59                   	pop    ecx
c0022213:	5f                   	pop    edi
c0022214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022218:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002221c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022224:	e8 82 60 00 00       	call   c00282ab <__truncdfsf2>
c0022229:	5a                   	pop    edx
c002222a:	89 c7                	mov    edi,eax
c002222c:	59                   	pop    ecx
c002222d:	68 00 fe ff 46       	push   0x46fffe00
c0022232:	50                   	push   eax
c0022233:	e8 1d 51 00 00       	call   c0027355 <__gesf2>
c0022238:	83 c4 10             	add    esp,0x10
c002223b:	85 c0                	test   eax,eax
c002223d:	78 08                	js     c0022247 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002223f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022245:	eb 29                	jmp    c0022270 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022247:	50                   	push   eax
c0022248:	50                   	push   eax
c0022249:	6a 00                	push   0x0
c002224b:	57                   	push   edi
c002224c:	e8 08 51 00 00       	call   c0027359 <__lesf2>
c0022251:	83 c4 10             	add    esp,0x10
c0022254:	85 c0                	test   eax,eax
c0022256:	7f 08                	jg     c0022260 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022258:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002225e:	eb 10                	jmp    c0022270 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022260:	83 ec 0c             	sub    esp,0xc
c0022263:	57                   	push   edi
c0022264:	e8 03 62 00 00       	call   c002846c <lrintf>
c0022269:	83 c4 10             	add    esp,0x10
c002226c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022270:	43                   	inc    ebx
c0022271:	e9 26 ff ff ff       	jmp    c002219c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022276:	83 c4 10             	add    esp,0x10
c0022279:	5b                   	pop    ebx
c002227a:	5e                   	pop    esi
c002227b:	5f                   	pop    edi
c002227c:	c3                   	ret    
c002227d:	90                   	nop

c002227e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002227e:	57                   	push   edi
c002227f:	56                   	push   esi
c0022280:	53                   	push   ebx
c0022281:	31 db                	xor    ebx,ebx
c0022283:	83 ec 10             	sub    esp,0x10
c0022286:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002228a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002228e:	0f 8d cb 00 00 00    	jge    c002235f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022294:	83 ec 0c             	sub    esp,0xc
c0022297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002229b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002229e:	e8 2c 61 00 00       	call   c00283cf <__extendsfdf2>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222ae:	68 00 00 f0 3f       	push   0x3ff00000
c00222b3:	6a 00                	push   0x0
c00222b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222bd:	e8 99 50 00 00       	call   c002735b <__adddf3>
c00222c2:	83 c4 10             	add    esp,0x10
c00222c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222cd:	68 00 00 e0 3f       	push   0x3fe00000
c00222d2:	6a 00                	push   0x0
c00222d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222dc:	e8 f7 56 00 00       	call   c00279d8 <__muldf3>
c00222e1:	83 c4 10             	add    esp,0x10
c00222e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222ec:	68 00 00 60 40       	push   0x40600000
c00222f1:	6a 00                	push   0x0
c00222f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222fb:	e8 d8 56 00 00       	call   c00279d8 <__muldf3>
c0022300:	59                   	pop    ecx
c0022301:	5f                   	pop    edi
c0022302:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022306:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002230a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002230e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022312:	e8 94 5f 00 00       	call   c00282ab <__truncdfsf2>
c0022317:	5a                   	pop    edx
c0022318:	89 c7                	mov    edi,eax
c002231a:	59                   	pop    ecx
c002231b:	68 00 00 fe 42       	push   0x42fe0000
c0022320:	50                   	push   eax
c0022321:	e8 2f 50 00 00       	call   c0027355 <__gesf2>
c0022326:	83 c4 10             	add    esp,0x10
c0022329:	85 c0                	test   eax,eax
c002232b:	78 06                	js     c0022333 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002232d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022331:	eb 26                	jmp    c0022359 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022333:	50                   	push   eax
c0022334:	50                   	push   eax
c0022335:	6a 00                	push   0x0
c0022337:	57                   	push   edi
c0022338:	e8 1c 50 00 00       	call   c0027359 <__lesf2>
c002233d:	83 c4 10             	add    esp,0x10
c0022340:	85 c0                	test   eax,eax
c0022342:	7f 06                	jg     c002234a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022344:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022348:	eb 0f                	jmp    c0022359 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002234a:	83 ec 0c             	sub    esp,0xc
c002234d:	57                   	push   edi
c002234e:	e8 19 61 00 00       	call   c002846c <lrintf>
c0022353:	83 c4 10             	add    esp,0x10
c0022356:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022359:	43                   	inc    ebx
c002235a:	e9 2b ff ff ff       	jmp    c002228a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002235f:	83 c4 10             	add    esp,0x10
c0022362:	5b                   	pop    ebx
c0022363:	5e                   	pop    esi
c0022364:	5f                   	pop    edi
c0022365:	c3                   	ret    

c0022366 <SoundDevice::getAudio(int, float*, float*)>:
c0022366:	55                   	push   ebp
c0022367:	31 ed                	xor    ebp,ebp
c0022369:	57                   	push   edi
c002236a:	56                   	push   esi
c002236b:	31 f6                	xor    esi,esi
c002236d:	53                   	push   ebx
c002236e:	83 ec 20             	sub    esp,0x20
c0022371:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022375:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022379:	c1 e0 02             	shl    eax,0x2
c002237c:	50                   	push   eax
c002237d:	6a 00                	push   0x0
c002237f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022383:	e8 c8 e3 fd ff       	call   c0000750 <memset>
c0022388:	83 c4 10             	add    esp,0x10
c002238b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022393:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002239a:	85 c9                	test   ecx,ecx
c002239c:	74 52                	je     c00223f0 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002239e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223a2:	99                   	cdq    
c00223a3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00223a9:	50                   	push   eax
c00223aa:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00223b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00223b4:	51                   	push   ecx
c00223b5:	e8 da f9 ff ff       	call   c0021d94 <SoundChannel::unbuffer(float*, int, int)>
c00223ba:	31 d2                	xor    edx,edx
c00223bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223c0:	83 c4 10             	add    esp,0x10
c00223c3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00223c7:	7d 1e                	jge    c00223e7 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00223c9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00223cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00223d1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00223d4:	89 cf                	mov    edi,ecx
c00223d6:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00223dc:	0f af ca             	imul   ecx,edx
c00223df:	42                   	inc    edx
c00223e0:	01 e9                	add    ecx,ebp
c00223e2:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00223e5:	eb dc                	jmp    c00223c3 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00223e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00223eb:	45                   	inc    ebp
c00223ec:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00223f0:	46                   	inc    esi
c00223f1:	83 fe 20             	cmp    esi,0x20
c00223f4:	75 9d                	jne    c0022393 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00223f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223fa:	83 c4 1c             	add    esp,0x1c
c00223fd:	5b                   	pop    ebx
c00223fe:	5e                   	pop    esi
c00223ff:	5f                   	pop    edi
c0022400:	5d                   	pop    ebp
c0022401:	c3                   	ret    

c0022402 <PCI::open(int, int, void*)>:
c0022402:	83 ec 18             	sub    esp,0x18
c0022405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022409:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002240d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022413:	8b 10                	mov    edx,DWORD PTR [eax]
c0022415:	50                   	push   eax
c0022416:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022419:	31 c0                	xor    eax,eax
c002241b:	83 c4 1c             	add    esp,0x1c
c002241e:	c3                   	ret    
c002241f:	90                   	nop

c0022420 <PCI::close(int, int, void*)>:
c0022420:	31 c0                	xor    eax,eax
c0022422:	c3                   	ret    
c0022423:	90                   	nop

c0022424 <PCI::PCI()>:
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242b:	83 ec 08             	sub    esp,0x8
c002242e:	68 d8 c0 02 c0       	push   0xc002c0d8
c0022433:	50                   	push   eax
c0022434:	e8 f7 0f ff ff       	call   c0013430 <Bus::Bus(char const*)>
c0022439:	83 c4 10             	add    esp,0x10
c002243c:	ba c4 c1 02 c0       	mov    edx,0xc002c1c4
c0022441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022445:	89 10                	mov    DWORD PTR [eax],edx
c0022447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022459:	a3 e4 1d 03 c0       	mov    ds:0xc0031de4,eax
c002245e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022462:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022468:	0f b6 d0             	movzx  edx,al
c002246b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022480:	0f b6 d0             	movzx  edx,al
c0022483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022487:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002248c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022490:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022496:	8d 50 01             	lea    edx,[eax+0x1]
c0022499:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002249d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224a3:	0f b6 d0             	movzx  edx,al
c00224a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224ae:	83 c9 c0             	or     ecx,0xffffffc0
c00224b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224b5:	90                   	nop
c00224b6:	83 c4 0c             	add    esp,0xc
c00224b9:	c3                   	ret    

c00224ba <PCI::readBAR8(unsigned int, int)>:
c00224ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224c2:	f6 c2 01             	test   dl,0x1
c00224c5:	74 07                	je     c00224ce <PCI::readBAR8(unsigned int, int)+0x14>
c00224c7:	83 e2 fc             	and    edx,0xfffffffc
c00224ca:	01 c2                	add    edx,eax
c00224cc:	ec                   	in     al,dx
c00224cd:	c3                   	ret    
c00224ce:	83 e2 f0             	and    edx,0xfffffff0
c00224d1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00224d4:	c3                   	ret    
c00224d5:	90                   	nop

c00224d6 <PCI::readBAR16(unsigned int, int)>:
c00224d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224de:	f6 c2 01             	test   dl,0x1
c00224e1:	74 08                	je     c00224eb <PCI::readBAR16(unsigned int, int)+0x15>
c00224e3:	83 e2 fc             	and    edx,0xfffffffc
c00224e6:	01 c2                	add    edx,eax
c00224e8:	66 ed                	in     ax,dx
c00224ea:	c3                   	ret    
c00224eb:	83 e2 f0             	and    edx,0xfffffff0
c00224ee:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00224f2:	c3                   	ret    
c00224f3:	90                   	nop

c00224f4 <PCI::readBAR32(unsigned int, int)>:
c00224f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224fc:	f6 c2 01             	test   dl,0x1
c00224ff:	74 07                	je     c0022508 <PCI::readBAR32(unsigned int, int)+0x14>
c0022501:	83 e2 fc             	and    edx,0xfffffffc
c0022504:	01 c2                	add    edx,eax
c0022506:	ed                   	in     eax,dx
c0022507:	c3                   	ret    
c0022508:	83 e2 f0             	and    edx,0xfffffff0
c002250b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002250e:	c3                   	ret    
c002250f:	90                   	nop

c0022510 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002251c:	f6 c2 01             	test   dl,0x1
c002251f:	74 07                	je     c0022528 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022521:	83 e2 fc             	and    edx,0xfffffffc
c0022524:	01 ca                	add    edx,ecx
c0022526:	ee                   	out    dx,al
c0022527:	c3                   	ret    
c0022528:	83 e2 f0             	and    edx,0xfffffff0
c002252b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002252e:	c3                   	ret    
c002252f:	90                   	nop

c0022530 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022530:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022538:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002253c:	f6 c2 01             	test   dl,0x1
c002253f:	74 08                	je     c0022549 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022541:	83 e2 fc             	and    edx,0xfffffffc
c0022544:	01 ca                	add    edx,ecx
c0022546:	66 ef                	out    dx,ax
c0022548:	c3                   	ret    
c0022549:	83 e2 f0             	and    edx,0xfffffff0
c002254c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022550:	c3                   	ret    
c0022551:	90                   	nop

c0022552 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022552:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002255a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002255e:	f6 c2 01             	test   dl,0x1
c0022561:	74 07                	je     c002256a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022563:	83 e2 fc             	and    edx,0xfffffffc
c0022566:	01 ca                	add    edx,ecx
c0022568:	ef                   	out    dx,eax
c0022569:	c3                   	ret    
c002256a:	83 e2 f0             	and    edx,0xfffffff0
c002256d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022570:	c3                   	ret    
c0022571:	90                   	nop

c0022572 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022572:	55                   	push   ebp
c0022573:	57                   	push   edi
c0022574:	56                   	push   esi
c0022575:	53                   	push   ebx
c0022576:	83 ec 0c             	sub    esp,0xc
c0022579:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002257d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022581:	89 f0                	mov    eax,esi
c0022583:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022587:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002258b:	3c 07                	cmp    al,0x7
c002258d:	76 10                	jbe    c002259f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002258f:	83 ec 0c             	sub    esp,0xc
c0022592:	68 e0 c0 02 c0       	push   0xc002c0e0
c0022597:	e8 5f 79 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002259c:	83 c4 10             	add    esp,0x10
c002259f:	80 fb 0f             	cmp    bl,0xf
c00225a2:	76 10                	jbe    c00225b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00225a4:	83 ec 0c             	sub    esp,0xc
c00225a7:	68 10 c1 02 c0       	push   0xc002c110
c00225ac:	e8 4a 79 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	8d 04 36             	lea    eax,[esi+esi*1]
c00225b7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225bc:	83 c8 f0             	or     eax,0xfffffff0
c00225bf:	ee                   	out    dx,al
c00225c0:	ba fa 0c 00 00       	mov    edx,0xcfa
c00225c5:	89 e8                	mov    eax,ebp
c00225c7:	ee                   	out    dx,al
c00225c8:	83 c4 0c             	add    esp,0xc
c00225cb:	89 d8                	mov    eax,ebx
c00225cd:	66 81 e7 fc 00       	and    di,0xfc
c00225d2:	5b                   	pop    ebx
c00225d3:	c1 e0 08             	shl    eax,0x8
c00225d6:	5e                   	pop    esi
c00225d7:	09 f8                	or     eax,edi
c00225d9:	5f                   	pop    edi
c00225da:	66 0d 00 c0          	or     ax,0xc000
c00225de:	5d                   	pop    ebp
c00225df:	c3                   	ret    

c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225e0:	57                   	push   edi
c00225e1:	56                   	push   esi
c00225e2:	53                   	push   ebx
c00225e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00225e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225eb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00225f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00225f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00225fd:	83 ff 01             	cmp    edi,0x1
c0022600:	75 3e                	jne    c0022640 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022602:	89 de                	mov    esi,ebx
c0022604:	0f b6 c0             	movzx  eax,al
c0022607:	81 e6 fc 00 00 00    	and    esi,0xfc
c002260d:	c1 e0 10             	shl    eax,0x10
c0022610:	0f b6 c9             	movzx  ecx,cl
c0022613:	09 f0                	or     eax,esi
c0022615:	c1 e1 08             	shl    ecx,0x8
c0022618:	0f b6 d2             	movzx  edx,dl
c002261b:	09 c8                	or     eax,ecx
c002261d:	c1 e2 0b             	shl    edx,0xb
c0022620:	09 d0                	or     eax,edx
c0022622:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022627:	0d 00 00 00 80       	or     eax,0x80000000
c002262c:	ef                   	out    dx,eax
c002262d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022632:	ed                   	in     eax,dx
c0022633:	83 e3 02             	and    ebx,0x2
c0022636:	0f b6 cb             	movzx  ecx,bl
c0022639:	c1 e1 03             	shl    ecx,0x3
c002263c:	d3 e8                	shr    eax,cl
c002263e:	eb 43                	jmp    c0022683 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022640:	83 ff 02             	cmp    edi,0x2
c0022643:	75 2c                	jne    c0022671 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022645:	83 ec 0c             	sub    esp,0xc
c0022648:	0f b6 c9             	movzx  ecx,cl
c002264b:	0f b6 d2             	movzx  edx,dl
c002264e:	0f b6 fb             	movzx  edi,bl
c0022651:	0f b6 c0             	movzx  eax,al
c0022654:	57                   	push   edi
c0022655:	51                   	push   ecx
c0022656:	52                   	push   edx
c0022657:	50                   	push   eax
c0022658:	56                   	push   esi
c0022659:	e8 14 ff ff ff       	call   c0022572 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002265e:	89 c2                	mov    edx,eax
c0022660:	ed                   	in     eax,dx
c0022661:	83 e3 02             	and    ebx,0x2
c0022664:	83 c4 20             	add    esp,0x20
c0022667:	0f b6 cb             	movzx  ecx,bl
c002266a:	c1 e1 03             	shl    ecx,0x3
c002266d:	d3 e8                	shr    eax,cl
c002266f:	eb 12                	jmp    c0022683 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022671:	83 ec 0c             	sub    esp,0xc
c0022674:	68 40 c1 02 c0       	push   0xc002c140
c0022679:	e8 7d 78 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002267e:	83 c4 10             	add    esp,0x10
c0022681:	31 c0                	xor    eax,eax
c0022683:	5b                   	pop    ebx
c0022684:	5e                   	pop    esi
c0022685:	5f                   	pop    edi
c0022686:	c3                   	ret    
c0022687:	90                   	nop

c0022688 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022688:	83 ec 18             	sub    esp,0x18
c002268b:	6a 00                	push   0x0
c002268d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022692:	50                   	push   eax
c0022693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022698:	50                   	push   eax
c0022699:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269e:	50                   	push   eax
c002269f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226a3:	e8 38 ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a8:	83 c4 2c             	add    esp,0x2c
c00226ab:	c3                   	ret    

c00226ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00226ac:	83 ec 18             	sub    esp,0x18
c00226af:	6a 0e                	push   0xe
c00226b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b6:	50                   	push   eax
c00226b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226bc:	50                   	push   eax
c00226bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c2:	50                   	push   eax
c00226c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226c7:	e8 14 ff ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226cc:	83 c4 2c             	add    esp,0x2c
c00226cf:	0f b6 c0             	movzx  eax,al
c00226d2:	c3                   	ret    
c00226d3:	90                   	nop

c00226d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00226d4:	55                   	push   ebp
c00226d5:	57                   	push   edi
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	83 ec 18             	sub    esp,0x18
c00226db:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00226e0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00226e5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00226ea:	6a 0a                	push   0xa
c00226ec:	56                   	push   esi
c00226ed:	55                   	push   ebp
c00226ee:	57                   	push   edi
c00226ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00226f3:	e8 e8 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226f8:	83 c4 14             	add    esp,0x14
c00226fb:	89 c3                	mov    ebx,eax
c00226fd:	6a 0a                	push   0xa
c00226ff:	0f b6 db             	movzx  ebx,bl
c0022702:	56                   	push   esi
c0022703:	55                   	push   ebp
c0022704:	57                   	push   edi
c0022705:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022709:	e8 d2 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002270e:	83 c4 2c             	add    esp,0x2c
c0022711:	25 00 ff 00 00       	and    eax,0xff00
c0022716:	09 d8                	or     eax,ebx
c0022718:	5b                   	pop    ebx
c0022719:	5e                   	pop    esi
c002271a:	5f                   	pop    edi
c002271b:	5d                   	pop    ebp
c002271c:	c3                   	ret    
c002271d:	90                   	nop

c002271e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002271e:	83 ec 18             	sub    esp,0x18
c0022721:	6a 08                	push   0x8
c0022723:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022728:	50                   	push   eax
c0022729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002272e:	50                   	push   eax
c002272f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022734:	50                   	push   eax
c0022735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022739:	e8 a2 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002273e:	83 c4 2c             	add    esp,0x2c
c0022741:	0f b6 c4             	movzx  eax,ah
c0022744:	c3                   	ret    
c0022745:	90                   	nop

c0022746 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022746:	83 ec 18             	sub    esp,0x18
c0022749:	6a 08                	push   0x8
c002274b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022750:	50                   	push   eax
c0022751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022756:	50                   	push   eax
c0022757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002275c:	50                   	push   eax
c002275d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022761:	e8 7a fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022766:	83 c4 2c             	add    esp,0x2c
c0022769:	c3                   	ret    

c002276a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002276a:	83 ec 18             	sub    esp,0x18
c002276d:	6a 3c                	push   0x3c
c002276f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022774:	50                   	push   eax
c0022775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002277a:	50                   	push   eax
c002277b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022780:	50                   	push   eax
c0022781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022785:	e8 56 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002278a:	83 c4 2c             	add    esp,0x2c
c002278d:	c3                   	ret    

c002278e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002278e:	83 ec 18             	sub    esp,0x18
c0022791:	6a 18                	push   0x18
c0022793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022798:	50                   	push   eax
c0022799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002279e:	50                   	push   eax
c002279f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227a4:	50                   	push   eax
c00227a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227a9:	e8 32 fe ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227ae:	83 c4 2c             	add    esp,0x2c
c00227b1:	0f b6 c4             	movzx  eax,ah
c00227b4:	c3                   	ret    
c00227b5:	90                   	nop

c00227b6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00227b6:	55                   	push   ebp
c00227b7:	57                   	push   edi
c00227b8:	56                   	push   esi
c00227b9:	53                   	push   ebx
c00227ba:	83 ec 28             	sub    esp,0x28
c00227bd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00227c1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00227c6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00227cb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00227d0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00227d7:	8d 43 12             	lea    eax,[ebx+0x12]
c00227da:	83 c3 10             	add    ebx,0x10
c00227dd:	0f b6 c0             	movzx  eax,al
c00227e0:	0f b6 db             	movzx  ebx,bl
c00227e3:	50                   	push   eax
c00227e4:	51                   	push   ecx
c00227e5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00227e9:	57                   	push   edi
c00227ea:	55                   	push   ebp
c00227eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227ef:	e8 ec fd ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227f4:	83 c4 14             	add    esp,0x14
c00227f7:	89 c6                	mov    esi,eax
c00227f9:	53                   	push   ebx
c00227fa:	c1 e6 10             	shl    esi,0x10
c00227fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022801:	51                   	push   ecx
c0022802:	57                   	push   edi
c0022803:	55                   	push   ebp
c0022804:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022808:	e8 d3 fd ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002280d:	83 c4 3c             	add    esp,0x3c
c0022810:	0f b7 c0             	movzx  eax,ax
c0022813:	5b                   	pop    ebx
c0022814:	09 f0                	or     eax,esi
c0022816:	5e                   	pop    esi
c0022817:	5f                   	pop    edi
c0022818:	5d                   	pop    ebp
c0022819:	c3                   	ret    

c002281a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002281a:	55                   	push   ebp
c002281b:	57                   	push   edi
c002281c:	56                   	push   esi
c002281d:	53                   	push   ebx
c002281e:	83 ec 0c             	sub    esp,0xc
c0022821:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022825:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022829:	89 f5                	mov    ebp,esi
c002282b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022831:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022839:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002283d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022841:	83 f9 01             	cmp    ecx,0x1
c0022844:	75 5d                	jne    c00228a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022846:	0f b6 c8             	movzx  ecx,al
c0022849:	0f b6 d2             	movzx  edx,dl
c002284c:	c1 e1 10             	shl    ecx,0x10
c002284f:	c1 e2 0b             	shl    edx,0xb
c0022852:	89 f0                	mov    eax,esi
c0022854:	25 fc 00 00 00       	and    eax,0xfc
c0022859:	09 c1                	or     ecx,eax
c002285b:	89 e8                	mov    eax,ebp
c002285d:	0f b6 c0             	movzx  eax,al
c0022860:	c1 e0 08             	shl    eax,0x8
c0022863:	09 c1                	or     ecx,eax
c0022865:	09 d1                	or     ecx,edx
c0022867:	ba f8 0c 00 00       	mov    edx,0xcf8
c002286c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022872:	89 c8                	mov    eax,ecx
c0022874:	ef                   	out    dx,eax
c0022875:	ba fc 0c 00 00       	mov    edx,0xcfc
c002287a:	ed                   	in     eax,dx
c002287b:	0f b7 db             	movzx  ebx,bx
c002287e:	83 e6 02             	and    esi,0x2
c0022881:	74 0a                	je     c002288d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022883:	0f b7 d0             	movzx  edx,ax
c0022886:	c1 e3 10             	shl    ebx,0x10
c0022889:	09 d3                	or     ebx,edx
c002288b:	eb 05                	jmp    c0022892 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002288d:	66 31 c0             	xor    ax,ax
c0022890:	09 c3                	or     ebx,eax
c0022892:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022897:	89 c8                	mov    eax,ecx
c0022899:	ef                   	out    dx,eax
c002289a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002289f:	89 d8                	mov    eax,ebx
c00228a1:	eb 41                	jmp    c00228e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00228a3:	83 f9 02             	cmp    ecx,0x2
c00228a6:	75 45                	jne    c00228ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00228a8:	83 ec 0c             	sub    esp,0xc
c00228ab:	0f b6 d2             	movzx  edx,dl
c00228ae:	89 f1                	mov    ecx,esi
c00228b0:	0f b6 c0             	movzx  eax,al
c00228b3:	0f b6 f1             	movzx  esi,cl
c00228b6:	89 e9                	mov    ecx,ebp
c00228b8:	56                   	push   esi
c00228b9:	0f b6 c9             	movzx  ecx,cl
c00228bc:	51                   	push   ecx
c00228bd:	52                   	push   edx
c00228be:	50                   	push   eax
c00228bf:	57                   	push   edi
c00228c0:	e8 ad fc ff ff       	call   c0022572 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228c5:	89 c2                	mov    edx,eax
c00228c7:	ed                   	in     eax,dx
c00228c8:	83 c4 20             	add    esp,0x20
c00228cb:	0f b7 db             	movzx  ebx,bx
c00228ce:	f6 c2 02             	test   dl,0x2
c00228d1:	74 0c                	je     c00228df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00228d3:	0f b7 c8             	movzx  ecx,ax
c00228d6:	89 d8                	mov    eax,ebx
c00228d8:	c1 e0 10             	shl    eax,0x10
c00228db:	09 c8                	or     eax,ecx
c00228dd:	eb 05                	jmp    c00228e4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00228df:	66 31 c0             	xor    ax,ax
c00228e2:	09 d8                	or     eax,ebx
c00228e4:	ef                   	out    dx,eax
c00228e5:	83 c4 0c             	add    esp,0xc
c00228e8:	5b                   	pop    ebx
c00228e9:	5e                   	pop    esi
c00228ea:	5f                   	pop    edi
c00228eb:	5d                   	pop    ebp
c00228ec:	c3                   	ret    
c00228ed:	c7 44 24 20 40 c1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c140
c00228f5:	83 c4 0c             	add    esp,0xc
c00228f8:	5b                   	pop    ebx
c00228f9:	5e                   	pop    esi
c00228fa:	5f                   	pop    edi
c00228fb:	5d                   	pop    ebp
c00228fc:	e9 fa 75 ff ff       	jmp    c0019efb <Krnl::panic(char const*)>
c0022901:	90                   	nop

c0022902 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022902:	55                   	push   ebp
c0022903:	57                   	push   edi
c0022904:	56                   	push   esi
c0022905:	53                   	push   ebx
c0022906:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002290c:	80 3d f0 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031df0,0x0
c0022913:	0f 85 84 00 00 00    	jne    c002299d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022919:	83 ec 0c             	sub    esp,0xc
c002291c:	68 14 01 00 00       	push   0x114
c0022921:	e8 73 cc fe ff       	call   c000f599 <malloc>
c0022926:	83 c4 0c             	add    esp,0xc
c0022929:	89 c3                	mov    ebx,eax
c002292b:	ff 35 f0 0f 03 c0    	push   DWORD PTR ds:0xc0030ff0
c0022931:	68 46 c1 02 c0       	push   0xc002c146
c0022936:	50                   	push   eax
c0022937:	e8 b2 03 ff ff       	call   c0012cee <File::File(char const*, Process*)>
c002293c:	5a                   	pop    edx
c002293d:	59                   	pop    ecx
c002293e:	6a 01                	push   0x1
c0022940:	53                   	push   ebx
c0022941:	e8 0c 04 ff ff       	call   c0012d52 <File::open(FileOpenMode)>
c0022946:	83 c4 0c             	add    esp,0xc
c0022949:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002294d:	50                   	push   eax
c002294e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022952:	50                   	push   eax
c0022953:	53                   	push   ebx
c0022954:	e8 a5 06 ff ff       	call   c0012ffe <File::stat(unsigned long long*, bool*)>
c0022959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002295d:	40                   	inc    eax
c002295e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022961:	e8 33 cc fe ff       	call   c000f599 <malloc>
c0022966:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002296a:	a3 ec 1d 03 c0       	mov    ds:0xc0031dec,eax
c002296f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022973:	5e                   	pop    esi
c0022974:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022976:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002297a:	51                   	push   ecx
c002297b:	50                   	push   eax
c002297c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022980:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022984:	53                   	push   ebx
c0022985:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022988:	83 c4 14             	add    esp,0x14
c002298b:	53                   	push   ebx
c002298c:	e8 1f 04 ff ff       	call   c0012db0 <File::close()>
c0022991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022995:	83 c4 10             	add    esp,0x10
c0022998:	a3 e8 1d 03 c0       	mov    ds:0xc0031de8,eax
c002299d:	a1 e8 1d 03 c0       	mov    eax,ds:0xc0031de8
c00229a2:	8b 15 ec 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031dec
c00229a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00229ab:	31 ff                	xor    edi,edi
c00229ad:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00229b5:	31 f6                	xor    esi,esi
c00229b7:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00229bc:	31 db                	xor    ebx,ebx
c00229be:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00229c6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00229cb:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00229d2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00229d6:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00229dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00229e1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229e4:	0f 8e 6b 01 00 00    	jle    c0022b55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00229ea:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229ed:	d4 40                	aam    0x40
c00229ef:	d5 39                	aad    0x39
c00229f1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00229f5:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00229f9:	d4 40                	aam    0x40
c00229fb:	d5 39                	aad    0x39
c00229fd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022a01:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022a05:	d4 40                	aam    0x40
c0022a07:	d5 39                	aad    0x39
c0022a09:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022a0d:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022a11:	d4 40                	aam    0x40
c0022a13:	d5 39                	aad    0x39
c0022a15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022a19:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022a1d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a21:	3c 56                	cmp    al,0x56
c0022a23:	74 45                	je     c0022a6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022a25:	d4 40                	aam    0x40
c0022a27:	d5 39                	aad    0x39
c0022a29:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022a2c:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022a30:	0f b6 c9             	movzx  ecx,cl
c0022a33:	c1 e1 04             	shl    ecx,0x4
c0022a36:	d4 40                	aam    0x40
c0022a38:	d5 39                	aad    0x39
c0022a3a:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a3d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022a41:	0f b6 db             	movzx  ebx,bl
c0022a44:	09 cb                	or     ebx,ecx
c0022a46:	c1 e3 04             	shl    ebx,0x4
c0022a49:	d4 40                	aam    0x40
c0022a4b:	d5 39                	aad    0x39
c0022a4d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022a50:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022a54:	0f b6 c9             	movzx  ecx,cl
c0022a57:	09 cb                	or     ebx,ecx
c0022a59:	c1 e3 04             	shl    ebx,0x4
c0022a5c:	89 d9                	mov    ecx,ebx
c0022a5e:	d4 40                	aam    0x40
c0022a60:	d5 39                	aad    0x39
c0022a62:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a65:	0f b6 db             	movzx  ebx,bl
c0022a68:	09 cb                	or     ebx,ecx
c0022a6a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022a6e:	80 f9 44             	cmp    cl,0x44
c0022a71:	74 47                	je     c0022aba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022a73:	88 c8                	mov    al,cl
c0022a75:	d4 40                	aam    0x40
c0022a77:	d5 39                	aad    0x39
c0022a79:	83 e8 30             	sub    eax,0x30
c0022a7c:	0f b6 e8             	movzx  ebp,al
c0022a7f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022a83:	c1 e5 04             	shl    ebp,0x4
c0022a86:	d4 40                	aam    0x40
c0022a88:	d5 39                	aad    0x39
c0022a8a:	83 e8 30             	sub    eax,0x30
c0022a8d:	0f b6 f0             	movzx  esi,al
c0022a90:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022a94:	09 ee                	or     esi,ebp
c0022a96:	c1 e6 04             	shl    esi,0x4
c0022a99:	d4 40                	aam    0x40
c0022a9b:	d5 39                	aad    0x39
c0022a9d:	83 e8 30             	sub    eax,0x30
c0022aa0:	0f b6 e8             	movzx  ebp,al
c0022aa3:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022aa7:	09 ee                	or     esi,ebp
c0022aa9:	c1 e6 04             	shl    esi,0x4
c0022aac:	89 f5                	mov    ebp,esi
c0022aae:	d4 40                	aam    0x40
c0022ab0:	d5 39                	aad    0x39
c0022ab2:	83 e8 30             	sub    eax,0x30
c0022ab5:	0f b6 f0             	movzx  esi,al
c0022ab8:	09 ee                	or     esi,ebp
c0022aba:	83 c7 10             	add    edi,0x10
c0022abd:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ac1:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022ac4:	3c 0a                	cmp    al,0xa
c0022ac6:	74 09                	je     c0022ad1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022ac8:	45                   	inc    ebp
c0022ac9:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022acc:	75 16                	jne    c0022ae4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022ace:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022ad1:	3c 0a                	cmp    al,0xa
c0022ad3:	0f 94 c0             	sete   al
c0022ad6:	0f b6 c0             	movzx  eax,al
c0022ad9:	01 c7                	add    edi,eax
c0022adb:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022ae0:	75 0c                	jne    c0022aee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022ae2:	eb 15                	jmp    c0022af9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022ae4:	47                   	inc    edi
c0022ae5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022ae8:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022aec:	eb d3                	jmp    c0022ac1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022aee:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022af3:	0f 85 e8 fe ff ff    	jne    c00229e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022af9:	80 f9 44             	cmp    cl,0x44
c0022afc:	74 0b                	je     c0022b09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022afe:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022b03:	0f 85 d8 fe ff ff    	jne    c00229e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b09:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022b0d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022b11:	c1 e1 04             	shl    ecx,0x4
c0022b14:	83 e8 30             	sub    eax,0x30
c0022b17:	09 c8                	or     eax,ecx
c0022b19:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022b1d:	0f 85 be fe ff ff    	jne    c00229e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b23:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022b27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022b2b:	c1 e1 04             	shl    ecx,0x4
c0022b2e:	83 e8 30             	sub    eax,0x30
c0022b31:	09 c8                	or     eax,ecx
c0022b33:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022b37:	0f 85 a4 fe ff ff    	jne    c00229e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b3d:	50                   	push   eax
c0022b3e:	50                   	push   eax
c0022b3f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022b43:	50                   	push   eax
c0022b44:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022b4b:	e8 bc dc fd ff       	call   c000080c <strcpy>
c0022b50:	83 c4 10             	add    esp,0x10
c0022b53:	eb 15                	jmp    c0022b6a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022b55:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b5c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022b67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022b6a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b71:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b77:	5b                   	pop    ebx
c0022b78:	5e                   	pop    esi
c0022b79:	5f                   	pop    edi
c0022b7a:	5d                   	pop    ebp
c0022b7b:	c3                   	ret    

c0022b7c <PCI::checkBus(unsigned char)>:
c0022b7c:	56                   	push   esi
c0022b7d:	53                   	push   ebx
c0022b7e:	31 db                	xor    ebx,ebx
c0022b80:	51                   	push   ecx
c0022b81:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b86:	52                   	push   edx
c0022b87:	53                   	push   ebx
c0022b88:	43                   	inc    ebx
c0022b89:	56                   	push   esi
c0022b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b8e:	e8 37 03 00 00       	call   c0022eca <PCI::checkDevice(unsigned char, unsigned char)>
c0022b93:	83 c4 10             	add    esp,0x10
c0022b96:	83 fb 20             	cmp    ebx,0x20
c0022b99:	75 eb                	jne    c0022b86 <PCI::checkBus(unsigned char)+0xa>
c0022b9b:	58                   	pop    eax
c0022b9c:	5b                   	pop    ebx
c0022b9d:	5e                   	pop    esi
c0022b9e:	c3                   	ret    
c0022b9f:	90                   	nop

c0022ba0 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ba0:	55                   	push   ebp
c0022ba1:	57                   	push   edi
c0022ba2:	56                   	push   esi
c0022ba3:	53                   	push   ebx
c0022ba4:	83 ec 1c             	sub    esp,0x1c
c0022ba7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bab:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bb1:	0f 84 52 01 00 00    	je     c0022d09 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bb7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bbb:	66 81 f9 06 04       	cmp    cx,0x406
c0022bc0:	75 2c                	jne    c0022bee <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bc2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bc7:	50                   	push   eax
c0022bc8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bcd:	50                   	push   eax
c0022bce:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bd3:	50                   	push   eax
c0022bd4:	56                   	push   esi
c0022bd5:	e8 b4 fb ff ff       	call   c002278e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022bda:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bde:	0f b6 c0             	movzx  eax,al
c0022be1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022be5:	83 c4 2c             	add    esp,0x2c
c0022be8:	5b                   	pop    ebx
c0022be9:	5e                   	pop    esi
c0022bea:	5f                   	pop    edi
c0022beb:	5d                   	pop    ebp
c0022bec:	eb 8e                	jmp    c0022b7c <PCI::checkBus(unsigned char)>
c0022bee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bf2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bfc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c00:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c04:	88 d3                	mov    bl,dl
c0022c06:	85 c0                	test   eax,eax
c0022c08:	74 33                	je     c0022c3d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c0a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c0d:	85 d2                	test   edx,edx
c0022c0f:	74 28                	je     c0022c39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c11:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c17:	31 ef                	xor    edi,ebp
c0022c19:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c1f:	75 18                	jne    c0022c39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c25:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c2b:	75 0c                	jne    c0022c39 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c2d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c33:	0f 84 d0 00 00 00    	je     c0022d09 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c3b:	eb c9                	jmp    c0022c06 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c3d:	66 81 f9 01 06       	cmp    cx,0x601
c0022c42:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c46:	75 19                	jne    c0022c61 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c48:	83 ec 0c             	sub    esp,0xc
c0022c4b:	68 64 01 00 00       	push   0x164
c0022c50:	e8 44 c9 fe ff       	call   c000f599 <malloc>
c0022c55:	89 c5                	mov    ebp,eax
c0022c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c5a:	e8 85 0e 00 00       	call   c0023ae4 <SATABus::SATABus()>
c0022c5f:	eb 1e                	jmp    c0022c7f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c61:	66 81 f9 01 01       	cmp    cx,0x101
c0022c66:	75 60                	jne    c0022cc8 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c68:	83 ec 0c             	sub    esp,0xc
c0022c6b:	68 70 02 00 00       	push   0x270
c0022c70:	e8 24 c9 fe ff       	call   c000f599 <malloc>
c0022c75:	89 c5                	mov    ebp,eax
c0022c77:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c7a:	e8 0f 03 00 00       	call   c0022f8e <IDE::IDE()>
c0022c7f:	58                   	pop    eax
c0022c80:	5a                   	pop    edx
c0022c81:	55                   	push   ebp
c0022c82:	56                   	push   esi
c0022c83:	e8 40 0f ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0022c88:	83 ec 1c             	sub    esp,0x1c
c0022c8b:	b9 09 00 00 00       	mov    ecx,0x9
c0022c90:	fc                   	cld    
c0022c91:	89 e7                	mov    edi,esp
c0022c93:	89 de                	mov    esi,ebx
c0022c95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c97:	55                   	push   ebp
c0022c98:	e8 3d 0e ff ff       	call   c0013ada <Device::preOpenPCI(PCIDeviceInfo)>
c0022c9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ca0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022ca4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cac:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cb4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cbf:	83 c4 4c             	add    esp,0x4c
c0022cc2:	5b                   	pop    ebx
c0022cc3:	5e                   	pop    esi
c0022cc4:	5f                   	pop    edi
c0022cc5:	5d                   	pop    ebp
c0022cc6:	ff e0                	jmp    eax
c0022cc8:	83 ec 0c             	sub    esp,0xc
c0022ccb:	68 58 01 00 00       	push   0x158
c0022cd0:	e8 c4 c8 fe ff       	call   c000f599 <malloc>
c0022cd5:	89 c5                	mov    ebp,eax
c0022cd7:	58                   	pop    eax
c0022cd8:	5a                   	pop    edx
c0022cd9:	68 5f c1 02 c0       	push   0xc002c15f
c0022cde:	55                   	push   ebp
c0022cdf:	e8 ee 11 ff ff       	call   c0013ed2 <DriverlessDevice::DriverlessDevice(char const*)>
c0022ce4:	59                   	pop    ecx
c0022ce5:	5f                   	pop    edi
c0022ce6:	55                   	push   ebp
c0022ce7:	56                   	push   esi
c0022ce8:	e8 db 0e ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0022ced:	b9 09 00 00 00       	mov    ecx,0x9
c0022cf2:	fc                   	cld    
c0022cf3:	89 df                	mov    edi,ebx
c0022cf5:	89 de                	mov    esi,ebx
c0022cf7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cf9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cfd:	83 c4 2c             	add    esp,0x2c
c0022d00:	5b                   	pop    ebx
c0022d01:	5e                   	pop    esi
c0022d02:	5f                   	pop    edi
c0022d03:	5d                   	pop    ebp
c0022d04:	e9 d1 0d ff ff       	jmp    c0013ada <Device::preOpenPCI(PCIDeviceInfo)>
c0022d09:	83 c4 1c             	add    esp,0x1c
c0022d0c:	5b                   	pop    ebx
c0022d0d:	5e                   	pop    esi
c0022d0e:	5f                   	pop    edi
c0022d0f:	5d                   	pop    ebp
c0022d10:	c3                   	ret    
c0022d11:	90                   	nop

c0022d12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d12:	55                   	push   ebp
c0022d13:	57                   	push   edi
c0022d14:	56                   	push   esi
c0022d15:	53                   	push   ebx
c0022d16:	83 ec 68             	sub    esp,0x68
c0022d19:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022d1d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022d24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022d2f:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022d34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d38:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022d3f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022d44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d48:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022d4d:	6a 0c                	push   0xc
c0022d4f:	57                   	push   edi
c0022d50:	53                   	push   ebx
c0022d51:	56                   	push   esi
c0022d52:	55                   	push   ebp
c0022d53:	e8 88 f8 ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d58:	83 c4 20             	add    esp,0x20
c0022d5b:	57                   	push   edi
c0022d5c:	53                   	push   ebx
c0022d5d:	56                   	push   esi
c0022d5e:	55                   	push   ebp
c0022d5f:	e8 70 f9 ff ff       	call   c00226d4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d64:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022d69:	57                   	push   edi
c0022d6a:	53                   	push   ebx
c0022d6b:	56                   	push   esi
c0022d6c:	55                   	push   ebp
c0022d6d:	e8 f8 f9 ff ff       	call   c002276a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d72:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022d76:	83 c4 14             	add    esp,0x14
c0022d79:	6a 3c                	push   0x3c
c0022d7b:	57                   	push   edi
c0022d7c:	53                   	push   ebx
c0022d7d:	56                   	push   esi
c0022d7e:	55                   	push   ebp
c0022d7f:	e8 5c f8 ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d84:	0f b6 c4             	movzx  eax,ah
c0022d87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022d8b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022d8f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022d93:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0022d98:	83 c4 20             	add    esp,0x20
c0022d9b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022da1:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022da8:	74 7c                	je     c0022e26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022daa:	31 c0                	xor    eax,eax
c0022dac:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c0022db2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022db8:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022dbe:	7e 66                	jle    c0022e26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022dc0:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022dc3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dca:	39 cb                	cmp    ebx,ecx
c0022dcc:	75 55                	jne    c0022e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022dce:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022dd5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022dd9:	75 48                	jne    c0022e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022ddf:	83 ec 0c             	sub    esp,0xc
c0022de2:	68 79 c1 02 c0       	push   0xc002c179
c0022de7:	e8 a3 f9 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0022dec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022df0:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c0022df6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022dfa:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e00:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022e08:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022e0c:	52                   	push   edx
c0022e0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e11:	53                   	push   ebx
c0022e12:	68 9e c1 02 c0       	push   0xc002c19e
c0022e17:	e8 73 f9 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0022e1c:	83 c4 20             	add    esp,0x20
c0022e1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e23:	40                   	inc    eax
c0022e24:	eb 86                	jmp    c0022dac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022e26:	31 d2                	xor    edx,edx
c0022e28:	83 ec 0c             	sub    esp,0xc
c0022e2b:	57                   	push   edi
c0022e2c:	53                   	push   ebx
c0022e2d:	56                   	push   esi
c0022e2e:	52                   	push   edx
c0022e2f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022e33:	55                   	push   ebp
c0022e34:	e8 7d f9 ff ff       	call   c00227b6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022e3d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e41:	42                   	inc    edx
c0022e42:	83 c4 20             	add    esp,0x20
c0022e45:	83 fa 06             	cmp    edx,0x6
c0022e48:	75 de                	jne    c0022e28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022e4a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022e4f:	83 ec 0c             	sub    esp,0xc
c0022e52:	86 e0                	xchg   al,ah
c0022e54:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022e59:	6a 02                	push   0x2
c0022e5b:	57                   	push   edi
c0022e5c:	53                   	push   ebx
c0022e5d:	56                   	push   esi
c0022e5e:	55                   	push   ebp
c0022e5f:	e8 7c f7 ff ff       	call   c00225e0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e64:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022e69:	83 c4 20             	add    esp,0x20
c0022e6c:	57                   	push   edi
c0022e6d:	53                   	push   ebx
c0022e6e:	56                   	push   esi
c0022e6f:	55                   	push   ebp
c0022e70:	e8 a9 f8 ff ff       	call   c002271e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e75:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e79:	57                   	push   edi
c0022e7a:	53                   	push   ebx
c0022e7b:	56                   	push   esi
c0022e7c:	55                   	push   ebp
c0022e7d:	e8 06 f8 ff ff       	call   c0022688 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e82:	b9 09 00 00 00       	mov    ecx,0x9
c0022e87:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022e8c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022e90:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022e94:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e98:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022e9c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ea0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022ea4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022ea8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022eac:	83 ec 0c             	sub    esp,0xc
c0022eaf:	fc                   	cld    
c0022eb0:	89 e7                	mov    edi,esp
c0022eb2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022eb6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eb8:	55                   	push   ebp
c0022eb9:	e8 e2 fc ff ff       	call   c0022ba0 <PCI::foundDevice(PCIDeviceInfo)>
c0022ebe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022ec4:	5b                   	pop    ebx
c0022ec5:	5e                   	pop    esi
c0022ec6:	5f                   	pop    edi
c0022ec7:	5d                   	pop    ebp
c0022ec8:	c3                   	ret    
c0022ec9:	90                   	nop

c0022eca <PCI::checkDevice(unsigned char, unsigned char)>:
c0022eca:	55                   	push   ebp
c0022ecb:	57                   	push   edi
c0022ecc:	56                   	push   esi
c0022ecd:	53                   	push   ebx
c0022ece:	83 ec 0c             	sub    esp,0xc
c0022ed1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ed5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022eda:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022edf:	6a 00                	push   0x0
c0022ee1:	56                   	push   esi
c0022ee2:	57                   	push   edi
c0022ee3:	55                   	push   ebp
c0022ee4:	e8 9f f7 ff ff       	call   c0022688 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee9:	6a 00                	push   0x0
c0022eeb:	56                   	push   esi
c0022eec:	57                   	push   edi
c0022eed:	55                   	push   ebp
c0022eee:	e8 1f fe ff ff       	call   c0022d12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef3:	83 c4 20             	add    esp,0x20
c0022ef6:	6a 00                	push   0x0
c0022ef8:	56                   	push   esi
c0022ef9:	57                   	push   edi
c0022efa:	55                   	push   ebp
c0022efb:	e8 ac f7 ff ff       	call   c00226ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f00:	83 c4 10             	add    esp,0x10
c0022f03:	84 c0                	test   al,al
c0022f05:	79 27                	jns    c0022f2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f07:	bb 01 00 00 00       	mov    ebx,0x1
c0022f0c:	53                   	push   ebx
c0022f0d:	56                   	push   esi
c0022f0e:	57                   	push   edi
c0022f0f:	55                   	push   ebp
c0022f10:	e8 73 f7 ff ff       	call   c0022688 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f15:	83 c4 10             	add    esp,0x10
c0022f18:	66 40                	inc    ax
c0022f1a:	74 0c                	je     c0022f28 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f1c:	53                   	push   ebx
c0022f1d:	56                   	push   esi
c0022f1e:	57                   	push   edi
c0022f1f:	55                   	push   ebp
c0022f20:	e8 ed fd ff ff       	call   c0022d12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f25:	83 c4 10             	add    esp,0x10
c0022f28:	43                   	inc    ebx
c0022f29:	83 fb 08             	cmp    ebx,0x8
c0022f2c:	75 de                	jne    c0022f0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f2e:	83 c4 0c             	add    esp,0xc
c0022f31:	5b                   	pop    ebx
c0022f32:	5e                   	pop    esi
c0022f33:	5f                   	pop    edi
c0022f34:	5d                   	pop    ebp
c0022f35:	c3                   	ret    

c0022f36 <PCI::detect()>:
c0022f36:	56                   	push   esi
c0022f37:	53                   	push   ebx
c0022f38:	53                   	push   ebx
c0022f39:	31 db                	xor    ebx,ebx
c0022f3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f3f:	6a 00                	push   0x0
c0022f41:	6a 00                	push   0x0
c0022f43:	6a 00                	push   0x0
c0022f45:	56                   	push   esi
c0022f46:	e8 61 f7 ff ff       	call   c00226ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f4b:	83 c4 10             	add    esp,0x10
c0022f4e:	a8 80                	test   al,0x80
c0022f50:	75 21                	jne    c0022f73 <PCI::detect()+0x3d>
c0022f52:	51                   	push   ecx
c0022f53:	51                   	push   ecx
c0022f54:	6a 00                	push   0x0
c0022f56:	56                   	push   esi
c0022f57:	e8 20 fc ff ff       	call   c0022b7c <PCI::checkBus(unsigned char)>
c0022f5c:	83 c4 10             	add    esp,0x10
c0022f5f:	eb 24                	jmp    c0022f85 <PCI::detect()+0x4f>
c0022f61:	52                   	push   edx
c0022f62:	52                   	push   edx
c0022f63:	53                   	push   ebx
c0022f64:	43                   	inc    ebx
c0022f65:	56                   	push   esi
c0022f66:	e8 11 fc ff ff       	call   c0022b7c <PCI::checkBus(unsigned char)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	83 fb 08             	cmp    ebx,0x8
c0022f71:	74 12                	je     c0022f85 <PCI::detect()+0x4f>
c0022f73:	53                   	push   ebx
c0022f74:	6a 00                	push   0x0
c0022f76:	6a 00                	push   0x0
c0022f78:	56                   	push   esi
c0022f79:	e8 0a f7 ff ff       	call   c0022688 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7e:	83 c4 10             	add    esp,0x10
c0022f81:	66 40                	inc    ax
c0022f83:	74 dc                	je     c0022f61 <PCI::detect()+0x2b>
c0022f85:	58                   	pop    eax
c0022f86:	5b                   	pop    ebx
c0022f87:	5e                   	pop    esi
c0022f88:	c3                   	ret    
c0022f89:	90                   	nop

c0022f8a <IDE::close(int, int, void*)>:
c0022f8a:	83 c8 ff             	or     eax,0xffffffff
c0022f8d:	c3                   	ret    

c0022f8e <IDE::IDE()>:
c0022f8e:	83 ec 0c             	sub    esp,0xc
c0022f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f95:	83 ec 08             	sub    esp,0x8
c0022f98:	68 e8 c1 02 c0       	push   0xc002c1e8
c0022f9d:	50                   	push   eax
c0022f9e:	e8 d3 0f ff ff       	call   c0013f76 <HardDiskController::HardDiskController(char const*)>
c0022fa3:	83 c4 10             	add    esp,0x10
c0022fa6:	ba 78 c2 02 c0       	mov    edx,0xc002c278
c0022fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022faf:	89 10                	mov    DWORD PTR [eax],edx
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fbc:	90                   	nop
c0022fbd:	83 c4 0c             	add    esp,0xc
c0022fc0:	c3                   	ret    
c0022fc1:	90                   	nop

c0022fc2 <IDE::prepareInterrupt(unsigned char)>:
c0022fc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fcb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fd3:	c3                   	ret    

c0022fd4 <selectDrive(unsigned char, unsigned char)>:
c0022fd4:	c3                   	ret    
c0022fd5:	90                   	nop

c0022fd6 <IDE::getBase(unsigned char)>:
c0022fd6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fe7:	c3                   	ret    

c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fe8:	55                   	push   ebp
c0022fe9:	57                   	push   edi
c0022fea:	56                   	push   esi
c0022feb:	53                   	push   ebx
c0022fec:	83 ec 1c             	sub    esp,0x1c
c0022fef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ff7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ffe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023002:	80 f9 03             	cmp    cl,0x3
c0023005:	77 51                	ja     c0023058 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002300b:	0f b6 f2             	movzx  esi,dl
c002300e:	0f b6 db             	movzx  ebx,bl
c0023011:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023014:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023018:	83 ca 80             	or     edx,0xffffff80
c002301b:	0f b6 d2             	movzx  edx,dl
c002301e:	52                   	push   edx
c002301f:	6a 0c                	push   0xc
c0023021:	56                   	push   esi
c0023022:	57                   	push   edi
c0023023:	e8 c0 ff ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023028:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002302d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023031:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023035:	ee                   	out    dx,al
c0023036:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002303b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002303f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023043:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023047:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002304f:	83 c4 2c             	add    esp,0x2c
c0023052:	5b                   	pop    ebx
c0023053:	5e                   	pop    esi
c0023054:	5f                   	pop    edi
c0023055:	5d                   	pop    ebp
c0023056:	eb 90                	jmp    c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023058:	80 fb 07             	cmp    bl,0x7
c002305b:	77 12                	ja     c002306f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002305d:	0f b6 d2             	movzx  edx,dl
c0023060:	0f b6 db             	movzx  ebx,bl
c0023063:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002306b:	89 da                	mov    edx,ebx
c002306d:	eb 2f                	jmp    c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002306f:	80 fb 0d             	cmp    bl,0xd
c0023072:	77 13                	ja     c0023087 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023074:	0f b6 d2             	movzx  edx,dl
c0023077:	0f b6 db             	movzx  ebx,bl
c002307a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023081:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023085:	eb 17                	jmp    c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023087:	80 fb 15             	cmp    bl,0x15
c002308a:	77 13                	ja     c002309f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002308c:	0f b6 d2             	movzx  edx,dl
c002308f:	0f b6 db             	movzx  ebx,bl
c0023092:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002309a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002309e:	ee                   	out    dx,al
c002309f:	83 c4 1c             	add    esp,0x1c
c00230a2:	5b                   	pop    ebx
c00230a3:	5e                   	pop    esi
c00230a4:	5f                   	pop    edi
c00230a5:	5d                   	pop    ebp
c00230a6:	c3                   	ret    
c00230a7:	90                   	nop

c00230a8 <IDE::read(unsigned char, unsigned char)>:
c00230a8:	55                   	push   ebp
c00230a9:	57                   	push   edi
c00230aa:	56                   	push   esi
c00230ab:	53                   	push   ebx
c00230ac:	83 ec 1c             	sub    esp,0x1c
c00230af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230b7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230be:	3c 03                	cmp    al,0x3
c00230c0:	77 43                	ja     c0023105 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230c2:	0f b6 f2             	movzx  esi,dl
c00230c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230c8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230cc:	83 c8 80             	or     eax,0xffffff80
c00230cf:	0f b6 c0             	movzx  eax,al
c00230d2:	50                   	push   eax
c00230d3:	6a 0c                	push   0xc
c00230d5:	56                   	push   esi
c00230d6:	57                   	push   edi
c00230d7:	e8 0c ff ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230dc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230e1:	0f b6 c3             	movzx  eax,bl
c00230e4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230e8:	ec                   	in     al,dx
c00230e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230ed:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230f2:	52                   	push   edx
c00230f3:	6a 0c                	push   0xc
c00230f5:	56                   	push   esi
c00230f6:	57                   	push   edi
c00230f7:	e8 ec fe ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230fc:	83 c4 20             	add    esp,0x20
c00230ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023103:	eb 49                	jmp    c002314e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023105:	80 fb 07             	cmp    bl,0x7
c0023108:	77 12                	ja     c002311c <IDE::read(unsigned char, unsigned char)+0x74>
c002310a:	0f b6 d2             	movzx  edx,dl
c002310d:	0f b6 c3             	movzx  eax,bl
c0023110:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023118:	89 c2                	mov    edx,eax
c002311a:	eb 31                	jmp    c002314d <IDE::read(unsigned char, unsigned char)+0xa5>
c002311c:	80 fb 0d             	cmp    bl,0xd
c002311f:	77 13                	ja     c0023134 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023121:	0f b6 d2             	movzx  edx,dl
c0023124:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002312b:	0f b6 d3             	movzx  edx,bl
c002312e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023132:	eb 19                	jmp    c002314d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023134:	31 c0                	xor    eax,eax
c0023136:	80 fb 15             	cmp    bl,0x15
c0023139:	77 13                	ja     c002314e <IDE::read(unsigned char, unsigned char)+0xa6>
c002313b:	0f b6 d2             	movzx  edx,dl
c002313e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023146:	0f b6 d3             	movzx  edx,bl
c0023149:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002314d:	ec                   	in     al,dx
c002314e:	83 c4 1c             	add    esp,0x1c
c0023151:	5b                   	pop    ebx
c0023152:	5e                   	pop    esi
c0023153:	5f                   	pop    edi
c0023154:	5d                   	pop    ebp
c0023155:	c3                   	ret    

c0023156 <IDE::waitInterrupt(unsigned char)>:
c0023156:	55                   	push   ebp
c0023157:	57                   	push   edi
c0023158:	56                   	push   esi
c0023159:	53                   	push   ebx
c002315a:	31 db                	xor    ebx,ebx
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023163:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023168:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023170:	89 e8                	mov    eax,ebp
c0023172:	84 c0                	test   al,al
c0023174:	75 34                	jne    c00231aa <IDE::waitInterrupt(unsigned char)+0x54>
c0023176:	52                   	push   edx
c0023177:	6a 0c                	push   0xc
c0023179:	56                   	push   esi
c002317a:	57                   	push   edi
c002317b:	e8 28 ff ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023180:	83 c4 10             	add    esp,0x10
c0023183:	a8 01                	test   al,0x1
c0023185:	75 2b                	jne    c00231b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023187:	f6 c3 04             	test   bl,0x4
c002318a:	75 16                	jne    c00231a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c002318c:	83 fb 32             	cmp    ebx,0x32
c002318f:	7e 11                	jle    c00231a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023191:	50                   	push   eax
c0023192:	50                   	push   eax
c0023193:	6a 00                	push   0x0
c0023195:	68 80 96 98 00       	push   0x989680
c002319a:	e8 c6 ab ff ff       	call   c001dd65 <nanoSleep(unsigned long long)>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	83 fb 3c             	cmp    ebx,0x3c
c00231a5:	74 0b                	je     c00231b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231a7:	43                   	inc    ebx
c00231a8:	eb be                	jmp    c0023168 <IDE::waitInterrupt(unsigned char)+0x12>
c00231aa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231b2:	83 c4 0c             	add    esp,0xc
c00231b5:	89 e8                	mov    eax,ebp
c00231b7:	5b                   	pop    ebx
c00231b8:	5e                   	pop    esi
c00231b9:	5f                   	pop    edi
c00231ba:	5d                   	pop    ebp
c00231bb:	c3                   	ret    

c00231bc <ideChannel0IRQHandler(regs*, void*)>:
c00231bc:	83 ec 10             	sub    esp,0x10
c00231bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231ca:	6a 07                	push   0x7
c00231cc:	6a 00                	push   0x0
c00231ce:	50                   	push   eax
c00231cf:	e8 d4 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00231d4:	83 c4 1c             	add    esp,0x1c
c00231d7:	c3                   	ret    

c00231d8 <ideChannel1IRQHandler(regs*, void*)>:
c00231d8:	83 ec 10             	sub    esp,0x10
c00231db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231df:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231e6:	6a 07                	push   0x7
c00231e8:	6a 01                	push   0x1
c00231ea:	50                   	push   eax
c00231eb:	e8 b8 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00231f0:	83 c4 1c             	add    esp,0x1c
c00231f3:	c3                   	ret    

c00231f4 <IDE::enableIRQs(unsigned char, bool)>:
c00231f4:	57                   	push   edi
c00231f5:	56                   	push   esi
c00231f6:	be 04 00 00 00       	mov    esi,0x4
c00231fb:	53                   	push   ebx
c00231fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023205:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002320a:	0f 94 c0             	sete   al
c002320d:	d1 e0                	shl    eax,1
c002320f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023216:	0f b6 c0             	movzx  eax,al
c0023219:	50                   	push   eax
c002321a:	6a 0c                	push   0xc
c002321c:	57                   	push   edi
c002321d:	53                   	push   ebx
c002321e:	e8 c5 fd ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023223:	83 c4 10             	add    esp,0x10
c0023226:	50                   	push   eax
c0023227:	6a 0c                	push   0xc
c0023229:	57                   	push   edi
c002322a:	53                   	push   ebx
c002322b:	e8 78 fe ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023230:	83 c4 10             	add    esp,0x10
c0023233:	4e                   	dec    esi
c0023234:	75 f0                	jne    c0023226 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023236:	5b                   	pop    ebx
c0023237:	5e                   	pop    esi
c0023238:	5f                   	pop    edi
c0023239:	c3                   	ret    

c002323a <IDE::open(int, int, void*)>:
c002323a:	55                   	push   ebp
c002323b:	57                   	push   edi
c002323c:	56                   	push   esi
c002323d:	53                   	push   ebx
c002323e:	83 ec 1c             	sub    esp,0x1c
c0023241:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023245:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002324e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023257:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002325e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023265:	0f 85 b0 02 00 00    	jne    c002351b <IDE::open(int, int, void*)+0x2e1>
c002326b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023271:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023275:	83 e0 7f             	and    eax,0x7f
c0023278:	3c 05                	cmp    al,0x5
c002327a:	74 04                	je     c0023280 <IDE::open(int, int, void*)+0x46>
c002327c:	3c 0f                	cmp    al,0xf
c002327e:	75 32                	jne    c00232b2 <IDE::open(int, int, void*)+0x78>
c0023280:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023286:	83 e0 fc             	and    eax,0xfffffffc
c0023289:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023290:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023296:	83 e0 fc             	and    eax,0xfffffffc
c0023299:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232a0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232a6:	83 e0 fc             	and    eax,0xfffffffc
c00232a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232b0:	eb 14                	jmp    c00232c6 <IDE::open(int, int, void*)+0x8c>
c00232b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232cd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232d8:	89 c6                	mov    esi,eax
c00232da:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232df:	c1 e6 10             	shl    esi,0x10
c00232e2:	89 e8                	mov    eax,ebp
c00232e4:	89 fa                	mov    edx,edi
c00232e6:	c1 e0 0b             	shl    eax,0xb
c00232e9:	09 f0                	or     eax,esi
c00232eb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232f2:	c1 e6 08             	shl    esi,0x8
c00232f5:	09 c6                	or     esi,eax
c00232f7:	89 f0                	mov    eax,esi
c00232f9:	0d 08 00 00 80       	or     eax,0x80000008
c00232fe:	ef                   	out    dx,eax
c00232ff:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023304:	89 ca                	mov    edx,ecx
c0023306:	ed                   	in     eax,dx
c0023307:	c1 e8 10             	shr    eax,0x10
c002330a:	3d ff ff 00 00       	cmp    eax,0xffff
c002330f:	0f 84 f5 00 00 00    	je     c002340a <IDE::open(int, int, void*)+0x1d0>
c0023315:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002331b:	89 fa                	mov    edx,edi
c002331d:	89 f0                	mov    eax,esi
c002331f:	ef                   	out    dx,eax
c0023320:	b0 fe                	mov    al,0xfe
c0023322:	89 ca                	mov    edx,ecx
c0023324:	ee                   	out    dx,al
c0023325:	89 f0                	mov    eax,esi
c0023327:	89 fa                	mov    edx,edi
c0023329:	ef                   	out    dx,eax
c002332a:	89 ca                	mov    edx,ecx
c002332c:	ed                   	in     eax,dx
c002332d:	3c fe                	cmp    al,0xfe
c002332f:	0f 85 a9 00 00 00    	jne    c00233de <IDE::open(int, int, void*)+0x1a4>
c0023335:	8b 15 a8 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa8
c002333b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023342:	74 33                	je     c0023377 <IDE::open(int, int, void*)+0x13d>
c0023344:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002334a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002334e:	40                   	inc    eax
c002334f:	83 ec 0c             	sub    esp,0xc
c0023352:	0f b6 c0             	movzx  eax,al
c0023355:	50                   	push   eax
c0023356:	55                   	push   ebp
c0023357:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002335b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023361:	51                   	push   ecx
c0023362:	e8 4d 48 ff ff       	call   c0017bb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023367:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002336c:	83 c4 1c             	add    esp,0x1c
c002336f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023375:	eb 0a                	jmp    c0023381 <IDE::open(int, int, void*)+0x147>
c0023377:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023381:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023388:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002338f:	c1 e1 10             	shl    ecx,0x10
c0023392:	c1 e0 08             	shl    eax,0x8
c0023395:	bf f8 0c 00 00       	mov    edi,0xcf8
c002339a:	09 c1                	or     ecx,eax
c002339c:	89 fa                	mov    edx,edi
c002339e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233a5:	c1 e0 0b             	shl    eax,0xb
c00233a8:	09 c1                	or     ecx,eax
c00233aa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233b0:	89 c8                	mov    eax,ecx
c00233b2:	ef                   	out    dx,eax
c00233b3:	be fc 0c 00 00       	mov    esi,0xcfc
c00233b8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233be:	89 f2                	mov    edx,esi
c00233c0:	ee                   	out    dx,al
c00233c1:	89 c8                	mov    eax,ecx
c00233c3:	89 fa                	mov    edx,edi
c00233c5:	ef                   	out    dx,eax
c00233c6:	89 f2                	mov    edx,esi
c00233c8:	ed                   	in     eax,dx
c00233c9:	0f b6 c0             	movzx  eax,al
c00233cc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233d2:	74 46                	je     c002341a <IDE::open(int, int, void*)+0x1e0>
c00233d4:	83 ec 0c             	sub    esp,0xc
c00233d7:	68 00 c2 02 c0       	push   0xc002c200
c00233dc:	eb 34                	jmp    c0023412 <IDE::open(int, int, void*)+0x1d8>
c00233de:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233e7:	75 17                	jne    c0023400 <IDE::open(int, int, void*)+0x1c6>
c00233e9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233ee:	74 07                	je     c00233f7 <IDE::open(int, int, void*)+0x1bd>
c00233f0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233f5:	75 09                	jne    c0023400 <IDE::open(int, int, void*)+0x1c6>
c00233f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233fe:	eb 1a                	jmp    c002341a <IDE::open(int, int, void*)+0x1e0>
c0023400:	83 ec 0c             	sub    esp,0xc
c0023403:	68 08 c2 02 c0       	push   0xc002c208
c0023408:	eb 08                	jmp    c0023412 <IDE::open(int, int, void*)+0x1d8>
c002340a:	83 ec 0c             	sub    esp,0xc
c002340d:	68 39 c2 02 c0       	push   0xc002c239
c0023412:	e8 e4 6a ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0023417:	83 c4 10             	add    esp,0x10
c002341a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023421:	79 1a                	jns    c002343d <IDE::open(int, int, void*)+0x203>
c0023423:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023429:	83 e0 fc             	and    eax,0xfffffffc
c002342c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023433:	83 c0 08             	add    eax,0x8
c0023436:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002343d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023443:	89 c2                	mov    edx,eax
c0023445:	83 e2 0f             	and    edx,0xf
c0023448:	66 83 fa 08          	cmp    dx,0x8
c002344c:	75 0a                	jne    c0023458 <IDE::open(int, int, void*)+0x21e>
c002344e:	83 e8 02             	sub    eax,0x2
c0023451:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023458:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002345e:	89 c2                	mov    edx,eax
c0023460:	83 e2 0f             	and    edx,0xf
c0023463:	66 83 fa 08          	cmp    dx,0x8
c0023467:	75 0a                	jne    c0023473 <IDE::open(int, int, void*)+0x239>
c0023469:	83 e8 02             	sub    eax,0x2
c002346c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023473:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002347a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023481:	89 d0                	mov    eax,edx
c0023483:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023486:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002348a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002348e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023491:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023496:	0f b6 c9             	movzx  ecx,cl
c0023499:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234a0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234a7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234ab:	8d 50 02             	lea    edx,[eax+0x2]
c00234ae:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b3:	0f b6 d2             	movzx  edx,dl
c00234b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234bc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234bf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234c7:	8d 48 03             	lea    ecx,[eax+0x3]
c00234ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234cf:	0f b6 c9             	movzx  ecx,cl
c00234d2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234df:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234e3:	8d 50 04             	lea    edx,[eax+0x4]
c00234e6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234f8:	66 85 f6             	test   si,si
c00234fb:	74 5b                	je     c0023558 <IDE::open(int, int, void*)+0x31e>
c00234fd:	0f b6 d2             	movzx  edx,dl
c0023500:	83 c0 05             	add    eax,0x5
c0023503:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023506:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002350a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002350e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023514:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023519:	eb 3d                	jmp    c0023558 <IDE::open(int, int, void*)+0x31e>
c002351b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023521:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023528:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002352f:	66 05 06 02          	add    ax,0x206
c0023533:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002353a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023541:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023548:	66 05 06 02          	add    ax,0x206
c002354c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023553:	e9 e5 fe ff ff       	jmp    c002343d <IDE::open(int, int, void*)+0x203>
c0023558:	50                   	push   eax
c0023559:	50                   	push   eax
c002355a:	6a 00                	push   0x0
c002355c:	53                   	push   ebx
c002355d:	e8 60 fa ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0023562:	5a                   	pop    edx
c0023563:	59                   	pop    ecx
c0023564:	6a 01                	push   0x1
c0023566:	53                   	push   ebx
c0023567:	e8 56 fa ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c002356c:	83 c4 0c             	add    esp,0xc
c002356f:	6a 00                	push   0x0
c0023571:	6a 00                	push   0x0
c0023573:	53                   	push   ebx
c0023574:	e8 7b fc ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0023579:	83 c4 0c             	add    esp,0xc
c002357c:	6a 00                	push   0x0
c002357e:	6a 01                	push   0x1
c0023580:	53                   	push   ebx
c0023581:	e8 6e fc ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0023586:	83 c4 10             	add    esp,0x10
c0023589:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023590:	74 34                	je     c00235c6 <IDE::open(int, int, void*)+0x38c>
c0023592:	83 ec 0c             	sub    esp,0xc
c0023595:	53                   	push   ebx
c0023596:	6a 01                	push   0x1
c0023598:	68 bc 31 02 c0       	push   0xc00231bc
c002359d:	6a 0e                	push   0xe
c002359f:	53                   	push   ebx
c00235a0:	e8 9b 05 ff ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235a5:	83 c4 14             	add    esp,0x14
c00235a8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235ae:	53                   	push   ebx
c00235af:	6a 01                	push   0x1
c00235b1:	68 d8 31 02 c0       	push   0xc00231d8
c00235b6:	6a 0f                	push   0xf
c00235b8:	53                   	push   ebx
c00235b9:	e8 82 05 ff ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235be:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235c4:	eb 38                	jmp    c00235fe <IDE::open(int, int, void*)+0x3c4>
c00235c6:	83 ec 0c             	sub    esp,0xc
c00235c9:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235d3:	53                   	push   ebx
c00235d4:	6a 00                	push   0x0
c00235d6:	68 bc 31 02 c0       	push   0xc00231bc
c00235db:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e1:	53                   	push   ebx
c00235e2:	e8 59 05 ff ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e7:	83 c4 14             	add    esp,0x14
c00235ea:	53                   	push   ebx
c00235eb:	6a 00                	push   0x0
c00235ed:	68 d8 31 02 c0       	push   0xc00231d8
c00235f2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235f8:	53                   	push   ebx
c00235f9:	e8 42 05 ff ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023600:	83 c4 20             	add    esp,0x20
c0023603:	83 ec 0c             	sub    esp,0xc
c0023606:	53                   	push   ebx
c0023607:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002360a:	83 c4 0c             	add    esp,0xc
c002360d:	6a 07                	push   0x7
c002360f:	6a 00                	push   0x0
c0023611:	53                   	push   ebx
c0023612:	e8 91 fa ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023617:	83 c4 0c             	add    esp,0xc
c002361a:	6a 07                	push   0x7
c002361c:	6a 01                	push   0x1
c002361e:	53                   	push   ebx
c002361f:	e8 84 fa ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023624:	83 c4 0c             	add    esp,0xc
c0023627:	6a 01                	push   0x1
c0023629:	6a 00                	push   0x0
c002362b:	53                   	push   ebx
c002362c:	e8 c3 fb ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0023631:	83 c4 0c             	add    esp,0xc
c0023634:	6a 01                	push   0x1
c0023636:	6a 01                	push   0x1
c0023638:	53                   	push   ebx
c0023639:	e8 b6 fb ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c002363e:	83 c4 2c             	add    esp,0x2c
c0023641:	31 c0                	xor    eax,eax
c0023643:	5b                   	pop    ebx
c0023644:	5e                   	pop    esi
c0023645:	5f                   	pop    edi
c0023646:	5d                   	pop    ebp
c0023647:	c3                   	ret    

c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023648:	55                   	push   ebp
c0023649:	57                   	push   edi
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	83 ec 1c             	sub    esp,0x1c
c002364f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023653:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023657:	8d 50 f8             	lea    edx,[eax-0x8]
c002365a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002365e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023662:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023666:	80 fa 03             	cmp    dl,0x3
c0023669:	77 5d                	ja     c00236c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002366b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002366f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023673:	0f b6 db             	movzx  ebx,bl
c0023676:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023679:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002367d:	83 ca 80             	or     edx,0xffffff80
c0023680:	0f b6 d2             	movzx  edx,dl
c0023683:	52                   	push   edx
c0023684:	6a 0c                	push   0xc
c0023686:	53                   	push   ebx
c0023687:	56                   	push   esi
c0023688:	e8 5b f9 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023692:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023696:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002369a:	0f b6 c0             	movzx  eax,al
c002369d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236a1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236a8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236b4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236bc:	83 c4 2c             	add    esp,0x2c
c00236bf:	5b                   	pop    ebx
c00236c0:	5e                   	pop    esi
c00236c1:	5f                   	pop    edi
c00236c2:	5d                   	pop    ebp
c00236c3:	e9 20 f9 ff ff       	jmp    c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c8:	3c 07                	cmp    al,0x7
c00236ca:	77 10                	ja     c00236dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236cc:	0f b6 db             	movzx  ebx,bl
c00236cf:	0f b6 d0             	movzx  edx,al
c00236d2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236da:	eb 2d                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236dc:	3c 0d                	cmp    al,0xd
c00236de:	77 13                	ja     c00236f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236e0:	0f b6 db             	movzx  ebx,bl
c00236e3:	0f b6 c0             	movzx  eax,al
c00236e6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236ed:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236f1:	eb 16                	jmp    c0023709 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f3:	3c 15                	cmp    al,0x15
c00236f5:	77 14                	ja     c002370b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236f7:	0f b6 db             	movzx  ebx,bl
c00236fa:	0f b6 c0             	movzx  eax,al
c00236fd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023705:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023709:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002370b:	83 c4 1c             	add    esp,0x1c
c002370e:	5b                   	pop    ebx
c002370f:	5e                   	pop    esi
c0023710:	5f                   	pop    edi
c0023711:	5d                   	pop    ebp
c0023712:	c3                   	ret    
c0023713:	90                   	nop

c0023714 <IDE::detect()>:
c0023714:	55                   	push   ebp
c0023715:	57                   	push   edi
c0023716:	56                   	push   esi
c0023717:	53                   	push   ebx
c0023718:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002371e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023725:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002372c:	0f 85 9d 02 00 00    	jne    c00239cf <IDE::detect()+0x2bb>
c0023732:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023739:	31 f6                	xor    esi,esi
c002373b:	31 ed                	xor    ebp,ebp
c002373d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023745:	89 e8                	mov    eax,ebp
c0023747:	c1 e0 06             	shl    eax,0x6
c002374a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023752:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023756:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002375a:	c1 e0 04             	shl    eax,0x4
c002375d:	83 c8 a0             	or     eax,0xffffffa0
c0023760:	0f b6 c0             	movzx  eax,al
c0023763:	50                   	push   eax
c0023764:	6a 06                	push   0x6
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 7b f8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002376d:	83 c4 0c             	add    esp,0xc
c0023770:	6a 0c                	push   0xc
c0023772:	56                   	push   esi
c0023773:	53                   	push   ebx
c0023774:	e8 2f f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023779:	83 c4 0c             	add    esp,0xc
c002377c:	6a 0c                	push   0xc
c002377e:	56                   	push   esi
c002377f:	53                   	push   ebx
c0023780:	e8 23 f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023785:	83 c4 0c             	add    esp,0xc
c0023788:	6a 0c                	push   0xc
c002378a:	56                   	push   esi
c002378b:	53                   	push   ebx
c002378c:	e8 17 f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023791:	83 c4 0c             	add    esp,0xc
c0023794:	6a 0c                	push   0xc
c0023796:	56                   	push   esi
c0023797:	53                   	push   ebx
c0023798:	e8 0b f9 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002379d:	68 ec 00 00 00       	push   0xec
c00237a2:	6a 07                	push   0x7
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 3d f8 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ab:	83 c4 1c             	add    esp,0x1c
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 f1 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	6a 0c                	push   0xc
c00237bc:	56                   	push   esi
c00237bd:	53                   	push   ebx
c00237be:	e8 e5 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237c3:	83 c4 0c             	add    esp,0xc
c00237c6:	6a 0c                	push   0xc
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 d9 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237cf:	83 c4 0c             	add    esp,0xc
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 cd f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237db:	83 c4 0c             	add    esp,0xc
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	53                   	push   ebx
c00237e2:	e8 c1 f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	84 c0                	test   al,al
c00237ec:	0f 84 63 01 00 00    	je     c0023955 <IDE::detect()+0x241>
c00237f2:	31 ff                	xor    edi,edi
c00237f4:	50                   	push   eax
c00237f5:	6a 0c                	push   0xc
c00237f7:	56                   	push   esi
c00237f8:	53                   	push   ebx
c00237f9:	e8 aa f8 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c00237fe:	83 c4 10             	add    esp,0x10
c0023801:	a8 01                	test   al,0x1
c0023803:	0f 85 6d 01 00 00    	jne    c0023976 <IDE::detect()+0x262>
c0023809:	84 c0                	test   al,al
c002380b:	78 04                	js     c0023811 <IDE::detect()+0xfd>
c002380d:	a8 08                	test   al,0x8
c002380f:	75 27                	jne    c0023838 <IDE::detect()+0x124>
c0023811:	47                   	inc    edi
c0023812:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023818:	7e da                	jle    c00237f4 <IDE::detect()+0xe0>
c002381a:	50                   	push   eax
c002381b:	50                   	push   eax
c002381c:	6a 00                	push   0x0
c002381e:	68 40 4b 4c 00       	push   0x4c4b40
c0023823:	e8 3d a5 ff ff       	call   c001dd65 <nanoSleep(unsigned long long)>
c0023828:	83 c4 10             	add    esp,0x10
c002382b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023831:	75 c1                	jne    c00237f4 <IDE::detect()+0xe0>
c0023833:	e9 3e 01 00 00       	jmp    c0023976 <IDE::detect()+0x262>
c0023838:	31 c9                	xor    ecx,ecx
c002383a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002383e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	68 80 00 00 00       	push   0x80
c002384a:	57                   	push   edi
c002384b:	6a 00                	push   0x0
c002384d:	56                   	push   esi
c002384e:	53                   	push   ebx
c002384f:	e8 f4 fd ff ff       	call   c0023648 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023854:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023859:	89 e8                	mov    eax,ebp
c002385b:	89 d1                	mov    ecx,edx
c002385d:	c1 e0 06             	shl    eax,0x6
c0023860:	01 d8                	add    eax,ebx
c0023862:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023869:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023870:	89 f2                	mov    edx,esi
c0023872:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023878:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002387c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023882:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023886:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002388d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023895:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002389c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238a4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238aa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238b7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238bf:	83 c4 20             	add    esp,0x20
c00238c2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238c5:	83 c0 02             	add    eax,0x2
c00238c8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238ce:	83 c7 02             	add    edi,0x2
c00238d1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238d4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238da:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238de:	75 e2                	jne    c00238c2 <IDE::detect()+0x1ae>
c00238e0:	89 e8                	mov    eax,ebp
c00238e2:	c1 e0 06             	shl    eax,0x6
c00238e5:	01 d8                	add    eax,ebx
c00238e7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238ed:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238f4:	66 c1 ea 09          	shr    dx,0x9
c00238f8:	83 e2 01             	and    edx,0x1
c00238fb:	84 c9                	test   cl,cl
c00238fd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023903:	75 22                	jne    c0023927 <IDE::detect()+0x213>
c0023905:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002390c:	74 46                	je     c0023954 <IDE::detect()+0x240>
c002390e:	83 ec 0c             	sub    esp,0xc
c0023911:	68 7c 01 00 00       	push   0x17c
c0023916:	e8 7e bc fe ff       	call   c000f599 <malloc>
c002391b:	89 c7                	mov    edi,eax
c002391d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023920:	e8 15 05 00 00       	call   c0023e3a <ATA::ATA()>
c0023925:	eb 17                	jmp    c002393e <IDE::detect()+0x22a>
c0023927:	83 ec 0c             	sub    esp,0xc
c002392a:	68 80 01 00 00       	push   0x180
c002392f:	e8 65 bc fe ff       	call   c000f599 <malloc>
c0023934:	89 c7                	mov    edi,eax
c0023936:	89 04 24             	mov    DWORD PTR [esp],eax
c0023939:	e8 04 0b 00 00       	call   c0024442 <ATAPI::ATAPI()>
c002393e:	5a                   	pop    edx
c002393f:	59                   	pop    ecx
c0023940:	57                   	push   edi
c0023941:	53                   	push   ebx
c0023942:	e8 81 02 ff ff       	call   c0013bc8 <Device::addChild(Device*)>
c0023947:	8b 07                	mov    eax,DWORD PTR [edi]
c0023949:	53                   	push   ebx
c002394a:	55                   	push   ebp
c002394b:	6a 00                	push   0x0
c002394d:	57                   	push   edi
c002394e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023951:	83 c4 20             	add    esp,0x20
c0023954:	45                   	inc    ebp
c0023955:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002395a:	74 0d                	je     c0023969 <IDE::detect()+0x255>
c002395c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023964:	e9 dc fd ff ff       	jmp    c0023745 <IDE::detect()+0x31>
c0023969:	4e                   	dec    esi
c002396a:	74 63                	je     c00239cf <IDE::detect()+0x2bb>
c002396c:	be 01 00 00 00       	mov    esi,0x1
c0023971:	e9 c7 fd ff ff       	jmp    c002373d <IDE::detect()+0x29>
c0023976:	50                   	push   eax
c0023977:	6a 04                	push   0x4
c0023979:	56                   	push   esi
c002397a:	53                   	push   ebx
c002397b:	e8 28 f7 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023980:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023984:	83 c4 0c             	add    esp,0xc
c0023987:	6a 05                	push   0x5
c0023989:	56                   	push   esi
c002398a:	53                   	push   ebx
c002398b:	e8 18 f7 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023990:	83 c4 10             	add    esp,0x10
c0023993:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023997:	80 fa 14             	cmp    dl,0x14
c002399a:	75 04                	jne    c00239a0 <IDE::detect()+0x28c>
c002399c:	3c eb                	cmp    al,0xeb
c002399e:	eb 07                	jmp    c00239a7 <IDE::detect()+0x293>
c00239a0:	3c 96                	cmp    al,0x96
c00239a2:	75 b1                	jne    c0023955 <IDE::detect()+0x241>
c00239a4:	80 fa 69             	cmp    dl,0x69
c00239a7:	75 ac                	jne    c0023955 <IDE::detect()+0x241>
c00239a9:	68 a1 00 00 00       	push   0xa1
c00239ae:	6a 07                	push   0x7
c00239b0:	56                   	push   esi
c00239b1:	53                   	push   ebx
c00239b2:	e8 31 f6 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b7:	5f                   	pop    edi
c00239b8:	58                   	pop    eax
c00239b9:	6a 00                	push   0x0
c00239bb:	68 40 42 0f 00       	push   0xf4240
c00239c0:	e8 a0 a3 ff ff       	call   c001dd65 <nanoSleep(unsigned long long)>
c00239c5:	83 c4 10             	add    esp,0x10
c00239c8:	b1 01                	mov    cl,0x1
c00239ca:	e9 6b fe ff ff       	jmp    c002383a <IDE::detect()+0x126>
c00239cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239d5:	5b                   	pop    ebx
c00239d6:	5e                   	pop    esi
c00239d7:	5f                   	pop    edi
c00239d8:	5d                   	pop    ebp
c00239d9:	c3                   	ret    

c00239da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239da:	55                   	push   ebp
c00239db:	57                   	push   edi
c00239dc:	56                   	push   esi
c00239dd:	53                   	push   ebx
c00239de:	83 ec 1c             	sub    esp,0x1c
c00239e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239ed:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239f1:	88 c3                	mov    bl,al
c00239f3:	84 c0                	test   al,al
c00239f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239f9:	0f 84 81 00 00 00    	je     c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	68 63 c2 02 c0       	push   0xc002c263
c0023a07:	e8 83 ed fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0023a0c:	83 c4 10             	add    esp,0x10
c0023a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a13:	3c 01                	cmp    al,0x1
c0023a15:	74 63                	je     c0023a7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023a17:	3c 02                	cmp    al,0x2
c0023a19:	75 53                	jne    c0023a6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023a1b:	d1 e6                	shl    esi,1
c0023a1d:	09 ee                	or     esi,ebp
c0023a1f:	50                   	push   eax
c0023a20:	89 f0                	mov    eax,esi
c0023a22:	6a 01                	push   0x1
c0023a24:	0f b6 f0             	movzx  esi,al
c0023a27:	c1 e6 06             	shl    esi,0x6
c0023a2a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a32:	50                   	push   eax
c0023a33:	57                   	push   edi
c0023a34:	e8 6f f6 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023a39:	83 c4 10             	add    esp,0x10
c0023a3c:	a8 01                	test   al,0x1
c0023a3e:	74 02                	je     c0023a42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023a40:	b3 07                	mov    bl,0x7
c0023a42:	a8 02                	test   al,0x2
c0023a44:	74 02                	je     c0023a48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023a46:	b3 03                	mov    bl,0x3
c0023a48:	a8 04                	test   al,0x4
c0023a4a:	74 02                	je     c0023a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023a4c:	b3 14                	mov    bl,0x14
c0023a4e:	a8 08                	test   al,0x8
c0023a50:	74 02                	je     c0023a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023a52:	b3 03                	mov    bl,0x3
c0023a54:	a8 10                	test   al,0x10
c0023a56:	74 02                	je     c0023a5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023a58:	b3 15                	mov    bl,0x15
c0023a5a:	a8 20                	test   al,0x20
c0023a5c:	74 02                	je     c0023a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023a5e:	b3 03                	mov    bl,0x3
c0023a60:	a8 40                	test   al,0x40
c0023a62:	74 02                	je     c0023a66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023a64:	b3 16                	mov    bl,0x16
c0023a66:	84 c0                	test   al,al
c0023a68:	79 16                	jns    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a6a:	b3 0d                	mov    bl,0xd
c0023a6c:	eb 12                	jmp    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a6e:	3c 03                	cmp    al,0x3
c0023a70:	74 0c                	je     c0023a7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023a72:	3c 04                	cmp    al,0x4
c0023a74:	75 0a                	jne    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a76:	b3 08                	mov    bl,0x8
c0023a78:	eb 06                	jmp    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a7a:	b3 13                	mov    bl,0x13
c0023a7c:	eb 02                	jmp    c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a7e:	b3 17                	mov    bl,0x17
c0023a80:	83 c4 1c             	add    esp,0x1c
c0023a83:	88 d8                	mov    al,bl
c0023a85:	5b                   	pop    ebx
c0023a86:	5e                   	pop    esi
c0023a87:	5f                   	pop    edi
c0023a88:	5d                   	pop    ebp
c0023a89:	c3                   	ret    

c0023a8a <IDE::polling(unsigned char, unsigned int)>:
c0023a8a:	57                   	push   edi
c0023a8b:	56                   	push   esi
c0023a8c:	53                   	push   ebx
c0023a8d:	bb 04 00 00 00       	mov    ebx,0x4
c0023a92:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a96:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a9b:	52                   	push   edx
c0023a9c:	6a 0c                	push   0xc
c0023a9e:	56                   	push   esi
c0023a9f:	57                   	push   edi
c0023aa0:	e8 03 f6 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023aa5:	83 c4 10             	add    esp,0x10
c0023aa8:	4b                   	dec    ebx
c0023aa9:	75 f0                	jne    c0023a9b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023aab:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ab0:	50                   	push   eax
c0023ab1:	6a 0c                	push   0xc
c0023ab3:	56                   	push   esi
c0023ab4:	57                   	push   edi
c0023ab5:	e8 ee f5 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023aba:	83 c4 10             	add    esp,0x10
c0023abd:	a8 01                	test   al,0x1
c0023abf:	75 17                	jne    c0023ad8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ac1:	a8 20                	test   al,0x20
c0023ac3:	75 0f                	jne    c0023ad4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023ac5:	4b                   	dec    ebx
c0023ac6:	74 10                	je     c0023ad8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ac8:	84 c0                	test   al,al
c0023aca:	78 e4                	js     c0023ab0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023acc:	a8 08                	test   al,0x8
c0023ace:	74 e0                	je     c0023ab0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ad0:	31 c0                	xor    eax,eax
c0023ad2:	eb 06                	jmp    c0023ada <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ad4:	b0 01                	mov    al,0x1
c0023ad6:	eb 02                	jmp    c0023ada <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ad8:	b0 02                	mov    al,0x2
c0023ada:	5b                   	pop    ebx
c0023adb:	5e                   	pop    esi
c0023adc:	5f                   	pop    edi
c0023add:	c3                   	ret    

c0023ade <SATABus::close(int, int, void*)>:
c0023ade:	31 c0                	xor    eax,eax
c0023ae0:	c3                   	ret    
c0023ae1:	90                   	nop

c0023ae2 <SATABus::detect()>:
c0023ae2:	c3                   	ret    
c0023ae3:	90                   	nop

c0023ae4 <SATABus::SATABus()>:
c0023ae4:	83 ec 0c             	sub    esp,0xc
c0023ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aeb:	83 ec 08             	sub    esp,0x8
c0023aee:	68 9c c2 02 c0       	push   0xc002c29c
c0023af3:	50                   	push   eax
c0023af4:	e8 7d 04 ff ff       	call   c0013f76 <HardDiskController::HardDiskController(char const*)>
c0023af9:	83 c4 10             	add    esp,0x10
c0023afc:	ba f0 c2 02 c0       	mov    edx,0xc002c2f0
c0023b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b05:	89 10                	mov    DWORD PTR [eax],edx
c0023b07:	83 ec 0c             	sub    esp,0xc
c0023b0a:	6a 50                	push   0x50
c0023b0c:	e8 7c bf fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023b11:	83 c4 10             	add    esp,0x10
c0023b14:	89 c2                	mov    edx,eax
c0023b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b1a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b20:	83 ec 0c             	sub    esp,0xc
c0023b23:	6a 50                	push   0x50
c0023b25:	e8 f3 d6 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0023b2a:	83 c4 10             	add    esp,0x10
c0023b2d:	89 c2                	mov    edx,eax
c0023b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b39:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0023b3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b42:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b4c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b52:	83 ec 0c             	sub    esp,0xc
c0023b55:	6a 03                	push   0x3
c0023b57:	6a 50                	push   0x50
c0023b59:	51                   	push   ecx
c0023b5a:	52                   	push   edx
c0023b5b:	50                   	push   eax
c0023b5c:	e8 15 e2 fe ff       	call   c0011d76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b61:	83 c4 20             	add    esp,0x20
c0023b64:	90                   	nop
c0023b65:	83 c4 0c             	add    esp,0xc
c0023b68:	c3                   	ret    
c0023b69:	90                   	nop

c0023b6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b6a:	83 ec 0c             	sub    esp,0xc
c0023b6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b71:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b77:	09 c2                	or     edx,eax
c0023b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b83:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b85:	31 c0                	xor    eax,eax
c0023b87:	c1 e9 08             	shr    ecx,0x8
c0023b8a:	83 e1 0f             	and    ecx,0xf
c0023b8d:	39 c8                	cmp    eax,ecx
c0023b8f:	74 0a                	je     c0023b9b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b91:	f6 c2 01             	test   dl,0x1
c0023b94:	74 18                	je     c0023bae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b96:	d1 ea                	shr    edx,1
c0023b98:	40                   	inc    eax
c0023b99:	eb f2                	jmp    c0023b8d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	68 c0 c2 02 c0       	push   0xc002c2c0
c0023ba3:	e8 53 63 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0023ba8:	83 c4 10             	add    esp,0x10
c0023bab:	83 c8 ff             	or     eax,0xffffffff
c0023bae:	83 c4 0c             	add    esp,0xc
c0023bb1:	c3                   	ret    

c0023bb2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bb6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bb9:	89 c2                	mov    edx,eax
c0023bbb:	c1 ea 08             	shr    edx,0x8
c0023bbe:	83 e2 0f             	and    edx,0xf
c0023bc1:	fe ca                	dec    dl
c0023bc3:	75 31                	jne    c0023bf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bc5:	83 e0 0f             	and    eax,0xf
c0023bc8:	3c 03                	cmp    al,0x3
c0023bca:	75 2a                	jne    c0023bf6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bcc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bcf:	b8 02 00 00 00       	mov    eax,0x2
c0023bd4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023bda:	74 1c                	je     c0023bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bdc:	b8 04 00 00 00       	mov    eax,0x4
c0023be1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023be7:	74 0f                	je     c0023bf8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023be9:	31 c0                	xor    eax,eax
c0023beb:	83 fa 03             	cmp    edx,0x3
c0023bee:	0f 94 c0             	sete   al
c0023bf1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bf5:	c3                   	ret    
c0023bf6:	31 c0                	xor    eax,eax
c0023bf8:	c3                   	ret    
c0023bf9:	90                   	nop

c0023bfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bfe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c01:	0f ba e2 0f          	bt     edx,0xf
c0023c05:	72 f7                	jb     c0023bfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c07:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c0a:	83 ca 10             	or     edx,0x10
c0023c0d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c10:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c13:	83 ca 01             	or     edx,0x1
c0023c16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c19:	c3                   	ret    

c0023c1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c1e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c21:	83 e2 fe             	and    edx,0xfffffffe
c0023c24:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c27:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c2a:	83 e2 ef             	and    edx,0xffffffef
c0023c2d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c30:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c33:	0f ba e2 0e          	bt     edx,0xe
c0023c37:	72 f7                	jb     c0023c30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c3c:	0f ba e2 0f          	bt     edx,0xf
c0023c40:	72 ee                	jb     c0023c30 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c42:	c3                   	ret    
c0023c43:	90                   	nop

c0023c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c44:	55                   	push   ebp
c0023c45:	57                   	push   edi
c0023c46:	56                   	push   esi
c0023c47:	53                   	push   ebx
c0023c48:	83 ec 1c             	sub    esp,0x1c
c0023c4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c53:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c57:	53                   	push   ebx
c0023c58:	89 fd                	mov    ebp,edi
c0023c5a:	56                   	push   esi
c0023c5b:	c1 e5 0a             	shl    ebp,0xa
c0023c5e:	e8 b7 ff ff ff       	call   c0023c1a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c63:	83 ec 0c             	sub    esp,0xc
c0023c66:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c6c:	01 e8                	add    eax,ebp
c0023c6e:	89 03                	mov    DWORD PTR [ebx],eax
c0023c70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c72:	68 00 04 00 00       	push   0x400
c0023c77:	6a 00                	push   0x0
c0023c79:	50                   	push   eax
c0023c7a:	e8 d1 ca fd ff       	call   c0000750 <memset>
c0023c7f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c85:	89 fa                	mov    edx,edi
c0023c87:	01 e8                	add    eax,ebp
c0023c89:	c1 e7 0d             	shl    edi,0xd
c0023c8c:	89 03                	mov    DWORD PTR [ebx],eax
c0023c8e:	c1 e2 08             	shl    edx,0x8
c0023c91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c98:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ca2:	89 d0                	mov    eax,edx
c0023ca4:	83 c4 1c             	add    esp,0x1c
c0023ca7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cb3:	68 00 01 00 00       	push   0x100
c0023cb8:	6a 00                	push   0x0
c0023cba:	50                   	push   eax
c0023cbb:	e8 90 ca fd ff       	call   c0000750 <memset>
c0023cc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cc4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cca:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cd4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cd7:	83 c4 10             	add    esp,0x10
c0023cda:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ce1:	31 ff                	xor    edi,edi
c0023ce3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ce9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cf3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cf9:	83 c5 20             	add    ebp,0x20
c0023cfc:	01 f8                	add    eax,edi
c0023cfe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d01:	52                   	push   edx
c0023d02:	68 00 01 00 00       	push   0x100
c0023d07:	6a 00                	push   0x0
c0023d09:	50                   	push   eax
c0023d0a:	e8 41 ca fd ff       	call   c0000750 <memset>
c0023d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d13:	83 c4 10             	add    esp,0x10
c0023d16:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d1c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d23:	01 f8                	add    eax,edi
c0023d25:	81 c7 00 01 00 00    	add    edi,0x100
c0023d2b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d2e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d34:	75 b3                	jne    c0023ce9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d36:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d3a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d3e:	83 c4 1c             	add    esp,0x1c
c0023d41:	5b                   	pop    ebx
c0023d42:	5e                   	pop    esi
c0023d43:	5f                   	pop    edi
c0023d44:	5d                   	pop    ebp
c0023d45:	e9 b0 fe ff ff       	jmp    c0023bfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d4a:	55                   	push   ebp
c0023d4b:	57                   	push   edi
c0023d4c:	56                   	push   esi
c0023d4d:	53                   	push   ebx
c0023d4e:	31 db                	xor    ebx,ebx
c0023d50:	83 ec 0c             	sub    esp,0xc
c0023d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d5b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d5e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d64:	74 7a                	je     c0023de0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d66:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023d6a:	89 d8                	mov    eax,ebx
c0023d6c:	c1 e0 07             	shl    eax,0x7
c0023d6f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023d76:	55                   	push   ebp
c0023d77:	56                   	push   esi
c0023d78:	e8 35 fe ff ff       	call   c0023bb2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d7d:	5a                   	pop    edx
c0023d7e:	83 f8 01             	cmp    eax,0x1
c0023d81:	59                   	pop    ecx
c0023d82:	75 21                	jne    c0023da5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023d84:	50                   	push   eax
c0023d85:	53                   	push   ebx
c0023d86:	55                   	push   ebp
c0023d87:	56                   	push   esi
c0023d88:	e8 b7 fe ff ff       	call   c0023c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d8d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d94:	e8 00 b8 fe ff       	call   c000f599 <malloc>
c0023d99:	89 c5                	mov    ebp,eax
c0023d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d9e:	e8 03 0d 00 00       	call   c0024aa6 <SATA::SATA()>
c0023da3:	eb 24                	jmp    c0023dc9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023da5:	83 f8 04             	cmp    eax,0x4
c0023da8:	75 36                	jne    c0023de0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023daa:	51                   	push   ecx
c0023dab:	53                   	push   ebx
c0023dac:	55                   	push   ebp
c0023dad:	56                   	push   esi
c0023dae:	e8 91 fe ff ff       	call   c0023c44 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023db3:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023dba:	e8 da b7 fe ff       	call   c000f599 <malloc>
c0023dbf:	89 c5                	mov    ebp,eax
c0023dc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dc4:	e8 53 10 00 00       	call   c0024e1c <SATAPI::SATAPI()>
c0023dc9:	58                   	pop    eax
c0023dca:	5a                   	pop    edx
c0023dcb:	55                   	push   ebp
c0023dcc:	56                   	push   esi
c0023dcd:	e8 f6 fd fe ff       	call   c0013bc8 <Device::addChild(Device*)>
c0023dd2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023dd5:	56                   	push   esi
c0023dd6:	6a 00                	push   0x0
c0023dd8:	53                   	push   ebx
c0023dd9:	55                   	push   ebp
c0023dda:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023ddd:	83 c4 20             	add    esp,0x20
c0023de0:	d1 ef                	shr    edi,1
c0023de2:	43                   	inc    ebx
c0023de3:	83 fb 20             	cmp    ebx,0x20
c0023de6:	0f 85 72 ff ff ff    	jne    c0023d5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023dec:	83 c4 0c             	add    esp,0xc
c0023def:	5b                   	pop    ebx
c0023df0:	5e                   	pop    esi
c0023df1:	5f                   	pop    edi
c0023df2:	5d                   	pop    ebp
c0023df3:	c3                   	ret    

c0023df4 <SATABus::open(int, int, void*)>:
c0023df4:	83 ec 14             	sub    esp,0x14
c0023df7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dfb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e01:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e07:	52                   	push   edx
c0023e08:	50                   	push   eax
c0023e09:	e8 3c ff ff ff       	call   c0023d4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e0e:	31 c0                	xor    eax,eax
c0023e10:	83 c4 1c             	add    esp,0x1c
c0023e13:	c3                   	ret    

c0023e14 <ATA::close(int, int, void*)>:
c0023e14:	83 ec 0c             	sub    esp,0xc
c0023e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e21:	85 c0                	test   eax,eax
c0023e23:	74 0c                	je     c0023e31 <ATA::close(int, int, void*)+0x1d>
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e2a:	50                   	push   eax
c0023e2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e2e:	83 c4 10             	add    esp,0x10
c0023e31:	31 c0                	xor    eax,eax
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	c3                   	ret    
c0023e37:	90                   	nop

c0023e38 <ATA::powerSaving(PowerSavingLevel)>:
c0023e38:	c3                   	ret    
c0023e39:	90                   	nop

c0023e3a <ATA::ATA()>:
c0023e3a:	83 ec 0c             	sub    esp,0xc
c0023e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e41:	83 ec 04             	sub    esp,0x4
c0023e44:	68 00 02 00 00       	push   0x200
c0023e49:	68 b9 c3 02 c0       	push   0xc002c3b9
c0023e4e:	50                   	push   eax
c0023e4f:	e8 aa 01 ff ff       	call   c0013ffe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e54:	83 c4 10             	add    esp,0x10
c0023e57:	ba 3c c3 02 c0       	mov    edx,0xc002c33c
c0023e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e60:	89 10                	mov    DWORD PTR [eax],edx
c0023e62:	90                   	nop
c0023e63:	83 c4 0c             	add    esp,0xc
c0023e66:	c3                   	ret    
c0023e67:	90                   	nop

c0023e68 <ATA::flush(bool)>:
c0023e68:	53                   	push   ebx
c0023e69:	83 ec 08             	sub    esp,0x8
c0023e6c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e75:	19 c0                	sbb    eax,eax
c0023e77:	83 e0 fd             	and    eax,0xfffffffd
c0023e7a:	05 ea 00 00 00       	add    eax,0xea
c0023e7f:	50                   	push   eax
c0023e80:	6a 07                	push   0x7
c0023e82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e89:	50                   	push   eax
c0023e8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e90:	e8 53 f1 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e95:	83 c4 0c             	add    esp,0xc
c0023e98:	6a 00                	push   0x0
c0023e9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ea1:	50                   	push   eax
c0023ea2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea8:	e8 dd fb ff ff       	call   c0023a8a <IDE::polling(unsigned char, unsigned int)>
c0023ead:	83 c4 18             	add    esp,0x18
c0023eb0:	5b                   	pop    ebx
c0023eb1:	c3                   	ret    

c0023eb2 <ATA::readyForCommand()>:
c0023eb2:	56                   	push   esi
c0023eb3:	53                   	push   ebx
c0023eb4:	31 db                	xor    ebx,ebx
c0023eb6:	50                   	push   eax
c0023eb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ebb:	50                   	push   eax
c0023ebc:	6a 0c                	push   0xc
c0023ebe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ec5:	50                   	push   eax
c0023ec6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ecc:	e8 d7 f1 ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0023ed1:	83 c4 10             	add    esp,0x10
c0023ed4:	a8 88                	test   al,0x88
c0023ed6:	74 23                	je     c0023efb <ATA::readyForCommand()+0x49>
c0023ed8:	43                   	inc    ebx
c0023ed9:	83 fb 63             	cmp    ebx,0x63
c0023edc:	7e dd                	jle    c0023ebb <ATA::readyForCommand()+0x9>
c0023ede:	51                   	push   ecx
c0023edf:	51                   	push   ecx
c0023ee0:	6a 00                	push   0x0
c0023ee2:	68 40 42 0f 00       	push   0xf4240
c0023ee7:	e8 79 9e ff ff       	call   c001dd65 <nanoSleep(unsigned long long)>
c0023eec:	83 c4 10             	add    esp,0x10
c0023eef:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ef5:	75 c4                	jne    c0023ebb <ATA::readyForCommand()+0x9>
c0023ef7:	31 c0                	xor    eax,eax
c0023ef9:	eb 02                	jmp    c0023efd <ATA::readyForCommand()+0x4b>
c0023efb:	b0 01                	mov    al,0x1
c0023efd:	5a                   	pop    edx
c0023efe:	5b                   	pop    ebx
c0023eff:	5e                   	pop    esi
c0023f00:	c3                   	ret    
c0023f01:	90                   	nop

c0023f02 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f02:	55                   	push   ebp
c0023f03:	57                   	push   edi
c0023f04:	56                   	push   esi
c0023f05:	53                   	push   ebx
c0023f06:	83 ec 2c             	sub    esp,0x2c
c0023f09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f0d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f11:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f19:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f1d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f25:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f2f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f39:	c1 e0 06             	shl    eax,0x6
c0023f3c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f44:	74 5d                	je     c0023fa3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f46:	89 fa                	mov    edx,edi
c0023f48:	89 f0                	mov    eax,esi
c0023f4a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f4e:	c1 ea 1c             	shr    edx,0x1c
c0023f51:	89 d1                	mov    ecx,edx
c0023f53:	09 c1                	or     ecx,eax
c0023f55:	74 25                	je     c0023f7c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f57:	31 ed                	xor    ebp,ebp
c0023f59:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f60:	89 fa                	mov    edx,edi
c0023f62:	89 f0                	mov    eax,esi
c0023f64:	0f ad d0             	shrd   eax,edx,cl
c0023f67:	d3 ea                	shr    edx,cl
c0023f69:	f6 c1 20             	test   cl,0x20
c0023f6c:	74 02                	je     c0023f70 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f6e:	89 d0                	mov    eax,edx
c0023f70:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f74:	45                   	inc    ebp
c0023f75:	83 fd 06             	cmp    ebp,0x6
c0023f78:	75 df                	jne    c0023f59 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f7a:	eb 76                	jmp    c0023ff2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f7c:	89 f0                	mov    eax,esi
c0023f7e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f83:	89 fa                	mov    edx,edi
c0023f85:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f8c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023f90:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f95:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f99:	c1 ee 18             	shr    esi,0x18
c0023f9c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fa1:	eb 56                	jmp    c0023ff9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fa3:	6a 00                	push   0x0
c0023fa5:	6a 3f                	push   0x3f
c0023fa7:	57                   	push   edi
c0023fa8:	56                   	push   esi
c0023fa9:	e8 26 29 00 00       	call   c00268d4 <__umoddi3>
c0023fae:	83 c4 10             	add    esp,0x10
c0023fb1:	40                   	inc    eax
c0023fb2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023fb6:	6a 00                	push   0x0
c0023fb8:	68 f0 03 00 00       	push   0x3f0
c0023fbd:	57                   	push   edi
c0023fbe:	56                   	push   esi
c0023fbf:	e8 10 28 00 00       	call   c00267d4 <__udivdi3>
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023fcc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fd3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fd8:	6a 00                	push   0x0
c0023fda:	6a 3f                	push   0x3f
c0023fdc:	57                   	push   edi
c0023fdd:	56                   	push   esi
c0023fde:	e8 f1 27 00 00       	call   c00267d4 <__udivdi3>
c0023fe3:	83 c4 10             	add    esp,0x10
c0023fe6:	89 c6                	mov    esi,eax
c0023fe8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023fed:	83 e6 0f             	and    esi,0xf
c0023ff0:	eb 07                	jmp    c0023ff9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ff2:	31 f6                	xor    esi,esi
c0023ff4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023ff9:	bf 01 00 00 00       	mov    edi,0x1
c0023ffe:	50                   	push   eax
c0023fff:	6a 00                	push   0x0
c0024001:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024008:	50                   	push   eax
c0024009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002400d:	e8 e2 f1 ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c0024012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024015:	e8 98 fe ff ff       	call   c0023eb2 <ATA::readyForCommand()>
c002401a:	83 c4 10             	add    esp,0x10
c002401d:	84 c0                	test   al,al
c002401f:	0f 84 5a 02 00 00    	je     c002427f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024025:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002402b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024031:	c1 e0 04             	shl    eax,0x4
c0024034:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002403b:	09 c6                	or     esi,eax
c002403d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024042:	75 05                	jne    c0024049 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024044:	83 ce a0             	or     esi,0xffffffa0
c0024047:	eb 03                	jmp    c002404c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024049:	83 ce e0             	or     esi,0xffffffe0
c002404c:	89 f0                	mov    eax,esi
c002404e:	0f b6 f0             	movzx  esi,al
c0024051:	56                   	push   esi
c0024052:	6a 06                	push   0x6
c0024054:	51                   	push   ecx
c0024055:	52                   	push   edx
c0024056:	e8 8d ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405b:	83 c4 10             	add    esp,0x10
c002405e:	6a 00                	push   0x0
c0024060:	6a 01                	push   0x1
c0024062:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024069:	50                   	push   eax
c002406a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024070:	e8 73 ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024075:	83 c4 10             	add    esp,0x10
c0024078:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002407d:	75 6e                	jne    c00240ed <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002407f:	6a 00                	push   0x0
c0024081:	6a 08                	push   0x8
c0024083:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002408a:	50                   	push   eax
c002408b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024091:	e8 52 ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024096:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002409b:	50                   	push   eax
c002409c:	6a 09                	push   0x9
c002409e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a5:	50                   	push   eax
c00240a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ac:	e8 37 ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b1:	83 c4 20             	add    esp,0x20
c00240b4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240b9:	50                   	push   eax
c00240ba:	6a 0a                	push   0xa
c00240bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c3:	50                   	push   eax
c00240c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ca:	e8 19 ef ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240cf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00240d4:	50                   	push   eax
c00240d5:	6a 0b                	push   0xb
c00240d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240de:	50                   	push   eax
c00240df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e5:	e8 fe ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ea:	83 c4 20             	add    esp,0x20
c00240ed:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00240f2:	50                   	push   eax
c00240f3:	6a 02                	push   0x2
c00240f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fc:	50                   	push   eax
c00240fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024103:	e8 e0 ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024108:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002410d:	50                   	push   eax
c002410e:	6a 03                	push   0x3
c0024110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024117:	50                   	push   eax
c0024118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411e:	e8 c5 ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024123:	83 c4 20             	add    esp,0x20
c0024126:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002412b:	50                   	push   eax
c002412c:	6a 04                	push   0x4
c002412e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024135:	50                   	push   eax
c0024136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002413c:	e8 a7 ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024141:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024146:	50                   	push   eax
c0024147:	6a 05                	push   0x5
c0024149:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024150:	50                   	push   eax
c0024151:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024157:	e8 8c ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415c:	83 c4 20             	add    esp,0x20
c002415f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024164:	0f 94 c0             	sete   al
c0024167:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002416c:	74 09                	je     c0024177 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002416e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024175:	eb 07                	jmp    c002417e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024177:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002417e:	0f b6 c0             	movzx  eax,al
c0024181:	50                   	push   eax
c0024182:	6a 07                	push   0x7
c0024184:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418b:	50                   	push   eax
c002418c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024192:	e8 51 ee ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024197:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002419b:	83 c4 10             	add    esp,0x10
c002419e:	85 f6                	test   esi,esi
c00241a0:	0f 84 ba 00 00 00    	je     c0024260 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241a6:	50                   	push   eax
c00241a7:	6a 01                	push   0x1
c00241a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b0:	50                   	push   eax
c00241b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241b7:	e8 ce f8 ff ff       	call   c0023a8a <IDE::polling(unsigned char, unsigned int)>
c00241bc:	83 c4 10             	add    esp,0x10
c00241bf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241c5:	84 c0                	test   al,al
c00241c7:	74 2c                	je     c00241f5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00241c9:	0f b6 f8             	movzx  edi,al
c00241cc:	0f b6 d2             	movzx  edx,dl
c00241cf:	57                   	push   edi
c00241d0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00241d7:	50                   	push   eax
c00241d8:	52                   	push   edx
c00241d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241df:	e8 f6 f7 ff ff       	call   c00239da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241e4:	c7 04 24 14 c3 02 c0 	mov    DWORD PTR [esp],0xc002c314
c00241eb:	e8 9f e5 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00241f0:	e9 87 00 00 00       	jmp    c002427c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00241f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00241fa:	74 33                	je     c002422f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00241fc:	31 ed                	xor    ebp,ebp
c00241fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024202:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024206:	50                   	push   eax
c0024207:	50                   	push   eax
c0024208:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420f:	50                   	push   eax
c0024210:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024216:	e8 bb ed ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c002421b:	89 c2                	mov    edx,eax
c002421d:	89 f8                	mov    eax,edi
c002421f:	66 ef                	out    dx,ax
c0024221:	45                   	inc    ebp
c0024222:	83 c4 10             	add    esp,0x10
c0024225:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002422b:	75 d1                	jne    c00241fe <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002422d:	eb 23                	jmp    c0024252 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002422f:	0f b6 d2             	movzx  edx,dl
c0024232:	51                   	push   ecx
c0024233:	51                   	push   ecx
c0024234:	52                   	push   edx
c0024235:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423b:	e8 96 ed ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c0024240:	b9 00 01 00 00       	mov    ecx,0x100
c0024245:	89 c2                	mov    edx,eax
c0024247:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002424b:	fc                   	cld    
c002424c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002424f:	83 c4 10             	add    esp,0x10
c0024252:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002425a:	4e                   	dec    esi
c002425b:	e9 3e ff ff ff       	jmp    c002419e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024260:	31 ff                	xor    edi,edi
c0024262:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024267:	74 16                	je     c002427f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024269:	50                   	push   eax
c002426a:	50                   	push   eax
c002426b:	31 c0                	xor    eax,eax
c002426d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024272:	0f 94 c0             	sete   al
c0024275:	50                   	push   eax
c0024276:	53                   	push   ebx
c0024277:	e8 ec fb ff ff       	call   c0023e68 <ATA::flush(bool)>
c002427c:	83 c4 10             	add    esp,0x10
c002427f:	83 c4 2c             	add    esp,0x2c
c0024282:	89 f8                	mov    eax,edi
c0024284:	5b                   	pop    ebx
c0024285:	5e                   	pop    esi
c0024286:	5f                   	pop    edi
c0024287:	5d                   	pop    ebp
c0024288:	c3                   	ret    
c0024289:	90                   	nop

c002428a <ATA::read(unsigned long long, int, void*)>:
c002428a:	57                   	push   edi
c002428b:	b8 04 00 00 00       	mov    eax,0x4
c0024290:	56                   	push   esi
c0024291:	53                   	push   ebx
c0024292:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024296:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002429a:	8d 7a ff             	lea    edi,[edx-0x1]
c002429d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00242a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242a5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00242ab:	77 25                	ja     c00242d2 <ATA::read(unsigned long long, int, void*)+0x48>
c00242ad:	b8 06 00 00 00       	mov    eax,0x6
c00242b2:	85 f6                	test   esi,esi
c00242b4:	74 1c                	je     c00242d2 <ATA::read(unsigned long long, int, void*)+0x48>
c00242b6:	50                   	push   eax
c00242b7:	50                   	push   eax
c00242b8:	6a 00                	push   0x0
c00242ba:	56                   	push   esi
c00242bb:	52                   	push   edx
c00242bc:	53                   	push   ebx
c00242bd:	51                   	push   ecx
c00242be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00242c2:	e8 3b fc ff ff       	call   c0023f02 <ATA::access(unsigned long long, int, void*, bool)>
c00242c7:	83 c4 20             	add    esp,0x20
c00242ca:	85 c0                	test   eax,eax
c00242cc:	0f 95 c0             	setne  al
c00242cf:	0f b6 c0             	movzx  eax,al
c00242d2:	5b                   	pop    ebx
c00242d3:	5e                   	pop    esi
c00242d4:	5f                   	pop    edi
c00242d5:	c3                   	ret    

c00242d6 <ATA::write(unsigned long long, int, void*)>:
c00242d6:	57                   	push   edi
c00242d7:	b8 04 00 00 00       	mov    eax,0x4
c00242dc:	56                   	push   esi
c00242dd:	53                   	push   ebx
c00242de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00242e6:	8d 7a ff             	lea    edi,[edx-0x1]
c00242e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00242ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242f1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00242f7:	77 25                	ja     c002431e <ATA::write(unsigned long long, int, void*)+0x48>
c00242f9:	b8 06 00 00 00       	mov    eax,0x6
c00242fe:	85 f6                	test   esi,esi
c0024300:	74 1c                	je     c002431e <ATA::write(unsigned long long, int, void*)+0x48>
c0024302:	50                   	push   eax
c0024303:	50                   	push   eax
c0024304:	6a 01                	push   0x1
c0024306:	56                   	push   esi
c0024307:	52                   	push   edx
c0024308:	53                   	push   ebx
c0024309:	51                   	push   ecx
c002430a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002430e:	e8 ef fb ff ff       	call   c0023f02 <ATA::access(unsigned long long, int, void*, bool)>
c0024313:	83 c4 20             	add    esp,0x20
c0024316:	85 c0                	test   eax,eax
c0024318:	0f 95 c0             	setne  al
c002431b:	0f b6 c0             	movzx  eax,al
c002431e:	5b                   	pop    ebx
c002431f:	5e                   	pop    esi
c0024320:	5f                   	pop    edi
c0024321:	c3                   	ret    

c0024322 <ATA::detectCHS()>:
c0024322:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024326:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002432c:	c1 e0 06             	shl    eax,0x6
c002432f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024335:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002433f:	c7 44 24 04 1f c3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c31f
c0024347:	e9 af 5b ff ff       	jmp    c0019efb <Krnl::panic(char const*)>

c002434c <ATA::open(int, int, void*)>:
c002434c:	53                   	push   ebx
c002434d:	83 ec 08             	sub    esp,0x8
c0024350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024354:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002435c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024362:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024368:	c1 e0 06             	shl    eax,0x6
c002436b:	01 d0                	add    eax,edx
c002436d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024374:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002437a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024381:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002438b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024391:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024398:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002439f:	75 0c                	jne    c00243ad <ATA::open(int, int, void*)+0x61>
c00243a1:	83 ec 0c             	sub    esp,0xc
c00243a4:	53                   	push   ebx
c00243a5:	e8 78 ff ff ff       	call   c0024322 <ATA::detectCHS()>
c00243aa:	83 c4 10             	add    esp,0x10
c00243ad:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00243b3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00243b9:	c1 e0 06             	shl    eax,0x6
c00243bc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00243c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00243cd:	d1 e8                	shr    eax,1
c00243cf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00243d5:	6a 04                	push   0x4
c00243d7:	6a 0c                	push   0xc
c00243d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e0:	50                   	push   eax
c00243e1:	52                   	push   edx
c00243e2:	e8 01 ec ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243e7:	90                   	nop
c00243e8:	90                   	nop
c00243e9:	6a 00                	push   0x0
c00243eb:	6a 0c                	push   0xc
c00243ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243f4:	50                   	push   eax
c00243f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243fb:	e8 e8 eb ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024400:	83 c4 14             	add    esp,0x14
c0024403:	53                   	push   ebx
c0024404:	e8 5d fc fe ff       	call   c0014066 <PhysicalDisk::startCache()>
c0024409:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002440c:	e8 d7 1e ff ff       	call   c00162e8 <createPartitionsForDisk(PhysicalDisk*)>
c0024411:	31 c0                	xor    eax,eax
c0024413:	83 c4 18             	add    esp,0x18
c0024416:	5b                   	pop    ebx
c0024417:	c3                   	ret    

c0024418 <ATAPI::write(unsigned long long, int, void*)>:
c0024418:	b8 03 00 00 00       	mov    eax,0x3
c002441d:	c3                   	ret    

c002441e <ATAPI::close(int, int, void*)>:
c002441e:	83 ec 0c             	sub    esp,0xc
c0024421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024425:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002442b:	85 c0                	test   eax,eax
c002442d:	74 0c                	je     c002443b <ATAPI::close(int, int, void*)+0x1d>
c002442f:	83 ec 0c             	sub    esp,0xc
c0024432:	8b 10                	mov    edx,DWORD PTR [eax]
c0024434:	50                   	push   eax
c0024435:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024438:	83 c4 10             	add    esp,0x10
c002443b:	31 c0                	xor    eax,eax
c002443d:	83 c4 0c             	add    esp,0xc
c0024440:	c3                   	ret    
c0024441:	90                   	nop

c0024442 <ATAPI::ATAPI()>:
c0024442:	83 ec 0c             	sub    esp,0xc
c0024445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024449:	83 ec 04             	sub    esp,0x4
c002444c:	68 00 08 00 00       	push   0x800
c0024451:	68 59 c4 02 c0       	push   0xc002c459
c0024456:	50                   	push   eax
c0024457:	e8 a2 fb fe ff       	call   c0013ffe <PhysicalDisk::PhysicalDisk(char const*, int)>
c002445c:	83 c4 10             	add    esp,0x10
c002445f:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c0024464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024468:	89 10                	mov    DWORD PTR [eax],edx
c002446a:	90                   	nop
c002446b:	83 c4 0c             	add    esp,0xc
c002446e:	c3                   	ret    
c002446f:	90                   	nop

c0024470 <ATAPI::readyForCommand()>:
c0024470:	56                   	push   esi
c0024471:	53                   	push   ebx
c0024472:	31 db                	xor    ebx,ebx
c0024474:	50                   	push   eax
c0024475:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024479:	50                   	push   eax
c002447a:	6a 0c                	push   0xc
c002447c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024483:	50                   	push   eax
c0024484:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002448a:	e8 19 ec ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002448f:	83 c4 10             	add    esp,0x10
c0024492:	a8 88                	test   al,0x88
c0024494:	74 23                	je     c00244b9 <ATAPI::readyForCommand()+0x49>
c0024496:	43                   	inc    ebx
c0024497:	83 fb 63             	cmp    ebx,0x63
c002449a:	7e dd                	jle    c0024479 <ATAPI::readyForCommand()+0x9>
c002449c:	51                   	push   ecx
c002449d:	51                   	push   ecx
c002449e:	6a 00                	push   0x0
c00244a0:	68 40 42 0f 00       	push   0xf4240
c00244a5:	e8 bb 98 ff ff       	call   c001dd65 <nanoSleep(unsigned long long)>
c00244aa:	83 c4 10             	add    esp,0x10
c00244ad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00244b3:	75 c4                	jne    c0024479 <ATAPI::readyForCommand()+0x9>
c00244b5:	31 c0                	xor    eax,eax
c00244b7:	eb 02                	jmp    c00244bb <ATAPI::readyForCommand()+0x4b>
c00244b9:	b0 01                	mov    al,0x1
c00244bb:	5a                   	pop    edx
c00244bc:	5b                   	pop    ebx
c00244bd:	5e                   	pop    esi
c00244be:	c3                   	ret    
c00244bf:	90                   	nop

c00244c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00244c0:	55                   	push   ebp
c00244c1:	57                   	push   edi
c00244c2:	56                   	push   esi
c00244c3:	53                   	push   ebx
c00244c4:	83 ec 20             	sub    esp,0x20
c00244c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00244cb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00244cf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00244d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00244d7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00244db:	6a 01                	push   0x1
c00244dd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244e4:	50                   	push   eax
c00244e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244eb:	e8 04 ed ff ff       	call   c00231f4 <IDE::enableIRQs(unsigned char, bool)>
c00244f0:	5e                   	pop    esi
c00244f1:	58                   	pop    eax
c00244f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244f9:	50                   	push   eax
c00244fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024500:	e8 bd ea ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0024505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024508:	e8 63 ff ff ff       	call   c0024470 <ATAPI::readyForCommand()>
c002450d:	83 c4 10             	add    esp,0x10
c0024510:	84 c0                	test   al,al
c0024512:	75 0a                	jne    c002451e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024514:	bb 01 00 00 00       	mov    ebx,0x1
c0024519:	e9 57 02 00 00       	jmp    c0024775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002451e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024524:	c1 e0 04             	shl    eax,0x4
c0024527:	0f b6 c0             	movzx  eax,al
c002452a:	50                   	push   eax
c002452b:	6a 06                	push   0x6
c002452d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024534:	50                   	push   eax
c0024535:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002453b:	e8 a8 ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024540:	6a 00                	push   0x0
c0024542:	6a 01                	push   0x1
c0024544:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002454b:	50                   	push   eax
c002454c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024552:	e8 91 ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024557:	83 c4 20             	add    esp,0x20
c002455a:	0f b6 c3             	movzx  eax,bl
c002455d:	0f b6 df             	movzx  ebx,bh
c0024560:	50                   	push   eax
c0024561:	6a 04                	push   0x4
c0024563:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456a:	50                   	push   eax
c002456b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024571:	e8 72 ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024576:	53                   	push   ebx
c0024577:	6a 05                	push   0x5
c0024579:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024580:	50                   	push   eax
c0024581:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024587:	e8 5c ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002458c:	83 c4 20             	add    esp,0x20
c002458f:	68 a0 00 00 00       	push   0xa0
c0024594:	6a 07                	push   0x7
c0024596:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002459d:	50                   	push   eax
c002459e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a4:	e8 3f ea ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a9:	83 c4 0c             	add    esp,0xc
c00245ac:	6a 01                	push   0x1
c00245ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b5:	50                   	push   eax
c00245b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245bc:	e8 c9 f4 ff ff       	call   c0023a8a <IDE::polling(unsigned char, unsigned int)>
c00245c1:	83 c4 10             	add    esp,0x10
c00245c4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00245ca:	84 c0                	test   al,al
c00245cc:	74 23                	je     c00245f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00245ce:	0f b6 d8             	movzx  ebx,al
c00245d1:	0f b6 d2             	movzx  edx,dl
c00245d4:	53                   	push   ebx
c00245d5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00245dc:	50                   	push   eax
c00245dd:	52                   	push   edx
c00245de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e4:	e8 f1 f3 ff ff       	call   c00239da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00245e9:	83 c4 10             	add    esp,0x10
c00245ec:	e9 84 01 00 00       	jmp    c0024775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245f1:	0f b6 d2             	movzx  edx,dl
c00245f4:	53                   	push   ebx
c00245f5:	53                   	push   ebx
c00245f6:	52                   	push   edx
c00245f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245fd:	e8 d4 e9 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c0024602:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024606:	b9 06 00 00 00       	mov    ecx,0x6
c002460b:	89 c2                	mov    edx,eax
c002460d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024610:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024614:	83 c4 10             	add    esp,0x10
c0024617:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002461d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024624:	85 db                	test   ebx,ebx
c0024626:	0f 84 ec 00 00 00    	je     c0024718 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002462c:	51                   	push   ecx
c002462d:	51                   	push   ecx
c002462e:	52                   	push   edx
c002462f:	50                   	push   eax
c0024630:	e8 21 eb ff ff       	call   c0023156 <IDE::waitInterrupt(unsigned char)>
c0024635:	83 c4 10             	add    esp,0x10
c0024638:	84 c0                	test   al,al
c002463a:	0f 84 d4 fe ff ff    	je     c0024514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024640:	56                   	push   esi
c0024641:	56                   	push   esi
c0024642:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024649:	50                   	push   eax
c002464a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024650:	e8 6d e9 ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0024655:	83 c4 0c             	add    esp,0xc
c0024658:	6a 04                	push   0x4
c002465a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024661:	50                   	push   eax
c0024662:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024668:	e8 3b ea ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c002466d:	83 c4 0c             	add    esp,0xc
c0024670:	89 c6                	mov    esi,eax
c0024672:	6a 05                	push   0x5
c0024674:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002467b:	50                   	push   eax
c002467c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024682:	e8 21 ea ff ff       	call   c00230a8 <IDE::read(unsigned char, unsigned char)>
c0024687:	89 f1                	mov    ecx,esi
c0024689:	0f b6 c0             	movzx  eax,al
c002468c:	0f b6 f1             	movzx  esi,cl
c002468f:	c1 e0 08             	shl    eax,0x8
c0024692:	09 c6                	or     esi,eax
c0024694:	d1 fe                	sar    esi,1
c0024696:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002469a:	83 c4 10             	add    esp,0x10
c002469d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00246a2:	74 41                	je     c00246e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00246a4:	31 c9                	xor    ecx,ecx
c00246a6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246ac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246b3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00246b7:	75 0a                	jne    c00246c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00246b9:	01 c9                	add    ecx,ecx
c00246bb:	01 cd                	add    ebp,ecx
c00246bd:	4b                   	dec    ebx
c00246be:	e9 54 ff ff ff       	jmp    c0024617 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00246c3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00246c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00246cc:	51                   	push   ecx
c00246cd:	51                   	push   ecx
c00246ce:	52                   	push   edx
c00246cf:	50                   	push   eax
c00246d0:	e8 01 e9 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c00246d5:	89 c2                	mov    edx,eax
c00246d7:	89 f0                	mov    eax,esi
c00246d9:	66 ef                	out    dx,ax
c00246db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00246df:	83 c4 10             	add    esp,0x10
c00246e2:	41                   	inc    ecx
c00246e3:	eb c1                	jmp    c00246a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00246e5:	31 f6                	xor    esi,esi
c00246e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246f4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00246f8:	75 06                	jne    c0024700 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00246fa:	01 f6                	add    esi,esi
c00246fc:	01 f5                	add    ebp,esi
c00246fe:	eb bd                	jmp    c00246bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024700:	51                   	push   ecx
c0024701:	51                   	push   ecx
c0024702:	52                   	push   edx
c0024703:	50                   	push   eax
c0024704:	e8 cd e8 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c0024709:	89 c2                	mov    edx,eax
c002470b:	66 ed                	in     ax,dx
c002470d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024712:	83 c4 10             	add    esp,0x10
c0024715:	46                   	inc    esi
c0024716:	eb cf                	jmp    c00246e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024718:	51                   	push   ecx
c0024719:	51                   	push   ecx
c002471a:	52                   	push   edx
c002471b:	50                   	push   eax
c002471c:	e8 35 ea ff ff       	call   c0023156 <IDE::waitInterrupt(unsigned char)>
c0024721:	83 c4 10             	add    esp,0x10
c0024724:	84 c0                	test   al,al
c0024726:	0f 84 e8 fd ff ff    	je     c0024514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002472c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024731:	52                   	push   edx
c0024732:	52                   	push   edx
c0024733:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473a:	50                   	push   eax
c002473b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024741:	e8 7c e8 ff ff       	call   c0022fc2 <IDE::prepareInterrupt(unsigned char)>
c0024746:	83 c4 10             	add    esp,0x10
c0024749:	50                   	push   eax
c002474a:	50                   	push   eax
c002474b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024752:	50                   	push   eax
c0024753:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024759:	e8 78 e8 ff ff       	call   c0022fd6 <IDE::getBase(unsigned char)>
c002475e:	8d 50 07             	lea    edx,[eax+0x7]
c0024761:	ec                   	in     al,dx
c0024762:	83 c4 10             	add    esp,0x10
c0024765:	a8 88                	test   al,0x88
c0024767:	74 0a                	je     c0024773 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024769:	4b                   	dec    ebx
c002476a:	75 dd                	jne    c0024749 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002476c:	bb 02 00 00 00       	mov    ebx,0x2
c0024771:	eb 02                	jmp    c0024775 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024773:	31 db                	xor    ebx,ebx
c0024775:	83 c4 1c             	add    esp,0x1c
c0024778:	89 d8                	mov    eax,ebx
c002477a:	5b                   	pop    ebx
c002477b:	5e                   	pop    esi
c002477c:	5f                   	pop    edi
c002477d:	5d                   	pop    ebp
c002477e:	c3                   	ret    
c002477f:	90                   	nop

c0024780 <ATAPI::diskRemoved()>:
c0024780:	83 ec 18             	sub    esp,0x18
c0024783:	68 65 c4 02 c0       	push   0xc002c465
c0024788:	e8 02 e0 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c002478d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024791:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024798:	83 c4 1c             	add    esp,0x1c
c002479b:	c3                   	ret    

c002479c <ATAPI::eject()>:
c002479c:	57                   	push   edi
c002479d:	b9 03 00 00 00       	mov    ecx,0x3
c00247a2:	53                   	push   ebx
c00247a3:	83 ec 14             	sub    esp,0x14
c00247a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00247aa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247ae:	fc                   	cld    
c00247af:	31 c0                	xor    eax,eax
c00247b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247b3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00247b8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00247bd:	50                   	push   eax
c00247be:	50                   	push   eax
c00247bf:	6a 00                	push   0x0
c00247c1:	6a 00                	push   0x0
c00247c3:	6a 00                	push   0x0
c00247c5:	6a 02                	push   0x2
c00247c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247cb:	50                   	push   eax
c00247cc:	53                   	push   ebx
c00247cd:	e8 ee fc ff ff       	call   c00244c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247d2:	83 c4 14             	add    esp,0x14
c00247d5:	53                   	push   ebx
c00247d6:	e8 a5 ff ff ff       	call   c0024780 <ATAPI::diskRemoved()>
c00247db:	83 c4 24             	add    esp,0x24
c00247de:	31 c0                	xor    eax,eax
c00247e0:	5b                   	pop    ebx
c00247e1:	5f                   	pop    edi
c00247e2:	c3                   	ret    
c00247e3:	90                   	nop

c00247e4 <ATAPI::diskInserted()>:
c00247e4:	53                   	push   ebx
c00247e5:	83 ec 14             	sub    esp,0x14
c00247e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247ec:	68 7c c4 02 c0       	push   0xc002c47c
c00247f1:	e8 99 df fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c00247f6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00247fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024800:	e8 61 f8 fe ff       	call   c0014066 <PhysicalDisk::startCache()>
c0024805:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024809:	83 c4 18             	add    esp,0x18
c002480c:	5b                   	pop    ebx
c002480d:	e9 d6 1a ff ff       	jmp    c00162e8 <createPartitionsForDisk(PhysicalDisk*)>

c0024812 <ATAPI::detectMedia()>:
c0024812:	56                   	push   esi
c0024813:	53                   	push   ebx
c0024814:	83 ec 28             	sub    esp,0x28
c0024817:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002481b:	6a 0c                	push   0xc
c002481d:	6a 00                	push   0x0
c002481f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024823:	56                   	push   esi
c0024824:	e8 27 bf fd ff       	call   c0000750 <memset>
c0024829:	58                   	pop    eax
c002482a:	5a                   	pop    edx
c002482b:	6a 00                	push   0x0
c002482d:	6a 00                	push   0x0
c002482f:	6a 00                	push   0x0
c0024831:	6a 00                	push   0x0
c0024833:	56                   	push   esi
c0024834:	53                   	push   ebx
c0024835:	e8 86 fc ff ff       	call   c00244c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002483a:	83 c4 1c             	add    esp,0x1c
c002483d:	6a 0c                	push   0xc
c002483f:	6a 00                	push   0x0
c0024841:	56                   	push   esi
c0024842:	e8 09 bf fd ff       	call   c0000750 <memset>
c0024847:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002484c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024851:	59                   	pop    ecx
c0024852:	58                   	pop    eax
c0024853:	6a 01                	push   0x1
c0024855:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024859:	50                   	push   eax
c002485a:	6a 00                	push   0x0
c002485c:	6a 12                	push   0x12
c002485e:	56                   	push   esi
c002485f:	53                   	push   ebx
c0024860:	e8 5b fc ff ff       	call   c00244c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024865:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024869:	83 c4 20             	add    esp,0x20
c002486c:	83 e0 7f             	and    eax,0x7f
c002486f:	3c 70                	cmp    al,0x70
c0024871:	74 15                	je     c0024888 <ATAPI::detectMedia()+0x76>
c0024873:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002487a:	75 0c                	jne    c0024888 <ATAPI::detectMedia()+0x76>
c002487c:	83 ec 0c             	sub    esp,0xc
c002487f:	53                   	push   ebx
c0024880:	e8 5f ff ff ff       	call   c00247e4 <ATAPI::diskInserted()>
c0024885:	83 c4 10             	add    esp,0x10
c0024888:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002488c:	83 e0 0f             	and    eax,0xf
c002488f:	3c 02                	cmp    al,0x2
c0024891:	75 1b                	jne    c00248ae <ATAPI::detectMedia()+0x9c>
c0024893:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024898:	75 2d                	jne    c00248c7 <ATAPI::detectMedia()+0xb5>
c002489a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248a1:	74 24                	je     c00248c7 <ATAPI::detectMedia()+0xb5>
c00248a3:	83 ec 0c             	sub    esp,0xc
c00248a6:	53                   	push   ebx
c00248a7:	e8 d4 fe ff ff       	call   c0024780 <ATAPI::diskRemoved()>
c00248ac:	eb 16                	jmp    c00248c4 <ATAPI::detectMedia()+0xb2>
c00248ae:	84 c0                	test   al,al
c00248b0:	75 15                	jne    c00248c7 <ATAPI::detectMedia()+0xb5>
c00248b2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248b9:	75 0c                	jne    c00248c7 <ATAPI::detectMedia()+0xb5>
c00248bb:	83 ec 0c             	sub    esp,0xc
c00248be:	53                   	push   ebx
c00248bf:	e8 20 ff ff ff       	call   c00247e4 <ATAPI::diskInserted()>
c00248c4:	83 c4 10             	add    esp,0x10
c00248c7:	83 c4 24             	add    esp,0x24
c00248ca:	5b                   	pop    ebx
c00248cb:	5e                   	pop    esi
c00248cc:	c3                   	ret    
c00248cd:	90                   	nop

c00248ce <ATAPI::open(int, int, void*)>:
c00248ce:	53                   	push   ebx
c00248cf:	83 ec 08             	sub    esp,0x8
c00248d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248de:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248e4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00248ea:	c1 e0 06             	shl    eax,0x6
c00248ed:	01 d0                	add    eax,edx
c00248ef:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00248f6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00248fc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024903:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002490d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024913:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002491a:	6a 04                	push   0x4
c002491c:	6a 0c                	push   0xc
c002491e:	51                   	push   ecx
c002491f:	52                   	push   edx
c0024920:	e8 c3 e6 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024925:	90                   	nop
c0024926:	90                   	nop
c0024927:	6a 00                	push   0x0
c0024929:	6a 0c                	push   0xc
c002492b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024932:	50                   	push   eax
c0024933:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024939:	e8 aa e6 ff ff       	call   c0022fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002493e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024945:	83 c4 14             	add    esp,0x14
c0024948:	53                   	push   ebx
c0024949:	e8 c4 fe ff ff       	call   c0024812 <ATAPI::detectMedia()>
c002494e:	31 c0                	xor    eax,eax
c0024950:	83 c4 18             	add    esp,0x18
c0024953:	5b                   	pop    ebx
c0024954:	c3                   	ret    
c0024955:	90                   	nop

c0024956 <ATAPI::read(unsigned long long, int, void*)>:
c0024956:	55                   	push   ebp
c0024957:	57                   	push   edi
c0024958:	56                   	push   esi
c0024959:	53                   	push   ebx
c002495a:	83 ec 1c             	sub    esp,0x1c
c002495d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024961:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024965:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024969:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024970:	74 41                	je     c00249b3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024972:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024976:	b9 03 00 00 00       	mov    ecx,0x3
c002497b:	fc                   	cld    
c002497c:	31 c0                	xor    eax,eax
c002497e:	86 fb                	xchg   bl,bh
c0024980:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024982:	c1 c3 10             	rol    ebx,0x10
c0024985:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002498a:	89 e8                	mov    eax,ebp
c002498c:	86 fb                	xchg   bl,bh
c002498e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024992:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024996:	50                   	push   eax
c0024997:	50                   	push   eax
c0024998:	55                   	push   ebp
c0024999:	c1 e5 0b             	shl    ebp,0xb
c002499c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00249a0:	6a 00                	push   0x0
c00249a2:	55                   	push   ebp
c00249a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249a7:	50                   	push   eax
c00249a8:	56                   	push   esi
c00249a9:	e8 12 fb ff ff       	call   c00244c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249ae:	83 c4 20             	add    esp,0x20
c00249b1:	eb 1a                	jmp    c00249cd <ATAPI::read(unsigned long long, int, void*)+0x77>
c00249b3:	83 ec 0c             	sub    esp,0xc
c00249b6:	56                   	push   esi
c00249b7:	e8 56 fe ff ff       	call   c0024812 <ATAPI::detectMedia()>
c00249bc:	83 c4 10             	add    esp,0x10
c00249bf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249c6:	75 aa                	jne    c0024972 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00249c8:	b8 02 00 00 00       	mov    eax,0x2
c00249cd:	83 c4 1c             	add    esp,0x1c
c00249d0:	5b                   	pop    ebx
c00249d1:	5e                   	pop    esi
c00249d2:	5f                   	pop    edi
c00249d3:	5d                   	pop    ebp
c00249d4:	c3                   	ret    
c00249d5:	90                   	nop

c00249d6 <SATA::close(int, int, void*)>:
c00249d6:	83 ec 0c             	sub    esp,0xc
c00249d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00249e3:	85 c0                	test   eax,eax
c00249e5:	74 0c                	je     c00249f3 <SATA::close(int, int, void*)+0x1d>
c00249e7:	83 ec 0c             	sub    esp,0xc
c00249ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00249ec:	50                   	push   eax
c00249ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00249f0:	83 c4 10             	add    esp,0x10
c00249f3:	31 c0                	xor    eax,eax
c00249f5:	83 c4 0c             	add    esp,0xc
c00249f8:	c3                   	ret    
c00249f9:	90                   	nop

c00249fa <SATA::powerSaving(PowerSavingLevel)>:
c00249fa:	c3                   	ret    
c00249fb:	90                   	nop

c00249fc <SATA::open(int, int, void*)>:
c00249fc:	56                   	push   esi
c00249fd:	53                   	push   ebx
c00249fe:	50                   	push   eax
c00249ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a07:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a11:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a17:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a25:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a2f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024a35:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024a3c:	e8 54 af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a41:	89 c6                	mov    esi,eax
c0024a43:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a49:	81 c6 00 10 00 00    	add    esi,0x1000
c0024a4f:	e8 41 af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a54:	39 c6                	cmp    esi,eax
c0024a56:	74 10                	je     c0024a68 <SATA::open(int, int, void*)+0x6c>
c0024a58:	83 ec 0c             	sub    esp,0xc
c0024a5b:	68 a4 c3 02 c0       	push   0xc002c3a4
c0024a60:	e8 96 54 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0024a65:	83 c4 10             	add    esp,0x10
c0024a68:	83 ec 0c             	sub    esp,0xc
c0024a6b:	6a 02                	push   0x2
c0024a6d:	e8 ab c7 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0024a72:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a78:	6a 03                	push   0x3
c0024a7a:	50                   	push   eax
c0024a7b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024a81:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c0024a87:	e8 f4 cf fe ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024a8c:	83 c4 14             	add    esp,0x14
c0024a8f:	53                   	push   ebx
c0024a90:	e8 d1 f5 fe ff       	call   c0014066 <PhysicalDisk::startCache()>
c0024a95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a98:	e8 4b 18 ff ff       	call   c00162e8 <createPartitionsForDisk(PhysicalDisk*)>
c0024a9d:	83 c4 14             	add    esp,0x14
c0024aa0:	31 c0                	xor    eax,eax
c0024aa2:	5b                   	pop    ebx
c0024aa3:	5e                   	pop    esi
c0024aa4:	c3                   	ret    
c0024aa5:	90                   	nop

c0024aa6 <SATA::SATA()>:
c0024aa6:	83 ec 0c             	sub    esp,0xc
c0024aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aad:	83 ec 04             	sub    esp,0x4
c0024ab0:	68 00 02 00 00       	push   0x200
c0024ab5:	68 b8 c3 02 c0       	push   0xc002c3b8
c0024aba:	50                   	push   eax
c0024abb:	e8 3e f5 fe ff       	call   c0013ffe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ac0:	83 c4 10             	add    esp,0x10
c0024ac3:	ba 28 c4 02 c0       	mov    edx,0xc002c428
c0024ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024acc:	89 10                	mov    DWORD PTR [eax],edx
c0024ace:	90                   	nop
c0024acf:	83 c4 0c             	add    esp,0xc
c0024ad2:	c3                   	ret    
c0024ad3:	90                   	nop

c0024ad4 <SATA::access(unsigned long long, int, void*, bool)>:
c0024ad4:	55                   	push   ebp
c0024ad5:	57                   	push   edi
c0024ad6:	56                   	push   esi
c0024ad7:	53                   	push   ebx
c0024ad8:	83 ec 2c             	sub    esp,0x2c
c0024adb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024adf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024ae3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024ae7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024aeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024aef:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024af4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024af8:	7e 10                	jle    c0024b0a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024afa:	83 ec 0c             	sub    esp,0xc
c0024afd:	68 c8 c3 02 c0       	push   0xc002c3c8
c0024b02:	e8 f4 53 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0024b07:	83 c4 10             	add    esp,0x10
c0024b0a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b10:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024b16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b20:	89 d0                	mov    eax,edx
c0024b22:	c1 e0 07             	shl    eax,0x7
c0024b25:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b29:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b33:	51                   	push   ecx
c0024b34:	8d 42 02             	lea    eax,[edx+0x2]
c0024b37:	51                   	push   ecx
c0024b38:	c1 e0 07             	shl    eax,0x7
c0024b3b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024b3f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024b43:	50                   	push   eax
c0024b44:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024b4a:	e8 1b f0 ff ff       	call   c0023b6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024b4f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024b53:	83 c4 10             	add    esp,0x10
c0024b56:	b8 01 00 00 00       	mov    eax,0x1
c0024b5b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024b60:	0f 84 cb 01 00 00    	je     c0024d31 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b66:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b6e:	c1 e0 09             	shl    eax,0x9
c0024b71:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024b7a:	74 0e                	je     c0024b8a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024b7c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024b82:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024b86:	89 c1                	mov    ecx,eax
c0024b88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b8a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024b8e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b94:	8d 42 02             	lea    eax,[edx+0x2]
c0024b97:	c1 e0 07             	shl    eax,0x7
c0024b9a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ba0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ba6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024bac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024bb0:	c1 e1 05             	shl    ecx,0x5
c0024bb3:	01 c8                	add    eax,ecx
c0024bb5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024bb9:	83 e1 01             	and    ecx,0x1
c0024bbc:	89 ce                	mov    esi,ecx
c0024bbe:	8a 08                	mov    cl,BYTE PTR [eax]
c0024bc0:	c1 e6 06             	shl    esi,0x6
c0024bc3:	83 e1 bf             	and    ecx,0xffffffbf
c0024bc6:	09 f1                	or     ecx,esi
c0024bc8:	88 08                	mov    BYTE PTR [eax],cl
c0024bca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024bcc:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024bd2:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024bd8:	89 08                	mov    DWORD PTR [eax],ecx
c0024bda:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024be0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024be6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024bec:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024bef:	50                   	push   eax
c0024bf0:	68 90 00 00 00       	push   0x90
c0024bf5:	6a 00                	push   0x0
c0024bf7:	56                   	push   esi
c0024bf8:	e8 53 bb fd ff       	call   c0000750 <memset>
c0024bfd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c03:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024c07:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024c0d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024c11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024c15:	83 c4 10             	add    esp,0x10
c0024c18:	48                   	dec    eax
c0024c19:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024c1e:	89 c1                	mov    ecx,eax
c0024c20:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024c26:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c2b:	09 c8                	or     eax,ecx
c0024c2d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024c33:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024c36:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024c3d:	66 25 00 7f          	and    ax,0x7f00
c0024c41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c45:	66 0d 27 80          	or     ax,0x8027
c0024c49:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024c4e:	66 89 06             	mov    WORD PTR [esi],ax
c0024c51:	19 c0                	sbb    eax,eax
c0024c53:	83 e0 f0             	and    eax,0xfffffff0
c0024c56:	83 c0 35             	add    eax,0x35
c0024c59:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024c5c:	89 e8                	mov    eax,ebp
c0024c5e:	c1 e8 10             	shr    eax,0x10
c0024c61:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024c64:	89 e8                	mov    eax,ebp
c0024c66:	c1 e8 18             	shr    eax,0x18
c0024c69:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024c6c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024c70:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024c73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c77:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024c7a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c7e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024c82:	89 d6                	mov    esi,edx
c0024c84:	31 c0                	xor    eax,eax
c0024c86:	c1 e6 07             	shl    esi,0x7
c0024c89:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024c8d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024c93:	80 e1 88             	and    cl,0x88
c0024c96:	74 0a                	je     c0024ca2 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024c98:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c9d:	74 0a                	je     c0024ca9 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024c9f:	40                   	inc    eax
c0024ca0:	eb eb                	jmp    c0024c8d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024ca2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ca7:	75 0a                	jne    c0024cb3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024ca9:	83 ec 0c             	sub    esp,0xc
c0024cac:	68 01 c4 02 c0       	push   0xc002c401
c0024cb1:	eb 56                	jmp    c0024d09 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024cb3:	b8 01 00 00 00       	mov    eax,0x1
c0024cb8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024cbc:	c1 e2 07             	shl    edx,0x7
c0024cbf:	d3 e0                	shl    eax,cl
c0024cc1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024cc5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024ccb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024cd1:	85 c8                	test   eax,ecx
c0024cd3:	74 20                	je     c0024cf5 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024cd5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024cdb:	0f ba e1 1e          	bt     ecx,0x1e
c0024cdf:	73 ea                	jae    c0024ccb <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024ce1:	83 ec 0c             	sub    esp,0xc
c0024ce4:	68 0f c4 02 c0       	push   0xc002c40f
c0024ce9:	e8 0d 52 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0024cee:	83 c4 10             	add    esp,0x10
c0024cf1:	31 c0                	xor    eax,eax
c0024cf3:	eb 3c                	jmp    c0024d31 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cf5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024cfb:	0f ba e0 1e          	bt     eax,0x1e
c0024cff:	73 17                	jae    c0024d18 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024d01:	83 ec 0c             	sub    esp,0xc
c0024d04:	68 0f c4 02 c0       	push   0xc002c40f
c0024d09:	e8 ed 51 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0024d0e:	83 c4 10             	add    esp,0x10
c0024d11:	b8 01 00 00 00       	mov    eax,0x1
c0024d16:	eb 19                	jmp    c0024d31 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024d18:	31 c0                	xor    eax,eax
c0024d1a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024d1f:	75 10                	jne    c0024d31 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024d21:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024d27:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024d2b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d31:	83 c4 2c             	add    esp,0x2c
c0024d34:	5b                   	pop    ebx
c0024d35:	5e                   	pop    esi
c0024d36:	5f                   	pop    edi
c0024d37:	5d                   	pop    ebp
c0024d38:	c3                   	ret    
c0024d39:	90                   	nop

c0024d3a <SATA::read(unsigned long long, int, void*)>:
c0024d3a:	57                   	push   edi
c0024d3b:	b8 04 00 00 00       	mov    eax,0x4
c0024d40:	56                   	push   esi
c0024d41:	53                   	push   ebx
c0024d42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d4a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d55:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d5b:	77 25                	ja     c0024d82 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d5d:	b8 06 00 00 00       	mov    eax,0x6
c0024d62:	85 f6                	test   esi,esi
c0024d64:	74 1c                	je     c0024d82 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d66:	50                   	push   eax
c0024d67:	50                   	push   eax
c0024d68:	6a 00                	push   0x0
c0024d6a:	56                   	push   esi
c0024d6b:	52                   	push   edx
c0024d6c:	53                   	push   ebx
c0024d6d:	51                   	push   ecx
c0024d6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d72:	e8 5d fd ff ff       	call   c0024ad4 <SATA::access(unsigned long long, int, void*, bool)>
c0024d77:	83 c4 20             	add    esp,0x20
c0024d7a:	85 c0                	test   eax,eax
c0024d7c:	0f 95 c0             	setne  al
c0024d7f:	0f b6 c0             	movzx  eax,al
c0024d82:	5b                   	pop    ebx
c0024d83:	5e                   	pop    esi
c0024d84:	5f                   	pop    edi
c0024d85:	c3                   	ret    

c0024d86 <SATA::write(unsigned long long, int, void*)>:
c0024d86:	55                   	push   ebp
c0024d87:	b8 04 00 00 00       	mov    eax,0x4
c0024d8c:	57                   	push   edi
c0024d8d:	56                   	push   esi
c0024d8e:	53                   	push   ebx
c0024d8f:	83 ec 0c             	sub    esp,0xc
c0024d92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d9a:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024d9d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024da1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024da5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024dab:	77 3d                	ja     c0024dea <SATA::write(unsigned long long, int, void*)+0x64>
c0024dad:	b8 06 00 00 00       	mov    eax,0x6
c0024db2:	85 ed                	test   ebp,ebp
c0024db4:	74 34                	je     c0024dea <SATA::write(unsigned long long, int, void*)+0x64>
c0024db6:	c1 e3 09             	shl    ebx,0x9
c0024db9:	01 eb                	add    ebx,ebp
c0024dbb:	89 d6                	mov    esi,edx
c0024dbd:	89 cf                	mov    edi,ecx
c0024dbf:	83 c6 01             	add    esi,0x1
c0024dc2:	83 d7 00             	adc    edi,0x0
c0024dc5:	50                   	push   eax
c0024dc6:	50                   	push   eax
c0024dc7:	6a 01                	push   0x1
c0024dc9:	55                   	push   ebp
c0024dca:	81 c5 00 02 00 00    	add    ebp,0x200
c0024dd0:	6a 01                	push   0x1
c0024dd2:	51                   	push   ecx
c0024dd3:	52                   	push   edx
c0024dd4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dd8:	e8 f7 fc ff ff       	call   c0024ad4 <SATA::access(unsigned long long, int, void*, bool)>
c0024ddd:	83 c4 20             	add    esp,0x20
c0024de0:	89 f2                	mov    edx,esi
c0024de2:	89 f9                	mov    ecx,edi
c0024de4:	39 dd                	cmp    ebp,ebx
c0024de6:	75 d3                	jne    c0024dbb <SATA::write(unsigned long long, int, void*)+0x35>
c0024de8:	31 c0                	xor    eax,eax
c0024dea:	83 c4 0c             	add    esp,0xc
c0024ded:	5b                   	pop    ebx
c0024dee:	5e                   	pop    esi
c0024def:	5f                   	pop    edi
c0024df0:	5d                   	pop    ebp
c0024df1:	c3                   	ret    

c0024df2 <SATAPI::write(unsigned long long, int, void*)>:
c0024df2:	b8 03 00 00 00       	mov    eax,0x3
c0024df7:	c3                   	ret    

c0024df8 <SATAPI::close(int, int, void*)>:
c0024df8:	83 ec 0c             	sub    esp,0xc
c0024dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e05:	85 c0                	test   eax,eax
c0024e07:	74 0c                	je     c0024e15 <SATAPI::close(int, int, void*)+0x1d>
c0024e09:	83 ec 0c             	sub    esp,0xc
c0024e0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e0e:	50                   	push   eax
c0024e0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e12:	83 c4 10             	add    esp,0x10
c0024e15:	31 c0                	xor    eax,eax
c0024e17:	83 c4 0c             	add    esp,0xc
c0024e1a:	c3                   	ret    
c0024e1b:	90                   	nop

c0024e1c <SATAPI::SATAPI()>:
c0024e1c:	83 ec 0c             	sub    esp,0xc
c0024e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e23:	83 ec 04             	sub    esp,0x4
c0024e26:	68 00 08 00 00       	push   0x800
c0024e2b:	68 58 c4 02 c0       	push   0xc002c458
c0024e30:	50                   	push   eax
c0024e31:	e8 c8 f1 fe ff       	call   c0013ffe <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e36:	83 c4 10             	add    esp,0x10
c0024e39:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0024e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e42:	89 10                	mov    DWORD PTR [eax],edx
c0024e44:	90                   	nop
c0024e45:	83 c4 0c             	add    esp,0xc
c0024e48:	c3                   	ret    
c0024e49:	90                   	nop

c0024e4a <SATAPI::diskRemoved()>:
c0024e4a:	83 ec 18             	sub    esp,0x18
c0024e4d:	68 64 c4 02 c0       	push   0xc002c464
c0024e52:	e8 38 d9 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0024e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e5b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024e62:	83 c4 1c             	add    esp,0x1c
c0024e65:	c3                   	ret    

c0024e66 <SATAPI::diskInserted()>:
c0024e66:	53                   	push   ebx
c0024e67:	83 ec 14             	sub    esp,0x14
c0024e6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024e6e:	68 7b c4 02 c0       	push   0xc002c47b
c0024e73:	e8 17 d9 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0024e78:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024e7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e82:	e8 df f1 fe ff       	call   c0014066 <PhysicalDisk::startCache()>
c0024e87:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e8b:	83 c4 18             	add    esp,0x18
c0024e8e:	5b                   	pop    ebx
c0024e8f:	e9 54 14 ff ff       	jmp    c00162e8 <createPartitionsForDisk(PhysicalDisk*)>

c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024e94:	55                   	push   ebp
c0024e95:	57                   	push   edi
c0024e96:	56                   	push   esi
c0024e97:	53                   	push   ebx
c0024e98:	83 ec 34             	sub    esp,0x34
c0024e9b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024e9f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ea3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024ea7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024eab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024eaf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024eb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ebb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ebf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024ec5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ec9:	c1 e0 07             	shl    eax,0x7
c0024ecc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ed0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ed4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ee2:	8d 58 02             	lea    ebx,[eax+0x2]
c0024ee5:	c1 e3 07             	shl    ebx,0x7
c0024ee8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024eec:	53                   	push   ebx
c0024eed:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ef3:	e8 72 ec ff ff       	call   c0023b6a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ef8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024efc:	83 c4 10             	add    esp,0x10
c0024eff:	b8 01 00 00 00       	mov    eax,0x1
c0024f04:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024f09:	0f 84 85 01 00 00    	je     c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f0f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024f17:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f1d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024f23:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f27:	c1 e1 05             	shl    ecx,0x5
c0024f2a:	01 c8                	add    eax,ecx
c0024f2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024f2e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024f34:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024f3a:	89 08                	mov    DWORD PTR [eax],ecx
c0024f3c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f42:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024f48:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024f4e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024f51:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024f54:	50                   	push   eax
c0024f55:	68 90 00 00 00       	push   0x90
c0024f5a:	6a 00                	push   0x0
c0024f5c:	53                   	push   ebx
c0024f5d:	e8 ee b7 fd ff       	call   c0000750 <memset>
c0024f62:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024f66:	b9 0c 00 00 00       	mov    ecx,0xc
c0024f6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f6d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024f73:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024f77:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f7d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f81:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024f85:	48                   	dec    eax
c0024f86:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024f8b:	89 c1                	mov    ecx,eax
c0024f8d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f93:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f98:	09 c8                	or     eax,ecx
c0024f9a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024fa0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024fa3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024faa:	66 25 00 7f          	and    ax,0x7f00
c0024fae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024fb2:	66 0d 27 80          	or     ax,0x8027
c0024fb6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024fba:	66 89 03             	mov    WORD PTR [ebx],ax
c0024fbd:	89 d0                	mov    eax,edx
c0024fbf:	c1 ea 18             	shr    edx,0x18
c0024fc2:	c1 e8 10             	shr    eax,0x10
c0024fc5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024fc8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024fcb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024fcf:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024fd6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024fd9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024fdd:	83 c4 10             	add    esp,0x10
c0024fe0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024fe4:	31 c0                	xor    eax,eax
c0024fe6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024fea:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024ff0:	80 e2 88             	and    dl,0x88
c0024ff3:	74 0a                	je     c0024fff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024ff5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ffa:	74 0a                	je     c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024ffc:	40                   	inc    eax
c0024ffd:	eb eb                	jmp    c0024fea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024fff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025004:	75 0f                	jne    c0025015 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025006:	83 ec 0c             	sub    esp,0xc
c0025009:	68 01 c4 02 c0       	push   0xc002c401
c002500e:	e8 e8 4e ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0025013:	eb 3f                	jmp    c0025054 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025015:	ba 01 00 00 00       	mov    edx,0x1
c002501a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002501e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025022:	d3 e2                	shl    edx,cl
c0025024:	c1 e0 07             	shl    eax,0x7
c0025027:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c002502d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025031:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025037:	85 ca                	test   edx,ecx
c0025039:	74 23                	je     c002505e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002503b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025041:	0f ba e1 1e          	bt     ecx,0x1e
c0025045:	73 ea                	jae    c0025031 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025047:	83 ec 0c             	sub    esp,0xc
c002504a:	68 93 c4 02 c0       	push   0xc002c493
c002504f:	e8 3b d7 fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0025054:	83 c4 10             	add    esp,0x10
c0025057:	b8 01 00 00 00       	mov    eax,0x1
c002505c:	eb 36                	jmp    c0025094 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002505e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025064:	0f ba e0 1e          	bt     eax,0x1e
c0025068:	73 0a                	jae    c0025074 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002506a:	83 ec 0c             	sub    esp,0xc
c002506d:	68 a6 c4 02 c0       	push   0xc002c4a6
c0025072:	eb db                	jmp    c002504f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025074:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025079:	74 17                	je     c0025092 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002507b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025080:	74 10                	je     c0025092 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025082:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025088:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002508c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025090:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025092:	31 c0                	xor    eax,eax
c0025094:	83 c4 2c             	add    esp,0x2c
c0025097:	5b                   	pop    ebx
c0025098:	5e                   	pop    esi
c0025099:	5f                   	pop    edi
c002509a:	5d                   	pop    ebp
c002509b:	c3                   	ret    

c002509c <SATAPI::eject()>:
c002509c:	57                   	push   edi
c002509d:	b9 03 00 00 00       	mov    ecx,0x3
c00250a2:	53                   	push   ebx
c00250a3:	83 ec 14             	sub    esp,0x14
c00250a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00250aa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250ae:	fc                   	cld    
c00250af:	31 c0                	xor    eax,eax
c00250b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250b3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00250b8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00250bd:	50                   	push   eax
c00250be:	6a 00                	push   0x0
c00250c0:	6a 00                	push   0x0
c00250c2:	6a 00                	push   0x0
c00250c4:	6a 00                	push   0x0
c00250c6:	6a 02                	push   0x2
c00250c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00250cc:	50                   	push   eax
c00250cd:	53                   	push   ebx
c00250ce:	e8 c1 fd ff ff       	call   c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250d3:	83 c4 14             	add    esp,0x14
c00250d6:	53                   	push   ebx
c00250d7:	e8 6e fd ff ff       	call   c0024e4a <SATAPI::diskRemoved()>
c00250dc:	83 c4 24             	add    esp,0x24
c00250df:	31 c0                	xor    eax,eax
c00250e1:	5b                   	pop    ebx
c00250e2:	5f                   	pop    edi
c00250e3:	c3                   	ret    

c00250e4 <SATAPI::detectMedia()>:
c00250e4:	56                   	push   esi
c00250e5:	53                   	push   ebx
c00250e6:	83 ec 28             	sub    esp,0x28
c00250e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250ed:	6a 0c                	push   0xc
c00250ef:	6a 00                	push   0x0
c00250f1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00250f5:	56                   	push   esi
c00250f6:	e8 55 b6 fd ff       	call   c0000750 <memset>
c00250fb:	83 c4 0c             	add    esp,0xc
c00250fe:	6a 00                	push   0x0
c0025100:	6a 00                	push   0x0
c0025102:	6a 00                	push   0x0
c0025104:	6a 00                	push   0x0
c0025106:	6a 00                	push   0x0
c0025108:	56                   	push   esi
c0025109:	53                   	push   ebx
c002510a:	e8 85 fd ff ff       	call   c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002510f:	83 c4 1c             	add    esp,0x1c
c0025112:	6a 0c                	push   0xc
c0025114:	6a 00                	push   0x0
c0025116:	56                   	push   esi
c0025117:	e8 34 b6 fd ff       	call   c0000750 <memset>
c002511c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025121:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025126:	83 c4 0c             	add    esp,0xc
c0025129:	6a 01                	push   0x1
c002512b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002512f:	50                   	push   eax
c0025130:	6a 00                	push   0x0
c0025132:	6a 00                	push   0x0
c0025134:	6a 12                	push   0x12
c0025136:	56                   	push   esi
c0025137:	53                   	push   ebx
c0025138:	e8 57 fd ff ff       	call   c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002513d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025141:	83 c4 20             	add    esp,0x20
c0025144:	83 e0 7f             	and    eax,0x7f
c0025147:	3c 70                	cmp    al,0x70
c0025149:	74 15                	je     c0025160 <SATAPI::detectMedia()+0x7c>
c002514b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025152:	75 0c                	jne    c0025160 <SATAPI::detectMedia()+0x7c>
c0025154:	83 ec 0c             	sub    esp,0xc
c0025157:	53                   	push   ebx
c0025158:	e8 09 fd ff ff       	call   c0024e66 <SATAPI::diskInserted()>
c002515d:	83 c4 10             	add    esp,0x10
c0025160:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025164:	83 e0 0f             	and    eax,0xf
c0025167:	3c 02                	cmp    al,0x2
c0025169:	75 1b                	jne    c0025186 <SATAPI::detectMedia()+0xa2>
c002516b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025170:	75 2d                	jne    c002519f <SATAPI::detectMedia()+0xbb>
c0025172:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025179:	74 24                	je     c002519f <SATAPI::detectMedia()+0xbb>
c002517b:	83 ec 0c             	sub    esp,0xc
c002517e:	53                   	push   ebx
c002517f:	e8 c6 fc ff ff       	call   c0024e4a <SATAPI::diskRemoved()>
c0025184:	eb 16                	jmp    c002519c <SATAPI::detectMedia()+0xb8>
c0025186:	84 c0                	test   al,al
c0025188:	75 15                	jne    c002519f <SATAPI::detectMedia()+0xbb>
c002518a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025191:	75 0c                	jne    c002519f <SATAPI::detectMedia()+0xbb>
c0025193:	83 ec 0c             	sub    esp,0xc
c0025196:	53                   	push   ebx
c0025197:	e8 ca fc ff ff       	call   c0024e66 <SATAPI::diskInserted()>
c002519c:	83 c4 10             	add    esp,0x10
c002519f:	83 c4 24             	add    esp,0x24
c00251a2:	5b                   	pop    ebx
c00251a3:	5e                   	pop    esi
c00251a4:	c3                   	ret    
c00251a5:	90                   	nop

c00251a6 <SATAPI::open(int, int, void*)>:
c00251a6:	56                   	push   esi
c00251a7:	53                   	push   ebx
c00251a8:	50                   	push   eax
c00251a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00251ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00251bb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00251c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251cf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00251d9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00251df:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00251e6:	e8 aa a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c00251eb:	89 c6                	mov    esi,eax
c00251ed:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00251f3:	81 c6 00 10 00 00    	add    esi,0x1000
c00251f9:	e8 97 a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c00251fe:	39 c6                	cmp    esi,eax
c0025200:	74 10                	je     c0025212 <SATAPI::open(int, int, void*)+0x6c>
c0025202:	83 ec 0c             	sub    esp,0xc
c0025205:	68 bb c4 02 c0       	push   0xc002c4bb
c002520a:	e8 ec 4c ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002520f:	83 c4 10             	add    esp,0x10
c0025212:	83 ec 0c             	sub    esp,0xc
c0025215:	6a 02                	push   0x2
c0025217:	e8 01 c0 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c002521c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025222:	6a 03                	push   0x3
c0025224:	50                   	push   eax
c0025225:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002522b:	ff 35 10 dc 02 c0    	push   DWORD PTR ds:0xc002dc10
c0025231:	e8 4a c8 fe ff       	call   c0011a80 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025236:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002523d:	83 c4 14             	add    esp,0x14
c0025240:	53                   	push   ebx
c0025241:	e8 9e fe ff ff       	call   c00250e4 <SATAPI::detectMedia()>
c0025246:	83 c4 14             	add    esp,0x14
c0025249:	31 c0                	xor    eax,eax
c002524b:	5b                   	pop    ebx
c002524c:	5e                   	pop    esi
c002524d:	c3                   	ret    

c002524e <SATAPI::read(unsigned long long, int, void*)>:
c002524e:	55                   	push   ebp
c002524f:	57                   	push   edi
c0025250:	56                   	push   esi
c0025251:	53                   	push   ebx
c0025252:	83 ec 1c             	sub    esp,0x1c
c0025255:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025259:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002525d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025261:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025268:	74 19                	je     c0025283 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002526a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002526f:	7e 2e                	jle    c002529f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025271:	83 ec 0c             	sub    esp,0xc
c0025274:	68 d1 c4 02 c0       	push   0xc002c4d1
c0025279:	e8 7d 4c ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	eb 1c                	jmp    c002529f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025283:	83 ec 0c             	sub    esp,0xc
c0025286:	55                   	push   ebp
c0025287:	e8 58 fe ff ff       	call   c00250e4 <SATAPI::detectMedia()>
c002528c:	83 c4 10             	add    esp,0x10
c002528f:	b8 02 00 00 00       	mov    eax,0x2
c0025294:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002529b:	75 cd                	jne    c002526a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002529d:	eb 49                	jmp    c00252e8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002529f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252a3:	b9 03 00 00 00       	mov    ecx,0x3
c00252a8:	fc                   	cld    
c00252a9:	31 c0                	xor    eax,eax
c00252ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252ad:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00252b2:	89 d8                	mov    eax,ebx
c00252b4:	86 e0                	xchg   al,ah
c00252b6:	c1 c0 10             	rol    eax,0x10
c00252b9:	86 e0                	xchg   al,ah
c00252bb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00252bf:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00252c3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00252c7:	50                   	push   eax
c00252c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00252cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00252d0:	56                   	push   esi
c00252d1:	53                   	push   ebx
c00252d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00252d6:	c1 e0 0b             	shl    eax,0xb
c00252d9:	50                   	push   eax
c00252da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252de:	50                   	push   eax
c00252df:	55                   	push   ebp
c00252e0:	e8 af fb ff ff       	call   c0024e94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252e5:	83 c4 20             	add    esp,0x20
c00252e8:	83 c4 1c             	add    esp,0x1c
c00252eb:	5b                   	pop    ebx
c00252ec:	5e                   	pop    esi
c00252ed:	5f                   	pop    edi
c00252ee:	5d                   	pop    ebp
c00252ef:	c3                   	ret    

c00252f0 <AVX::open(int, int, void*)>:
c00252f0:	83 ec 0c             	sub    esp,0xc
c00252f3:	e8 40 11 00 00       	call   c0026438 <avxInit>
c00252f8:	b8 00 00 00 00       	mov    eax,0x0
c00252fd:	83 c4 0c             	add    esp,0xc
c0025300:	c3                   	ret    
c0025301:	90                   	nop

c0025302 <AVX::close(int, int, void*)>:
c0025302:	83 ec 0c             	sub    esp,0xc
c0025305:	e8 2f 11 00 00       	call   c0026439 <avxClose>
c002530a:	b8 00 00 00 00       	mov    eax,0x0
c002530f:	83 c4 0c             	add    esp,0xc
c0025312:	c3                   	ret    
c0025313:	90                   	nop

c0025314 <AVX::available()>:
c0025314:	83 ec 0c             	sub    esp,0xc
c0025317:	e8 14 11 00 00       	call   c0026430 <avxDetect>
c002531c:	85 c0                	test   eax,eax
c002531e:	0f 95 c0             	setne  al
c0025321:	83 c4 0c             	add    esp,0xc
c0025324:	c3                   	ret    
c0025325:	90                   	nop

c0025326 <AVX::save(void*)>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002532d:	83 ec 0c             	sub    esp,0xc
c0025330:	50                   	push   eax
c0025331:	e8 00 11 00 00       	call   c0026436 <avxSave>
c0025336:	83 c4 10             	add    esp,0x10
c0025339:	90                   	nop
c002533a:	83 c4 0c             	add    esp,0xc
c002533d:	c3                   	ret    

c002533e <AVX::load(void*)>:
c002533e:	83 ec 0c             	sub    esp,0xc
c0025341:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025345:	83 ec 0c             	sub    esp,0xc
c0025348:	50                   	push   eax
c0025349:	e8 e9 10 00 00       	call   c0026437 <avxLoad>
c002534e:	83 c4 10             	add    esp,0x10
c0025351:	90                   	nop
c0025352:	83 c4 0c             	add    esp,0xc
c0025355:	c3                   	ret    

c0025356 <AVX::AVX()>:
c0025356:	83 ec 0c             	sub    esp,0xc
c0025359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535d:	83 ec 08             	sub    esp,0x8
c0025360:	68 34 c5 02 c0       	push   0xc002c534
c0025365:	50                   	push   eax
c0025366:	e8 71 ed fe ff       	call   c00140dc <FPU::FPU(char const*)>
c002536b:	83 c4 10             	add    esp,0x10
c002536e:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c0025373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025377:	89 10                	mov    DWORD PTR [eax],edx
c0025379:	90                   	nop
c002537a:	83 c4 0c             	add    esp,0xc
c002537d:	c3                   	ret    

c002537e <MMX::available()>:
c002537e:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0025383:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025389:	83 e0 20             	and    eax,0x20
c002538c:	84 c0                	test   al,al
c002538e:	0f 95 c0             	setne  al
c0025391:	c3                   	ret    

c0025392 <MMX::open(int, int, void*)>:
c0025392:	83 ec 0c             	sub    esp,0xc
c0025395:	e8 28 11 00 00       	call   c00264c2 <x87Init>
c002539a:	b8 00 00 00 00       	mov    eax,0x0
c002539f:	83 c4 0c             	add    esp,0xc
c00253a2:	c3                   	ret    
c00253a3:	90                   	nop

c00253a4 <MMX::close(int, int, void*)>:
c00253a4:	83 ec 0c             	sub    esp,0xc
c00253a7:	e8 30 11 00 00       	call   c00264dc <x87Close>
c00253ac:	b8 00 00 00 00       	mov    eax,0x0
c00253b1:	83 c4 0c             	add    esp,0xc
c00253b4:	c3                   	ret    
c00253b5:	90                   	nop

c00253b6 <MMX::save(void*)>:
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	50                   	push   eax
c00253c1:	e8 eb 10 00 00       	call   c00264b1 <x87Save>
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	90                   	nop
c00253ca:	83 c4 0c             	add    esp,0xc
c00253cd:	c3                   	ret    

c00253ce <MMX::load(void*)>:
c00253ce:	83 ec 0c             	sub    esp,0xc
c00253d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d5:	83 ec 0c             	sub    esp,0xc
c00253d8:	50                   	push   eax
c00253d9:	e8 dc 10 00 00       	call   c00264ba <x87Load>
c00253de:	83 c4 10             	add    esp,0x10
c00253e1:	90                   	nop
c00253e2:	83 c4 0c             	add    esp,0xc
c00253e5:	c3                   	ret    

c00253e6 <MMX::MMX()>:
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ed:	83 ec 08             	sub    esp,0x8
c00253f0:	68 74 c5 02 c0       	push   0xc002c574
c00253f5:	50                   	push   eax
c00253f6:	e8 e1 ec fe ff       	call   c00140dc <FPU::FPU(char const*)>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	ba 84 c5 02 c0       	mov    edx,0xc002c584
c0025403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025407:	89 10                	mov    DWORD PTR [eax],edx
c0025409:	90                   	nop
c002540a:	83 c4 0c             	add    esp,0xc
c002540d:	c3                   	ret    

c002540e <SSE::open(int, int, void*)>:
c002540e:	83 ec 0c             	sub    esp,0xc
c0025411:	e8 5e 10 00 00       	call   c0026474 <sseInit>
c0025416:	b8 00 00 00 00       	mov    eax,0x0
c002541b:	83 c4 0c             	add    esp,0xc
c002541e:	c3                   	ret    
c002541f:	90                   	nop

c0025420 <SSE::close(int, int, void*)>:
c0025420:	83 ec 0c             	sub    esp,0xc
c0025423:	e8 5c 10 00 00       	call   c0026484 <sseClose>
c0025428:	b8 00 00 00 00       	mov    eax,0x0
c002542d:	83 c4 0c             	add    esp,0xc
c0025430:	c3                   	ret    
c0025431:	90                   	nop

c0025432 <SSE::available()>:
c0025432:	83 ec 1c             	sub    esp,0x1c
c0025435:	e8 16 10 00 00       	call   c0026450 <absolutelyNoChanceInHell>
c002543a:	85 c0                	test   eax,eax
c002543c:	0f 95 c0             	setne  al
c002543f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025443:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025447:	83 c4 1c             	add    esp,0x1c
c002544a:	c3                   	ret    
c002544b:	90                   	nop

c002544c <SSE::save(void*)>:
c002544c:	83 ec 0c             	sub    esp,0xc
c002544f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025453:	83 ec 0c             	sub    esp,0xc
c0025456:	50                   	push   eax
c0025457:	e8 0c 10 00 00       	call   c0026468 <sseSave>
c002545c:	83 c4 10             	add    esp,0x10
c002545f:	90                   	nop
c0025460:	83 c4 0c             	add    esp,0xc
c0025463:	c3                   	ret    

c0025464 <SSE::load(void*)>:
c0025464:	83 ec 0c             	sub    esp,0xc
c0025467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002546b:	83 ec 0c             	sub    esp,0xc
c002546e:	50                   	push   eax
c002546f:	e8 fa 0f 00 00       	call   c002646e <sseLoad>
c0025474:	83 c4 10             	add    esp,0x10
c0025477:	90                   	nop
c0025478:	83 c4 0c             	add    esp,0xc
c002547b:	c3                   	ret    

c002547c <SSE::SSE()>:
c002547c:	83 ec 0c             	sub    esp,0xc
c002547f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025483:	83 ec 08             	sub    esp,0x8
c0025486:	68 b4 c5 02 c0       	push   0xc002c5b4
c002548b:	50                   	push   eax
c002548c:	e8 4b ec fe ff       	call   c00140dc <FPU::FPU(char const*)>
c0025491:	83 c4 10             	add    esp,0x10
c0025494:	ba c4 c5 02 c0       	mov    edx,0xc002c5c4
c0025499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549d:	89 10                	mov    DWORD PTR [eax],edx
c002549f:	90                   	nop
c00254a0:	83 c4 0c             	add    esp,0xc
c00254a3:	c3                   	ret    

c00254a4 <x87::open(int, int, void*)>:
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	e8 16 10 00 00       	call   c00264c2 <x87Init>
c00254ac:	b8 00 00 00 00       	mov    eax,0x0
c00254b1:	83 c4 0c             	add    esp,0xc
c00254b4:	c3                   	ret    
c00254b5:	90                   	nop

c00254b6 <x87::close(int, int, void*)>:
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	e8 1e 10 00 00       	call   c00264dc <x87Close>
c00254be:	b8 00 00 00 00       	mov    eax,0x0
c00254c3:	83 c4 0c             	add    esp,0xc
c00254c6:	c3                   	ret    
c00254c7:	90                   	nop

c00254c8 <x87::available()>:
c00254c8:	83 ec 0c             	sub    esp,0xc
c00254cb:	e8 c6 0f 00 00       	call   c0026496 <x87Detect>
c00254d0:	85 c0                	test   eax,eax
c00254d2:	0f 95 c0             	setne  al
c00254d5:	83 c4 0c             	add    esp,0xc
c00254d8:	c3                   	ret    
c00254d9:	90                   	nop

c00254da <x87::save(void*)>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e1:	83 ec 0c             	sub    esp,0xc
c00254e4:	50                   	push   eax
c00254e5:	e8 c7 0f 00 00       	call   c00264b1 <x87Save>
c00254ea:	83 c4 10             	add    esp,0x10
c00254ed:	90                   	nop
c00254ee:	83 c4 0c             	add    esp,0xc
c00254f1:	c3                   	ret    

c00254f2 <x87::load(void*)>:
c00254f2:	83 ec 0c             	sub    esp,0xc
c00254f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254f9:	83 ec 0c             	sub    esp,0xc
c00254fc:	50                   	push   eax
c00254fd:	e8 b8 0f 00 00       	call   c00264ba <x87Load>
c0025502:	83 c4 10             	add    esp,0x10
c0025505:	90                   	nop
c0025506:	83 c4 0c             	add    esp,0xc
c0025509:	c3                   	ret    

c002550a <x87::x87()>:
c002550a:	83 ec 0c             	sub    esp,0xc
c002550d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025511:	83 ec 08             	sub    esp,0x8
c0025514:	68 f4 c5 02 c0       	push   0xc002c5f4
c0025519:	50                   	push   eax
c002551a:	e8 bd eb fe ff       	call   c00140dc <FPU::FPU(char const*)>
c002551f:	83 c4 10             	add    esp,0x10
c0025522:	ba 04 c6 02 c0       	mov    edx,0xc002c604
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	90                   	nop
c002552e:	83 c4 0c             	add    esp,0xc
c0025531:	c3                   	ret    

c0025532 <APIC::disable()>:
c0025532:	90                   	nop
c0025533:	c3                   	ret    

c0025534 <APIC::close(int, int, void*)>:
c0025534:	55                   	push   ebp
c0025535:	89 e5                	mov    ebp,esp
c0025537:	83 ec 08             	sub    esp,0x8
c002553a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002553d:	8b 00                	mov    eax,DWORD PTR [eax]
c002553f:	83 c0 3c             	add    eax,0x3c
c0025542:	8b 00                	mov    eax,DWORD PTR [eax]
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002554a:	ff d0                	call   eax
c002554c:	83 c4 10             	add    esp,0x10
c002554f:	b8 00 00 00 00       	mov    eax,0x0
c0025554:	c9                   	leave  
c0025555:	c3                   	ret    

c0025556 <IOAPIC::close(int, int, void*)>:
c0025556:	b8 00 00 00 00       	mov    eax,0x0
c002555b:	c3                   	ret    

c002555c <APIC::io_wait()>:
c002555c:	eb 00                	jmp    c002555e <APIC::io_wait()+0x2>
c002555e:	eb 00                	jmp    c0025560 <APIC::io_wait()+0x4>
c0025560:	90                   	nop
c0025561:	c3                   	ret    

c0025562 <APIC::getBase()>:
c0025562:	55                   	push   ebp
c0025563:	89 e5                	mov    ebp,esp
c0025565:	83 ec 18             	sub    esp,0x18
c0025568:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c002556d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025573:	83 e0 08             	and    eax,0x8
c0025576:	84 c0                	test   al,al
c0025578:	75 07                	jne    c0025581 <APIC::getBase()+0x1f>
c002557a:	b8 00 00 00 00       	mov    eax,0x0
c002557f:	eb 21                	jmp    c00255a2 <APIC::getBase()+0x40>
c0025581:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0025586:	83 ec 08             	sub    esp,0x8
c0025589:	6a 1b                	push   0x1b
c002558b:	50                   	push   eax
c002558c:	e8 af 95 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025591:	83 c4 10             	add    esp,0x10
c0025594:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025597:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002559a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002559d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00255a2:	c9                   	leave  
c00255a3:	c3                   	ret    

c00255a4 <APIC::eoi(unsigned char)>:
c00255a4:	55                   	push   ebp
c00255a5:	89 e5                	mov    ebp,esp
c00255a7:	83 ec 28             	sub    esp,0x28
c00255aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255ad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255b6:	e8 a7 ff ff ff       	call   c0025562 <APIC::getBase()>
c00255bb:	83 c4 10             	add    esp,0x10
c00255be:	05 b0 00 00 00       	add    eax,0xb0
c00255c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00255c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00255c9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00255cf:	90                   	nop
c00255d0:	c9                   	leave  
c00255d1:	c3                   	ret    

c00255d2 <APIC::open(int, int, void*)>:
c00255d2:	55                   	push   ebp
c00255d3:	89 e5                	mov    ebp,esp
c00255d5:	57                   	push   edi
c00255d6:	56                   	push   esi
c00255d7:	53                   	push   ebx
c00255d8:	83 ec 2c             	sub    esp,0x2c
c00255db:	83 ec 0c             	sub    esp,0xc
c00255de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255e1:	e8 7c ff ff ff       	call   c0025562 <APIC::getBase()>
c00255e6:	83 c4 10             	add    esp,0x10
c00255e9:	89 c2                	mov    edx,eax
c00255eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ee:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00255f4:	0f b6 f8             	movzx  edi,al
c00255f7:	89 d0                	mov    eax,edx
c00255f9:	ba 00 00 00 00       	mov    edx,0x0
c00255fe:	89 c1                	mov    ecx,eax
c0025600:	80 e5 ff             	and    ch,0xff
c0025603:	89 cb                	mov    ebx,ecx
c0025605:	0f b6 f2             	movzx  esi,dl
c0025608:	89 d8                	mov    eax,ebx
c002560a:	89 f2                	mov    edx,esi
c002560c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002560f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025612:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025616:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002561a:	83 e0 00             	and    eax,0x0
c002561d:	09 d0                	or     eax,edx
c002561f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025626:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002562c:	8d 50 01             	lea    edx,[eax+0x1]
c002562f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025632:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025638:	0f b6 d0             	movzx  edx,al
c002563b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002563e:	83 c2 08             	add    edx,0x8
c0025641:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025645:	0f b6 c9             	movzx  ecx,cl
c0025648:	81 c9 00 00 01 00    	or     ecx,0x10000
c002564e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025652:	83 ec 0c             	sub    esp,0xc
c0025655:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025658:	e8 05 ff ff ff       	call   c0025562 <APIC::getBase()>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	05 f0 00 00 00       	add    eax,0xf0
c0025665:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025668:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002566b:	8b 00                	mov    eax,DWORD PTR [eax]
c002566d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025670:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025677:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002567e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025681:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025684:	89 10                	mov    DWORD PTR [eax],edx
c0025686:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002568d:	a1 70 03 03 c0       	mov    eax,ds:0xc0030370
c0025692:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025695:	7d 7c                	jge    c0025713 <APIC::open(int, int, void*)+0x141>
c0025697:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002569a:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c00256a1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00256a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00256a7:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c00256ae:	c1 e8 08             	shr    eax,0x8
c00256b1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00256b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00256b8:	8b 04 85 80 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc80]
c00256bf:	c1 e8 18             	shr    eax,0x18
c00256c2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00256c5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00256c9:	75 40                	jne    c002570b <APIC::open(int, int, void*)+0x139>
c00256cb:	83 ec 0c             	sub    esp,0xc
c00256ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256d1:	e8 8c fe ff ff       	call   c0025562 <APIC::getBase()>
c00256d6:	83 c4 10             	add    esp,0x10
c00256d9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00256dd:	75 07                	jne    c00256e6 <APIC::open(int, int, void*)+0x114>
c00256df:	ba 60 03 00 00       	mov    edx,0x360
c00256e4:	eb 05                	jmp    c00256eb <APIC::open(int, int, void*)+0x119>
c00256e6:	ba 50 03 00 00       	mov    edx,0x350
c00256eb:	01 d0                	add    eax,edx
c00256ed:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00256f0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00256f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00256f5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00256f8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00256ff:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025703:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025706:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025709:	89 10                	mov    DWORD PTR [eax],edx
c002570b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002570e:	e9 7a ff ff ff       	jmp    c002568d <APIC::open(int, int, void*)+0xbb>
c0025713:	b8 00 00 00 00       	mov    eax,0x0
c0025718:	8d 65 f4             	lea    esp,[ebp-0xc]
c002571b:	5b                   	pop    ebx
c002571c:	5e                   	pop    esi
c002571d:	5f                   	pop    edi
c002571e:	5d                   	pop    ebp
c002571f:	c3                   	ret    

c0025720 <IOAPIC::IOAPIC()>:
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025727:	83 ec 08             	sub    esp,0x8
c002572a:	68 34 c6 02 c0       	push   0xc002c634
c002572f:	50                   	push   eax
c0025730:	e8 97 e6 fe ff       	call   c0013dcc <Device::Device(char const*)>
c0025735:	83 c4 10             	add    esp,0x10
c0025738:	ba 5c c7 02 c0       	mov    edx,0xc002c75c
c002573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025741:	89 10                	mov    DWORD PTR [eax],edx
c0025743:	90                   	nop
c0025744:	83 c4 0c             	add    esp,0xc
c0025747:	c3                   	ret    

c0025748 <APIC::APIC()>:
c0025748:	53                   	push   ebx
c0025749:	83 ec 18             	sub    esp,0x18
c002574c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025750:	83 ec 08             	sub    esp,0x8
c0025753:	68 3c c6 02 c0       	push   0xc002c63c
c0025758:	50                   	push   eax
c0025759:	e8 d8 ed fe ff       	call   c0014536 <InterruptController::InterruptController(char const*)>
c002575e:	83 c4 10             	add    esp,0x10
c0025761:	ba 14 c7 02 c0       	mov    edx,0xc002c714
c0025766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002576a:	89 10                	mov    DWORD PTR [eax],edx
c002576c:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c0025771:	83 f0 01             	xor    eax,0x1
c0025774:	84 c0                	test   al,al
c0025776:	0f 84 a1 00 00 00    	je     c002581d <APIC::APIC()+0xd5>
c002577c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025781:	a0 20 04 03 c0       	mov    al,ds:0xc0030420
c0025786:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002578a:	0f 83 86 00 00 00    	jae    c0025816 <APIC::APIC()+0xce>
c0025790:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002579f:	e8 f5 9d fe ff       	call   c000f599 <malloc>
c00257a4:	83 c4 10             	add    esp,0x10
c00257a7:	89 c3                	mov    ebx,eax
c00257a9:	83 ec 0c             	sub    esp,0xc
c00257ac:	53                   	push   ebx
c00257ad:	e8 6e ff ff ff       	call   c0025720 <IOAPIC::IOAPIC()>
c00257b2:	83 c4 10             	add    esp,0x10
c00257b5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00257b9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00257be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00257c2:	89 14 85 20 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce1e0],edx
c00257c9:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c00257ce:	40                   	inc    eax
c00257cf:	a3 00 1e 03 c0       	mov    ds:0xc0031e00,eax
c00257d4:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c00257d9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00257df:	83 ec 08             	sub    esp,0x8
c00257e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00257e6:	50                   	push   eax
c00257e7:	e8 dc e3 fe ff       	call   c0013bc8 <Device::addChild(Device*)>
c00257ec:	83 c4 10             	add    esp,0x10
c00257ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00257f5:	83 c0 08             	add    eax,0x8
c00257f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00257fa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00257ff:	6a 00                	push   0x0
c0025801:	6a 00                	push   0x0
c0025803:	52                   	push   edx
c0025804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025808:	ff d0                	call   eax
c002580a:	83 c4 10             	add    esp,0x10
c002580d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025811:	e9 6b ff ff ff       	jmp    c0025781 <APIC::APIC()+0x39>
c0025816:	c6 05 40 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e40,0x1
c002581d:	90                   	nop
c002581e:	83 c4 18             	add    esp,0x18
c0025821:	5b                   	pop    ebx
c0025822:	c3                   	ret    
c0025823:	90                   	nop

c0025824 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025824:	55                   	push   ebp
c0025825:	89 e5                	mov    ebp,esp
c0025827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025830:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025833:	72 1d                	jb     c0025852 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025838:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025841:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025847:	01 d0                	add    eax,edx
c0025849:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002584c:	73 04                	jae    c0025852 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002584e:	b0 01                	mov    al,0x1
c0025850:	eb 02                	jmp    c0025854 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025852:	b0 00                	mov    al,0x0
c0025854:	5d                   	pop    ebp
c0025855:	c3                   	ret    

c0025856 <IOAPIC::read(int)>:
c0025856:	55                   	push   ebp
c0025857:	89 e5                	mov    ebp,esp
c0025859:	83 ec 10             	sub    esp,0x10
c002585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002585f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025865:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025868:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002586b:	0f b6 d0             	movzx  edx,al
c002586e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025871:	89 10                	mov    DWORD PTR [eax],edx
c0025873:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025876:	83 c0 10             	add    eax,0x10
c0025879:	8b 00                	mov    eax,DWORD PTR [eax]
c002587b:	c9                   	leave  
c002587c:	c3                   	ret    
c002587d:	90                   	nop

c002587e <IOAPIC::open(int, int, void*)>:
c002587e:	55                   	push   ebp
c002587f:	89 e5                	mov    ebp,esp
c0025881:	57                   	push   edi
c0025882:	56                   	push   esi
c0025883:	53                   	push   ebx
c0025884:	83 ec 0c             	sub    esp,0xc
c0025887:	83 ec 0c             	sub    esp,0xc
c002588a:	68 67 c6 02 c0       	push   0xc002c667
c002588f:	e8 fb ce fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0025894:	83 c4 10             	add    esp,0x10
c0025897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002589d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00258a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258ac:	8b 14 85 60 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfba0]
c00258b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00258bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258c5:	8b 14 85 e0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb20]
c00258cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258cf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00258d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00258de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258e7:	0f b6 f8             	movzx  edi,al
c00258ea:	89 d0                	mov    eax,edx
c00258ec:	ba 00 00 00 00       	mov    edx,0x0
c00258f1:	89 c1                	mov    ecx,eax
c00258f3:	80 e5 ff             	and    ch,0xff
c00258f6:	89 cb                	mov    ebx,ecx
c00258f8:	0f b6 f2             	movzx  esi,dl
c00258fb:	89 d8                	mov    eax,ebx
c00258fd:	89 f2                	mov    edx,esi
c00258ff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025902:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025905:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025909:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002590d:	83 e0 00             	and    eax,0x0
c0025910:	09 d0                	or     eax,edx
c0025912:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025919:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002591f:	8d 50 01             	lea    edx,[eax+0x1]
c0025922:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025925:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002592b:	0f b6 d0             	movzx  edx,al
c002592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025931:	83 c2 08             	add    edx,0x8
c0025934:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025938:	0f b6 c9             	movzx  ecx,cl
c002593b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025941:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025945:	83 ec 08             	sub    esp,0x8
c0025948:	6a 01                	push   0x1
c002594a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002594d:	e8 04 ff ff ff       	call   c0025856 <IOAPIC::read(int)>
c0025952:	83 c4 10             	add    esp,0x10
c0025955:	c1 f8 10             	sar    eax,0x10
c0025958:	0f b6 c0             	movzx  eax,al
c002595b:	8d 50 01             	lea    edx,[eax+0x1]
c002595e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025961:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025967:	b8 00 00 00 00       	mov    eax,0x0
c002596c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002596f:	5b                   	pop    ebx
c0025970:	5e                   	pop    esi
c0025971:	5f                   	pop    edi
c0025972:	5d                   	pop    ebp
c0025973:	c3                   	ret    

c0025974 <IOAPIC::write(int, int)>:
c0025974:	55                   	push   ebp
c0025975:	89 e5                	mov    ebp,esp
c0025977:	83 ec 10             	sub    esp,0x10
c002597a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002597d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025983:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025986:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025989:	0f b6 d0             	movzx  edx,al
c002598c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002598f:	89 10                	mov    DWORD PTR [eax],edx
c0025991:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025994:	8d 50 10             	lea    edx,[eax+0x10]
c0025997:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002599a:	89 02                	mov    DWORD PTR [edx],eax
c002599c:	90                   	nop
c002599d:	c9                   	leave  
c002599e:	c3                   	ret    
c002599f:	90                   	nop

c00259a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00259a0:	55                   	push   ebp
c00259a1:	89 e5                	mov    ebp,esp
c00259a3:	53                   	push   ebx
c00259a4:	83 ec 2c             	sub    esp,0x2c
c00259a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259aa:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00259ad:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00259b0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00259b3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00259b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00259b9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00259bc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259c2:	88 d8                	mov    al,bl
c00259c4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00259c7:	88 c8                	mov    al,cl
c00259c9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259cc:	88 d0                	mov    al,dl
c00259ce:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00259d1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259d5:	83 c0 08             	add    eax,0x8
c00259d8:	01 c0                	add    eax,eax
c00259da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259e1:	83 c0 08             	add    eax,0x8
c00259e4:	01 c0                	add    eax,eax
c00259e6:	40                   	inc    eax
c00259e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00259ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00259ed:	50                   	push   eax
c00259ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f1:	e8 60 fe ff ff       	call   c0025856 <IOAPIC::read(int)>
c00259f6:	83 c4 08             	add    esp,0x8
c00259f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00259fc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025a03:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025a06:	c1 e0 18             	shl    eax,0x18
c0025a09:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025a0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a12:	52                   	push   edx
c0025a13:	50                   	push   eax
c0025a14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a17:	e8 58 ff ff ff       	call   c0025974 <IOAPIC::write(int, int)>
c0025a1c:	83 c4 0c             	add    esp,0xc
c0025a1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a22:	50                   	push   eax
c0025a23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a26:	e8 2b fe ff ff       	call   c0025856 <IOAPIC::read(int)>
c0025a2b:	83 c4 08             	add    esp,0x8
c0025a2e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a31:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025a38:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025a3f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025a46:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a4a:	74 09                	je     c0025a55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025a4c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025a53:	eb 07                	jmp    c0025a5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025a55:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025a5c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025a60:	74 09                	je     c0025a6b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025a62:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025a69:	eb 07                	jmp    c0025a72 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025a6b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025a72:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025a79:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025a7d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025a80:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025a83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a86:	52                   	push   edx
c0025a87:	50                   	push   eax
c0025a88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a8b:	e8 e4 fe ff ff       	call   c0025974 <IOAPIC::write(int, int)>
c0025a90:	83 c4 0c             	add    esp,0xc
c0025a93:	90                   	nop
c0025a94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025a97:	c9                   	leave  
c0025a98:	c3                   	ret    
c0025a99:	90                   	nop

c0025a9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025a9a:	55                   	push   ebp
c0025a9b:	89 e5                	mov    ebp,esp
c0025a9d:	57                   	push   edi
c0025a9e:	56                   	push   esi
c0025a9f:	53                   	push   ebx
c0025aa0:	83 ec 2c             	sub    esp,0x2c
c0025aa3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025aa6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025aa9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025aad:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ab1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ab5:	74 5a                	je     c0025b11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ab7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025abb:	7f 44                	jg     c0025b01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025abd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac0:	05 00 cd 02 c0       	add    eax,0xc002cd00
c0025ac5:	8a 00                	mov    al,BYTE PTR [eax]
c0025ac7:	0f b6 c0             	movzx  eax,al
c0025aca:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025acd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ad0:	66 8b 84 00 00 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc00]
c0025ad8:	0f b7 c0             	movzx  eax,ax
c0025adb:	83 e0 02             	and    eax,0x2
c0025ade:	85 c0                	test   eax,eax
c0025ae0:	74 04                	je     c0025ae6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025ae2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025ae6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ae9:	66 8b 84 00 00 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc00]
c0025af1:	0f b7 c0             	movzx  eax,ax
c0025af4:	83 e0 08             	and    eax,0x8
c0025af7:	85 c0                	test   eax,eax
c0025af9:	74 16                	je     c0025b11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025afb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025aff:	eb 10                	jmp    c0025b11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b01:	83 ec 0c             	sub    esp,0xc
c0025b04:	68 78 c6 02 c0       	push   0xc002c678
c0025b09:	e8 ed 43 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0025b0e:	83 c4 10             	add    esp,0x10
c0025b11:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025b15:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c0025b1a:	83 ec 08             	sub    esp,0x8
c0025b1d:	50                   	push   eax
c0025b1e:	68 b0 c6 02 c0       	push   0xc002c6b0
c0025b23:	e8 67 cc fe ff       	call   c001278f <Dbg::kprintf(char const*, ...)>
c0025b28:	83 c4 10             	add    esp,0x10
c0025b2b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025b32:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c0025b37:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025b3a:	7d 67                	jge    c0025ba3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b3c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b3f:	8b 04 85 20 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce1e0]
c0025b46:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b49:	83 ec 08             	sub    esp,0x8
c0025b4c:	52                   	push   edx
c0025b4d:	50                   	push   eax
c0025b4e:	e8 d1 fc ff ff       	call   c0025824 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025b53:	83 c4 10             	add    esp,0x10
c0025b56:	84 c0                	test   al,al
c0025b58:	74 44                	je     c0025b9e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025b5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b5d:	8b 1c 85 20 1e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce1e0]
c0025b64:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025b68:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025b6b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025b6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b72:	83 c0 20             	add    eax,0x20
c0025b75:	0f b6 f0             	movzx  esi,al
c0025b78:	b8 00 00 00 00       	mov    eax,0x0
c0025b7d:	99                   	cdq    
c0025b7e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025b81:	0f b6 c9             	movzx  ecx,cl
c0025b84:	83 ec 04             	sub    esp,0x4
c0025b87:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025b8a:	57                   	push   edi
c0025b8b:	56                   	push   esi
c0025b8c:	52                   	push   edx
c0025b8d:	50                   	push   eax
c0025b8e:	51                   	push   ecx
c0025b8f:	53                   	push   ebx
c0025b90:	e8 0b fe ff ff       	call   c00259a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025b95:	83 c4 20             	add    esp,0x20
c0025b98:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025b9c:	eb 05                	jmp    c0025ba3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b9e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ba1:	eb 8f                	jmp    c0025b32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ba3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ba6:	83 f0 01             	xor    eax,0x1
c0025ba9:	84 c0                	test   al,al
c0025bab:	74 10                	je     c0025bbd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025bad:	83 ec 0c             	sub    esp,0xc
c0025bb0:	68 c7 c6 02 c0       	push   0xc002c6c7
c0025bb5:	e8 41 43 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0025bba:	83 c4 10             	add    esp,0x10
c0025bbd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025bc1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025bc8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025bcc:	7f 65                	jg     c0025c33 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bd4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025bdb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bde:	01 ca                	add    edx,ecx
c0025be0:	83 c2 54             	add    edx,0x54
c0025be3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025be7:	85 c0                	test   eax,eax
c0025be9:	75 43                	jne    c0025c2e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bf1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025bf8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bfb:	01 ca                	add    edx,ecx
c0025bfd:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025c00:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025c03:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c0d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c14:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c17:	01 ca                	add    edx,ecx
c0025c19:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025c1f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025c22:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c29:	83 e8 20             	sub    eax,0x20
c0025c2c:	eb 1a                	jmp    c0025c48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025c2e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025c31:	eb 95                	jmp    c0025bc8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025c33:	83 ec 0c             	sub    esp,0xc
c0025c36:	68 d4 c6 02 c0       	push   0xc002c6d4
c0025c3b:	e8 bb 42 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0025c40:	83 c4 10             	add    esp,0x10
c0025c43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025c48:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c4b:	5b                   	pop    ebx
c0025c4c:	5e                   	pop    esi
c0025c4d:	5f                   	pop    edi
c0025c4e:	5d                   	pop    ebp
c0025c4f:	c3                   	ret    

c0025c50 <PIC::disable()>:
c0025c50:	55                   	push   ebp
c0025c51:	89 e5                	mov    ebp,esp
c0025c53:	83 ec 10             	sub    esp,0x10
c0025c56:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025c5c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025c60:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c63:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c67:	ee                   	out    dx,al
c0025c68:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025c6e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025c72:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c75:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025c79:	ee                   	out    dx,al
c0025c7a:	90                   	nop
c0025c7b:	c9                   	leave  
c0025c7c:	c3                   	ret    
c0025c7d:	90                   	nop

c0025c7e <PIC::close(int, int, void*)>:
c0025c7e:	55                   	push   ebp
c0025c7f:	89 e5                	mov    ebp,esp
c0025c81:	83 ec 08             	sub    esp,0x8
c0025c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c89:	83 c0 3c             	add    eax,0x3c
c0025c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c8e:	83 ec 0c             	sub    esp,0xc
c0025c91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c94:	ff d0                	call   eax
c0025c96:	83 c4 10             	add    esp,0x10
c0025c99:	b8 00 00 00 00       	mov    eax,0x0
c0025c9e:	c9                   	leave  
c0025c9f:	c3                   	ret    

c0025ca0 <PIC::PIC()>:
c0025ca0:	83 ec 0c             	sub    esp,0xc
c0025ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca7:	83 ec 08             	sub    esp,0x8
c0025caa:	68 80 c7 02 c0       	push   0xc002c780
c0025caf:	50                   	push   eax
c0025cb0:	e8 81 e8 fe ff       	call   c0014536 <InterruptController::InterruptController(char const*)>
c0025cb5:	83 c4 10             	add    esp,0x10
c0025cb8:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0025cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc1:	89 10                	mov    DWORD PTR [eax],edx
c0025cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ccd:	0f b6 d0             	movzx  edx,al
c0025cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cdf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ce5:	0f b6 d0             	movzx  edx,al
c0025ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cec:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0025cfe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d02:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d08:	0f b6 d0             	movzx  edx,al
c0025d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d0f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d13:	83 e1 3f             	and    ecx,0x3f
c0025d16:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d24:	0f b6 d0             	movzx  edx,al
c0025d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d2b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d3c:	0f b6 d0             	movzx  edx,al
c0025d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d43:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d52:	8d 50 01             	lea    edx,[eax+0x1]
c0025d55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d59:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d5f:	0f b6 d0             	movzx  edx,al
c0025d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d66:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d6a:	83 e1 3f             	and    ecx,0x3f
c0025d6d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d71:	90                   	nop
c0025d72:	83 c4 0c             	add    esp,0xc
c0025d75:	c3                   	ret    

c0025d76 <PIC::ioWait()>:
c0025d76:	eb 00                	jmp    c0025d78 <PIC::ioWait()+0x2>
c0025d78:	eb 00                	jmp    c0025d7a <PIC::ioWait()+0x4>
c0025d7a:	90                   	nop
c0025d7b:	c3                   	ret    

c0025d7c <PIC::getIRQReg(int)>:
c0025d7c:	55                   	push   ebp
c0025d7d:	89 e5                	mov    ebp,esp
c0025d7f:	83 ec 10             	sub    esp,0x10
c0025d82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d85:	0f b6 c0             	movzx  eax,al
c0025d88:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d8e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025d91:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d94:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d98:	ee                   	out    dx,al
c0025d99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d9c:	0f b6 c0             	movzx  eax,al
c0025d9f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025da5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025da8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025dab:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025daf:	ee                   	out    dx,al
c0025db0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025db6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025dba:	89 c2                	mov    edx,eax
c0025dbc:	ec                   	in     al,dx
c0025dbd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025dc0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025dc3:	0f b6 c0             	movzx  eax,al
c0025dc6:	c1 e0 08             	shl    eax,0x8
c0025dc9:	89 c1                	mov    ecx,eax
c0025dcb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025dd1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025dd5:	89 c2                	mov    edx,eax
c0025dd7:	ec                   	in     al,dx
c0025dd8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025ddb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025dde:	0f b6 c0             	movzx  eax,al
c0025de1:	09 c8                	or     eax,ecx
c0025de3:	c9                   	leave  
c0025de4:	c3                   	ret    
c0025de5:	90                   	nop

c0025de6 <PIC::eoi(unsigned char)>:
c0025de6:	55                   	push   ebp
c0025de7:	89 e5                	mov    ebp,esp
c0025de9:	83 ec 14             	sub    esp,0x14
c0025dec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025def:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025df2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025df6:	75 1e                	jne    c0025e16 <PIC::eoi(unsigned char)+0x30>
c0025df8:	6a 0b                	push   0xb
c0025dfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dfd:	e8 7a ff ff ff       	call   c0025d7c <PIC::getIRQReg(int)>
c0025e02:	83 c4 08             	add    esp,0x8
c0025e05:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025e09:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025e0d:	25 80 00 00 00       	and    eax,0x80
c0025e12:	85 c0                	test   eax,eax
c0025e14:	74 5f                	je     c0025e75 <PIC::eoi(unsigned char)+0x8f>
c0025e16:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025e1a:	75 2d                	jne    c0025e49 <PIC::eoi(unsigned char)+0x63>
c0025e1c:	6a 0b                	push   0xb
c0025e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e21:	e8 56 ff ff ff       	call   c0025d7c <PIC::getIRQReg(int)>
c0025e26:	83 c4 08             	add    esp,0x8
c0025e29:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025e2d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e30:	66 85 c0             	test   ax,ax
c0025e33:	78 14                	js     c0025e49 <PIC::eoi(unsigned char)+0x63>
c0025e35:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025e3b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025e3f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e42:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e46:	ee                   	out    dx,al
c0025e47:	eb 2d                	jmp    c0025e76 <PIC::eoi(unsigned char)+0x90>
c0025e49:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025e4d:	76 12                	jbe    c0025e61 <PIC::eoi(unsigned char)+0x7b>
c0025e4f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e55:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025e59:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e5c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e60:	ee                   	out    dx,al
c0025e61:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e67:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025e6b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e6e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e72:	ee                   	out    dx,al
c0025e73:	eb 01                	jmp    c0025e76 <PIC::eoi(unsigned char)+0x90>
c0025e75:	90                   	nop
c0025e76:	c9                   	leave  
c0025e77:	c3                   	ret    

c0025e78 <PIC::remap()>:
c0025e78:	55                   	push   ebp
c0025e79:	89 e5                	mov    ebp,esp
c0025e7b:	83 ec 48             	sub    esp,0x48
c0025e7e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025e85:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025e8c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025e92:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025e95:	89 c2                	mov    edx,eax
c0025e97:	ec                   	in     al,dx
c0025e98:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025e9b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025e9e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025ea1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025ea7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025eaa:	89 c2                	mov    edx,eax
c0025eac:	ec                   	in     al,dx
c0025ead:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025eb0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025eb3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025eb6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025ebc:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025ec0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025ec3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025ec6:	ee                   	out    dx,al
c0025ec7:	83 ec 0c             	sub    esp,0xc
c0025eca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ecd:	e8 a4 fe ff ff       	call   c0025d76 <PIC::ioWait()>
c0025ed2:	83 c4 10             	add    esp,0x10
c0025ed5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025edb:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025edf:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025ee2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025ee5:	ee                   	out    dx,al
c0025ee6:	83 ec 0c             	sub    esp,0xc
c0025ee9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eec:	e8 85 fe ff ff       	call   c0025d76 <PIC::ioWait()>
c0025ef1:	83 c4 10             	add    esp,0x10
c0025ef4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025ef7:	0f b6 c0             	movzx  eax,al
c0025efa:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025f00:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025f03:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025f06:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025f09:	ee                   	out    dx,al
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f10:	e8 61 fe ff ff       	call   c0025d76 <PIC::ioWait()>
c0025f15:	83 c4 10             	add    esp,0x10
c0025f18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f1b:	0f b6 c0             	movzx  eax,al
c0025f1e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025f24:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025f27:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025f2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025f2d:	ee                   	out    dx,al
c0025f2e:	83 ec 0c             	sub    esp,0xc
c0025f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f34:	e8 3d fe ff ff       	call   c0025d76 <PIC::ioWait()>
c0025f39:	83 c4 10             	add    esp,0x10
c0025f3c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025f42:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025f46:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025f49:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025f4c:	ee                   	out    dx,al
c0025f4d:	83 ec 0c             	sub    esp,0xc
c0025f50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f53:	e8 1e fe ff ff       	call   c0025d76 <PIC::ioWait()>
c0025f58:	83 c4 10             	add    esp,0x10
c0025f5b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025f61:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025f65:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025f68:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f6b:	ee                   	out    dx,al
c0025f6c:	83 ec 0c             	sub    esp,0xc
c0025f6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f72:	e8 ff fd ff ff       	call   c0025d76 <PIC::ioWait()>
c0025f77:	83 c4 10             	add    esp,0x10
c0025f7a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025f80:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025f84:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025f87:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025f8a:	ee                   	out    dx,al
c0025f8b:	83 ec 0c             	sub    esp,0xc
c0025f8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f91:	e8 e0 fd ff ff       	call   c0025d76 <PIC::ioWait()>
c0025f96:	83 c4 10             	add    esp,0x10
c0025f99:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025f9f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025fa3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025fa6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025fa9:	ee                   	out    dx,al
c0025faa:	83 ec 0c             	sub    esp,0xc
c0025fad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb0:	e8 c1 fd ff ff       	call   c0025d76 <PIC::ioWait()>
c0025fb5:	83 c4 10             	add    esp,0x10
c0025fb8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025fbc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025fc2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025fc5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025fc8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025fcb:	ee                   	out    dx,al
c0025fcc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025fd0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025fd6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025fd9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025fdc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025fdf:	ee                   	out    dx,al
c0025fe0:	90                   	nop
c0025fe1:	c9                   	leave  
c0025fe2:	c3                   	ret    
c0025fe3:	90                   	nop

c0025fe4 <PIC::open(int, int, void*)>:
c0025fe4:	55                   	push   ebp
c0025fe5:	89 e5                	mov    ebp,esp
c0025fe7:	83 ec 18             	sub    esp,0x18
c0025fea:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025ff0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025ff4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ff7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ffb:	ee                   	out    dx,al
c0025ffc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026002:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026006:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026009:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002600d:	ee                   	out    dx,al
c002600e:	83 ec 0c             	sub    esp,0xc
c0026011:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026014:	e8 5f fe ff ff       	call   c0025e78 <PIC::remap()>
c0026019:	83 c4 10             	add    esp,0x10
c002601c:	b8 00 00 00 00       	mov    eax,0x0
c0026021:	c9                   	leave  
c0026022:	c3                   	ret    
c0026023:	90                   	nop

c0026024 <APICTimer::close(int, int, void*)>:
c0026024:	b8 00 00 00 00       	mov    eax,0x0
c0026029:	c3                   	ret    

c002602a <apicTimerHandler(regs*, void*)>:
c002602a:	83 ec 0c             	sub    esp,0xc
c002602d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026031:	8b 00                	mov    eax,DWORD PTR [eax]
c0026033:	99                   	cdq    
c0026034:	52                   	push   edx
c0026035:	50                   	push   eax
c0026036:	6a 00                	push   0x0
c0026038:	68 00 ca 9a 3b       	push   0x3b9aca00
c002603d:	e8 92 07 00 00       	call   c00267d4 <__udivdi3>
c0026042:	83 c4 10             	add    esp,0x10
c0026045:	83 ec 08             	sub    esp,0x8
c0026048:	52                   	push   edx
c0026049:	50                   	push   eax
c002604a:	e8 3e 06 ff ff       	call   c001668d <timerHandler(unsigned long long)>
c002604f:	83 c4 10             	add    esp,0x10
c0026052:	90                   	nop
c0026053:	83 c4 0c             	add    esp,0xc
c0026056:	c3                   	ret    
c0026057:	90                   	nop

c0026058 <APICTimer::write(int)>:
c0026058:	53                   	push   ebx
c0026059:	83 ec 28             	sub    esp,0x28
c002605c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026060:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026064:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002606a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c002606f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026075:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002607b:	83 ec 0c             	sub    esp,0xc
c002607e:	50                   	push   eax
c002607f:	e8 de f4 ff ff       	call   c0025562 <APIC::getBase()>
c0026084:	83 c4 10             	add    esp,0x10
c0026087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002608b:	a1 10 e1 02 c0       	mov    eax,ds:0xc002e110
c0026090:	8b 15 14 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e114
c0026096:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002609e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260a2:	05 e0 03 00 00       	add    eax,0x3e0
c00260a7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00260ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260b1:	05 80 03 00 00       	add    eax,0x380
c00260b6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00260bc:	fb                   	sti    
c00260bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260c5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00260ca:	83 d2 00             	adc    edx,0x0
c00260cd:	89 c1                	mov    ecx,eax
c00260cf:	89 d3                	mov    ebx,edx
c00260d1:	a1 10 e1 02 c0       	mov    eax,ds:0xc002e110
c00260d6:	8b 15 14 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e114
c00260dc:	39 c8                	cmp    eax,ecx
c00260de:	89 d0                	mov    eax,edx
c00260e0:	19 d8                	sbb    eax,ebx
c00260e2:	73 02                	jae    c00260e6 <APICTimer::write(int)+0x8e>
c00260e4:	eb d7                	jmp    c00260bd <APICTimer::write(int)+0x65>
c00260e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260ea:	05 20 03 00 00       	add    eax,0x320
c00260ef:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00260f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260f9:	05 90 03 00 00       	add    eax,0x390
c00260fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0026100:	f7 d0                	not    eax
c0026102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026106:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002610a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002610e:	ba 00 00 00 00       	mov    edx,0x0
c0026113:	f7 f3                	div    ebx
c0026115:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026119:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002611d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026123:	0d 00 00 02 00       	or     eax,0x20000
c0026128:	89 c2                	mov    edx,eax
c002612a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002612e:	05 20 03 00 00       	add    eax,0x320
c0026133:	89 10                	mov    DWORD PTR [eax],edx
c0026135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026139:	05 e0 03 00 00       	add    eax,0x3e0
c002613e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026148:	05 80 03 00 00       	add    eax,0x380
c002614d:	89 c2                	mov    edx,eax
c002614f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026153:	89 02                	mov    DWORD PTR [edx],eax
c0026155:	90                   	nop
c0026156:	83 c4 28             	add    esp,0x28
c0026159:	5b                   	pop    ebx
c002615a:	c3                   	ret    
c002615b:	90                   	nop

c002615c <APICTimer::open(int, int, void*)>:
c002615c:	57                   	push   edi
c002615d:	56                   	push   esi
c002615e:	53                   	push   ebx
c002615f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026163:	8b 00                	mov    eax,DWORD PTR [eax]
c0026165:	83 c0 24             	add    eax,0x24
c0026168:	8b 00                	mov    eax,DWORD PTR [eax]
c002616a:	83 ec 08             	sub    esp,0x8
c002616d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026175:	ff d0                	call   eax
c0026177:	83 c4 10             	add    esp,0x10
c002617a:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c002617f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026185:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002618b:	83 ec 0c             	sub    esp,0xc
c002618e:	50                   	push   eax
c002618f:	e8 ce f3 ff ff       	call   c0025562 <APIC::getBase()>
c0026194:	83 c4 10             	add    esp,0x10
c0026197:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002619d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261a7:	0f b6 f8             	movzx  edi,al
c00261aa:	89 d0                	mov    eax,edx
c00261ac:	ba 00 00 00 00       	mov    edx,0x0
c00261b1:	89 c1                	mov    ecx,eax
c00261b3:	80 e5 ff             	and    ch,0xff
c00261b6:	89 cb                	mov    ebx,ecx
c00261b8:	0f b6 f2             	movzx  esi,dl
c00261bb:	89 d8                	mov    eax,ebx
c00261bd:	89 f2                	mov    edx,esi
c00261bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261c3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00261c6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00261ca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00261ce:	83 e0 00             	and    eax,0x0
c00261d1:	09 d0                	or     eax,edx
c00261d3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00261d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261db:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261e1:	8d 50 01             	lea    edx,[eax+0x1]
c00261e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261e8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00261ee:	0f b6 d0             	movzx  edx,al
c00261f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f5:	83 c2 08             	add    edx,0x8
c00261f8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00261fc:	0f b6 c9             	movzx  ecx,cl
c00261ff:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026205:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026211:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002621f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026229:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002622f:	83 ec 0c             	sub    esp,0xc
c0026232:	51                   	push   ecx
c0026233:	6a 01                	push   0x1
c0026235:	68 2a 60 02 c0       	push   0xc002602a
c002623a:	52                   	push   edx
c002623b:	50                   	push   eax
c002623c:	e8 ff d8 fe ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026241:	83 c4 20             	add    esp,0x20
c0026244:	89 c2                	mov    edx,eax
c0026246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026250:	b8 00 00 00 00       	mov    eax,0x0
c0026255:	5b                   	pop    ebx
c0026256:	5e                   	pop    esi
c0026257:	5f                   	pop    edi
c0026258:	c3                   	ret    
c0026259:	90                   	nop

c002625a <APICTimer::APICTimer()>:
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026261:	83 ec 08             	sub    esp,0x8
c0026264:	68 ec c7 02 c0       	push   0xc002c7ec
c0026269:	50                   	push   eax
c002626a:	e8 8f 03 ff ff       	call   c00165fe <Timer::Timer(char const*)>
c002626f:	83 c4 10             	add    esp,0x10
c0026272:	ba 00 c8 02 c0       	mov    edx,0xc002c800
c0026277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002627b:	89 10                	mov    DWORD PTR [eax],edx
c002627d:	90                   	nop
c002627e:	83 c4 0c             	add    esp,0xc
c0026281:	c3                   	ret    

c0026282 <PIT::write(int)>:
c0026282:	83 ec 10             	sub    esp,0x10
c0026285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026289:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002628d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026293:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026297:	a3 44 1e 03 c0       	mov    ds:0xc0031e44,eax
c002629c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00262a1:	99                   	cdq    
c00262a2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00262a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262aa:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00262b1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00262b6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00262ba:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00262bf:	ee                   	out    dx,al
c00262c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262c4:	0f b6 c0             	movzx  eax,al
c00262c7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00262ce:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00262d2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00262d6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00262db:	ee                   	out    dx,al
c00262dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262e0:	c1 f8 08             	sar    eax,0x8
c00262e3:	0f b6 c0             	movzx  eax,al
c00262e6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00262ed:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00262f1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00262f5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00262fa:	ee                   	out    dx,al
c00262fb:	90                   	nop
c00262fc:	83 c4 10             	add    esp,0x10
c00262ff:	c3                   	ret    

c0026300 <pitHandler(regs*, void*)>:
c0026300:	83 ec 0c             	sub    esp,0xc
c0026303:	a1 44 1e 03 c0       	mov    eax,ds:0xc0031e44
c0026308:	99                   	cdq    
c0026309:	52                   	push   edx
c002630a:	50                   	push   eax
c002630b:	6a 00                	push   0x0
c002630d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026312:	e8 bd 04 00 00       	call   c00267d4 <__udivdi3>
c0026317:	83 c4 10             	add    esp,0x10
c002631a:	83 ec 08             	sub    esp,0x8
c002631d:	52                   	push   edx
c002631e:	50                   	push   eax
c002631f:	e8 69 03 ff ff       	call   c001668d <timerHandler(unsigned long long)>
c0026324:	83 c4 10             	add    esp,0x10
c0026327:	90                   	nop
c0026328:	83 c4 0c             	add    esp,0xc
c002632b:	c3                   	ret    

c002632c <PIT::open(int, int, void*)>:
c002632c:	83 ec 0c             	sub    esp,0xc
c002632f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026333:	8b 00                	mov    eax,DWORD PTR [eax]
c0026335:	83 c0 24             	add    eax,0x24
c0026338:	8b 00                	mov    eax,DWORD PTR [eax]
c002633a:	83 ec 08             	sub    esp,0x8
c002633d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026345:	ff d0                	call   eax
c0026347:	83 c4 10             	add    esp,0x10
c002634a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634e:	83 ec 0c             	sub    esp,0xc
c0026351:	6a 00                	push   0x0
c0026353:	6a 01                	push   0x1
c0026355:	68 00 63 02 c0       	push   0xc0026300
c002635a:	6a 00                	push   0x0
c002635c:	50                   	push   eax
c002635d:	e8 de d7 fe ff       	call   c0013b40 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026362:	83 c4 20             	add    esp,0x20
c0026365:	89 c2                	mov    edx,eax
c0026367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026371:	b8 00 00 00 00       	mov    eax,0x0
c0026376:	83 c4 0c             	add    esp,0xc
c0026379:	c3                   	ret    

c002637a <PIT::close(int, int, void*)>:
c002637a:	83 ec 0c             	sub    esp,0xc
c002637d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026381:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002638b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638f:	6a 01                	push   0x1
c0026391:	68 00 63 02 c0       	push   0xc0026300
c0026396:	6a 00                	push   0x0
c0026398:	50                   	push   eax
c0026399:	e8 ec d7 fe ff       	call   c0013b8a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002639e:	83 c4 10             	add    esp,0x10
c00263a1:	b8 00 00 00 00       	mov    eax,0x0
c00263a6:	83 c4 0c             	add    esp,0xc
c00263a9:	c3                   	ret    

c00263aa <PIT::PIT()>:
c00263aa:	83 ec 0c             	sub    esp,0xc
c00263ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b1:	83 ec 08             	sub    esp,0x8
c00263b4:	68 28 c8 02 c0       	push   0xc002c828
c00263b9:	50                   	push   eax
c00263ba:	e8 3f 02 ff ff       	call   c00165fe <Timer::Timer(char const*)>
c00263bf:	83 c4 10             	add    esp,0x10
c00263c2:	ba 50 c8 02 c0       	mov    edx,0xc002c850
c00263c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cb:	89 10                	mov    DWORD PTR [eax],edx
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263d7:	0f b6 d0             	movzx  edx,al
c00263da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263de:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00263e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263ef:	0f b6 d0             	movzx  edx,al
c00263f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00263fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026405:	8d 50 01             	lea    edx,[eax+0x1]
c0026408:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002640c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026412:	0f b6 d0             	movzx  edx,al
c0026415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026419:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002641d:	83 e1 3f             	and    ecx,0x3f
c0026420:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026424:	90                   	nop
c0026425:	83 c4 0c             	add    esp,0xc
c0026428:	c3                   	ret    
c0026429:	66 90                	xchg   ax,ax
c002642b:	66 90                	xchg   ax,ax
c002642d:	66 90                	xchg   ax,ax
c002642f:	90                   	nop

c0026430 <avxDetect>:
c0026430:	b8 00 00 00 00       	mov    eax,0x0
c0026435:	c3                   	ret    

c0026436 <avxSave>:
c0026436:	c3                   	ret    

c0026437 <avxLoad>:
c0026437:	c3                   	ret    

c0026438 <avxInit>:
c0026438:	c3                   	ret    

c0026439 <avxClose>:
c0026439:	c3                   	ret    

c002643a <wouldSheSayYes>:
c002643a:	c3                   	ret    
c002643b:	49                   	dec    ecx
c002643c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026440:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026444:	75 20                	jne    c0026466 <sseDetect.noSSE+0x1>
c0026446:	4e                   	dec    esi
c0026447:	79 61                	jns    c00264aa <x87Detect+0x14>
c0026449:	68 2e 2e 2e 00       	push   0x2e2e2e
c002644e:	66 90                	xchg   ax,ax

c0026450 <absolutelyNoChanceInHell>:
c0026450:	b8 01 00 00 00       	mov    eax,0x1
c0026455:	0f a2                	cpuid  
c0026457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002645d:	74 06                	je     c0026465 <sseDetect.noSSE>
c002645f:	b8 01 00 00 00       	mov    eax,0x1
c0026464:	c3                   	ret    

c0026465 <sseDetect.noSSE>:
c0026465:	31 c0                	xor    eax,eax
c0026467:	c3                   	ret    

c0026468 <sseSave>:
c0026468:	0f ae 44 24 04       	fxsave [esp+0x4]
c002646d:	c3                   	ret    

c002646e <sseLoad>:
c002646e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026473:	c3                   	ret    

c0026474 <sseInit>:
c0026474:	e8 49 00 00 00       	call   c00264c2 <x87Init>
c0026479:	0f 20 e0             	mov    eax,cr4
c002647c:	66 0d 00 06          	or     ax,0x600
c0026480:	0f 22 e0             	mov    cr4,eax
c0026483:	c3                   	ret    

c0026484 <sseClose>:
c0026484:	c3                   	ret    
c0026485:	66 90                	xchg   ax,ax
c0026487:	66 90                	xchg   ax,ax
c0026489:	66 90                	xchg   ax,ax
c002648b:	66 90                	xchg   ax,ax
c002648d:	66 90                	xchg   ax,ax
c002648f:	90                   	nop

c0026490 <value_37F>:
c0026490:	7f 03                	jg     c0026495 <value_37A+0x1>

c0026492 <value_37E>:
c0026492:	7e 03                	jle    c0026497 <x87Detect+0x1>

c0026494 <value_37A>:
c0026494:	7a 03                	jp     c0026499 <x87Detect+0x3>

c0026496 <x87Detect>:
c0026496:	b8 01 00 00 00       	mov    eax,0x1
c002649b:	0f a2                	cpuid  
c002649d:	f7 c2 01 00 00 00    	test   edx,0x1
c00264a3:	74 06                	je     c00264ab <x87Detect.nox87>
c00264a5:	b8 01 00 00 00       	mov    eax,0x1
c00264aa:	c3                   	ret    

c00264ab <x87Detect.nox87>:
c00264ab:	b8 00 00 00 00       	mov    eax,0x0
c00264b0:	c3                   	ret    

c00264b1 <x87Save>:
c00264b1:	55                   	push   ebp
c00264b2:	89 e5                	mov    ebp,esp
c00264b4:	9b dd 75 08          	fsave  [ebp+0x8]
c00264b8:	c9                   	leave  
c00264b9:	c3                   	ret    

c00264ba <x87Load>:
c00264ba:	55                   	push   ebp
c00264bb:	89 e5                	mov    ebp,esp
c00264bd:	dd 65 08             	frstor [ebp+0x8]
c00264c0:	c9                   	leave  
c00264c1:	c3                   	ret    

c00264c2 <x87Init>:
c00264c2:	9b db e3             	finit  
c00264c5:	0f 20 c0             	mov    eax,cr0
c00264c8:	66 25 fb ff          	and    ax,0xfffb
c00264cc:	66 0d 22 00          	or     ax,0x22
c00264d0:	0f 22 c0             	mov    cr0,eax
c00264d3:	0f 06                	clts   
c00264d5:	d9 2d 94 64 02 c0    	fldcw  WORD PTR ds:0xc0026494
c00264db:	c3                   	ret    

c00264dc <x87Close>:
c00264dc:	c3                   	ret    
c00264dd:	66 90                	xchg   ax,ax
c00264df:	90                   	nop

c00264e0 <__do_global_ctors_aux>:
c00264e0:	a1 d4 90 02 c0       	mov    eax,ds:0xc00290d4
c00264e5:	83 f8 ff             	cmp    eax,0xffffffff
c00264e8:	74 1a                	je     c0026504 <__do_global_ctors_aux+0x24>
c00264ea:	55                   	push   ebp
c00264eb:	89 e5                	mov    ebp,esp
c00264ed:	53                   	push   ebx
c00264ee:	52                   	push   edx
c00264ef:	bb d4 90 02 c0       	mov    ebx,0xc00290d4
c00264f4:	ff d0                	call   eax
c00264f6:	83 eb 04             	sub    ebx,0x4
c00264f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00264fb:	83 f8 ff             	cmp    eax,0xffffffff
c00264fe:	75 f4                	jne    c00264f4 <__do_global_ctors_aux+0x14>
c0026500:	58                   	pop    eax
c0026501:	5b                   	pop    ebx
c0026502:	5d                   	pop    ebp
c0026503:	c3                   	ret    
c0026504:	c3                   	ret    
c0026505:	66 90                	xchg   ax,ax
c0026507:	90                   	nop

c0026508 <__divdi3>:
c0026508:	55                   	push   ebp
c0026509:	57                   	push   edi
c002650a:	56                   	push   esi
c002650b:	53                   	push   ebx
c002650c:	83 ec 1c             	sub    esp,0x1c
c002650f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026513:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026517:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002651a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002651e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026522:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026526:	85 db                	test   ebx,ebx
c0026528:	0f 88 8e 00 00 00    	js     c00265bc <__divdi3+0xb4>
c002652e:	89 dd                	mov    ebp,ebx
c0026530:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026538:	89 d3                	mov    ebx,edx
c002653a:	85 d2                	test   edx,edx
c002653c:	79 0d                	jns    c002654b <__divdi3+0x43>
c002653e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026542:	f7 d8                	neg    eax
c0026544:	83 d2 00             	adc    edx,0x0
c0026547:	f7 da                	neg    edx
c0026549:	89 d3                	mov    ebx,edx
c002654b:	89 c7                	mov    edi,eax
c002654d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026550:	85 db                	test   ebx,ebx
c0026552:	75 48                	jne    c002659c <__divdi3+0x94>
c0026554:	39 ef                	cmp    edi,ebp
c0026556:	76 24                	jbe    c002657c <__divdi3+0x74>
c0026558:	89 ea                	mov    edx,ebp
c002655a:	f7 f7                	div    edi
c002655c:	89 c1                	mov    ecx,eax
c002655e:	31 f6                	xor    esi,esi
c0026560:	89 c8                	mov    eax,ecx
c0026562:	89 f2                	mov    edx,esi
c0026564:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026568:	85 c9                	test   ecx,ecx
c002656a:	74 07                	je     c0026573 <__divdi3+0x6b>
c002656c:	f7 d8                	neg    eax
c002656e:	83 d2 00             	adc    edx,0x0
c0026571:	f7 da                	neg    edx
c0026573:	83 c4 1c             	add    esp,0x1c
c0026576:	5b                   	pop    ebx
c0026577:	5e                   	pop    esi
c0026578:	5f                   	pop    edi
c0026579:	5d                   	pop    ebp
c002657a:	c3                   	ret    
c002657b:	90                   	nop
c002657c:	85 ff                	test   edi,edi
c002657e:	75 0b                	jne    c002658b <__divdi3+0x83>
c0026580:	b8 01 00 00 00       	mov    eax,0x1
c0026585:	31 d2                	xor    edx,edx
c0026587:	f7 f3                	div    ebx
c0026589:	89 c7                	mov    edi,eax
c002658b:	31 d2                	xor    edx,edx
c002658d:	89 e8                	mov    eax,ebp
c002658f:	f7 f7                	div    edi
c0026591:	89 c6                	mov    esi,eax
c0026593:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026596:	f7 f7                	div    edi
c0026598:	89 c1                	mov    ecx,eax
c002659a:	eb c4                	jmp    c0026560 <__divdi3+0x58>
c002659c:	39 eb                	cmp    ebx,ebp
c002659e:	77 3c                	ja     c00265dc <__divdi3+0xd4>
c00265a0:	0f bd f3             	bsr    esi,ebx
c00265a3:	83 f6 1f             	xor    esi,0x1f
c00265a6:	75 40                	jne    c00265e8 <__divdi3+0xe0>
c00265a8:	39 eb                	cmp    ebx,ebp
c00265aa:	72 09                	jb     c00265b5 <__divdi3+0xad>
c00265ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00265af:	0f 87 97 00 00 00    	ja     c002664c <__divdi3+0x144>
c00265b5:	b9 01 00 00 00       	mov    ecx,0x1
c00265ba:	eb a4                	jmp    c0026560 <__divdi3+0x58>
c00265bc:	f7 d9                	neg    ecx
c00265be:	83 d3 00             	adc    ebx,0x0
c00265c1:	f7 db                	neg    ebx
c00265c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265ca:	89 dd                	mov    ebp,ebx
c00265cc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00265d4:	e9 5f ff ff ff       	jmp    c0026538 <__divdi3+0x30>
c00265d9:	8d 76 00             	lea    esi,[esi+0x0]
c00265dc:	31 f6                	xor    esi,esi
c00265de:	31 c9                	xor    ecx,ecx
c00265e0:	e9 7b ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c00265e5:	8d 76 00             	lea    esi,[esi+0x0]
c00265e8:	b8 20 00 00 00       	mov    eax,0x20
c00265ed:	29 f0                	sub    eax,esi
c00265ef:	89 f1                	mov    ecx,esi
c00265f1:	d3 e3                	shl    ebx,cl
c00265f3:	89 fa                	mov    edx,edi
c00265f5:	88 c1                	mov    cl,al
c00265f7:	d3 ea                	shr    edx,cl
c00265f9:	09 da                	or     edx,ebx
c00265fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00265ff:	89 f1                	mov    ecx,esi
c0026601:	d3 e7                	shl    edi,cl
c0026603:	89 eb                	mov    ebx,ebp
c0026605:	88 c1                	mov    cl,al
c0026607:	d3 eb                	shr    ebx,cl
c0026609:	89 f1                	mov    ecx,esi
c002660b:	d3 e5                	shl    ebp,cl
c002660d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026610:	88 c1                	mov    cl,al
c0026612:	d3 ea                	shr    edx,cl
c0026614:	09 d5                	or     ebp,edx
c0026616:	89 e8                	mov    eax,ebp
c0026618:	89 da                	mov    edx,ebx
c002661a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002661e:	89 d3                	mov    ebx,edx
c0026620:	89 c5                	mov    ebp,eax
c0026622:	f7 e7                	mul    edi
c0026624:	39 d3                	cmp    ebx,edx
c0026626:	72 18                	jb     c0026640 <__divdi3+0x138>
c0026628:	74 0a                	je     c0026634 <__divdi3+0x12c>
c002662a:	89 e9                	mov    ecx,ebp
c002662c:	31 f6                	xor    esi,esi
c002662e:	e9 2d ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c0026633:	90                   	nop
c0026634:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026637:	89 f1                	mov    ecx,esi
c0026639:	d3 e7                	shl    edi,cl
c002663b:	39 c7                	cmp    edi,eax
c002663d:	73 eb                	jae    c002662a <__divdi3+0x122>
c002663f:	90                   	nop
c0026640:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026643:	31 f6                	xor    esi,esi
c0026645:	e9 16 ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c002664a:	66 90                	xchg   ax,ax
c002664c:	31 c9                	xor    ecx,ecx
c002664e:	e9 0d ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c0026653:	90                   	nop

c0026654 <__moddi3>:
c0026654:	55                   	push   ebp
c0026655:	57                   	push   edi
c0026656:	56                   	push   esi
c0026657:	53                   	push   ebx
c0026658:	83 ec 2c             	sub    esp,0x2c
c002665b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002665f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026663:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026667:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002666b:	85 db                	test   ebx,ebx
c002666d:	0f 88 85 00 00 00    	js     c00266f8 <__moddi3+0xa4>
c0026673:	89 de                	mov    esi,ebx
c0026675:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002667d:	89 d7                	mov    edi,edx
c002667f:	85 d2                	test   edx,edx
c0026681:	79 09                	jns    c002668c <__moddi3+0x38>
c0026683:	f7 d8                	neg    eax
c0026685:	83 d2 00             	adc    edx,0x0
c0026688:	f7 da                	neg    edx
c002668a:	89 d7                	mov    edi,edx
c002668c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026690:	89 cd                	mov    ebp,ecx
c0026692:	85 ff                	test   edi,edi
c0026694:	75 52                	jne    c00266e8 <__moddi3+0x94>
c0026696:	89 c3                	mov    ebx,eax
c0026698:	39 f0                	cmp    eax,esi
c002669a:	76 24                	jbe    c00266c0 <__moddi3+0x6c>
c002669c:	89 c8                	mov    eax,ecx
c002669e:	89 f2                	mov    edx,esi
c00266a0:	f7 f3                	div    ebx
c00266a2:	89 d6                	mov    esi,edx
c00266a4:	89 f0                	mov    eax,esi
c00266a6:	31 d2                	xor    edx,edx
c00266a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266ac:	85 c9                	test   ecx,ecx
c00266ae:	74 07                	je     c00266b7 <__moddi3+0x63>
c00266b0:	f7 d8                	neg    eax
c00266b2:	83 d2 00             	adc    edx,0x0
c00266b5:	f7 da                	neg    edx
c00266b7:	83 c4 2c             	add    esp,0x2c
c00266ba:	5b                   	pop    ebx
c00266bb:	5e                   	pop    esi
c00266bc:	5f                   	pop    edi
c00266bd:	5d                   	pop    ebp
c00266be:	c3                   	ret    
c00266bf:	90                   	nop
c00266c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00266c4:	85 db                	test   ebx,ebx
c00266c6:	75 0d                	jne    c00266d5 <__moddi3+0x81>
c00266c8:	b8 01 00 00 00       	mov    eax,0x1
c00266cd:	31 d2                	xor    edx,edx
c00266cf:	f7 f7                	div    edi
c00266d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266d5:	89 f0                	mov    eax,esi
c00266d7:	31 d2                	xor    edx,edx
c00266d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266dd:	f7 f7                	div    edi
c00266df:	89 e8                	mov    eax,ebp
c00266e1:	f7 f7                	div    edi
c00266e3:	89 d6                	mov    esi,edx
c00266e5:	eb bd                	jmp    c00266a4 <__moddi3+0x50>
c00266e7:	90                   	nop
c00266e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00266ec:	39 f7                	cmp    edi,esi
c00266ee:	76 20                	jbe    c0026710 <__moddi3+0xbc>
c00266f0:	89 c8                	mov    eax,ecx
c00266f2:	89 f2                	mov    edx,esi
c00266f4:	eb b2                	jmp    c00266a8 <__moddi3+0x54>
c00266f6:	66 90                	xchg   ax,ax
c00266f8:	f7 d9                	neg    ecx
c00266fa:	83 d3 00             	adc    ebx,0x0
c00266fd:	f7 db                	neg    ebx
c00266ff:	89 de                	mov    esi,ebx
c0026701:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026709:	e9 6f ff ff ff       	jmp    c002667d <__moddi3+0x29>
c002670e:	66 90                	xchg   ax,ax
c0026710:	0f bd c7             	bsr    eax,edi
c0026713:	83 f0 1f             	xor    eax,0x1f
c0026716:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002671a:	75 24                	jne    c0026740 <__moddi3+0xec>
c002671c:	39 f7                	cmp    edi,esi
c002671e:	72 06                	jb     c0026726 <__moddi3+0xd2>
c0026720:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026724:	77 0c                	ja     c0026732 <__moddi3+0xde>
c0026726:	89 e9                	mov    ecx,ebp
c0026728:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002672c:	19 fe                	sbb    esi,edi
c002672e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026736:	89 f2                	mov    edx,esi
c0026738:	e9 6b ff ff ff       	jmp    c00266a8 <__moddi3+0x54>
c002673d:	8d 76 00             	lea    esi,[esi+0x0]
c0026740:	b8 20 00 00 00       	mov    eax,0x20
c0026745:	89 c2                	mov    edx,eax
c0026747:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002674b:	29 da                	sub    edx,ebx
c002674d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026751:	88 d9                	mov    cl,bl
c0026753:	d3 e7                	shl    edi,cl
c0026755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026759:	88 d1                	mov    cl,dl
c002675b:	d3 e8                	shr    eax,cl
c002675d:	09 c7                	or     edi,eax
c002675f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026767:	89 d8                	mov    eax,ebx
c0026769:	88 d9                	mov    cl,bl
c002676b:	d3 e7                	shl    edi,cl
c002676d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026771:	89 f3                	mov    ebx,esi
c0026773:	88 d1                	mov    cl,dl
c0026775:	d3 eb                	shr    ebx,cl
c0026777:	89 c7                	mov    edi,eax
c0026779:	88 c1                	mov    cl,al
c002677b:	d3 e6                	shl    esi,cl
c002677d:	89 e8                	mov    eax,ebp
c002677f:	88 d1                	mov    cl,dl
c0026781:	d3 e8                	shr    eax,cl
c0026783:	09 f0                	or     eax,esi
c0026785:	89 f9                	mov    ecx,edi
c0026787:	d3 e5                	shl    ebp,cl
c0026789:	89 da                	mov    edx,ebx
c002678b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002678f:	89 d3                	mov    ebx,edx
c0026791:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026795:	89 c6                	mov    esi,eax
c0026797:	89 d1                	mov    ecx,edx
c0026799:	39 d3                	cmp    ebx,edx
c002679b:	72 27                	jb     c00267c4 <__moddi3+0x170>
c002679d:	74 21                	je     c00267c0 <__moddi3+0x16c>
c002679f:	29 f5                	sub    ebp,esi
c00267a1:	19 cb                	sbb    ebx,ecx
c00267a3:	89 de                	mov    esi,ebx
c00267a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00267a9:	d3 e6                	shl    esi,cl
c00267ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00267af:	89 f9                	mov    ecx,edi
c00267b1:	d3 ed                	shr    ebp,cl
c00267b3:	09 ee                	or     esi,ebp
c00267b5:	89 f0                	mov    eax,esi
c00267b7:	d3 eb                	shr    ebx,cl
c00267b9:	89 da                	mov    edx,ebx
c00267bb:	e9 e8 fe ff ff       	jmp    c00266a8 <__moddi3+0x54>
c00267c0:	39 c5                	cmp    ebp,eax
c00267c2:	73 db                	jae    c002679f <__moddi3+0x14b>
c00267c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00267c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00267cc:	89 d1                	mov    ecx,edx
c00267ce:	89 c6                	mov    esi,eax
c00267d0:	eb cd                	jmp    c002679f <__moddi3+0x14b>
c00267d2:	66 90                	xchg   ax,ax

c00267d4 <__udivdi3>:
c00267d4:	55                   	push   ebp
c00267d5:	57                   	push   edi
c00267d6:	56                   	push   esi
c00267d7:	53                   	push   ebx
c00267d8:	83 ec 1c             	sub    esp,0x1c
c00267db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00267df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00267e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267eb:	85 d2                	test   edx,edx
c00267ed:	75 41                	jne    c0026830 <__udivdi3+0x5c>
c00267ef:	39 f7                	cmp    edi,esi
c00267f1:	76 15                	jbe    c0026808 <__udivdi3+0x34>
c00267f3:	89 e8                	mov    eax,ebp
c00267f5:	89 f2                	mov    edx,esi
c00267f7:	f7 f7                	div    edi
c00267f9:	31 db                	xor    ebx,ebx
c00267fb:	89 da                	mov    edx,ebx
c00267fd:	83 c4 1c             	add    esp,0x1c
c0026800:	5b                   	pop    ebx
c0026801:	5e                   	pop    esi
c0026802:	5f                   	pop    edi
c0026803:	5d                   	pop    ebp
c0026804:	c3                   	ret    
c0026805:	8d 76 00             	lea    esi,[esi+0x0]
c0026808:	89 f9                	mov    ecx,edi
c002680a:	85 ff                	test   edi,edi
c002680c:	75 0b                	jne    c0026819 <__udivdi3+0x45>
c002680e:	b8 01 00 00 00       	mov    eax,0x1
c0026813:	31 d2                	xor    edx,edx
c0026815:	f7 f7                	div    edi
c0026817:	89 c1                	mov    ecx,eax
c0026819:	31 d2                	xor    edx,edx
c002681b:	89 f0                	mov    eax,esi
c002681d:	f7 f1                	div    ecx
c002681f:	89 c3                	mov    ebx,eax
c0026821:	89 e8                	mov    eax,ebp
c0026823:	f7 f1                	div    ecx
c0026825:	89 da                	mov    edx,ebx
c0026827:	83 c4 1c             	add    esp,0x1c
c002682a:	5b                   	pop    ebx
c002682b:	5e                   	pop    esi
c002682c:	5f                   	pop    edi
c002682d:	5d                   	pop    ebp
c002682e:	c3                   	ret    
c002682f:	90                   	nop
c0026830:	39 f2                	cmp    edx,esi
c0026832:	77 1c                	ja     c0026850 <__udivdi3+0x7c>
c0026834:	0f bd da             	bsr    ebx,edx
c0026837:	83 f3 1f             	xor    ebx,0x1f
c002683a:	75 24                	jne    c0026860 <__udivdi3+0x8c>
c002683c:	39 f2                	cmp    edx,esi
c002683e:	72 08                	jb     c0026848 <__udivdi3+0x74>
c0026840:	39 ef                	cmp    edi,ebp
c0026842:	0f 87 84 00 00 00    	ja     c00268cc <__udivdi3+0xf8>
c0026848:	b8 01 00 00 00       	mov    eax,0x1
c002684d:	eb ac                	jmp    c00267fb <__udivdi3+0x27>
c002684f:	90                   	nop
c0026850:	31 db                	xor    ebx,ebx
c0026852:	31 c0                	xor    eax,eax
c0026854:	89 da                	mov    edx,ebx
c0026856:	83 c4 1c             	add    esp,0x1c
c0026859:	5b                   	pop    ebx
c002685a:	5e                   	pop    esi
c002685b:	5f                   	pop    edi
c002685c:	5d                   	pop    ebp
c002685d:	c3                   	ret    
c002685e:	66 90                	xchg   ax,ax
c0026860:	b8 20 00 00 00       	mov    eax,0x20
c0026865:	29 d8                	sub    eax,ebx
c0026867:	88 d9                	mov    cl,bl
c0026869:	d3 e2                	shl    edx,cl
c002686b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002686f:	89 fa                	mov    edx,edi
c0026871:	88 c1                	mov    cl,al
c0026873:	d3 ea                	shr    edx,cl
c0026875:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026879:	09 d1                	or     ecx,edx
c002687b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002687f:	88 d9                	mov    cl,bl
c0026881:	d3 e7                	shl    edi,cl
c0026883:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026887:	89 f7                	mov    edi,esi
c0026889:	88 c1                	mov    cl,al
c002688b:	d3 ef                	shr    edi,cl
c002688d:	88 d9                	mov    cl,bl
c002688f:	d3 e6                	shl    esi,cl
c0026891:	89 ea                	mov    edx,ebp
c0026893:	88 c1                	mov    cl,al
c0026895:	d3 ea                	shr    edx,cl
c0026897:	09 d6                	or     esi,edx
c0026899:	89 f0                	mov    eax,esi
c002689b:	89 fa                	mov    edx,edi
c002689d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268a1:	89 d7                	mov    edi,edx
c00268a3:	89 c6                	mov    esi,eax
c00268a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268a9:	39 d7                	cmp    edi,edx
c00268ab:	72 13                	jb     c00268c0 <__udivdi3+0xec>
c00268ad:	74 09                	je     c00268b8 <__udivdi3+0xe4>
c00268af:	89 f0                	mov    eax,esi
c00268b1:	31 db                	xor    ebx,ebx
c00268b3:	e9 43 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268b8:	88 d9                	mov    cl,bl
c00268ba:	d3 e5                	shl    ebp,cl
c00268bc:	39 c5                	cmp    ebp,eax
c00268be:	73 ef                	jae    c00268af <__udivdi3+0xdb>
c00268c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00268c3:	31 db                	xor    ebx,ebx
c00268c5:	e9 31 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268ca:	66 90                	xchg   ax,ax
c00268cc:	31 c0                	xor    eax,eax
c00268ce:	e9 28 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268d3:	90                   	nop

c00268d4 <__umoddi3>:
c00268d4:	55                   	push   ebp
c00268d5:	57                   	push   edi
c00268d6:	56                   	push   esi
c00268d7:	53                   	push   ebx
c00268d8:	83 ec 1c             	sub    esp,0x1c
c00268db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00268df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00268eb:	89 da                	mov    edx,ebx
c00268ed:	85 c0                	test   eax,eax
c00268ef:	75 37                	jne    c0026928 <__umoddi3+0x54>
c00268f1:	39 df                	cmp    edi,ebx
c00268f3:	76 13                	jbe    c0026908 <__umoddi3+0x34>
c00268f5:	89 f0                	mov    eax,esi
c00268f7:	f7 f7                	div    edi
c00268f9:	89 d0                	mov    eax,edx
c00268fb:	31 d2                	xor    edx,edx
c00268fd:	83 c4 1c             	add    esp,0x1c
c0026900:	5b                   	pop    ebx
c0026901:	5e                   	pop    esi
c0026902:	5f                   	pop    edi
c0026903:	5d                   	pop    ebp
c0026904:	c3                   	ret    
c0026905:	8d 76 00             	lea    esi,[esi+0x0]
c0026908:	89 fd                	mov    ebp,edi
c002690a:	85 ff                	test   edi,edi
c002690c:	75 0b                	jne    c0026919 <__umoddi3+0x45>
c002690e:	b8 01 00 00 00       	mov    eax,0x1
c0026913:	31 d2                	xor    edx,edx
c0026915:	f7 f7                	div    edi
c0026917:	89 c5                	mov    ebp,eax
c0026919:	89 d8                	mov    eax,ebx
c002691b:	31 d2                	xor    edx,edx
c002691d:	f7 f5                	div    ebp
c002691f:	89 f0                	mov    eax,esi
c0026921:	f7 f5                	div    ebp
c0026923:	89 d0                	mov    eax,edx
c0026925:	eb d4                	jmp    c00268fb <__umoddi3+0x27>
c0026927:	90                   	nop
c0026928:	89 f1                	mov    ecx,esi
c002692a:	39 d8                	cmp    eax,ebx
c002692c:	76 0a                	jbe    c0026938 <__umoddi3+0x64>
c002692e:	89 f0                	mov    eax,esi
c0026930:	83 c4 1c             	add    esp,0x1c
c0026933:	5b                   	pop    ebx
c0026934:	5e                   	pop    esi
c0026935:	5f                   	pop    edi
c0026936:	5d                   	pop    ebp
c0026937:	c3                   	ret    
c0026938:	0f bd e8             	bsr    ebp,eax
c002693b:	83 f5 1f             	xor    ebp,0x1f
c002693e:	75 1c                	jne    c002695c <__umoddi3+0x88>
c0026940:	39 d8                	cmp    eax,ebx
c0026942:	72 04                	jb     c0026948 <__umoddi3+0x74>
c0026944:	39 f7                	cmp    edi,esi
c0026946:	77 08                	ja     c0026950 <__umoddi3+0x7c>
c0026948:	89 da                	mov    edx,ebx
c002694a:	29 fe                	sub    esi,edi
c002694c:	19 c2                	sbb    edx,eax
c002694e:	89 f1                	mov    ecx,esi
c0026950:	89 c8                	mov    eax,ecx
c0026952:	83 c4 1c             	add    esp,0x1c
c0026955:	5b                   	pop    ebx
c0026956:	5e                   	pop    esi
c0026957:	5f                   	pop    edi
c0026958:	5d                   	pop    ebp
c0026959:	c3                   	ret    
c002695a:	66 90                	xchg   ax,ax
c002695c:	ba 20 00 00 00       	mov    edx,0x20
c0026961:	29 ea                	sub    edx,ebp
c0026963:	89 e9                	mov    ecx,ebp
c0026965:	d3 e0                	shl    eax,cl
c0026967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002696b:	89 f8                	mov    eax,edi
c002696d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026971:	88 d1                	mov    cl,dl
c0026973:	d3 e8                	shr    eax,cl
c0026975:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026979:	09 c1                	or     ecx,eax
c002697b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002697f:	89 e9                	mov    ecx,ebp
c0026981:	d3 e7                	shl    edi,cl
c0026983:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026987:	89 d8                	mov    eax,ebx
c0026989:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002698d:	88 d1                	mov    cl,dl
c002698f:	d3 e8                	shr    eax,cl
c0026991:	89 c7                	mov    edi,eax
c0026993:	89 e9                	mov    ecx,ebp
c0026995:	d3 e3                	shl    ebx,cl
c0026997:	89 f0                	mov    eax,esi
c0026999:	88 d1                	mov    cl,dl
c002699b:	d3 e8                	shr    eax,cl
c002699d:	09 d8                	or     eax,ebx
c002699f:	89 e9                	mov    ecx,ebp
c00269a1:	d3 e6                	shl    esi,cl
c00269a3:	89 f3                	mov    ebx,esi
c00269a5:	89 fa                	mov    edx,edi
c00269a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00269ab:	89 d1                	mov    ecx,edx
c00269ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269b1:	89 c6                	mov    esi,eax
c00269b3:	89 d7                	mov    edi,edx
c00269b5:	39 d1                	cmp    ecx,edx
c00269b7:	72 27                	jb     c00269e0 <__umoddi3+0x10c>
c00269b9:	74 21                	je     c00269dc <__umoddi3+0x108>
c00269bb:	89 ca                	mov    edx,ecx
c00269bd:	29 f3                	sub    ebx,esi
c00269bf:	19 fa                	sbb    edx,edi
c00269c1:	89 d0                	mov    eax,edx
c00269c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00269c7:	d3 e0                	shl    eax,cl
c00269c9:	89 e9                	mov    ecx,ebp
c00269cb:	d3 eb                	shr    ebx,cl
c00269cd:	09 d8                	or     eax,ebx
c00269cf:	d3 ea                	shr    edx,cl
c00269d1:	83 c4 1c             	add    esp,0x1c
c00269d4:	5b                   	pop    ebx
c00269d5:	5e                   	pop    esi
c00269d6:	5f                   	pop    edi
c00269d7:	5d                   	pop    ebp
c00269d8:	c3                   	ret    
c00269d9:	8d 76 00             	lea    esi,[esi+0x0]
c00269dc:	39 c3                	cmp    ebx,eax
c00269de:	73 db                	jae    c00269bb <__umoddi3+0xe7>
c00269e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00269e8:	89 d7                	mov    edi,edx
c00269ea:	89 c6                	mov    esi,eax
c00269ec:	eb cd                	jmp    c00269bb <__umoddi3+0xe7>

c00269ee <__addsf3>:
c00269ee:	55                   	push   ebp
c00269ef:	89 e5                	mov    ebp,esp
c00269f1:	57                   	push   edi
c00269f2:	56                   	push   esi
c00269f3:	53                   	push   ebx
c00269f4:	83 ec 08             	sub    esp,0x8
c00269f7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269fa:	89 fa                	mov    edx,edi
c00269fc:	89 f8                	mov    eax,edi
c00269fe:	c1 f8 17             	sar    eax,0x17
c0026a01:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a04:	c1 e2 08             	shl    edx,0x8
c0026a07:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026a0d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a10:	89 de                	mov    esi,ebx
c0026a12:	c1 fe 17             	sar    esi,0x17
c0026a15:	c1 e3 08             	shl    ebx,0x8
c0026a18:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a1e:	31 f0                	xor    eax,esi
c0026a20:	0f 88 3b 01 00 00    	js     c0026b61 <__addsf3+0x173>
c0026a26:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026a29:	29 f1                	sub    ecx,esi
c0026a2b:	85 c9                	test   ecx,ecx
c0026a2d:	7e 54                	jle    c0026a83 <__addsf3+0x95>
c0026a2f:	89 f0                	mov    eax,esi
c0026a31:	84 c0                	test   al,al
c0026a33:	75 10                	jne    c0026a45 <__addsf3+0x57>
c0026a35:	85 db                	test   ebx,ebx
c0026a37:	0f 84 aa 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a3d:	49                   	dec    ecx
c0026a3e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a41:	74 38                	je     c0026a7b <__addsf3+0x8d>
c0026a43:	eb 13                	jmp    c0026a58 <__addsf3+0x6a>
c0026a45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a48:	f7 d0                	not    eax
c0026a4a:	84 c0                	test   al,al
c0026a4c:	0f 84 95 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a52:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a58:	83 f9 1f             	cmp    ecx,0x1f
c0026a5b:	0f 8f 86 02 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026a61:	89 de                	mov    esi,ebx
c0026a63:	d3 ee                	shr    esi,cl
c0026a65:	b8 20 00 00 00       	mov    eax,0x20
c0026a6a:	29 c8                	sub    eax,ecx
c0026a6c:	89 c1                	mov    ecx,eax
c0026a6e:	d3 e3                	shl    ebx,cl
c0026a70:	31 c0                	xor    eax,eax
c0026a72:	85 db                	test   ebx,ebx
c0026a74:	0f 95 c0             	setne  al
c0026a77:	09 f0                	or     eax,esi
c0026a79:	01 d0                	add    eax,edx
c0026a7b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a7e:	e9 b6 00 00 00       	jmp    c0026b39 <__addsf3+0x14b>
c0026a83:	74 5c                	je     c0026ae1 <__addsf3+0xf3>
c0026a85:	89 f1                	mov    ecx,esi
c0026a87:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026a8a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a8d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a91:	75 14                	jne    c0026aa7 <__addsf3+0xb9>
c0026a93:	85 d2                	test   edx,edx
c0026a95:	0f 84 4c 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a9b:	49                   	dec    ecx
c0026a9c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a9f:	0f 84 94 00 00 00    	je     c0026b39 <__addsf3+0x14b>
c0026aa5:	eb 12                	jmp    c0026ab9 <__addsf3+0xcb>
c0026aa7:	89 f0                	mov    eax,esi
c0026aa9:	f7 d0                	not    eax
c0026aab:	84 c0                	test   al,al
c0026aad:	0f 84 34 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026ab3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ab9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026abc:	83 f9 1f             	cmp    ecx,0x1f
c0026abf:	0f 8f 22 02 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026ac5:	89 d7                	mov    edi,edx
c0026ac7:	d3 ef                	shr    edi,cl
c0026ac9:	b8 20 00 00 00       	mov    eax,0x20
c0026ace:	29 c8                	sub    eax,ecx
c0026ad0:	89 c1                	mov    ecx,eax
c0026ad2:	d3 e2                	shl    edx,cl
c0026ad4:	31 c0                	xor    eax,eax
c0026ad6:	85 d2                	test   edx,edx
c0026ad8:	0f 95 c0             	setne  al
c0026adb:	09 f8                	or     eax,edi
c0026add:	01 d8                	add    eax,ebx
c0026adf:	eb 58                	jmp    c0026b39 <__addsf3+0x14b>
c0026ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ae4:	8d 70 01             	lea    esi,[eax+0x1]
c0026ae7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026aed:	75 32                	jne    c0026b21 <__addsf3+0x133>
c0026aef:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026af3:	75 1f                	jne    c0026b14 <__addsf3+0x126>
c0026af5:	85 d2                	test   edx,edx
c0026af7:	0f 84 e0 01 00 00    	je     c0026cdd <__addsf3+0x2ef>
c0026afd:	85 db                	test   ebx,ebx
c0026aff:	0f 84 e2 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b05:	89 d0                	mov    eax,edx
c0026b07:	01 d8                	add    eax,ebx
c0026b09:	0f 89 a9 01 00 00    	jns    c0026cb8 <__addsf3+0x2ca>
c0026b0f:	e9 9d 01 00 00       	jmp    c0026cb1 <__addsf3+0x2c3>
c0026b14:	85 d2                	test   edx,edx
c0026b16:	0f 85 cb 01 00 00    	jne    c0026ce7 <__addsf3+0x2f9>
c0026b1c:	e9 bc 01 00 00       	jmp    c0026cdd <__addsf3+0x2ef>
c0026b21:	31 c0                	xor    eax,eax
c0026b23:	89 f1                	mov    ecx,esi
c0026b25:	f7 d1                	not    ecx
c0026b27:	84 c9                	test   cl,cl
c0026b29:	0f 84 90 01 00 00    	je     c0026cbf <__addsf3+0x2d1>
c0026b2f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b32:	d1 e8                	shr    eax,1
c0026b34:	e9 86 01 00 00       	jmp    c0026cbf <__addsf3+0x2d1>
c0026b39:	85 c0                	test   eax,eax
c0026b3b:	0f 89 7e 01 00 00    	jns    c0026cbf <__addsf3+0x2d1>
c0026b41:	46                   	inc    esi
c0026b42:	89 f2                	mov    edx,esi
c0026b44:	f7 d2                	not    edx
c0026b46:	84 d2                	test   dl,dl
c0026b48:	0f 84 6f 01 00 00    	je     c0026cbd <__addsf3+0x2cf>
c0026b4e:	89 c2                	mov    edx,eax
c0026b50:	83 e2 01             	and    edx,0x1
c0026b53:	d1 e8                	shr    eax,1
c0026b55:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026b5a:	09 d0                	or     eax,edx
c0026b5c:	e9 5e 01 00 00       	jmp    c0026cbf <__addsf3+0x2d1>
c0026b61:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026b65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b68:	89 f0                	mov    eax,esi
c0026b6a:	0f b6 c0             	movzx  eax,al
c0026b6d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b70:	29 c1                	sub    ecx,eax
c0026b72:	85 c9                	test   ecx,ecx
c0026b74:	7e 55                	jle    c0026bcb <__addsf3+0x1dd>
c0026b76:	85 c0                	test   eax,eax
c0026b78:	75 11                	jne    c0026b8b <__addsf3+0x19d>
c0026b7a:	85 db                	test   ebx,ebx
c0026b7c:	0f 84 65 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b82:	49                   	dec    ecx
c0026b83:	75 19                	jne    c0026b9e <__addsf3+0x1b0>
c0026b85:	89 d0                	mov    eax,edx
c0026b87:	29 d8                	sub    eax,ebx
c0026b89:	eb 38                	jmp    c0026bc3 <__addsf3+0x1d5>
c0026b8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8e:	f7 d0                	not    eax
c0026b90:	84 c0                	test   al,al
c0026b92:	0f 84 4f 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b98:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b9e:	83 f9 1f             	cmp    ecx,0x1f
c0026ba1:	0f 8f 40 01 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026ba7:	89 de                	mov    esi,ebx
c0026ba9:	d3 ee                	shr    esi,cl
c0026bab:	b8 20 00 00 00       	mov    eax,0x20
c0026bb0:	29 c8                	sub    eax,ecx
c0026bb2:	89 c1                	mov    ecx,eax
c0026bb4:	d3 e3                	shl    ebx,cl
c0026bb6:	31 c0                	xor    eax,eax
c0026bb8:	85 db                	test   ebx,ebx
c0026bba:	0f 95 c0             	setne  al
c0026bbd:	09 f0                	or     eax,esi
c0026bbf:	29 c2                	sub    edx,eax
c0026bc1:	89 d0                	mov    eax,edx
c0026bc3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bc6:	e9 af 00 00 00       	jmp    c0026c7a <__addsf3+0x28c>
c0026bcb:	74 5c                	je     c0026c29 <__addsf3+0x23b>
c0026bcd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026bd0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bd3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026bd7:	75 14                	jne    c0026bed <__addsf3+0x1ff>
c0026bd9:	85 d2                	test   edx,edx
c0026bdb:	0f 84 06 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026be1:	48                   	dec    eax
c0026be2:	75 1b                	jne    c0026bff <__addsf3+0x211>
c0026be4:	89 d8                	mov    eax,ebx
c0026be6:	29 d0                	sub    eax,edx
c0026be8:	e9 8d 00 00 00       	jmp    c0026c7a <__addsf3+0x28c>
c0026bed:	89 f1                	mov    ecx,esi
c0026bef:	f7 d1                	not    ecx
c0026bf1:	84 c9                	test   cl,cl
c0026bf3:	0f 84 ee 00 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026bf9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c02:	83 f8 1f             	cmp    eax,0x1f
c0026c05:	0f 8f dc 00 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026c0b:	89 d7                	mov    edi,edx
c0026c0d:	88 c1                	mov    cl,al
c0026c0f:	d3 ef                	shr    edi,cl
c0026c11:	b9 20 00 00 00       	mov    ecx,0x20
c0026c16:	29 c1                	sub    ecx,eax
c0026c18:	d3 e2                	shl    edx,cl
c0026c1a:	31 c0                	xor    eax,eax
c0026c1c:	85 d2                	test   edx,edx
c0026c1e:	0f 95 c0             	setne  al
c0026c21:	09 f8                	or     eax,edi
c0026c23:	29 c3                	sub    ebx,eax
c0026c25:	89 d8                	mov    eax,ebx
c0026c27:	eb 51                	jmp    c0026c7a <__addsf3+0x28c>
c0026c29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c2c:	40                   	inc    eax
c0026c2d:	a8 fe                	test   al,0xfe
c0026c2f:	75 3d                	jne    c0026c6e <__addsf3+0x280>
c0026c31:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c35:	0f 85 a7 00 00 00    	jne    c0026ce2 <__addsf3+0x2f4>
c0026c3b:	85 d2                	test   edx,edx
c0026c3d:	75 12                	jne    c0026c51 <__addsf3+0x263>
c0026c3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c42:	85 db                	test   ebx,ebx
c0026c44:	0f 85 9d 00 00 00    	jne    c0026ce7 <__addsf3+0x2f9>
c0026c4a:	31 ff                	xor    edi,edi
c0026c4c:	e9 96 00 00 00       	jmp    c0026ce7 <__addsf3+0x2f9>
c0026c51:	85 db                	test   ebx,ebx
c0026c53:	0f 84 8e 00 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026c59:	89 d0                	mov    eax,edx
c0026c5b:	29 d8                	sub    eax,ebx
c0026c5d:	79 06                	jns    c0026c65 <__addsf3+0x277>
c0026c5f:	89 d8                	mov    eax,ebx
c0026c61:	29 d0                	sub    eax,edx
c0026c63:	eb 5a                	jmp    c0026cbf <__addsf3+0x2d1>
c0026c65:	bf 00 00 00 00       	mov    edi,0x0
c0026c6a:	74 7b                	je     c0026ce7 <__addsf3+0x2f9>
c0026c6c:	eb 4a                	jmp    c0026cb8 <__addsf3+0x2ca>
c0026c6e:	89 d0                	mov    eax,edx
c0026c70:	29 d8                	sub    eax,ebx
c0026c72:	79 12                	jns    c0026c86 <__addsf3+0x298>
c0026c74:	89 d8                	mov    eax,ebx
c0026c76:	29 d0                	sub    eax,edx
c0026c78:	eb 09                	jmp    c0026c83 <__addsf3+0x295>
c0026c7a:	85 c0                	test   eax,eax
c0026c7c:	79 41                	jns    c0026cbf <__addsf3+0x2d1>
c0026c7e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c83:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026c86:	31 f6                	xor    esi,esi
c0026c88:	85 c0                	test   eax,eax
c0026c8a:	74 33                	je     c0026cbf <__addsf3+0x2d1>
c0026c8c:	0f bd c8             	bsr    ecx,eax
c0026c8f:	83 f1 1f             	xor    ecx,0x1f
c0026c92:	d3 e0                	shl    eax,cl
c0026c94:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026c98:	39 ca                	cmp    edx,ecx
c0026c9a:	7f 10                	jg     c0026cac <__addsf3+0x2be>
c0026c9c:	29 d1                	sub    ecx,edx
c0026c9e:	41                   	inc    ecx
c0026c9f:	d3 e8                	shr    eax,cl
c0026ca1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ca4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026caa:	eb 13                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cac:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026caf:	29 ce                	sub    esi,ecx
c0026cb1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026cb6:	eb 07                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cb8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cbb:	eb 02                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cbd:	31 c0                	xor    eax,eax
c0026cbf:	89 c2                	mov    edx,eax
c0026cc1:	c1 ea 08             	shr    edx,0x8
c0026cc4:	a8 7f                	test   al,0x7f
c0026cc6:	0f 95 c1             	setne  cl
c0026cc9:	09 d1                	or     ecx,edx
c0026ccb:	83 e1 01             	and    ecx,0x1
c0026cce:	c1 e8 07             	shr    eax,0x7
c0026cd1:	21 c8                	and    eax,ecx
c0026cd3:	c1 e6 17             	shl    esi,0x17
c0026cd6:	09 d6                	or     esi,edx
c0026cd8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026cdb:	eb 0a                	jmp    c0026ce7 <__addsf3+0x2f9>
c0026cdd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce0:	eb 05                	jmp    c0026ce7 <__addsf3+0x2f9>
c0026ce2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ce7:	89 f8                	mov    eax,edi
c0026ce9:	5a                   	pop    edx
c0026cea:	59                   	pop    ecx
c0026ceb:	5b                   	pop    ebx
c0026cec:	5e                   	pop    esi
c0026ced:	5f                   	pop    edi
c0026cee:	5d                   	pop    ebp
c0026cef:	c3                   	ret    

c0026cf0 <__subsf3>:
c0026cf0:	55                   	push   ebp
c0026cf1:	89 e5                	mov    ebp,esp
c0026cf3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cf6:	05 00 00 00 80       	add    eax,0x80000000
c0026cfb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026cfe:	5d                   	pop    ebp
c0026cff:	e9 ea fc ff ff       	jmp    c00269ee <__addsf3>

c0026d04 <__negsf2>:
c0026d04:	55                   	push   ebp
c0026d05:	89 e5                	mov    ebp,esp
c0026d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d0a:	05 00 00 00 80       	add    eax,0x80000000
c0026d0f:	5d                   	pop    ebp
c0026d10:	c3                   	ret    

c0026d11 <__mulsf3>:
c0026d11:	55                   	push   ebp
c0026d12:	89 e5                	mov    ebp,esp
c0026d14:	57                   	push   edi
c0026d15:	56                   	push   esi
c0026d16:	53                   	push   ebx
c0026d17:	83 ec 1c             	sub    esp,0x1c
c0026d1a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026d1d:	89 f0                	mov    eax,esi
c0026d1f:	89 f1                	mov    ecx,esi
c0026d21:	c1 f9 17             	sar    ecx,0x17
c0026d24:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d27:	c1 e0 08             	shl    eax,0x8
c0026d2a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d2f:	89 c1                	mov    ecx,eax
c0026d31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d34:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d37:	89 c7                	mov    edi,eax
c0026d39:	c1 ff 17             	sar    edi,0x17
c0026d3c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d40:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d43:	89 f8                	mov    eax,edi
c0026d45:	0f b6 c0             	movzx  eax,al
c0026d48:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026d4b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026d4f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d52:	42                   	inc    edx
c0026d53:	80 e2 fe             	and    dl,0xfe
c0026d56:	75 7b                	jne    c0026dd3 <__mulsf3+0xc2>
c0026d58:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d5c:	74 54                	je     c0026db2 <__mulsf3+0xa1>
c0026d5e:	85 c9                	test   ecx,ecx
c0026d60:	0f 85 64 01 00 00    	jne    c0026eca <__mulsf3+0x1b9>
c0026d66:	8d 57 01             	lea    edx,[edi+0x1]
c0026d69:	80 e2 fe             	and    dl,0xfe
c0026d6c:	75 1f                	jne    c0026d8d <__mulsf3+0x7c>
c0026d6e:	85 c0                	test   eax,eax
c0026d70:	b8 00 00 00 00       	mov    eax,0x0
c0026d75:	74 29                	je     c0026da0 <__mulsf3+0x8f>
c0026d77:	53                   	push   ebx
c0026d78:	53                   	push   ebx
c0026d79:	50                   	push   eax
c0026d7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d7d:	e8 96 05 00 00       	call   c0027318 <__nesf2>
c0026d82:	83 c4 10             	add    esp,0x10
c0026d85:	85 c0                	test   eax,eax
c0026d87:	0f 85 3a 01 00 00    	jne    c0026ec7 <__mulsf3+0x1b6>
c0026d8d:	85 ff                	test   edi,edi
c0026d8f:	0f 89 35 01 00 00    	jns    c0026eca <__mulsf3+0x1b9>
c0026d95:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026d9b:	e9 2a 01 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026da0:	51                   	push   ecx
c0026da1:	51                   	push   ecx
c0026da2:	50                   	push   eax
c0026da3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026da6:	e8 6d 05 00 00       	call   c0027318 <__nesf2>
c0026dab:	83 c4 10             	add    esp,0x10
c0026dae:	85 c0                	test   eax,eax
c0026db0:	eb 15                	jmp    c0026dc7 <__mulsf3+0xb6>
c0026db2:	85 c9                	test   ecx,ecx
c0026db4:	74 0b                	je     c0026dc1 <__mulsf3+0xb0>
c0026db6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026db9:	01 c9                	add    ecx,ecx
c0026dbb:	78 16                	js     c0026dd3 <__mulsf3+0xc2>
c0026dbd:	89 d3                	mov    ebx,edx
c0026dbf:	eb f5                	jmp    c0026db6 <__mulsf3+0xa5>
c0026dc1:	89 f8                	mov    eax,edi
c0026dc3:	f7 d0                	not    eax
c0026dc5:	84 c0                	test   al,al
c0026dc7:	75 c4                	jne    c0026d8d <__mulsf3+0x7c>
c0026dc9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026dce:	e9 f7 00 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026dd3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026dd6:	c1 e6 08             	shl    esi,0x8
c0026dd9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026ddf:	8d 57 01             	lea    edx,[edi+0x1]
c0026de2:	80 e2 fe             	and    dl,0xfe
c0026de5:	75 63                	jne    c0026e4a <__mulsf3+0x139>
c0026de7:	85 c0                	test   eax,eax
c0026de9:	74 2f                	je     c0026e1a <__mulsf3+0x109>
c0026deb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026def:	0f 89 d2 00 00 00    	jns    c0026ec7 <__mulsf3+0x1b6>
c0026df5:	52                   	push   edx
c0026df6:	52                   	push   edx
c0026df7:	6a 00                	push   0x0
c0026df9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dfc:	e8 dc 04 00 00       	call   c00272dd <__eqsf2>
c0026e01:	83 c4 10             	add    esp,0x10
c0026e04:	85 c0                	test   eax,eax
c0026e06:	0f 85 bb 00 00 00    	jne    c0026ec7 <__mulsf3+0x1b6>
c0026e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e0f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026e15:	e9 b0 00 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026e1a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e1d:	50                   	push   eax
c0026e1e:	50                   	push   eax
c0026e1f:	6a 00                	push   0x0
c0026e21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e24:	e8 b4 04 00 00       	call   c00272dd <__eqsf2>
c0026e29:	83 c4 10             	add    esp,0x10
c0026e2c:	85 c0                	test   eax,eax
c0026e2e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e31:	75 0c                	jne    c0026e3f <__mulsf3+0x12e>
c0026e33:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e37:	0f 89 8a 00 00 00    	jns    c0026ec7 <__mulsf3+0x1b6>
c0026e3d:	eb cd                	jmp    c0026e0c <__mulsf3+0xfb>
c0026e3f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026e42:	01 f6                	add    esi,esi
c0026e44:	78 04                	js     c0026e4a <__mulsf3+0x139>
c0026e46:	89 c3                	mov    ebx,eax
c0026e48:	eb f5                	jmp    c0026e3f <__mulsf3+0x12e>
c0026e4a:	89 c8                	mov    eax,ecx
c0026e4c:	0d 00 00 00 80       	or     eax,0x80000000
c0026e51:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026e57:	f7 e6                	mul    esi
c0026e59:	85 c0                	test   eax,eax
c0026e5b:	0f 95 c0             	setne  al
c0026e5e:	0f b6 c0             	movzx  eax,al
c0026e61:	09 c2                	or     edx,eax
c0026e63:	78 03                	js     c0026e68 <__mulsf3+0x157>
c0026e65:	01 d2                	add    edx,edx
c0026e67:	4b                   	dec    ebx
c0026e68:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026e6e:	7f 22                	jg     c0026e92 <__mulsf3+0x181>
c0026e70:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e76:	85 db                	test   ebx,ebx
c0026e78:	7f 23                	jg     c0026e9d <__mulsf3+0x18c>
c0026e7a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026e7d:	7c 1a                	jl     c0026e99 <__mulsf3+0x188>
c0026e7f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e85:	b9 01 00 00 00       	mov    ecx,0x1
c0026e8a:	29 d9                	sub    ecx,ebx
c0026e8c:	d3 ea                	shr    edx,cl
c0026e8e:	31 db                	xor    ebx,ebx
c0026e90:	eb 0b                	jmp    c0026e9d <__mulsf3+0x18c>
c0026e92:	bb ff 00 00 00       	mov    ebx,0xff
c0026e97:	eb 02                	jmp    c0026e9b <__mulsf3+0x18a>
c0026e99:	31 db                	xor    ebx,ebx
c0026e9b:	31 d2                	xor    edx,edx
c0026e9d:	89 d0                	mov    eax,edx
c0026e9f:	c1 e8 08             	shr    eax,0x8
c0026ea2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ea5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026eab:	09 fb                	or     ebx,edi
c0026ead:	c1 e3 17             	shl    ebx,0x17
c0026eb0:	09 c3                	or     ebx,eax
c0026eb2:	f6 c2 7f             	test   dl,0x7f
c0026eb5:	0f 95 c1             	setne  cl
c0026eb8:	09 c8                	or     eax,ecx
c0026eba:	83 e0 01             	and    eax,0x1
c0026ebd:	c1 ea 07             	shr    edx,0x7
c0026ec0:	21 c2                	and    edx,eax
c0026ec2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026ec5:	eb 03                	jmp    c0026eca <__mulsf3+0x1b9>
c0026ec7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026eca:	89 f0                	mov    eax,esi
c0026ecc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ecf:	5b                   	pop    ebx
c0026ed0:	5e                   	pop    esi
c0026ed1:	5f                   	pop    edi
c0026ed2:	5d                   	pop    ebp
c0026ed3:	c3                   	ret    

c0026ed4 <__divsf3>:
c0026ed4:	55                   	push   ebp
c0026ed5:	89 e5                	mov    ebp,esp
c0026ed7:	57                   	push   edi
c0026ed8:	56                   	push   esi
c0026ed9:	53                   	push   ebx
c0026eda:	83 ec 1c             	sub    esp,0x1c
c0026edd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ee0:	89 d8                	mov    eax,ebx
c0026ee2:	89 d9                	mov    ecx,ebx
c0026ee4:	c1 f9 17             	sar    ecx,0x17
c0026ee7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eea:	c1 e0 08             	shl    eax,0x8
c0026eed:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ef2:	89 c1                	mov    ecx,eax
c0026ef4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ef7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026efa:	89 c7                	mov    edi,eax
c0026efc:	c1 ff 17             	sar    edi,0x17
c0026eff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f03:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f06:	89 f8                	mov    eax,edi
c0026f08:	0f b6 c0             	movzx  eax,al
c0026f0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f0e:	29 c6                	sub    esi,eax
c0026f10:	83 c6 7f             	add    esi,0x7f
c0026f13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f16:	42                   	inc    edx
c0026f17:	80 e2 fe             	and    dl,0xfe
c0026f1a:	0f 85 9c 00 00 00    	jne    c0026fbc <__divsf3+0xe8>
c0026f20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f24:	74 33                	je     c0026f59 <__divsf3+0x85>
c0026f26:	85 c9                	test   ecx,ecx
c0026f28:	0f 85 c7 01 00 00    	jne    c00270f5 <__divsf3+0x221>
c0026f2e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f31:	80 e2 fe             	and    dl,0xfe
c0026f34:	75 2f                	jne    c0026f65 <__divsf3+0x91>
c0026f36:	85 c0                	test   eax,eax
c0026f38:	74 2b                	je     c0026f65 <__divsf3+0x91>
c0026f3a:	51                   	push   ecx
c0026f3b:	51                   	push   ecx
c0026f3c:	6a 00                	push   0x0
c0026f3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f41:	e8 d2 03 00 00       	call   c0027318 <__nesf2>
c0026f46:	83 c4 10             	add    esp,0x10
c0026f49:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f4c:	85 c0                	test   eax,eax
c0026f4e:	0f 85 a1 01 00 00    	jne    c00270f5 <__divsf3+0x221>
c0026f54:	e9 92 01 00 00       	jmp    c00270eb <__divsf3+0x217>
c0026f59:	85 c9                	test   ecx,ecx
c0026f5b:	75 1b                	jne    c0026f78 <__divsf3+0xa4>
c0026f5d:	8d 57 01             	lea    edx,[edi+0x1]
c0026f60:	80 e2 fe             	and    dl,0xfe
c0026f63:	74 1e                	je     c0026f83 <__divsf3+0xaf>
c0026f65:	85 ff                	test   edi,edi
c0026f67:	0f 89 88 01 00 00    	jns    c00270f5 <__divsf3+0x221>
c0026f6d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026f73:	e9 7d 01 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0026f78:	8d 56 ff             	lea    edx,[esi-0x1]
c0026f7b:	01 c9                	add    ecx,ecx
c0026f7d:	78 3d                	js     c0026fbc <__divsf3+0xe8>
c0026f7f:	89 d6                	mov    esi,edx
c0026f81:	eb f5                	jmp    c0026f78 <__divsf3+0xa4>
c0026f83:	85 c0                	test   eax,eax
c0026f85:	b8 00 00 00 00       	mov    eax,0x0
c0026f8a:	74 18                	je     c0026fa4 <__divsf3+0xd0>
c0026f8c:	52                   	push   edx
c0026f8d:	52                   	push   edx
c0026f8e:	50                   	push   eax
c0026f8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f92:	e8 81 03 00 00       	call   c0027318 <__nesf2>
c0026f97:	83 c4 10             	add    esp,0x10
c0026f9a:	85 c0                	test   eax,eax
c0026f9c:	0f 85 50 01 00 00    	jne    c00270f2 <__divsf3+0x21e>
c0026fa2:	eb c1                	jmp    c0026f65 <__divsf3+0x91>
c0026fa4:	56                   	push   esi
c0026fa5:	56                   	push   esi
c0026fa6:	50                   	push   eax
c0026fa7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026faa:	e8 69 03 00 00       	call   c0027318 <__nesf2>
c0026faf:	83 c4 10             	add    esp,0x10
c0026fb2:	85 c0                	test   eax,eax
c0026fb4:	0f 84 31 01 00 00    	je     c00270eb <__divsf3+0x217>
c0026fba:	eb a9                	jmp    c0026f65 <__divsf3+0x91>
c0026fbc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026fbf:	c1 e3 08             	shl    ebx,0x8
c0026fc2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026fc8:	8d 57 01             	lea    edx,[edi+0x1]
c0026fcb:	80 e2 fe             	and    dl,0xfe
c0026fce:	75 71                	jne    c0027041 <__divsf3+0x16d>
c0026fd0:	85 c0                	test   eax,eax
c0026fd2:	ba 00 00 00 00       	mov    edx,0x0
c0026fd7:	74 2f                	je     c0027008 <__divsf3+0x134>
c0026fd9:	51                   	push   ecx
c0026fda:	51                   	push   ecx
c0026fdb:	52                   	push   edx
c0026fdc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fdf:	e8 f9 02 00 00       	call   c00272dd <__eqsf2>
c0026fe4:	83 c4 10             	add    esp,0x10
c0026fe7:	85 c0                	test   eax,eax
c0026fe9:	0f 85 03 01 00 00    	jne    c00270f2 <__divsf3+0x21e>
c0026fef:	31 d2                	xor    edx,edx
c0026ff1:	89 d3                	mov    ebx,edx
c0026ff3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026ff6:	31 f8                	xor    eax,edi
c0026ff8:	0f 89 f7 00 00 00    	jns    c00270f5 <__divsf3+0x221>
c0026ffe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027003:	e9 ed 00 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0027008:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002700b:	50                   	push   eax
c002700c:	50                   	push   eax
c002700d:	52                   	push   edx
c002700e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027011:	e8 c7 02 00 00       	call   c00272dd <__eqsf2>
c0027016:	83 c4 10             	add    esp,0x10
c0027019:	85 c0                	test   eax,eax
c002701b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002701e:	75 16                	jne    c0027036 <__divsf3+0x162>
c0027020:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027023:	31 fb                	xor    ebx,edi
c0027025:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002702b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027031:	e9 bf 00 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0027036:	8d 46 01             	lea    eax,[esi+0x1]
c0027039:	01 db                	add    ebx,ebx
c002703b:	78 04                	js     c0027041 <__divsf3+0x16d>
c002703d:	89 c6                	mov    esi,eax
c002703f:	eb f5                	jmp    c0027036 <__divsf3+0x162>
c0027041:	89 c8                	mov    eax,ecx
c0027043:	0d 00 00 00 80       	or     eax,0x80000000
c0027048:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002704e:	31 d2                	xor    edx,edx
c0027050:	39 d8                	cmp    eax,ebx
c0027052:	72 07                	jb     c002705b <__divsf3+0x187>
c0027054:	29 d8                	sub    eax,ebx
c0027056:	ba 01 00 00 00       	mov    edx,0x1
c002705b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027062:	01 d2                	add    edx,edx
c0027064:	89 c1                	mov    ecx,eax
c0027066:	01 c0                	add    eax,eax
c0027068:	85 c9                	test   ecx,ecx
c002706a:	78 04                	js     c0027070 <__divsf3+0x19c>
c002706c:	39 c3                	cmp    ebx,eax
c002706e:	77 05                	ja     c0027075 <__divsf3+0x1a1>
c0027070:	29 d8                	sub    eax,ebx
c0027072:	83 ca 01             	or     edx,0x1
c0027075:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027078:	75 e8                	jne    c0027062 <__divsf3+0x18e>
c002707a:	85 c0                	test   eax,eax
c002707c:	0f 95 c0             	setne  al
c002707f:	0f b6 c0             	movzx  eax,al
c0027082:	c1 e2 06             	shl    edx,0x6
c0027085:	09 c2                	or     edx,eax
c0027087:	78 03                	js     c002708c <__divsf3+0x1b8>
c0027089:	01 d2                	add    edx,edx
c002708b:	4e                   	dec    esi
c002708c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027092:	7f 22                	jg     c00270b6 <__divsf3+0x1e2>
c0027094:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002709a:	85 f6                	test   esi,esi
c002709c:	7f 23                	jg     c00270c1 <__divsf3+0x1ed>
c002709e:	83 fe e9             	cmp    esi,0xffffffe9
c00270a1:	7c 1a                	jl     c00270bd <__divsf3+0x1e9>
c00270a3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270a9:	b9 01 00 00 00       	mov    ecx,0x1
c00270ae:	29 f1                	sub    ecx,esi
c00270b0:	d3 ea                	shr    edx,cl
c00270b2:	31 f6                	xor    esi,esi
c00270b4:	eb 0b                	jmp    c00270c1 <__divsf3+0x1ed>
c00270b6:	be ff 00 00 00       	mov    esi,0xff
c00270bb:	eb 02                	jmp    c00270bf <__divsf3+0x1eb>
c00270bd:	31 f6                	xor    esi,esi
c00270bf:	31 d2                	xor    edx,edx
c00270c1:	89 d0                	mov    eax,edx
c00270c3:	c1 e8 08             	shr    eax,0x8
c00270c6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270c9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270cf:	09 fe                	or     esi,edi
c00270d1:	c1 e6 17             	shl    esi,0x17
c00270d4:	09 c6                	or     esi,eax
c00270d6:	f6 c2 7f             	test   dl,0x7f
c00270d9:	0f 95 c1             	setne  cl
c00270dc:	09 c8                	or     eax,ecx
c00270de:	83 e0 01             	and    eax,0x1
c00270e1:	c1 ea 07             	shr    edx,0x7
c00270e4:	21 c2                	and    edx,eax
c00270e6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00270e9:	eb 0a                	jmp    c00270f5 <__divsf3+0x221>
c00270eb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00270f0:	eb 03                	jmp    c00270f5 <__divsf3+0x221>
c00270f2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270f5:	89 d8                	mov    eax,ebx
c00270f7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270fa:	5b                   	pop    ebx
c00270fb:	5e                   	pop    esi
c00270fc:	5f                   	pop    edi
c00270fd:	5d                   	pop    ebp
c00270fe:	c3                   	ret    

c00270ff <__floatsisf>:
c00270ff:	55                   	push   ebp
c0027100:	89 e5                	mov    ebp,esp
c0027102:	53                   	push   ebx
c0027103:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027106:	85 d2                	test   edx,edx
c0027108:	7e 2b                	jle    c0027135 <__floatsisf+0x36>
c002710a:	0f bd ca             	bsr    ecx,edx
c002710d:	83 f1 1f             	xor    ecx,0x1f
c0027110:	d3 e2                	shl    edx,cl
c0027112:	89 d0                	mov    eax,edx
c0027114:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027119:	89 c3                	mov    ebx,eax
c002711b:	c1 eb 08             	shr    ebx,0x8
c002711e:	80 e2 7f             	and    dl,0x7f
c0027121:	0f 95 c2             	setne  dl
c0027124:	09 da                	or     edx,ebx
c0027126:	83 e2 01             	and    edx,0x1
c0027129:	c1 e8 07             	shr    eax,0x7
c002712c:	21 c2                	and    edx,eax
c002712e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027133:	eb 32                	jmp    c0027167 <__floatsisf+0x68>
c0027135:	b8 00 00 00 00       	mov    eax,0x0
c002713a:	74 34                	je     c0027170 <__floatsisf+0x71>
c002713c:	f7 da                	neg    edx
c002713e:	0f bd ca             	bsr    ecx,edx
c0027141:	83 f1 1f             	xor    ecx,0x1f
c0027144:	d3 e2                	shl    edx,cl
c0027146:	89 d0                	mov    eax,edx
c0027148:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002714d:	89 c3                	mov    ebx,eax
c002714f:	c1 eb 08             	shr    ebx,0x8
c0027152:	80 e2 7f             	and    dl,0x7f
c0027155:	0f 95 c2             	setne  dl
c0027158:	09 da                	or     edx,ebx
c002715a:	83 e2 01             	and    edx,0x1
c002715d:	c1 e8 07             	shr    eax,0x7
c0027160:	21 c2                	and    edx,eax
c0027162:	b8 9e 01 00 00       	mov    eax,0x19e
c0027167:	29 c8                	sub    eax,ecx
c0027169:	c1 e0 17             	shl    eax,0x17
c002716c:	09 d8                	or     eax,ebx
c002716e:	01 d0                	add    eax,edx
c0027170:	5b                   	pop    ebx
c0027171:	5d                   	pop    ebp
c0027172:	c3                   	ret    

c0027173 <__floatunsisf>:
c0027173:	55                   	push   ebp
c0027174:	89 e5                	mov    ebp,esp
c0027176:	53                   	push   ebx
c0027177:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002717a:	31 c0                	xor    eax,eax
c002717c:	85 d2                	test   edx,edx
c002717e:	74 32                	je     c00271b2 <__floatunsisf+0x3f>
c0027180:	0f bd ca             	bsr    ecx,edx
c0027183:	83 f1 1f             	xor    ecx,0x1f
c0027186:	d3 e2                	shl    edx,cl
c0027188:	89 d0                	mov    eax,edx
c002718a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002718f:	89 c3                	mov    ebx,eax
c0027191:	c1 eb 08             	shr    ebx,0x8
c0027194:	80 e2 7f             	and    dl,0x7f
c0027197:	0f 95 c2             	setne  dl
c002719a:	09 da                	or     edx,ebx
c002719c:	83 e2 01             	and    edx,0x1
c002719f:	c1 e8 07             	shr    eax,0x7
c00271a2:	21 c2                	and    edx,eax
c00271a4:	b8 9e 00 00 00       	mov    eax,0x9e
c00271a9:	29 c8                	sub    eax,ecx
c00271ab:	c1 e0 17             	shl    eax,0x17
c00271ae:	09 d8                	or     eax,ebx
c00271b0:	01 d0                	add    eax,edx
c00271b2:	5b                   	pop    ebx
c00271b3:	5d                   	pop    ebp
c00271b4:	c3                   	ret    

c00271b5 <__fixsfsi>:
c00271b5:	55                   	push   ebp
c00271b6:	89 e5                	mov    ebp,esp
c00271b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271bb:	89 d1                	mov    ecx,edx
c00271bd:	c1 e1 08             	shl    ecx,0x8
c00271c0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00271c6:	c1 fa 17             	sar    edx,0x17
c00271c9:	78 1c                	js     c00271e7 <__fixsfsi+0x32>
c00271cb:	83 ea 7f             	sub    edx,0x7f
c00271ce:	31 c0                	xor    eax,eax
c00271d0:	83 fa 1e             	cmp    edx,0x1e
c00271d3:	77 40                	ja     c0027215 <__fixsfsi+0x60>
c00271d5:	89 c8                	mov    eax,ecx
c00271d7:	0d 00 00 00 80       	or     eax,0x80000000
c00271dc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271e1:	29 d1                	sub    ecx,edx
c00271e3:	d3 e8                	shr    eax,cl
c00271e5:	eb 2e                	jmp    c0027215 <__fixsfsi+0x60>
c00271e7:	31 c0                	xor    eax,eax
c00271e9:	81 c2 81 00 00 00    	add    edx,0x81
c00271ef:	78 24                	js     c0027215 <__fixsfsi+0x60>
c00271f1:	83 fa 1e             	cmp    edx,0x1e
c00271f4:	7e 09                	jle    c00271ff <__fixsfsi+0x4a>
c00271f6:	83 fa 1f             	cmp    edx,0x1f
c00271f9:	75 18                	jne    c0027213 <__fixsfsi+0x5e>
c00271fb:	85 c9                	test   ecx,ecx
c00271fd:	75 14                	jne    c0027213 <__fixsfsi+0x5e>
c00271ff:	89 c8                	mov    eax,ecx
c0027201:	0d 00 00 00 80       	or     eax,0x80000000
c0027206:	b9 1f 00 00 00       	mov    ecx,0x1f
c002720b:	29 d1                	sub    ecx,edx
c002720d:	d3 e8                	shr    eax,cl
c002720f:	f7 d8                	neg    eax
c0027211:	eb 02                	jmp    c0027215 <__fixsfsi+0x60>
c0027213:	31 c0                	xor    eax,eax
c0027215:	5d                   	pop    ebp
c0027216:	c3                   	ret    

c0027217 <__fixunssfsi>:
c0027217:	55                   	push   ebp
c0027218:	89 e5                	mov    ebp,esp
c002721a:	53                   	push   ebx
c002721b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002721e:	89 d3                	mov    ebx,edx
c0027220:	c1 fb 17             	sar    ebx,0x17
c0027223:	83 eb 7f             	sub    ebx,0x7f
c0027226:	31 c0                	xor    eax,eax
c0027228:	83 fb 1f             	cmp    ebx,0x1f
c002722b:	77 18                	ja     c0027245 <__fixunssfsi+0x2e>
c002722d:	89 d0                	mov    eax,edx
c002722f:	c1 e0 08             	shl    eax,0x8
c0027232:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027237:	0d 00 00 00 80       	or     eax,0x80000000
c002723c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027241:	29 d9                	sub    ecx,ebx
c0027243:	d3 e8                	shr    eax,cl
c0027245:	5b                   	pop    ebx
c0027246:	5d                   	pop    ebp
c0027247:	c3                   	ret    

c0027248 <__cmpsf2>:
c0027248:	55                   	push   ebp
c0027249:	89 e5                	mov    ebp,esp
c002724b:	57                   	push   edi
c002724c:	56                   	push   esi
c002724d:	53                   	push   ebx
c002724e:	83 ec 24             	sub    esp,0x24
c0027251:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027254:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027257:	e8 4f 10 00 00       	call   c00282ab <__truncdfsf2>
c002725c:	5a                   	pop    edx
c002725d:	59                   	pop    ecx
c002725e:	89 c3                	mov    ebx,eax
c0027260:	c1 e8 17             	shr    eax,0x17
c0027263:	0f b6 f0             	movzx  esi,al
c0027266:	89 d8                	mov    eax,ebx
c0027268:	c1 e8 1f             	shr    eax,0x1f
c002726b:	31 c6                	xor    esi,eax
c002726d:	c1 e3 08             	shl    ebx,0x8
c0027270:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027273:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027276:	e8 30 10 00 00       	call   c00282ab <__truncdfsf2>
c002727b:	83 c4 10             	add    esp,0x10
c002727e:	89 c1                	mov    ecx,eax
c0027280:	c1 e9 17             	shr    ecx,0x17
c0027283:	0f b6 c9             	movzx  ecx,cl
c0027286:	89 c7                	mov    edi,eax
c0027288:	c1 ef 1f             	shr    edi,0x1f
c002728b:	89 ca                	mov    edx,ecx
c002728d:	31 fa                	xor    edx,edi
c002728f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027292:	c1 e0 08             	shl    eax,0x8
c0027295:	89 c2                	mov    edx,eax
c0027297:	89 d8                	mov    eax,ebx
c0027299:	09 d0                	or     eax,edx
c002729b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272a0:	09 f0                	or     eax,esi
c00272a2:	75 08                	jne    c00272ac <__cmpsf2+0x64>
c00272a4:	31 c0                	xor    eax,eax
c00272a6:	39 f9                	cmp    ecx,edi
c00272a8:	75 0c                	jne    c00272b6 <__cmpsf2+0x6e>
c00272aa:	eb 29                	jmp    c00272d5 <__cmpsf2+0x8d>
c00272ac:	b8 01 00 00 00       	mov    eax,0x1
c00272b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00272b4:	7f 1f                	jg     c00272d5 <__cmpsf2+0x8d>
c00272b6:	83 c8 ff             	or     eax,0xffffffff
c00272b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00272bc:	7c 17                	jl     c00272d5 <__cmpsf2+0x8d>
c00272be:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272c4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00272ca:	b8 01 00 00 00       	mov    eax,0x1
c00272cf:	39 d3                	cmp    ebx,edx
c00272d1:	77 02                	ja     c00272d5 <__cmpsf2+0x8d>
c00272d3:	19 c0                	sbb    eax,eax
c00272d5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272d8:	5b                   	pop    ebx
c00272d9:	5e                   	pop    esi
c00272da:	5f                   	pop    edi
c00272db:	5d                   	pop    ebp
c00272dc:	c3                   	ret    

c00272dd <__eqsf2>:
c00272dd:	55                   	push   ebp
c00272de:	89 e5                	mov    ebp,esp
c00272e0:	83 ec 24             	sub    esp,0x24
c00272e3:	6a 01                	push   0x1
c00272e5:	83 ec 0c             	sub    esp,0xc
c00272e8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272eb:	e8 df 10 00 00       	call   c00283cf <__extendsfdf2>
c00272f0:	83 c4 10             	add    esp,0x10
c00272f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272f9:	52                   	push   edx
c00272fa:	50                   	push   eax
c00272fb:	50                   	push   eax
c00272fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ff:	e8 cb 10 00 00       	call   c00283cf <__extendsfdf2>
c0027304:	59                   	pop    ecx
c0027305:	59                   	pop    ecx
c0027306:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027309:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002730c:	52                   	push   edx
c002730d:	50                   	push   eax
c002730e:	e8 35 ff ff ff       	call   c0027248 <__cmpsf2>
c0027313:	83 c4 20             	add    esp,0x20
c0027316:	c9                   	leave  
c0027317:	c3                   	ret    

c0027318 <__nesf2>:
c0027318:	eb c3                	jmp    c00272dd <__eqsf2>

c002731a <__gtsf2>:
c002731a:	55                   	push   ebp
c002731b:	89 e5                	mov    ebp,esp
c002731d:	83 ec 24             	sub    esp,0x24
c0027320:	6a ff                	push   0xffffffff
c0027322:	83 ec 0c             	sub    esp,0xc
c0027325:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027328:	e8 a2 10 00 00       	call   c00283cf <__extendsfdf2>
c002732d:	83 c4 10             	add    esp,0x10
c0027330:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027333:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027336:	52                   	push   edx
c0027337:	50                   	push   eax
c0027338:	50                   	push   eax
c0027339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002733c:	e8 8e 10 00 00       	call   c00283cf <__extendsfdf2>
c0027341:	59                   	pop    ecx
c0027342:	59                   	pop    ecx
c0027343:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027346:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027349:	52                   	push   edx
c002734a:	50                   	push   eax
c002734b:	e8 f8 fe ff ff       	call   c0027248 <__cmpsf2>
c0027350:	83 c4 20             	add    esp,0x20
c0027353:	c9                   	leave  
c0027354:	c3                   	ret    

c0027355 <__gesf2>:
c0027355:	eb c3                	jmp    c002731a <__gtsf2>

c0027357 <__ltsf2>:
c0027357:	eb 84                	jmp    c00272dd <__eqsf2>

c0027359 <__lesf2>:
c0027359:	eb 82                	jmp    c00272dd <__eqsf2>

c002735b <__adddf3>:
c002735b:	55                   	push   ebp
c002735c:	89 e5                	mov    ebp,esp
c002735e:	57                   	push   edi
c002735f:	56                   	push   esi
c0027360:	53                   	push   ebx
c0027361:	83 ec 24             	sub    esp,0x24
c0027364:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027367:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002736a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002736d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027370:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027373:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027376:	89 c8                	mov    eax,ecx
c0027378:	89 ce                	mov    esi,ecx
c002737a:	c1 fe 14             	sar    esi,0x14
c002737d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027380:	89 fb                	mov    ebx,edi
c0027382:	89 fa                	mov    edx,edi
c0027384:	c1 e2 0b             	shl    edx,0xb
c0027387:	c1 e0 0b             	shl    eax,0xb
c002738a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002738f:	c1 eb 15             	shr    ebx,0x15
c0027392:	09 d8                	or     eax,ebx
c0027394:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027397:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002739a:	c1 fe 14             	sar    esi,0x14
c002739d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273a0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00273a3:	89 f3                	mov    ebx,esi
c00273a5:	c1 e3 0b             	shl    ebx,0xb
c00273a8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00273ab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00273ae:	c1 e3 0b             	shl    ebx,0xb
c00273b1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00273b7:	c1 ee 15             	shr    esi,0x15
c00273ba:	09 f3                	or     ebx,esi
c00273bc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00273bf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273c2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00273c5:	0f 88 5f 02 00 00    	js     c002762a <__adddf3+0x2cf>
c00273cb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273ce:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00273d1:	85 db                	test   ebx,ebx
c00273d3:	0f 8e c7 00 00 00    	jle    c00274a0 <__adddf3+0x145>
c00273d9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00273e0:	75 1a                	jne    c00273fc <__adddf3+0xa1>
c00273e2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273e5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273e8:	0f 84 b2 05 00 00    	je     c00279a0 <__adddf3+0x645>
c00273ee:	4b                   	dec    ebx
c00273ef:	75 23                	jne    c0027414 <__adddf3+0xb9>
c00273f1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273f4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273f7:	e9 99 00 00 00       	jmp    c0027495 <__adddf3+0x13a>
c00273fc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273ff:	f7 d6                	not    esi
c0027401:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027407:	0f 84 93 05 00 00    	je     c00279a0 <__adddf3+0x645>
c002740d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027414:	83 fb 1f             	cmp    ebx,0x1f
c0027417:	7e 42                	jle    c002745b <__adddf3+0x100>
c0027419:	83 fb 3f             	cmp    ebx,0x3f
c002741c:	0f 8f 7e 05 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027422:	83 e3 1f             	and    ebx,0x1f
c0027425:	89 d9                	mov    ecx,ebx
c0027427:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002742a:	d3 ef                	shr    edi,cl
c002742c:	31 db                	xor    ebx,ebx
c002742e:	85 c9                	test   ecx,ecx
c0027430:	74 15                	je     c0027447 <__adddf3+0xec>
c0027432:	be 20 00 00 00       	mov    esi,0x20
c0027437:	29 ce                	sub    esi,ecx
c0027439:	89 f1                	mov    ecx,esi
c002743b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002743e:	d3 e6                	shl    esi,cl
c0027440:	31 db                	xor    ebx,ebx
c0027442:	85 f6                	test   esi,esi
c0027444:	0f 95 c3             	setne  bl
c0027447:	31 c9                	xor    ecx,ecx
c0027449:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002744d:	0f 95 c1             	setne  cl
c0027450:	09 cf                	or     edi,ecx
c0027452:	09 fb                	or     ebx,edi
c0027454:	01 da                	add    edx,ebx
c0027456:	83 d0 00             	adc    eax,0x0
c0027459:	eb 3a                	jmp    c0027495 <__adddf3+0x13a>
c002745b:	bf 20 00 00 00       	mov    edi,0x20
c0027460:	29 df                	sub    edi,ebx
c0027462:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027465:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027468:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002746b:	d3 e6                	shl    esi,cl
c002746d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027470:	88 d9                	mov    cl,bl
c0027472:	d3 ef                	shr    edi,cl
c0027474:	09 fe                	or     esi,edi
c0027476:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027479:	88 d9                	mov    cl,bl
c002747b:	d3 ef                	shr    edi,cl
c002747d:	89 fb                	mov    ebx,edi
c002747f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027482:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027485:	d3 e7                	shl    edi,cl
c0027487:	85 ff                	test   edi,edi
c0027489:	0f 95 c1             	setne  cl
c002748c:	0f b6 c9             	movzx  ecx,cl
c002748f:	09 ce                	or     esi,ecx
c0027491:	01 f2                	add    edx,esi
c0027493:	11 d8                	adc    eax,ebx
c0027495:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027498:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002749b:	e9 52 01 00 00       	jmp    c00275f2 <__adddf3+0x297>
c00274a0:	0f 84 d5 00 00 00    	je     c002757b <__adddf3+0x220>
c00274a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00274a9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00274ac:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274af:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274b2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274b9:	75 20                	jne    c00274db <__adddf3+0x180>
c00274bb:	89 d6                	mov    esi,edx
c00274bd:	09 c6                	or     esi,eax
c00274bf:	0f 84 db 04 00 00    	je     c00279a0 <__adddf3+0x645>
c00274c5:	4b                   	dec    ebx
c00274c6:	75 29                	jne    c00274f1 <__adddf3+0x196>
c00274c8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00274ce:	01 d1                	add    ecx,edx
c00274d0:	11 c6                	adc    esi,eax
c00274d2:	89 f0                	mov    eax,esi
c00274d4:	89 ca                	mov    edx,ecx
c00274d6:	e9 17 01 00 00       	jmp    c00275f2 <__adddf3+0x297>
c00274db:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274de:	f7 d6                	not    esi
c00274e0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274e6:	0f 84 b4 04 00 00    	je     c00279a0 <__adddf3+0x645>
c00274ec:	0d 00 00 00 80       	or     eax,0x80000000
c00274f1:	83 fb 1f             	cmp    ebx,0x1f
c00274f4:	7e 48                	jle    c002753e <__adddf3+0x1e3>
c00274f6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274f9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274fc:	83 fb 3f             	cmp    ebx,0x3f
c00274ff:	0f 8f 9b 04 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027505:	83 e3 1f             	and    ebx,0x1f
c0027508:	89 d9                	mov    ecx,ebx
c002750a:	89 c7                	mov    edi,eax
c002750c:	d3 ef                	shr    edi,cl
c002750e:	31 db                	xor    ebx,ebx
c0027510:	85 c9                	test   ecx,ecx
c0027512:	74 12                	je     c0027526 <__adddf3+0x1cb>
c0027514:	be 20 00 00 00       	mov    esi,0x20
c0027519:	29 ce                	sub    esi,ecx
c002751b:	89 f1                	mov    ecx,esi
c002751d:	d3 e0                	shl    eax,cl
c002751f:	31 db                	xor    ebx,ebx
c0027521:	85 c0                	test   eax,eax
c0027523:	0f 95 c3             	setne  bl
c0027526:	31 c0                	xor    eax,eax
c0027528:	85 d2                	test   edx,edx
c002752a:	0f 95 c0             	setne  al
c002752d:	09 c7                	or     edi,eax
c002752f:	09 fb                	or     ebx,edi
c0027531:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027534:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027537:	01 da                	add    edx,ebx
c0027539:	83 d6 00             	adc    esi,0x0
c002753c:	eb 39                	jmp    c0027577 <__adddf3+0x21c>
c002753e:	be 20 00 00 00       	mov    esi,0x20
c0027543:	29 de                	sub    esi,ebx
c0027545:	89 c7                	mov    edi,eax
c0027547:	89 f1                	mov    ecx,esi
c0027549:	d3 e7                	shl    edi,cl
c002754b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002754e:	89 d7                	mov    edi,edx
c0027550:	88 d9                	mov    cl,bl
c0027552:	d3 ef                	shr    edi,cl
c0027554:	89 f9                	mov    ecx,edi
c0027556:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027559:	09 cf                	or     edi,ecx
c002755b:	88 d9                	mov    cl,bl
c002755d:	d3 e8                	shr    eax,cl
c002755f:	89 f1                	mov    ecx,esi
c0027561:	d3 e2                	shl    edx,cl
c0027563:	85 d2                	test   edx,edx
c0027565:	0f 95 c2             	setne  dl
c0027568:	0f b6 d2             	movzx  edx,dl
c002756b:	09 d7                	or     edi,edx
c002756d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027570:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027573:	01 fa                	add    edx,edi
c0027575:	11 c6                	adc    esi,eax
c0027577:	89 f0                	mov    eax,esi
c0027579:	eb 77                	jmp    c00275f2 <__adddf3+0x297>
c002757b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002757e:	46                   	inc    esi
c002757f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027582:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027588:	75 41                	jne    c00275cb <__adddf3+0x270>
c002758a:	89 d3                	mov    ebx,edx
c002758c:	09 c3                	or     ebx,eax
c002758e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027595:	75 27                	jne    c00275be <__adddf3+0x263>
c0027597:	85 db                	test   ebx,ebx
c0027599:	0f 84 fb 03 00 00    	je     c002799a <__adddf3+0x63f>
c002759f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275a2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275a5:	0f 84 f5 03 00 00    	je     c00279a0 <__adddf3+0x645>
c00275ab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275ae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275b1:	85 c0                	test   eax,eax
c00275b3:	0f 89 91 03 00 00    	jns    c002794a <__adddf3+0x5ef>
c00275b9:	e9 85 03 00 00       	jmp    c0027943 <__adddf3+0x5e8>
c00275be:	85 db                	test   ebx,ebx
c00275c0:	0f 85 da 03 00 00    	jne    c00279a0 <__adddf3+0x645>
c00275c6:	e9 cf 03 00 00       	jmp    c002799a <__adddf3+0x63f>
c00275cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275d4:	f7 d1                	not    ecx
c00275d6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00275dc:	0f 84 70 03 00 00    	je     c0027952 <__adddf3+0x5f7>
c00275e2:	d1 ea                	shr    edx,1
c00275e4:	89 c1                	mov    ecx,eax
c00275e6:	c1 e1 1f             	shl    ecx,0x1f
c00275e9:	09 ca                	or     edx,ecx
c00275eb:	d1 e8                	shr    eax,1
c00275ed:	e9 6f 03 00 00       	jmp    c0027961 <__adddf3+0x606>
c00275f2:	85 c0                	test   eax,eax
c00275f4:	0f 89 67 03 00 00    	jns    c0027961 <__adddf3+0x606>
c00275fa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00275fd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027600:	f7 d1                	not    ecx
c0027602:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027608:	0f 84 44 03 00 00    	je     c0027952 <__adddf3+0x5f7>
c002760e:	89 d1                	mov    ecx,edx
c0027610:	d1 e9                	shr    ecx,1
c0027612:	83 e2 01             	and    edx,0x1
c0027615:	09 ca                	or     edx,ecx
c0027617:	89 c1                	mov    ecx,eax
c0027619:	c1 e1 1f             	shl    ecx,0x1f
c002761c:	09 ca                	or     edx,ecx
c002761e:	d1 e8                	shr    eax,1
c0027620:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027625:	e9 37 03 00 00       	jmp    c0027961 <__adddf3+0x606>
c002762a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002762d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027633:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027636:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027639:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002763f:	29 de                	sub    esi,ebx
c0027641:	85 f6                	test   esi,esi
c0027643:	0f 8e bd 00 00 00    	jle    c0027706 <__adddf3+0x3ab>
c0027649:	85 db                	test   ebx,ebx
c002764b:	75 17                	jne    c0027664 <__adddf3+0x309>
c002764d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027650:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027653:	0f 84 47 03 00 00    	je     c00279a0 <__adddf3+0x645>
c0027659:	4e                   	dec    esi
c002765a:	75 20                	jne    c002767c <__adddf3+0x321>
c002765c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002765f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027662:	eb 5b                	jmp    c00276bf <__adddf3+0x364>
c0027664:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027667:	f7 d3                	not    ebx
c0027669:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002766f:	0f 84 2b 03 00 00    	je     c00279a0 <__adddf3+0x645>
c0027675:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002767c:	83 fe 1f             	cmp    esi,0x1f
c002767f:	7e 49                	jle    c00276ca <__adddf3+0x36f>
c0027681:	83 fe 3f             	cmp    esi,0x3f
c0027684:	0f 8f 16 03 00 00    	jg     c00279a0 <__adddf3+0x645>
c002768a:	83 e6 1f             	and    esi,0x1f
c002768d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027690:	89 f1                	mov    ecx,esi
c0027692:	d3 ef                	shr    edi,cl
c0027694:	31 db                	xor    ebx,ebx
c0027696:	85 f6                	test   esi,esi
c0027698:	74 13                	je     c00276ad <__adddf3+0x352>
c002769a:	b9 20 00 00 00       	mov    ecx,0x20
c002769f:	29 f1                	sub    ecx,esi
c00276a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a4:	d3 e6                	shl    esi,cl
c00276a6:	31 db                	xor    ebx,ebx
c00276a8:	85 f6                	test   esi,esi
c00276aa:	0f 95 c3             	setne  bl
c00276ad:	31 c9                	xor    ecx,ecx
c00276af:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276b3:	0f 95 c1             	setne  cl
c00276b6:	09 cf                	or     edi,ecx
c00276b8:	09 fb                	or     ebx,edi
c00276ba:	29 da                	sub    edx,ebx
c00276bc:	83 d8 00             	sbb    eax,0x0
c00276bf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276c5:	e9 aa 01 00 00       	jmp    c0027874 <__adddf3+0x519>
c00276ca:	bf 20 00 00 00       	mov    edi,0x20
c00276cf:	29 f7                	sub    edi,esi
c00276d1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276d4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00276d7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276da:	d3 e3                	shl    ebx,cl
c00276dc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276df:	89 f1                	mov    ecx,esi
c00276e1:	d3 ef                	shr    edi,cl
c00276e3:	09 fb                	or     ebx,edi
c00276e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276e8:	89 f1                	mov    ecx,esi
c00276ea:	d3 ef                	shr    edi,cl
c00276ec:	89 fe                	mov    esi,edi
c00276ee:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276f1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276f4:	d3 e7                	shl    edi,cl
c00276f6:	85 ff                	test   edi,edi
c00276f8:	0f 95 c1             	setne  cl
c00276fb:	0f b6 c9             	movzx  ecx,cl
c00276fe:	09 cb                	or     ebx,ecx
c0027700:	29 da                	sub    edx,ebx
c0027702:	19 f0                	sbb    eax,esi
c0027704:	eb b9                	jmp    c00276bf <__adddf3+0x364>
c0027706:	0f 84 cd 00 00 00    	je     c00277d9 <__adddf3+0x47e>
c002770c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002770f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027712:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027715:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027719:	75 1b                	jne    c0027736 <__adddf3+0x3db>
c002771b:	89 d6                	mov    esi,edx
c002771d:	09 c6                	or     esi,eax
c002771f:	0f 84 7b 02 00 00    	je     c00279a0 <__adddf3+0x645>
c0027725:	4b                   	dec    ebx
c0027726:	75 24                	jne    c002774c <__adddf3+0x3f1>
c0027728:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002772b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002772e:	29 d1                	sub    ecx,edx
c0027730:	19 c6                	sbb    esi,eax
c0027732:	89 ca                	mov    edx,ecx
c0027734:	eb 61                	jmp    c0027797 <__adddf3+0x43c>
c0027736:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027739:	f7 d6                	not    esi
c002773b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027741:	0f 84 59 02 00 00    	je     c00279a0 <__adddf3+0x645>
c0027747:	0d 00 00 00 80       	or     eax,0x80000000
c002774c:	83 fb 1f             	cmp    ebx,0x1f
c002774f:	7e 4d                	jle    c002779e <__adddf3+0x443>
c0027751:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027754:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027757:	83 fb 3f             	cmp    ebx,0x3f
c002775a:	0f 8f 40 02 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027760:	83 e3 1f             	and    ebx,0x1f
c0027763:	89 d9                	mov    ecx,ebx
c0027765:	89 c7                	mov    edi,eax
c0027767:	d3 ef                	shr    edi,cl
c0027769:	31 db                	xor    ebx,ebx
c002776b:	85 c9                	test   ecx,ecx
c002776d:	74 12                	je     c0027781 <__adddf3+0x426>
c002776f:	be 20 00 00 00       	mov    esi,0x20
c0027774:	29 ce                	sub    esi,ecx
c0027776:	89 f1                	mov    ecx,esi
c0027778:	d3 e0                	shl    eax,cl
c002777a:	31 db                	xor    ebx,ebx
c002777c:	85 c0                	test   eax,eax
c002777e:	0f 95 c3             	setne  bl
c0027781:	31 c0                	xor    eax,eax
c0027783:	85 d2                	test   edx,edx
c0027785:	0f 95 c0             	setne  al
c0027788:	09 c7                	or     edi,eax
c002778a:	09 fb                	or     ebx,edi
c002778c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002778f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027792:	29 da                	sub    edx,ebx
c0027794:	83 de 00             	sbb    esi,0x0
c0027797:	89 f0                	mov    eax,esi
c0027799:	e9 d6 00 00 00       	jmp    c0027874 <__adddf3+0x519>
c002779e:	be 20 00 00 00       	mov    esi,0x20
c00277a3:	29 de                	sub    esi,ebx
c00277a5:	89 c7                	mov    edi,eax
c00277a7:	89 f1                	mov    ecx,esi
c00277a9:	d3 e7                	shl    edi,cl
c00277ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277ae:	89 d7                	mov    edi,edx
c00277b0:	88 d9                	mov    cl,bl
c00277b2:	d3 ef                	shr    edi,cl
c00277b4:	89 f9                	mov    ecx,edi
c00277b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277b9:	09 cf                	or     edi,ecx
c00277bb:	88 d9                	mov    cl,bl
c00277bd:	d3 e8                	shr    eax,cl
c00277bf:	89 f1                	mov    ecx,esi
c00277c1:	d3 e2                	shl    edx,cl
c00277c3:	85 d2                	test   edx,edx
c00277c5:	0f 95 c2             	setne  dl
c00277c8:	0f b6 d2             	movzx  edx,dl
c00277cb:	09 d7                	or     edi,edx
c00277cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277d3:	29 fa                	sub    edx,edi
c00277d5:	19 c6                	sbb    esi,eax
c00277d7:	eb be                	jmp    c0027797 <__adddf3+0x43c>
c00277d9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00277df:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00277e5:	75 6a                	jne    c0027851 <__adddf3+0x4f6>
c00277e7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277eb:	75 58                	jne    c0027845 <__adddf3+0x4ea>
c00277ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277f3:	89 d6                	mov    esi,edx
c00277f5:	09 c6                	or     esi,eax
c00277f7:	75 17                	jne    c0027810 <__adddf3+0x4b5>
c00277f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ff:	85 db                	test   ebx,ebx
c0027801:	0f 85 99 01 00 00    	jne    c00279a0 <__adddf3+0x645>
c0027807:	31 ff                	xor    edi,edi
c0027809:	31 c9                	xor    ecx,ecx
c002780b:	e9 90 01 00 00       	jmp    c00279a0 <__adddf3+0x645>
c0027810:	85 db                	test   ebx,ebx
c0027812:	0f 84 88 01 00 00    	je     c00279a0 <__adddf3+0x645>
c0027818:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002781b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002781e:	85 c0                	test   eax,eax
c0027820:	79 10                	jns    c0027832 <__adddf3+0x4d7>
c0027822:	31 c9                	xor    ecx,ecx
c0027824:	f7 da                	neg    edx
c0027826:	0f 95 c1             	setne  cl
c0027829:	01 c8                	add    eax,ecx
c002782b:	f7 d8                	neg    eax
c002782d:	e9 2f 01 00 00       	jmp    c0027961 <__adddf3+0x606>
c0027832:	31 ff                	xor    edi,edi
c0027834:	31 c9                	xor    ecx,ecx
c0027836:	89 c3                	mov    ebx,eax
c0027838:	09 d3                	or     ebx,edx
c002783a:	0f 84 60 01 00 00    	je     c00279a0 <__adddf3+0x645>
c0027840:	e9 05 01 00 00       	jmp    c002794a <__adddf3+0x5ef>
c0027845:	31 ff                	xor    edi,edi
c0027847:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002784c:	e9 4f 01 00 00       	jmp    c00279a0 <__adddf3+0x645>
c0027851:	89 c1                	mov    ecx,eax
c0027853:	89 d0                	mov    eax,edx
c0027855:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027858:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002785b:	89 ca                	mov    edx,ecx
c002785d:	85 c9                	test   ecx,ecx
c002785f:	79 2c                	jns    c002788d <__adddf3+0x532>
c0027861:	31 c9                	xor    ecx,ecx
c0027863:	f7 d8                	neg    eax
c0027865:	0f 95 c1             	setne  cl
c0027868:	01 ca                	add    edx,ecx
c002786a:	f7 da                	neg    edx
c002786c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002786f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027872:	eb 19                	jmp    c002788d <__adddf3+0x532>
c0027874:	85 c0                	test   eax,eax
c0027876:	0f 89 e5 00 00 00    	jns    c0027961 <__adddf3+0x606>
c002787c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027881:	89 c1                	mov    ecx,eax
c0027883:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027886:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027889:	89 d0                	mov    eax,edx
c002788b:	89 ca                	mov    edx,ecx
c002788d:	85 d2                	test   edx,edx
c002788f:	74 59                	je     c00278ea <__adddf3+0x58f>
c0027891:	0f bd da             	bsr    ebx,edx
c0027894:	83 f3 1f             	xor    ebx,0x1f
c0027897:	88 d9                	mov    cl,bl
c0027899:	d3 e2                	shl    edx,cl
c002789b:	bf 20 00 00 00       	mov    edi,0x20
c00278a0:	89 f9                	mov    ecx,edi
c00278a2:	29 d9                	sub    ecx,ebx
c00278a4:	89 c6                	mov    esi,eax
c00278a6:	d3 ee                	shr    esi,cl
c00278a8:	09 d6                	or     esi,edx
c00278aa:	88 d9                	mov    cl,bl
c00278ac:	d3 e0                	shl    eax,cl
c00278ae:	89 c2                	mov    edx,eax
c00278b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278b3:	25 ff 07 00 00       	and    eax,0x7ff
c00278b8:	39 d8                	cmp    eax,ebx
c00278ba:	7f 22                	jg     c00278de <__adddf3+0x583>
c00278bc:	29 c3                	sub    ebx,eax
c00278be:	43                   	inc    ebx
c00278bf:	88 d9                	mov    cl,bl
c00278c1:	d3 ea                	shr    edx,cl
c00278c3:	29 df                	sub    edi,ebx
c00278c5:	89 f9                	mov    ecx,edi
c00278c7:	89 f0                	mov    eax,esi
c00278c9:	d3 e0                	shl    eax,cl
c00278cb:	09 c2                	or     edx,eax
c00278cd:	89 f0                	mov    eax,esi
c00278cf:	88 d9                	mov    cl,bl
c00278d1:	d3 e8                	shr    eax,cl
c00278d3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278d6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00278dc:	eb 6f                	jmp    c002794d <__adddf3+0x5f2>
c00278de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278e1:	29 d8                	sub    eax,ebx
c00278e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278e6:	89 f0                	mov    eax,esi
c00278e8:	eb 59                	jmp    c0027943 <__adddf3+0x5e8>
c00278ea:	85 c0                	test   eax,eax
c00278ec:	74 6a                	je     c0027958 <__adddf3+0x5fd>
c00278ee:	0f bd c8             	bsr    ecx,eax
c00278f1:	83 f1 1f             	xor    ecx,0x1f
c00278f4:	d3 e0                	shl    eax,cl
c00278f6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278ff:	83 c1 20             	add    ecx,0x20
c0027902:	39 cb                	cmp    ebx,ecx
c0027904:	7f 35                	jg     c002793b <__adddf3+0x5e0>
c0027906:	29 d9                	sub    ecx,ebx
c0027908:	8d 71 01             	lea    esi,[ecx+0x1]
c002790b:	83 fe 1f             	cmp    esi,0x1f
c002790e:	7e 09                	jle    c0027919 <__adddf3+0x5be>
c0027910:	83 e9 1f             	sub    ecx,0x1f
c0027913:	d3 e8                	shr    eax,cl
c0027915:	89 c3                	mov    ebx,eax
c0027917:	eb 11                	jmp    c002792a <__adddf3+0x5cf>
c0027919:	b9 20 00 00 00       	mov    ecx,0x20
c002791e:	29 f1                	sub    ecx,esi
c0027920:	89 c3                	mov    ebx,eax
c0027922:	d3 e3                	shl    ebx,cl
c0027924:	89 f1                	mov    ecx,esi
c0027926:	d3 e8                	shr    eax,cl
c0027928:	89 c2                	mov    edx,eax
c002792a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002792d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027932:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027935:	89 d0                	mov    eax,edx
c0027937:	89 da                	mov    edx,ebx
c0027939:	eb 26                	jmp    c0027961 <__adddf3+0x606>
c002793b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002793e:	29 cf                	sub    edi,ecx
c0027940:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027943:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027948:	eb 17                	jmp    c0027961 <__adddf3+0x606>
c002794a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002794d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027950:	eb 0f                	jmp    c0027961 <__adddf3+0x606>
c0027952:	31 d2                	xor    edx,edx
c0027954:	31 c0                	xor    eax,eax
c0027956:	eb 09                	jmp    c0027961 <__adddf3+0x606>
c0027958:	89 c2                	mov    edx,eax
c002795a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027961:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027964:	c1 e1 14             	shl    ecx,0x14
c0027967:	89 c3                	mov    ebx,eax
c0027969:	c1 eb 0b             	shr    ebx,0xb
c002796c:	09 d9                	or     ecx,ebx
c002796e:	89 d3                	mov    ebx,edx
c0027970:	c1 eb 0b             	shr    ebx,0xb
c0027973:	c1 e0 15             	shl    eax,0x15
c0027976:	09 d8                	or     eax,ebx
c0027978:	89 c7                	mov    edi,eax
c002797a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027980:	0f 95 c0             	setne  al
c0027983:	89 c6                	mov    esi,eax
c0027985:	09 f3                	or     ebx,esi
c0027987:	83 e3 01             	and    ebx,0x1
c002798a:	c1 ea 0a             	shr    edx,0xa
c002798d:	21 da                	and    edx,ebx
c002798f:	89 f8                	mov    eax,edi
c0027991:	01 d0                	add    eax,edx
c0027993:	83 d1 00             	adc    ecx,0x0
c0027996:	89 c7                	mov    edi,eax
c0027998:	eb 06                	jmp    c00279a0 <__adddf3+0x645>
c002799a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002799d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279a0:	89 f8                	mov    eax,edi
c00279a2:	89 ca                	mov    edx,ecx
c00279a4:	83 c4 24             	add    esp,0x24
c00279a7:	5b                   	pop    ebx
c00279a8:	5e                   	pop    esi
c00279a9:	5f                   	pop    edi
c00279aa:	5d                   	pop    ebp
c00279ab:	c3                   	ret    

c00279ac <__subdf3>:
c00279ac:	55                   	push   ebp
c00279ad:	89 e5                	mov    ebp,esp
c00279af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00279b5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279bb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00279be:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00279c1:	5d                   	pop    ebp
c00279c2:	e9 94 f9 ff ff       	jmp    c002735b <__adddf3>

c00279c7 <__negdf2>:
c00279c7:	55                   	push   ebp
c00279c8:	89 e5                	mov    ebp,esp
c00279ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00279cd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00279d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279d6:	5d                   	pop    ebp
c00279d7:	c3                   	ret    

c00279d8 <__muldf3>:
c00279d8:	55                   	push   ebp
c00279d9:	89 e5                	mov    ebp,esp
c00279db:	57                   	push   edi
c00279dc:	56                   	push   esi
c00279dd:	53                   	push   ebx
c00279de:	83 ec 24             	sub    esp,0x24
c00279e1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00279e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00279f0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00279f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279f6:	89 c8                	mov    eax,ecx
c00279f8:	c1 f8 14             	sar    eax,0x14
c00279fb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279fe:	89 f8                	mov    eax,edi
c0027a00:	89 fb                	mov    ebx,edi
c0027a02:	c1 e3 0b             	shl    ebx,0xb
c0027a05:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027a08:	c1 e1 0b             	shl    ecx,0xb
c0027a0b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a11:	c1 e8 15             	shr    eax,0x15
c0027a14:	09 c1                	or     ecx,eax
c0027a16:	89 d6                	mov    esi,edx
c0027a18:	89 d0                	mov    eax,edx
c0027a1a:	c1 f8 14             	sar    eax,0x14
c0027a1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027a20:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027a23:	89 c3                	mov    ebx,eax
c0027a25:	c1 e3 0b             	shl    ebx,0xb
c0027a28:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027a2b:	c1 e6 0b             	shl    esi,0xb
c0027a2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a34:	c1 e8 15             	shr    eax,0x15
c0027a37:	09 c6                	or     esi,eax
c0027a39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027a41:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a44:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a47:	25 ff 07 00 00       	and    eax,0x7ff
c0027a4c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a4f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a52:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a55:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027a5c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a5f:	40                   	inc    eax
c0027a60:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a65:	0f 85 8d 00 00 00    	jne    c0027af8 <__muldf3+0x120>
c0027a6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a6e:	09 c8                	or     eax,ecx
c0027a70:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027a74:	74 44                	je     c0027aba <__muldf3+0xe2>
c0027a76:	85 c0                	test   eax,eax
c0027a78:	0f 85 31 02 00 00    	jne    c0027caf <__muldf3+0x2d7>
c0027a7e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a81:	40                   	inc    eax
c0027a82:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a87:	75 13                	jne    c0027a9c <__muldf3+0xc4>
c0027a89:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a8c:	09 f1                	or     ecx,esi
c0027a8e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a92:	74 22                	je     c0027ab6 <__muldf3+0xde>
c0027a94:	85 c9                	test   ecx,ecx
c0027a96:	0f 85 0d 02 00 00    	jne    c0027ca9 <__muldf3+0x2d1>
c0027a9c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027aa0:	0f 89 09 02 00 00    	jns    c0027caf <__muldf3+0x2d7>
c0027aa6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aa9:	05 00 00 00 80       	add    eax,0x80000000
c0027aae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ab1:	e9 f9 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027ab6:	85 c9                	test   ecx,ecx
c0027ab8:	eb 2e                	jmp    c0027ae8 <__muldf3+0x110>
c0027aba:	85 c0                	test   eax,eax
c0027abc:	74 20                	je     c0027ade <__muldf3+0x106>
c0027abe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ac1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ac4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ac7:	c1 ef 1f             	shr    edi,0x1f
c0027aca:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027acd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ad0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ad3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ad6:	09 f9                	or     ecx,edi
c0027ad8:	78 1e                	js     c0027af8 <__muldf3+0x120>
c0027ada:	89 c3                	mov    ebx,eax
c0027adc:	eb e0                	jmp    c0027abe <__muldf3+0xe6>
c0027ade:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ae1:	f7 d0                	not    eax
c0027ae3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027ae8:	75 b2                	jne    c0027a9c <__muldf3+0xc4>
c0027aea:	31 ff                	xor    edi,edi
c0027aec:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027af3:	e9 b7 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027af8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027afb:	40                   	inc    eax
c0027afc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b01:	75 57                	jne    c0027b5a <__muldf3+0x182>
c0027b03:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027b06:	09 f0                	or     eax,esi
c0027b08:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b0c:	74 23                	je     c0027b31 <__muldf3+0x159>
c0027b0e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b12:	0f 89 91 01 00 00    	jns    c0027ca9 <__muldf3+0x2d1>
c0027b18:	85 c0                	test   eax,eax
c0027b1a:	0f 85 89 01 00 00    	jne    c0027ca9 <__muldf3+0x2d1>
c0027b20:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b23:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027b29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b2c:	e9 7e 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027b31:	85 c0                	test   eax,eax
c0027b33:	75 0c                	jne    c0027b41 <__muldf3+0x169>
c0027b35:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b39:	0f 89 6a 01 00 00    	jns    c0027ca9 <__muldf3+0x2d1>
c0027b3f:	eb df                	jmp    c0027b20 <__muldf3+0x148>
c0027b41:	01 f6                	add    esi,esi
c0027b43:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b46:	c1 ea 1f             	shr    edx,0x1f
c0027b49:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b4c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027b4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b52:	09 d6                	or     esi,edx
c0027b54:	78 04                	js     c0027b5a <__muldf3+0x182>
c0027b56:	89 c3                	mov    ebx,eax
c0027b58:	eb e7                	jmp    c0027b41 <__muldf3+0x169>
c0027b5a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027b60:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b66:	89 c8                	mov    eax,ecx
c0027b68:	f7 e6                	mul    esi
c0027b6a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027b6d:	89 c7                	mov    edi,eax
c0027b6f:	89 c8                	mov    eax,ecx
c0027b71:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b74:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027b77:	89 c1                	mov    ecx,eax
c0027b79:	89 f0                	mov    eax,esi
c0027b7b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027b7e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027b81:	89 c6                	mov    esi,eax
c0027b83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b86:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b89:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b8c:	31 c0                	xor    eax,eax
c0027b8e:	01 f1                	add    ecx,esi
c0027b90:	0f 92 c0             	setb   al
c0027b93:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027b96:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b99:	83 d6 00             	adc    esi,0x0
c0027b9c:	01 c7                	add    edi,eax
c0027b9e:	83 d6 00             	adc    esi,0x0
c0027ba1:	01 ca                	add    edx,ecx
c0027ba3:	0f 92 c1             	setb   cl
c0027ba6:	0f b6 c9             	movzx  ecx,cl
c0027ba9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027bac:	83 d6 00             	adc    esi,0x0
c0027baf:	01 cf                	add    edi,ecx
c0027bb1:	83 d6 00             	adc    esi,0x0
c0027bb4:	31 c9                	xor    ecx,ecx
c0027bb6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027bb9:	0f 95 c1             	setne  cl
c0027bbc:	09 cf                	or     edi,ecx
c0027bbe:	85 f6                	test   esi,esi
c0027bc0:	78 0c                	js     c0027bce <__muldf3+0x1f6>
c0027bc2:	01 f6                	add    esi,esi
c0027bc4:	89 f8                	mov    eax,edi
c0027bc6:	c1 e8 1f             	shr    eax,0x1f
c0027bc9:	09 c6                	or     esi,eax
c0027bcb:	01 ff                	add    edi,edi
c0027bcd:	4b                   	dec    ebx
c0027bce:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027bd4:	0f 8f 85 00 00 00    	jg     c0027c5f <__muldf3+0x287>
c0027bda:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027be0:	85 db                	test   ebx,ebx
c0027be2:	0f 8f 84 00 00 00    	jg     c0027c6c <__muldf3+0x294>
c0027be8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027beb:	7c 79                	jl     c0027c66 <__muldf3+0x28e>
c0027bed:	ba 01 00 00 00       	mov    edx,0x1
c0027bf2:	29 da                	sub    edx,ebx
c0027bf4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bfa:	83 fa 1f             	cmp    edx,0x1f
c0027bfd:	7e 30                	jle    c0027c2f <__muldf3+0x257>
c0027bff:	83 fa 20             	cmp    edx,0x20
c0027c02:	75 0b                	jne    c0027c0f <__muldf3+0x237>
c0027c04:	31 c0                	xor    eax,eax
c0027c06:	85 ff                	test   edi,edi
c0027c08:	0f 95 c0             	setne  al
c0027c0b:	89 c7                	mov    edi,eax
c0027c0d:	eb 1a                	jmp    c0027c29 <__muldf3+0x251>
c0027c0f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027c12:	89 f0                	mov    eax,esi
c0027c14:	d3 e0                	shl    eax,cl
c0027c16:	09 f8                	or     eax,edi
c0027c18:	0f 95 c0             	setne  al
c0027c1b:	0f b6 c0             	movzx  eax,al
c0027c1e:	89 c7                	mov    edi,eax
c0027c20:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027c25:	29 d9                	sub    ecx,ebx
c0027c27:	d3 ee                	shr    esi,cl
c0027c29:	09 f7                	or     edi,esi
c0027c2b:	31 db                	xor    ebx,ebx
c0027c2d:	eb 3b                	jmp    c0027c6a <__muldf3+0x292>
c0027c2f:	83 c3 1f             	add    ebx,0x1f
c0027c32:	89 f0                	mov    eax,esi
c0027c34:	88 d9                	mov    cl,bl
c0027c36:	d3 e0                	shl    eax,cl
c0027c38:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c3b:	89 f8                	mov    eax,edi
c0027c3d:	88 d1                	mov    cl,dl
c0027c3f:	d3 e8                	shr    eax,cl
c0027c41:	89 c1                	mov    ecx,eax
c0027c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c46:	09 c8                	or     eax,ecx
c0027c48:	88 d9                	mov    cl,bl
c0027c4a:	d3 e7                	shl    edi,cl
c0027c4c:	31 db                	xor    ebx,ebx
c0027c4e:	85 ff                	test   edi,edi
c0027c50:	0f 95 c3             	setne  bl
c0027c53:	89 df                	mov    edi,ebx
c0027c55:	09 c7                	or     edi,eax
c0027c57:	88 d1                	mov    cl,dl
c0027c59:	d3 ee                	shr    esi,cl
c0027c5b:	31 db                	xor    ebx,ebx
c0027c5d:	eb 0d                	jmp    c0027c6c <__muldf3+0x294>
c0027c5f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027c64:	eb 02                	jmp    c0027c68 <__muldf3+0x290>
c0027c66:	31 db                	xor    ebx,ebx
c0027c68:	31 ff                	xor    edi,edi
c0027c6a:	31 f6                	xor    esi,esi
c0027c6c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c6f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027c72:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c77:	09 c3                	or     ebx,eax
c0027c79:	c1 e3 14             	shl    ebx,0x14
c0027c7c:	89 f0                	mov    eax,esi
c0027c7e:	c1 e8 0b             	shr    eax,0xb
c0027c81:	09 c3                	or     ebx,eax
c0027c83:	89 f8                	mov    eax,edi
c0027c85:	c1 e8 0b             	shr    eax,0xb
c0027c88:	c1 e6 15             	shl    esi,0x15
c0027c8b:	09 c6                	or     esi,eax
c0027c8d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027c93:	0f 95 c1             	setne  cl
c0027c96:	09 c8                	or     eax,ecx
c0027c98:	83 e0 01             	and    eax,0x1
c0027c9b:	c1 ef 0a             	shr    edi,0xa
c0027c9e:	21 c7                	and    edi,eax
c0027ca0:	01 f7                	add    edi,esi
c0027ca2:	83 d3 00             	adc    ebx,0x0
c0027ca5:	89 da                	mov    edx,ebx
c0027ca7:	eb 03                	jmp    c0027cac <__muldf3+0x2d4>
c0027ca9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027caf:	89 f8                	mov    eax,edi
c0027cb1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027cb4:	83 c4 24             	add    esp,0x24
c0027cb7:	5b                   	pop    ebx
c0027cb8:	5e                   	pop    esi
c0027cb9:	5f                   	pop    edi
c0027cba:	5d                   	pop    ebp
c0027cbb:	c3                   	ret    

c0027cbc <__divdf3>:
c0027cbc:	55                   	push   ebp
c0027cbd:	89 e5                	mov    ebp,esp
c0027cbf:	57                   	push   edi
c0027cc0:	56                   	push   esi
c0027cc1:	53                   	push   ebx
c0027cc2:	83 ec 2c             	sub    esp,0x2c
c0027cc5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cc8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ccb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cce:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cd1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027cd4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cd7:	89 ce                	mov    esi,ecx
c0027cd9:	89 c8                	mov    eax,ecx
c0027cdb:	c1 f8 14             	sar    eax,0x14
c0027cde:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ce1:	89 f8                	mov    eax,edi
c0027ce3:	89 fb                	mov    ebx,edi
c0027ce5:	c1 e3 0b             	shl    ebx,0xb
c0027ce8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ceb:	c1 e6 0b             	shl    esi,0xb
c0027cee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cf4:	c1 e8 15             	shr    eax,0x15
c0027cf7:	09 c6                	or     esi,eax
c0027cf9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027cfc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cff:	89 c2                	mov    edx,eax
c0027d01:	c1 fa 14             	sar    edx,0x14
c0027d04:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d07:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d0a:	89 de                	mov    esi,ebx
c0027d0c:	c1 e6 0b             	shl    esi,0xb
c0027d0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d12:	c1 e0 0b             	shl    eax,0xb
c0027d15:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d1a:	c1 eb 15             	shr    ebx,0x15
c0027d1d:	09 d8                	or     eax,ebx
c0027d1f:	89 c2                	mov    edx,eax
c0027d21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d24:	25 ff 07 00 00       	and    eax,0x7ff
c0027d29:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027d2c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d2f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d35:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027d38:	29 d8                	sub    eax,ebx
c0027d3a:	05 ff 03 00 00       	add    eax,0x3ff
c0027d3f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d42:	46                   	inc    esi
c0027d43:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027d49:	0f 85 a5 00 00 00    	jne    c0027df4 <__divdf3+0x138>
c0027d4f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d52:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027d55:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027d59:	74 2a                	je     c0027d85 <__divdf3+0xc9>
c0027d5b:	85 f6                	test   esi,esi
c0027d5d:	0f 85 cc 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027d63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d66:	40                   	inc    eax
c0027d67:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d6c:	75 26                	jne    c0027d94 <__divdf3+0xd8>
c0027d6e:	85 db                	test   ebx,ebx
c0027d70:	74 22                	je     c0027d94 <__divdf3+0xd8>
c0027d72:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d75:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d7b:	09 d0                	or     eax,edx
c0027d7d:	0f 85 ac 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027d83:	eb 63                	jmp    c0027de8 <__divdf3+0x12c>
c0027d85:	85 f6                	test   esi,esi
c0027d87:	75 22                	jne    c0027dab <__divdf3+0xef>
c0027d89:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d8c:	40                   	inc    eax
c0027d8d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d92:	74 36                	je     c0027dca <__divdf3+0x10e>
c0027d94:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d98:	0f 89 91 02 00 00    	jns    c002802f <__divdf3+0x373>
c0027d9e:	89 f8                	mov    eax,edi
c0027da0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027da6:	e9 80 02 00 00       	jmp    c002802b <__divdf3+0x36f>
c0027dab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dae:	01 f6                	add    esi,esi
c0027db0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027db3:	c1 ef 1f             	shr    edi,0x1f
c0027db6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027db9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027dbc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027dbf:	09 f7                	or     edi,esi
c0027dc1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027dc4:	78 2e                	js     c0027df4 <__divdf3+0x138>
c0027dc6:	89 c8                	mov    eax,ecx
c0027dc8:	eb e1                	jmp    c0027dab <__divdf3+0xef>
c0027dca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dcd:	09 d0                	or     eax,edx
c0027dcf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027dd3:	74 0f                	je     c0027de4 <__divdf3+0x128>
c0027dd5:	85 c0                	test   eax,eax
c0027dd7:	74 bb                	je     c0027d94 <__divdf3+0xd8>
c0027dd9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ddc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ddf:	e9 4b 02 00 00       	jmp    c002802f <__divdf3+0x373>
c0027de4:	85 c0                	test   eax,eax
c0027de6:	75 ac                	jne    c0027d94 <__divdf3+0xd8>
c0027de8:	31 ff                	xor    edi,edi
c0027dea:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027def:	e9 3b 02 00 00       	jmp    c002802f <__divdf3+0x373>
c0027df4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027df7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027dfa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027e00:	75 6b                	jne    c0027e6d <__divdf3+0x1b1>
c0027e02:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e05:	09 d6                	or     esi,edx
c0027e07:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e0b:	74 28                	je     c0027e35 <__divdf3+0x179>
c0027e0d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e10:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e13:	85 f6                	test   esi,esi
c0027e15:	0f 85 14 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027e1b:	31 ff                	xor    edi,edi
c0027e1d:	31 c9                	xor    ecx,ecx
c0027e1f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e22:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e25:	0f 89 04 02 00 00    	jns    c002802f <__divdf3+0x373>
c0027e2b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027e30:	e9 fa 01 00 00       	jmp    c002802f <__divdf3+0x373>
c0027e35:	85 f6                	test   esi,esi
c0027e37:	75 1b                	jne    c0027e54 <__divdf3+0x198>
c0027e39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e3c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e3f:	25 00 00 00 80       	and    eax,0x80000000
c0027e44:	31 c9                	xor    ecx,ecx
c0027e46:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027e4b:	89 cf                	mov    edi,ecx
c0027e4d:	89 c1                	mov    ecx,eax
c0027e4f:	e9 db 01 00 00       	jmp    c002802f <__divdf3+0x373>
c0027e54:	01 d2                	add    edx,edx
c0027e56:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e59:	c1 eb 1f             	shr    ebx,0x1f
c0027e5c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e5f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027e62:	8d 48 01             	lea    ecx,[eax+0x1]
c0027e65:	09 da                	or     edx,ebx
c0027e67:	78 04                	js     c0027e6d <__divdf3+0x1b1>
c0027e69:	89 c8                	mov    eax,ecx
c0027e6b:	eb e7                	jmp    c0027e54 <__divdf3+0x198>
c0027e6d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e70:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e76:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e7c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027e7f:	39 d6                	cmp    esi,edx
c0027e81:	77 0d                	ja     c0027e90 <__divdf3+0x1d4>
c0027e83:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027e86:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027e89:	72 1b                	jb     c0027ea6 <__divdf3+0x1ea>
c0027e8b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027e8e:	75 16                	jne    c0027ea6 <__divdf3+0x1ea>
c0027e90:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e93:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e96:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027e99:	83 de 00             	sbb    esi,0x0
c0027e9c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027e9f:	ba 01 00 00 00       	mov    edx,0x1
c0027ea4:	eb 02                	jmp    c0027ea8 <__divdf3+0x1ec>
c0027ea6:	31 d2                	xor    edx,edx
c0027ea8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027eaf:	31 ff                	xor    edi,edi
c0027eb1:	01 ff                	add    edi,edi
c0027eb3:	89 d1                	mov    ecx,edx
c0027eb5:	c1 e9 1f             	shr    ecx,0x1f
c0027eb8:	09 cf                	or     edi,ecx
c0027eba:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ebd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027ec0:	89 da                	mov    edx,ebx
c0027ec2:	89 f3                	mov    ebx,esi
c0027ec4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027ec7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027eca:	c1 e9 1f             	shr    ecx,0x1f
c0027ecd:	09 ce                	or     esi,ecx
c0027ecf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ed2:	01 c9                	add    ecx,ecx
c0027ed4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027ed7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027eda:	85 db                	test   ebx,ebx
c0027edc:	78 29                	js     c0027f07 <__divdf3+0x24b>
c0027ede:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027ee1:	72 07                	jb     c0027eea <__divdf3+0x22e>
c0027ee3:	75 3c                	jne    c0027f21 <__divdf3+0x265>
c0027ee5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ee8:	77 37                	ja     c0027f21 <__divdf3+0x265>
c0027eea:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027eed:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027ef0:	31 d2                	xor    edx,edx
c0027ef2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027ef5:	0f 97 c2             	seta   dl
c0027ef8:	29 d6                	sub    esi,edx
c0027efa:	89 d9                	mov    ecx,ebx
c0027efc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027eff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f02:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027f05:	eb 17                	jmp    c0027f1e <__divdf3+0x262>
c0027f07:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f0a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f10:	0f 97 c1             	seta   cl
c0027f13:	0f b6 c9             	movzx  ecx,cl
c0027f16:	29 ce                	sub    esi,ecx
c0027f18:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027f1b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027f1e:	83 ca 01             	or     edx,0x1
c0027f21:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027f24:	75 8b                	jne    c0027eb1 <__divdf3+0x1f5>
c0027f26:	c1 e7 09             	shl    edi,0x9
c0027f29:	89 d1                	mov    ecx,edx
c0027f2b:	c1 e9 17             	shr    ecx,0x17
c0027f2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f31:	09 f3                	or     ebx,esi
c0027f33:	0f 95 c3             	setne  bl
c0027f36:	0f b6 db             	movzx  ebx,bl
c0027f39:	c1 e2 09             	shl    edx,0x9
c0027f3c:	09 d3                	or     ebx,edx
c0027f3e:	89 ca                	mov    edx,ecx
c0027f40:	09 fa                	or     edx,edi
c0027f42:	78 0c                	js     c0027f50 <__divdf3+0x294>
c0027f44:	01 d2                	add    edx,edx
c0027f46:	89 d9                	mov    ecx,ebx
c0027f48:	c1 e9 1f             	shr    ecx,0x1f
c0027f4b:	09 ca                	or     edx,ecx
c0027f4d:	01 db                	add    ebx,ebx
c0027f4f:	48                   	dec    eax
c0027f50:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027f55:	0f 8f 83 00 00 00    	jg     c0027fde <__divdf3+0x322>
c0027f5b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027f61:	85 c0                	test   eax,eax
c0027f63:	0f 8f 82 00 00 00    	jg     c0027feb <__divdf3+0x32f>
c0027f69:	83 f8 cc             	cmp    eax,0xffffffcc
c0027f6c:	7c 77                	jl     c0027fe5 <__divdf3+0x329>
c0027f6e:	be 01 00 00 00       	mov    esi,0x1
c0027f73:	29 c6                	sub    esi,eax
c0027f75:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f7b:	83 fe 1f             	cmp    esi,0x1f
c0027f7e:	7e 2f                	jle    c0027faf <__divdf3+0x2f3>
c0027f80:	83 fe 20             	cmp    esi,0x20
c0027f83:	75 0a                	jne    c0027f8f <__divdf3+0x2d3>
c0027f85:	85 db                	test   ebx,ebx
c0027f87:	0f 95 c3             	setne  bl
c0027f8a:	0f b6 db             	movzx  ebx,bl
c0027f8d:	eb 1a                	jmp    c0027fa9 <__divdf3+0x2ed>
c0027f8f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027f92:	89 d7                	mov    edi,edx
c0027f94:	d3 e7                	shl    edi,cl
c0027f96:	89 f9                	mov    ecx,edi
c0027f98:	09 d9                	or     ecx,ebx
c0027f9a:	0f 95 c3             	setne  bl
c0027f9d:	0f b6 db             	movzx  ebx,bl
c0027fa0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027fa5:	29 c1                	sub    ecx,eax
c0027fa7:	d3 ea                	shr    edx,cl
c0027fa9:	09 d3                	or     ebx,edx
c0027fab:	31 c0                	xor    eax,eax
c0027fad:	eb 3a                	jmp    c0027fe9 <__divdf3+0x32d>
c0027faf:	83 c0 1f             	add    eax,0x1f
c0027fb2:	89 d7                	mov    edi,edx
c0027fb4:	88 c1                	mov    cl,al
c0027fb6:	d3 e7                	shl    edi,cl
c0027fb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fbb:	89 df                	mov    edi,ebx
c0027fbd:	89 f1                	mov    ecx,esi
c0027fbf:	d3 ef                	shr    edi,cl
c0027fc1:	89 f9                	mov    ecx,edi
c0027fc3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fc6:	09 cf                	or     edi,ecx
c0027fc8:	88 c1                	mov    cl,al
c0027fca:	d3 e3                	shl    ebx,cl
c0027fcc:	85 db                	test   ebx,ebx
c0027fce:	0f 95 c3             	setne  bl
c0027fd1:	0f b6 db             	movzx  ebx,bl
c0027fd4:	09 fb                	or     ebx,edi
c0027fd6:	89 f1                	mov    ecx,esi
c0027fd8:	d3 ea                	shr    edx,cl
c0027fda:	31 c0                	xor    eax,eax
c0027fdc:	eb 0d                	jmp    c0027feb <__divdf3+0x32f>
c0027fde:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027fe3:	eb 02                	jmp    c0027fe7 <__divdf3+0x32b>
c0027fe5:	31 c0                	xor    eax,eax
c0027fe7:	31 db                	xor    ebx,ebx
c0027fe9:	31 d2                	xor    edx,edx
c0027feb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027fee:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027ff1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027ff7:	09 c8                	or     eax,ecx
c0027ff9:	c1 e0 14             	shl    eax,0x14
c0027ffc:	89 d1                	mov    ecx,edx
c0027ffe:	c1 e9 0b             	shr    ecx,0xb
c0028001:	09 c8                	or     eax,ecx
c0028003:	89 c6                	mov    esi,eax
c0028005:	89 d9                	mov    ecx,ebx
c0028007:	c1 e9 0b             	shr    ecx,0xb
c002800a:	c1 e2 15             	shl    edx,0x15
c002800d:	09 ca                	or     edx,ecx
c002800f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028015:	0f 95 c0             	setne  al
c0028018:	09 c1                	or     ecx,eax
c002801a:	83 e1 01             	and    ecx,0x1
c002801d:	c1 eb 0a             	shr    ebx,0xa
c0028020:	21 cb                	and    ebx,ecx
c0028022:	01 d3                	add    ebx,edx
c0028024:	89 d8                	mov    eax,ebx
c0028026:	83 d6 00             	adc    esi,0x0
c0028029:	89 f2                	mov    edx,esi
c002802b:	89 c7                	mov    edi,eax
c002802d:	89 d1                	mov    ecx,edx
c002802f:	89 f8                	mov    eax,edi
c0028031:	89 ca                	mov    edx,ecx
c0028033:	83 c4 2c             	add    esp,0x2c
c0028036:	5b                   	pop    ebx
c0028037:	5e                   	pop    esi
c0028038:	5f                   	pop    edi
c0028039:	5d                   	pop    ebp
c002803a:	c3                   	ret    

c002803b <__floatsidf>:
c002803b:	55                   	push   ebp
c002803c:	89 e5                	mov    ebp,esp
c002803e:	56                   	push   esi
c002803f:	53                   	push   ebx
c0028040:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028043:	85 db                	test   ebx,ebx
c0028045:	7e 15                	jle    c002805c <__floatsidf+0x21>
c0028047:	0f bd cb             	bsr    ecx,ebx
c002804a:	83 f1 1f             	xor    ecx,0x1f
c002804d:	d3 e3                	shl    ebx,cl
c002804f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028055:	b8 1e 04 00 00       	mov    eax,0x41e
c002805a:	eb 21                	jmp    c002807d <__floatsidf+0x42>
c002805c:	b8 00 00 00 00       	mov    eax,0x0
c0028061:	ba 00 00 00 00       	mov    edx,0x0
c0028066:	74 2a                	je     c0028092 <__floatsidf+0x57>
c0028068:	f7 db                	neg    ebx
c002806a:	0f bd cb             	bsr    ecx,ebx
c002806d:	83 f1 1f             	xor    ecx,0x1f
c0028070:	d3 e3                	shl    ebx,cl
c0028072:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028078:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002807d:	29 c8                	sub    eax,ecx
c002807f:	c1 e0 14             	shl    eax,0x14
c0028082:	89 c1                	mov    ecx,eax
c0028084:	89 de                	mov    esi,ebx
c0028086:	c1 ee 0b             	shr    esi,0xb
c0028089:	09 f1                	or     ecx,esi
c002808b:	89 ca                	mov    edx,ecx
c002808d:	c1 e3 15             	shl    ebx,0x15
c0028090:	89 d8                	mov    eax,ebx
c0028092:	5b                   	pop    ebx
c0028093:	5e                   	pop    esi
c0028094:	5d                   	pop    ebp
c0028095:	c3                   	ret    

c0028096 <__floatunsidf>:
c0028096:	55                   	push   ebp
c0028097:	89 e5                	mov    ebp,esp
c0028099:	56                   	push   esi
c002809a:	53                   	push   ebx
c002809b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002809e:	85 db                	test   ebx,ebx
c00280a0:	74 2a                	je     c00280cc <__floatunsidf+0x36>
c00280a2:	0f bd cb             	bsr    ecx,ebx
c00280a5:	83 f1 1f             	xor    ecx,0x1f
c00280a8:	d3 e3                	shl    ebx,cl
c00280aa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280b0:	b8 1e 04 00 00       	mov    eax,0x41e
c00280b5:	29 c8                	sub    eax,ecx
c00280b7:	c1 e0 14             	shl    eax,0x14
c00280ba:	89 c1                	mov    ecx,eax
c00280bc:	89 de                	mov    esi,ebx
c00280be:	c1 ee 0b             	shr    esi,0xb
c00280c1:	09 f1                	or     ecx,esi
c00280c3:	89 ca                	mov    edx,ecx
c00280c5:	c1 e3 15             	shl    ebx,0x15
c00280c8:	89 d8                	mov    eax,ebx
c00280ca:	eb 04                	jmp    c00280d0 <__floatunsidf+0x3a>
c00280cc:	31 c0                	xor    eax,eax
c00280ce:	31 d2                	xor    edx,edx
c00280d0:	5b                   	pop    ebx
c00280d1:	5e                   	pop    esi
c00280d2:	5d                   	pop    ebp
c00280d3:	c3                   	ret    

c00280d4 <__fixdfsi>:
c00280d4:	55                   	push   ebp
c00280d5:	89 e5                	mov    ebp,esp
c00280d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280da:	89 d1                	mov    ecx,edx
c00280dc:	c1 e1 0b             	shl    ecx,0xb
c00280df:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00280e8:	c1 e8 15             	shr    eax,0x15
c00280eb:	09 c1                	or     ecx,eax
c00280ed:	c1 fa 14             	sar    edx,0x14
c00280f0:	78 1f                	js     c0028111 <__fixdfsi+0x3d>
c00280f2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00280f8:	31 c0                	xor    eax,eax
c00280fa:	83 fa 1e             	cmp    edx,0x1e
c00280fd:	77 40                	ja     c002813f <__fixdfsi+0x6b>
c00280ff:	89 c8                	mov    eax,ecx
c0028101:	0d 00 00 00 80       	or     eax,0x80000000
c0028106:	b9 1f 00 00 00       	mov    ecx,0x1f
c002810b:	29 d1                	sub    ecx,edx
c002810d:	d3 e8                	shr    eax,cl
c002810f:	eb 2e                	jmp    c002813f <__fixdfsi+0x6b>
c0028111:	31 c0                	xor    eax,eax
c0028113:	81 c2 01 04 00 00    	add    edx,0x401
c0028119:	78 24                	js     c002813f <__fixdfsi+0x6b>
c002811b:	83 fa 1e             	cmp    edx,0x1e
c002811e:	7e 09                	jle    c0028129 <__fixdfsi+0x55>
c0028120:	83 fa 1f             	cmp    edx,0x1f
c0028123:	75 18                	jne    c002813d <__fixdfsi+0x69>
c0028125:	85 c9                	test   ecx,ecx
c0028127:	75 14                	jne    c002813d <__fixdfsi+0x69>
c0028129:	89 c8                	mov    eax,ecx
c002812b:	0d 00 00 00 80       	or     eax,0x80000000
c0028130:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028135:	29 d1                	sub    ecx,edx
c0028137:	d3 e8                	shr    eax,cl
c0028139:	f7 d8                	neg    eax
c002813b:	eb 02                	jmp    c002813f <__fixdfsi+0x6b>
c002813d:	31 c0                	xor    eax,eax
c002813f:	5d                   	pop    ebp
c0028140:	c3                   	ret    

c0028141 <__fixunsdfsi>:
c0028141:	55                   	push   ebp
c0028142:	89 e5                	mov    ebp,esp
c0028144:	53                   	push   ebx
c0028145:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028148:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002814b:	89 d3                	mov    ebx,edx
c002814d:	c1 fb 14             	sar    ebx,0x14
c0028150:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028156:	31 c0                	xor    eax,eax
c0028158:	83 fb 1f             	cmp    ebx,0x1f
c002815b:	77 1d                	ja     c002817a <__fixunsdfsi+0x39>
c002815d:	89 d0                	mov    eax,edx
c002815f:	c1 e0 0b             	shl    eax,0xb
c0028162:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028167:	c1 e9 15             	shr    ecx,0x15
c002816a:	09 c8                	or     eax,ecx
c002816c:	0d 00 00 00 80       	or     eax,0x80000000
c0028171:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028176:	29 d9                	sub    ecx,ebx
c0028178:	d3 e8                	shr    eax,cl
c002817a:	5b                   	pop    ebx
c002817b:	5d                   	pop    ebp
c002817c:	c3                   	ret    

c002817d <__cmpdf2>:
c002817d:	55                   	push   ebp
c002817e:	89 e5                	mov    ebp,esp
c0028180:	57                   	push   edi
c0028181:	56                   	push   esi
c0028182:	53                   	push   ebx
c0028183:	83 ec 0c             	sub    esp,0xc
c0028186:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028189:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002818c:	89 ca                	mov    edx,ecx
c002818e:	c1 ea 14             	shr    edx,0x14
c0028191:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028197:	89 cb                	mov    ebx,ecx
c0028199:	c1 fb 1f             	sar    ebx,0x1f
c002819c:	31 da                	xor    edx,ebx
c002819e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281a1:	89 df                	mov    edi,ebx
c00281a3:	c1 e7 0b             	shl    edi,0xb
c00281a6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281a9:	c1 e1 0b             	shl    ecx,0xb
c00281ac:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281b2:	c1 eb 15             	shr    ebx,0x15
c00281b5:	09 d9                	or     ecx,ebx
c00281b7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00281ba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00281bd:	89 ce                	mov    esi,ecx
c00281bf:	c1 ee 14             	shr    esi,0x14
c00281c2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281c8:	89 cb                	mov    ebx,ecx
c00281ca:	c1 fb 1f             	sar    ebx,0x1f
c00281cd:	31 de                	xor    esi,ebx
c00281cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00281d2:	89 df                	mov    edi,ebx
c00281d4:	c1 e7 0b             	shl    edi,0xb
c00281d7:	c1 e1 0b             	shl    ecx,0xb
c00281da:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281e0:	c1 eb 15             	shr    ebx,0x15
c00281e3:	09 d9                	or     ecx,ebx
c00281e5:	89 d3                	mov    ebx,edx
c00281e7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00281ed:	43                   	inc    ebx
c00281ee:	83 fb 01             	cmp    ebx,0x1
c00281f1:	77 08                	ja     c00281fb <__cmpdf2+0x7e>
c00281f3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281f9:	75 68                	jne    c0028263 <__cmpdf2+0xe6>
c00281fb:	89 f3                	mov    ebx,esi
c00281fd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028203:	43                   	inc    ebx
c0028204:	83 fb 01             	cmp    ebx,0x1
c0028207:	77 06                	ja     c002820f <__cmpdf2+0x92>
c0028209:	89 fb                	mov    ebx,edi
c002820b:	09 cb                	or     ebx,ecx
c002820d:	75 54                	jne    c0028263 <__cmpdf2+0xe6>
c002820f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028212:	09 f8                	or     eax,edi
c0028214:	09 c8                	or     eax,ecx
c0028216:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028219:	75 12                	jne    c002822d <__cmpdf2+0xb0>
c002821b:	8d 42 01             	lea    eax,[edx+0x1]
c002821e:	83 f8 01             	cmp    eax,0x1
c0028221:	77 0a                	ja     c002822d <__cmpdf2+0xb0>
c0028223:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028226:	31 c0                	xor    eax,eax
c0028228:	83 fb 01             	cmp    ebx,0x1
c002822b:	76 36                	jbe    c0028263 <__cmpdf2+0xe6>
c002822d:	b8 01 00 00 00       	mov    eax,0x1
c0028232:	39 f2                	cmp    edx,esi
c0028234:	7f 2d                	jg     c0028263 <__cmpdf2+0xe6>
c0028236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002823b:	7c 26                	jl     c0028263 <__cmpdf2+0xe6>
c002823d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028240:	77 07                	ja     c0028249 <__cmpdf2+0xcc>
c0028242:	72 16                	jb     c002825a <__cmpdf2+0xdd>
c0028244:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028247:	76 0a                	jbe    c0028253 <__cmpdf2+0xd6>
c0028249:	89 d0                	mov    eax,edx
c002824b:	c1 f8 1f             	sar    eax,0x1f
c002824e:	83 c8 01             	or     eax,0x1
c0028251:	eb 10                	jmp    c0028263 <__cmpdf2+0xe6>
c0028253:	b8 00 00 00 00       	mov    eax,0x0
c0028258:	73 09                	jae    c0028263 <__cmpdf2+0xe6>
c002825a:	89 d0                	mov    eax,edx
c002825c:	c1 f8 1f             	sar    eax,0x1f
c002825f:	83 e0 02             	and    eax,0x2
c0028262:	48                   	dec    eax
c0028263:	83 c4 0c             	add    esp,0xc
c0028266:	5b                   	pop    ebx
c0028267:	5e                   	pop    esi
c0028268:	5f                   	pop    edi
c0028269:	5d                   	pop    ebp
c002826a:	c3                   	ret    

c002826b <__eqdf2>:
c002826b:	55                   	push   ebp
c002826c:	89 e5                	mov    ebp,esp
c002826e:	50                   	push   eax
c002826f:	6a 01                	push   0x1
c0028271:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028274:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028277:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002827a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002827d:	e8 fb fe ff ff       	call   c002817d <__cmpdf2>
c0028282:	83 c4 18             	add    esp,0x18
c0028285:	c9                   	leave  
c0028286:	c3                   	ret    

c0028287 <__nedf2>:
c0028287:	eb e2                	jmp    c002826b <__eqdf2>

c0028289 <__gtdf2>:
c0028289:	55                   	push   ebp
c002828a:	89 e5                	mov    ebp,esp
c002828c:	50                   	push   eax
c002828d:	6a ff                	push   0xffffffff
c002828f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028292:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028295:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028298:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002829b:	e8 dd fe ff ff       	call   c002817d <__cmpdf2>
c00282a0:	83 c4 18             	add    esp,0x18
c00282a3:	c9                   	leave  
c00282a4:	c3                   	ret    

c00282a5 <__gedf2>:
c00282a5:	eb e2                	jmp    c0028289 <__gtdf2>

c00282a7 <__ltdf2>:
c00282a7:	eb c2                	jmp    c002826b <__eqdf2>

c00282a9 <__ledf2>:
c00282a9:	eb c0                	jmp    c002826b <__eqdf2>

c00282ab <__truncdfsf2>:
c00282ab:	55                   	push   ebp
c00282ac:	89 e5                	mov    ebp,esp
c00282ae:	57                   	push   edi
c00282af:	56                   	push   esi
c00282b0:	53                   	push   ebx
c00282b1:	83 ec 0c             	sub    esp,0xc
c00282b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282b7:	89 d1                	mov    ecx,edx
c00282b9:	c1 f9 14             	sar    ecx,0x14
c00282bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282bf:	89 df                	mov    edi,ebx
c00282c1:	c1 e7 0b             	shl    edi,0xb
c00282c4:	89 d0                	mov    eax,edx
c00282c6:	c1 e0 0b             	shl    eax,0xb
c00282c9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ce:	c1 eb 15             	shr    ebx,0x15
c00282d1:	09 d8                	or     eax,ebx
c00282d3:	89 cb                	mov    ebx,ecx
c00282d5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282db:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00282e1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00282e7:	0f 86 9e 00 00 00    	jbe    c002838b <__truncdfsf2+0xe0>
c00282ed:	85 db                	test   ebx,ebx
c00282ef:	75 0a                	jne    c00282fb <__truncdfsf2+0x50>
c00282f1:	c1 fa 17             	sar    edx,0x17
c00282f4:	30 d2                	xor    dl,dl
c00282f6:	e9 84 00 00 00       	jmp    c002837f <__truncdfsf2+0xd4>
c00282fb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028301:	83 fe 83             	cmp    esi,0xffffff83
c0028304:	7d 4b                	jge    c0028351 <__truncdfsf2+0xa6>
c0028306:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002830b:	29 f1                	sub    ecx,esi
c002830d:	83 f9 1f             	cmp    ecx,0x1f
c0028310:	7f 6b                	jg     c002837d <__truncdfsf2+0xd2>
c0028312:	0d 00 00 00 80       	or     eax,0x80000000
c0028317:	89 c3                	mov    ebx,eax
c0028319:	d3 eb                	shr    ebx,cl
c002831b:	be 01 00 00 00       	mov    esi,0x1
c0028320:	d3 e6                	shl    esi,cl
c0028322:	4e                   	dec    esi
c0028323:	21 f0                	and    eax,esi
c0028325:	09 f8                	or     eax,edi
c0028327:	0f 95 c0             	setne  al
c002832a:	0f b6 c0             	movzx  eax,al
c002832d:	09 c3                	or     ebx,eax
c002832f:	89 d9                	mov    ecx,ebx
c0028331:	c1 e9 08             	shr    ecx,0x8
c0028334:	f6 c3 7f             	test   bl,0x7f
c0028337:	0f 95 c0             	setne  al
c002833a:	09 c8                	or     eax,ecx
c002833c:	83 e0 01             	and    eax,0x1
c002833f:	c1 eb 07             	shr    ebx,0x7
c0028342:	21 c3                	and    ebx,eax
c0028344:	81 e2 00 00 00 80    	and    edx,0x80000000
c002834a:	09 d1                	or     ecx,edx
c002834c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002834f:	eb 76                	jmp    c00283c7 <__truncdfsf2+0x11c>
c0028351:	83 c6 80             	add    esi,0xffffff80
c0028354:	7e 1d                	jle    c0028373 <__truncdfsf2+0xc8>
c0028356:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002835c:	75 0b                	jne    c0028369 <__truncdfsf2+0xbe>
c002835e:	09 f8                	or     eax,edi
c0028360:	74 09                	je     c002836b <__truncdfsf2+0xc0>
c0028362:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028367:	eb 02                	jmp    c002836b <__truncdfsf2+0xc0>
c0028369:	31 c0                	xor    eax,eax
c002836b:	c1 fa 17             	sar    edx,0x17
c002836e:	80 ca ff             	or     dl,0xff
c0028371:	eb 0e                	jmp    c0028381 <__truncdfsf2+0xd6>
c0028373:	c1 fa 1f             	sar    edx,0x1f
c0028376:	c1 e2 08             	shl    edx,0x8
c0028379:	09 ca                	or     edx,ecx
c002837b:	eb 04                	jmp    c0028381 <__truncdfsf2+0xd6>
c002837d:	31 d2                	xor    edx,edx
c002837f:	31 c0                	xor    eax,eax
c0028381:	c1 e2 17             	shl    edx,0x17
c0028384:	c1 e8 08             	shr    eax,0x8
c0028387:	09 d0                	or     eax,edx
c0028389:	eb 3c                	jmp    c00283c7 <__truncdfsf2+0x11c>
c002838b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028391:	89 ca                	mov    edx,ecx
c0028393:	c1 fa 0b             	sar    edx,0xb
c0028396:	c1 e2 08             	shl    edx,0x8
c0028399:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002839c:	31 db                	xor    ebx,ebx
c002839e:	85 ff                	test   edi,edi
c00283a0:	0f 95 c3             	setne  bl
c00283a3:	09 d8                	or     eax,ebx
c00283a5:	89 c3                	mov    ebx,eax
c00283a7:	c1 eb 08             	shr    ebx,0x8
c00283aa:	a8 7f                	test   al,0x7f
c00283ac:	0f 95 c2             	setne  dl
c00283af:	89 d6                	mov    esi,edx
c00283b1:	09 de                	or     esi,ebx
c00283b3:	83 e6 01             	and    esi,0x1
c00283b6:	c1 e8 07             	shr    eax,0x7
c00283b9:	21 f0                	and    eax,esi
c00283bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00283be:	09 ca                	or     edx,ecx
c00283c0:	c1 e2 17             	shl    edx,0x17
c00283c3:	09 da                	or     edx,ebx
c00283c5:	01 d0                	add    eax,edx
c00283c7:	83 c4 0c             	add    esp,0xc
c00283ca:	5b                   	pop    ebx
c00283cb:	5e                   	pop    esi
c00283cc:	5f                   	pop    edi
c00283cd:	5d                   	pop    ebp
c00283ce:	c3                   	ret    

c00283cf <__extendsfdf2>:
c00283cf:	55                   	push   ebp
c00283d0:	89 e5                	mov    ebp,esp
c00283d2:	57                   	push   edi
c00283d3:	56                   	push   esi
c00283d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00283d7:	89 d1                	mov    ecx,edx
c00283d9:	c1 f9 17             	sar    ecx,0x17
c00283dc:	c1 e2 08             	shl    edx,0x8
c00283df:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00283e5:	89 c8                	mov    eax,ecx
c00283e7:	80 e4 f8             	and    ah,0xf8
c00283ea:	8d 71 01             	lea    esi,[ecx+0x1]
c00283ed:	81 e6 fe 00 00 00    	and    esi,0xfe
c00283f3:	75 27                	jne    c002841c <__extendsfdf2+0x4d>
c00283f5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00283fb:	75 18                	jne    c0028415 <__extendsfdf2+0x46>
c00283fd:	85 d2                	test   edx,edx
c00283ff:	74 20                	je     c0028421 <__extendsfdf2+0x52>
c0028401:	41                   	inc    ecx
c0028402:	01 d2                	add    edx,edx
c0028404:	79 fb                	jns    c0028401 <__extendsfdf2+0x32>
c0028406:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002840c:	29 c8                	sub    eax,ecx
c002840e:	05 81 03 00 00       	add    eax,0x381
c0028413:	eb 0c                	jmp    c0028421 <__extendsfdf2+0x52>
c0028415:	05 00 07 00 00       	add    eax,0x700
c002841a:	eb 05                	jmp    c0028421 <__extendsfdf2+0x52>
c002841c:	05 80 03 00 00       	add    eax,0x380
c0028421:	c1 e0 14             	shl    eax,0x14
c0028424:	89 c1                	mov    ecx,eax
c0028426:	89 d0                	mov    eax,edx
c0028428:	c1 e8 0b             	shr    eax,0xb
c002842b:	09 c1                	or     ecx,eax
c002842d:	c1 e2 15             	shl    edx,0x15
c0028430:	89 d0                	mov    eax,edx
c0028432:	89 ca                	mov    edx,ecx
c0028434:	5e                   	pop    esi
c0028435:	5f                   	pop    edi
c0028436:	5d                   	pop    ebp
c0028437:	c3                   	ret    
c0028438:	66 90                	xchg   ax,ax
c002843a:	66 90                	xchg   ax,ax
c002843c:	66 90                	xchg   ax,ax
c002843e:	66 90                	xchg   ax,ax

c0028440 <fabs>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	89 04 24             	mov    DWORD PTR [esp],eax
c002844a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002844e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028453:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028457:	dd 04 24             	fld    QWORD PTR [esp]
c002845a:	83 c4 0c             	add    esp,0xc
c002845d:	c3                   	ret    
c002845e:	66 90                	xchg   ax,ax

c0028460 <lrint>:
c0028460:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028464:	83 ec 04             	sub    esp,0x4
c0028467:	db 1c 24             	fistp  DWORD PTR [esp]
c002846a:	58                   	pop    eax
c002846b:	c3                   	ret    

c002846c <lrintf>:
c002846c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028470:	83 ec 04             	sub    esp,0x4
c0028473:	db 1c 24             	fistp  DWORD PTR [esp]
c0028476:	58                   	pop    eax
c0028477:	c3                   	ret    

Disassembly of section .init:

c0028478 <_init>:
c0028478:	55                   	push   ebp
c0028479:	89 e5                	mov    ebp,esp
c002847b:	e8 98 7c fd ff       	call   c0000118 <frame_dummy>
c0028480:	e8 5b e0 ff ff       	call   c00264e0 <__do_global_ctors_aux>
c0028485:	5d                   	pop    ebp
c0028486:	c3                   	ret    

Disassembly of section .fini:

c0028487 <_fini>:
c0028487:	55                   	push   ebp
c0028488:	89 e5                	mov    ebp,esp
c002848a:	e8 19 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002848f:	5d                   	pop    ebp
c0028490:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028492 <Computer::~Computer()>:
c0028492:	83 ec 0c             	sub    esp,0xc
c0028495:	ba 1c a0 02 c0       	mov    edx,0xc002a01c
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	89 10                	mov    DWORD PTR [eax],edx
c00284a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a4:	83 ec 0c             	sub    esp,0xc
c00284a7:	50                   	push   eax
c00284a8:	e8 e9 b5 fe ff       	call   c0013a96 <Device::~Device()>
c00284ad:	83 c4 10             	add    esp,0x10
c00284b0:	90                   	nop
c00284b1:	83 c4 0c             	add    esp,0xc
c00284b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00284b6 <Computer::~Computer()>:
c00284b6:	83 ec 0c             	sub    esp,0xc
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284c0:	e8 cd ff ff ff       	call   c0028492 <Computer::~Computer()>
c00284c5:	83 c4 10             	add    esp,0x10
c00284c8:	83 ec 08             	sub    esp,0x8
c00284cb:	68 ec 01 00 00       	push   0x1ec
c00284d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284d4:	e8 de a1 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00284d9:	83 c4 10             	add    esp,0x10
c00284dc:	83 c4 0c             	add    esp,0xc
c00284df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00284e0 <idleCommon()>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	fa                   	cli    
c00284e4:	ff 05 c8 0f 03 c0    	inc    DWORD PTR ds:0xc0030fc8
c00284ea:	e8 9c 55 ff ff       	call   c001da8b <schedule()>
c00284ef:	a1 c8 0f 03 c0       	mov    eax,ds:0xc0030fc8
c00284f4:	48                   	dec    eax
c00284f5:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c00284fa:	75 01                	jne    c00284fd <idleCommon()+0x1d>
c00284fc:	fb                   	sti    
c00284fd:	83 c4 0c             	add    esp,0xc
c0028500:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028502 <LinkedList<UnixFile>::~LinkedList()>:
c0028502:	90                   	nop
c0028503:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028504 <LinkedList<UnixFile>::LinkedList()>:
c0028504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028508:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002851d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028528:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002852e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002853d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028544:	90                   	nop
c0028545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028546:	83 ec 0c             	sub    esp,0xc
c0028549:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002854e:	75 10                	jne    c0028560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028558:	e8 9e 19 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002855d:	83 c4 10             	add    esp,0x10
c0028560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028564:	8b 00                	mov    eax,DWORD PTR [eax]
c0028566:	85 c0                	test   eax,eax
c0028568:	74 34                	je     c002859e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028571:	85 c0                	test   eax,eax
c0028573:	74 29                	je     c002859e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028580:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002858b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002858e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028595:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859c:	eb 65                	jmp    c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a4:	85 c0                	test   eax,eax
c00285a6:	75 4b                	jne    c00285f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285af:	85 c0                	test   eax,eax
c00285b1:	75 40                	jne    c00285f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285bb:	89 10                	mov    DWORD PTR [eax],edx
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285dd:	85 c0                	test   eax,eax
c00285df:	74 22                	je     c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285e1:	83 ec 0c             	sub    esp,0xc
c00285e4:	68 f6 a2 02 c0       	push   0xc002a2f6
c00285e9:	e8 0d 19 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00285ee:	83 c4 10             	add    esp,0x10
c00285f1:	eb 10                	jmp    c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285f3:	83 ec 0c             	sub    esp,0xc
c00285f6:	68 00 a3 02 c0       	push   0xc002a300
c00285fb:	e8 fb 18 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028600:	83 c4 10             	add    esp,0x10
c0028603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860a:	8d 50 01             	lea    edx,[eax+0x1]
c002860d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028611:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028614:	90                   	nop
c0028615:	83 c4 0c             	add    esp,0xc
c0028618:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002861a <LinkedList<UnixFile>::getFirstElement()>:
c002861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028620:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028622 <LinkedList<UnixFile>::removeFirst()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	8b 00                	mov    eax,DWORD PTR [eax]
c002862b:	85 c0                	test   eax,eax
c002862d:	75 12                	jne    c0028641 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002862f:	83 ec 0c             	sub    esp,0xc
c0028632:	68 0c a3 02 c0       	push   0xc002a30c
c0028637:	e8 bf 18 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002863c:	83 c4 10             	add    esp,0x10
c002863f:	eb 7e                	jmp    c00286bf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028645:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002864b:	85 c0                	test   eax,eax
c002864d:	74 10                	je     c002865f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002864f:	83 ec 0c             	sub    esp,0xc
c0028652:	68 57 a3 02 c0       	push   0xc002a357
c0028657:	e8 9f 18 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002865c:	83 c4 10             	add    esp,0x10
c002865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028663:	8b 00                	mov    eax,DWORD PTR [eax]
c0028665:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028668:	85 c0                	test   eax,eax
c002866a:	75 33                	jne    c002869f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002866c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028685:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028688:	83 f8 01             	cmp    eax,0x1
c002868b:	74 21                	je     c00286ae <LinkedList<UnixFile>::removeFirst()+0x8c>
c002868d:	83 ec 0c             	sub    esp,0xc
c0028690:	68 30 a3 02 c0       	push   0xc002a330
c0028695:	e8 61 18 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002869a:	83 c4 10             	add    esp,0x10
c002869d:	eb 0f                	jmp    c00286ae <LinkedList<UnixFile>::removeFirst()+0x8c>
c002869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	89 10                	mov    DWORD PTR [eax],edx
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b5:	8d 50 ff             	lea    edx,[eax-0x1]
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286bf:	83 c4 0c             	add    esp,0xc
c00286c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00286c4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00286c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00286cc <DriverlessDevice::~DriverlessDevice()>:
c00286cc:	ba dc ab 02 c0       	mov    edx,0xc002abdc
c00286d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286d5:	89 10                	mov    DWORD PTR [eax],edx
c00286d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286db:	50                   	push   eax
c00286dc:	e8 b5 b3 fe ff       	call   c0013a96 <Device::~Device()>
c00286e1:	83 c4 04             	add    esp,0x4
c00286e4:	90                   	nop
c00286e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00286e6 <DriverlessDevice::~DriverlessDevice()>:
c00286e6:	83 ec 0c             	sub    esp,0xc
c00286e9:	83 ec 0c             	sub    esp,0xc
c00286ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f0:	e8 d7 ff ff ff       	call   c00286cc <DriverlessDevice::~DriverlessDevice()>
c00286f5:	83 c4 10             	add    esp,0x10
c00286f8:	83 ec 08             	sub    esp,0x8
c00286fb:	68 58 01 00 00       	push   0x158
c0028700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028704:	e8 ae 9f fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	83 c4 0c             	add    esp,0xc
c002870f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028710 <LinkedList<Device>::addElement(Device*)>:
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028718:	75 10                	jne    c002872a <LinkedList<Device>::addElement(Device*)+0x1a>
c002871a:	83 ec 0c             	sub    esp,0xc
c002871d:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028722:	e8 d4 17 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028727:	83 c4 10             	add    esp,0x10
c002872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028730:	85 c0                	test   eax,eax
c0028732:	74 3a                	je     c002876e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873b:	85 c0                	test   eax,eax
c002873d:	74 2f                	je     c002876e <LinkedList<Device>::addElement(Device*)+0x5e>
c002873f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028746:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002874a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028758:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028762:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002876c:	eb 68                	jmp    c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002876e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028772:	8b 00                	mov    eax,DWORD PTR [eax]
c0028774:	85 c0                	test   eax,eax
c0028776:	75 4e                	jne    c00287c6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	85 c0                	test   eax,eax
c0028781:	75 43                	jne    c00287c6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028787:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002878b:	89 10                	mov    DWORD PTR [eax],edx
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00287a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b0:	85 c0                	test   eax,eax
c00287b2:	74 22                	je     c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287b4:	83 ec 0c             	sub    esp,0xc
c00287b7:	68 f6 a2 02 c0       	push   0xc002a2f6
c00287bc:	e8 3a 17 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00287c1:	83 c4 10             	add    esp,0x10
c00287c4:	eb 10                	jmp    c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287c6:	83 ec 0c             	sub    esp,0xc
c00287c9:	68 00 a3 02 c0       	push   0xc002a300
c00287ce:	e8 28 17 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00287d3:	83 c4 10             	add    esp,0x10
c00287d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287dd:	8d 50 01             	lea    edx,[eax+0x1]
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287e7:	90                   	nop
c00287e8:	83 c4 0c             	add    esp,0xc
c00287eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00287ec <LinkedList<Device>::LinkedList()>:
c00287ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028805:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002880c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002881a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002882c:	90                   	nop
c002882d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002882e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028832:	8b 00                	mov    eax,DWORD PTR [eax]
c0028834:	85 c0                	test   eax,eax
c0028836:	75 0e                	jne    c0028846 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002883c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883f:	85 c0                	test   eax,eax
c0028841:	75 03                	jne    c0028846 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028843:	b0 01                	mov    al,0x1
c0028845:	c3                   	ret    
c0028846:	b0 00                	mov    al,0x0
c0028848:	90                   	nop
c0028849:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002884a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028852:	83 ec 0c             	sub    esp,0xc
c0028855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028859:	8b 00                	mov    eax,DWORD PTR [eax]
c002885b:	85 c0                	test   eax,eax
c002885d:	75 15                	jne    c0028874 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002885f:	83 ec 0c             	sub    esp,0xc
c0028862:	68 0c a3 02 c0       	push   0xc002a30c
c0028867:	e8 8f 16 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c002886c:	83 c4 10             	add    esp,0x10
c002886f:	e9 88 00 00 00       	jmp    c00288fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002887e:	85 c0                	test   eax,eax
c0028880:	0f 95 c0             	setne  al
c0028883:	84 c0                	test   al,al
c0028885:	74 10                	je     c0028897 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028887:	83 ec 0c             	sub    esp,0xc
c002888a:	68 57 a3 02 c0       	push   0xc002a357
c002888f:	e8 67 16 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028894:	83 c4 10             	add    esp,0x10
c0028897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889b:	8b 00                	mov    eax,DWORD PTR [eax]
c002889d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00288a0:	85 c0                	test   eax,eax
c00288a2:	0f 94 c0             	sete   al
c00288a5:	84 c0                	test   al,al
c00288a7:	74 33                	je     c00288dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00288a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c5:	83 f8 01             	cmp    eax,0x1
c00288c8:	74 21                	je     c00288eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00288ca:	83 ec 0c             	sub    esp,0xc
c00288cd:	68 30 a3 02 c0       	push   0xc002a330
c00288d2:	e8 24 16 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	eb 0f                	jmp    c00288eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00288dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00288e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00288e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e9:	89 10                	mov    DWORD PTR [eax],edx
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288fc:	83 c4 0c             	add    esp,0xc
c00288ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028900:	83 ec 0c             	sub    esp,0xc
c0028903:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028908:	75 10                	jne    c002891a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002890a:	83 ec 0c             	sub    esp,0xc
c002890d:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028912:	e8 e4 15 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028917:	83 c4 10             	add    esp,0x10
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028920:	85 c0                	test   eax,eax
c0028922:	74 34                	je     c0028958 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002892b:	85 c0                	test   eax,eax
c002892d:	74 29                	je     c0028958 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002892f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028933:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002893a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028956:	eb 65                	jmp    c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 00                	mov    eax,DWORD PTR [eax]
c002895e:	85 c0                	test   eax,eax
c0028960:	75 4b                	jne    c00289ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	85 c0                	test   eax,eax
c002896b:	75 40                	jne    c00289ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028975:	89 10                	mov    DWORD PTR [eax],edx
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002897f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028997:	85 c0                	test   eax,eax
c0028999:	74 22                	je     c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002899b:	83 ec 0c             	sub    esp,0xc
c002899e:	68 f6 a2 02 c0       	push   0xc002a2f6
c00289a3:	e8 53 15 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00289a8:	83 c4 10             	add    esp,0x10
c00289ab:	eb 10                	jmp    c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00289ad:	83 ec 0c             	sub    esp,0xc
c00289b0:	68 00 a3 02 c0       	push   0xc002a300
c00289b5:	e8 41 15 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c00289ba:	83 c4 10             	add    esp,0x10
c00289bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c4:	8d 50 01             	lea    edx,[eax+0x1]
c00289c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289ce:	90                   	nop
c00289cf:	83 c4 0c             	add    esp,0xc
c00289d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00289d4 <ACPI::~ACPI()>:
c00289d4:	83 ec 0c             	sub    esp,0xc
c00289d7:	ba 48 b4 02 c0       	mov    edx,0xc002b448
c00289dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e0:	89 10                	mov    DWORD PTR [eax],edx
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	83 ec 0c             	sub    esp,0xc
c00289e9:	50                   	push   eax
c00289ea:	e8 a7 b0 fe ff       	call   c0013a96 <Device::~Device()>
c00289ef:	83 c4 10             	add    esp,0x10
c00289f2:	90                   	nop
c00289f3:	83 c4 0c             	add    esp,0xc
c00289f6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00289f8 <ACPI::~ACPI()>:
c00289f8:	83 ec 0c             	sub    esp,0xc
c00289fb:	83 ec 0c             	sub    esp,0xc
c00289fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a02:	e8 cd ff ff ff       	call   c00289d4 <ACPI::~ACPI()>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	83 ec 08             	sub    esp,0x8
c0028a0d:	68 64 12 00 00       	push   0x1264
c0028a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a16:	e8 9c 9c fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	83 c4 0c             	add    esp,0xc
c0028a21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028a22 <LinkedList<Device>::~LinkedList()>:
c0028a22:	90                   	nop
c0028a23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028a24 <LinkedList<Device>::isEmpty()>:
c0028a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2a:	85 c0                	test   eax,eax
c0028a2c:	75 0e                	jne    c0028a3c <LinkedList<Device>::isEmpty()+0x18>
c0028a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a35:	85 c0                	test   eax,eax
c0028a37:	75 03                	jne    c0028a3c <LinkedList<Device>::isEmpty()+0x18>
c0028a39:	b0 01                	mov    al,0x1
c0028a3b:	c3                   	ret    
c0028a3c:	b0 00                	mov    al,0x0
c0028a3e:	90                   	nop
c0028a3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028a40 <LinkedList<Device>::getFirstElement()>:
c0028a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a46:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028a48 <LinkedList<Device>::removeFirst()>:
c0028a48:	83 ec 0c             	sub    esp,0xc
c0028a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a51:	85 c0                	test   eax,eax
c0028a53:	75 15                	jne    c0028a6a <LinkedList<Device>::removeFirst()+0x22>
c0028a55:	83 ec 0c             	sub    esp,0xc
c0028a58:	68 0c a3 02 c0       	push   0xc002a30c
c0028a5d:	e8 99 14 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028a62:	83 c4 10             	add    esp,0x10
c0028a65:	e9 87 00 00 00       	jmp    c0028af1 <LinkedList<Device>::removeFirst()+0xa9>
c0028a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a71:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a77:	85 c0                	test   eax,eax
c0028a79:	74 10                	je     c0028a8b <LinkedList<Device>::removeFirst()+0x43>
c0028a7b:	83 ec 0c             	sub    esp,0xc
c0028a7e:	68 57 a3 02 c0       	push   0xc002a357
c0028a83:	e8 73 14 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028a88:	83 c4 10             	add    esp,0x10
c0028a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a91:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a97:	85 c0                	test   eax,eax
c0028a99:	75 33                	jne    c0028ace <LinkedList<Device>::removeFirst()+0x86>
c0028a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab7:	83 f8 01             	cmp    eax,0x1
c0028aba:	74 24                	je     c0028ae0 <LinkedList<Device>::removeFirst()+0x98>
c0028abc:	83 ec 0c             	sub    esp,0xc
c0028abf:	68 30 a3 02 c0       	push   0xc002a330
c0028ac4:	e8 32 14 ff ff       	call   c0019efb <Krnl::panic(char const*)>
c0028ac9:	83 c4 10             	add    esp,0x10
c0028acc:	eb 12                	jmp    c0028ae0 <LinkedList<Device>::removeFirst()+0x98>
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ade:	89 10                	mov    DWORD PTR [eax],edx
c0028ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028af1:	83 c4 0c             	add    esp,0xc
c0028af4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028af6 <CPU::~CPU()>:
c0028af6:	83 ec 0c             	sub    esp,0xc
c0028af9:	ba 98 b6 02 c0       	mov    edx,0xc002b698
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	89 10                	mov    DWORD PTR [eax],edx
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	83 ec 0c             	sub    esp,0xc
c0028b0b:	50                   	push   eax
c0028b0c:	e8 85 af fe ff       	call   c0013a96 <Device::~Device()>
c0028b11:	83 c4 10             	add    esp,0x10
c0028b14:	90                   	nop
c0028b15:	83 c4 0c             	add    esp,0xc
c0028b18:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b1a <CPU::~CPU()>:
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	83 ec 0c             	sub    esp,0xc
c0028b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b24:	e8 cd ff ff ff       	call   c0028af6 <CPU::~CPU()>
c0028b29:	83 c4 10             	add    esp,0x10
c0028b2c:	83 ec 08             	sub    esp,0x8
c0028b2f:	68 98 11 00 00       	push   0x1198
c0028b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b38:	e8 7a 9b fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028b3d:	83 c4 10             	add    esp,0x10
c0028b40:	83 c4 0c             	add    esp,0xc
c0028b43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b44:	90                   	nop
c0028b45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b46 <ThreadControlBlock::ThreadControlBlock()>:
c0028b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b55:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b60:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b76:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b81:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b89:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b8d:	90                   	nop
c0028b8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ba9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bc9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bd0:	90                   	nop
c0028bd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bd2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bd9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bda <Vm::_FPUState::_FPUState()>:
c0028bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bde:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028be5:	90                   	nop
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028be8 <PCI::~PCI()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	ba c4 c1 02 c0       	mov    edx,0xc002c1c4
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	89 10                	mov    DWORD PTR [eax],edx
c0028bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfa:	83 ec 0c             	sub    esp,0xc
c0028bfd:	50                   	push   eax
c0028bfe:	e8 63 a8 fe ff       	call   c0013466 <Bus::~Bus()>
c0028c03:	83 c4 10             	add    esp,0x10
c0028c06:	90                   	nop
c0028c07:	83 c4 0c             	add    esp,0xc
c0028c0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c0c <PCI::~PCI()>:
c0028c0c:	83 ec 0c             	sub    esp,0xc
c0028c0f:	83 ec 0c             	sub    esp,0xc
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 cd ff ff ff       	call   c0028be8 <PCI::~PCI()>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 ec 08             	sub    esp,0x8
c0028c21:	68 5c 01 00 00       	push   0x15c
c0028c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2a:	e8 88 9a fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	83 c4 0c             	add    esp,0xc
c0028c35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c36 <IDE::~IDE()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	ba 78 c2 02 c0       	mov    edx,0xc002c278
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	89 10                	mov    DWORD PTR [eax],edx
c0028c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c48:	83 ec 0c             	sub    esp,0xc
c0028c4b:	50                   	push   eax
c0028c4c:	e8 5b b3 fe ff       	call   c0013fac <HardDiskController::~HardDiskController()>
c0028c51:	83 c4 10             	add    esp,0x10
c0028c54:	90                   	nop
c0028c55:	83 c4 0c             	add    esp,0xc
c0028c58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c5a <IDE::~IDE()>:
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	83 ec 0c             	sub    esp,0xc
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 cd ff ff ff       	call   c0028c36 <IDE::~IDE()>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 ec 08             	sub    esp,0x8
c0028c6f:	68 70 02 00 00       	push   0x270
c0028c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c78:	e8 3a 9a fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	83 c4 0c             	add    esp,0xc
c0028c83:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c84 <SATABus::~SATABus()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	ba f0 c2 02 c0       	mov    edx,0xc002c2f0
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	89 10                	mov    DWORD PTR [eax],edx
c0028c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	50                   	push   eax
c0028c9a:	e8 0d b3 fe ff       	call   c0013fac <HardDiskController::~HardDiskController()>
c0028c9f:	83 c4 10             	add    esp,0x10
c0028ca2:	90                   	nop
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ca8 <SATABus::~SATABus()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	83 ec 0c             	sub    esp,0xc
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 cd ff ff ff       	call   c0028c84 <SATABus::~SATABus()>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 ec 08             	sub    esp,0x8
c0028cbd:	68 64 01 00 00       	push   0x164
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 ec 99 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 c4 0c             	add    esp,0xc
c0028cd1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cd2 <ATA::~ATA()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	ba 3c c3 02 c0       	mov    edx,0xc002c33c
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	89 10                	mov    DWORD PTR [eax],edx
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	83 ec 0c             	sub    esp,0xc
c0028ce7:	50                   	push   eax
c0028ce8:	e8 a1 b3 fe ff       	call   c001408e <PhysicalDisk::~PhysicalDisk()>
c0028ced:	83 c4 10             	add    esp,0x10
c0028cf0:	90                   	nop
c0028cf1:	83 c4 0c             	add    esp,0xc
c0028cf4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cf6 <ATA::~ATA()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 cd ff ff ff       	call   c0028cd2 <ATA::~ATA()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 7c 01 00 00       	push   0x17c
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 9e 99 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d20 <ATAPI::~ATAPI()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	ba 74 c3 02 c0       	mov    edx,0xc002c374
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	89 10                	mov    DWORD PTR [eax],edx
c0028d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d32:	83 ec 0c             	sub    esp,0xc
c0028d35:	50                   	push   eax
c0028d36:	e8 53 b3 fe ff       	call   c001408e <PhysicalDisk::~PhysicalDisk()>
c0028d3b:	83 c4 10             	add    esp,0x10
c0028d3e:	90                   	nop
c0028d3f:	83 c4 0c             	add    esp,0xc
c0028d42:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d44 <ATAPI::~ATAPI()>:
c0028d44:	83 ec 0c             	sub    esp,0xc
c0028d47:	83 ec 0c             	sub    esp,0xc
c0028d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4e:	e8 cd ff ff ff       	call   c0028d20 <ATAPI::~ATAPI()>
c0028d53:	83 c4 10             	add    esp,0x10
c0028d56:	83 ec 08             	sub    esp,0x8
c0028d59:	68 80 01 00 00       	push   0x180
c0028d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d62:	e8 50 99 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	83 c4 0c             	add    esp,0xc
c0028d6d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d6e <SATA::~SATA()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	ba 28 c4 02 c0       	mov    edx,0xc002c428
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	89 10                	mov    DWORD PTR [eax],edx
c0028d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	50                   	push   eax
c0028d84:	e8 05 b3 fe ff       	call   c001408e <PhysicalDisk::~PhysicalDisk()>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	90                   	nop
c0028d8d:	83 c4 0c             	add    esp,0xc
c0028d90:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d92 <SATA::~SATA()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	83 ec 0c             	sub    esp,0xc
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 cd ff ff ff       	call   c0028d6e <SATA::~SATA()>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 ec 08             	sub    esp,0x8
c0028da7:	68 7c 01 00 00       	push   0x17c
c0028dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db0:	e8 02 99 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	83 c4 0c             	add    esp,0xc
c0028dbb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028dbc <SATAPI::~SATAPI()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	89 10                	mov    DWORD PTR [eax],edx
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	50                   	push   eax
c0028dd2:	e8 b7 b2 fe ff       	call   c001408e <PhysicalDisk::~PhysicalDisk()>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	90                   	nop
c0028ddb:	83 c4 0c             	add    esp,0xc
c0028dde:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028de0 <SATAPI::~SATAPI()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 cd ff ff ff       	call   c0028dbc <SATAPI::~SATAPI()>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 ec 08             	sub    esp,0x8
c0028df5:	68 80 01 00 00       	push   0x180
c0028dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfe:	e8 b4 98 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	83 c4 0c             	add    esp,0xc
c0028e09:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e0a <AVX::~AVX()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	89 10                	mov    DWORD PTR [eax],edx
c0028e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	50                   	push   eax
c0028e20:	e8 ed b2 fe ff       	call   c0014112 <FPU::~FPU()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	90                   	nop
c0028e29:	83 c4 0c             	add    esp,0xc
c0028e2c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e2e <AVX::~AVX()>:
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	83 ec 0c             	sub    esp,0xc
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 cd ff ff ff       	call   c0028e0a <AVX::~AVX()>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 ec 08             	sub    esp,0x8
c0028e43:	68 58 01 00 00       	push   0x158
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 66 98 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 c4 0c             	add    esp,0xc
c0028e57:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e58 <MMX::~MMX()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	ba 84 c5 02 c0       	mov    edx,0xc002c584
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	89 10                	mov    DWORD PTR [eax],edx
c0028e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	50                   	push   eax
c0028e6e:	e8 9f b2 fe ff       	call   c0014112 <FPU::~FPU()>
c0028e73:	83 c4 10             	add    esp,0x10
c0028e76:	90                   	nop
c0028e77:	83 c4 0c             	add    esp,0xc
c0028e7a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e7c <MMX::~MMX()>:
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	83 ec 0c             	sub    esp,0xc
c0028e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e86:	e8 cd ff ff ff       	call   c0028e58 <MMX::~MMX()>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	83 ec 08             	sub    esp,0x8
c0028e91:	68 58 01 00 00       	push   0x158
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 18 98 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 c4 0c             	add    esp,0xc
c0028ea5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ea6 <SSE::~SSE()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	ba c4 c5 02 c0       	mov    edx,0xc002c5c4
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	89 10                	mov    DWORD PTR [eax],edx
c0028eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	50                   	push   eax
c0028ebc:	e8 51 b2 fe ff       	call   c0014112 <FPU::~FPU()>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	90                   	nop
c0028ec5:	83 c4 0c             	add    esp,0xc
c0028ec8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028eca <SSE::~SSE()>:
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	83 ec 0c             	sub    esp,0xc
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 cd ff ff ff       	call   c0028ea6 <SSE::~SSE()>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 ec 08             	sub    esp,0x8
c0028edf:	68 58 01 00 00       	push   0x158
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 ca 97 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 c4 0c             	add    esp,0xc
c0028ef3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028ef4 <x87::~x87()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	ba 04 c6 02 c0       	mov    edx,0xc002c604
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	89 10                	mov    DWORD PTR [eax],edx
c0028f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	50                   	push   eax
c0028f0a:	e8 03 b2 fe ff       	call   c0014112 <FPU::~FPU()>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	90                   	nop
c0028f13:	83 c4 0c             	add    esp,0xc
c0028f16:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f18 <x87::~x87()>:
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	83 ec 0c             	sub    esp,0xc
c0028f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f22:	e8 cd ff ff ff       	call   c0028ef4 <x87::~x87()>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	83 ec 08             	sub    esp,0x8
c0028f2d:	68 58 01 00 00       	push   0x158
c0028f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f36:	e8 7c 97 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	83 c4 0c             	add    esp,0xc
c0028f41:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f42 <IOAPIC::~IOAPIC()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	ba 5c c7 02 c0       	mov    edx,0xc002c75c
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	89 10                	mov    DWORD PTR [eax],edx
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	50                   	push   eax
c0028f58:	e8 39 ab fe ff       	call   c0013a96 <Device::~Device()>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	90                   	nop
c0028f61:	83 c4 0c             	add    esp,0xc
c0028f64:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f66 <IOAPIC::~IOAPIC()>:
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	83 ec 0c             	sub    esp,0xc
c0028f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f70:	e8 cd ff ff ff       	call   c0028f42 <IOAPIC::~IOAPIC()>
c0028f75:	83 c4 10             	add    esp,0x10
c0028f78:	83 ec 08             	sub    esp,0x8
c0028f7b:	68 68 01 00 00       	push   0x168
c0028f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f84:	e8 2e 97 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	83 c4 0c             	add    esp,0xc
c0028f8f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f90 <APIC::~APIC()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	ba 14 c7 02 c0       	mov    edx,0xc002c714
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	89 10                	mov    DWORD PTR [eax],edx
c0028f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	50                   	push   eax
c0028fa6:	e8 31 b6 fe ff       	call   c00145dc <InterruptController::~InterruptController()>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	90                   	nop
c0028faf:	83 c4 0c             	add    esp,0xc
c0028fb2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028fb4 <APIC::~APIC()>:
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	83 ec 0c             	sub    esp,0xc
c0028fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbe:	e8 cd ff ff ff       	call   c0028f90 <APIC::~APIC()>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	83 ec 08             	sub    esp,0x8
c0028fc9:	68 58 21 00 00       	push   0x2158
c0028fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd2:	e8 e0 96 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	83 c4 0c             	add    esp,0xc
c0028fdd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fde <PIC::~PIC()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	ba ac c7 02 c0       	mov    edx,0xc002c7ac
c0028fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fea:	89 10                	mov    DWORD PTR [eax],edx
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	50                   	push   eax
c0028ff4:	e8 e3 b5 fe ff       	call   c00145dc <InterruptController::~InterruptController()>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	90                   	nop
c0028ffd:	83 c4 0c             	add    esp,0xc
c0029000:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029002 <PIC::~PIC()>:
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	83 ec 0c             	sub    esp,0xc
c0029008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900c:	e8 cd ff ff ff       	call   c0028fde <PIC::~PIC()>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	83 ec 08             	sub    esp,0x8
c0029017:	68 58 21 00 00       	push   0x2158
c002901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029020:	e8 92 96 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	83 c4 0c             	add    esp,0xc
c002902b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002902c <APICTimer::~APICTimer()>:
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	ba 00 c8 02 c0       	mov    edx,0xc002c800
c0029034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029038:	89 10                	mov    DWORD PTR [eax],edx
c002903a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	50                   	push   eax
c0029042:	e8 ed d5 fe ff       	call   c0016634 <Timer::~Timer()>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	90                   	nop
c002904b:	83 c4 0c             	add    esp,0xc
c002904e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029050 <APICTimer::~APICTimer()>:
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	83 ec 0c             	sub    esp,0xc
c0029056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905a:	e8 cd ff ff ff       	call   c002902c <APICTimer::~APICTimer()>
c002905f:	83 c4 10             	add    esp,0x10
c0029062:	83 ec 08             	sub    esp,0x8
c0029065:	68 60 01 00 00       	push   0x160
c002906a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906e:	e8 44 96 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	83 c4 0c             	add    esp,0xc
c0029079:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002907a <PIT::~PIT()>:
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	ba 50 c8 02 c0       	mov    edx,0xc002c850
c0029082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029086:	89 10                	mov    DWORD PTR [eax],edx
c0029088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	50                   	push   eax
c0029090:	e8 9f d5 fe ff       	call   c0016634 <Timer::~Timer()>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	90                   	nop
c0029099:	83 c4 0c             	add    esp,0xc
c002909c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002909e <PIT::~PIT()>:
c002909e:	83 ec 0c             	sub    esp,0xc
c00290a1:	83 ec 0c             	sub    esp,0xc
c00290a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a8:	e8 cd ff ff ff       	call   c002907a <PIT::~PIT()>
c00290ad:	83 c4 10             	add    esp,0x10
c00290b0:	83 ec 08             	sub    esp,0x8
c00290b3:	68 5c 01 00 00       	push   0x15c
c00290b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290bc:	e8 f6 95 fe ff       	call   c00126b7 <operator delete(void*, unsigned long)>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	83 c4 0c             	add    esp,0xc
c00290c7:	c3                   	ret    
