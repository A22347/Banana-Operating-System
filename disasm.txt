
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c0000025:	3d 30 f4 01 c0       	cmp    eax,0xc001f430
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 30 f4 01 c0       	push   0xc001f430
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c0000051:	2d 30 f4 01 c0       	sub    eax,0xc001f430
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 30 f4 01 c0       	push   0xc001f430
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 60 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f660,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d8 c8 01 c0       	mov    ebx,0xc001c8d8
c0000097:	81 eb d4 c8 01 c0    	sub    ebx,0xc001c8d4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d4 c8 01 c0       	mov    esi,0xc001c8d4
c00000a6:	a1 64 f6 01 c0       	mov    eax,ds:0xc001f664
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 64 f6 01 c0       	mov    ds:0xc001f664,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 64 f6 01 c0       	mov    eax,ds:0xc001f664
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 30 f4 01 c0       	push   0xc001f430
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 60 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f660,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 68 f6 01 c0       	push   0xc001f668
c0000108:	68 30 f4 01 c0       	push   0xc001f430
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 04 29 01 00       	call   c0012bb4 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 c0 9f 00 00       	call   c000a288 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 e2 28 01 00       	call   c0012bb4 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 b3 2d 01 00       	call   c00130a4 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 02 34 01 00       	call   c00136fc <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 60 04 02 c0 	lgdtd  ds:0xc0020460
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 6c fd 00 00       	jmp    c00100ee <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 80 f6 01 c0       	mov    ds:0xc001f680,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 80 f6 01 c0    	mov    DWORD PTR ds:0xc001f680,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 80 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f680
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 c8 01 c0 02 	test   BYTE PTR [edx-0x3ffe3720],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3720],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 c8 01 c0 08 	test   BYTE PTR [edx-0x3ffe3720],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 c8 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3720],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3720],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d a0 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6a0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d a0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6a0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 a4 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe095c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 a4 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe095c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d a0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6a0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 cc f6 01 c0    	cmp    DWORD PTR ds:0xc001f6cc,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d dc f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f6dc
c0000d3d:	c7 42 0c d4 f6 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f6d4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 dc f6 01 c0    	mov    DWORD PTR ds:0xc001f6dc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 cc f6 01 c0    	mov    DWORD PTR ds:0xc001f6cc,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 a0 f6 01 c0 02 	test   BYTE PTR ds:0xc001f6a0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d a0 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f6a0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 a4 f6 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe095c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 a4 f6 01 c0 	mov    DWORD PTR [edx*4-0x3ffe095c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 d4 f6 01 c0 	lea    edx,[eax*8-0x3ffe092c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d e0 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6e0
c00010bf:	81 fb d4 f6 01 c0    	cmp    ebx,0xc001f6d4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d d4 f6 01 c0       	cmp    eax,0xc001f6d4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d d0 f6 01 c0    	cmp    DWORD PTR ds:0xc001f6d0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 dc f6 01 c0       	mov    ds:0xc001f6dc,eax
c00010fb:	a3 e0 f6 01 c0       	mov    ds:0xc001f6e0,eax
c0001100:	a3 d0 f6 01 c0       	mov    ds:0xc001f6d0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 d4 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f6d4
c000110e:	c7 40 0c d4 f6 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f6d4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 e0 f6 01 c0       	mov    ds:0xc001f6e0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 d4 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f6d4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 98 f6 01 c0 	lea    ebp,[edx*4-0x3ffe0968]
c000115f:	8b 14 95 a0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0960]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 a0 f6 01 c0 	lea    ecx,[edx*4-0x3ffe0960]
c000117a:	8b 14 95 a0 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0960]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd d4 f9 01 c0 	or     DWORD PTR [edi*4-0x3ffe062c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 d4 f6 01 c0 	lea    eax,[eax*8-0x3ffe092c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d dc f6 01 c0    	mov    DWORD PTR ds:0xc001f6dc,ecx
c0001234:	89 0d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,ecx
c000123a:	c7 41 08 d4 f6 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f6d4
c0001241:	c7 41 0c d4 f6 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f6d4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd cc f6 01 c0 	lea    edx,[ecx*8-0x3ffe0934]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d d4 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe062c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d d4 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe062c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 cc f6 01 c0 	lea    edx,[eax*4-0x3ffe0934]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d d4 f9 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe062c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d dc f6 01 c0    	mov    DWORD PTR ds:0xc001f6dc,edi
c0001307:	89 3d e0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6e0,edi
c000130d:	c7 47 08 d4 f6 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f6d4
c0001314:	c7 47 0c d4 f6 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f6d4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d d0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6d0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 cc f6 01 c0       	mov    eax,ds:0xc001f6cc
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d cc f6 01 c0    	mov    DWORD PTR ds:0xc001f6cc,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d a0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6a0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d f4 f9 01 c0    	mov    ebx,DWORD PTR ds:0xc001f9f4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 f4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9f4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d f4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9f4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 cc f6 01 c0    	cmp    DWORD PTR ds:0xc001f6cc,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d cc f6 01 c0    	mov    DWORD PTR ds:0xc001f6cc,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d a0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6a0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 fc f9 01 c0    	push   DWORD PTR ds:0xc001f9fc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d a0 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6a0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 fc f9 01 c0       	mov    eax,ds:0xc001f9fc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d cc f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f6cc,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 cc f6 01 c0       	mov    eax,ds:0xc001f6cc
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 a4 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe095c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 d4 f6 01 c0       	mov    eax,0xc001f6d4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d cc f9 01 c0       	cmp    eax,0xc001f9cc
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 08 fa 01 c0       	mov    eax,ds:0xc001fa08
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 f0 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9f0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 04 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa04
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 14 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa14
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 c9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe361c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 a0 f6 01 c0       	mov    eax,ds:0xc001f6a0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 a0 f6 01 c0       	mov    ds:0xc001f6a0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d e4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d e8 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d ec f9 01 c0    	mov    DWORD PTR ds:0xc001f9ec,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 f4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9f4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 60 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7a0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 a2 4d 01 00       	jmp    c0016a8c <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 60 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7a0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 d0 4d 01 00       	jmp    c0016ad0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 60 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7a0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 f5 4d 01 00       	jmp    c0016b14 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe34c0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe34c0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba a4 e9 01 c0       	mov    edx,0xc001e9a4
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc c9 01 c0       	mov    edx,0xc001c9fc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 40 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe05c0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 20 fa 01 c0    	mov    ax,ds:0xc001fa20
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 20 fa 01 c0    	mov    ds:0xc001fa20,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 ca 01 c0       	mov    eax,0xc001ca02
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 ca 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3540]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b ca 01 c0       	mov    eax,0xc001ca0b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe34c0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 40 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe05c0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 40 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe05c0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 ca 01 c0       	mov    eax,0xc001ca90
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 40 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe05c0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 ca 01 c0       	mov    ebx,0xc001ca80
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 ca 01 c0       	mov    edx,0xc001ca60
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 ca 01 c0       	mov    edx,0xc001ca70
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 ca 01 c0       	mov    edx,0xc001ca12
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e ca 01 c0       	mov    edx,0xc001ca1e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 ca 01 c0       	mov    edx,0xc001ca32
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ce60
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce60
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 cc 01 c0       	mov    eax,0xc001cc60
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 cb 01 c0       	mov    eax,0xc001cba0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe34a0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 c0 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a40]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 20 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09e0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 70 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0490],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 00 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f600
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 e9 13 01 00       	call   c0017368 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 c0 f5 01 c0       	mov    eax,0xc001f5c0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 54 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020454,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 20 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09e0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 54 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020454
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 cf 01 c0       	push   0xc001cf60
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 20 04 02 c0       	mov    ecx,0xc0020420
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf e0 fa 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0520],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 e0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0520],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 e4 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe051c],esi
c000634e:	89 87 e0 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0520],eax
c0006354:	c7 87 e8 fa 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0518],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 70 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0490],0x0
c0006370:	89 87 ec fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0514],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 e0 fa 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0520],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd e0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0520],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 70 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0490]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 e8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0518]
c00063e9:	8b 8d ec fa 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0514]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 e0 fa 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0520]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 c0 f5 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0a40]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 e8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0518]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d e8 fa 01 c0    	add    DWORD PTR [ebp-0x3ffe0518],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d e0 fa 01 c0    	lea    ecx,[ebp-0x3ffe0520]
c00064e1:	83 bd e0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0520],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 ec fa 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0514]
c000651f:	05 e0 fa 01 c0       	add    eax,0xc001fae0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 e8 fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0518]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb e0 fa 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0520],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 70 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0490],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 e8 fa 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0518]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba e0 fa 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0520],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 70 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0490],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 ec fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0514]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 e0 fa 01 c0    	lea    esi,[eax-0x3ffe0520]
c00065e4:	83 b8 e0 fa 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0520],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 20 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09e0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 e8 fa 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0518]
c0006653:	81 c2 e0 fa 01 c0    	add    edx,0xc001fae0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 20 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe09e0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 f8 fa 01 c0    	lea    ebp,[eax-0x3ffe0508]
c00066b9:	83 3d 54 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020454,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 f8 fa 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0508],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 cf 01 c0       	push   0xc001cf60
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 f3 fa 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe050d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 f0 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe0510],eax
c000678f:	89 91 f4 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe050c],edx
c0006795:	81 c1 e0 fa 01 c0    	add    ecx,0xc001fae0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 f0 fa 01 c0       	add    eax,0xc001faf0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 00 f6 01 c0       	mov    ds:0xc001f600,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 54 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020454,0x0
c00067df:	a1 4c 04 02 c0       	mov    eax,ds:0xc002044c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 20 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe09e0]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 cf 01 c0       	push   0xc001cf63
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 20 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09e0]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 54 04 02 c0       	mov    ds:0xc0020454,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 54 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020454,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 4c 04 02 c0       	mov    eax,ds:0xc002044c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 20 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe09e0]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a cf 01 c0       	push   0xc001cf6a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 20 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe09e0]
c000687d:	bf 20 04 02 c0       	mov    edi,0xc0020420
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 22 04 02 c0       	mov    eax,0xc0020422
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c00068a0:	b8 2a 04 02 c0       	mov    eax,0xc002042a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 44 04 02 c0       	mov    ds:0xc0020444,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 e0 fa 01 c0       	push   0xc001fae0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 e0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fae0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 50 04 02 c0       	mov    ds:0xc0020450,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 c0 fa 01 c0       	mov    ds:0xc001fac0,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 20 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09e0],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d c0 f5 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a40],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 20 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09e0]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d c0 f5 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a40]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 50 04 02 c0       	mov    eax,ds:0xc0020450
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 c0 fa 01 c0       	mov    eax,ds:0xc001fac0
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 c0 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fac0,0x0
c00069a9:	c7 05 50 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020450,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 0e 50 00 00       	call   c000b9e6 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 cf 01 c0       	push   0xc001cf71
c0006a09:	e8 7d 90 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0006a28:	50                   	push   eax
c0006a29:	68 8a cf 01 c0       	push   0xc001cf8a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 b2 c4 00 00       	call   c0012ee8 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 a9 c6 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 30 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023730
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 48 3b 01 c0       	push   0xc0013b48
c0006a5a:	52                   	push   edx
c0006a5b:	e8 94 c6 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0006a68:	68 88 d0 01 c0       	push   0xc001d088
c0006a6d:	c6 05 5d 04 02 c0 01 	mov    BYTE PTR ds:0xc002045d,0x1
c0006a74:	e8 12 90 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006a79:	e8 a9 d4 00 00       	call   c0013f27 <Vm::initialise8086()>
c0006a7e:	e8 a7 3d 00 00       	call   c000a82a <Fs::initVFS()>
c0006a83:	c7 04 24 97 cf 01 c0 	mov    DWORD PTR [esp],0xc001cf97
c0006a8a:	e8 fc 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006a8f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d0 01 c0       	push   0xc001d088
c0006aae:	e8 d8 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006ab3:	e8 ae 94 00 00       	call   c000ff66 <Krnl::loadSystemEnv()>
c0006ab8:	e8 0b 97 00 00       	call   c00101c8 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 cf 01 c0       	push   0xc001cfb1
c0006ac7:	68 ba cf 01 c0       	push   0xc001cfba
c0006acc:	e8 05 aa 00 00       	call   c00114d6 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 5f 48 00 00       	call   c000b338 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d0 01 c0 	mov    DWORD PTR [esp],0xc001d0ac
c0006ae0:	e8 a6 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 ed 4e 00 00       	call   c000b9e4 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 cf 01 c0 	mov    DWORD PTR [esp],0xc001cfc2
c0006afe:	e8 88 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 cf 01 c0       	push   0xc001cfd3
c0006b12:	e8 0b be 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 33 c0 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 e3 c9 00 00       	call   c0013510 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef cf 01 c0       	push   0xc001cfef
c0006b41:	50                   	push   eax
c0006b42:	e8 19 4f 00 00       	call   c000ba60 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d0 01 c0       	mov    edx,0xc001d0f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 71 04 02 c0 04 	test   BYTE PTR ds:0xc0020471,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 a5 4c 01 00       	call   c001b8d6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 4c 83 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 25 83 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 03 83 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 e1 82 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 70 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020470,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 ef 81 00 00       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 ca 81 00 00       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 0f 4b 01 00       	call   c001b890 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 6c 48 01 00       	call   c001b610 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 e6 81 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 cf 01 c0       	push   0xc001cff8
c0006e14:	e8 ea 92 00 00       	call   c0010103 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe cf 01 c0       	push   0xc001cffe
c0006e4c:	e8 b2 92 00 00       	call   c0010103 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 97 7b 00 00       	jmp    c000ea30 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 70 04 02 c0 04 	test   BYTE PTR ds:0xc0020470,0x4
c0006ee8:	68 04 d0 01 c0       	push   0xc001d004
c0006eed:	0f 94 05 00 f1 01 c0 	sete   BYTE PTR ds:0xc001f100
c0006ef4:	e8 92 8b 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 b9 76 00 00       	call   c000e5c8 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 aa 49 00 00       	call   c000b8c8 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d0 01 c0 	mov    DWORD PTR [esp],0xc001d01c
c0006f37:	e8 4f 8b 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 1e 81 00 00       	call   c000f070 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 67 49 00 00       	call   c000b8c8 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d0 01 c0       	push   0xc001d0cc
c0006f7e:	e8 08 8b 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006f83:	e8 d6 e0 00 00       	call   c001505e <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d0 01 c0 	mov    DWORD PTR [esp],0xc001d036
c0006f8f:	e8 f7 8a 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 6c c2 00 00       	call   c001320c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d0 01 c0       	push   0xc001d051
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 97 34 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d0 01 c0       	push   0xc001d062
c000700e:	e8 f0 90 00 00       	call   c0010103 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d0 01 c0       	push   0xc001d06f
c0007023:	e8 db 90 00 00       	call   c0010103 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d079
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 c4 90 00 00       	jmp    c0010103 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 62 04 02 c0       	mov    ds:0xc0020462,eax
c00070cf:	66 89 15 60 04 02 c0 	mov    WORD PTR ds:0xc0020460,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0007217:	48                   	dec    eax
c0007218:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 13 db 00 00       	call   c0014d38 <HalSystemIdle()>
c0007225:	e8 68 4c 01 00       	call   c001be92 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 68 04 02 c0 ff 07 	mov    WORD PTR ds:0xc0020468,0x7ff
c000731d:	a3 6a 04 02 c0       	mov    ds:0xc002046a,eax
c0007322:	0f 01 1d 68 04 02 c0 	lidtd  ds:0xc0020468
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 a0 b6 01 c0       	push   0xc001b6a0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 b0 b6 01 c0       	push   0xc001b6b0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 ba b6 01 c0       	push   0xc001b6ba
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 c4 b6 01 c0       	push   0xc001b6c4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 ce b6 01 c0       	push   0xc001b6ce
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 d8 b6 01 c0       	push   0xc001b6d8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 e2 b6 01 c0       	push   0xc001b6e2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 ec b6 01 c0       	push   0xc001b6ec
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 f6 b6 01 c0       	push   0xc001b6f6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 fe b6 01 c0       	push   0xc001b6fe
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 08 b7 01 c0       	push   0xc001b708
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 10 b7 01 c0       	push   0xc001b710
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 18 b7 01 c0       	push   0xc001b718
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 20 b7 01 c0       	push   0xc001b720
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 28 b7 01 c0       	push   0xc001b728
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 30 b7 01 c0       	push   0xc001b730
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 3a b7 01 c0       	push   0xc001b73a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 44 b7 01 c0       	push   0xc001b744
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 4e b7 01 c0       	push   0xc001b74e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 e8 b7 01 c0       	push   0xc001b7e8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 ef b7 01 c0       	push   0xc001b7ef
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 da b7 01 c0       	push   0xc001b7da
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 e1 b7 01 c0       	push   0xc001b7e1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 58 b7 01 c0       	push   0xc001b758
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 62 b7 01 c0       	push   0xc001b762
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 6c b7 01 c0       	push   0xc001b76c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 76 b7 01 c0       	push   0xc001b776
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 80 b7 01 c0       	push   0xc001b780
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 8a b7 01 c0       	push   0xc001b78a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 94 b7 01 c0       	push   0xc001b794
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 9e b7 01 c0       	push   0xc001b79e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 a8 b7 01 c0       	push   0xc001b7a8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 b2 b7 01 c0       	push   0xc001b7b2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 bc b7 01 c0       	push   0xc001b7bc
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 c6 b7 01 c0       	push   0xc001b7c6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 d0 b7 01 c0       	push   0xc001b7d0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 26 b8 01 c0       	push   0xc001b826
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 30 b8 01 c0       	push   0xc001b830
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 3a b8 01 c0       	push   0xc001b83a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 44 b8 01 c0       	push   0xc001b844
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 4e b8 01 c0       	push   0xc001b84e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 58 b8 01 c0       	push   0xc001b858
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 62 b8 01 c0       	push   0xc001b862
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 6c b8 01 c0       	push   0xc001b86c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c0007614:	e8 b5 23 00 00       	call   c00099ce <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 41 15 00 00       	call   c0008b78 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 f6 b6 01 c0       	push   0xc001b6f6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 76 15 00 00       	call   c0008bbc <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 f4 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0f4
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 50 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020550
c00076c2:	8b 3d f4 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f0f4
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 f0 21 00 00       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 f4 f0 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f0f4,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 f4 f0 01 c0       	mov    eax,ds:0xc001f0f4
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d1 01 c0       	push   0xc001d11c
c000770e:	e8 75 2d 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d1 01 c0       	push   0xc001d14c
c000772d:	e8 d1 89 00 00       	call   c0010103 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d1 01 c0       	push   0xc001d151
c0007743:	e8 bb 89 00 00       	call   c0010103 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0007763:	48                   	dec    eax
c0007764:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c0007781:	e8 48 22 00 00       	call   c00099ce <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c0007797:	e8 ee 1e 00 00       	call   c000968a <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 70 04 02 c0       	mov    ds:0xc0020470,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 d1 01 c0       	push   0xc001d158
c0007862:	e8 21 2c 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 b1 81 00 00       	call   c000fa1d <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 6c 1b 00 00       	call   c00093f4 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 1d 1c 00 00       	call   c00094b0 <VAS::VAS()>
c0007893:	89 1d 50 05 02 c0    	mov    DWORD PTR ds:0xc0020550,ebx
c0007899:	e8 8c 45 01 00       	call   c001be2a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 58 04 02 c0    	mov    DWORD PTR ds:0xc0020458,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 97 1e 00 00       	call   c0009766 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 8c 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfb74],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 d1 01 c0       	push   0xc001d170
c000792c:	e8 d2 87 00 00       	call   c0010103 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 8c 04 02 c0    	lea    edx,[ebp-0x3ffdfb74]
c000796e:	8d 84 05 8d 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfb73]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 84 04 02 c0    	add    DWORD PTR ds:0xc0020484,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 d1 01 c0       	push   0xc001d170
c0007993:	e8 6b 87 00 00       	call   c0010103 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 84 04 02 c0    	sub    DWORD PTR ds:0xc0020484,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 8c 04 02 c0       	add    eax,0xc002048c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 f8 f0 01 c0    	mov    esi,DWORD PTR ds:0xc001f0f8
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 f8 f0 01 c0    	add    eax,DWORD PTR ds:0xc001f0f8
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 f8 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0f8
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 84 04 02 c0    	dec    DWORD PTR ds:0xc0020484
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d215
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 80 86 00 00       	jmp    c0010103 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 78 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020478
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 78 04 02 c0    	mov    DWORD PTR ds:0xc0020478,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 78 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020478,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 9c 04 02 c0 01 	xor    BYTE PTR ds:0xc002049c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 b8 26 00 00       	call   c000a1a8 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 d1 01 c0       	push   0xc001d198
c0007aff:	e8 ff 85 00 00       	call   c0010103 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 78 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020478
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 78 04 02 c0       	mov    eax,ds:0xc0020478
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 84 04 02 c0    	inc    DWORD PTR ds:0xc0020484
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0007b99:	48                   	dec    eax
c0007b9a:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 7c 04 02 c0    	cmp    DWORD PTR ds:0xc002047c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 7c 04 02 c0    	mov    DWORD PTR ds:0xc002047c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 8c 04 02 c0       	push   0xc002048c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b d2 01 c0       	push   0xc001d22b
c0007c18:	e8 6b 28 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 d1 01 c0       	push   0xc001d1c8
c0007ca4:	e8 df 27 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec d1 01 c0       	push   0xc001d1ec
c0007d40:	e8 43 27 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 88 04 02 c0    	add    eax,DWORD PTR ds:0xc0020488
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 d2 01 c0       	push   0xc001d251
c0007d76:	e8 0d 27 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 d2 01 c0       	push   0xc001d243
c0007de5:	e8 19 83 00 00       	call   c0010103 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 88 04 02 c0 02 	add    DWORD PTR ds:0xc0020488,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 88 04 02 c0       	mov    eax,ds:0xc0020488
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 88 04 02 c0       	mov    eax,ds:0xc0020488
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 88 04 02 c0       	mov    eax,ds:0xc0020488
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 88 04 02 c0       	mov    ds:0xc0020488,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 d2 01 c0       	mov    edx,0xc001d2b0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 03 11 00 00       	call   c0008fd4 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 98 24 00 00       	call   c000a392 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d d2 01 c0       	push   0xc001d26d
c0007fa7:	e8 57 81 00 00       	call   c0010103 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0007ff0:	e8 1f b3 00 00       	call   c0013314 <schedule()>
c0007ff5:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 83 3c 01 00       	call   c001bd10 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a d2 01 c0       	push   0xc001d28a
c00080a2:	e8 5c 80 00 00       	call   c0010103 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 22 0d 00 00       	call   c0008df2 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 d2 01 c0       	mov    edx,0xc001d2b0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 3c d3 01 c0       	mov    edx,0xc001d33c
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 8f 0e 00 00       	call   c0008fd4 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 21 22 00 00       	call   c000a392 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 6c 45 00 00       	call   c000c6f8 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 3e dd 00 00       	call   c0015ef0 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 20 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ee0]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 20 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0ee0]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 d8 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1028]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 b0 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1050]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d a4 04 02 c0    	cmp    DWORD PTR ds:0xc00204a4,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 61 da 00 00       	call   c0015d7c <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d a4 04 02 c0    	cmp    DWORD PTR ds:0xc00204a4,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 bc da 00 00       	jmp    c0015e84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2c4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 ef 7c 00 00       	jmp    c0010103 <KePanic(char const*)>
c0008414:	a1 a4 04 02 c0       	mov    eax,ds:0xc00204a4
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d a4 04 02 c0    	mov    DWORD PTR ds:0xc00204a4,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 70 2d 00 00       	jmp    c000b2df <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 d2 01 c0       	mov    esi,0xc001d2d2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d a4 04 02 c0    	cmp    DWORD PTR ds:0xc00204a4,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 ce d5 00 00       	call   c0015e84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 e4 04 00 00       	call   c0008df2 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 3c d3 01 c0       	mov    edx,0xc001d33c
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 b2 08 00 00       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 1a 0f 00 00       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 ec 00 00 00    	je     c0008b4a <VgaText::receiveKey(unsigned char)+0x104>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 2c                	jne    c0008a94 <VgaText::receiveKey(unsigned char)+0x4e>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	74 73                	je     c0008aeb <VgaText::receiveKey(unsigned char)+0xa5>
c0008a78:	50                   	push   eax
c0008a79:	50                   	push   eax
c0008a7a:	6a 08                	push   0x8
c0008a7c:	53                   	push   ebx
c0008a7d:	e8 82 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a82:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a85:	e8 b6 7a ff ff       	call   c0000540 <strlen>
c0008a8a:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008a92:	eb 54                	jmp    c0008ae8 <VgaText::receiveKey(unsigned char)+0xa2>
c0008a94:	3c 18                	cmp    al,0x18
c0008a96:	77 29                	ja     c0008ac1 <VgaText::receiveKey(unsigned char)+0x7b>
c0008a98:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a9b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a9e:	68 e3 d2 01 c0       	push   0xc001d2e3
c0008aa3:	53                   	push   ebx
c0008aa4:	e8 ff fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008aa9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008aac:	8d 46 40             	lea    eax,[esi+0x40]
c0008aaf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ab2:	0f b6 c0             	movzx  eax,al
c0008ab5:	50                   	push   eax
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 7a fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008abc:	83 c4 20             	add    esp,0x20
c0008abf:	eb 0f                	jmp    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008ac1:	0f be c0             	movsx  eax,al
c0008ac4:	51                   	push   ecx
c0008ac5:	51                   	push   ecx
c0008ac6:	50                   	push   eax
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 37 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008ad5:	89 f0                	mov    eax,esi
c0008ad7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008adb:	52                   	push   edx
c0008adc:	52                   	push   edx
c0008add:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008ae1:	50                   	push   eax
c0008ae2:	57                   	push   edi
c0008ae3:	e8 d8 7c ff ff       	call   c00007c0 <strcat>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	89 f0                	mov    eax,esi
c0008aed:	3c 0a                	cmp    al,0xa
c0008aef:	74 09                	je     c0008afa <VgaText::receiveKey(unsigned char)+0xb4>
c0008af1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008af8:	74 50                	je     c0008b4a <VgaText::receiveKey(unsigned char)+0x104>
c0008afa:	83 ec 0c             	sub    esp,0xc
c0008afd:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b03:	53                   	push   ebx
c0008b04:	e8 37 7a ff ff       	call   c0000540 <strlen>
c0008b09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b0c:	89 c6                	mov    esi,eax
c0008b0e:	e8 2d 7a ff ff       	call   c0000540 <strlen>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b1a:	3d 80 00 00 00       	cmp    eax,0x80
c0008b1f:	76 10                	jbe    c0008b31 <VgaText::receiveKey(unsigned char)+0xeb>
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	68 e9 d2 01 c0       	push   0xc001d2e9
c0008b29:	e8 d5 75 00 00       	call   c0010103 <KePanic(char const*)>
c0008b2e:	83 c4 10             	add    esp,0x10
c0008b31:	50                   	push   eax
c0008b32:	50                   	push   eax
c0008b33:	57                   	push   edi
c0008b34:	53                   	push   ebx
c0008b35:	e8 86 7c ff ff       	call   c00007c0 <strcat>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 30                	push   0x30
c0008b3f:	6a 00                	push   0x0
c0008b41:	57                   	push   edi
c0008b42:	e8 89 79 ff ff       	call   c00004d0 <memset>
c0008b47:	83 c4 10             	add    esp,0x10
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	5b                   	pop    ebx
c0008b4e:	5e                   	pop    esi
c0008b4f:	5f                   	pop    edi
c0008b50:	c3                   	ret    
c0008b51:	90                   	nop

c0008b52 <VgaText::doUpdate()>:
c0008b52:	c3                   	ret    

c0008b53 <newTerminal(char*)>:
c0008b53:	83 ec 28             	sub    esp,0x28
c0008b56:	68 34 01 00 00       	push   0x134
c0008b5b:	e8 59 ec ff ff       	call   c00077b9 <malloc>
c0008b60:	5a                   	pop    edx
c0008b61:	59                   	pop    ecx
c0008b62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b66:	50                   	push   eax
c0008b67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b6b:	e8 8a fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008b70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b74:	83 c4 2c             	add    esp,0x2c
c0008b77:	c3                   	ret    

c0008b78 <TSS::TSS()>:
c0008b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b83:	90                   	nop
c0008b84:	c3                   	ret    
c0008b85:	90                   	nop
c0008b86:	66 90                	xchg   ax,ax

c0008b88 <TSS::setESP(unsigned long)>:
c0008b88:	55                   	push   ebp
c0008b89:	89 e5                	mov    ebp,esp
c0008b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b91:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008b94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b97:	90                   	nop
c0008b98:	5d                   	pop    ebp
c0008b99:	c3                   	ret    
c0008b9a:	66 90                	xchg   ax,ax

c0008b9c <TSS::flush()>:
c0008b9c:	55                   	push   ebp
c0008b9d:	89 e5                	mov    ebp,esp
c0008b9f:	83 ec 10             	sub    esp,0x10
c0008ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ba7:	83 c8 03             	or     eax,0x3
c0008baa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bae:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008bb2:	66 89 d0             	mov    ax,dx
c0008bb5:	0f 00 d8             	ltr    ax
c0008bb8:	90                   	nop
c0008bb9:	c9                   	leave  
c0008bba:	c3                   	ret    
c0008bbb:	90                   	nop

c0008bbc <TSS::setup(unsigned long, unsigned long)>:
c0008bbc:	55                   	push   ebp
c0008bbd:	89 e5                	mov    ebp,esp
c0008bbf:	83 ec 18             	sub    esp,0x18
c0008bc2:	83 ec 0c             	sub    esp,0xc
c0008bc5:	6a 68                	push   0x68
c0008bc7:	e8 ed eb ff ff       	call   c00077b9 <malloc>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	89 c2                	mov    edx,eax
c0008bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bd4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bdd:	83 ec 04             	sub    esp,0x4
c0008be0:	6a 68                	push   0x68
c0008be2:	6a 00                	push   0x0
c0008be4:	50                   	push   eax
c0008be5:	e8 e6 78 ff ff       	call   c00004d0 <memset>
c0008bea:	83 c4 10             	add    esp,0x10
c0008bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bff:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c17:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c23:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c47:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c62:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c6e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c84:	0f 20 da             	mov    edx,cr3
c0008c87:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008c8a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008c8d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c96:	83 ec 08             	sub    esp,0x8
c0008c99:	50                   	push   eax
c0008c9a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c9d:	50                   	push   eax
c0008c9e:	e8 9d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008ca3:	83 c4 10             	add    esp,0x10
c0008ca6:	83 ec 08             	sub    esp,0x8
c0008ca9:	6a 68                	push   0x68
c0008cab:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cae:	50                   	push   eax
c0008caf:	e8 a8 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008cbb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cbe:	83 e0 0f             	and    eax,0xf
c0008cc1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008cc4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cc7:	83 c8 40             	or     eax,0x40
c0008cca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ccd:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0008cd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008cd8:	05 78 01 00 00       	add    eax,0x178
c0008cdd:	83 ec 04             	sub    esp,0x4
c0008ce0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008ce3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008ce6:	50                   	push   eax
c0008ce7:	e8 a4 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	89 c2                	mov    edx,eax
c0008cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf4:	89 10                	mov    DWORD PTR [eax],edx
c0008cf6:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0008cfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d01:	05 78 01 00 00       	add    eax,0x178
c0008d06:	83 ec 0c             	sub    esp,0xc
c0008d09:	50                   	push   eax
c0008d0a:	e8 ab e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d17:	c9                   	leave  
c0008d18:	c3                   	ret    
c0008d19:	90                   	nop

c0008d1a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d25:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d2a:	75 08                	jne    c0008d34 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d2c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d32:	eb 38                	jmp    c0008d6c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d34:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d39:	75 17                	jne    c0008d52 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d49:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d4f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d52:	89 c1                	mov    ecx,eax
c0008d54:	83 e1 fd             	and    ecx,0xfffffffd
c0008d57:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d5d:	74 cd                	je     c0008d2c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d5f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d64:	83 e0 ef             	and    eax,0xffffffef
c0008d67:	83 f8 08             	cmp    eax,0x8
c0008d6a:	76 c0                	jbe    c0008d2c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d6c:	31 c0                	xor    eax,eax
c0008d6e:	c3                   	ret    
c0008d6f:	90                   	nop

c0008d70 <ReservedFilename::isAtty()>:
c0008d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d74:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d77:	31 c0                	xor    eax,eax
c0008d79:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d7f:	74 09                	je     c0008d8a <ReservedFilename::isAtty()+0x1a>
c0008d81:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d87:	0f 94 c0             	sete   al
c0008d8a:	c3                   	ret    
c0008d8b:	90                   	nop

c0008d8c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008d94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d9b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008da0:	75 08                	jne    c0008daa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008da2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008da8:	eb 3d                	jmp    c0008de7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008daa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008daf:	75 17                	jne    c0008dc8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008db1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008db6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008db9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008dbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008dc5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008dc8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008dcd:	75 04                	jne    c0008dd3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008dcf:	89 0a                	mov    DWORD PTR [edx],ecx
c0008dd1:	eb 14                	jmp    c0008de7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dd3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008dd8:	74 c8                	je     c0008da2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008dda:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ddf:	83 e0 ef             	and    eax,0xffffffef
c0008de2:	83 f8 08             	cmp    eax,0x8
c0008de5:	76 bb                	jbe    c0008da2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008de7:	31 c0                	xor    eax,eax
c0008de9:	c3                   	ret    

c0008dea <UnixFile::getFileDescriptor()>:
c0008dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df1:	c3                   	ret    

c0008df2 <UnixFile::UnixFile(int)>:
c0008df2:	53                   	push   ebx
c0008df3:	83 ec 28             	sub    esp,0x28
c0008df6:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c0008dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dff:	89 10                	mov    DWORD PTR [eax],edx
c0008e01:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e09:	0f 8f 8c 01 00 00    	jg     c0008f9b <UnixFile::UnixFile(int)+0x1a9>
c0008e0f:	a1 60 f1 01 c0       	mov    eax,ds:0xc001f160
c0008e14:	8d 50 01             	lea    edx,[eax+0x1]
c0008e17:	89 15 60 f1 01 c0    	mov    DWORD PTR ds:0xc001f160,edx
c0008e1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e21:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e24:	83 ec 08             	sub    esp,0x8
c0008e27:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e2b:	68 38 05 02 c0       	push   0xc0020538
c0008e30:	e8 c3 30 01 00       	call   c001bef8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	a0 34 05 02 c0       	mov    al,ds:0xc0020534
c0008e3d:	83 f0 01             	xor    eax,0x1
c0008e40:	84 c0                	test   al,al
c0008e42:	0f 84 54 01 00 00    	je     c0008f9c <UnixFile::UnixFile(int)+0x1aa>
c0008e48:	c6 05 34 05 02 c0 01 	mov    BYTE PTR ds:0xc0020534,0x1
c0008e4f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e57:	83 ec 0c             	sub    esp,0xc
c0008e5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e5e:	e8 56 e9 ff ff       	call   c00077b9 <malloc>
c0008e63:	83 c4 10             	add    esp,0x10
c0008e66:	89 c3                	mov    ebx,eax
c0008e68:	83 ec 08             	sub    esp,0x8
c0008e6b:	68 03 ff ff 0f       	push   0xfffff03
c0008e70:	53                   	push   ebx
c0008e71:	e8 2c 01 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008e76:	83 c4 10             	add    esp,0x10
c0008e79:	89 1d 2c 05 02 c0    	mov    DWORD PTR ds:0xc002052c,ebx
c0008e7f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e87:	83 ec 0c             	sub    esp,0xc
c0008e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e8e:	e8 26 e9 ff ff       	call   c00077b9 <malloc>
c0008e93:	83 c4 10             	add    esp,0x10
c0008e96:	89 c3                	mov    ebx,eax
c0008e98:	83 ec 08             	sub    esp,0x8
c0008e9b:	68 01 ff ff 0f       	push   0xfffff01
c0008ea0:	53                   	push   ebx
c0008ea1:	e8 fc 00 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008ea6:	83 c4 10             	add    esp,0x10
c0008ea9:	89 1d 30 05 02 c0    	mov    DWORD PTR ds:0xc0020530,ebx
c0008eaf:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ebe:	e8 f6 e8 ff ff       	call   c00077b9 <malloc>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	89 c3                	mov    ebx,eax
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 00 ff ff 0f       	push   0xfffff00
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 cc 00 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	89 1d 24 05 02 c0    	mov    DWORD PTR ds:0xc0020524,ebx
c0008edf:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008ee7:	83 ec 0c             	sub    esp,0xc
c0008eea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008eee:	e8 c6 e8 ff ff       	call   c00077b9 <malloc>
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 c3                	mov    ebx,eax
c0008ef8:	83 ec 08             	sub    esp,0x8
c0008efb:	68 02 ff ff 0f       	push   0xfffff02
c0008f00:	53                   	push   ebx
c0008f01:	e8 9c 00 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 1d 28 05 02 c0    	mov    DWORD PTR ds:0xc0020528,ebx
c0008f0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f17:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f1c:	7f 7e                	jg     c0008f9c <UnixFile::UnixFile(int)+0x1aa>
c0008f1e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f26:	83 ec 0c             	sub    esp,0xc
c0008f29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f2d:	e8 87 e8 ff ff       	call   c00077b9 <malloc>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	89 c3                	mov    ebx,eax
c0008f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f3b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f40:	83 ec 08             	sub    esp,0x8
c0008f43:	50                   	push   eax
c0008f44:	53                   	push   ebx
c0008f45:	e8 58 00 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f51:	89 1c 85 00 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb00],ebx
c0008f58:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f60:	83 ec 0c             	sub    esp,0xc
c0008f63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f67:	e8 4d e8 ff ff       	call   c00077b9 <malloc>
c0008f6c:	83 c4 10             	add    esp,0x10
c0008f6f:	89 c3                	mov    ebx,eax
c0008f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f75:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f7a:	83 ec 08             	sub    esp,0x8
c0008f7d:	50                   	push   eax
c0008f7e:	53                   	push   ebx
c0008f7f:	e8 1e 00 00 00       	call   c0008fa2 <ReservedFilename::ReservedFilename(int)>
c0008f84:	83 c4 10             	add    esp,0x10
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	89 1c 85 c0 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb40],ebx
c0008f92:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008f96:	e9 7c ff ff ff       	jmp    c0008f17 <UnixFile::UnixFile(int)+0x125>
c0008f9b:	90                   	nop
c0008f9c:	83 c4 28             	add    esp,0x28
c0008f9f:	5b                   	pop    ebx
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <ReservedFilename::ReservedFilename(int)>:
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fa9:	83 ec 08             	sub    esp,0x8
c0008fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3c fe ff ff       	call   c0008df2 <UnixFile::UnixFile(int)>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	ba 20 d4 01 c0       	mov    edx,0xc001d420
c0008fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fc2:	89 10                	mov    DWORD PTR [eax],edx
c0008fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008fcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fcf:	90                   	nop
c0008fd0:	83 c4 0c             	add    esp,0xc
c0008fd3:	c3                   	ret    

c0008fd4 <UnixFile::~UnixFile()>:
c0008fd4:	83 ec 1c             	sub    esp,0x1c
c0008fd7:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c0008fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe0:	89 10                	mov    DWORD PTR [eax],edx
c0008fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008fee:	7f 73                	jg     c0009063 <UnixFile::~UnixFile()+0x8f>
c0008ff0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	68 38 05 02 c0       	push   0xc0020538
c0009000:	e8 c7 2f 01 00       	call   c001bfcc <LinkedList<UnixFile>::getFirstElement()>
c0009005:	83 c4 10             	add    esp,0x10
c0009008:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000900c:	83 ec 0c             	sub    esp,0xc
c000900f:	68 38 05 02 c0       	push   0xc0020538
c0009014:	e8 bb 2f 01 00       	call   c001bfd4 <LinkedList<UnixFile>::removeFirst()>
c0009019:	83 c4 10             	add    esp,0x10
c000901c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009020:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009024:	74 40                	je     c0009066 <UnixFile::~UnixFile()+0x92>
c0009026:	83 ec 08             	sub    esp,0x8
c0009029:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000902d:	68 38 05 02 c0       	push   0xc0020538
c0009032:	e8 c1 2e 01 00       	call   c001bef8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009037:	83 c4 10             	add    esp,0x10
c000903a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000903e:	8d 50 01             	lea    edx,[eax+0x1]
c0009041:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009045:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000904a:	0f 94 c0             	sete   al
c000904d:	84 c0                	test   al,al
c000904f:	74 a7                	je     c0008ff8 <UnixFile::~UnixFile()+0x24>
c0009051:	83 ec 0c             	sub    esp,0xc
c0009054:	68 dc d3 01 c0       	push   0xc001d3dc
c0009059:	e8 a5 70 00 00       	call   c0010103 <KePanic(char const*)>
c000905e:	83 c4 10             	add    esp,0x10
c0009061:	eb 95                	jmp    c0008ff8 <UnixFile::~UnixFile()+0x24>
c0009063:	90                   	nop
c0009064:	eb 01                	jmp    c0009067 <UnixFile::~UnixFile()+0x93>
c0009066:	90                   	nop
c0009067:	90                   	nop
c0009068:	83 c4 1c             	add    esp,0x1c
c000906b:	c3                   	ret    

c000906c <UnixFile::~UnixFile()>:
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	83 ec 0c             	sub    esp,0xc
c0009072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009076:	e8 59 ff ff ff       	call   c0008fd4 <UnixFile::~UnixFile()>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	83 ec 08             	sub    esp,0x8
c0009081:	6a 0c                	push   0xc
c0009083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009087:	e8 06 13 00 00       	call   c000a392 <operator delete(void*, unsigned long)>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	83 c4 0c             	add    esp,0xc
c0009092:	c3                   	ret    
c0009093:	90                   	nop

c0009094 <ReservedFilename::~ReservedFilename()>:
c0009094:	83 ec 0c             	sub    esp,0xc
c0009097:	ba 20 d4 01 c0       	mov    edx,0xc001d420
c000909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a0:	89 10                	mov    DWORD PTR [eax],edx
c00090a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a6:	83 ec 0c             	sub    esp,0xc
c00090a9:	50                   	push   eax
c00090aa:	e8 25 ff ff ff       	call   c0008fd4 <UnixFile::~UnixFile()>
c00090af:	83 c4 10             	add    esp,0x10
c00090b2:	90                   	nop
c00090b3:	83 c4 0c             	add    esp,0xc
c00090b6:	c3                   	ret    
c00090b7:	90                   	nop

c00090b8 <ReservedFilename::~ReservedFilename()>:
c00090b8:	83 ec 0c             	sub    esp,0xc
c00090bb:	83 ec 0c             	sub    esp,0xc
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	e8 cd ff ff ff       	call   c0009094 <ReservedFilename::~ReservedFilename()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	83 ec 08             	sub    esp,0x8
c00090cd:	6a 0c                	push   0xc
c00090cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d3:	e8 ba 12 00 00       	call   c000a392 <operator delete(void*, unsigned long)>
c00090d8:	83 c4 10             	add    esp,0x10
c00090db:	83 c4 0c             	add    esp,0xc
c00090de:	c3                   	ret    

c00090df <getFromFileDescriptor(int)>:
c00090df:	53                   	push   ebx
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090e7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00090ed:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00090f3:	7f 2c                	jg     c0009121 <getFromFileDescriptor(int)+0x42>
c00090f5:	83 ec 0c             	sub    esp,0xc
c00090f8:	68 38 05 02 c0       	push   0xc0020538
c00090fd:	e8 ca 2e 01 00       	call   c001bfcc <LinkedList<UnixFile>::getFirstElement()>
c0009102:	83 c4 10             	add    esp,0x10
c0009105:	85 c0                	test   eax,eax
c0009107:	75 04                	jne    c000910d <getFromFileDescriptor(int)+0x2e>
c0009109:	31 c0                	xor    eax,eax
c000910b:	eb 6e                	jmp    c000917b <getFromFileDescriptor(int)+0x9c>
c000910d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009110:	74 69                	je     c000917b <getFromFileDescriptor(int)+0x9c>
c0009112:	52                   	push   edx
c0009113:	52                   	push   edx
c0009114:	50                   	push   eax
c0009115:	68 38 05 02 c0       	push   0xc0020538
c000911a:	e8 57 2f 01 00       	call   c001c076 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000911f:	eb e1                	jmp    c0009102 <getFromFileDescriptor(int)+0x23>
c0009121:	a1 2c 05 02 c0       	mov    eax,ds:0xc002052c
c0009126:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000912c:	74 4d                	je     c000917b <getFromFileDescriptor(int)+0x9c>
c000912e:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c0009133:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009139:	74 40                	je     c000917b <getFromFileDescriptor(int)+0x9c>
c000913b:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c0009140:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009146:	74 33                	je     c000917b <getFromFileDescriptor(int)+0x9c>
c0009148:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c000914d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009153:	74 26                	je     c000917b <getFromFileDescriptor(int)+0x9c>
c0009155:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000915b:	83 f8 08             	cmp    eax,0x8
c000915e:	77 09                	ja     c0009169 <getFromFileDescriptor(int)+0x8a>
c0009160:	8b 04 85 00 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb00]
c0009167:	eb 12                	jmp    c000917b <getFromFileDescriptor(int)+0x9c>
c0009169:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000916f:	83 fb 08             	cmp    ebx,0x8
c0009172:	77 95                	ja     c0009109 <getFromFileDescriptor(int)+0x2a>
c0009174:	8b 04 9d c0 04 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb40]
c000917b:	83 c4 08             	add    esp,0x8
c000917e:	5b                   	pop    ebx
c000917f:	c3                   	ret    

c0009180 <__static_initialization_and_destruction_0(int, int)>:
c0009180:	83 ec 0c             	sub    esp,0xc
c0009183:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009188:	75 34                	jne    c00091be <__static_initialization_and_destruction_0(int, int)+0x3e>
c000918a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009192:	75 2a                	jne    c00091be <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009194:	83 ec 0c             	sub    esp,0xc
c0009197:	68 38 05 02 c0       	push   0xc0020538
c000919c:	e8 15 2d 01 00       	call   c001beb6 <LinkedList<UnixFile>::LinkedList()>
c00091a1:	83 c4 10             	add    esp,0x10
c00091a4:	83 ec 04             	sub    esp,0x4
c00091a7:	68 f0 f0 01 c0       	push   0xc001f0f0
c00091ac:	68 38 05 02 c0       	push   0xc0020538
c00091b1:	68 b4 be 01 c0       	push   0xc001beb4
c00091b6:	e8 87 11 00 00       	call   c000a342 <__cxa_atexit>
c00091bb:	83 c4 10             	add    esp,0x10
c00091be:	90                   	nop
c00091bf:	83 c4 0c             	add    esp,0xc
c00091c2:	c3                   	ret    

c00091c3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00091c3:	83 ec 0c             	sub    esp,0xc
c00091c6:	83 ec 08             	sub    esp,0x8
c00091c9:	68 ff ff 00 00       	push   0xffff
c00091ce:	6a 01                	push   0x1
c00091d0:	e8 ab ff ff ff       	call   c0009180 <__static_initialization_and_destruction_0(int, int)>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	83 c4 0c             	add    esp,0xc
c00091db:	c3                   	ret    

c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091dc:	53                   	push   ebx
c00091dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091e5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00091eb:	89 c8                	mov    eax,ecx
c00091ed:	d1 e8                	shr    eax,1
c00091ef:	03 05 68 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f168
c00091f5:	83 e1 01             	and    ecx,0x1
c00091f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00091fa:	75 09                	jne    c0009205 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00091fc:	83 e2 f0             	and    edx,0xfffffff0
c00091ff:	09 da                	or     edx,ebx
c0009201:	88 10                	mov    BYTE PTR [eax],dl
c0009203:	5b                   	pop    ebx
c0009204:	c3                   	ret    
c0009205:	c1 e3 04             	shl    ebx,0x4
c0009208:	83 e2 0f             	and    edx,0xf
c000920b:	09 da                	or     edx,ebx
c000920d:	88 10                	mov    BYTE PTR [eax],dl
c000920f:	5b                   	pop    ebx
c0009210:	c3                   	ret    

c0009211 <Virt::getPageState(unsigned long)>:
c0009211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009215:	8b 0d 68 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f168
c000921b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009221:	89 d0                	mov    eax,edx
c0009223:	d1 e8                	shr    eax,1
c0009225:	83 e2 01             	and    edx,0x1
c0009228:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000922b:	75 04                	jne    c0009231 <Virt::getPageState(unsigned long)+0x20>
c000922d:	83 e0 0f             	and    eax,0xf
c0009230:	c3                   	ret    
c0009231:	c0 e8 04             	shr    al,0x4
c0009234:	c3                   	ret    

c0009235 <Virt::allocateKernelVirtualPages(int)>:
c0009235:	55                   	push   ebp
c0009236:	31 ed                	xor    ebp,ebp
c0009238:	57                   	push   edi
c0009239:	56                   	push   esi
c000923a:	53                   	push   ebx
c000923b:	31 db                	xor    ebx,ebx
c000923d:	83 ec 1c             	sub    esp,0x1c
c0009240:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009244:	8b 3d 64 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f164
c000924a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000924f:	57                   	push   edi
c0009250:	e8 bc ff ff ff       	call   c0009211 <Virt::getPageState(unsigned long)>
c0009255:	5a                   	pop    edx
c0009256:	84 c0                	test   al,al
c0009258:	75 3a                	jne    c0009294 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000925a:	85 db                	test   ebx,ebx
c000925c:	75 02                	jne    c0009260 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000925e:	89 fd                	mov    ebp,edi
c0009260:	43                   	inc    ebx
c0009261:	39 f3                	cmp    ebx,esi
c0009263:	74 5a                	je     c00092bf <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009265:	47                   	inc    edi
c0009266:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000926c:	76 31                	jbe    c000929f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000926e:	c7 05 64 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f164,0xc8000
c0009278:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000927d:	75 28                	jne    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x72>
c000927f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009284:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009289:	57                   	push   edi
c000928a:	e8 82 ff ff ff       	call   c0009211 <Virt::getPageState(unsigned long)>
c000928f:	5a                   	pop    edx
c0009290:	84 c0                	test   al,al
c0009292:	74 c6                	je     c000925a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009294:	31 db                	xor    ebx,ebx
c0009296:	47                   	inc    edi
c0009297:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000929d:	77 cf                	ja     c000926e <Virt::allocateKernelVirtualPages(int)+0x39>
c000929f:	89 3d 64 f1 01 c0    	mov    DWORD PTR ds:0xc001f164,edi
c00092a5:	eb a8                	jmp    c000924f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092a7:	83 ec 0c             	sub    esp,0xc
c00092aa:	68 34 d4 01 c0       	push   0xc001d434
c00092af:	e8 4f 6e 00 00       	call   c0010103 <KePanic(char const*)>
c00092b4:	8b 3d 64 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f164
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	eb 90                	jmp    c000924f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092bf:	89 2d 64 f1 01 c0    	mov    DWORD PTR ds:0xc001f164,ebp
c00092c5:	4b                   	dec    ebx
c00092c6:	74 5f                	je     c0009327 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00092c8:	85 f6                	test   esi,esi
c00092ca:	74 3d                	je     c0009309 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092cc:	89 e8                	mov    eax,ebp
c00092ce:	31 db                	xor    ebx,ebx
c00092d0:	8d 7e ff             	lea    edi,[esi-0x1]
c00092d3:	eb 14                	jmp    c00092e9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092d5:	6a 01                	push   0x1
c00092d7:	43                   	inc    ebx
c00092d8:	50                   	push   eax
c00092d9:	e8 fe fe ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092de:	58                   	pop    eax
c00092df:	39 f3                	cmp    ebx,esi
c00092e1:	5a                   	pop    edx
c00092e2:	74 25                	je     c0009309 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092e4:	a1 64 f1 01 c0       	mov    eax,ds:0xc001f164
c00092e9:	8d 50 01             	lea    edx,[eax+0x1]
c00092ec:	85 db                	test   ebx,ebx
c00092ee:	89 15 64 f1 01 c0    	mov    DWORD PTR ds:0xc001f164,edx
c00092f4:	74 20                	je     c0009316 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00092f6:	39 df                	cmp    edi,ebx
c00092f8:	75 db                	jne    c00092d5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00092fa:	6a 03                	push   0x3
c00092fc:	43                   	inc    ebx
c00092fd:	50                   	push   eax
c00092fe:	e8 d9 fe ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009303:	59                   	pop    ecx
c0009304:	39 f3                	cmp    ebx,esi
c0009306:	58                   	pop    eax
c0009307:	75 db                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009309:	83 c4 1c             	add    esp,0x1c
c000930c:	89 e8                	mov    eax,ebp
c000930e:	5b                   	pop    ebx
c000930f:	c1 e0 0c             	shl    eax,0xc
c0009312:	5e                   	pop    esi
c0009313:	5f                   	pop    edi
c0009314:	5d                   	pop    ebp
c0009315:	c3                   	ret    
c0009316:	6a 02                	push   0x2
c0009318:	bb 01 00 00 00       	mov    ebx,0x1
c000931d:	50                   	push   eax
c000931e:	e8 b9 fe ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009323:	58                   	pop    eax
c0009324:	5a                   	pop    edx
c0009325:	eb bd                	jmp    c00092e4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009327:	6a 04                	push   0x4
c0009329:	8d 45 01             	lea    eax,[ebp+0x1]
c000932c:	55                   	push   ebp
c000932d:	a3 64 f1 01 c0       	mov    ds:0xc001f164,eax
c0009332:	e8 a5 fe ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009337:	59                   	pop    ecx
c0009338:	89 e8                	mov    eax,ebp
c000933a:	5b                   	pop    ebx
c000933b:	c1 e0 0c             	shl    eax,0xc
c000933e:	83 c4 1c             	add    esp,0x1c
c0009341:	5b                   	pop    ebx
c0009342:	5e                   	pop    esi
c0009343:	5f                   	pop    edi
c0009344:	5d                   	pop    ebp
c0009345:	c3                   	ret    

c0009346 <Virt::freeSwapfilePage(unsigned long)>:
c0009346:	53                   	push   ebx
c0009347:	8b 15 4c 05 02 c0    	mov    edx,DWORD PTR ds:0xc002054c
c000934d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009351:	b8 01 00 00 00       	mov    eax,0x1
c0009356:	89 cb                	mov    ebx,ecx
c0009358:	d3 e0                	shl    eax,cl
c000935a:	c1 eb 05             	shr    ebx,0x5
c000935d:	f7 d0                	not    eax
c000935f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009362:	5b                   	pop    ebx
c0009363:	c3                   	ret    

c0009364 <Virt::swapIDToSector(unsigned long)>:
c0009364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009368:	0f af 05 6c f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f16c
c000936f:	03 05 74 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f174
c0009375:	c3                   	ret    

c0009376 <Virt::allocateSwapfilePage()>:
c0009376:	55                   	push   ebp
c0009377:	31 d2                	xor    edx,edx
c0009379:	57                   	push   edi
c000937a:	56                   	push   esi
c000937b:	53                   	push   ebx
c000937c:	83 ec 0c             	sub    esp,0xc
c000937f:	8b 0d 6c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f16c
c0009385:	a1 70 f1 01 c0       	mov    eax,ds:0xc001f170
c000938a:	f7 f1                	div    ecx
c000938c:	39 0d 70 f1 01 c0    	cmp    DWORD PTR ds:0xc001f170,ecx
c0009392:	72 2d                	jb     c00093c1 <Virt::allocateSwapfilePage()+0x4b>
c0009394:	8b 35 4c 05 02 c0    	mov    esi,DWORD PTR ds:0xc002054c
c000939a:	8b 16                	mov    edx,DWORD PTR [esi]
c000939c:	f6 c2 01             	test   dl,0x1
c000939f:	74 3c                	je     c00093dd <Virt::allocateSwapfilePage()+0x67>
c00093a1:	31 c9                	xor    ecx,ecx
c00093a3:	bf 01 00 00 00       	mov    edi,0x1
c00093a8:	eb 12                	jmp    c00093bc <Virt::allocateSwapfilePage()+0x46>
c00093aa:	89 fd                	mov    ebp,edi
c00093ac:	89 ca                	mov    edx,ecx
c00093ae:	d3 e5                	shl    ebp,cl
c00093b0:	c1 ea 05             	shr    edx,0x5
c00093b3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00093b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00093b8:	85 ea                	test   edx,ebp
c00093ba:	74 2a                	je     c00093e6 <Virt::allocateSwapfilePage()+0x70>
c00093bc:	41                   	inc    ecx
c00093bd:	39 c8                	cmp    eax,ecx
c00093bf:	77 e9                	ja     c00093aa <Virt::allocateSwapfilePage()+0x34>
c00093c1:	83 ec 0c             	sub    esp,0xc
c00093c4:	68 9b d5 01 c0       	push   0xc001d59b
c00093c9:	e8 35 6d 00 00       	call   c0010103 <KePanic(char const*)>
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	31 c9                	xor    ecx,ecx
c00093d3:	83 c4 0c             	add    esp,0xc
c00093d6:	89 c8                	mov    eax,ecx
c00093d8:	5b                   	pop    ebx
c00093d9:	5e                   	pop    esi
c00093da:	5f                   	pop    edi
c00093db:	5d                   	pop    ebp
c00093dc:	c3                   	ret    
c00093dd:	89 f3                	mov    ebx,esi
c00093df:	bd 01 00 00 00       	mov    ebp,0x1
c00093e4:	31 c9                	xor    ecx,ecx
c00093e6:	09 ea                	or     edx,ebp
c00093e8:	89 c8                	mov    eax,ecx
c00093ea:	89 13                	mov    DWORD PTR [ebx],edx
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	5b                   	pop    ebx
c00093f0:	5e                   	pop    esi
c00093f1:	5f                   	pop    edi
c00093f2:	5d                   	pop    ebp
c00093f3:	c3                   	ret    

c00093f4 <Virt::virtualMemorySetup()>:
c00093f4:	53                   	push   ebx
c00093f5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093fa:	6a 0f                	push   0xf
c00093fc:	53                   	push   ebx
c00093fd:	43                   	inc    ebx
c00093fe:	e8 d9 fd ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009403:	58                   	pop    eax
c0009404:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000940a:	5a                   	pop    edx
c000940b:	75 ed                	jne    c00093fa <Virt::virtualMemorySetup()+0x6>
c000940d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009412:	6a 00                	push   0x0
c0009414:	53                   	push   ebx
c0009415:	43                   	inc    ebx
c0009416:	e8 c1 fd ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941b:	59                   	pop    ecx
c000941c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009422:	58                   	pop    eax
c0009423:	75 ed                	jne    c0009412 <Virt::virtualMemorySetup()+0x1e>
c0009425:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000942a:	6a 0f                	push   0xf
c000942c:	53                   	push   ebx
c000942d:	43                   	inc    ebx
c000942e:	e8 a9 fd ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009433:	58                   	pop    eax
c0009434:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000943a:	5a                   	pop    edx
c000943b:	75 ed                	jne    c000942a <Virt::virtualMemorySetup()+0x36>
c000943d:	5b                   	pop    ebx
c000943e:	c3                   	ret    

c000943f <Virt::setupPageSwapping(int)>:
c000943f:	53                   	push   ebx
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009447:	a1 c8 29 02 c0       	mov    eax,ds:0xc00229c8
c000944c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0009452:	8b 10                	mov    edx,DWORD PTR [eax]
c0009454:	53                   	push   ebx
c0009455:	c1 e3 0b             	shl    ebx,0xb
c0009458:	68 b2 d5 01 c0       	push   0xc001d5b2
c000945d:	50                   	push   eax
c000945e:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009461:	89 1d 70 f1 01 c0    	mov    DWORD PTR ds:0xc001f170,ebx
c0009467:	c6 05 78 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f178,0x43
c000946e:	c1 eb 08             	shr    ebx,0x8
c0009471:	a3 74 f1 01 c0       	mov    ds:0xc001f174,eax
c0009476:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009479:	c7 05 6c f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f16c,0x8
c0009483:	e8 31 e3 ff ff       	call   c00077b9 <malloc>
c0009488:	83 c4 0c             	add    esp,0xc
c000948b:	89 c1                	mov    ecx,eax
c000948d:	a3 4c 05 02 c0       	mov    ds:0xc002054c,eax
c0009492:	31 d2                	xor    edx,edx
c0009494:	a1 70 f1 01 c0       	mov    eax,ds:0xc001f170
c0009499:	f7 35 6c f1 01 c0    	div    DWORD PTR ds:0xc001f16c
c000949f:	c1 e8 05             	shr    eax,0x5
c00094a2:	50                   	push   eax
c00094a3:	6a 00                	push   0x0
c00094a5:	51                   	push   ecx
c00094a6:	e8 25 70 ff ff       	call   c00004d0 <memset>
c00094ab:	83 c4 18             	add    esp,0x18
c00094ae:	5b                   	pop    ebx
c00094af:	c3                   	ret    

c00094b0 <VAS::VAS()>:
c00094b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ca:	a3 50 05 02 c0       	mov    ds:0xc0020550,eax
c00094cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094db:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00094e9:	90                   	nop
c00094ea:	c3                   	ret    
c00094eb:	90                   	nop

c00094ec <VAS::VAS(VAS*)>:
c00094ec:	83 ec 0c             	sub    esp,0xc
c00094ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009505:	83 ec 0c             	sub    esp,0xc
c0009508:	68 54 d4 01 c0       	push   0xc001d454
c000950d:	e8 f1 6b 00 00       	call   c0010103 <KePanic(char const*)>
c0009512:	83 c4 10             	add    esp,0x10
c0009515:	90                   	nop
c0009516:	83 c4 0c             	add    esp,0xc
c0009519:	c3                   	ret    

c000951a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000951a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000951e:	89 c2                	mov    edx,eax
c0009520:	c1 e8 0a             	shr    eax,0xa
c0009523:	c1 ea 16             	shr    edx,0x16
c0009526:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000952b:	19 c9                	sbb    ecx,ecx
c000952d:	c1 e2 0c             	shl    edx,0xc
c0009530:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009536:	25 fc 0f 00 00       	and    eax,0xffc
c000953b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009542:	01 d0                	add    eax,edx
c0009544:	c3                   	ret    
c0009545:	90                   	nop

c0009546 <VAS::getPageTableEntry(unsigned long)>:
c0009546:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000954a:	89 ca                	mov    edx,ecx
c000954c:	c1 e9 0a             	shr    ecx,0xa
c000954f:	c1 ea 16             	shr    edx,0x16
c0009552:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009558:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000955e:	c1 e0 0c             	shl    eax,0xc
c0009561:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009564:	c3                   	ret    

c0009565 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009565:	57                   	push   edi
c0009566:	56                   	push   esi
c0009567:	be 01 00 00 00       	mov    esi,0x1
c000956c:	53                   	push   ebx
c000956d:	83 ec 10             	sub    esp,0x10
c0009570:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009574:	c1 eb 0c             	shr    ebx,0xc
c0009577:	eb 3f                	jmp    c00095b8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009579:	83 ec 08             	sub    esp,0x8
c000957c:	a1 50 05 02 c0       	mov    eax,ds:0xc0020550
c0009581:	57                   	push   edi
c0009582:	50                   	push   eax
c0009583:	e8 be ff ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c0009588:	83 c4 10             	add    esp,0x10
c000958b:	8b 00                	mov    eax,DWORD PTR [eax]
c000958d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009591:	f6 c4 04             	test   ah,0x4
c0009594:	75 60                	jne    c00095f6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009596:	80 fa 04             	cmp    dl,0x4
c0009599:	74 79                	je     c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000959b:	80 fa 02             	cmp    dl,0x2
c000959e:	0f 84 89 00 00 00    	je     c000962d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095a4:	80 fa 03             	cmp    dl,0x3
c00095a7:	0f 84 ae 00 00 00    	je     c000965b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095ad:	fe ca                	dec    dl
c00095af:	0f 84 93 00 00 00    	je     c0009648 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095b5:	43                   	inc    ebx
c00095b6:	31 f6                	xor    esi,esi
c00095b8:	53                   	push   ebx
c00095b9:	89 df                	mov    edi,ebx
c00095bb:	e8 51 fc ff ff       	call   c0009211 <Virt::getPageState(unsigned long)>
c00095c0:	c1 e7 0c             	shl    edi,0xc
c00095c3:	5a                   	pop    edx
c00095c4:	84 c0                	test   al,al
c00095c6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095ca:	75 ad                	jne    c0009579 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	68 c9 d5 01 c0       	push   0xc001d5c9
c00095d4:	e8 2a 6b 00 00       	call   c0010103 <KePanic(char const*)>
c00095d9:	5a                   	pop    edx
c00095da:	59                   	pop    ecx
c00095db:	57                   	push   edi
c00095dc:	8b 3d 50 05 02 c0    	mov    edi,DWORD PTR ds:0xc0020550
c00095e2:	57                   	push   edi
c00095e3:	e8 5e ff ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00095ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095f1:	f6 c4 04             	test   ah,0x4
c00095f4:	74 bf                	je     c00095b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00095f6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00095fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095ff:	83 ec 0c             	sub    esp,0xc
c0009602:	50                   	push   eax
c0009603:	e8 2b e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009608:	83 c4 10             	add    esp,0x10
c000960b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000960f:	80 fa 04             	cmp    dl,0x4
c0009612:	75 87                	jne    c000959b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009614:	89 f0                	mov    eax,esi
c0009616:	84 c0                	test   al,al
c0009618:	75 47                	jne    c0009661 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000961a:	c7 44 24 20 78 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d478
c0009622:	83 c4 10             	add    esp,0x10
c0009625:	5b                   	pop    ebx
c0009626:	5e                   	pop    esi
c0009627:	5f                   	pop    edi
c0009628:	e9 d6 6a 00 00       	jmp    c0010103 <KePanic(char const*)>
c000962d:	89 f0                	mov    eax,esi
c000962f:	84 c0                	test   al,al
c0009631:	75 15                	jne    c0009648 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009633:	83 ec 0c             	sub    esp,0xc
c0009636:	68 e5 d5 01 c0       	push   0xc001d5e5
c000963b:	e8 c3 6a 00 00       	call   c0010103 <KePanic(char const*)>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	e9 6d ff ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009648:	83 ec 08             	sub    esp,0x8
c000964b:	6a 00                	push   0x0
c000964d:	53                   	push   ebx
c000964e:	e8 89 fb ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009653:	83 c4 10             	add    esp,0x10
c0009656:	e9 5a ff ff ff       	jmp    c00095b5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965b:	89 f0                	mov    eax,esi
c000965d:	84 c0                	test   al,al
c000965f:	75 15                	jne    c0009676 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009661:	83 ec 08             	sub    esp,0x8
c0009664:	6a 00                	push   0x0
c0009666:	53                   	push   ebx
c0009667:	e8 70 fb ff ff       	call   c00091dc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000966c:	83 c4 10             	add    esp,0x10
c000966f:	83 c4 10             	add    esp,0x10
c0009672:	5b                   	pop    ebx
c0009673:	5e                   	pop    esi
c0009674:	5f                   	pop    edi
c0009675:	c3                   	ret    
c0009676:	c7 44 24 20 01 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d601
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	5b                   	pop    ebx
c0009682:	5e                   	pop    esi
c0009683:	5f                   	pop    edi
c0009684:	e9 7a 6a 00 00       	jmp    c0010103 <KePanic(char const*)>
c0009689:	90                   	nop

c000968a <VAS::freeAllocatedPages(unsigned long)>:
c000968a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000968e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009692:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009696:	74 09                	je     c00096a1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009698:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000969c:	e9 c4 fe ff ff       	jmp    c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c00096a1:	c7 44 24 04 9c d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d49c
c00096a9:	e9 da 0d 00 00       	jmp    c000a488 <Dbg::kprintf(char const*, ...)>

c00096ae <VAS::virtualToPhysical(unsigned long)>:
c00096ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096b2:	50                   	push   eax
c00096b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096b7:	52                   	push   edx
c00096b8:	e8 89 fe ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c00096bd:	59                   	pop    ecx
c00096be:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c0:	5a                   	pop    edx
c00096c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096c6:	c3                   	ret    
c00096c7:	90                   	nop

c00096c8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00096c8:	55                   	push   ebp
c00096c9:	57                   	push   edi
c00096ca:	56                   	push   esi
c00096cb:	53                   	push   ebx
c00096cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096d8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096dc:	85 db                	test   ebx,ebx
c00096de:	7e 22                	jle    c0009702 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096e0:	c1 e3 0c             	shl    ebx,0xc
c00096e3:	01 f3                	add    ebx,esi
c00096e5:	56                   	push   esi
c00096e6:	81 c6 00 10 00 00    	add    esi,0x1000
c00096ec:	55                   	push   ebp
c00096ed:	e8 54 fe ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c00096f2:	5a                   	pop    edx
c00096f3:	59                   	pop    ecx
c00096f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00096f6:	21 f9                	and    ecx,edi
c00096f8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00096fc:	39 f3                	cmp    ebx,esi
c00096fe:	89 08                	mov    DWORD PTR [eax],ecx
c0009700:	75 e3                	jne    c00096e5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009702:	5b                   	pop    ebx
c0009703:	5e                   	pop    esi
c0009704:	5f                   	pop    edi
c0009705:	5d                   	pop    ebp
c0009706:	c3                   	ret    
c0009707:	90                   	nop

c0009708 <VAS::setToWriteCombining(unsigned long, int)>:
c0009708:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000970d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009713:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000971a:	75 01                	jne    c000971d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000971c:	c3                   	ret    
c000971d:	68 80 00 00 00       	push   0x80
c0009722:	6a ff                	push   0xffffffff
c0009724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009728:	50                   	push   eax
c0009729:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000972d:	52                   	push   edx
c000972e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009732:	51                   	push   ecx
c0009733:	e8 90 ff ff ff       	call   c00096c8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009738:	83 c4 14             	add    esp,0x14
c000973b:	c3                   	ret    

c000973c <VAS::mapOtherVASIn(bool, VAS*)>:
c000973c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009741:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009745:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000974f:	19 c0                	sbb    eax,eax
c0009751:	83 ca 03             	or     edx,0x3
c0009754:	83 e0 fc             	and    eax,0xfffffffc
c0009757:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000975e:	0f 20 d8             	mov    eax,cr3
c0009761:	0f 22 d8             	mov    cr3,eax
c0009764:	c3                   	ret    
c0009765:	90                   	nop

c0009766 <VAS::~VAS()>:
c0009766:	83 ec 2c             	sub    esp,0x2c
c0009769:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009771:	fa                   	cli    
c0009772:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0009777:	40                   	inc    eax
c0009778:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000977d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009782:	8b 00                	mov    eax,DWORD PTR [eax]
c0009784:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009787:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000978d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009791:	6a 01                	push   0x1
c0009793:	50                   	push   eax
c0009794:	e8 a3 ff ff ff       	call   c000973c <VAS::mapOtherVASIn(bool, VAS*)>
c0009799:	83 c4 0c             	add    esp,0xc
c000979c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097a4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097ac:	0f 8f d4 00 00 00    	jg     c0009886 <VAS::~VAS()+0x120>
c00097b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097bd:	c1 e2 02             	shl    edx,0x2
c00097c0:	01 d0                	add    eax,edx
c00097c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097cc:	83 e0 01             	and    eax,0x1
c00097cf:	0f 84 a8 00 00 00    	je     c000987d <VAS::~VAS()+0x117>
c00097d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097dd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097e5:	7f 72                	jg     c0009859 <VAS::~VAS()+0xf3>
c00097e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00097eb:	c1 e0 0a             	shl    eax,0xa
c00097ee:	89 c2                	mov    edx,eax
c00097f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097f4:	01 d0                	add    eax,edx
c00097f6:	c1 e0 0c             	shl    eax,0xc
c00097f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097fd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009802:	8b 00                	mov    eax,DWORD PTR [eax]
c0009804:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009807:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000980d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009811:	6a 01                	push   0x1
c0009813:	50                   	push   eax
c0009814:	e8 01 fd ff ff       	call   c000951a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009819:	83 c4 0c             	add    esp,0xc
c000981c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009824:	8b 00                	mov    eax,DWORD PTR [eax]
c0009826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000982a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000982e:	25 01 04 00 00       	and    eax,0x401
c0009833:	3d 01 04 00 00       	cmp    eax,0x401
c0009838:	75 19                	jne    c0009853 <VAS::~VAS()+0xed>
c000983a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000983e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009843:	83 ec 0c             	sub    esp,0xc
c0009846:	50                   	push   eax
c0009847:	e8 e7 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000984c:	83 c4 10             	add    esp,0x10
c000984f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009853:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009857:	eb 84                	jmp    c00097dd <VAS::~VAS()+0x77>
c0009859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985d:	25 00 04 00 00       	and    eax,0x400
c0009862:	74 19                	je     c000987d <VAS::~VAS()+0x117>
c0009864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009868:	25 00 f0 ff ff       	and    eax,0xfffff000
c000986d:	83 ec 0c             	sub    esp,0xc
c0009870:	50                   	push   eax
c0009871:	e8 bd e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000987d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009881:	e9 1e ff ff ff       	jmp    c00097a4 <VAS::~VAS()+0x3e>
c0009886:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000988a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000988d:	83 ec 0c             	sub    esp,0xc
c0009890:	50                   	push   eax
c0009891:	e8 cf fc ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000989d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098a0:	83 ec 0c             	sub    esp,0xc
c00098a3:	50                   	push   eax
c00098a4:	e8 8a e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a9:	83 c4 10             	add    esp,0x10
c00098ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098b0:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00098b5:	48                   	dec    eax
c00098b6:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00098bb:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00098c0:	85 c0                	test   eax,eax
c00098c2:	75 01                	jne    c00098c5 <VAS::~VAS()+0x15f>
c00098c4:	fb                   	sti    
c00098c5:	90                   	nop
c00098c6:	83 c4 2c             	add    esp,0x2c
c00098c9:	c3                   	ret    

c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098ca:	55                   	push   ebp
c00098cb:	57                   	push   edi
c00098cc:	56                   	push   esi
c00098cd:	53                   	push   ebx
c00098ce:	83 ec 1c             	sub    esp,0x1c
c00098d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098d9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098df:	77 0b                	ja     c00098ec <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098e1:	0f 20 d8             	mov    eax,cr3
c00098e4:	0f 20 d8             	mov    eax,cr3
c00098e7:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00098ea:	75 47                	jne    c0009933 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c00098ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00098f0:	09 d8                	or     eax,ebx
c00098f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00098f7:	75 57                	jne    c0009950 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c00098f9:	89 de                	mov    esi,ebx
c00098fb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00098fe:	c1 ee 16             	shr    esi,0x16
c0009901:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009908:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000990c:	74 54                	je     c0009962 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000990e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009912:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009918:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000991c:	c1 e6 0c             	shl    esi,0xc
c000991f:	c1 eb 0a             	shr    ebx,0xa
c0009922:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009928:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000992b:	83 c4 1c             	add    esp,0x1c
c000992e:	5b                   	pop    ebx
c000992f:	5e                   	pop    esi
c0009930:	5f                   	pop    edi
c0009931:	5d                   	pop    ebp
c0009932:	c3                   	ret    
c0009933:	83 ec 0c             	sub    esp,0xc
c0009936:	68 c0 d4 01 c0       	push   0xc001d4c0
c000993b:	e8 48 0b 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0009940:	83 c4 10             	add    esp,0x10
c0009943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009947:	09 d8                	or     eax,ebx
c0009949:	a9 ff 0f 00 00       	test   eax,0xfff
c000994e:	74 a9                	je     c00098f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009950:	83 ec 0c             	sub    esp,0xc
c0009953:	68 28 d5 01 c0       	push   0xc001d528
c0009958:	e8 a6 67 00 00       	call   c0010103 <KePanic(char const*)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	eb 97                	jmp    c00098f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009962:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009966:	e8 2a e1 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000996b:	83 ec 0c             	sub    esp,0xc
c000996e:	89 c5                	mov    ebp,eax
c0009970:	8b 0d 50 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020550
c0009976:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000997a:	6a 01                	push   0x1
c000997c:	e8 b4 f8 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0009981:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009988:	6a 01                	push   0x1
c000998a:	50                   	push   eax
c000998b:	55                   	push   ebp
c000998c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009992:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009996:	51                   	push   ecx
c0009997:	e8 28 02 00 00       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000999c:	83 c4 1c             	add    esp,0x1c
c000999f:	68 00 10 00 00       	push   0x1000
c00099a4:	6a 00                	push   0x0
c00099a6:	50                   	push   eax
c00099a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099ab:	e8 20 6b ff ff       	call   c00004d0 <memset>
c00099b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b7:	e8 a9 fb ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c00099bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099c0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099c3:	83 c4 10             	add    esp,0x10
c00099c6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099c9:	e9 40 ff ff ff       	jmp    c000990e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099ce <VAS::allocatePages(int, int)>:
c00099ce:	55                   	push   ebp
c00099cf:	57                   	push   edi
c00099d0:	56                   	push   esi
c00099d1:	53                   	push   ebx
c00099d2:	83 ec 1c             	sub    esp,0x1c
c00099d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099d9:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c00099de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099e4:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00099ea:	83 e0 01             	and    eax,0x1
c00099ed:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00099f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00099f5:	0f 85 cc 00 00 00    	jne    c0009ac7 <VAS::allocatePages(int, int)+0xf9>
c00099fb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00099fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a02:	85 c0                	test   eax,eax
c0009a04:	0f 84 a1 00 00 00    	je     c0009aab <VAS::allocatePages(int, int)+0xdd>
c0009a0a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a12:	c1 e6 0c             	shl    esi,0xc
c0009a15:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a19:	85 c0                	test   eax,eax
c0009a1b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a1e:	7e 33                	jle    c0009a53 <VAS::allocatePages(int, int)+0x85>
c0009a20:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a28:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a2e:	e8 62 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a33:	55                   	push   ebp
c0009a34:	53                   	push   ebx
c0009a35:	50                   	push   eax
c0009a36:	57                   	push   edi
c0009a37:	e8 8e fe ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a44:	74 03                	je     c0009a49 <VAS::allocatePages(int, int)+0x7b>
c0009a46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a4f:	39 de                	cmp    esi,ebx
c0009a51:	75 db                	jne    c0009a2e <VAS::allocatePages(int, int)+0x60>
c0009a53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a58:	75 12                	jne    c0009a6c <VAS::allocatePages(int, int)+0x9e>
c0009a5a:	0f 20 d8             	mov    eax,cr3
c0009a5d:	0f 22 d8             	mov    cr3,eax
c0009a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a64:	83 c4 1c             	add    esp,0x1c
c0009a67:	5b                   	pop    ebx
c0009a68:	5e                   	pop    esi
c0009a69:	5f                   	pop    edi
c0009a6a:	5d                   	pop    ebp
c0009a6b:	c3                   	ret    
c0009a6c:	c1 ee 0a             	shr    esi,0xa
c0009a6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a73:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a79:	c1 eb 0a             	shr    ebx,0xa
c0009a7c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a82:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009a88:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009a8e:	39 c3                	cmp    ebx,eax
c0009a90:	77 ce                	ja     c0009a60 <VAS::allocatePages(int, int)+0x92>
c0009a92:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a95:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a9b:	39 d8                	cmp    eax,ebx
c0009a9d:	73 f3                	jae    c0009a92 <VAS::allocatePages(int, int)+0xc4>
c0009a9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aa3:	83 c4 1c             	add    esp,0x1c
c0009aa6:	5b                   	pop    ebx
c0009aa7:	5e                   	pop    esi
c0009aa8:	5f                   	pop    edi
c0009aa9:	5d                   	pop    ebp
c0009aaa:	c3                   	ret    
c0009aab:	83 ec 0c             	sub    esp,0xc
c0009aae:	68 4c d5 01 c0       	push   0xc001d54c
c0009ab3:	e8 4b 66 00 00       	call   c0010103 <KePanic(char const*)>
c0009ab8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009abb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abf:	83 c4 10             	add    esp,0x10
c0009ac2:	e9 43 ff ff ff       	jmp    c0009a0a <VAS::allocatePages(int, int)+0x3c>
c0009ac7:	83 ec 0c             	sub    esp,0xc
c0009aca:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009ace:	51                   	push   ecx
c0009acf:	e8 61 f7 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0009ad4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ad8:	83 c4 10             	add    esp,0x10
c0009adb:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ae0:	0f 87 9b 00 00 00    	ja     c0009b81 <VAS::allocatePages(int, int)+0x1b3>
c0009ae6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009aea:	85 d2                	test   edx,edx
c0009aec:	7e 3c                	jle    c0009b2a <VAS::allocatePages(int, int)+0x15c>
c0009aee:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009af2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009af6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009afa:	c1 e5 0c             	shl    ebp,0xc
c0009afd:	81 ce 00 04 00 00    	or     esi,0x400
c0009b03:	01 dd                	add    ebp,ebx
c0009b05:	e8 8b df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b0a:	56                   	push   esi
c0009b0b:	53                   	push   ebx
c0009b0c:	50                   	push   eax
c0009b0d:	57                   	push   edi
c0009b0e:	e8 b7 fd ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b13:	83 c4 10             	add    esp,0x10
c0009b16:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b1b:	74 03                	je     c0009b20 <VAS::allocatePages(int, int)+0x152>
c0009b1d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b20:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b26:	39 dd                	cmp    ebp,ebx
c0009b28:	75 db                	jne    c0009b05 <VAS::allocatePages(int, int)+0x137>
c0009b2a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b2f:	0f 84 25 ff ff ff    	je     c0009a5a <VAS::allocatePages(int, int)+0x8c>
c0009b35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b3d:	89 d3                	mov    ebx,edx
c0009b3f:	c1 e0 0c             	shl    eax,0xc
c0009b42:	c1 eb 0a             	shr    ebx,0xa
c0009b45:	01 d0                	add    eax,edx
c0009b47:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b4d:	c1 e8 0a             	shr    eax,0xa
c0009b50:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b56:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b5b:	2d 00 00 40 00       	sub    eax,0x400000
c0009b60:	39 c3                	cmp    ebx,eax
c0009b62:	0f 87 f8 fe ff ff    	ja     c0009a60 <VAS::allocatePages(int, int)+0x92>
c0009b68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b71:	39 d8                	cmp    eax,ebx
c0009b73:	73 f3                	jae    c0009b68 <VAS::allocatePages(int, int)+0x19a>
c0009b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b79:	83 c4 1c             	add    esp,0x1c
c0009b7c:	5b                   	pop    ebx
c0009b7d:	5e                   	pop    esi
c0009b7e:	5f                   	pop    edi
c0009b7f:	5d                   	pop    ebp
c0009b80:	c3                   	ret    
c0009b81:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009b86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b8c:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009b93:	0f 84 4d ff ff ff    	je     c0009ae6 <VAS::allocatePages(int, int)+0x118>
c0009b99:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ba1:	e9 40 ff ff ff       	jmp    c0009ae6 <VAS::allocatePages(int, int)+0x118>

c0009ba6 <VAS::setCPUSpecific(unsigned long)>:
c0009ba6:	83 ec 0c             	sub    esp,0xc
c0009ba9:	6a 05                	push   0x5
c0009bab:	68 00 00 40 c2       	push   0xc2400000
c0009bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb4:	50                   	push   eax
c0009bb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bb9:	52                   	push   edx
c0009bba:	e8 0b fd ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bbf:	83 c4 1c             	add    esp,0x1c
c0009bc2:	c3                   	ret    
c0009bc3:	90                   	nop

c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bc4:	55                   	push   ebp
c0009bc5:	57                   	push   edi
c0009bc6:	56                   	push   esi
c0009bc7:	53                   	push   ebx
c0009bc8:	83 ec 1c             	sub    esp,0x1c
c0009bcb:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009bd0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009bd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bda:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009bde:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009be4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009be8:	83 e0 01             	and    eax,0x1
c0009beb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009bef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bf3:	85 c0                	test   eax,eax
c0009bf5:	7e 39                	jle    c0009c30 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009bf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bfb:	89 f3                	mov    ebx,esi
c0009bfd:	c1 e0 0c             	shl    eax,0xc
c0009c00:	01 f0                	add    eax,esi
c0009c02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c06:	55                   	push   ebp
c0009c07:	53                   	push   ebx
c0009c08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c0c:	29 f0                	sub    eax,esi
c0009c0e:	01 d8                	add    eax,ebx
c0009c10:	50                   	push   eax
c0009c11:	57                   	push   edi
c0009c12:	e8 b3 fc ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c17:	83 c4 10             	add    esp,0x10
c0009c1a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c1f:	74 03                	je     c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c21:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c24:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c2a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c2e:	75 d6                	jne    c0009c06 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c30:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c35:	75 10                	jne    c0009c47 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c37:	0f 20 d8             	mov    eax,cr3
c0009c3a:	0f 22 d8             	mov    cr3,eax
c0009c3d:	83 c4 1c             	add    esp,0x1c
c0009c40:	89 f0                	mov    eax,esi
c0009c42:	5b                   	pop    ebx
c0009c43:	5e                   	pop    esi
c0009c44:	5f                   	pop    edi
c0009c45:	5d                   	pop    ebp
c0009c46:	c3                   	ret    
c0009c47:	89 f3                	mov    ebx,esi
c0009c49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4d:	c1 eb 0a             	shr    ebx,0xa
c0009c50:	c1 e0 0c             	shl    eax,0xc
c0009c53:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c59:	01 f0                	add    eax,esi
c0009c5b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c61:	c1 e8 0a             	shr    eax,0xa
c0009c64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c69:	2d 00 00 40 00       	sub    eax,0x400000
c0009c6e:	39 c3                	cmp    ebx,eax
c0009c70:	77 cb                	ja     c0009c3d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c72:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c75:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c7b:	39 d8                	cmp    eax,ebx
c0009c7d:	73 f3                	jae    c0009c72 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c7f:	83 c4 1c             	add    esp,0x1c
c0009c82:	89 f0                	mov    eax,esi
c0009c84:	5b                   	pop    ebx
c0009c85:	5e                   	pop    esi
c0009c86:	5f                   	pop    edi
c0009c87:	5d                   	pop    ebp
c0009c88:	c3                   	ret    
c0009c89:	90                   	nop

c0009c8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009c8a:	55                   	push   ebp
c0009c8b:	57                   	push   edi
c0009c8c:	56                   	push   esi
c0009c8d:	53                   	push   ebx
c0009c8e:	83 ec 1c             	sub    esp,0x1c
c0009c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c99:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009c9d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ca1:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ca6:	75 4a                	jne    c0009cf2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009ca8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009caf:	c1 eb 16             	shr    ebx,0x16
c0009cb2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009cb9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009cbd:	74 4d                	je     c0009d0c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009cbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cc3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009cc7:	c1 e8 0a             	shr    eax,0xa
c0009cca:	80 fa 01             	cmp    dl,0x1
c0009ccd:	19 d2                	sbb    edx,edx
c0009ccf:	c1 e3 0c             	shl    ebx,0xc
c0009cd2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009cd6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009cdc:	25 fc 0f 00 00       	and    eax,0xffc
c0009ce1:	01 d8                	add    eax,ebx
c0009ce3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009cea:	83 c4 1c             	add    esp,0x1c
c0009ced:	5b                   	pop    ebx
c0009cee:	5e                   	pop    esi
c0009cef:	5f                   	pop    edi
c0009cf0:	5d                   	pop    ebp
c0009cf1:	c3                   	ret    
c0009cf2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009cf6:	83 ec 0c             	sub    esp,0xc
c0009cf9:	68 78 d5 01 c0       	push   0xc001d578
c0009cfe:	e8 00 64 00 00       	call   c0010103 <KePanic(char const*)>
c0009d03:	83 c4 10             	add    esp,0x10
c0009d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d0a:	eb 9c                	jmp    c0009ca8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d10:	e8 80 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d15:	83 ec 0c             	sub    esp,0xc
c0009d18:	89 c5                	mov    ebp,eax
c0009d1a:	8b 0d 50 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020550
c0009d20:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d24:	6a 01                	push   0x1
c0009d26:	e8 0a f5 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0009d2b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d32:	6a 01                	push   0x1
c0009d34:	50                   	push   eax
c0009d35:	55                   	push   ebp
c0009d36:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d40:	51                   	push   ecx
c0009d41:	e8 7e fe ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d46:	83 c4 1c             	add    esp,0x1c
c0009d49:	68 00 10 00 00       	push   0x1000
c0009d4e:	6a 00                	push   0x0
c0009d50:	50                   	push   eax
c0009d51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d55:	e8 76 67 ff ff       	call   c00004d0 <memset>
c0009d5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d5e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d61:	e8 ff f7 ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d66:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d73:	e9 47 ff ff ff       	jmp    c0009cbf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d78 <VAS::VAS(bool)>:
c0009d78:	53                   	push   ebx
c0009d79:	83 ec 28             	sub    esp,0x28
c0009d7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d88:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d93:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009d9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d9e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009da2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009da5:	e8 eb dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009daa:	89 c2                	mov    edx,eax
c0009dac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009db3:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c0009db9:	83 ec 0c             	sub    esp,0xc
c0009dbc:	6a 01                	push   0x1
c0009dbe:	e8 72 f4 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0009dc3:	83 c4 10             	add    esp,0x10
c0009dc6:	89 c2                	mov    edx,eax
c0009dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009dcf:	83 ec 0c             	sub    esp,0xc
c0009dd2:	6a 03                	push   0x3
c0009dd4:	6a 01                	push   0x1
c0009dd6:	52                   	push   edx
c0009dd7:	50                   	push   eax
c0009dd8:	53                   	push   ebx
c0009dd9:	e8 e6 fd ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dde:	83 c4 20             	add    esp,0x20
c0009de1:	89 c2                	mov    edx,eax
c0009de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009df2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009dfa:	7f 1c                	jg     c0009e18 <VAS::VAS(bool)+0xa0>
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e07:	c1 e2 02             	shl    edx,0x2
c0009e0a:	01 d0                	add    eax,edx
c0009e0c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e12:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e16:	eb da                	jmp    c0009df2 <VAS::VAS(bool)+0x7a>
c0009e18:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e20:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e28:	7f 7a                	jg     c0009ea4 <VAS::VAS(bool)+0x12c>
c0009e2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e2e:	2d 00 02 00 00       	sub    eax,0x200
c0009e33:	c1 e0 0c             	shl    eax,0xc
c0009e36:	83 c8 03             	or     eax,0x3
c0009e39:	89 c2                	mov    edx,eax
c0009e3b:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009e40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e46:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e4c:	83 e0 10             	and    eax,0x10
c0009e4f:	84 c0                	test   al,al
c0009e51:	74 07                	je     c0009e5a <VAS::VAS(bool)+0xe2>
c0009e53:	b8 00 01 00 00       	mov    eax,0x100
c0009e58:	eb 05                	jmp    c0009e5f <VAS::VAS(bool)+0xe7>
c0009e5a:	b8 00 00 00 00       	mov    eax,0x0
c0009e5f:	09 d0                	or     eax,edx
c0009e61:	89 c1                	mov    ecx,eax
c0009e63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e6e:	c1 e2 02             	shl    edx,0x2
c0009e71:	01 d0                	add    eax,edx
c0009e73:	89 ca                	mov    edx,ecx
c0009e75:	89 10                	mov    DWORD PTR [eax],edx
c0009e77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e7b:	2d 40 03 00 00       	sub    eax,0x340
c0009e80:	83 f8 7f             	cmp    eax,0x7f
c0009e83:	77 16                	ja     c0009e9b <VAS::VAS(bool)+0x123>
c0009e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e90:	c1 e2 02             	shl    edx,0x2
c0009e93:	01 d0                	add    eax,edx
c0009e95:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e9b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009e9f:	e9 7c ff ff ff       	jmp    c0009e20 <VAS::VAS(bool)+0xa8>
c0009ea4:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009ea9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eaf:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eb5:	83 e0 10             	and    eax,0x10
c0009eb8:	84 c0                	test   al,al
c0009eba:	74 07                	je     c0009ec3 <VAS::VAS(bool)+0x14b>
c0009ebc:	b8 03 41 00 00       	mov    eax,0x4103
c0009ec1:	eb 05                	jmp    c0009ec8 <VAS::VAS(bool)+0x150>
c0009ec3:	b8 03 40 00 00       	mov    eax,0x4003
c0009ec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ecc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009ecf:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009ed5:	89 02                	mov    DWORD PTR [edx],eax
c0009ed7:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009edc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ee2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009ee8:	83 ec 08             	sub    esp,0x8
c0009eeb:	50                   	push   eax
c0009eec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef0:	e8 b1 fc ff ff       	call   c0009ba6 <VAS::setCPUSpecific(unsigned long)>
c0009ef5:	83 c4 10             	add    esp,0x10
c0009ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009eff:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009f04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f10:	83 e0 10             	and    eax,0x10
c0009f13:	84 c0                	test   al,al
c0009f15:	74 07                	je     c0009f1e <VAS::VAS(bool)+0x1a6>
c0009f17:	b8 00 01 00 00       	mov    eax,0x100
c0009f1c:	eb 05                	jmp    c0009f23 <VAS::VAS(bool)+0x1ab>
c0009f1e:	b8 00 00 00 00       	mov    eax,0x0
c0009f23:	09 c2                	or     edx,eax
c0009f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f2c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f31:	83 ca 03             	or     edx,0x3
c0009f34:	89 10                	mov    DWORD PTR [eax],edx
c0009f36:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009f3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f41:	83 ec 0c             	sub    esp,0xc
c0009f44:	50                   	push   eax
c0009f45:	e8 12 1c 00 00       	call   c000bb5c <Device::getName()>
c0009f4a:	83 c4 10             	add    esp,0x10
c0009f4d:	83 ec 08             	sub    esp,0x8
c0009f50:	68 1b d6 01 c0       	push   0xc001d61b
c0009f55:	50                   	push   eax
c0009f56:	e8 85 67 ff ff       	call   c00006e0 <strcmp>
c0009f5b:	83 c4 10             	add    esp,0x10
c0009f5e:	85 c0                	test   eax,eax
c0009f60:	0f 94 c0             	sete   al
c0009f63:	84 c0                	test   al,al
c0009f65:	0f 84 87 00 00 00    	je     c0009ff2 <VAS::VAS(bool)+0x27a>
c0009f6b:	fa                   	cli    
c0009f6c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0009f71:	40                   	inc    eax
c0009f72:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0009f77:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009f7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f82:	05 7c 09 00 00       	add    eax,0x97c
c0009f87:	83 ec 0c             	sub    esp,0xc
c0009f8a:	50                   	push   eax
c0009f8b:	e8 26 d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f90:	83 c4 10             	add    esp,0x10
c0009f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f98:	89 c3                	mov    ebx,eax
c0009f9a:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0009f9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fa5:	05 7c 09 00 00       	add    eax,0x97c
c0009faa:	83 ec 0c             	sub    esp,0xc
c0009fad:	50                   	push   eax
c0009fae:	e8 03 d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fb3:	83 c4 10             	add    esp,0x10
c0009fb6:	83 ec 08             	sub    esp,0x8
c0009fb9:	50                   	push   eax
c0009fba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fbe:	e8 83 f5 ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c0009fc3:	83 c4 10             	add    esp,0x10
c0009fc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fcd:	6a 11                	push   0x11
c0009fcf:	53                   	push   ebx
c0009fd0:	50                   	push   eax
c0009fd1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fd5:	e8 f0 f8 ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0009fe2:	48                   	dec    eax
c0009fe3:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0009fe8:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0009fed:	85 c0                	test   eax,eax
c0009fef:	75 01                	jne    c0009ff2 <VAS::VAS(bool)+0x27a>
c0009ff1:	fb                   	sti    
c0009ff2:	90                   	nop
c0009ff3:	83 c4 28             	add    esp,0x28
c0009ff6:	5b                   	pop    ebx
c0009ff7:	c3                   	ret    

c0009ff8 <VAS::evict(unsigned long)>:
c0009ff8:	55                   	push   ebp
c0009ff9:	57                   	push   edi
c0009ffa:	56                   	push   esi
c0009ffb:	53                   	push   ebx
c0009ffc:	83 ec 1c             	sub    esp,0x1c
c0009fff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a003:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a00b:	e8 66 f3 ff ff       	call   c0009376 <Virt::allocateSwapfilePage()>
c000a010:	8b 0d 6c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f16c
c000a016:	89 c7                	mov    edi,eax
c000a018:	85 c9                	test   ecx,ecx
c000a01a:	7e 3e                	jle    c000a05a <VAS::evict(unsigned long)+0x62>
c000a01c:	89 ee                	mov    esi,ebp
c000a01e:	31 db                	xor    ebx,ebx
c000a020:	83 ec 0c             	sub    esp,0xc
c000a023:	57                   	push   edi
c000a024:	e8 3b f3 ff ff       	call   c0009364 <Virt::swapIDToSector(unsigned long)>
c000a029:	89 34 24             	mov    DWORD PTR [esp],esi
c000a02c:	01 d8                	add    eax,ebx
c000a02e:	6a 01                	push   0x1
c000a030:	31 d2                	xor    edx,edx
c000a032:	43                   	inc    ebx
c000a033:	52                   	push   edx
c000a034:	81 c6 00 02 00 00    	add    esi,0x200
c000a03a:	50                   	push   eax
c000a03b:	0f be 05 78 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f178
c000a042:	8b 14 85 bc 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd744]
c000a049:	52                   	push   edx
c000a04a:	e8 a3 2b 00 00       	call   c000cbf2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a04f:	83 c4 20             	add    esp,0x20
c000a052:	39 1d 6c f1 01 c0    	cmp    DWORD PTR ds:0xc001f16c,ebx
c000a058:	7f c6                	jg     c000a020 <VAS::evict(unsigned long)+0x28>
c000a05a:	83 ec 08             	sub    esp,0x8
c000a05d:	c1 e7 0b             	shl    edi,0xb
c000a060:	55                   	push   ebp
c000a061:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a065:	50                   	push   eax
c000a066:	e8 db f4 ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c000a06b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a06d:	89 d1                	mov    ecx,edx
c000a06f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a075:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a07b:	09 cf                	or     edi,ecx
c000a07d:	89 38                	mov    DWORD PTR [eax],edi
c000a07f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a082:	ff 05 48 05 02 c0    	inc    DWORD PTR ds:0xc0020548
c000a088:	e8 a6 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a08d:	0f 20 d8             	mov    eax,cr3
c000a090:	0f 22 d8             	mov    cr3,eax
c000a093:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c000a098:	c7 44 24 40 29 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d629
c000a0a0:	8d 50 01             	lea    edx,[eax+0x1]
c000a0a3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0a7:	89 15 44 05 02 c0    	mov    DWORD PTR ds:0xc0020544,edx
c000a0ad:	83 c4 2c             	add    esp,0x2c
c000a0b0:	5b                   	pop    ebx
c000a0b1:	5e                   	pop    esi
c000a0b2:	5f                   	pop    edi
c000a0b3:	5d                   	pop    ebp
c000a0b4:	e9 cf 03 00 00       	jmp    c000a488 <Dbg::kprintf(char const*, ...)>
c000a0b9:	90                   	nop

c000a0ba <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a0ba:	55                   	push   ebp
c000a0bb:	57                   	push   edi
c000a0bc:	56                   	push   esi
c000a0bd:	53                   	push   ebx
c000a0be:	83 ec 14             	sub    esp,0x14
c000a0c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a0c5:	53                   	push   ebx
c000a0c6:	68 3a d6 01 c0       	push   0xc001d63a
c000a0cb:	e8 b8 03 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a0d0:	83 c4 10             	add    esp,0x10
c000a0d3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0d9:	74 21                	je     c000a0fc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0db:	83 ec 08             	sub    esp,0x8
c000a0de:	53                   	push   ebx
c000a0df:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0e3:	57                   	push   edi
c000a0e4:	e8 5d f4 ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c000a0e9:	83 c4 10             	add    esp,0x10
c000a0ec:	89 c6                	mov    esi,eax
c000a0ee:	85 c0                	test   eax,eax
c000a0f0:	74 0a                	je     c000a0fc <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0f2:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a0f4:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a0fa:	74 0a                	je     c000a106 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a0fc:	31 c0                	xor    eax,eax
c000a0fe:	83 c4 0c             	add    esp,0xc
c000a101:	5b                   	pop    ebx
c000a102:	5e                   	pop    esi
c000a103:	5f                   	pop    edi
c000a104:	5d                   	pop    ebp
c000a105:	c3                   	ret    
c000a106:	e8 8a d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a10b:	c1 ed 0b             	shr    ebp,0xb
c000a10e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a110:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a116:	09 c2                	or     edx,eax
c000a118:	81 ca 01 08 00 00    	or     edx,0x801
c000a11e:	89 16                	mov    DWORD PTR [esi],edx
c000a120:	8b 35 6c f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f16c
c000a126:	85 f6                	test   esi,esi
c000a128:	7e 3e                	jle    c000a168 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a12a:	89 df                	mov    edi,ebx
c000a12c:	31 f6                	xor    esi,esi
c000a12e:	83 ec 0c             	sub    esp,0xc
c000a131:	55                   	push   ebp
c000a132:	e8 2d f2 ff ff       	call   c0009364 <Virt::swapIDToSector(unsigned long)>
c000a137:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a13a:	01 f0                	add    eax,esi
c000a13c:	6a 01                	push   0x1
c000a13e:	31 d2                	xor    edx,edx
c000a140:	46                   	inc    esi
c000a141:	52                   	push   edx
c000a142:	81 c7 00 02 00 00    	add    edi,0x200
c000a148:	50                   	push   eax
c000a149:	0f be 05 78 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f178
c000a150:	8b 0c 85 bc 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd744]
c000a157:	51                   	push   ecx
c000a158:	e8 29 2a 00 00       	call   c000cb86 <LogicalDisk::read(unsigned long long, int, void*)>
c000a15d:	83 c4 20             	add    esp,0x20
c000a160:	39 35 6c f1 01 c0    	cmp    DWORD PTR ds:0xc001f16c,esi
c000a166:	7f c6                	jg     c000a12e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a168:	a1 48 05 02 c0       	mov    eax,ds:0xc0020548
c000a16d:	48                   	dec    eax
c000a16e:	52                   	push   edx
c000a16f:	a3 48 05 02 c0       	mov    ds:0xc0020548,eax
c000a174:	50                   	push   eax
c000a175:	53                   	push   ebx
c000a176:	68 4d d6 01 c0       	push   0xc001d64d
c000a17b:	e8 08 03 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a180:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a183:	e8 be f1 ff ff       	call   c0009346 <Virt::freeSwapfilePage(unsigned long)>
c000a188:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000a18d:	83 c4 10             	add    esp,0x10
c000a190:	48                   	dec    eax
c000a191:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000a196:	85 c0                	test   eax,eax
c000a198:	75 01                	jne    c000a19b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a19a:	fb                   	sti    
c000a19b:	0f 20 d8             	mov    eax,cr3
c000a19e:	0f 22 d8             	mov    cr3,eax
c000a1a1:	b0 01                	mov    al,0x1
c000a1a3:	e9 56 ff ff ff       	jmp    c000a0fe <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1a8 <VAS::scanForEviction()>:
c000a1a8:	57                   	push   edi
c000a1a9:	31 ff                	xor    edi,edi
c000a1ab:	56                   	push   esi
c000a1ac:	53                   	push   ebx
c000a1ad:	83 ec 10             	sub    esp,0x10
c000a1b0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a1b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1b7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1bd:	75 0e                	jne    c000a1cd <VAS::scanForEviction()+0x25>
c000a1bf:	89 da                	mov    edx,ebx
c000a1c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1c4:	c1 ea 16             	shr    edx,0x16
c000a1c7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1cb:	74 4e                	je     c000a21b <VAS::scanForEviction()+0x73>
c000a1cd:	53                   	push   ebx
c000a1ce:	56                   	push   esi
c000a1cf:	e8 72 f3 ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c000a1d4:	5a                   	pop    edx
c000a1d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1d7:	59                   	pop    ecx
c000a1d8:	89 d1                	mov    ecx,edx
c000a1da:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1e0:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1e6:	74 3e                	je     c000a226 <VAS::scanForEviction()+0x7e>
c000a1e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ee:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a1f4:	76 2b                	jbe    c000a221 <VAS::scanForEviction()+0x79>
c000a1f6:	47                   	inc    edi
c000a1f7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a1fe:	83 ff 03             	cmp    edi,0x3
c000a201:	74 32                	je     c000a235 <VAS::scanForEviction()+0x8d>
c000a203:	31 db                	xor    ebx,ebx
c000a205:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a20b:	75 c0                	jne    c000a1cd <VAS::scanForEviction()+0x25>
c000a20d:	89 da                	mov    edx,ebx
c000a20f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a212:	c1 ea 16             	shr    edx,0x16
c000a215:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a219:	75 b2                	jne    c000a1cd <VAS::scanForEviction()+0x25>
c000a21b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a221:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a224:	eb 91                	jmp    c000a1b7 <VAS::scanForEviction()+0xf>
c000a226:	f6 c2 20             	test   dl,0x20
c000a229:	74 13                	je     c000a23e <VAS::scanForEviction()+0x96>
c000a22b:	83 e2 df             	and    edx,0xffffffdf
c000a22e:	89 10                	mov    DWORD PTR [eax],edx
c000a230:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a233:	eb b3                	jmp    c000a1e8 <VAS::scanForEviction()+0x40>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	31 c0                	xor    eax,eax
c000a23a:	5b                   	pop    ebx
c000a23b:	5e                   	pop    esi
c000a23c:	5f                   	pop    edi
c000a23d:	c3                   	ret    
c000a23e:	83 ec 08             	sub    esp,0x8
c000a241:	89 d0                	mov    eax,edx
c000a243:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a248:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a24c:	53                   	push   ebx
c000a24d:	68 62 d6 01 c0       	push   0xc001d662
c000a252:	e8 31 02 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a257:	58                   	pop    eax
c000a258:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a25b:	5a                   	pop    edx
c000a25c:	51                   	push   ecx
c000a25d:	56                   	push   esi
c000a25e:	e8 95 fd ff ff       	call   c0009ff8 <VAS::evict(unsigned long)>
c000a263:	5b                   	pop    ebx
c000a264:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a267:	5f                   	pop    edi
c000a268:	50                   	push   eax
c000a269:	68 76 d6 01 c0       	push   0xc001d676
c000a26e:	e8 15 02 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a273:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a27a:	83 c4 10             	add    esp,0x10
c000a27d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	5b                   	pop    ebx
c000a285:	5e                   	pop    esi
c000a286:	5f                   	pop    edi
c000a287:	c3                   	ret    

c000a288 <mapVASFirstTime>:
c000a288:	55                   	push   ebp
c000a289:	57                   	push   edi
c000a28a:	56                   	push   esi
c000a28b:	53                   	push   ebx
c000a28c:	83 ec 0c             	sub    esp,0xc
c000a28f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a294:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a297:	4a                   	dec    edx
c000a298:	0f 84 8c 00 00 00    	je     c000a32a <mapVASFirstTime+0xa2>
c000a29e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2a1:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2a4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2a9:	c1 e5 15             	shl    ebp,0x15
c000a2ac:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a2b1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a2b7:	29 eb                	sub    ebx,ebp
c000a2b9:	29 ef                	sub    edi,ebp
c000a2bb:	e8 d5 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2c0:	83 ec 0c             	sub    esp,0xc
c000a2c3:	68 03 04 00 00       	push   0x403
c000a2c8:	6a 01                	push   0x1
c000a2ca:	53                   	push   ebx
c000a2cb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2d1:	50                   	push   eax
c000a2d2:	56                   	push   esi
c000a2d3:	e8 ec f8 ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2d8:	83 c4 20             	add    esp,0x20
c000a2db:	39 fb                	cmp    ebx,edi
c000a2dd:	75 dc                	jne    c000a2bb <mapVASFirstTime+0x33>
c000a2df:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2e4:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a2e9:	29 eb                	sub    ebx,ebp
c000a2eb:	29 ef                	sub    edi,ebp
c000a2ed:	e8 a3 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2f2:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a2f6:	19 d2                	sbb    edx,edx
c000a2f8:	83 ec 0c             	sub    esp,0xc
c000a2fb:	83 e2 04             	and    edx,0x4
c000a2fe:	81 c2 03 04 00 00    	add    edx,0x403
c000a304:	52                   	push   edx
c000a305:	6a 01                	push   0x1
c000a307:	53                   	push   ebx
c000a308:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a30e:	50                   	push   eax
c000a30f:	56                   	push   esi
c000a310:	e8 af f8 ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a315:	83 c4 20             	add    esp,0x20
c000a318:	39 df                	cmp    edi,ebx
c000a31a:	75 d1                	jne    c000a2ed <mapVASFirstTime+0x65>
c000a31c:	0f 20 d8             	mov    eax,cr3
c000a31f:	0f 22 d8             	mov    cr3,eax
c000a322:	83 c4 0c             	add    esp,0xc
c000a325:	5b                   	pop    ebx
c000a326:	5e                   	pop    esi
c000a327:	5f                   	pop    edi
c000a328:	5d                   	pop    ebp
c000a329:	c3                   	ret    
c000a32a:	83 ec 0c             	sub    esp,0xc
c000a32d:	68 89 d6 01 c0       	push   0xc001d689
c000a332:	e8 51 01 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a337:	83 c4 10             	add    esp,0x10
c000a33a:	83 c4 0c             	add    esp,0xc
c000a33d:	5b                   	pop    ebx
c000a33e:	5e                   	pop    esi
c000a33f:	5f                   	pop    edi
c000a340:	5d                   	pop    ebp
c000a341:	c3                   	ret    

c000a342 <__cxa_atexit>:
c000a342:	31 c0                	xor    eax,eax
c000a344:	c3                   	ret    

c000a345 <__cxa_finalize>:
c000a345:	c3                   	ret    

c000a346 <__stack_chk_fail>:
c000a346:	55                   	push   ebp
c000a347:	89 e5                	mov    ebp,esp
c000a349:	83 ec 10             	sub    esp,0x10
c000a34c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a34f:	68 a2 d6 01 c0       	push   0xc001d6a2
c000a354:	e8 2f 01 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a359:	58                   	pop    eax
c000a35a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a35d:	5a                   	pop    edx
c000a35e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a361:	68 a2 d6 01 c0       	push   0xc001d6a2
c000a366:	e8 1d 01 00 00       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000a36b:	c7 04 24 aa d6 01 c0 	mov    DWORD PTR [esp],0xc001d6aa
c000a372:	e8 8c 5d 00 00       	call   c0010103 <KePanic(char const*)>
c000a377:	83 c4 10             	add    esp,0x10
c000a37a:	c9                   	leave  
c000a37b:	c3                   	ret    

c000a37c <__cxa_pure_virtual>:
c000a37c:	83 ec 18             	sub    esp,0x18
c000a37f:	68 c2 d6 01 c0       	push   0xc001d6c2
c000a384:	e8 7a 5d 00 00       	call   c0010103 <KePanic(char const*)>
c000a389:	83 c4 1c             	add    esp,0x1c
c000a38c:	c3                   	ret    

c000a38d <operator new[](unsigned long)>:
c000a38d:	e9 27 d4 ff ff       	jmp    c00077b9 <malloc>

c000a392 <operator delete(void*, unsigned long)>:
c000a392:	e9 42 d4 ff ff       	jmp    c00077d9 <rfree>

c000a397 <operator delete[](void*)>:
c000a397:	e9 3d d4 ff ff       	jmp    c00077d9 <rfree>

c000a39c <operator delete[](void*, unsigned long)>:
c000a39c:	e9 38 d4 ff ff       	jmp    c00077d9 <rfree>

c000a3a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3a1:	55                   	push   ebp
c000a3a2:	b9 04 00 00 00       	mov    ecx,0x4
c000a3a7:	57                   	push   edi
c000a3a8:	56                   	push   esi
c000a3a9:	be d3 d2 01 c0       	mov    esi,0xc001d2d3
c000a3ae:	53                   	push   ebx
c000a3af:	83 ec 20             	sub    esp,0x20
c000a3b2:	a1 d2 d2 01 c0       	mov    eax,ds:0xc001d2d2
c000a3b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a3bb:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a3bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a3c3:	a1 df d2 01 c0       	mov    eax,ds:0xc001d2df
c000a3c8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a3cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3d0:	fc                   	cld    
c000a3d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a3d3:	89 ee                	mov    esi,ebp
c000a3d5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3d9:	eb 02                	jmp    c000a3dd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3db:	89 c6                	mov    esi,eax
c000a3dd:	31 d2                	xor    edx,edx
c000a3df:	41                   	inc    ecx
c000a3e0:	89 f0                	mov    eax,esi
c000a3e2:	f7 f3                	div    ebx
c000a3e4:	39 de                	cmp    esi,ebx
c000a3e6:	73 f3                	jae    c000a3db <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a3e8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a3eb:	eb 02                	jmp    c000a3ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a3ed:	89 c5                	mov    ebp,eax
c000a3ef:	31 d2                	xor    edx,edx
c000a3f1:	49                   	dec    ecx
c000a3f2:	89 e8                	mov    eax,ebp
c000a3f4:	f7 f3                	div    ebx
c000a3f6:	39 dd                	cmp    ebp,ebx
c000a3f8:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a3fc:	88 11                	mov    BYTE PTR [ecx],dl
c000a3fe:	73 ed                	jae    c000a3ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a400:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a404:	83 c4 20             	add    esp,0x20
c000a407:	5b                   	pop    ebx
c000a408:	5e                   	pop    esi
c000a409:	5f                   	pop    edi
c000a40a:	5d                   	pop    ebp
c000a40b:	c3                   	ret    

c000a40c <Dbg::logc(char)>:
c000a40c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a410:	f6 05 70 04 02 c0 10 	test   BYTE PTR ds:0xc0020470,0x10
c000a417:	75 12                	jne    c000a42b <Dbg::logc(char)+0x1f>
c000a419:	ba fd 03 00 00       	mov    edx,0x3fd
c000a41e:	ec                   	in     al,dx
c000a41f:	a8 20                	test   al,0x20
c000a421:	74 fb                	je     c000a41e <Dbg::logc(char)+0x12>
c000a423:	ba f8 03 00 00       	mov    edx,0x3f8
c000a428:	88 c8                	mov    al,cl
c000a42a:	ee                   	out    dx,al
c000a42b:	c3                   	ret    

c000a42c <Dbg::logs(char*)>:
c000a42c:	53                   	push   ebx
c000a42d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a431:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a434:	84 c0                	test   al,al
c000a436:	74 0f                	je     c000a447 <Dbg::logs(char*)+0x1b>
c000a438:	50                   	push   eax
c000a439:	43                   	inc    ebx
c000a43a:	e8 cd ff ff ff       	call   c000a40c <Dbg::logc(char)>
c000a43f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a442:	5a                   	pop    edx
c000a443:	84 c0                	test   al,al
c000a445:	75 f1                	jne    c000a438 <Dbg::logs(char*)+0xc>
c000a447:	5b                   	pop    ebx
c000a448:	c3                   	ret    

c000a449 <Dbg::logWriteInt(unsigned int)>:
c000a449:	83 ec 10             	sub    esp,0x10
c000a44c:	6a 0a                	push   0xa
c000a44e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a452:	50                   	push   eax
c000a453:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a457:	50                   	push   eax
c000a458:	e8 44 ff ff ff       	call   c000a3a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a45d:	50                   	push   eax
c000a45e:	e8 c9 ff ff ff       	call   c000a42c <Dbg::logs(char*)>
c000a463:	83 c4 20             	add    esp,0x20
c000a466:	c3                   	ret    

c000a467 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a467:	83 ec 10             	sub    esp,0x10
c000a46a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a46e:	50                   	push   eax
c000a46f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a473:	50                   	push   eax
c000a474:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a478:	52                   	push   edx
c000a479:	e8 23 ff ff ff       	call   c000a3a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a47e:	50                   	push   eax
c000a47f:	e8 a8 ff ff ff       	call   c000a42c <Dbg::logs(char*)>
c000a484:	83 c4 20             	add    esp,0x20
c000a487:	c3                   	ret    

c000a488 <Dbg::kprintf(char const*, ...)>:
c000a488:	55                   	push   ebp
c000a489:	57                   	push   edi
c000a48a:	56                   	push   esi
c000a48b:	53                   	push   ebx
c000a48c:	83 ec 0c             	sub    esp,0xc
c000a48f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a493:	f6 05 70 04 02 c0 10 	test   BYTE PTR ds:0xc0020470,0x10
c000a49a:	74 08                	je     c000a4a4 <Dbg::kprintf(char const*, ...)+0x1c>
c000a49c:	83 c4 0c             	add    esp,0xc
c000a49f:	5b                   	pop    ebx
c000a4a0:	5e                   	pop    esi
c000a4a1:	5f                   	pop    edi
c000a4a2:	5d                   	pop    ebp
c000a4a3:	c3                   	ret    
c000a4a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4a8:	31 ff                	xor    edi,edi
c000a4aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4b1:	84 c0                	test   al,al
c000a4b3:	74 e7                	je     c000a49c <Dbg::kprintf(char const*, ...)+0x14>
c000a4b5:	8d 77 01             	lea    esi,[edi+0x1]
c000a4b8:	3c 25                	cmp    al,0x25
c000a4ba:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4bd:	75 47                	jne    c000a506 <Dbg::kprintf(char const*, ...)+0x7e>
c000a4bf:	83 c7 02             	add    edi,0x2
c000a4c2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a4c5:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a4c8:	83 e8 25             	sub    eax,0x25
c000a4cb:	3c 53                	cmp    al,0x53
c000a4cd:	0f 87 d2 00 00 00    	ja     c000a5a5 <Dbg::kprintf(char const*, ...)+0x11d>
c000a4d3:	25 ff 00 00 00       	and    eax,0xff
c000a4d8:	ff 24 85 d8 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2928]
c000a4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4e3:	89 c8                	mov    eax,ecx
c000a4e5:	83 c1 04             	add    ecx,0x4
c000a4e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4ec:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a4ee:	55                   	push   ebp
c000a4ef:	e8 55 ff ff ff       	call   c000a449 <Dbg::logWriteInt(unsigned int)>
c000a4f4:	58                   	pop    eax
c000a4f5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a4f8:	84 c0                	test   al,al
c000a4fa:	74 a0                	je     c000a49c <Dbg::kprintf(char const*, ...)+0x14>
c000a4fc:	8d 77 01             	lea    esi,[edi+0x1]
c000a4ff:	3c 25                	cmp    al,0x25
c000a501:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a504:	74 b9                	je     c000a4bf <Dbg::kprintf(char const*, ...)+0x37>
c000a506:	50                   	push   eax
c000a507:	89 f7                	mov    edi,esi
c000a509:	e8 fe fe ff ff       	call   c000a40c <Dbg::logc(char)>
c000a50e:	89 ee                	mov    esi,ebp
c000a510:	58                   	pop    eax
c000a511:	eb e2                	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a513:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a517:	89 c8                	mov    eax,ecx
c000a519:	83 c1 04             	add    ecx,0x4
c000a51c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a51e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a522:	50                   	push   eax
c000a523:	e8 04 ff ff ff       	call   c000a42c <Dbg::logs(char*)>
c000a528:	58                   	pop    eax
c000a529:	eb ca                	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a52b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a52f:	89 d0                	mov    eax,edx
c000a531:	83 c2 04             	add    edx,0x4
c000a534:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a538:	8b 00                	mov    eax,DWORD PTR [eax]
c000a53a:	50                   	push   eax
c000a53b:	e8 09 ff ff ff       	call   c000a449 <Dbg::logWriteInt(unsigned int)>
c000a540:	58                   	pop    eax
c000a541:	eb b2                	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a543:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a547:	89 d0                	mov    eax,edx
c000a549:	83 c2 04             	add    edx,0x4
c000a54c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a553:	50                   	push   eax
c000a554:	e8 b3 fe ff ff       	call   c000a40c <Dbg::logc(char)>
c000a559:	58                   	pop    eax
c000a55a:	eb 99                	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a55c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a560:	89 c8                	mov    eax,ecx
c000a562:	83 c1 04             	add    ecx,0x4
c000a565:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a569:	6a 10                	push   0x10
c000a56b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a56d:	51                   	push   ecx
c000a56e:	e8 f4 fe ff ff       	call   c000a467 <Dbg::logWriteIntBase(unsigned int, int)>
c000a573:	5d                   	pop    ebp
c000a574:	58                   	pop    eax
c000a575:	e9 7b ff ff ff       	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a57a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a57e:	89 d0                	mov    eax,edx
c000a580:	83 c2 08             	add    edx,0x8
c000a583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a587:	6a 10                	push   0x10
c000a589:	8b 00                	mov    eax,DWORD PTR [eax]
c000a58b:	50                   	push   eax
c000a58c:	e8 d6 fe ff ff       	call   c000a467 <Dbg::logWriteIntBase(unsigned int, int)>
c000a591:	58                   	pop    eax
c000a592:	5a                   	pop    edx
c000a593:	e9 5d ff ff ff       	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a598:	6a 25                	push   0x25
c000a59a:	e8 6d fe ff ff       	call   c000a40c <Dbg::logc(char)>
c000a59f:	5a                   	pop    edx
c000a5a0:	e9 50 ff ff ff       	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5a5:	6a 25                	push   0x25
c000a5a7:	e8 60 fe ff ff       	call   c000a40c <Dbg::logc(char)>
c000a5ac:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a5b0:	50                   	push   eax
c000a5b1:	e8 56 fe ff ff       	call   c000a40c <Dbg::logc(char)>
c000a5b6:	5a                   	pop    edx
c000a5b7:	59                   	pop    ecx
c000a5b8:	e9 38 ff ff ff       	jmp    c000a4f5 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5bd:	90                   	nop

c000a5be <File::read(unsigned long long, void*, int*)>:
c000a5be:	53                   	push   ebx
c000a5bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5ce:	3c 19                	cmp    al,0x19
c000a5d0:	77 35                	ja     c000a607 <File::read(unsigned long long, void*, int*)+0x49>
c000a5d2:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000a5d9:	85 c0                	test   eax,eax
c000a5db:	74 2a                	je     c000a607 <File::read(unsigned long long, void*, int*)+0x49>
c000a5dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5e3:	85 c0                	test   eax,eax
c000a5e5:	74 20                	je     c000a607 <File::read(unsigned long long, void*, int*)+0x49>
c000a5e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5eb:	74 21                	je     c000a60e <File::read(unsigned long long, void*, int*)+0x50>
c000a5ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a5f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a601:	5b                   	pop    ebx
c000a602:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a605:	ff e0                	jmp    eax
c000a607:	b8 0b 00 00 00       	mov    eax,0xb
c000a60c:	eb 05                	jmp    c000a613 <File::read(unsigned long long, void*, int*)+0x55>
c000a60e:	b8 05 00 00 00       	mov    eax,0x5
c000a613:	5b                   	pop    ebx
c000a614:	c3                   	ret    
c000a615:	90                   	nop

c000a616 <File::write(unsigned long long, void*, int*)>:
c000a616:	53                   	push   ebx
c000a617:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a61b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a61f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a626:	3c 19                	cmp    al,0x19
c000a628:	77 35                	ja     c000a65f <File::write(unsigned long long, void*, int*)+0x49>
c000a62a:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000a631:	85 c0                	test   eax,eax
c000a633:	74 2a                	je     c000a65f <File::write(unsigned long long, void*, int*)+0x49>
c000a635:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a63b:	85 c0                	test   eax,eax
c000a63d:	74 20                	je     c000a65f <File::write(unsigned long long, void*, int*)+0x49>
c000a63f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a643:	74 21                	je     c000a666 <File::write(unsigned long long, void*, int*)+0x50>
c000a645:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a647:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a64b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a659:	5b                   	pop    ebx
c000a65a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a65d:	ff e0                	jmp    eax
c000a65f:	b8 0b 00 00 00       	mov    eax,0xb
c000a664:	eb 05                	jmp    c000a66b <File::write(unsigned long long, void*, int*)+0x55>
c000a666:	b8 05 00 00 00       	mov    eax,0x5
c000a66b:	5b                   	pop    ebx
c000a66c:	c3                   	ret    
c000a66d:	90                   	nop

c000a66e <Directory::read(unsigned long long, void*, int*)>:
c000a66e:	53                   	push   ebx
c000a66f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a673:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a677:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a67e:	3c 19                	cmp    al,0x19
c000a680:	77 35                	ja     c000a6b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a682:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000a689:	85 c0                	test   eax,eax
c000a68b:	74 2a                	je     c000a6b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a68d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a693:	85 c0                	test   eax,eax
c000a695:	74 20                	je     c000a6b7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a697:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a69b:	74 21                	je     c000a6be <Directory::read(unsigned long long, void*, int*)+0x50>
c000a69d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a69f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6b1:	5b                   	pop    ebx
c000a6b2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a6b5:	ff e0                	jmp    eax
c000a6b7:	b8 0b 00 00 00       	mov    eax,0xb
c000a6bc:	eb 05                	jmp    c000a6c3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a6be:	b8 05 00 00 00       	mov    eax,0x5
c000a6c3:	5b                   	pop    ebx
c000a6c4:	c3                   	ret    
c000a6c5:	90                   	nop

c000a6c6 <Directory::write(unsigned long long, void*, int*)>:
c000a6c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ca:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d6:	80 fa 19             	cmp    dl,0x19
c000a6d9:	77 18                	ja     c000a6f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6db:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000a6e2:	85 d2                	test   edx,edx
c000a6e4:	74 0d                	je     c000a6f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6e6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a6ed:	19 c0                	sbb    eax,eax
c000a6ef:	83 e0 0a             	and    eax,0xa
c000a6f2:	40                   	inc    eax
c000a6f3:	c3                   	ret    

c000a6f4 <File::isAtty()>:
c000a6f4:	31 c0                	xor    eax,eax
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <Directory::isAtty()>:
c000a6f8:	31 c0                	xor    eax,eax
c000a6fa:	c3                   	ret    
c000a6fb:	90                   	nop

c000a6fc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a6fc:	b8 0a 00 00 00       	mov    eax,0xa
c000a701:	c3                   	ret    

c000a702 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a702:	b8 0a 00 00 00       	mov    eax,0xa
c000a707:	c3                   	ret    

c000a708 <Filesystem::allocateSwapfile(char const*, int)>:
c000a708:	31 c0                	xor    eax,eax
c000a70a:	31 d2                	xor    edx,edx
c000a70c:	c3                   	ret    
c000a70d:	90                   	nop

c000a70e <File::~File()>:
c000a70e:	83 ec 0c             	sub    esp,0xc
c000a711:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000a716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71a:	89 10                	mov    DWORD PTR [eax],edx
c000a71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	50                   	push   eax
c000a724:	e8 ab e8 ff ff       	call   c0008fd4 <UnixFile::~UnixFile()>
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	90                   	nop
c000a72d:	83 c4 0c             	add    esp,0xc
c000a730:	c3                   	ret    
c000a731:	90                   	nop

c000a732 <File::~File()>:
c000a732:	83 ec 0c             	sub    esp,0xc
c000a735:	83 ec 0c             	sub    esp,0xc
c000a738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73c:	e8 cd ff ff ff       	call   c000a70e <File::~File()>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	83 ec 08             	sub    esp,0x8
c000a747:	68 14 01 00 00       	push   0x114
c000a74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a750:	e8 3d fc ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	83 c4 0c             	add    esp,0xc
c000a75b:	c3                   	ret    

c000a75c <Directory::~Directory()>:
c000a75c:	83 ec 0c             	sub    esp,0xc
c000a75f:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000a764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a768:	89 10                	mov    DWORD PTR [eax],edx
c000a76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a76e:	83 ec 0c             	sub    esp,0xc
c000a771:	50                   	push   eax
c000a772:	e8 5d e8 ff ff       	call   c0008fd4 <UnixFile::~UnixFile()>
c000a777:	83 c4 10             	add    esp,0x10
c000a77a:	90                   	nop
c000a77b:	83 c4 0c             	add    esp,0xc
c000a77e:	c3                   	ret    
c000a77f:	90                   	nop

c000a780 <Directory::~Directory()>:
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	83 ec 0c             	sub    esp,0xc
c000a786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a78a:	e8 cd ff ff ff       	call   c000a75c <Directory::~Directory()>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	83 ec 08             	sub    esp,0x8
c000a795:	68 14 01 00 00       	push   0x114
c000a79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79e:	e8 ef fb ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000a7a3:	83 c4 10             	add    esp,0x10
c000a7a6:	83 c4 0c             	add    esp,0xc
c000a7a9:	c3                   	ret    

c000a7aa <Filesystem::Filesystem()>:
c000a7aa:	ba 30 d8 01 c0       	mov    edx,0xc001d830
c000a7af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b3:	89 10                	mov    DWORD PTR [eax],edx
c000a7b5:	8b 15 54 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020554
c000a7bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a7c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7c6:	a3 54 05 02 c0       	mov    ds:0xc0020554,eax
c000a7cb:	90                   	nop
c000a7cc:	c3                   	ret    
c000a7cd:	90                   	nop

c000a7ce <Filesystem::~Filesystem()>:
c000a7ce:	ba 30 d8 01 c0       	mov    edx,0xc001d830
c000a7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7d7:	89 10                	mov    DWORD PTR [eax],edx
c000a7d9:	90                   	nop
c000a7da:	c3                   	ret    
c000a7db:	90                   	nop

c000a7dc <Filesystem::~Filesystem()>:
c000a7dc:	83 ec 0c             	sub    esp,0xc
c000a7df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7e3:	e8 e6 ff ff ff       	call   c000a7ce <Filesystem::~Filesystem()>
c000a7e8:	83 c4 04             	add    esp,0x4
c000a7eb:	83 ec 08             	sub    esp,0x8
c000a7ee:	6a 08                	push   0x8
c000a7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f4:	e8 99 fb ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000a7f9:	83 c4 10             	add    esp,0x10
c000a7fc:	83 c4 0c             	add    esp,0xc
c000a7ff:	c3                   	ret    

c000a800 <Fs::getcwd(Process*, char*, int)>:
c000a800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a804:	31 c0                	xor    eax,eax
c000a806:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a809:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a80d:	7d 15                	jge    c000a824 <Fs::getcwd(Process*, char*, int)+0x24>
c000a80f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a813:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a81a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a81d:	84 c9                	test   cl,cl
c000a81f:	74 06                	je     c000a827 <Fs::getcwd(Process*, char*, int)+0x27>
c000a821:	40                   	inc    eax
c000a822:	eb e2                	jmp    c000a806 <Fs::getcwd(Process*, char*, int)+0x6>
c000a824:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a827:	31 c0                	xor    eax,eax
c000a829:	c3                   	ret    

c000a82a <Fs::initVFS()>:
c000a82a:	83 ec 18             	sub    esp,0x18
c000a82d:	6a 08                	push   0x8
c000a82f:	e8 85 cf ff ff       	call   c00077b9 <malloc>
c000a834:	89 04 24             	mov    DWORD PTR [esp],eax
c000a837:	e8 f4 c3 00 00       	call   c0016c30 <FAT::FAT()>
c000a83c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a843:	e8 71 cf ff ff       	call   c00077b9 <malloc>
c000a848:	89 04 24             	mov    DWORD PTR [esp],eax
c000a84b:	e8 3c d1 00 00       	call   c001798c <ISO9660::ISO9660()>
c000a850:	83 c4 1c             	add    esp,0x1c
c000a853:	c3                   	ret    

c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a854:	55                   	push   ebp
c000a855:	57                   	push   edi
c000a856:	56                   	push   esi
c000a857:	53                   	push   ebx
c000a858:	81 ec 10 04 00 00    	sub    esp,0x410
c000a85e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a865:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a86c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a873:	68 00 04 00 00       	push   0x400
c000a878:	6a 00                	push   0x0
c000a87a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a87e:	56                   	push   esi
c000a87f:	e8 4c 5c ff ff       	call   c00004d0 <memset>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a88b:	75 0b                	jne    c000a898 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a88d:	50                   	push   eax
c000a88e:	50                   	push   eax
c000a88f:	57                   	push   edi
c000a890:	56                   	push   esi
c000a891:	e8 6a 5d ff ff       	call   c0000600 <strcpy>
c000a896:	eb 41                	jmp    c000a8d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a898:	8a 07                	mov    al,BYTE PTR [edi]
c000a89a:	3c 5c                	cmp    al,0x5c
c000a89c:	74 04                	je     c000a8a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a89e:	3c 2f                	cmp    al,0x2f
c000a8a0:	75 18                	jne    c000a8ba <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8a5:	3c 60                	cmp    al,0x60
c000a8a7:	7e 03                	jle    c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8a9:	83 e8 20             	sub    eax,0x20
c000a8ac:	88 04 24             	mov    BYTE PTR [esp],al
c000a8af:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8b6:	50                   	push   eax
c000a8b7:	50                   	push   eax
c000a8b8:	eb 18                	jmp    c000a8d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a8ba:	50                   	push   eax
c000a8bb:	50                   	push   eax
c000a8bc:	55                   	push   ebp
c000a8bd:	56                   	push   esi
c000a8be:	e8 3d 5d ff ff       	call   c0000600 <strcpy>
c000a8c3:	5a                   	pop    edx
c000a8c4:	59                   	pop    ecx
c000a8c5:	68 06 e5 01 c0       	push   0xc001e506
c000a8ca:	56                   	push   esi
c000a8cb:	e8 f0 5e ff ff       	call   c00007c0 <strcat>
c000a8d0:	5d                   	pop    ebp
c000a8d1:	58                   	pop    eax
c000a8d2:	57                   	push   edi
c000a8d3:	56                   	push   esi
c000a8d4:	e8 e7 5e ff ff       	call   c00007c0 <strcat>
c000a8d9:	83 c4 10             	add    esp,0x10
c000a8dc:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8df:	3c 60                	cmp    al,0x60
c000a8e1:	7e 03                	jle    c000a8e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8e3:	83 e8 20             	sub    eax,0x20
c000a8e6:	88 04 24             	mov    BYTE PTR [esp],al
c000a8e9:	88 03                	mov    BYTE PTR [ebx],al
c000a8eb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8f2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a8f8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a8fc:	bf 03 00 00 00       	mov    edi,0x3
c000a901:	b8 03 00 00 00       	mov    eax,0x3
c000a906:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a909:	84 d2                	test   dl,dl
c000a90b:	0f 84 91 00 00 00    	je     c000a9a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a911:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a914:	80 fa 5c             	cmp    dl,0x5c
c000a917:	74 05                	je     c000a91e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a919:	80 fa 2f             	cmp    dl,0x2f
c000a91c:	75 12                	jne    c000a930 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a91e:	89 c5                	mov    ebp,eax
c000a920:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a925:	74 09                	je     c000a930 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a927:	40                   	inc    eax
c000a928:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a92c:	89 cf                	mov    edi,ecx
c000a92e:	eb d6                	jmp    c000a906 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a930:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a935:	75 5b                	jne    c000a992 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a937:	80 fa 2e             	cmp    dl,0x2e
c000a93a:	75 56                	jne    c000a992 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a93c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a940:	74 19                	je     c000a95b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a942:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a947:	74 53                	je     c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a949:	89 f9                	mov    ecx,edi
c000a94b:	41                   	inc    ecx
c000a94c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a94f:	80 fa 2f             	cmp    dl,0x2f
c000a952:	74 f7                	je     c000a94b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a954:	80 fa 5c             	cmp    dl,0x5c
c000a957:	74 f2                	je     c000a94b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a959:	eb d1                	jmp    c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a95b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a960:	74 3a                	je     c000a99c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a962:	83 f8 03             	cmp    eax,0x3
c000a965:	74 c5                	je     c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a967:	41                   	inc    ecx
c000a968:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a96b:	80 fa 2f             	cmp    dl,0x2f
c000a96e:	74 f7                	je     c000a967 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a970:	80 fa 5c             	cmp    dl,0x5c
c000a973:	74 f2                	je     c000a967 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a975:	48                   	dec    eax
c000a976:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a97a:	75 06                	jne    c000a982 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a97c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a980:	eb f3                	jmp    c000a975 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a982:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a986:	74 07                	je     c000a98f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a988:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a98c:	48                   	dec    eax
c000a98d:	eb f3                	jmp    c000a982 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a98f:	40                   	inc    eax
c000a990:	eb 9a                	jmp    c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a992:	80 fa 2f             	cmp    dl,0x2f
c000a995:	74 95                	je     c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a997:	80 fa 5c             	cmp    dl,0x5c
c000a99a:	74 90                	je     c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a99c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a99f:	40                   	inc    eax
c000a9a0:	eb 8a                	jmp    c000a92c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9a2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9a6:	83 ec 0c             	sub    esp,0xc
c000a9a9:	53                   	push   ebx
c000a9aa:	e8 91 5b ff ff       	call   c0000540 <strlen>
c000a9af:	83 c4 10             	add    esp,0x10
c000a9b2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a9b7:	75 26                	jne    c000a9df <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a9b9:	83 ec 0c             	sub    esp,0xc
c000a9bc:	53                   	push   ebx
c000a9bd:	e8 7e 5b ff ff       	call   c0000540 <strlen>
c000a9c2:	83 c4 10             	add    esp,0x10
c000a9c5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a9ca:	74 26                	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a9cc:	83 ec 0c             	sub    esp,0xc
c000a9cf:	53                   	push   ebx
c000a9d0:	e8 6b 5b ff ff       	call   c0000540 <strlen>
c000a9d5:	83 c4 10             	add    esp,0x10
c000a9d8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9dd:	eb c7                	jmp    c000a9a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9df:	83 ec 0c             	sub    esp,0xc
c000a9e2:	53                   	push   ebx
c000a9e3:	e8 58 5b ff ff       	call   c0000540 <strlen>
c000a9e8:	83 c4 10             	add    esp,0x10
c000a9eb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9f0:	74 c7                	je     c000a9b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000a9f2:	81 c4 0c 04 00 00    	add    esp,0x40c
c000a9f8:	5b                   	pop    ebx
c000a9f9:	5e                   	pop    esi
c000a9fa:	5f                   	pop    edi
c000a9fb:	5d                   	pop    ebp
c000a9fc:	c3                   	ret    
c000a9fd:	90                   	nop

c000a9fe <File::File(char const*, Process*)>:
c000a9fe:	83 ec 0c             	sub    esp,0xc
c000aa01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa05:	83 ec 08             	sub    esp,0x8
c000aa08:	6a 00                	push   0x0
c000aa0a:	50                   	push   eax
c000aa0b:	e8 e2 e3 ff ff       	call   c0008df2 <UnixFile::UnixFile(int)>
c000aa10:	83 c4 10             	add    esp,0x10
c000aa13:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000aa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1c:	89 10                	mov    DWORD PTR [eax],edx
c000aa1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2c:	83 c0 0d             	add    eax,0xd
c000aa2f:	83 ec 04             	sub    esp,0x4
c000aa32:	52                   	push   edx
c000aa33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa37:	50                   	push   eax
c000aa38:	e8 17 fe ff ff       	call   c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa44:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa47:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa4e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa58:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa60:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa66:	25 ff 00 00 00       	and    eax,0xff
c000aa6b:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000aa72:	85 c0                	test   eax,eax
c000aa74:	74 42                	je     c000aab8 <File::File(char const*, Process*)+0xba>
c000aa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa80:	25 ff 00 00 00       	and    eax,0xff
c000aa85:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000aa8c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aa92:	85 c0                	test   eax,eax
c000aa94:	75 22                	jne    c000aab8 <File::File(char const*, Process*)+0xba>
c000aa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaa0:	25 ff 00 00 00       	and    eax,0xff
c000aaa5:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	50                   	push   eax
c000aab0:	e8 0f 20 00 00       	call   c000cac4 <LogicalDisk::mount()>
c000aab5:	83 c4 10             	add    esp,0x10
c000aab8:	90                   	nop
c000aab9:	83 c4 0c             	add    esp,0xc
c000aabc:	c3                   	ret    
c000aabd:	90                   	nop

c000aabe <File::open(FileOpenMode)>:
c000aabe:	53                   	push   ebx
c000aabf:	b8 0b 00 00 00       	mov    eax,0xb
c000aac4:	83 ec 08             	sub    esp,0x8
c000aac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aacb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aad2:	80 fa 19             	cmp    dl,0x19
c000aad5:	77 40                	ja     c000ab17 <File::open(FileOpenMode)+0x59>
c000aad7:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000aade:	85 d2                	test   edx,edx
c000aae0:	74 35                	je     c000ab17 <File::open(FileOpenMode)+0x59>
c000aae2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aae8:	85 d2                	test   edx,edx
c000aaea:	74 2b                	je     c000ab17 <File::open(FileOpenMode)+0x59>
c000aaec:	b8 06 00 00 00       	mov    eax,0x6
c000aaf1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000aaf5:	75 20                	jne    c000ab17 <File::open(FileOpenMode)+0x59>
c000aaf7:	8b 02                	mov    eax,DWORD PTR [edx]
c000aaf9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aaff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab03:	51                   	push   ecx
c000ab04:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab07:	51                   	push   ecx
c000ab08:	52                   	push   edx
c000ab09:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	85 c0                	test   eax,eax
c000ab11:	75 04                	jne    c000ab17 <File::open(FileOpenMode)+0x59>
c000ab13:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab17:	83 c4 08             	add    esp,0x8
c000ab1a:	5b                   	pop    ebx
c000ab1b:	c3                   	ret    

c000ab1c <File::close()>:
c000ab1c:	53                   	push   ebx
c000ab1d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab22:	83 ec 08             	sub    esp,0x8
c000ab25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab29:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab30:	80 fa 19             	cmp    dl,0x19
c000ab33:	77 41                	ja     c000ab76 <File::close()+0x5a>
c000ab35:	8b 1c 95 c0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd640]
c000ab3c:	85 db                	test   ebx,ebx
c000ab3e:	74 36                	je     c000ab76 <File::close()+0x5a>
c000ab40:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab47:	74 2d                	je     c000ab76 <File::close()+0x5a>
c000ab49:	b8 05 00 00 00       	mov    eax,0x5
c000ab4e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab52:	74 22                	je     c000ab76 <File::close()+0x5a>
c000ab54:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab58:	8b 04 95 c0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd640]
c000ab5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab65:	53                   	push   ebx
c000ab66:	53                   	push   ebx
c000ab67:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab69:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab6f:	50                   	push   eax
c000ab70:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	83 c4 08             	add    esp,0x8
c000ab79:	5b                   	pop    ebx
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <File::seek(unsigned long long)>:
c000ab7c:	56                   	push   esi
c000ab7d:	53                   	push   ebx
c000ab7e:	b8 0b 00 00 00       	mov    eax,0xb
c000ab83:	51                   	push   ecx
c000ab84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab8c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ab93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab97:	80 fa 19             	cmp    dl,0x19
c000ab9a:	77 31                	ja     c000abcd <File::seek(unsigned long long)+0x51>
c000ab9c:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000aba3:	85 d2                	test   edx,edx
c000aba5:	74 26                	je     c000abcd <File::seek(unsigned long long)+0x51>
c000aba7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abad:	85 d2                	test   edx,edx
c000abaf:	74 1c                	je     c000abcd <File::seek(unsigned long long)+0x51>
c000abb1:	b8 05 00 00 00       	mov    eax,0x5
c000abb6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000abba:	74 11                	je     c000abcd <File::seek(unsigned long long)+0x51>
c000abbc:	8b 02                	mov    eax,DWORD PTR [edx]
c000abbe:	53                   	push   ebx
c000abbf:	51                   	push   ecx
c000abc0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000abc6:	52                   	push   edx
c000abc7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000abca:	83 c4 10             	add    esp,0x10
c000abcd:	5a                   	pop    edx
c000abce:	5b                   	pop    ebx
c000abcf:	5e                   	pop    esi
c000abd0:	c3                   	ret    
c000abd1:	90                   	nop

c000abd2 <File::tell(unsigned long long*)>:
c000abd2:	83 ec 0c             	sub    esp,0xc
c000abd5:	b8 0b 00 00 00       	mov    eax,0xb
c000abda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abde:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abe5:	80 fa 19             	cmp    dl,0x19
c000abe8:	77 34                	ja     c000ac1e <File::tell(unsigned long long*)+0x4c>
c000abea:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000abf1:	85 d2                	test   edx,edx
c000abf3:	74 29                	je     c000ac1e <File::tell(unsigned long long*)+0x4c>
c000abf5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abfb:	85 d2                	test   edx,edx
c000abfd:	74 1f                	je     c000ac1e <File::tell(unsigned long long*)+0x4c>
c000abff:	b8 05 00 00 00       	mov    eax,0x5
c000ac04:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac08:	74 14                	je     c000ac1e <File::tell(unsigned long long*)+0x4c>
c000ac0a:	50                   	push   eax
c000ac0b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac11:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac17:	52                   	push   edx
c000ac18:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac1b:	83 c4 10             	add    esp,0x10
c000ac1e:	83 c4 0c             	add    esp,0xc
c000ac21:	c3                   	ret    

c000ac22 <File::rewind()>:
c000ac22:	83 ec 10             	sub    esp,0x10
c000ac25:	6a 00                	push   0x0
c000ac27:	6a 00                	push   0x0
c000ac29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2d:	e8 4a ff ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c000ac32:	83 c4 1c             	add    esp,0x1c
c000ac35:	c3                   	ret    

c000ac36 <File::unlink()>:
c000ac36:	83 ec 0c             	sub    esp,0xc
c000ac39:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac49:	80 f9 19             	cmp    cl,0x19
c000ac4c:	77 2f                	ja     c000ac7d <File::unlink()+0x47>
c000ac4e:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000ac55:	85 c9                	test   ecx,ecx
c000ac57:	74 24                	je     c000ac7d <File::unlink()+0x47>
c000ac59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac5f:	85 c9                	test   ecx,ecx
c000ac61:	74 1a                	je     c000ac7d <File::unlink()+0x47>
c000ac63:	b8 06 00 00 00       	mov    eax,0x6
c000ac68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac6c:	75 0f                	jne    c000ac7d <File::unlink()+0x47>
c000ac6e:	83 c2 0d             	add    edx,0xd
c000ac71:	50                   	push   eax
c000ac72:	50                   	push   eax
c000ac73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac75:	52                   	push   edx
c000ac76:	51                   	push   ecx
c000ac77:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	83 c4 0c             	add    esp,0xc
c000ac80:	c3                   	ret    
c000ac81:	90                   	nop

c000ac82 <File::rename(char const*)>:
c000ac82:	83 ec 0c             	sub    esp,0xc
c000ac85:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac95:	80 f9 19             	cmp    cl,0x19
c000ac98:	77 32                	ja     c000accc <File::rename(char const*)+0x4a>
c000ac9a:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000aca1:	85 c9                	test   ecx,ecx
c000aca3:	74 27                	je     c000accc <File::rename(char const*)+0x4a>
c000aca5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acab:	85 c9                	test   ecx,ecx
c000acad:	74 1d                	je     c000accc <File::rename(char const*)+0x4a>
c000acaf:	b8 06 00 00 00       	mov    eax,0x6
c000acb4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acb8:	75 12                	jne    c000accc <File::rename(char const*)+0x4a>
c000acba:	83 c2 0d             	add    edx,0xd
c000acbd:	50                   	push   eax
c000acbe:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc4:	52                   	push   edx
c000acc5:	51                   	push   ecx
c000acc6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000acc9:	83 c4 10             	add    esp,0x10
c000accc:	83 c4 0c             	add    esp,0xc
c000accf:	c3                   	ret    

c000acd0 <File::chfatattr(unsigned char, unsigned char)>:
c000acd0:	57                   	push   edi
c000acd1:	b8 0b 00 00 00       	mov    eax,0xb
c000acd6:	56                   	push   esi
c000acd7:	53                   	push   ebx
c000acd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acdc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ace0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ace7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aceb:	80 f9 19             	cmp    cl,0x19
c000acee:	77 37                	ja     c000ad27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acf0:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000acf7:	85 c9                	test   ecx,ecx
c000acf9:	74 2c                	je     c000ad27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acfb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad01:	85 c9                	test   ecx,ecx
c000ad03:	74 22                	je     c000ad27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad05:	b8 06 00 00 00       	mov    eax,0x6
c000ad0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad0e:	75 17                	jne    c000ad27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad10:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad12:	89 f0                	mov    eax,esi
c000ad14:	83 c2 0d             	add    edx,0xd
c000ad17:	0f b6 f0             	movzx  esi,al
c000ad1a:	0f b6 db             	movzx  ebx,bl
c000ad1d:	56                   	push   esi
c000ad1e:	53                   	push   ebx
c000ad1f:	52                   	push   edx
c000ad20:	51                   	push   ecx
c000ad21:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad24:	83 c4 10             	add    esp,0x10
c000ad27:	5b                   	pop    ebx
c000ad28:	5e                   	pop    esi
c000ad29:	5f                   	pop    edi
c000ad2a:	c3                   	ret    
c000ad2b:	90                   	nop

c000ad2c <File::exists()>:
c000ad2c:	83 ec 0c             	sub    esp,0xc
c000ad2f:	31 c0                	xor    eax,eax
c000ad31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad35:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad3c:	80 f9 19             	cmp    cl,0x19
c000ad3f:	77 24                	ja     c000ad65 <File::exists()+0x39>
c000ad41:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000ad48:	85 c9                	test   ecx,ecx
c000ad4a:	74 19                	je     c000ad65 <File::exists()+0x39>
c000ad4c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad52:	85 c9                	test   ecx,ecx
c000ad54:	74 0f                	je     c000ad65 <File::exists()+0x39>
c000ad56:	83 c2 0d             	add    edx,0xd
c000ad59:	50                   	push   eax
c000ad5a:	50                   	push   eax
c000ad5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad5d:	52                   	push   edx
c000ad5e:	51                   	push   ecx
c000ad5f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad62:	83 c4 10             	add    esp,0x10
c000ad65:	83 c4 0c             	add    esp,0xc
c000ad68:	c3                   	ret    
c000ad69:	90                   	nop

c000ad6a <File::stat(unsigned long long*, bool*)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	50                   	push   eax
c000ad6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ad72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad85:	80 f9 19             	cmp    cl,0x19
c000ad88:	77 3d                	ja     c000adc7 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad8a:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000ad91:	85 c9                	test   ecx,ecx
c000ad93:	74 32                	je     c000adc7 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad9b:	85 c9                	test   ecx,ecx
c000ad9d:	74 28                	je     c000adc7 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ada1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ada5:	74 13                	je     c000adba <File::stat(unsigned long long*, bool*)+0x50>
c000ada7:	83 ec 04             	sub    esp,0x4
c000adaa:	56                   	push   esi
c000adab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000adb1:	51                   	push   ecx
c000adb2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000adb5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000adb8:	eb 0a                	jmp    c000adc4 <File::stat(unsigned long long*, bool*)+0x5a>
c000adba:	53                   	push   ebx
c000adbb:	83 c2 0d             	add    edx,0xd
c000adbe:	56                   	push   esi
c000adbf:	52                   	push   edx
c000adc0:	51                   	push   ecx
c000adc1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000adc4:	83 c4 10             	add    esp,0x10
c000adc7:	5a                   	pop    edx
c000adc8:	5b                   	pop    ebx
c000adc9:	5e                   	pop    esi
c000adca:	c3                   	ret    

c000adcb <Fs::setcwd(Process*, char*)>:
c000adcb:	55                   	push   ebp
c000adcc:	57                   	push   edi
c000adcd:	56                   	push   esi
c000adce:	53                   	push   ebx
c000adcf:	81 ec 20 02 00 00    	sub    esp,0x220
c000add5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000addc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ade2:	57                   	push   edi
c000ade3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000adea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000adee:	56                   	push   esi
c000adef:	e8 60 fa ff ff       	call   c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>
c000adf4:	89 34 24             	mov    DWORD PTR [esp],esi
c000adf7:	e8 44 57 ff ff       	call   c0000540 <strlen>
c000adfc:	83 c4 10             	add    esp,0x10
c000adff:	83 f8 02             	cmp    eax,0x2
c000ae02:	77 15                	ja     c000ae19 <Fs::setcwd(Process*, char*)+0x4e>
c000ae04:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae09:	83 eb 41             	sub    ebx,0x41
c000ae0c:	8b 04 9d c0 29 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd640]
c000ae13:	85 c0                	test   eax,eax
c000ae15:	75 1c                	jne    c000ae33 <Fs::setcwd(Process*, char*)+0x68>
c000ae17:	eb 2f                	jmp    c000ae48 <Fs::setcwd(Process*, char*)+0x7d>
c000ae19:	83 ec 0c             	sub    esp,0xc
c000ae1c:	56                   	push   esi
c000ae1d:	e8 1e 57 ff ff       	call   c0000540 <strlen>
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	83 f8 03             	cmp    eax,0x3
c000ae28:	75 57                	jne    c000ae81 <Fs::setcwd(Process*, char*)+0xb6>
c000ae2a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae2f:	75 50                	jne    c000ae81 <Fs::setcwd(Process*, char*)+0xb6>
c000ae31:	eb d1                	jmp    c000ae04 <Fs::setcwd(Process*, char*)+0x39>
c000ae33:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae3a:	75 0c                	jne    c000ae48 <Fs::setcwd(Process*, char*)+0x7d>
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	50                   	push   eax
c000ae40:	e8 7f 1c 00 00       	call   c000cac4 <LogicalDisk::mount()>
c000ae45:	83 c4 10             	add    esp,0x10
c000ae48:	b8 03 00 00 00       	mov    eax,0x3
c000ae4d:	83 fb 19             	cmp    ebx,0x19
c000ae50:	0f 87 c6 00 00 00    	ja     c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000ae56:	8b 14 9d c0 29 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd640]
c000ae5d:	b8 05 00 00 00       	mov    eax,0x5
c000ae62:	85 d2                	test   edx,edx
c000ae64:	0f 84 b2 00 00 00    	je     c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000ae6a:	b8 06 00 00 00       	mov    eax,0x6
c000ae6f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae76:	0f 85 92 00 00 00    	jne    c000af0e <Fs::setcwd(Process*, char*)+0x143>
c000ae7c:	e9 9b 00 00 00       	jmp    c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000ae81:	83 ec 0c             	sub    esp,0xc
c000ae84:	68 14 01 00 00       	push   0x114
c000ae89:	e8 2b c9 ff ff       	call   c00077b9 <malloc>
c000ae8e:	83 c4 0c             	add    esp,0xc
c000ae91:	89 c3                	mov    ebx,eax
c000ae93:	55                   	push   ebp
c000ae94:	56                   	push   esi
c000ae95:	50                   	push   eax
c000ae96:	e8 63 fb ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000ae9b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aea0:	83 c4 0c             	add    esp,0xc
c000aea3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aea7:	50                   	push   eax
c000aea8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aeac:	50                   	push   eax
c000aead:	53                   	push   ebx
c000aeae:	e8 b7 fe ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c000aeb3:	83 c4 10             	add    esp,0x10
c000aeb6:	83 f8 02             	cmp    eax,0x2
c000aeb9:	74 04                	je     c000aebf <Fs::setcwd(Process*, char*)+0xf4>
c000aebb:	85 c0                	test   eax,eax
c000aebd:	74 1c                	je     c000aedb <Fs::setcwd(Process*, char*)+0x110>
c000aebf:	b8 01 00 00 00       	mov    eax,0x1
c000aec4:	85 db                	test   ebx,ebx
c000aec6:	74 54                	je     c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000aec8:	83 ec 0c             	sub    esp,0xc
c000aecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aecd:	53                   	push   ebx
c000aece:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	b8 01 00 00 00       	mov    eax,0x1
c000aed9:	eb 41                	jmp    c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000aedb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aee0:	75 1c                	jne    c000aefe <Fs::setcwd(Process*, char*)+0x133>
c000aee2:	b8 02 00 00 00       	mov    eax,0x2
c000aee7:	85 db                	test   ebx,ebx
c000aee9:	74 31                	je     c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000aeeb:	83 ec 0c             	sub    esp,0xc
c000aeee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aef0:	53                   	push   ebx
c000aef1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	b8 02 00 00 00       	mov    eax,0x2
c000aefc:	eb 1e                	jmp    c000af1c <Fs::setcwd(Process*, char*)+0x151>
c000aefe:	85 db                	test   ebx,ebx
c000af00:	74 0c                	je     c000af0e <Fs::setcwd(Process*, char*)+0x143>
c000af02:	83 ec 0c             	sub    esp,0xc
c000af05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af07:	53                   	push   ebx
c000af08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	50                   	push   eax
c000af0f:	50                   	push   eax
c000af10:	56                   	push   esi
c000af11:	57                   	push   edi
c000af12:	e8 e9 56 ff ff       	call   c0000600 <strcpy>
c000af17:	83 c4 10             	add    esp,0x10
c000af1a:	31 c0                	xor    eax,eax
c000af1c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af22:	5b                   	pop    ebx
c000af23:	5e                   	pop    esi
c000af24:	5f                   	pop    edi
c000af25:	5d                   	pop    ebp
c000af26:	c3                   	ret    
c000af27:	90                   	nop

c000af28 <Directory::Directory(char const*, Process*)>:
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2f:	83 ec 08             	sub    esp,0x8
c000af32:	6a 00                	push   0x0
c000af34:	50                   	push   eax
c000af35:	e8 b8 de ff ff       	call   c0008df2 <UnixFile::UnixFile(int)>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af46:	89 10                	mov    DWORD PTR [eax],edx
c000af48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af4c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	83 c0 0d             	add    eax,0xd
c000af59:	83 ec 04             	sub    esp,0x4
c000af5c:	52                   	push   edx
c000af5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af61:	50                   	push   eax
c000af62:	e8 ed f8 ff ff       	call   c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af67:	83 c4 10             	add    esp,0x10
c000af6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af71:	8d 50 bf             	lea    edx,[eax-0x41]
c000af74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af78:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af82:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af90:	25 ff 00 00 00       	and    eax,0xff
c000af95:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000af9c:	85 c0                	test   eax,eax
c000af9e:	74 42                	je     c000afe2 <Directory::Directory(char const*, Process*)+0xba>
c000afa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afaa:	25 ff 00 00 00       	and    eax,0xff
c000afaf:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000afb6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000afbc:	85 c0                	test   eax,eax
c000afbe:	75 22                	jne    c000afe2 <Directory::Directory(char const*, Process*)+0xba>
c000afc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afca:	25 ff 00 00 00       	and    eax,0xff
c000afcf:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c000afd6:	83 ec 0c             	sub    esp,0xc
c000afd9:	50                   	push   eax
c000afda:	e8 e5 1a 00 00       	call   c000cac4 <LogicalDisk::mount()>
c000afdf:	83 c4 10             	add    esp,0x10
c000afe2:	90                   	nop
c000afe3:	83 c4 0c             	add    esp,0xc
c000afe6:	c3                   	ret    
c000afe7:	90                   	nop

c000afe8 <Directory::open()>:
c000afe8:	53                   	push   ebx
c000afe9:	b8 0b 00 00 00       	mov    eax,0xb
c000afee:	83 ec 08             	sub    esp,0x8
c000aff1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aff5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000affc:	80 fa 19             	cmp    dl,0x19
c000afff:	77 3d                	ja     c000b03e <Directory::open()+0x56>
c000b001:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000b008:	85 d2                	test   edx,edx
c000b00a:	74 32                	je     c000b03e <Directory::open()+0x56>
c000b00c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b012:	85 d2                	test   edx,edx
c000b014:	74 28                	je     c000b03e <Directory::open()+0x56>
c000b016:	b8 06 00 00 00       	mov    eax,0x6
c000b01b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b01f:	75 1d                	jne    c000b03e <Directory::open()+0x56>
c000b021:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b027:	50                   	push   eax
c000b028:	8b 02                	mov    eax,DWORD PTR [edx]
c000b02a:	51                   	push   ecx
c000b02b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b02e:	51                   	push   ecx
c000b02f:	52                   	push   edx
c000b030:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	85 c0                	test   eax,eax
c000b038:	75 04                	jne    c000b03e <Directory::open()+0x56>
c000b03a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b03e:	83 c4 08             	add    esp,0x8
c000b041:	5b                   	pop    ebx
c000b042:	c3                   	ret    
c000b043:	90                   	nop

c000b044 <Directory::close()>:
c000b044:	53                   	push   ebx
c000b045:	b8 0b 00 00 00       	mov    eax,0xb
c000b04a:	83 ec 08             	sub    esp,0x8
c000b04d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b051:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b058:	80 fa 19             	cmp    dl,0x19
c000b05b:	77 41                	ja     c000b09e <Directory::close()+0x5a>
c000b05d:	8b 1c 95 c0 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd640]
c000b064:	85 db                	test   ebx,ebx
c000b066:	74 36                	je     c000b09e <Directory::close()+0x5a>
c000b068:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b06f:	74 2d                	je     c000b09e <Directory::close()+0x5a>
c000b071:	b8 05 00 00 00       	mov    eax,0x5
c000b076:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b07a:	74 22                	je     c000b09e <Directory::close()+0x5a>
c000b07c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b080:	8b 04 95 c0 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd640]
c000b087:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b08d:	53                   	push   ebx
c000b08e:	53                   	push   ebx
c000b08f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b091:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b097:	50                   	push   eax
c000b098:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b09b:	83 c4 10             	add    esp,0x10
c000b09e:	83 c4 08             	add    esp,0x8
c000b0a1:	5b                   	pop    ebx
c000b0a2:	c3                   	ret    
c000b0a3:	90                   	nop

c000b0a4 <Directory::unlink()>:
c000b0a4:	83 ec 0c             	sub    esp,0xc
c000b0a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0b7:	80 f9 19             	cmp    cl,0x19
c000b0ba:	77 2f                	ja     c000b0eb <Directory::unlink()+0x47>
c000b0bc:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000b0c3:	85 c9                	test   ecx,ecx
c000b0c5:	74 24                	je     c000b0eb <Directory::unlink()+0x47>
c000b0c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0cd:	85 c9                	test   ecx,ecx
c000b0cf:	74 1a                	je     c000b0eb <Directory::unlink()+0x47>
c000b0d1:	b8 06 00 00 00       	mov    eax,0x6
c000b0d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0da:	75 0f                	jne    c000b0eb <Directory::unlink()+0x47>
c000b0dc:	83 c2 0d             	add    edx,0xd
c000b0df:	50                   	push   eax
c000b0e0:	50                   	push   eax
c000b0e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0e3:	52                   	push   edx
c000b0e4:	51                   	push   ecx
c000b0e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0e8:	83 c4 10             	add    esp,0x10
c000b0eb:	83 c4 0c             	add    esp,0xc
c000b0ee:	c3                   	ret    
c000b0ef:	90                   	nop

c000b0f0 <Directory::rename(char const*)>:
c000b0f0:	83 ec 0c             	sub    esp,0xc
c000b0f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b0f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b103:	80 f9 19             	cmp    cl,0x19
c000b106:	77 32                	ja     c000b13a <Directory::rename(char const*)+0x4a>
c000b108:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000b10f:	85 c9                	test   ecx,ecx
c000b111:	74 27                	je     c000b13a <Directory::rename(char const*)+0x4a>
c000b113:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b119:	85 c9                	test   ecx,ecx
c000b11b:	74 1d                	je     c000b13a <Directory::rename(char const*)+0x4a>
c000b11d:	b8 06 00 00 00       	mov    eax,0x6
c000b122:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b126:	75 12                	jne    c000b13a <Directory::rename(char const*)+0x4a>
c000b128:	83 c2 0d             	add    edx,0xd
c000b12b:	50                   	push   eax
c000b12c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b12e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b132:	52                   	push   edx
c000b133:	51                   	push   ecx
c000b134:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	83 c4 0c             	add    esp,0xc
c000b13d:	c3                   	ret    

c000b13e <Directory::exists()>:
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	31 c0                	xor    eax,eax
c000b143:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b147:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b14e:	80 f9 19             	cmp    cl,0x19
c000b151:	77 24                	ja     c000b177 <Directory::exists()+0x39>
c000b153:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000b15a:	85 c9                	test   ecx,ecx
c000b15c:	74 19                	je     c000b177 <Directory::exists()+0x39>
c000b15e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b164:	85 c9                	test   ecx,ecx
c000b166:	74 0f                	je     c000b177 <Directory::exists()+0x39>
c000b168:	83 c2 0d             	add    edx,0xd
c000b16b:	50                   	push   eax
c000b16c:	50                   	push   eax
c000b16d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b16f:	52                   	push   edx
c000b170:	51                   	push   ecx
c000b171:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b174:	83 c4 10             	add    esp,0x10
c000b177:	83 c4 0c             	add    esp,0xc
c000b17a:	c3                   	ret    
c000b17b:	90                   	nop

c000b17c <Directory::read(dirent*)>:
c000b17c:	83 ec 1c             	sub    esp,0x1c
c000b17f:	b8 0b 00 00 00       	mov    eax,0xb
c000b184:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b188:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b18f:	80 fa 19             	cmp    dl,0x19
c000b192:	77 30                	ja     c000b1c4 <Directory::read(dirent*)+0x48>
c000b194:	8b 14 95 c0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd640]
c000b19b:	85 d2                	test   edx,edx
c000b19d:	74 25                	je     c000b1c4 <Directory::read(dirent*)+0x48>
c000b19f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1a6:	74 1c                	je     c000b1c4 <Directory::read(dirent*)+0x48>
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1b1:	52                   	push   edx
c000b1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b6:	6a 00                	push   0x0
c000b1b8:	68 10 01 00 00       	push   0x110
c000b1bd:	51                   	push   ecx
c000b1be:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1c1:	83 c4 20             	add    esp,0x20
c000b1c4:	83 c4 1c             	add    esp,0x1c
c000b1c7:	c3                   	ret    

c000b1c8 <Directory::create()>:
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1db:	80 f9 19             	cmp    cl,0x19
c000b1de:	77 2f                	ja     c000b20f <Directory::create()+0x47>
c000b1e0:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c000b1e7:	85 c9                	test   ecx,ecx
c000b1e9:	74 24                	je     c000b20f <Directory::create()+0x47>
c000b1eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1f1:	85 c9                	test   ecx,ecx
c000b1f3:	74 1a                	je     c000b20f <Directory::create()+0x47>
c000b1f5:	b8 06 00 00 00       	mov    eax,0x6
c000b1fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1fe:	75 0f                	jne    c000b20f <Directory::create()+0x47>
c000b200:	83 c2 0d             	add    edx,0xd
c000b203:	50                   	push   eax
c000b204:	50                   	push   eax
c000b205:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b207:	52                   	push   edx
c000b208:	51                   	push   ecx
c000b209:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b20c:	83 c4 10             	add    esp,0x10
c000b20f:	83 c4 0c             	add    esp,0xc
c000b212:	c3                   	ret    
c000b213:	90                   	nop

c000b214 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b214:	b8 0a 00 00 00       	mov    eax,0xa
c000b219:	c3                   	ret    
c000b21a:	66 90                	xchg   ax,ax

c000b21c <Bus::Bus(char const*)>:
c000b21c:	83 ec 0c             	sub    esp,0xc
c000b21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b223:	83 ec 08             	sub    esp,0x8
c000b226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b22a:	50                   	push   eax
c000b22b:	e8 30 08 00 00       	call   c000ba60 <Device::Device(char const*)>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	ba d0 d8 01 c0       	mov    edx,0xc001d8d0
c000b238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b23c:	89 10                	mov    DWORD PTR [eax],edx
c000b23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b242:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b24c:	90                   	nop
c000b24d:	83 c4 0c             	add    esp,0xc
c000b250:	c3                   	ret    
c000b251:	90                   	nop
c000b252:	66 90                	xchg   ax,ax

c000b254 <Bus::~Bus()>:
c000b254:	83 ec 0c             	sub    esp,0xc
c000b257:	ba d0 d8 01 c0       	mov    edx,0xc001d8d0
c000b25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b260:	89 10                	mov    DWORD PTR [eax],edx
c000b262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b266:	83 ec 0c             	sub    esp,0xc
c000b269:	50                   	push   eax
c000b26a:	e8 5b 05 00 00       	call   c000b7ca <Device::~Device()>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	90                   	nop
c000b273:	83 c4 0c             	add    esp,0xc
c000b276:	c3                   	ret    
c000b277:	90                   	nop

c000b278 <Bus::~Bus()>:
c000b278:	83 ec 0c             	sub    esp,0xc
c000b27b:	83 ec 0c             	sub    esp,0xc
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 cd ff ff ff       	call   c000b254 <Bus::~Bus()>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	83 ec 08             	sub    esp,0x8
c000b28d:	68 58 01 00 00       	push   0x158
c000b292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b296:	e8 f7 f0 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	83 c4 0c             	add    esp,0xc
c000b2a1:	c3                   	ret    

c000b2a2 <beepThread(void*)>:
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000b2aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2ae:	48                   	dec    eax
c000b2af:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000b2b4:	75 01                	jne    c000b2b7 <beepThread(void*)+0x15>
c000b2b6:	fb                   	sti    
c000b2b7:	83 ec 0c             	sub    esp,0xc
c000b2ba:	6b c2 0a             	imul   eax,edx,0xa
c000b2bd:	50                   	push   eax
c000b2be:	e8 51 83 00 00       	call   c0013614 <milliTenthSleep(unsigned int)>
c000b2c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b2ca:	e8 f7 a0 00 00       	call   c00153c6 <HalMakeBeep(int)>
c000b2cf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2d7:	83 c4 1c             	add    esp,0x1c
c000b2da:	e9 31 82 00 00       	jmp    c0013510 <blockTask(TaskState)>

c000b2df <Krnl::beep(int, int, bool)>:
c000b2df:	56                   	push   esi
c000b2e0:	53                   	push   ebx
c000b2e1:	83 ec 10             	sub    esp,0x10
c000b2e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b2e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f0:	e8 d1 a0 00 00       	call   c00153c6 <HalMakeBeep(int)>
c000b2f5:	83 c4 10             	add    esp,0x10
c000b2f8:	89 f0                	mov    eax,esi
c000b2fa:	84 c0                	test   al,al
c000b2fc:	74 1e                	je     c000b31c <Krnl::beep(int, int, bool)+0x3d>
c000b2fe:	83 ec 0c             	sub    esp,0xc
c000b301:	6b db 0a             	imul   ebx,ebx,0xa
c000b304:	53                   	push   ebx
c000b305:	e8 0a 83 00 00       	call   c0013614 <milliTenthSleep(unsigned int)>
c000b30a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b312:	83 c4 14             	add    esp,0x14
c000b315:	5b                   	pop    ebx
c000b316:	5e                   	pop    esi
c000b317:	e9 aa a0 00 00       	jmp    c00153c6 <HalMakeBeep(int)>
c000b31c:	68 e6 00 00 00       	push   0xe6
c000b321:	53                   	push   ebx
c000b322:	68 a2 b2 00 c0       	push   0xc000b2a2
c000b327:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c000b32d:	e8 c2 7d 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c000b332:	83 c4 14             	add    esp,0x14
c000b335:	5b                   	pop    ebx
c000b336:	5e                   	pop    esi
c000b337:	c3                   	ret    

c000b338 <User::loadClockSettings(int)>:
c000b338:	53                   	push   ebx
c000b339:	83 ec 14             	sub    esp,0x14
c000b33c:	68 14 01 00 00       	push   0x114
c000b341:	e8 73 c4 ff ff       	call   c00077b9 <malloc>
c000b346:	83 c4 0c             	add    esp,0xc
c000b349:	89 c3                	mov    ebx,eax
c000b34b:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c000b351:	68 f4 d8 01 c0       	push   0xc001d8f4
c000b356:	50                   	push   eax
c000b357:	e8 a2 f6 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000b35c:	58                   	pop    eax
c000b35d:	5a                   	pop    edx
c000b35e:	6a 01                	push   0x1
c000b360:	53                   	push   ebx
c000b361:	e8 58 f7 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c000b366:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b369:	e8 ae f7 ff ff       	call   c000ab1c <File::close()>
c000b36e:	83 c4 10             	add    esp,0x10
c000b371:	85 db                	test   ebx,ebx
c000b373:	74 0f                	je     c000b384 <User::loadClockSettings(int)+0x4c>
c000b375:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b377:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b37b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b37e:	83 c4 08             	add    esp,0x8
c000b381:	5b                   	pop    ebx
c000b382:	ff e0                	jmp    eax
c000b384:	83 c4 08             	add    esp,0x8
c000b387:	5b                   	pop    ebx
c000b388:	c3                   	ret    
c000b389:	90                   	nop

c000b38a <Clock::Clock(char const*)>:
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b391:	83 ec 08             	sub    esp,0x8
c000b394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b398:	50                   	push   eax
c000b399:	e8 c2 06 00 00       	call   c000ba60 <Device::Device(char const*)>
c000b39e:	83 c4 10             	add    esp,0x10
c000b3a1:	ba 1c d9 01 c0       	mov    edx,0xc001d91c
c000b3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3aa:	89 10                	mov    DWORD PTR [eax],edx
c000b3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b3ba:	90                   	nop
c000b3bb:	83 c4 0c             	add    esp,0xc
c000b3be:	c3                   	ret    
c000b3bf:	90                   	nop

c000b3c0 <Clock::~Clock()>:
c000b3c0:	83 ec 0c             	sub    esp,0xc
c000b3c3:	ba 1c d9 01 c0       	mov    edx,0xc001d91c
c000b3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cc:	89 10                	mov    DWORD PTR [eax],edx
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	83 ec 0c             	sub    esp,0xc
c000b3d5:	50                   	push   eax
c000b3d6:	e8 ef 03 00 00       	call   c000b7ca <Device::~Device()>
c000b3db:	83 c4 10             	add    esp,0x10
c000b3de:	90                   	nop
c000b3df:	83 c4 0c             	add    esp,0xc
c000b3e2:	c3                   	ret    
c000b3e3:	90                   	nop

c000b3e4 <Clock::~Clock()>:
c000b3e4:	83 ec 0c             	sub    esp,0xc
c000b3e7:	83 ec 0c             	sub    esp,0xc
c000b3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ee:	e8 cd ff ff ff       	call   c000b3c0 <Clock::~Clock()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	83 ec 08             	sub    esp,0x8
c000b3f9:	68 58 01 00 00       	push   0x158
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 8b ef ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 c4 0c             	add    esp,0xc
c000b40d:	c3                   	ret    

c000b40e <Clock::timeInSecondsLocal()>:
c000b40e:	53                   	push   ebx
c000b40f:	83 ec 14             	sub    esp,0x14
c000b412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b416:	8b 10                	mov    edx,DWORD PTR [eax]
c000b418:	50                   	push   eax
c000b419:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b41c:	0f b6 0d 58 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020558
c000b423:	03 0d 5c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002055c
c000b429:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b42f:	89 cb                	mov    ebx,ecx
c000b431:	c1 fb 1f             	sar    ebx,0x1f
c000b434:	01 c8                	add    eax,ecx
c000b436:	11 da                	adc    edx,ebx
c000b438:	83 c4 10             	add    esp,0x10
c000b43b:	31 c9                	xor    ecx,ecx
c000b43d:	80 3d 59 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020559,0x0
c000b444:	74 05                	je     c000b44b <Clock::timeInSecondsLocal()+0x3d>
c000b446:	b9 08 07 00 00       	mov    ecx,0x708
c000b44b:	31 db                	xor    ebx,ebx
c000b44d:	01 c8                	add    eax,ecx
c000b44f:	11 da                	adc    edx,ebx
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    

c000b456 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b456:	57                   	push   edi
c000b457:	56                   	push   esi
c000b458:	53                   	push   ebx
c000b459:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b45d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b461:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b463:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b467:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b46a:	0f b6 05 58 05 02 c0 	movzx  eax,BYTE PTR ds:0xc0020558
c000b471:	03 05 5c 05 02 c0    	add    eax,DWORD PTR ds:0xc002055c
c000b477:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b47d:	99                   	cdq    
c000b47e:	29 c6                	sub    esi,eax
c000b480:	19 d7                	sbb    edi,edx
c000b482:	89 f0                	mov    eax,esi
c000b484:	89 fa                	mov    edx,edi
c000b486:	31 f6                	xor    esi,esi
c000b488:	80 3d 59 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020559,0x0
c000b48f:	74 05                	je     c000b496 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b491:	be 08 07 00 00       	mov    esi,0x708
c000b496:	31 ff                	xor    edi,edi
c000b498:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b49c:	29 f0                	sub    eax,esi
c000b49e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4a2:	19 fa                	sbb    edx,edi
c000b4a4:	89 d8                	mov    eax,ebx
c000b4a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4aa:	5b                   	pop    ebx
c000b4ab:	5e                   	pop    esi
c000b4ac:	5f                   	pop    edi
c000b4ad:	ff e0                	jmp    eax

c000b4af <datetimeToSeconds(datetime_t)>:
c000b4af:	55                   	push   ebp
c000b4b0:	57                   	push   edi
c000b4b1:	56                   	push   esi
c000b4b2:	53                   	push   ebx
c000b4b3:	83 ec 14             	sub    esp,0x14
c000b4b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b4ba:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b4be:	89 d3                	mov    ebx,edx
c000b4c0:	0f b6 c6             	movzx  eax,dh
c000b4c3:	c1 eb 10             	shr    ebx,0x10
c000b4c6:	48                   	dec    eax
c000b4c7:	66 81 eb 6c 07       	sub    bx,0x76c
c000b4cc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b4d0:	0f b6 f5             	movzx  esi,ch
c000b4d3:	89 cf                	mov    edi,ecx
c000b4d5:	6b f6 3c             	imul   esi,esi,0x3c
c000b4d8:	c1 ef 10             	shr    edi,0x10
c000b4db:	0f b6 c9             	movzx  ecx,cl
c000b4de:	89 f8                	mov    eax,edi
c000b4e0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4e6:	0f b6 f8             	movzx  edi,al
c000b4e9:	0f b6 d2             	movzx  edx,dl
c000b4ec:	01 fe                	add    esi,edi
c000b4ee:	01 f1                	add    ecx,esi
c000b4f0:	0f b7 f3             	movzx  esi,bx
c000b4f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b4f7:	c1 f9 1f             	sar    ecx,0x1f
c000b4fa:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b4ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b503:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b508:	8b 0c 8d 60 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe26a0]
c000b50f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b513:	76 29                	jbe    c000b53e <datetimeToSeconds(datetime_t)+0x8f>
c000b515:	f6 c3 03             	test   bl,0x3
c000b518:	75 24                	jne    c000b53e <datetimeToSeconds(datetime_t)+0x8f>
c000b51a:	31 d2                	xor    edx,edx
c000b51c:	bf 64 00 00 00       	mov    edi,0x64
c000b521:	89 d8                	mov    eax,ebx
c000b523:	66 f7 f7             	div    di
c000b526:	66 85 d2             	test   dx,dx
c000b529:	75 12                	jne    c000b53d <datetimeToSeconds(datetime_t)+0x8e>
c000b52b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b531:	bf 90 01 00 00       	mov    edi,0x190
c000b536:	99                   	cdq    
c000b537:	f7 ff                	idiv   edi
c000b539:	85 d2                	test   edx,edx
c000b53b:	75 01                	jne    c000b53e <datetimeToSeconds(datetime_t)+0x8f>
c000b53d:	41                   	inc    ecx
c000b53e:	66 83 fb 46          	cmp    bx,0x46
c000b542:	76 45                	jbe    c000b589 <datetimeToSeconds(datetime_t)+0xda>
c000b544:	bb 46 00 00 00       	mov    ebx,0x46
c000b549:	bf 64 00 00 00       	mov    edi,0x64
c000b54e:	bd 90 01 00 00       	mov    ebp,0x190
c000b553:	b8 6d 01 00 00       	mov    eax,0x16d
c000b558:	f6 c3 03             	test   bl,0x3
c000b55b:	75 23                	jne    c000b580 <datetimeToSeconds(datetime_t)+0xd1>
c000b55d:	89 d8                	mov    eax,ebx
c000b55f:	99                   	cdq    
c000b560:	f7 ff                	idiv   edi
c000b562:	b8 6e 01 00 00       	mov    eax,0x16e
c000b567:	85 d2                	test   edx,edx
c000b569:	75 15                	jne    c000b580 <datetimeToSeconds(datetime_t)+0xd1>
c000b56b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b571:	99                   	cdq    
c000b572:	f7 fd                	idiv   ebp
c000b574:	31 c0                	xor    eax,eax
c000b576:	85 d2                	test   edx,edx
c000b578:	0f 94 c0             	sete   al
c000b57b:	05 6d 01 00 00       	add    eax,0x16d
c000b580:	01 c1                	add    ecx,eax
c000b582:	43                   	inc    ebx
c000b583:	39 f3                	cmp    ebx,esi
c000b585:	7c cc                	jl     c000b553 <datetimeToSeconds(datetime_t)+0xa4>
c000b587:	eb 3b                	jmp    c000b5c4 <datetimeToSeconds(datetime_t)+0x115>
c000b589:	74 39                	je     c000b5c4 <datetimeToSeconds(datetime_t)+0x115>
c000b58b:	b8 45 00 00 00       	mov    eax,0x45
c000b590:	89 c2                	mov    edx,eax
c000b592:	83 e2 03             	and    edx,0x3
c000b595:	39 f0                	cmp    eax,esi
c000b597:	7e 13                	jle    c000b5ac <datetimeToSeconds(datetime_t)+0xfd>
c000b599:	85 d2                	test   edx,edx
c000b59b:	0f 94 c2             	sete   dl
c000b59e:	48                   	dec    eax
c000b59f:	0f b6 d2             	movzx  edx,dl
c000b5a2:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5a8:	29 d1                	sub    ecx,edx
c000b5aa:	eb e4                	jmp    c000b590 <datetimeToSeconds(datetime_t)+0xe1>
c000b5ac:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5b1:	85 d2                	test   edx,edx
c000b5b3:	75 0d                	jne    c000b5c2 <datetimeToSeconds(datetime_t)+0x113>
c000b5b5:	31 c0                	xor    eax,eax
c000b5b7:	66 85 db             	test   bx,bx
c000b5ba:	0f 95 c0             	setne  al
c000b5bd:	05 6d 01 00 00       	add    eax,0x16d
c000b5c2:	29 c1                	sub    ecx,eax
c000b5c4:	b8 80 51 01 00       	mov    eax,0x15180
c000b5c9:	f7 e9                	imul   ecx
c000b5cb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b5cf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b5d3:	83 c4 14             	add    esp,0x14
c000b5d6:	5b                   	pop    ebx
c000b5d7:	5e                   	pop    esi
c000b5d8:	5f                   	pop    edi
c000b5d9:	5d                   	pop    ebp
c000b5da:	c3                   	ret    
c000b5db:	90                   	nop

c000b5dc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5dc:	57                   	push   edi
c000b5dd:	56                   	push   esi
c000b5de:	53                   	push   ebx
c000b5df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5e3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5e5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b5e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5f0:	e8 ba fe ff ff       	call   c000b4af <datetimeToSeconds(datetime_t)>
c000b5f5:	59                   	pop    ecx
c000b5f6:	0f b6 0d 58 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020558
c000b5fd:	5b                   	pop    ebx
c000b5fe:	03 0d 5c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002055c
c000b604:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b60a:	89 cb                	mov    ebx,ecx
c000b60c:	c1 fb 1f             	sar    ebx,0x1f
c000b60f:	29 c8                	sub    eax,ecx
c000b611:	19 da                	sbb    edx,ebx
c000b613:	31 c9                	xor    ecx,ecx
c000b615:	80 3d 59 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020559,0x0
c000b61c:	74 05                	je     c000b623 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b61e:	b9 08 07 00 00       	mov    ecx,0x708
c000b623:	31 db                	xor    ebx,ebx
c000b625:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b629:	29 c8                	sub    eax,ecx
c000b62b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b62f:	19 da                	sbb    edx,ebx
c000b631:	89 f8                	mov    eax,edi
c000b633:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b637:	5b                   	pop    ebx
c000b638:	5e                   	pop    esi
c000b639:	5f                   	pop    edi
c000b63a:	ff e0                	jmp    eax

c000b63c <secondsToDatetime(unsigned long long)>:
c000b63c:	55                   	push   ebp
c000b63d:	57                   	push   edi
c000b63e:	56                   	push   esi
c000b63f:	53                   	push   ebx
c000b640:	83 ec 1c             	sub    esp,0x1c
c000b643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b647:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b64b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b64f:	6a 00                	push   0x0
c000b651:	68 80 51 01 00       	push   0x15180
c000b656:	55                   	push   ebp
c000b657:	57                   	push   edi
c000b658:	e8 b3 05 01 00       	call   c001bc10 <__udivdi3>
c000b65d:	83 c4 10             	add    esp,0x10
c000b660:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66a:	6a 00                	push   0x0
c000b66c:	68 80 51 01 00       	push   0x15180
c000b671:	55                   	push   ebp
c000b672:	57                   	push   edi
c000b673:	bf 10 0e 00 00       	mov    edi,0xe10
c000b678:	e8 93 06 01 00       	call   c001bd10 <__umoddi3>
c000b67d:	83 c4 10             	add    esp,0x10
c000b680:	99                   	cdq    
c000b681:	f7 ff                	idiv   edi
c000b683:	bf 3c 00 00 00       	mov    edi,0x3c
c000b688:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b68b:	89 d0                	mov    eax,edx
c000b68d:	99                   	cdq    
c000b68e:	f7 ff                	idiv   edi
c000b690:	85 db                	test   ebx,ebx
c000b692:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b695:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b698:	79 11                	jns    c000b6ab <secondsToDatetime(unsigned long long)+0x6f>
c000b69a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b69e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6a4:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6a9:	eb 07                	jmp    c000b6b2 <secondsToDatetime(unsigned long long)+0x76>
c000b6ab:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6b0:	89 d8                	mov    eax,ebx
c000b6b2:	bf b4 05 00 00       	mov    edi,0x5b4
c000b6b7:	99                   	cdq    
c000b6b8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b6bd:	f7 f9                	idiv   ecx
c000b6bf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b6c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c8:	31 d2                	xor    edx,edx
c000b6ca:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b6d2:	01 c3                	add    ebx,eax
c000b6d4:	89 d8                	mov    eax,ebx
c000b6d6:	f7 f1                	div    ecx
c000b6d8:	31 d2                	xor    edx,edx
c000b6da:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6dd:	89 d8                	mov    eax,ebx
c000b6df:	f7 f7                	div    edi
c000b6e1:	31 d2                	xor    edx,edx
c000b6e3:	29 c1                	sub    ecx,eax
c000b6e5:	89 d8                	mov    eax,ebx
c000b6e7:	f7 f5                	div    ebp
c000b6e9:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b6ee:	29 c1                	sub    ecx,eax
c000b6f0:	31 d2                	xor    edx,edx
c000b6f2:	89 c8                	mov    eax,ecx
c000b6f4:	f7 f5                	div    ebp
c000b6f6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b6fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6ff:	31 d2                	xor    edx,edx
c000b701:	89 c8                	mov    eax,ecx
c000b703:	f7 f5                	div    ebp
c000b705:	31 d2                	xor    edx,edx
c000b707:	01 c3                	add    ebx,eax
c000b709:	89 c8                	mov    eax,ecx
c000b70b:	f7 f7                	div    edi
c000b70d:	bf 99 00 00 00       	mov    edi,0x99
c000b712:	29 c3                	sub    ebx,eax
c000b714:	31 d2                	xor    edx,edx
c000b716:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b71e:	29 c3                	sub    ebx,eax
c000b720:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b723:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b726:	bb 05 00 00 00       	mov    ebx,0x5
c000b72b:	83 c1 02             	add    ecx,0x2
c000b72e:	89 c8                	mov    eax,ecx
c000b730:	f7 f7                	div    edi
c000b732:	31 d2                	xor    edx,edx
c000b734:	89 c7                	mov    edi,eax
c000b736:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b73c:	83 c0 02             	add    eax,0x2
c000b73f:	f7 f3                	div    ebx
c000b741:	89 eb                	mov    ebx,ebp
c000b743:	29 c3                	sub    ebx,eax
c000b745:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b74b:	88 1e                	mov    BYTE PTR [esi],bl
c000b74d:	19 c0                	sbb    eax,eax
c000b74f:	31 d2                	xor    edx,edx
c000b751:	83 e0 0c             	and    eax,0xc
c000b754:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b758:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b760:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b764:	83 f9 01             	cmp    ecx,0x1
c000b767:	0f 96 c2             	setbe  dl
c000b76a:	41                   	inc    ecx
c000b76b:	01 d0                	add    eax,edx
c000b76d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b770:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b774:	83 c4 1c             	add    esp,0x1c
c000b777:	89 f0                	mov    eax,esi
c000b779:	5b                   	pop    ebx
c000b77a:	5e                   	pop    esi
c000b77b:	5f                   	pop    edi
c000b77c:	5d                   	pop    ebp
c000b77d:	c2 04 00             	ret    0x4

c000b780 <Clock::timeInDatetimeLocal()>:
c000b780:	53                   	push   ebx
c000b781:	83 ec 14             	sub    esp,0x14
c000b784:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b788:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b78c:	e8 7d fc ff ff       	call   c000b40e <Clock::timeInSecondsLocal()>
c000b791:	83 c4 0c             	add    esp,0xc
c000b794:	52                   	push   edx
c000b795:	50                   	push   eax
c000b796:	53                   	push   ebx
c000b797:	e8 a0 fe ff ff       	call   c000b63c <secondsToDatetime(unsigned long long)>
c000b79c:	89 d8                	mov    eax,ebx
c000b79e:	83 c4 14             	add    esp,0x14
c000b7a1:	5b                   	pop    ebx
c000b7a2:	c2 04 00             	ret    0x4
c000b7a5:	90                   	nop

c000b7a6 <Device::hibernate()>:
c000b7a6:	c3                   	ret    
c000b7a7:	90                   	nop

c000b7a8 <Device::wake()>:
c000b7a8:	c3                   	ret    
c000b7a9:	90                   	nop

c000b7aa <Device::detect()>:
c000b7aa:	c3                   	ret    
c000b7ab:	90                   	nop

c000b7ac <Device::disableLegacy()>:
c000b7ac:	c3                   	ret    
c000b7ad:	90                   	nop

c000b7ae <Device::powerSaving(PowerSavingLevel)>:
c000b7ae:	c3                   	ret    
c000b7af:	90                   	nop

c000b7b0 <DriverlessDevice::close(int, int, void*)>:
c000b7b0:	31 c0                	xor    eax,eax
c000b7b2:	c3                   	ret    
c000b7b3:	90                   	nop

c000b7b4 <DriverlessDevice::detect()>:
c000b7b4:	c3                   	ret    
c000b7b5:	90                   	nop

c000b7b6 <DriverlessDevice::open(int, int, void*)>:
c000b7b6:	83 ec 18             	sub    esp,0x18
c000b7b9:	68 90 d9 01 c0       	push   0xc001d990
c000b7be:	e8 40 49 00 00       	call   c0010103 <KePanic(char const*)>
c000b7c3:	83 c8 ff             	or     eax,0xffffffff
c000b7c6:	83 c4 1c             	add    esp,0x1c
c000b7c9:	c3                   	ret    

c000b7ca <Device::~Device()>:
c000b7ca:	ba f0 d9 01 c0       	mov    edx,0xc001d9f0
c000b7cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d3:	89 10                	mov    DWORD PTR [eax],edx
c000b7d5:	90                   	nop
c000b7d6:	c3                   	ret    
c000b7d7:	90                   	nop

c000b7d8 <Device::~Device()>:
c000b7d8:	83 ec 0c             	sub    esp,0xc
c000b7db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7df:	e8 e6 ff ff ff       	call   c000b7ca <Device::~Device()>
c000b7e4:	83 c4 04             	add    esp,0x4
c000b7e7:	83 ec 08             	sub    esp,0x8
c000b7ea:	68 58 01 00 00       	push   0x158
c000b7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f3:	e8 9a eb ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000b7f8:	83 c4 10             	add    esp,0x10
c000b7fb:	83 c4 0c             	add    esp,0xc
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::findAndLoadDriver()>:
c000b800:	c7 44 24 04 ae d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9ae
c000b808:	e9 7b ec ff ff       	jmp    c000a488 <Dbg::kprintf(char const*, ...)>
c000b80d:	90                   	nop

c000b80e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b80e:	57                   	push   edi
c000b80f:	b9 09 00 00 00       	mov    ecx,0x9
c000b814:	56                   	push   esi
c000b815:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b819:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b81d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b827:	81 c7 18 01 00 00    	add    edi,0x118
c000b82d:	fc                   	cld    
c000b82e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b830:	5e                   	pop    esi
c000b831:	5f                   	pop    edi
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <Device::preOpenACPI(void*, char*, char*)>:
c000b834:	57                   	push   edi
c000b835:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b83a:	56                   	push   esi
c000b83b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b83f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b843:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b84d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b853:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b859:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b85d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b85f:	b9 0e 00 00 00       	mov    ecx,0xe
c000b864:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b86a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b86e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b870:	5e                   	pop    esi
c000b871:	5f                   	pop    edi
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b874:	53                   	push   ebx
c000b875:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b879:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b87d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b881:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b885:	0f b6 c0             	movzx  eax,al
c000b888:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b88c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b890:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b894:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b898:	5b                   	pop    ebx
c000b899:	e9 a6 05 00 00       	jmp    c000be44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b89e <Device::getParent()>:
c000b89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8a2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8a8:	c3                   	ret    
c000b8a9:	90                   	nop

c000b8aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8b2:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b8b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8c3:	e9 e8 06 00 00       	jmp    c000bfb0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b8c8 <Device::addChild(Device*)>:
c000b8c8:	53                   	push   ebx
c000b8c9:	83 ec 08             	sub    esp,0x8
c000b8cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8da:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8e2:	85 d2                	test   edx,edx
c000b8e4:	74 04                	je     c000b8ea <Device::addChild(Device*)+0x22>
c000b8e6:	89 d3                	mov    ebx,edx
c000b8e8:	eb f6                	jmp    c000b8e0 <Device::addChild(Device*)+0x18>
c000b8ea:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b8ed:	83 ec 0c             	sub    esp,0xc
c000b8f0:	6a 08                	push   0x8
c000b8f2:	e8 c2 be ff ff       	call   c00077b9 <malloc>
c000b8f7:	89 03                	mov    DWORD PTR [ebx],eax
c000b8f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b8ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b906:	83 c4 18             	add    esp,0x18
c000b909:	5b                   	pop    ebx
c000b90a:	c3                   	ret    
c000b90b:	90                   	nop

c000b90c <Device::removeAllChildren()>:
c000b90c:	56                   	push   esi
c000b90d:	53                   	push   ebx
c000b90e:	52                   	push   edx
c000b90f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b913:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b919:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b91c:	74 17                	je     c000b935 <Device::removeAllChildren()+0x29>
c000b91e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b921:	85 c0                	test   eax,eax
c000b923:	74 0c                	je     c000b931 <Device::removeAllChildren()+0x25>
c000b925:	83 ec 0c             	sub    esp,0xc
c000b928:	8b 10                	mov    edx,DWORD PTR [eax]
c000b92a:	50                   	push   eax
c000b92b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b92e:	83 c4 10             	add    esp,0x10
c000b931:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b933:	eb e4                	jmp    c000b919 <Device::removeAllChildren()+0xd>
c000b935:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b93b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b941:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b947:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b94e:	58                   	pop    eax
c000b94f:	5b                   	pop    ebx
c000b950:	5e                   	pop    esi
c000b951:	c3                   	ret    

c000b952 <Device::hibernateAll()>:
c000b952:	53                   	push   ebx
c000b953:	83 ec 14             	sub    esp,0x14
c000b956:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b95a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b95c:	53                   	push   ebx
c000b95d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b960:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b96c:	74 0f                	je     c000b97d <Device::hibernateAll()+0x2b>
c000b96e:	83 ec 0c             	sub    esp,0xc
c000b971:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b974:	e8 d9 ff ff ff       	call   c000b952 <Device::hibernateAll()>
c000b979:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b97b:	eb e9                	jmp    c000b966 <Device::hibernateAll()+0x14>
c000b97d:	83 c4 08             	add    esp,0x8
c000b980:	5b                   	pop    ebx
c000b981:	c3                   	ret    

c000b982 <Device::wakeAll()>:
c000b982:	53                   	push   ebx
c000b983:	83 ec 14             	sub    esp,0x14
c000b986:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b98a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b98c:	53                   	push   ebx
c000b98d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b990:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b996:	83 c4 10             	add    esp,0x10
c000b999:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b99c:	74 0f                	je     c000b9ad <Device::wakeAll()+0x2b>
c000b99e:	83 ec 0c             	sub    esp,0xc
c000b9a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9a4:	e8 d9 ff ff ff       	call   c000b982 <Device::wakeAll()>
c000b9a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9ab:	eb e9                	jmp    c000b996 <Device::wakeAll()+0x14>
c000b9ad:	83 c4 08             	add    esp,0x8
c000b9b0:	5b                   	pop    ebx
c000b9b1:	c3                   	ret    

c000b9b2 <Device::detectAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 14             	sub    esp,0x14
c000b9b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	53                   	push   ebx
c000b9bd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b9c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9cc:	74 0f                	je     c000b9dd <Device::detectAll()+0x2b>
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9d4:	e8 d9 ff ff ff       	call   c000b9b2 <Device::detectAll()>
c000b9d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9db:	eb e9                	jmp    c000b9c6 <Device::detectAll()+0x14>
c000b9dd:	83 c4 08             	add    esp,0x8
c000b9e0:	5b                   	pop    ebx
c000b9e1:	c3                   	ret    

c000b9e2 <Device::disableLegacyAll()>:
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Device::loadDriversForAll()>:
c000b9e4:	c3                   	ret    
c000b9e5:	90                   	nop

c000b9e6 <Device::closeAll()>:
c000b9e6:	53                   	push   ebx
c000b9e7:	83 ec 08             	sub    esp,0x8
c000b9ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9f0:	6a 00                	push   0x0
c000b9f2:	6a 00                	push   0x0
c000b9f4:	6a 00                	push   0x0
c000b9f6:	53                   	push   ebx
c000b9f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba00:	83 c4 10             	add    esp,0x10
c000ba03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba06:	74 0f                	je     c000ba17 <Device::closeAll()+0x31>
c000ba08:	83 ec 0c             	sub    esp,0xc
c000ba0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba0e:	e8 d3 ff ff ff       	call   c000b9e6 <Device::closeAll()>
c000ba13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba15:	eb e9                	jmp    c000ba00 <Device::closeAll()+0x1a>
c000ba17:	83 c4 08             	add    esp,0x8
c000ba1a:	5b                   	pop    ebx
c000ba1b:	c3                   	ret    

c000ba1c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba1c:	56                   	push   esi
c000ba1d:	53                   	push   ebx
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba25:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba29:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba2b:	56                   	push   esi
c000ba2c:	53                   	push   ebx
c000ba2d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba3c:	74 0f                	je     c000ba4d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba3e:	52                   	push   edx
c000ba3f:	52                   	push   edx
c000ba40:	56                   	push   esi
c000ba41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba44:	e8 d3 ff ff ff       	call   c000ba1c <Device::powerSavingAll(PowerSavingLevel)>
c000ba49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba4b:	eb e9                	jmp    c000ba36 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba4d:	58                   	pop    eax
c000ba4e:	5b                   	pop    ebx
c000ba4f:	5e                   	pop    esi
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <Device::setName(char const*)>:
c000ba52:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba5a:	e9 a1 4b ff ff       	jmp    c0000600 <strcpy>
c000ba5f:	90                   	nop

c000ba60 <Device::Device(char const*)>:
c000ba60:	83 ec 1c             	sub    esp,0x1c
c000ba63:	ba f0 d9 01 c0       	mov    edx,0xc001d9f0
c000ba68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba6c:	89 10                	mov    DWORD PTR [eax],edx
c000ba6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba72:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ba8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ba98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000baa6:	83 ec 08             	sub    esp,0x8
c000baa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bab1:	e8 9c ff ff ff       	call   c000ba52 <Device::setName(char const*)>
c000bab6:	83 c4 10             	add    esp,0x10
c000bab9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bac1:	83 ec 0c             	sub    esp,0xc
c000bac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bac8:	e8 ec bc ff ff       	call   c00077b9 <malloc>
c000bacd:	83 c4 10             	add    esp,0x10
c000bad0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bad6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000badd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bae1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baeb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000baf1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb17:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb22:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb30:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb56:	90                   	nop
c000bb57:	83 c4 1c             	add    esp,0x1c
c000bb5a:	c3                   	ret    
c000bb5b:	90                   	nop

c000bb5c <Device::getName()>:
c000bb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb60:	05 d0 00 00 00       	add    eax,0xd0
c000bb65:	c3                   	ret    

c000bb66 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb66:	83 ec 0c             	sub    esp,0xc
c000bb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb6d:	83 ec 08             	sub    esp,0x8
c000bb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb74:	50                   	push   eax
c000bb75:	e8 e6 fe ff ff       	call   c000ba60 <Device::Device(char const*)>
c000bb7a:	83 c4 10             	add    esp,0x10
c000bb7d:	ba 1c da 01 c0       	mov    edx,0xc001da1c
c000bb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb86:	89 10                	mov    DWORD PTR [eax],edx
c000bb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bb96:	90                   	nop
c000bb97:	83 c4 0c             	add    esp,0xc
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bb9c:	57                   	push   edi
c000bb9d:	56                   	push   esi
c000bb9e:	53                   	push   ebx
c000bb9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bba3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bba7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbab:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bbb1:	75 0c                	jne    c000bbbf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bbb3:	52                   	push   edx
c000bbb4:	52                   	push   edx
c000bbb5:	53                   	push   ebx
c000bbb6:	56                   	push   esi
c000bbb7:	e8 06 05 01 00       	call   c001c0c2 <LinkedList<Device>::addElement(Device*)>
c000bbbc:	83 c4 10             	add    esp,0x10
c000bbbf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbc8:	74 12                	je     c000bbdc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bbca:	50                   	push   eax
c000bbcb:	57                   	push   edi
c000bbcc:	56                   	push   esi
c000bbcd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbd0:	e8 c7 ff ff ff       	call   c000bb9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbd7:	83 c4 10             	add    esp,0x10
c000bbda:	eb e9                	jmp    c000bbc5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bbdc:	5b                   	pop    ebx
c000bbdd:	5e                   	pop    esi
c000bbde:	5f                   	pop    edi
c000bbdf:	c3                   	ret    

c000bbe0 <getDevicesOfType(DeviceType)>:
c000bbe0:	53                   	push   ebx
c000bbe1:	83 ec 14             	sub    esp,0x14
c000bbe4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbe8:	53                   	push   ebx
c000bbe9:	e8 b0 05 01 00       	call   c001c19e <LinkedList<Device>::LinkedList()>
c000bbee:	83 c4 0c             	add    esp,0xc
c000bbf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf5:	53                   	push   ebx
c000bbf6:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c000bbfc:	e8 9b ff ff ff       	call   c000bb9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc01:	89 d8                	mov    eax,ebx
c000bc03:	83 c4 18             	add    esp,0x18
c000bc06:	5b                   	pop    ebx
c000bc07:	c2 04 00             	ret    0x4
c000bc0a:	66 90                	xchg   ax,ax

c000bc0c <HardDiskController::HardDiskController(char const*)>:
c000bc0c:	83 ec 0c             	sub    esp,0xc
c000bc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc13:	83 ec 08             	sub    esp,0x8
c000bc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc1a:	50                   	push   eax
c000bc1b:	e8 40 fe ff ff       	call   c000ba60 <Device::Device(char const*)>
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	ba 48 da 01 c0       	mov    edx,0xc001da48
c000bc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2c:	89 10                	mov    DWORD PTR [eax],edx
c000bc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc32:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc3c:	90                   	nop
c000bc3d:	83 c4 0c             	add    esp,0xc
c000bc40:	c3                   	ret    
c000bc41:	90                   	nop
c000bc42:	66 90                	xchg   ax,ax

c000bc44 <HardDiskController::~HardDiskController()>:
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	ba 48 da 01 c0       	mov    edx,0xc001da48
c000bc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc50:	89 10                	mov    DWORD PTR [eax],edx
c000bc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc56:	83 ec 0c             	sub    esp,0xc
c000bc59:	50                   	push   eax
c000bc5a:	e8 6b fb ff ff       	call   c000b7ca <Device::~Device()>
c000bc5f:	83 c4 10             	add    esp,0x10
c000bc62:	90                   	nop
c000bc63:	83 c4 0c             	add    esp,0xc
c000bc66:	c3                   	ret    
c000bc67:	90                   	nop

c000bc68 <HardDiskController::~HardDiskController()>:
c000bc68:	83 ec 0c             	sub    esp,0xc
c000bc6b:	83 ec 0c             	sub    esp,0xc
c000bc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc72:	e8 cd ff ff ff       	call   c000bc44 <HardDiskController::~HardDiskController()>
c000bc77:	83 c4 10             	add    esp,0x10
c000bc7a:	83 ec 08             	sub    esp,0x8
c000bc7d:	68 58 01 00 00       	push   0x158
c000bc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc86:	e8 07 e7 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000bc8b:	83 c4 10             	add    esp,0x10
c000bc8e:	83 c4 0c             	add    esp,0xc
c000bc91:	c3                   	ret    

c000bc92 <PhysicalDisk::eject()>:
c000bc92:	83 c8 ff             	or     eax,0xffffffff
c000bc95:	c3                   	ret    

c000bc96 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bc96:	83 ec 0c             	sub    esp,0xc
c000bc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9d:	83 ec 08             	sub    esp,0x8
c000bca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca4:	50                   	push   eax
c000bca5:	e8 b6 fd ff ff       	call   c000ba60 <Device::Device(char const*)>
c000bcaa:	83 c4 10             	add    esp,0x10
c000bcad:	ba 74 da 01 c0       	mov    edx,0xc001da74
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	89 10                	mov    DWORD PTR [eax],edx
c000bcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bce4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bcf8:	90                   	nop
c000bcf9:	83 c4 0c             	add    esp,0xc
c000bcfc:	c3                   	ret    
c000bcfd:	90                   	nop

c000bcfe <PhysicalDisk::startCache()>:
c000bcfe:	56                   	push   esi
c000bcff:	53                   	push   ebx
c000bd00:	83 ec 10             	sub    esp,0x10
c000bd03:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd07:	6a 44                	push   0x44
c000bd09:	e8 ab ba ff ff       	call   c00077b9 <malloc>
c000bd0e:	89 c6                	mov    esi,eax
c000bd10:	58                   	pop    eax
c000bd11:	5a                   	pop    edx
c000bd12:	53                   	push   ebx
c000bd13:	56                   	push   esi
c000bd14:	e8 c3 15 00 00       	call   c000d2dc <VCache::VCache(PhysicalDisk*)>
c000bd19:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd1f:	83 c4 14             	add    esp,0x14
c000bd22:	5b                   	pop    ebx
c000bd23:	5e                   	pop    esi
c000bd24:	c3                   	ret    
c000bd25:	90                   	nop

c000bd26 <PhysicalDisk::~PhysicalDisk()>:
c000bd26:	83 ec 0c             	sub    esp,0xc
c000bd29:	ba 74 da 01 c0       	mov    edx,0xc001da74
c000bd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd32:	89 10                	mov    DWORD PTR [eax],edx
c000bd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd38:	83 ec 0c             	sub    esp,0xc
c000bd3b:	50                   	push   eax
c000bd3c:	e8 89 fa ff ff       	call   c000b7ca <Device::~Device()>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	90                   	nop
c000bd45:	83 c4 0c             	add    esp,0xc
c000bd48:	c3                   	ret    
c000bd49:	90                   	nop

c000bd4a <PhysicalDisk::~PhysicalDisk()>:
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	83 ec 0c             	sub    esp,0xc
c000bd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd54:	e8 cd ff ff ff       	call   c000bd26 <PhysicalDisk::~PhysicalDisk()>
c000bd59:	83 c4 10             	add    esp,0x10
c000bd5c:	83 ec 08             	sub    esp,0x8
c000bd5f:	68 6c 01 00 00       	push   0x16c
c000bd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd68:	e8 25 e6 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	83 c4 0c             	add    esp,0xc
c000bd73:	c3                   	ret    

c000bd74 <int_handler>:
c000bd74:	55                   	push   ebp
c000bd75:	57                   	push   edi
c000bd76:	56                   	push   esi
c000bd77:	53                   	push   ebx
c000bd78:	83 ec 0c             	sub    esp,0xc
c000bd7b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd7f:	80 3d d8 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ed8,0x0
c000bd86:	74 0b                	je     c000bd93 <int_handler+0x1f>
c000bd88:	fa                   	cli    
c000bd89:	f4                   	hlt    
c000bd8a:	80 3d d8 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ed8,0x0
c000bd91:	75 f5                	jne    c000bd88 <int_handler+0x14>
c000bd93:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bd96:	8d 46 e0             	lea    eax,[esi-0x20]
c000bd99:	83 f8 17             	cmp    eax,0x17
c000bd9c:	76 3e                	jbe    c000bddc <int_handler+0x68>
c000bd9e:	c1 e6 04             	shl    esi,0x4
c000bda1:	31 db                	xor    ebx,ebx
c000bda3:	8d ae 60 15 02 c0    	lea    ebp,[esi-0x3ffdeaa0]
c000bda9:	81 c6 60 05 02 c0    	add    esi,0xc0020560
c000bdaf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bdb3:	85 c0                	test   eax,eax
c000bdb5:	74 13                	je     c000bdca <int_handler+0x56>
c000bdb7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bdba:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bdbe:	74 2a                	je     c000bdea <int_handler+0x76>
c000bdc0:	83 ec 08             	sub    esp,0x8
c000bdc3:	52                   	push   edx
c000bdc4:	57                   	push   edi
c000bdc5:	ff d0                	call   eax
c000bdc7:	83 c4 10             	add    esp,0x10
c000bdca:	43                   	inc    ebx
c000bdcb:	83 fb 04             	cmp    ebx,0x4
c000bdce:	75 df                	jne    c000bdaf <int_handler+0x3b>
c000bdd0:	83 c4 0c             	add    esp,0xc
c000bdd3:	31 c0                	xor    eax,eax
c000bdd5:	5b                   	pop    ebx
c000bdd6:	31 d2                	xor    edx,edx
c000bdd8:	5e                   	pop    esi
c000bdd9:	5f                   	pop    edi
c000bdda:	5d                   	pop    ebp
c000bddb:	c3                   	ret    
c000bddc:	83 ec 0c             	sub    esp,0xc
c000bddf:	50                   	push   eax
c000bde0:	e8 1e 96 00 00       	call   c0015403 <HalEndOfInterrupt(int)>
c000bde5:	83 c4 10             	add    esp,0x10
c000bde8:	eb b4                	jmp    c000bd9e <int_handler+0x2a>
c000bdea:	83 ec 08             	sub    esp,0x8
c000bded:	52                   	push   edx
c000bdee:	57                   	push   edi
c000bdef:	ff d0                	call   eax
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	83 c4 0c             	add    esp,0xc
c000bdf7:	5b                   	pop    ebx
c000bdf8:	5e                   	pop    esi
c000bdf9:	5f                   	pop    edi
c000bdfa:	5d                   	pop    ebp
c000bdfb:	c3                   	ret    

c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bdfc:	56                   	push   esi
c000bdfd:	31 c0                	xor    eax,eax
c000bdff:	53                   	push   ebx
c000be00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be08:	89 ca                	mov    edx,ecx
c000be0a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be0e:	c1 e2 04             	shl    edx,0x4
c000be11:	83 bc 82 60 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdeaa0],0x0
c000be19:	74 15                	je     c000be30 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be1b:	40                   	inc    eax
c000be1c:	83 f8 04             	cmp    eax,0x4
c000be1f:	75 f0                	jne    c000be11 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be21:	c7 44 24 0c a4 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001daa4
c000be29:	5b                   	pop    ebx
c000be2a:	5e                   	pop    esi
c000be2b:	e9 d3 42 00 00       	jmp    c0010103 <KePanic(char const*)>
c000be30:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be33:	89 1c 85 60 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeaa0],ebx
c000be3a:	89 34 85 60 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfaa0],esi
c000be41:	5b                   	pop    ebx
c000be42:	5e                   	pop    esi
c000be43:	c3                   	ret    

c000be44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be44:	57                   	push   edi
c000be45:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c000be4b:	56                   	push   esi
c000be4c:	53                   	push   ebx
c000be4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be55:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be5c:	74 5b                	je     c000beb9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be5e:	89 c7                	mov    edi,eax
c000be60:	84 c0                	test   al,al
c000be62:	74 24                	je     c000be88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be64:	83 fe 0f             	cmp    esi,0xf
c000be67:	0f 8f d9 00 00 00    	jg     c000bf46 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be6d:	8a 86 80 f1 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0e80]
c000be73:	25 ff 00 00 00       	and    eax,0xff
c000be78:	66 8b bc 00 00 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd300]
c000be80:	89 c6                	mov    esi,eax
c000be82:	66 d1 ef             	shr    di,1
c000be85:	83 e7 01             	and    edi,0x1
c000be88:	83 ec 08             	sub    esp,0x8
c000be8b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c000be90:	31 db                	xor    ebx,ebx
c000be92:	50                   	push   eax
c000be93:	68 b1 da 01 c0       	push   0xc001dab1
c000be98:	e8 eb e5 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c000bea5:	85 c0                	test   eax,eax
c000bea7:	7f 51                	jg     c000befa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bea9:	83 ec 0c             	sub    esp,0xc
c000beac:	68 c8 da 01 c0       	push   0xc001dac8
c000beb1:	e8 4d 42 00 00       	call   c0010103 <KePanic(char const*)>
c000beb6:	83 c4 10             	add    esp,0x10
c000beb9:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bebc:	31 d2                	xor    edx,edx
c000bebe:	89 c8                	mov    eax,ecx
c000bec0:	c1 e0 04             	shl    eax,0x4
c000bec3:	8b 9c 90 60 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdeaa0]
c000beca:	85 db                	test   ebx,ebx
c000becc:	0f 84 8b 00 00 00    	je     c000bf5d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bed2:	42                   	inc    edx
c000bed3:	83 fa 04             	cmp    edx,0x4
c000bed6:	75 eb                	jne    c000bec3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bed8:	83 ec 0c             	sub    esp,0xc
c000bedb:	68 1c db 01 c0       	push   0xc001db1c
c000bee0:	e8 1e 42 00 00       	call   c0010103 <KePanic(char const*)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beed:	5b                   	pop    ebx
c000beee:	5e                   	pop    esi
c000beef:	5f                   	pop    edi
c000bef0:	c3                   	ret    
c000bef1:	43                   	inc    ebx
c000bef2:	39 1d 00 41 02 c0    	cmp    DWORD PTR ds:0xc0024100,ebx
c000bef8:	7e af                	jle    c000bea9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000befa:	83 ec 08             	sub    esp,0x8
c000befd:	8b 04 9d 20 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbee0]
c000bf04:	56                   	push   esi
c000bf05:	50                   	push   eax
c000bf06:	e8 e5 f1 00 00       	call   c001b0f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	84 c0                	test   al,al
c000bf10:	74 df                	je     c000bef1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf12:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf18:	50                   	push   eax
c000bf19:	8d 46 20             	lea    eax,[esi+0x20]
c000bf1c:	57                   	push   edi
c000bf1d:	25 ff 00 00 00       	and    eax,0xff
c000bf22:	6a 00                	push   0x0
c000bf24:	50                   	push   eax
c000bf25:	89 f0                	mov    eax,esi
c000bf27:	6a 00                	push   0x0
c000bf29:	25 ff 00 00 00       	and    eax,0xff
c000bf2e:	6a 00                	push   0x0
c000bf30:	50                   	push   eax
c000bf31:	8b 04 9d 20 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbee0]
c000bf38:	50                   	push   eax
c000bf39:	e8 2c f3 00 00       	call   c001b26a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf3e:	83 c4 20             	add    esp,0x20
c000bf41:	e9 73 ff ff ff       	jmp    c000beb9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	31 ff                	xor    edi,edi
c000bf4b:	68 e4 da 01 c0       	push   0xc001dae4
c000bf50:	e8 ae 41 00 00       	call   c0010103 <KePanic(char const*)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	e9 2b ff ff ff       	jmp    c000be88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf5d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf64:	89 14 85 60 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeaa0],edx
c000bf6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf6f:	5b                   	pop    ebx
c000bf70:	89 14 85 60 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfaa0],edx
c000bf77:	89 f0                	mov    eax,esi
c000bf79:	5e                   	pop    esi
c000bf7a:	5f                   	pop    edi
c000bf7b:	c3                   	ret    

c000bf7c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf84:	c1 e0 04             	shl    eax,0x4
c000bf87:	8d 50 10             	lea    edx,[eax+0x10]
c000bf8a:	39 88 60 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeaa0],ecx
c000bf90:	74 08                	je     c000bf9a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bf92:	83 c0 04             	add    eax,0x4
c000bf95:	39 d0                	cmp    eax,edx
c000bf97:	75 f1                	jne    c000bf8a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bf99:	c3                   	ret    
c000bf9a:	c7 80 60 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeaa0],0x0
c000bfa4:	c7 80 60 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfaa0],0x0
c000bfae:	eb e2                	jmp    c000bf92 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bfb0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bfb0:	53                   	push   ebx
c000bfb1:	83 ec 08             	sub    esp,0x8
c000bfb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfb8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bfbd:	74 0e                	je     c000bfcd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfbf:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000bfc4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bfcb:	75 37                	jne    c000c004 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd1:	83 c0 20             	add    eax,0x20
c000bfd4:	c1 e0 04             	shl    eax,0x4
c000bfd7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfda:	39 98 60 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeaa0],ebx
c000bfe0:	74 0c                	je     c000bfee <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bfe2:	83 c0 04             	add    eax,0x4
c000bfe5:	39 d0                	cmp    eax,edx
c000bfe7:	75 f1                	jne    c000bfda <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000bfe9:	83 c4 08             	add    esp,0x8
c000bfec:	5b                   	pop    ebx
c000bfed:	c3                   	ret    
c000bfee:	c7 80 60 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeaa0],0x0
c000bff8:	c7 80 60 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfaa0],0x0
c000c002:	eb de                	jmp    c000bfe2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c004:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c009:	7f 12                	jg     c000c01d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c00b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c00f:	31 c0                	xor    eax,eax
c000c011:	8a 81 80 f1 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0e80]
c000c017:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c01b:	eb b0                	jmp    c000bfcd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c01d:	83 ec 0c             	sub    esp,0xc
c000c020:	68 d5 da 01 c0       	push   0xc001dad5
c000c025:	e8 d9 40 00 00       	call   c0010103 <KePanic(char const*)>
c000c02a:	83 c4 10             	add    esp,0x10
c000c02d:	eb 9e                	jmp    c000bfcd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c02f <setupINTS()>:
c000c02f:	31 c0                	xor    eax,eax
c000c031:	c7 80 60 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeaa0],0x0
c000c03b:	c7 80 60 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfaa0],0x0
c000c045:	c7 80 64 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea9c],0x0
c000c04f:	c7 80 64 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa9c],0x0
c000c059:	c7 80 68 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea98],0x0
c000c063:	c7 80 68 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa98],0x0
c000c06d:	c7 80 6c 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea94],0x0
c000c077:	c7 80 6c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa94],0x0
c000c081:	83 c0 10             	add    eax,0x10
c000c084:	3d 00 10 00 00       	cmp    eax,0x1000
c000c089:	75 a6                	jne    c000c031 <setupINTS()+0x2>
c000c08b:	c3                   	ret    

c000c08c <convertLegacyIRQNumber(int)>:
c000c08c:	83 ec 0c             	sub    esp,0xc
c000c08f:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0a0:	74 0f                	je     c000c0b1 <convertLegacyIRQNumber(int)+0x25>
c000c0a2:	83 f8 0f             	cmp    eax,0xf
c000c0a5:	7f 0e                	jg     c000c0b5 <convertLegacyIRQNumber(int)+0x29>
c000c0a7:	31 c9                	xor    ecx,ecx
c000c0a9:	8a 88 80 f1 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0e80]
c000c0af:	89 c8                	mov    eax,ecx
c000c0b1:	83 c4 0c             	add    esp,0xc
c000c0b4:	c3                   	ret    
c000c0b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0b9:	83 ec 0c             	sub    esp,0xc
c000c0bc:	68 e4 da 01 c0       	push   0xc001dae4
c000c0c1:	e8 3d 40 00 00       	call   c0010103 <KePanic(char const*)>
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cd:	83 c4 0c             	add    esp,0xc
c000c0d0:	c3                   	ret    
c000c0d1:	90                   	nop

c000c0d2 <startGUI(void*)>:
c000c0d2:	55                   	push   ebp
c000c0d3:	89 e5                	mov    ebp,esp
c000c0d5:	53                   	push   ebx
c000c0d6:	83 ec 04             	sub    esp,0x4
c000c0d9:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c0de:	48                   	dec    eax
c000c0df:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c0e4:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c0e9:	85 c0                	test   eax,eax
c000c0eb:	75 01                	jne    c000c0ee <startGUI(void*)+0x1c>
c000c0ed:	fb                   	sti    
c000c0ee:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000c0f4:	83 ec 08             	sub    esp,0x8
c000c0f7:	6a 01                	push   0x1
c000c0f9:	68 41 db 01 c0       	push   0xc001db41
c000c0fe:	e8 1f 68 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	83 ec 08             	sub    esp,0x8
c000c109:	53                   	push   ebx
c000c10a:	50                   	push   eax
c000c10b:	e8 43 6a 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000c119:	83 ec 08             	sub    esp,0x8
c000c11c:	6a 01                	push   0x1
c000c11e:	68 5b db 01 c0       	push   0xc001db5b
c000c123:	e8 fa 67 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000c128:	83 c4 10             	add    esp,0x10
c000c12b:	83 ec 08             	sub    esp,0x8
c000c12e:	53                   	push   ebx
c000c12f:	50                   	push   eax
c000c130:	e8 1e 6a 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	90                   	nop
c000c139:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c13c:	c9                   	leave  
c000c13d:	c3                   	ret    

c000c13e <startGUIVESA(void*)>:
c000c13e:	55                   	push   ebp
c000c13f:	89 e5                	mov    ebp,esp
c000c141:	53                   	push   ebx
c000c142:	83 ec 04             	sub    esp,0x4
c000c145:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c14a:	48                   	dec    eax
c000c14b:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c150:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c155:	85 c0                	test   eax,eax
c000c157:	75 01                	jne    c000c15a <startGUIVESA(void*)+0x1c>
c000c159:	fb                   	sti    
c000c15a:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000c160:	83 ec 08             	sub    esp,0x8
c000c163:	6a 01                	push   0x1
c000c165:	68 79 db 01 c0       	push   0xc001db79
c000c16a:	e8 b3 67 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	83 ec 08             	sub    esp,0x8
c000c175:	53                   	push   ebx
c000c176:	50                   	push   eax
c000c177:	e8 d7 69 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000c17c:	83 c4 10             	add    esp,0x10
c000c17f:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000c185:	83 ec 08             	sub    esp,0x8
c000c188:	6a 01                	push   0x1
c000c18a:	68 5b db 01 c0       	push   0xc001db5b
c000c18f:	e8 8e 67 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000c194:	83 c4 10             	add    esp,0x10
c000c197:	83 ec 08             	sub    esp,0x8
c000c19a:	53                   	push   ebx
c000c19b:	50                   	push   eax
c000c19c:	e8 b2 69 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	90                   	nop
c000c1a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1a8:	c9                   	leave  
c000c1a9:	c3                   	ret    

c000c1aa <sendKeyToTerminal(unsigned char)>:
c000c1aa:	55                   	push   ebp
c000c1ab:	89 e5                	mov    ebp,esp
c000c1ad:	83 ec 28             	sub    esp,0x28
c000c1b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c1b3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c1b6:	8b 15 a4 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204a4
c000c1bc:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c1bf:	25 ff 00 00 00       	and    eax,0xff
c000c1c4:	83 ec 08             	sub    esp,0x8
c000c1c7:	50                   	push   eax
c000c1c8:	52                   	push   edx
c000c1c9:	e8 78 c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c1ce:	83 c4 10             	add    esp,0x10
c000c1d1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1d5:	0f 85 8f 00 00 00    	jne    c000c26a <sendKeyToTerminal(unsigned char)+0xc0>
c000c1db:	fa                   	cli    
c000c1dc:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c1e1:	40                   	inc    eax
c000c1e2:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c1e7:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c000c1ec:	40                   	inc    eax
c000c1ed:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c000c1f2:	a1 60 25 02 c0       	mov    eax,ds:0xc0022560
c000c1f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1fa:	c7 05 60 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022560,0x0
c000c204:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c208:	74 1f                	je     c000c229 <sendKeyToTerminal(unsigned char)+0x7f>
c000c20a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c20d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c210:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c213:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c216:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c219:	83 ec 0c             	sub    esp,0xc
c000c21c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c21f:	e8 b4 75 00 00       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	eb db                	jmp    c000c204 <sendKeyToTerminal(unsigned char)+0x5a>
c000c229:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c000c22e:	48                   	dec    eax
c000c22f:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c000c234:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c000c239:	85 c0                	test   eax,eax
c000c23b:	75 18                	jne    c000c255 <sendKeyToTerminal(unsigned char)+0xab>
c000c23d:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c000c242:	85 c0                	test   eax,eax
c000c244:	74 0f                	je     c000c255 <sendKeyToTerminal(unsigned char)+0xab>
c000c246:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c000c250:	e8 bf 70 00 00       	call   c0013314 <schedule()>
c000c255:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c25a:	48                   	dec    eax
c000c25b:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c260:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c265:	85 c0                	test   eax,eax
c000c267:	75 01                	jne    c000c26a <sendKeyToTerminal(unsigned char)+0xc0>
c000c269:	fb                   	sti    
c000c26a:	90                   	nop
c000c26b:	c9                   	leave  
c000c26c:	c3                   	ret    

c000c26d <sendKeyboardToken(KeyboardToken)>:
c000c26d:	55                   	push   ebp
c000c26e:	89 e5                	mov    ebp,esp
c000c270:	83 ec 18             	sub    esp,0x18
c000c273:	e8 db 3e 00 00       	call   c0010153 <Krnl::userIOReceived()>
c000c278:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c27b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c27e:	25 ff ff 00 00       	and    eax,0xffff
c000c283:	83 f2 01             	xor    edx,0x1
c000c286:	88 90 80 25 02 c0    	mov    BYTE PTR [eax-0x3ffdda80],dl
c000c28c:	a1 68 25 02 c0       	mov    eax,ds:0xc0022568
c000c291:	85 c0                	test   eax,eax
c000c293:	74 24                	je     c000c2b9 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c295:	8b 0d 68 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022568
c000c29b:	83 ec 04             	sub    esp,0x4
c000c29e:	68 80 25 02 c0       	push   0xc0022580
c000c2a3:	83 ec 08             	sub    esp,0x8
c000c2a6:	89 e2                	mov    edx,esp
c000c2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ab:	89 02                	mov    DWORD PTR [edx],eax
c000c2ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c2b0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c2b4:	ff d1                	call   ecx
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c2bd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c2c0:	a0 88 29 02 c0       	mov    al,ds:0xc0022988
c000c2c5:	38 c2                	cmp    dl,al
c000c2c7:	74 1e                	je     c000c2e7 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c2c9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c2cc:	a2 88 29 02 c0       	mov    ds:0xc0022988,al
c000c2d1:	a0 88 29 02 c0       	mov    al,ds:0xc0022988
c000c2d6:	25 ff 00 00 00       	and    eax,0xff
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 b4 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c2ea:	84 c0                	test   al,al
c000c2ec:	0f 84 ae 00 00 00    	je     c000c3a0 <sendKeyboardToken(KeyboardToken)+0x133>
c000c2f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2f5:	66 3d 10 03          	cmp    ax,0x310
c000c2f9:	75 06                	jne    c000c301 <sendKeyboardToken(KeyboardToken)+0x94>
c000c2fb:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c304:	66 3d 11 03          	cmp    ax,0x311
c000c308:	75 06                	jne    c000c310 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c30a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c313:	66 3d 12 03          	cmp    ax,0x312
c000c317:	75 06                	jne    c000c31f <sendKeyboardToken(KeyboardToken)+0xb2>
c000c319:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c31f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c322:	66 3d 13 03          	cmp    ax,0x313
c000c326:	75 06                	jne    c000c32e <sendKeyboardToken(KeyboardToken)+0xc1>
c000c328:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c32e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c331:	66 3d 14 03          	cmp    ax,0x314
c000c335:	75 06                	jne    c000c33d <sendKeyboardToken(KeyboardToken)+0xd0>
c000c337:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c340:	66 3d 15 03          	cmp    ax,0x315
c000c344:	75 06                	jne    c000c34c <sendKeyboardToken(KeyboardToken)+0xdf>
c000c346:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c34c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34f:	66 3d 16 03          	cmp    ax,0x316
c000c353:	75 06                	jne    c000c35b <sendKeyboardToken(KeyboardToken)+0xee>
c000c355:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35e:	66 3d 17 03          	cmp    ax,0x317
c000c362:	75 06                	jne    c000c36a <sendKeyboardToken(KeyboardToken)+0xfd>
c000c364:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c36a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36d:	66 3d 18 03          	cmp    ax,0x318
c000c371:	75 06                	jne    c000c379 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c373:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c37c:	66 3d 19 03          	cmp    ax,0x319
c000c380:	75 06                	jne    c000c388 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c382:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c38b:	66 3d 1a 03          	cmp    ax,0x31a
c000c38f:	0f 85 c9 00 00 00    	jne    c000c45e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c395:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c39b:	e9 be 00 00 00       	jmp    c000c45e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a3:	66 3d 10 03          	cmp    ax,0x310
c000c3a7:	75 0a                	jne    c000c3b3 <sendKeyboardToken(KeyboardToken)+0x146>
c000c3a9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c3af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b6:	66 3d 11 03          	cmp    ax,0x311
c000c3ba:	75 0a                	jne    c000c3c6 <sendKeyboardToken(KeyboardToken)+0x159>
c000c3bc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c3c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c9:	66 3d 12 03          	cmp    ax,0x312
c000c3cd:	75 0a                	jne    c000c3d9 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c3cf:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3dc:	66 3d 13 03          	cmp    ax,0x313
c000c3e0:	75 0a                	jne    c000c3ec <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3e2:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c3e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ef:	66 3d 14 03          	cmp    ax,0x314
c000c3f3:	75 0a                	jne    c000c3ff <sendKeyboardToken(KeyboardToken)+0x192>
c000c3f5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c3fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c402:	66 3d 15 03          	cmp    ax,0x315
c000c406:	75 0a                	jne    c000c412 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c408:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c40e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c415:	66 3d 16 03          	cmp    ax,0x316
c000c419:	75 0a                	jne    c000c425 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c41b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c421:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c428:	66 3d 17 03          	cmp    ax,0x317
c000c42c:	75 0a                	jne    c000c438 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c42e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c434:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43b:	66 3d 18 03          	cmp    ax,0x318
c000c43f:	75 0a                	jne    c000c44b <sendKeyboardToken(KeyboardToken)+0x1de>
c000c441:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c447:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44e:	66 3d 19 03          	cmp    ax,0x319
c000c452:	75 0a                	jne    c000c45e <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c454:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c45a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c461:	66 3d 00 02          	cmp    ax,0x200
c000c465:	75 2c                	jne    c000c493 <sendKeyboardToken(KeyboardToken)+0x226>
c000c467:	a0 80 29 02 c0       	mov    al,ds:0xc0022980
c000c46c:	83 f0 01             	xor    eax,0x1
c000c46f:	84 c0                	test   al,al
c000c471:	74 20                	je     c000c493 <sendKeyboardToken(KeyboardToken)+0x226>
c000c473:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000c478:	6a 01                	push   0x1
c000c47a:	6a 00                	push   0x0
c000c47c:	68 d2 c0 00 c0       	push   0xc000c0d2
c000c481:	50                   	push   eax
c000c482:	e8 6d 6c 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c000c487:	83 c4 10             	add    esp,0x10
c000c48a:	c6 05 80 29 02 c0 01 	mov    BYTE PTR ds:0xc0022980,0x1
c000c491:	eb 33                	jmp    c000c4c6 <sendKeyboardToken(KeyboardToken)+0x259>
c000c493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c496:	66 3d 01 02          	cmp    ax,0x201
c000c49a:	75 2a                	jne    c000c4c6 <sendKeyboardToken(KeyboardToken)+0x259>
c000c49c:	a0 80 29 02 c0       	mov    al,ds:0xc0022980
c000c4a1:	83 f0 01             	xor    eax,0x1
c000c4a4:	84 c0                	test   al,al
c000c4a6:	74 1e                	je     c000c4c6 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4a8:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000c4ad:	6a 01                	push   0x1
c000c4af:	6a 00                	push   0x0
c000c4b1:	68 3e c1 00 c0       	push   0xc000c13e
c000c4b6:	50                   	push   eax
c000c4b7:	e8 38 6c 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c000c4bc:	83 c4 10             	add    esp,0x10
c000c4bf:	c6 05 80 29 02 c0 01 	mov    BYTE PTR ds:0xc0022980,0x1
c000c4c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c9:	66 3d 1d 03          	cmp    ax,0x31d
c000c4cd:	75 06                	jne    c000c4d5 <sendKeyboardToken(KeyboardToken)+0x268>
c000c4cf:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d8:	66 3d 1c 03          	cmp    ax,0x31c
c000c4dc:	75 06                	jne    c000c4e4 <sendKeyboardToken(KeyboardToken)+0x277>
c000c4de:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e7:	66 3d 1b 03          	cmp    ax,0x31b
c000c4eb:	75 06                	jne    c000c4f3 <sendKeyboardToken(KeyboardToken)+0x286>
c000c4ed:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c4f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f6:	66 3d 1e 03          	cmp    ax,0x31e
c000c4fa:	75 06                	jne    c000c502 <sendKeyboardToken(KeyboardToken)+0x295>
c000c4fc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c505:	66 3d 1f 03          	cmp    ax,0x31f
c000c509:	75 06                	jne    c000c511 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c50b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c514:	66 3d 1a 03          	cmp    ax,0x31a
c000c518:	75 06                	jne    c000c520 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c51a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c520:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c524:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c527:	83 f0 01             	xor    eax,0x1
c000c52a:	84 c0                	test   al,al
c000c52c:	74 7b                	je     c000c5a9 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c52e:	a0 81 26 02 c0       	mov    al,ds:0xc0022681
c000c533:	84 c0                	test   al,al
c000c535:	74 43                	je     c000c57a <sendKeyboardToken(KeyboardToken)+0x30d>
c000c537:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c53b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c53f:	74 2d                	je     c000c56e <sendKeyboardToken(KeyboardToken)+0x301>
c000c541:	8b 15 84 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022984
c000c547:	89 d0                	mov    eax,edx
c000c549:	c1 e0 02             	shl    eax,0x2
c000c54c:	01 d0                	add    eax,edx
c000c54e:	01 c0                	add    eax,eax
c000c550:	a3 84 29 02 c0       	mov    ds:0xc0022984,eax
c000c555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c558:	25 ff ff 00 00       	and    eax,0xffff
c000c55d:	8d 50 d0             	lea    edx,[eax-0x30]
c000c560:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c000c565:	01 d0                	add    eax,edx
c000c567:	a3 84 29 02 c0       	mov    ds:0xc0022984,eax
c000c56c:	eb 71                	jmp    c000c5df <sendKeyboardToken(KeyboardToken)+0x372>
c000c56e:	c7 05 84 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022984,0x0
c000c578:	eb 65                	jmp    c000c5df <sendKeyboardToken(KeyboardToken)+0x372>
c000c57a:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c000c57f:	85 c0                	test   eax,eax
c000c581:	74 1a                	je     c000c59d <sendKeyboardToken(KeyboardToken)+0x330>
c000c583:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c000c588:	25 ff 00 00 00       	and    eax,0xff
c000c58d:	83 ec 0c             	sub    esp,0xc
c000c590:	50                   	push   eax
c000c591:	e8 14 fc ff ff       	call   c000c1aa <sendKeyToTerminal(unsigned char)>
c000c596:	83 c4 10             	add    esp,0x10
c000c599:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c59d:	c7 05 84 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022984,0x0
c000c5a7:	eb 36                	jmp    c000c5df <sendKeyboardToken(KeyboardToken)+0x372>
c000c5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ac:	66 3d 01 01          	cmp    ax,0x101
c000c5b0:	75 2d                	jne    c000c5df <sendKeyboardToken(KeyboardToken)+0x372>
c000c5b2:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c000c5b7:	85 c0                	test   eax,eax
c000c5b9:	74 1a                	je     c000c5d5 <sendKeyboardToken(KeyboardToken)+0x368>
c000c5bb:	a1 84 29 02 c0       	mov    eax,ds:0xc0022984
c000c5c0:	25 ff 00 00 00       	and    eax,0xff
c000c5c5:	83 ec 0c             	sub    esp,0xc
c000c5c8:	50                   	push   eax
c000c5c9:	e8 dc fb ff ff       	call   c000c1aa <sendKeyToTerminal(unsigned char)>
c000c5ce:	83 c4 10             	add    esp,0x10
c000c5d1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5d5:	c7 05 84 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022984,0x0
c000c5df:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5e2:	83 f0 01             	xor    eax,0x1
c000c5e5:	84 c0                	test   al,al
c000c5e7:	74 4e                	je     c000c637 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5e9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5ec:	83 f0 01             	xor    eax,0x1
c000c5ef:	84 c0                	test   al,al
c000c5f1:	74 44                	je     c000c637 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5f3:	a0 80 26 02 c0       	mov    al,ds:0xc0022680
c000c5f8:	83 f0 01             	xor    eax,0x1
c000c5fb:	84 c0                	test   al,al
c000c5fd:	74 38                	je     c000c637 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c602:	66 83 f8 1f          	cmp    ax,0x1f
c000c606:	76 09                	jbe    c000c611 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60b:	66 83 f8 7e          	cmp    ax,0x7e
c000c60f:	76 12                	jbe    c000c623 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c614:	66 83 f8 0a          	cmp    ax,0xa
c000c618:	74 09                	je     c000c623 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c61a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61d:	66 83 f8 08          	cmp    ax,0x8
c000c621:	75 14                	jne    c000c637 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c626:	25 ff 00 00 00       	and    eax,0xff
c000c62b:	83 ec 0c             	sub    esp,0xc
c000c62e:	50                   	push   eax
c000c62f:	e8 76 fb ff ff       	call   c000c1aa <sendKeyToTerminal(unsigned char)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c63a:	83 f0 01             	xor    eax,0x1
c000c63d:	84 c0                	test   al,al
c000c63f:	74 67                	je     c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c641:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c644:	83 f0 01             	xor    eax,0x1
c000c647:	84 c0                	test   al,al
c000c649:	74 5d                	je     c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c64b:	a0 80 26 02 c0       	mov    al,ds:0xc0022680
c000c650:	84 c0                	test   al,al
c000c652:	74 54                	je     c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c657:	66 83 f8 3f          	cmp    ax,0x3f
c000c65b:	76 4b                	jbe    c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c660:	66 83 f8 7f          	cmp    ax,0x7f
c000c664:	77 42                	ja     c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c669:	88 c2                	mov    dl,al
c000c66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66e:	66 83 f8 5f          	cmp    ax,0x5f
c000c672:	76 04                	jbe    c000c678 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c674:	b0 20                	mov    al,0x20
c000c676:	eb 02                	jmp    c000c67a <sendKeyboardToken(KeyboardToken)+0x40d>
c000c678:	b0 00                	mov    al,0x0
c000c67a:	29 c2                	sub    edx,eax
c000c67c:	88 d0                	mov    al,dl
c000c67e:	83 e8 40             	sub    eax,0x40
c000c681:	25 ff 00 00 00       	and    eax,0xff
c000c686:	83 ec 0c             	sub    esp,0xc
c000c689:	50                   	push   eax
c000c68a:	e8 1b fb ff ff       	call   c000c1aa <sendKeyToTerminal(unsigned char)>
c000c68f:	83 c4 10             	add    esp,0x10
c000c692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c695:	66 83 f8 63          	cmp    ax,0x63
c000c699:	75 0d                	jne    c000c6a8 <sendKeyboardToken(KeyboardToken)+0x43b>
c000c69b:	83 ec 0c             	sub    esp,0xc
c000c69e:	6a ff                	push   0xffffffff
c000c6a0:	e8 93 75 00 00       	call   c0013c38 <terminateTask(int)>
c000c6a5:	83 c4 10             	add    esp,0x10
c000c6a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ab:	66 3d 00 03          	cmp    ax,0x300
c000c6af:	75 0f                	jne    c000c6c0 <sendKeyboardToken(KeyboardToken)+0x453>
c000c6b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b4:	83 f0 01             	xor    eax,0x1
c000c6b7:	84 c0                	test   al,al
c000c6b9:	74 05                	je     c000c6c0 <sendKeyboardToken(KeyboardToken)+0x453>
c000c6bb:	e8 d9 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c6c0:	90                   	nop
c000c6c1:	c9                   	leave  
c000c6c2:	c3                   	ret    

c000c6c3 <clearInternalKeybuffer(VgaText*)>:
c000c6c3:	55                   	push   ebp
c000c6c4:	89 e5                	mov    ebp,esp
c000c6c6:	83 ec 08             	sub    esp,0x8
c000c6c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cc:	05 b2 00 00 00       	add    eax,0xb2
c000c6d1:	83 ec 0c             	sub    esp,0xc
c000c6d4:	50                   	push   eax
c000c6d5:	e8 66 3e ff ff       	call   c0000540 <strlen>
c000c6da:	83 c4 10             	add    esp,0x10
c000c6dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c6e0:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c6e6:	83 ec 04             	sub    esp,0x4
c000c6e9:	50                   	push   eax
c000c6ea:	6a 00                	push   0x0
c000c6ec:	52                   	push   edx
c000c6ed:	e8 de 3d ff ff       	call   c00004d0 <memset>
c000c6f2:	83 c4 10             	add    esp,0x10
c000c6f5:	90                   	nop
c000c6f6:	c9                   	leave  
c000c6f7:	c3                   	ret    

c000c6f8 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c6f8:	55                   	push   ebp
c000c6f9:	89 e5                	mov    ebp,esp
c000c6fb:	83 ec 18             	sub    esp,0x18
c000c6fe:	a1 68 25 02 c0       	mov    eax,ds:0xc0022568
c000c703:	85 c0                	test   eax,eax
c000c705:	74 2a                	je     c000c731 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c707:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c70d:	8b 0d 68 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022568
c000c713:	83 ec 04             	sub    esp,0x4
c000c716:	68 80 25 02 c0       	push   0xc0022580
c000c71b:	83 ec 08             	sub    esp,0x8
c000c71e:	89 e2                	mov    edx,esp
c000c720:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c723:	89 02                	mov    DWORD PTR [edx],eax
c000c725:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c728:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c72c:	ff d1                	call   ecx
c000c72e:	83 c4 10             	add    esp,0x10
c000c731:	fb                   	sti    
c000c732:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c739:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c73d:	0f 84 a1 00 00 00    	je     c000c7e4 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c746:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c74c:	84 c0                	test   al,al
c000c74e:	75 28                	jne    c000c778 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c750:	fa                   	cli    
c000c751:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c756:	40                   	inc    eax
c000c757:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c75c:	e8 b3 6b 00 00       	call   c0013314 <schedule()>
c000c761:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c766:	48                   	dec    eax
c000c767:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000c76c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000c771:	85 c0                	test   eax,eax
c000c773:	75 ce                	jne    c000c743 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c775:	fb                   	sti    
c000c776:	eb cb                	jmp    c000c743 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c778:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c77b:	8d 50 01             	lea    edx,[eax+0x1]
c000c77e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c781:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c784:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c78a:	88 10                	mov    BYTE PTR [eax],dl
c000c78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78f:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c795:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79b:	05 b2 00 00 00       	add    eax,0xb2
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 97 3d ff ff       	call   c0000540 <strlen>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7af:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7bb:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7c1:	83 ec 04             	sub    esp,0x4
c000c7c4:	50                   	push   eax
c000c7c5:	51                   	push   ecx
c000c7c6:	52                   	push   edx
c000c7c7:	e8 14 3c ff ff       	call   c00003e0 <memmove>
c000c7cc:	83 c4 10             	add    esp,0x10
c000c7cf:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c7d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c7d5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c7d9:	0f 85 5a ff ff ff    	jne    c000c739 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c7df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e2:	eb 03                	jmp    c000c7e7 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c7e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e7:	c9                   	leave  
c000c7e8:	c3                   	ret    
c000c7e9:	90                   	nop

c000c7ea <Keyboard::Keyboard(char const*)>:
c000c7ea:	83 ec 0c             	sub    esp,0xc
c000c7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f1:	83 ec 08             	sub    esp,0x8
c000c7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7f8:	50                   	push   eax
c000c7f9:	e8 62 f2 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000c7fe:	83 c4 10             	add    esp,0x10
c000c801:	ba 9c db 01 c0       	mov    edx,0xc001db9c
c000c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c80a:	89 10                	mov    DWORD PTR [eax],edx
c000c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c810:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c81a:	c6 05 64 25 02 c0 01 	mov    BYTE PTR ds:0xc0022564,0x1
c000c821:	90                   	nop
c000c822:	83 c4 0c             	add    esp,0xc
c000c825:	c3                   	ret    

c000c826 <Keyboard::~Keyboard()>:
c000c826:	83 ec 0c             	sub    esp,0xc
c000c829:	ba 9c db 01 c0       	mov    edx,0xc001db9c
c000c82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c832:	89 10                	mov    DWORD PTR [eax],edx
c000c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c838:	83 ec 0c             	sub    esp,0xc
c000c83b:	50                   	push   eax
c000c83c:	e8 89 ef ff ff       	call   c000b7ca <Device::~Device()>
c000c841:	83 c4 10             	add    esp,0x10
c000c844:	90                   	nop
c000c845:	83 c4 0c             	add    esp,0xc
c000c848:	c3                   	ret    
c000c849:	90                   	nop

c000c84a <Keyboard::~Keyboard()>:
c000c84a:	83 ec 0c             	sub    esp,0xc
c000c84d:	83 ec 0c             	sub    esp,0xc
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	e8 cd ff ff ff       	call   c000c826 <Keyboard::~Keyboard()>
c000c859:	83 c4 10             	add    esp,0x10
c000c85c:	83 ec 08             	sub    esp,0x8
c000c85f:	68 5c 01 00 00       	push   0x15c
c000c864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c868:	e8 25 db ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	83 c4 0c             	add    esp,0xc
c000c873:	c3                   	ret    

c000c874 <LogicalDisk::close(int, int, void*)>:
c000c874:	83 c8 ff             	or     eax,0xffffffff
c000c877:	c3                   	ret    

c000c878 <LogicalDisk::~LogicalDisk()>:
c000c878:	83 ec 0c             	sub    esp,0xc
c000c87b:	ba 14 dc 01 c0       	mov    edx,0xc001dc14
c000c880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c884:	89 10                	mov    DWORD PTR [eax],edx
c000c886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88a:	83 ec 0c             	sub    esp,0xc
c000c88d:	50                   	push   eax
c000c88e:	e8 37 ef ff ff       	call   c000b7ca <Device::~Device()>
c000c893:	83 c4 10             	add    esp,0x10
c000c896:	90                   	nop
c000c897:	83 c4 0c             	add    esp,0xc
c000c89a:	c3                   	ret    
c000c89b:	90                   	nop

c000c89c <LogicalDisk::~LogicalDisk()>:
c000c89c:	83 ec 0c             	sub    esp,0xc
c000c89f:	83 ec 0c             	sub    esp,0xc
c000c8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a6:	e8 cd ff ff ff       	call   c000c878 <LogicalDisk::~LogicalDisk()>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	83 ec 08             	sub    esp,0x8
c000c8b1:	68 74 01 00 00       	push   0x174
c000c8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ba:	e8 d3 da ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000c8bf:	83 c4 10             	add    esp,0x10
c000c8c2:	83 c4 0c             	add    esp,0xc
c000c8c5:	c3                   	ret    

c000c8c6 <LogicalDisk::open(int, int, void*)>:
c000c8c6:	83 ec 18             	sub    esp,0x18
c000c8c9:	68 c8 db 01 c0       	push   0xc001dbc8
c000c8ce:	e8 30 38 00 00       	call   c0010103 <KePanic(char const*)>
c000c8d3:	83 c8 ff             	or     eax,0xffffffff
c000c8d6:	83 c4 1c             	add    esp,0x1c
c000c8d9:	c3                   	ret    

c000c8da <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c8da:	53                   	push   ebx
c000c8db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8e7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c8ed:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c8f3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c8f9:	77 10                	ja     c000c90b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c8fb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c901:	89 d3                	mov    ebx,edx
c000c903:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c909:	72 05                	jb     c000c910 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c90b:	83 c8 ff             	or     eax,0xffffffff
c000c90e:	89 c2                	mov    edx,eax
c000c910:	5b                   	pop    ebx
c000c911:	c3                   	ret    

c000c912 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c912:	56                   	push   esi
c000c913:	83 c8 ff             	or     eax,0xffffffff
c000c916:	53                   	push   ebx
c000c917:	89 c2                	mov    edx,eax
c000c919:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c91d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c921:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c925:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c92b:	77 27                	ja     c000c954 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c92d:	89 d8                	mov    eax,ebx
c000c92f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c935:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c93b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c940:	89 c2                	mov    edx,eax
c000c942:	73 10                	jae    c000c954 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c944:	89 c8                	mov    eax,ecx
c000c946:	89 da                	mov    edx,ebx
c000c948:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c94e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c954:	5b                   	pop    ebx
c000c955:	5e                   	pop    esi
c000c956:	c3                   	ret    
c000c957:	90                   	nop

c000c958 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c958:	83 ec 1c             	sub    esp,0x1c
c000c95b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c95f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c967:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c96b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c96f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c972:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97e:	83 ec 08             	sub    esp,0x8
c000c981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c985:	50                   	push   eax
c000c986:	e8 d5 f0 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000c98b:	83 c4 10             	add    esp,0x10
c000c98e:	ba 14 dc 01 c0       	mov    edx,0xc001dc14
c000c993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c997:	89 10                	mov    DWORD PTR [eax],edx
c000c999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9c9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000c9cf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000c9d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c9dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9e0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c9e6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c9ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9f4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca08:	90                   	nop
c000ca09:	83 c4 1c             	add    esp,0x1c
c000ca0c:	c3                   	ret    
c000ca0d:	90                   	nop

c000ca0e <LogicalDisk::assignDriveLetter()>:
c000ca0e:	55                   	push   ebp
c000ca0f:	57                   	push   edi
c000ca10:	56                   	push   esi
c000ca11:	53                   	push   ebx
c000ca12:	83 ec 14             	sub    esp,0x14
c000ca15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca19:	8b 3d a0 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229a0
c000ca1f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca25:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca29:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca2f:	8b 3d a4 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229a4
c000ca35:	3c 01                	cmp    al,0x1
c000ca37:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca3b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca3f:	19 c0                	sbb    eax,eax
c000ca41:	83 e0 02             	and    eax,0x2
c000ca44:	83 c0 41             	add    eax,0x41
c000ca47:	0f be e8             	movsx  ebp,al
c000ca4a:	3c 43                	cmp    al,0x43
c000ca4c:	75 10                	jne    c000ca5e <LogicalDisk::assignDriveLetter()+0x50>
c000ca4e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca55:	75 5d                	jne    c000cab4 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca57:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca5c:	75 56                	jne    c000cab4 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca5e:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca61:	ba 01 00 00 00       	mov    edx,0x1
c000ca66:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ca6a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ca6e:	d3 e2                	shl    edx,cl
c000ca70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca74:	89 d7                	mov    edi,edx
c000ca76:	89 d6                	mov    esi,edx
c000ca78:	c1 ff 1f             	sar    edi,0x1f
c000ca7b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ca7f:	21 f9                	and    ecx,edi
c000ca81:	09 d1                	or     ecx,edx
c000ca83:	75 2f                	jne    c000cab4 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca85:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ca89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca8d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ca93:	09 f2                	or     edx,esi
c000ca95:	89 15 a0 29 02 c0    	mov    DWORD PTR ds:0xc00229a0,edx
c000ca9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca9f:	09 fa                	or     edx,edi
c000caa1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000caa5:	89 15 a4 29 02 c0    	mov    DWORD PTR ds:0xc00229a4,edx
c000caab:	89 1c bd c0 29 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd640],ebx
c000cab2:	eb 08                	jmp    c000cabc <LogicalDisk::assignDriveLetter()+0xae>
c000cab4:	45                   	inc    ebp
c000cab5:	40                   	inc    eax
c000cab6:	3c 5b                	cmp    al,0x5b
c000cab8:	75 90                	jne    c000ca4a <LogicalDisk::assignDriveLetter()+0x3c>
c000caba:	31 c0                	xor    eax,eax
c000cabc:	83 c4 14             	add    esp,0x14
c000cabf:	5b                   	pop    ebx
c000cac0:	5e                   	pop    esi
c000cac1:	5f                   	pop    edi
c000cac2:	5d                   	pop    ebp
c000cac3:	c3                   	ret    

c000cac4 <LogicalDisk::mount()>:
c000cac4:	56                   	push   esi
c000cac5:	53                   	push   ebx
c000cac6:	53                   	push   ebx
c000cac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cacb:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c000cad1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cadb:	85 db                	test   ebx,ebx
c000cadd:	74 27                	je     c000cb06 <LogicalDisk::mount()+0x42>
c000cadf:	51                   	push   ecx
c000cae0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cae7:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cae9:	83 e8 41             	sub    eax,0x41
c000caec:	50                   	push   eax
c000caed:	56                   	push   esi
c000caee:	53                   	push   ebx
c000caef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caf2:	83 c4 10             	add    esp,0x10
c000caf5:	84 c0                	test   al,al
c000caf7:	74 08                	je     c000cb01 <LogicalDisk::mount()+0x3d>
c000caf9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000caff:	eb 07                	jmp    c000cb08 <LogicalDisk::mount()+0x44>
c000cb01:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb04:	eb d5                	jmp    c000cadb <LogicalDisk::mount()+0x17>
c000cb06:	31 c0                	xor    eax,eax
c000cb08:	5a                   	pop    edx
c000cb09:	5b                   	pop    ebx
c000cb0a:	5e                   	pop    esi
c000cb0b:	c3                   	ret    

c000cb0c <LogicalDisk::unmount()>:
c000cb0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb10:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb1a:	c3                   	ret    
c000cb1b:	90                   	nop

c000cb1c <LogicalDisk::eject()>:
c000cb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb26:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb2c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb2f:	90                   	nop

c000cb30 <LogicalDisk::unassignDriveLetter()>:
c000cb30:	57                   	push   edi
c000cb31:	56                   	push   esi
c000cb32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb36:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb3d:	84 c9                	test   cl,cl
c000cb3f:	75 0f                	jne    c000cb50 <LogicalDisk::unassignDriveLetter()+0x20>
c000cb41:	c7 44 24 0c ec db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dbec
c000cb49:	5e                   	pop    esi
c000cb4a:	5f                   	pop    edi
c000cb4b:	e9 b3 35 00 00       	jmp    c0010103 <KePanic(char const*)>
c000cb50:	83 e9 41             	sub    ecx,0x41
c000cb53:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb5a:	b8 01 00 00 00       	mov    eax,0x1
c000cb5f:	c7 04 8d c0 29 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd640],0x0
c000cb6a:	d3 e0                	shl    eax,cl
c000cb6c:	89 c7                	mov    edi,eax
c000cb6e:	f7 d0                	not    eax
c000cb70:	c1 ff 1f             	sar    edi,0x1f
c000cb73:	21 05 a0 29 02 c0    	and    DWORD PTR ds:0xc00229a0,eax
c000cb79:	89 fe                	mov    esi,edi
c000cb7b:	f7 d6                	not    esi
c000cb7d:	21 35 a4 29 02 c0    	and    DWORD PTR ds:0xc00229a4,esi
c000cb83:	5e                   	pop    esi
c000cb84:	5f                   	pop    edi
c000cb85:	c3                   	ret    

c000cb86 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cb86:	57                   	push   edi
c000cb87:	56                   	push   esi
c000cb88:	53                   	push   ebx
c000cb89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb99:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb9f:	77 41                	ja     c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cba1:	99                   	cdq    
c000cba2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cba8:	01 c8                	add    eax,ecx
c000cbaa:	11 da                	adc    edx,ebx
c000cbac:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbb2:	19 d7                	sbb    edi,edx
c000cbb4:	72 33                	jb     c000cbe9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbb6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbbc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbc2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbc6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cbca:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cbd0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cbd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbda:	5b                   	pop    ebx
c000cbdb:	5e                   	pop    esi
c000cbdc:	5f                   	pop    edi
c000cbdd:	e9 50 0a 00 00       	jmp    c000d632 <VCache::read(unsigned long long, int, void*)>
c000cbe2:	b8 05 00 00 00       	mov    eax,0x5
c000cbe7:	eb 05                	jmp    c000cbee <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cbe9:	b8 07 00 00 00       	mov    eax,0x7
c000cbee:	5b                   	pop    ebx
c000cbef:	5e                   	pop    esi
c000cbf0:	5f                   	pop    edi
c000cbf1:	c3                   	ret    

c000cbf2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cbf2:	57                   	push   edi
c000cbf3:	56                   	push   esi
c000cbf4:	53                   	push   ebx
c000cbf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbfd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc05:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc0b:	77 41                	ja     c000cc4e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc0d:	99                   	cdq    
c000cc0e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc14:	01 c8                	add    eax,ecx
c000cc16:	11 da                	adc    edx,ebx
c000cc18:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc1e:	19 d7                	sbb    edi,edx
c000cc20:	72 33                	jb     c000cc55 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc22:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc28:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc32:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc36:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc3c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc46:	5b                   	pop    ebx
c000cc47:	5e                   	pop    esi
c000cc48:	5f                   	pop    edi
c000cc49:	e9 ce 08 00 00       	jmp    c000d51c <VCache::write(unsigned long long, int, void*)>
c000cc4e:	b8 05 00 00 00       	mov    eax,0x5
c000cc53:	eb 05                	jmp    c000cc5a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc55:	b8 07 00 00 00       	mov    eax,0x7
c000cc5a:	5b                   	pop    ebx
c000cc5b:	5e                   	pop    esi
c000cc5c:	5f                   	pop    edi
c000cc5d:	c3                   	ret    
c000cc5e:	66 90                	xchg   ax,ax

c000cc60 <Mouse::Mouse(char const*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc67:	83 ec 08             	sub    esp,0x8
c000cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6e:	50                   	push   eax
c000cc6f:	e8 ec ed ff ff       	call   c000ba60 <Device::Device(char const*)>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	ba 40 dc 01 c0       	mov    edx,0xc001dc40
c000cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc80:	89 10                	mov    DWORD PTR [eax],edx
c000cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc86:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cc90:	90                   	nop
c000cc91:	83 c4 0c             	add    esp,0xc
c000cc94:	c3                   	ret    
c000cc95:	90                   	nop
c000cc96:	66 90                	xchg   ax,ax

c000cc98 <Mouse::~Mouse()>:
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	ba 40 dc 01 c0       	mov    edx,0xc001dc40
c000cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca4:	89 10                	mov    DWORD PTR [eax],edx
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	83 ec 0c             	sub    esp,0xc
c000ccad:	50                   	push   eax
c000ccae:	e8 17 eb ff ff       	call   c000b7ca <Device::~Device()>
c000ccb3:	83 c4 10             	add    esp,0x10
c000ccb6:	90                   	nop
c000ccb7:	83 c4 0c             	add    esp,0xc
c000ccba:	c3                   	ret    
c000ccbb:	90                   	nop

c000ccbc <Mouse::~Mouse()>:
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	83 ec 0c             	sub    esp,0xc
c000ccc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc6:	e8 cd ff ff ff       	call   c000cc98 <Mouse::~Mouse()>
c000cccb:	83 c4 10             	add    esp,0x10
c000ccce:	83 ec 08             	sub    esp,0x8
c000ccd1:	68 58 01 00 00       	push   0x158
c000ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccda:	e8 b3 d6 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000ccdf:	83 c4 10             	add    esp,0x10
c000cce2:	83 c4 0c             	add    esp,0xc
c000cce5:	c3                   	ret    

c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cce6:	55                   	push   ebp
c000cce7:	57                   	push   edi
c000cce8:	56                   	push   esi
c000cce9:	53                   	push   ebx
c000ccea:	81 ec 28 01 00 00    	sub    esp,0x128
c000ccf0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ccf7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ccfe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd05:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd14:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd1b:	e8 3c ee ff ff       	call   c000bb5c <Device::getName()>
c000cd20:	5a                   	pop    edx
c000cd21:	59                   	pop    ecx
c000cd22:	50                   	push   eax
c000cd23:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd27:	55                   	push   ebp
c000cd28:	e8 d3 38 ff ff       	call   c0000600 <strcpy>
c000cd2d:	5b                   	pop    ebx
c000cd2e:	58                   	pop    eax
c000cd2f:	68 64 dc 01 c0       	push   0xc001dc64
c000cd34:	55                   	push   ebp
c000cd35:	e8 86 3a ff ff       	call   c00007c0 <strcat>
c000cd3a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd41:	e8 73 aa ff ff       	call   c00077b9 <malloc>
c000cd46:	83 c4 0c             	add    esp,0xc
c000cd49:	89 c3                	mov    ebx,eax
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd55:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd5c:	55                   	push   ebp
c000cd5d:	50                   	push   eax
c000cd5e:	e8 f5 fb ff ff       	call   c000c958 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd63:	83 c4 14             	add    esp,0x14
c000cd66:	53                   	push   ebx
c000cd67:	e8 a2 fc ff ff       	call   c000ca0e <LogicalDisk::assignDriveLetter()>
c000cd6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd6f:	e8 50 fd ff ff       	call   c000cac4 <LogicalDisk::mount()>
c000cd74:	58                   	pop    eax
c000cd75:	5a                   	pop    edx
c000cd76:	53                   	push   ebx
c000cd77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd7e:	e8 45 eb ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c000cd83:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cd89:	5b                   	pop    ebx
c000cd8a:	5e                   	pop    esi
c000cd8b:	5f                   	pop    edi
c000cd8c:	5d                   	pop    ebp
c000cd8d:	c3                   	ret    

c000cd8e <createPartitionsForDisk(PhysicalDisk*)>:
c000cd8e:	55                   	push   ebp
c000cd8f:	57                   	push   edi
c000cd90:	56                   	push   esi
c000cd91:	53                   	push   ebx
c000cd92:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cd98:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cd9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cda5:	3d 00 02 00 00       	cmp    eax,0x200
c000cdaa:	74 27                	je     c000cdd3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cdac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cdb2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdb8:	83 ec 10             	sub    esp,0x10
c000cdbb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdbf:	99                   	cdq    
c000cdc0:	c1 e6 0a             	shl    esi,0xa
c000cdc3:	52                   	push   edx
c000cdc4:	89 fd                	mov    ebp,edi
c000cdc6:	50                   	push   eax
c000cdc7:	55                   	push   ebp
c000cdc8:	56                   	push   esi
c000cdc9:	e8 42 ee 00 00       	call   c001bc10 <__udivdi3>
c000cdce:	e9 b1 00 00 00       	jmp    c000ce84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cdd3:	83 ec 0c             	sub    esp,0xc
c000cdd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cdd8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cddc:	56                   	push   esi
c000cddd:	6a 01                	push   0x1
c000cddf:	6a 00                	push   0x0
c000cde1:	6a 00                	push   0x0
c000cde3:	53                   	push   ebx
c000cde4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cde7:	83 c4 20             	add    esp,0x20
c000cdea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cdf2:	75 0a                	jne    c000cdfe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cdf4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cdfc:	74 2c                	je     c000ce2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cdfe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce10:	83 ec 10             	sub    esp,0x10
c000ce13:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce17:	89 f7                	mov    edi,esi
c000ce19:	c1 e0 0a             	shl    eax,0xa
c000ce1c:	c1 ff 1f             	sar    edi,0x1f
c000ce1f:	57                   	push   edi
c000ce20:	56                   	push   esi
c000ce21:	52                   	push   edx
c000ce22:	50                   	push   eax
c000ce23:	e8 e8 ed 00 00       	call   c001bc10 <__udivdi3>
c000ce28:	eb 5a                	jmp    c000ce84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce31:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce38:	83 e1 7f             	and    ecx,0x7f
c000ce3b:	83 e0 7f             	and    eax,0x7f
c000ce3e:	01 c1                	add    ecx,eax
c000ce40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce47:	83 e0 7f             	and    eax,0x7f
c000ce4a:	01 c1                	add    ecx,eax
c000ce4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce53:	83 e0 7f             	and    eax,0x7f
c000ce56:	00 c1                	add    cl,al
c000ce58:	74 41                	je     c000ce9b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce6c:	83 ec 10             	sub    esp,0x10
c000ce6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce73:	89 f7                	mov    edi,esi
c000ce75:	c1 e0 0a             	shl    eax,0xa
c000ce78:	c1 ff 1f             	sar    edi,0x1f
c000ce7b:	57                   	push   edi
c000ce7c:	56                   	push   esi
c000ce7d:	52                   	push   edx
c000ce7e:	50                   	push   eax
c000ce7f:	e8 8c ed 00 00       	call   c001bc10 <__udivdi3>
c000ce84:	83 c4 14             	add    esp,0x14
c000ce87:	52                   	push   edx
c000ce88:	50                   	push   eax
c000ce89:	6a 00                	push   0x0
c000ce8b:	6a 00                	push   0x0
c000ce8d:	53                   	push   ebx
c000ce8e:	e8 53 fe ff ff       	call   c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce93:	83 c4 20             	add    esp,0x20
c000ce96:	e9 79 01 00 00       	jmp    c000d014 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ce9b:	89 f0                	mov    eax,esi
c000ce9d:	31 f6                	xor    esi,esi
c000ce9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cea6:	75 02                	jne    c000ceaa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cea8:	89 f1                	mov    ecx,esi
c000ceaa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ceb1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ceb8:	c1 e2 08             	shl    edx,0x8
c000cebb:	c1 e7 10             	shl    edi,0x10
c000cebe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cec6:	09 fa                	or     edx,edi
c000cec8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000ced0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000ced7:	83 c0 10             	add    eax,0x10
c000ceda:	09 fa                	or     edx,edi
c000cedc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cee3:	c1 e7 18             	shl    edi,0x18
c000cee6:	09 fa                	or     edx,edi
c000cee8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000ceef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cef3:	c1 e7 10             	shl    edi,0x10
c000cef6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cefd:	c1 e2 08             	shl    edx,0x8
c000cf00:	09 fa                	or     edx,edi
c000cf02:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf09:	09 fa                	or     edx,edi
c000cf0b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf12:	c1 e7 18             	shl    edi,0x18
c000cf15:	09 fa                	or     edx,edi
c000cf17:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf1b:	46                   	inc    esi
c000cf1c:	83 fe 04             	cmp    esi,0x4
c000cf1f:	0f 85 7a ff ff ff    	jne    c000ce9f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf29:	83 f0 01             	xor    eax,0x1
c000cf2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf30:	75 57                	jne    c000cf89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf36:	83 f0 01             	xor    eax,0x1
c000cf39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf3d:	75 4a                	jne    c000cf89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf65:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf69:	89 f7                	mov    edi,esi
c000cf6b:	c1 e0 0a             	shl    eax,0xa
c000cf6e:	c1 ff 1f             	sar    edi,0x1f
c000cf71:	57                   	push   edi
c000cf72:	56                   	push   esi
c000cf73:	52                   	push   edx
c000cf74:	50                   	push   eax
c000cf75:	e8 96 ec 00 00       	call   c001bc10 <__udivdi3>
c000cf7a:	83 c4 10             	add    esp,0x10
c000cf7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf85:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cf89:	84 c9                	test   cl,cl
c000cf8b:	74 53                	je     c000cfe0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cf8d:	0f b6 c9             	movzx  ecx,cl
c000cf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cf9c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cfa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cfb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cfb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfc0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cfc4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cfc8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000cfcc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000cfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000cfdc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000cfe0:	31 ed                	xor    ebp,ebp
c000cfe2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000cfe6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000cfea:	89 f8                	mov    eax,edi
c000cfec:	09 f0                	or     eax,esi
c000cfee:	74 1e                	je     c000d00e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cff0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000cff4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000cff8:	89 d1                	mov    ecx,edx
c000cffa:	09 c1                	or     ecx,eax
c000cffc:	74 10                	je     c000d00e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	57                   	push   edi
c000d002:	56                   	push   esi
c000d003:	52                   	push   edx
c000d004:	50                   	push   eax
c000d005:	53                   	push   ebx
c000d006:	e8 db fc ff ff       	call   c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d00b:	83 c4 20             	add    esp,0x20
c000d00e:	45                   	inc    ebp
c000d00f:	83 fd 04             	cmp    ebp,0x4
c000d012:	75 ce                	jne    c000cfe2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d014:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d01a:	5b                   	pop    ebx
c000d01b:	5e                   	pop    esi
c000d01c:	5f                   	pop    edi
c000d01d:	5d                   	pop    ebp
c000d01e:	c3                   	ret    
c000d01f:	90                   	nop

c000d020 <Serial::Serial(char const*)>:
c000d020:	83 ec 0c             	sub    esp,0xc
c000d023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d027:	83 ec 08             	sub    esp,0x8
c000d02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d02e:	50                   	push   eax
c000d02f:	e8 2c ea ff ff       	call   c000ba60 <Device::Device(char const*)>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	ba 78 dc 01 c0       	mov    edx,0xc001dc78
c000d03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d040:	89 10                	mov    DWORD PTR [eax],edx
c000d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d046:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d050:	90                   	nop
c000d051:	83 c4 0c             	add    esp,0xc
c000d054:	c3                   	ret    
c000d055:	90                   	nop
c000d056:	66 90                	xchg   ax,ax

c000d058 <Serial::~Serial()>:
c000d058:	83 ec 0c             	sub    esp,0xc
c000d05b:	ba 78 dc 01 c0       	mov    edx,0xc001dc78
c000d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d064:	89 10                	mov    DWORD PTR [eax],edx
c000d066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d06a:	83 ec 0c             	sub    esp,0xc
c000d06d:	50                   	push   eax
c000d06e:	e8 57 e7 ff ff       	call   c000b7ca <Device::~Device()>
c000d073:	83 c4 10             	add    esp,0x10
c000d076:	90                   	nop
c000d077:	83 c4 0c             	add    esp,0xc
c000d07a:	c3                   	ret    
c000d07b:	90                   	nop

c000d07c <Serial::~Serial()>:
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	83 ec 0c             	sub    esp,0xc
c000d082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d086:	e8 cd ff ff ff       	call   c000d058 <Serial::~Serial()>
c000d08b:	83 c4 10             	add    esp,0x10
c000d08e:	83 ec 08             	sub    esp,0x8
c000d091:	68 58 01 00 00       	push   0x158
c000d096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d09a:	e8 f3 d2 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	83 c4 0c             	add    esp,0xc
c000d0a5:	c3                   	ret    
c000d0a6:	66 90                	xchg   ax,ax

c000d0a8 <Timer::Timer(char const*)>:
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0af:	83 ec 08             	sub    esp,0x8
c000d0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b6:	50                   	push   eax
c000d0b7:	e8 a4 e9 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000d0bc:	83 c4 10             	add    esp,0x10
c000d0bf:	ba bc dc 01 c0       	mov    edx,0xc001dcbc
c000d0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d0d8:	90                   	nop
c000d0d9:	83 c4 0c             	add    esp,0xc
c000d0dc:	c3                   	ret    
c000d0dd:	90                   	nop
c000d0de:	66 90                	xchg   ax,ax

c000d0e0 <Timer::~Timer()>:
c000d0e0:	83 ec 0c             	sub    esp,0xc
c000d0e3:	ba bc dc 01 c0       	mov    edx,0xc001dcbc
c000d0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ec:	89 10                	mov    DWORD PTR [eax],edx
c000d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f2:	83 ec 0c             	sub    esp,0xc
c000d0f5:	50                   	push   eax
c000d0f6:	e8 cf e6 ff ff       	call   c000b7ca <Device::~Device()>
c000d0fb:	83 c4 10             	add    esp,0x10
c000d0fe:	90                   	nop
c000d0ff:	83 c4 0c             	add    esp,0xc
c000d102:	c3                   	ret    
c000d103:	90                   	nop

c000d104 <Timer::~Timer()>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	83 ec 0c             	sub    esp,0xc
c000d10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10e:	e8 cd ff ff ff       	call   c000d0e0 <Timer::~Timer()>
c000d113:	83 c4 10             	add    esp,0x10
c000d116:	83 ec 08             	sub    esp,0x8
c000d119:	68 5c 01 00 00       	push   0x15c
c000d11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d122:	e8 6b d2 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	83 c4 0c             	add    esp,0xc
c000d12d:	c3                   	ret    

c000d12e <Timer::read()>:
c000d12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d138:	c3                   	ret    

c000d139 <setupTimer(int)>:
c000d139:	53                   	push   ebx
c000d13a:	83 ec 14             	sub    esp,0x14
c000d13d:	68 5c 01 00 00       	push   0x15c
c000d142:	e8 72 a6 ff ff       	call   c00077b9 <malloc>
c000d147:	89 04 24             	mov    DWORD PTR [esp],eax
c000d14a:	89 c3                	mov    ebx,eax
c000d14c:	e8 37 e4 00 00       	call   c001b588 <PIT::PIT()>
c000d151:	58                   	pop    eax
c000d152:	5a                   	pop    edx
c000d153:	53                   	push   ebx
c000d154:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c000d15a:	e8 69 e7 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c000d15f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d161:	6a 00                	push   0x0
c000d163:	6a 00                	push   0x0
c000d165:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d169:	53                   	push   ebx
c000d16a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d16d:	89 d8                	mov    eax,ebx
c000d16f:	83 c4 28             	add    esp,0x28
c000d172:	5b                   	pop    ebx
c000d173:	c3                   	ret    

c000d174 <timerHandler(unsigned int)>:
c000d174:	56                   	push   esi
c000d175:	53                   	push   ebx
c000d176:	51                   	push   ecx
c000d177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17b:	01 05 2c 2a 02 c0    	add    DWORD PTR ds:0xc0022a2c,eax
c000d181:	80 3d 5d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002045d,0x0
c000d188:	0f 84 4a 01 00 00    	je     c000d2d8 <timerHandler(unsigned int)+0x164>
c000d18e:	fa                   	cli    
c000d18f:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c000d195:	83 ec 0c             	sub    esp,0xc
c000d198:	ff 05 04 37 02 c0    	inc    DWORD PTR ds:0xc0023704
c000d19e:	68 18 37 02 c0       	push   0xc0023718
c000d1a3:	e8 38 f0 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1a8:	83 c4 10             	add    esp,0x10
c000d1ab:	84 c0                	test   al,al
c000d1ad:	0f 85 a1 00 00 00    	jne    c000d254 <timerHandler(unsigned int)+0xe0>
c000d1b3:	83 ec 0c             	sub    esp,0xc
c000d1b6:	68 18 37 02 c0       	push   0xc0023718
c000d1bb:	e8 3c f0 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1c0:	83 c4 10             	add    esp,0x10
c000d1c3:	89 c6                	mov    esi,eax
c000d1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	68 18 37 02 c0       	push   0xc0023718
c000d1d0:	e8 27 f0 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1d5:	c7 04 24 18 37 02 c0 	mov    DWORD PTR [esp],0xc0023718
c000d1dc:	89 c3                	mov    ebx,eax
c000d1de:	e8 21 f0 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d1e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d1e6:	83 c4 10             	add    esp,0x10
c000d1e9:	3b 05 2c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a2c
c000d1ef:	77 23                	ja     c000d214 <timerHandler(unsigned int)+0xa0>
c000d1f1:	83 ec 0c             	sub    esp,0xc
c000d1f4:	53                   	push   ebx
c000d1f5:	e8 de 65 00 00       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c000d1fa:	83 c4 10             	add    esp,0x10
c000d1fd:	39 de                	cmp    esi,ebx
c000d1ff:	75 27                	jne    c000d228 <timerHandler(unsigned int)+0xb4>
c000d201:	83 ec 0c             	sub    esp,0xc
c000d204:	68 18 37 02 c0       	push   0xc0023718
c000d209:	e8 ee ef 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d20e:	89 c6                	mov    esi,eax
c000d210:	eb 12                	jmp    c000d224 <timerHandler(unsigned int)+0xb0>
c000d212:	66 90                	xchg   ax,ax
c000d214:	52                   	push   edx
c000d215:	52                   	push   edx
c000d216:	53                   	push   ebx
c000d217:	68 18 37 02 c0       	push   0xc0023718
c000d21c:	e8 9b f0 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d221:	8d 76 00             	lea    esi,[esi+0x0]
c000d224:	83 c4 10             	add    esp,0x10
c000d227:	90                   	nop
c000d228:	83 ec 0c             	sub    esp,0xc
c000d22b:	68 18 37 02 c0       	push   0xc0023718
c000d230:	e8 ab ef 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d235:	83 c4 10             	add    esp,0x10
c000d238:	84 c0                	test   al,al
c000d23a:	75 18                	jne    c000d254 <timerHandler(unsigned int)+0xe0>
c000d23c:	83 ec 0c             	sub    esp,0xc
c000d23f:	68 18 37 02 c0       	push   0xc0023718
c000d244:	e8 b3 ef 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d249:	83 c4 10             	add    esp,0x10
c000d24c:	39 f0                	cmp    eax,esi
c000d24e:	0f 85 74 ff ff ff    	jne    c000d1c8 <timerHandler(unsigned int)+0x54>
c000d254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d259:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d25d:	74 41                	je     c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d25f:	80 3d 5c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002045c,0x0
c000d266:	74 38                	je     c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d268:	fa                   	cli    
c000d269:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c000d26f:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c000d274:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d27a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d27d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d283:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d286:	72 08                	jb     c000d290 <timerHandler(unsigned int)+0x11c>
c000d288:	e8 87 60 00 00       	call   c0013314 <schedule()>
c000d28d:	8d 76 00             	lea    esi,[esi+0x0]
c000d290:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000d295:	48                   	dec    eax
c000d296:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000d29b:	75 03                	jne    c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d29d:	fb                   	sti    
c000d29e:	66 90                	xchg   ax,ax
c000d2a0:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c000d2a5:	48                   	dec    eax
c000d2a6:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c000d2ab:	75 1b                	jne    c000d2c8 <timerHandler(unsigned int)+0x154>
c000d2ad:	83 3d 00 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023700,0x0
c000d2b4:	74 12                	je     c000d2c8 <timerHandler(unsigned int)+0x154>
c000d2b6:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c000d2c0:	e8 4f 60 00 00       	call   c0013314 <schedule()>
c000d2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c8:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c000d2cd:	48                   	dec    eax
c000d2ce:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c000d2d3:	75 03                	jne    c000d2d8 <timerHandler(unsigned int)+0x164>
c000d2d5:	fb                   	sti    
c000d2d6:	66 90                	xchg   ax,ax
c000d2d8:	58                   	pop    eax
c000d2d9:	5b                   	pop    ebx
c000d2da:	5e                   	pop    esi
c000d2db:	c3                   	ret    

c000d2dc <VCache::VCache(PhysicalDisk*)>:
c000d2dc:	53                   	push   ebx
c000d2dd:	83 ec 18             	sub    esp,0x18
c000d2e0:	ba ec dc 01 c0       	mov    edx,0xc001dcec
c000d2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e9:	89 10                	mov    DWORD PTR [eax],edx
c000d2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d305:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d30c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d317:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d31e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d329:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d334:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d343:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d356:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d366:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d36d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d375:	83 ec 0c             	sub    esp,0xc
c000d378:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d37c:	e8 38 a4 ff ff       	call   c00077b9 <malloc>
c000d381:	83 c4 10             	add    esp,0x10
c000d384:	89 c3                	mov    ebx,eax
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	53                   	push   ebx
c000d38a:	e8 51 5d 00 00       	call   c00130e0 <Mutex::Mutex()>
c000d38f:	83 c4 10             	add    esp,0x10
c000d392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d3d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d3d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d3d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3ec:	05 00 01 00 00       	add    eax,0x100
c000d3f1:	c1 e0 04             	shl    eax,0x4
c000d3f4:	83 ec 0c             	sub    esp,0xc
c000d3f7:	50                   	push   eax
c000d3f8:	e8 bc a3 ff ff       	call   c00077b9 <malloc>
c000d3fd:	83 c4 10             	add    esp,0x10
c000d400:	89 c2                	mov    edx,eax
c000d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d418:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d41c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d420:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d426:	c1 e0 06             	shl    eax,0x6
c000d429:	83 ec 0c             	sub    esp,0xc
c000d42c:	50                   	push   eax
c000d42d:	e8 87 a3 ff ff       	call   c00077b9 <malloc>
c000d432:	83 c4 10             	add    esp,0x10
c000d435:	89 c2                	mov    edx,eax
c000d437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d43e:	90                   	nop
c000d43f:	83 c4 18             	add    esp,0x18
c000d442:	5b                   	pop    ebx
c000d443:	c3                   	ret    

c000d444 <VCache::invalidateReadBuffer()>:
c000d444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d448:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d44e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d452:	c3                   	ret    
c000d453:	90                   	nop

c000d454 <VCache::writeWriteBuffer()>:
c000d454:	53                   	push   ebx
c000d455:	83 ec 08             	sub    esp,0x8
c000d458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d45c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d460:	74 1e                	je     c000d480 <VCache::writeWriteBuffer()+0x2c>
c000d462:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d465:	83 ec 0c             	sub    esp,0xc
c000d468:	8b 10                	mov    edx,DWORD PTR [eax]
c000d46a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d46d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d470:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d473:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d476:	50                   	push   eax
c000d477:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d47a:	83 c4 20             	add    esp,0x20
c000d47d:	8d 76 00             	lea    esi,[esi+0x0]
c000d480:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d487:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d48e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d492:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d499:	83 c4 08             	add    esp,0x8
c000d49c:	5b                   	pop    ebx
c000d49d:	c3                   	ret    
c000d49e:	66 90                	xchg   ax,ax

c000d4a0 <VCache::~VCache()>:
c000d4a0:	83 ec 0c             	sub    esp,0xc
c000d4a3:	ba ec dc 01 c0       	mov    edx,0xc001dcec
c000d4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ac:	89 10                	mov    DWORD PTR [eax],edx
c000d4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4b5:	84 c0                	test   al,al
c000d4b7:	74 0f                	je     c000d4c8 <VCache::~VCache()+0x28>
c000d4b9:	83 ec 0c             	sub    esp,0xc
c000d4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c0:	e8 8f ff ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d4c5:	83 c4 10             	add    esp,0x10
c000d4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 f1 a2 ff ff       	call   c00077c9 <free>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d4e2:	83 ec 0c             	sub    esp,0xc
c000d4e5:	50                   	push   eax
c000d4e6:	e8 de a2 ff ff       	call   c00077c9 <free>
c000d4eb:	83 c4 10             	add    esp,0x10
c000d4ee:	90                   	nop
c000d4ef:	83 c4 0c             	add    esp,0xc
c000d4f2:	c3                   	ret    
c000d4f3:	90                   	nop

c000d4f4 <VCache::~VCache()>:
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fe:	e8 9d ff ff ff       	call   c000d4a0 <VCache::~VCache()>
c000d503:	83 c4 10             	add    esp,0x10
c000d506:	83 ec 08             	sub    esp,0x8
c000d509:	6a 44                	push   0x44
c000d50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50f:	e8 7e ce ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000d514:	83 c4 10             	add    esp,0x10
c000d517:	83 c4 0c             	add    esp,0xc
c000d51a:	c3                   	ret    
c000d51b:	90                   	nop

c000d51c <VCache::write(unsigned long long, int, void*)>:
c000d51c:	55                   	push   ebp
c000d51d:	57                   	push   edi
c000d51e:	56                   	push   esi
c000d51f:	53                   	push   ebx
c000d520:	83 ec 1c             	sub    esp,0x1c
c000d523:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d527:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d52b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d52f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d533:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d537:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d53b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d53f:	31 c0                	xor    eax,eax
c000d541:	8d 76 00             	lea    esi,[esi+0x0]
c000d544:	39 e8                	cmp    eax,ebp
c000d546:	7d 18                	jge    c000d560 <VCache::write(unsigned long long, int, void*)+0x44>
c000d548:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d54b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d551:	0f af c8             	imul   ecx,eax
c000d554:	89 ca                	mov    edx,ecx
c000d556:	01 f2                	add    edx,esi
c000d558:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d55a:	40                   	inc    eax
c000d55b:	eb e7                	jmp    c000d544 <VCache::write(unsigned long long, int, void*)+0x28>
c000d55d:	8d 76 00             	lea    esi,[esi+0x0]
c000d560:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d564:	74 0a                	je     c000d570 <VCache::write(unsigned long long, int, void*)+0x54>
c000d566:	53                   	push   ebx
c000d567:	e8 d8 fe ff ff       	call   c000d444 <VCache::invalidateReadBuffer()>
c000d56c:	58                   	pop    eax
c000d56d:	8d 76 00             	lea    esi,[esi+0x0]
c000d570:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d574:	74 5a                	je     c000d5d0 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d576:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d579:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d57d:	89 f8                	mov    eax,edi
c000d57f:	99                   	cdq    
c000d580:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d583:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d586:	31 c1                	xor    ecx,eax
c000d588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d58c:	31 d0                	xor    eax,edx
c000d58e:	09 c1                	or     ecx,eax
c000d590:	75 32                	jne    c000d5c4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d592:	83 fd 01             	cmp    ebp,0x1
c000d595:	75 2d                	jne    c000d5c4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d597:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d59a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5a0:	0f af f9             	imul   edi,ecx
c000d5a3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5ab:	40                   	inc    eax
c000d5ac:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5af:	83 f8 40             	cmp    eax,0x40
c000d5b2:	75 74                	jne    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5b4:	83 ec 0c             	sub    esp,0xc
c000d5b7:	53                   	push   ebx
c000d5b8:	e8 97 fe ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d5bd:	83 c4 10             	add    esp,0x10
c000d5c0:	eb 66                	jmp    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5c2:	66 90                	xchg   ax,ax
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	53                   	push   ebx
c000d5c8:	e8 87 fe ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d5cd:	83 c4 10             	add    esp,0x10
c000d5d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5d3:	83 fd 3f             	cmp    ebp,0x3f
c000d5d6:	7f 24                	jg     c000d5fc <VCache::write(unsigned long long, int, void*)+0xe0>
c000d5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d5dc:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d5df:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d5e2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d5e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5ea:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d5ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d5f0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5f8:	eb 2e                	jmp    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d602:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d606:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d60a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d60e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d612:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d616:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d61a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d61d:	83 c4 1c             	add    esp,0x1c
c000d620:	5b                   	pop    ebx
c000d621:	5e                   	pop    esi
c000d622:	5f                   	pop    edi
c000d623:	5d                   	pop    ebp
c000d624:	ff e0                	jmp    eax
c000d626:	66 90                	xchg   ax,ax
c000d628:	83 c4 1c             	add    esp,0x1c
c000d62b:	31 c0                	xor    eax,eax
c000d62d:	5b                   	pop    ebx
c000d62e:	5e                   	pop    esi
c000d62f:	5f                   	pop    edi
c000d630:	5d                   	pop    ebp
c000d631:	c3                   	ret    

c000d632 <VCache::read(unsigned long long, int, void*)>:
c000d632:	55                   	push   ebp
c000d633:	57                   	push   edi
c000d634:	56                   	push   esi
c000d635:	53                   	push   ebx
c000d636:	83 ec 1c             	sub    esp,0x1c
c000d639:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d63d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d645:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d649:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d64d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d651:	31 c0                	xor    eax,eax
c000d653:	90                   	nop
c000d654:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d658:	7d 16                	jge    c000d670 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d65a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d65d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d663:	0f af c8             	imul   ecx,eax
c000d666:	89 ca                	mov    edx,ecx
c000d668:	01 f2                	add    edx,esi
c000d66a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d66c:	40                   	inc    eax
c000d66d:	eb e5                	jmp    c000d654 <VCache::read(unsigned long long, int, void*)+0x22>
c000d66f:	90                   	nop
c000d670:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d674:	74 0e                	je     c000d684 <VCache::read(unsigned long long, int, void*)+0x52>
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	53                   	push   ebx
c000d67a:	e8 d5 fd ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d67f:	83 c4 10             	add    esp,0x10
c000d682:	66 90                	xchg   ax,ax
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	53                   	push   ebx
c000d688:	e8 b7 fd ff ff       	call   c000d444 <VCache::invalidateReadBuffer()>
c000d68d:	83 c4 0c             	add    esp,0xc
c000d690:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d693:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d699:	6a 00                	push   0x0
c000d69b:	56                   	push   esi
c000d69c:	e8 2f 2e ff ff       	call   c00004d0 <memset>
c000d6a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a6:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d6aa:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d6ae:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6b2:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d6b6:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d6ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6be:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6c1:	83 c4 2c             	add    esp,0x2c
c000d6c4:	5b                   	pop    ebx
c000d6c5:	5e                   	pop    esi
c000d6c6:	5f                   	pop    edi
c000d6c7:	5d                   	pop    ebp
c000d6c8:	ff e0                	jmp    eax

c000d6ca <Video::putrect(int, int, int, int, unsigned int)>:
c000d6ca:	55                   	push   ebp
c000d6cb:	57                   	push   edi
c000d6cc:	56                   	push   esi
c000d6cd:	53                   	push   ebx
c000d6ce:	83 ec 1c             	sub    esp,0x1c
c000d6d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d6d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d6dd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d6e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6e9:	01 df                	add    edi,ebx
c000d6eb:	39 fb                	cmp    ebx,edi
c000d6ed:	7d 1f                	jge    c000d70e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d6ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d6f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d6f7:	7d 12                	jge    c000d70b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d6f9:	8b 16                	mov    edx,DWORD PTR [esi]
c000d6fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d6ff:	53                   	push   ebx
c000d700:	55                   	push   ebp
c000d701:	45                   	inc    ebp
c000d702:	56                   	push   esi
c000d703:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	eb e8                	jmp    c000d6f3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d70b:	43                   	inc    ebx
c000d70c:	eb dd                	jmp    c000d6eb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d70e:	83 c4 1c             	add    esp,0x1c
c000d711:	5b                   	pop    ebx
c000d712:	5e                   	pop    esi
c000d713:	5f                   	pop    edi
c000d714:	5d                   	pop    ebp
c000d715:	c3                   	ret    

c000d716 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d716:	55                   	push   ebp
c000d717:	57                   	push   edi
c000d718:	31 ff                	xor    edi,edi
c000d71a:	56                   	push   esi
c000d71b:	53                   	push   ebx
c000d71c:	83 ec 1c             	sub    esp,0x1c
c000d71f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d723:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d727:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d72e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d737:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d73b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d73f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d742:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d746:	01 f9                	add    ecx,edi
c000d748:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d74c:	7d 2f                	jge    c000d77d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d74e:	31 f6                	xor    esi,esi
c000d750:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d754:	01 f2                	add    edx,esi
c000d756:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d75a:	7d 1a                	jge    c000d776 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d75c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d75f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d762:	46                   	inc    esi
c000d763:	51                   	push   ecx
c000d764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d768:	52                   	push   edx
c000d769:	55                   	push   ebp
c000d76a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d774:	eb da                	jmp    c000d750 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d776:	47                   	inc    edi
c000d777:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d77b:	eb c5                	jmp    c000d742 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d77d:	83 c4 1c             	add    esp,0x1c
c000d780:	5b                   	pop    ebx
c000d781:	5e                   	pop    esi
c000d782:	5f                   	pop    edi
c000d783:	5d                   	pop    ebp
c000d784:	c3                   	ret    
c000d785:	90                   	nop

c000d786 <Video::blit(unsigned int*, int, int, int, int)>:
c000d786:	55                   	push   ebp
c000d787:	57                   	push   edi
c000d788:	56                   	push   esi
c000d789:	53                   	push   ebx
c000d78a:	83 ec 1c             	sub    esp,0x1c
c000d78d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d791:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d795:	85 c0                	test   eax,eax
c000d797:	79 02                	jns    c000d79b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d799:	31 c0                	xor    eax,eax
c000d79b:	c1 e0 02             	shl    eax,0x2
c000d79e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7ae:	39 d8                	cmp    eax,ebx
c000d7b0:	7e 49                	jle    c000d7fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7b2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7b8:	7c 41                	jl     c000d7fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7ba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7c6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d7ca:	39 f9                	cmp    ecx,edi
c000d7cc:	7e 22                	jle    c000d7f0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d7ce:	83 c5 04             	add    ebp,0x4
c000d7d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7d7:	7c 14                	jl     c000d7ed <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d7d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d7db:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d7de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7e6:	56                   	push   esi
c000d7e7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d7ea:	83 c4 10             	add    esp,0x10
c000d7ed:	47                   	inc    edi
c000d7ee:	eb d2                	jmp    c000d7c2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d7f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7f4:	43                   	inc    ebx
c000d7f5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d7f9:	eb ab                	jmp    c000d7a6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d7fb:	83 c4 1c             	add    esp,0x1c
c000d7fe:	5b                   	pop    ebx
c000d7ff:	5e                   	pop    esi
c000d800:	5f                   	pop    edi
c000d801:	5d                   	pop    ebp
c000d802:	c3                   	ret    
c000d803:	90                   	nop

c000d804 <Video::clearScreen(unsigned int)>:
c000d804:	57                   	push   edi
c000d805:	56                   	push   esi
c000d806:	53                   	push   ebx
c000d807:	31 db                	xor    ebx,ebx
c000d809:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d80d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d813:	7e 1f                	jle    c000d834 <Video::clearScreen(unsigned int)+0x30>
c000d815:	31 ff                	xor    edi,edi
c000d817:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d81d:	7e 12                	jle    c000d831 <Video::clearScreen(unsigned int)+0x2d>
c000d81f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d825:	53                   	push   ebx
c000d826:	57                   	push   edi
c000d827:	47                   	inc    edi
c000d828:	56                   	push   esi
c000d829:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb e6                	jmp    c000d817 <Video::clearScreen(unsigned int)+0x13>
c000d831:	43                   	inc    ebx
c000d832:	eb d9                	jmp    c000d80d <Video::clearScreen(unsigned int)+0x9>
c000d834:	5b                   	pop    ebx
c000d835:	5e                   	pop    esi
c000d836:	5f                   	pop    edi
c000d837:	c3                   	ret    

c000d838 <Video::putpixel(int, int, unsigned int)>:
c000d838:	c7 44 24 04 f4 dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dcf4
c000d840:	e9 be 28 00 00       	jmp    c0010103 <KePanic(char const*)>
c000d845:	90                   	nop

c000d846 <Video::Video(char const*)>:
c000d846:	83 ec 0c             	sub    esp,0xc
c000d849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84d:	83 ec 08             	sub    esp,0x8
c000d850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d854:	50                   	push   eax
c000d855:	e8 06 e2 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000d85a:	83 c4 10             	add    esp,0x10
c000d85d:	ba 64 dd 01 c0       	mov    edx,0xc001dd64
c000d862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d866:	89 10                	mov    DWORD PTR [eax],edx
c000d868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d876:	90                   	nop
c000d877:	83 c4 0c             	add    esp,0xc
c000d87a:	c3                   	ret    
c000d87b:	90                   	nop

c000d87c <Video::~Video()>:
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	ba 64 dd 01 c0       	mov    edx,0xc001dd64
c000d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d888:	89 10                	mov    DWORD PTR [eax],edx
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	83 ec 0c             	sub    esp,0xc
c000d891:	50                   	push   eax
c000d892:	e8 33 df ff ff       	call   c000b7ca <Device::~Device()>
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	90                   	nop
c000d89b:	83 c4 0c             	add    esp,0xc
c000d89e:	c3                   	ret    
c000d89f:	90                   	nop

c000d8a0 <Video::~Video()>:
c000d8a0:	83 ec 0c             	sub    esp,0xc
c000d8a3:	83 ec 0c             	sub    esp,0xc
c000d8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8aa:	e8 cd ff ff ff       	call   c000d87c <Video::~Video()>
c000d8af:	83 c4 10             	add    esp,0x10
c000d8b2:	83 ec 08             	sub    esp,0x8
c000d8b5:	68 64 01 00 00       	push   0x164
c000d8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8be:	e8 cf ca ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c000d8c3:	83 c4 10             	add    esp,0x10
c000d8c6:	83 c4 0c             	add    esp,0xc
c000d8c9:	c3                   	ret    

c000d8ca <Video::isMonochrome()>:
c000d8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8ce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d8d4:	c3                   	ret    
c000d8d5:	90                   	nop

c000d8d6 <Video::getWidth()>:
c000d8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d8e0:	c3                   	ret    
c000d8e1:	90                   	nop

c000d8e2 <Video::getHeight()>:
c000d8e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8ec:	c3                   	ret    
c000d8ed:	90                   	nop

c000d8ee <Video::drawCursor(int, int, unsigned char*, int)>:
c000d8ee:	55                   	push   ebp
c000d8ef:	57                   	push   edi
c000d8f0:	56                   	push   esi
c000d8f1:	53                   	push   ebx
c000d8f2:	83 ec 2c             	sub    esp,0x2c
c000d8f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d8fd:	83 f8 01             	cmp    eax,0x1
c000d900:	19 c9                	sbb    ecx,ecx
c000d902:	31 db                	xor    ebx,ebx
c000d904:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d908:	89 cd                	mov    ebp,ecx
c000d90a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d912:	f7 d5                	not    ebp
c000d914:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d91a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d91e:	01 d8                	add    eax,ebx
c000d920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d924:	56                   	push   esi
c000d925:	e8 b8 ff ff ff       	call   c000d8e2 <Video::getHeight()>
c000d92a:	59                   	pop    ecx
c000d92b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d92f:	7e 70                	jle    c000d9a1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d931:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d935:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d939:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d93c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d940:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d944:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d94b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d94f:	89 f8                	mov    eax,edi
c000d951:	83 c0 20             	add    eax,0x20
c000d954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d958:	56                   	push   esi
c000d959:	e8 78 ff ff ff       	call   c000d8d6 <Video::getWidth()>
c000d95e:	5a                   	pop    edx
c000d95f:	39 c7                	cmp    edi,eax
c000d961:	7d 34                	jge    c000d997 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d963:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d968:	74 05                	je     c000d96f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d96a:	8b 06                	mov    eax,DWORD PTR [esi]
c000d96c:	55                   	push   ebp
c000d96d:	eb 0d                	jmp    c000d97c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d96f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d974:	74 12                	je     c000d988 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d976:	8b 06                	mov    eax,DWORD PTR [esi]
c000d978:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d97c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d980:	57                   	push   edi
c000d981:	56                   	push   esi
c000d982:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d98c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d990:	47                   	inc    edi
c000d991:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d995:	75 c1                	jne    c000d958 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d997:	43                   	inc    ebx
c000d998:	83 fb 20             	cmp    ebx,0x20
c000d99b:	0f 85 79 ff ff ff    	jne    c000d91a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9a1:	83 c4 2c             	add    esp,0x2c
c000d9a4:	5b                   	pop    ebx
c000d9a5:	5e                   	pop    esi
c000d9a6:	5f                   	pop    edi
c000d9a7:	5d                   	pop    ebp
c000d9a8:	c3                   	ret    
c000d9a9:	90                   	nop

c000d9aa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9aa:	55                   	push   ebp
c000d9ab:	57                   	push   edi
c000d9ac:	56                   	push   esi
c000d9ad:	53                   	push   ebx
c000d9ae:	83 ec 28             	sub    esp,0x28
c000d9b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9b5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9b9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9bd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9c1:	c1 e6 08             	shl    esi,0x8
c000d9c4:	01 c6                	add    esi,eax
c000d9c6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d9ca:	c1 e0 08             	shl    eax,0x8
c000d9cd:	01 d0                	add    eax,edx
c000d9cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9d7:	0f af c6             	imul   eax,esi
c000d9da:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d9e1:	50                   	push   eax
c000d9e2:	e8 d2 9d ff ff       	call   c00077b9 <malloc>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 c7                	mov    edi,eax
c000d9ec:	85 c0                	test   eax,eax
c000d9ee:	75 10                	jne    c000da00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	68 15 dd 01 c0       	push   0xc001dd15
c000d9f8:	e8 06 27 00 00       	call   c0010103 <KePanic(char const*)>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da03:	ba 12 00 00 00       	mov    edx,0x12
c000da08:	84 c0                	test   al,al
c000da0a:	74 11                	je     c000da1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da0c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da10:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da14:	c1 fa 03             	sar    edx,0x3
c000da17:	0f af d1             	imul   edx,ecx
c000da1a:	83 c2 12             	add    edx,0x12
c000da1d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da21:	74 04                	je     c000da27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da23:	85 f6                	test   esi,esi
c000da25:	75 12                	jne    c000da39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da27:	83 ec 0c             	sub    esp,0xc
c000da2a:	68 25 dd 01 c0       	push   0xc001dd25
c000da2f:	e8 54 ca ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000da34:	e9 b8 00 00 00       	jmp    c000daf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da39:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da3d:	80 f9 02             	cmp    cl,0x2
c000da40:	0f 85 96 00 00 00    	jne    c000dadc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da46:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da4b:	75 0e                	jne    c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da4d:	84 c0                	test   al,al
c000da4f:	75 0a                	jne    c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da51:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da54:	83 e8 18             	sub    eax,0x18
c000da57:	a8 f7                	test   al,0xf7
c000da59:	74 0a                	je     c000da65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	68 3a dd 01 c0       	push   0xc001dd3a
c000da63:	eb 7f                	jmp    c000dae4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da75:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da79:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da81:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000da85:	75 0c                	jne    c000da93 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000da87:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000da8c:	c1 e0 18             	shl    eax,0x18
c000da8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da93:	45                   	inc    ebp
c000da94:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000da99:	c1 e1 10             	shl    ecx,0x10
c000da9c:	89 c8                	mov    eax,ecx
c000da9e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000daa3:	c1 e1 08             	shl    ecx,0x8
c000daa6:	09 c1                	or     ecx,eax
c000daa8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000daac:	09 c1                	or     ecx,eax
c000daae:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dab2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dab6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000daba:	c1 f8 03             	sar    eax,0x3
c000dabd:	01 c2                	add    edx,eax
c000dabf:	89 e8                	mov    eax,ebp
c000dac1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dac5:	39 c6                	cmp    esi,eax
c000dac7:	7f b0                	jg     c000da79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dac9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dacd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dad1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dad4:	7e 22                	jle    c000daf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dad6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dada:	eb 99                	jmp    c000da75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dadc:	50                   	push   eax
c000dadd:	50                   	push   eax
c000dade:	51                   	push   ecx
c000dadf:	68 48 dd 01 c0       	push   0xc001dd48
c000dae4:	e8 9f c9 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000dae9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000daec:	e8 d8 9c ff ff       	call   c00077c9 <free>
c000daf1:	83 c4 10             	add    esp,0x10
c000daf4:	31 ff                	xor    edi,edi
c000daf6:	eb 0f                	jmp    c000db07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000daf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dafc:	89 30                	mov    DWORD PTR [eax],esi
c000dafe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db05:	89 30                	mov    DWORD PTR [eax],esi
c000db07:	83 c4 1c             	add    esp,0x1c
c000db0a:	89 f8                	mov    eax,edi
c000db0c:	5b                   	pop    ebx
c000db0d:	5e                   	pop    esi
c000db0e:	5f                   	pop    edi
c000db0f:	5d                   	pop    ebp
c000db10:	c3                   	ret    
c000db11:	90                   	nop

c000db12 <Video::putTGA(int, int, unsigned char*, int)>:
c000db12:	55                   	push   ebp
c000db13:	57                   	push   edi
c000db14:	56                   	push   esi
c000db15:	53                   	push   ebx
c000db16:	83 ec 28             	sub    esp,0x28
c000db19:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db21:	50                   	push   eax
c000db22:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db26:	50                   	push   eax
c000db27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db2f:	56                   	push   esi
c000db30:	e8 75 fe ff ff       	call   c000d9aa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db35:	83 c4 20             	add    esp,0x20
c000db38:	85 c0                	test   eax,eax
c000db3a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db3e:	74 35                	je     c000db75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db40:	89 c7                	mov    edi,eax
c000db42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db46:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db4a:	39 d8                	cmp    eax,ebx
c000db4c:	7e 27                	jle    c000db75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db56:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db5a:	39 e8                	cmp    eax,ebp
c000db5c:	7e 14                	jle    c000db72 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db5e:	8b 06                	mov    eax,DWORD PTR [esi]
c000db60:	83 c7 04             	add    edi,0x4
c000db63:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db66:	53                   	push   ebx
c000db67:	55                   	push   ebp
c000db68:	45                   	inc    ebp
c000db69:	56                   	push   esi
c000db6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db6d:	83 c4 10             	add    esp,0x10
c000db70:	eb e0                	jmp    c000db52 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db72:	43                   	inc    ebx
c000db73:	eb cd                	jmp    c000db42 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db75:	83 c4 1c             	add    esp,0x1c
c000db78:	5b                   	pop    ebx
c000db79:	5e                   	pop    esi
c000db7a:	5f                   	pop    edi
c000db7b:	5d                   	pop    ebp
c000db7c:	c3                   	ret    
c000db7d:	66 90                	xchg   ax,ax
c000db7f:	90                   	nop

c000db80 <ACPI::close(int, int, void*)>:
c000db80:	83 ec 1c             	sub    esp,0x1c
c000db83:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000db8b:	74 0b                	je     c000db98 <ACPI::close(int, int, void*)+0x18>
c000db8d:	b8 00 00 00 00       	mov    eax,0x0
c000db92:	e9 9d 00 00 00       	jmp    c000dc34 <ACPI::close(int, int, void*)+0xb4>
c000db97:	90                   	nop
c000db98:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000db9d:	75 29                	jne    c000dbc8 <ACPI::close(int, int, void*)+0x48>
c000db9f:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000dba4:	85 c0                	test   eax,eax
c000dba6:	74 08                	je     c000dbb0 <ACPI::close(int, int, void*)+0x30>
c000dba8:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c000dbad:	ff d0                	call   eax
c000dbaf:	90                   	nop
c000dbb0:	83 ec 0c             	sub    esp,0xc
c000dbb3:	68 a4 dd 01 c0       	push   0xc001dda4
c000dbb8:	e8 46 25 00 00       	call   c0010103 <KePanic(char const*)>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc5:	eb 6d                	jmp    c000dc34 <ACPI::close(int, int, void*)+0xb4>
c000dbc7:	90                   	nop
c000dbc8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dbcd:	75 5d                	jne    c000dc2c <ACPI::close(int, int, void*)+0xac>
c000dbcf:	a1 44 2a 02 c0       	mov    eax,ds:0xc0022a44
c000dbd4:	85 c0                	test   eax,eax
c000dbd6:	74 08                	je     c000dbe0 <ACPI::close(int, int, void*)+0x60>
c000dbd8:	a1 44 2a 02 c0       	mov    eax,ds:0xc0022a44
c000dbdd:	ff d0                	call   eax
c000dbdf:	90                   	nop
c000dbe0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dbec:	25 ff 00 00 00       	and    eax,0xff
c000dbf1:	83 e0 02             	and    eax,0x2
c000dbf4:	74 1e                	je     c000dc14 <ACPI::close(int, int, void*)+0x94>
c000dbf6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dbfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc01:	89 c2                	mov    edx,eax
c000dc03:	ec                   	in     al,dx
c000dc04:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc0c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc10:	eb d6                	jmp    c000dbe8 <ACPI::close(int, int, void*)+0x68>
c000dc12:	66 90                	xchg   ax,ax
c000dc14:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc1b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc20:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc28:	ee                   	out    dx,al
c000dc29:	8d 76 00             	lea    esi,[esi+0x0]
c000dc2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc31:	8d 76 00             	lea    esi,[esi+0x0]
c000dc34:	83 c4 1c             	add    esp,0x1c
c000dc37:	c3                   	ret    

c000dc38 <findRSDP()>:
c000dc38:	83 ec 1c             	sub    esp,0x1c
c000dc3b:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000dc40:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc46:	83 e0 04             	and    eax,0x4
c000dc49:	84 c0                	test   al,al
c000dc4b:	75 07                	jne    c000dc54 <findRSDP()+0x1c>
c000dc4d:	b8 00 00 00 00       	mov    eax,0x0
c000dc52:	eb 70                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dc54:	a1 88 04 02 c0       	mov    eax,ds:0xc0020488
c000dc59:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc5e:	7f 1c                	jg     c000dc7c <findRSDP()+0x44>
c000dc60:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000dc65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc6b:	83 e2 fb             	and    edx,0xfffffffb
c000dc6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc74:	b8 00 00 00 00       	mov    eax,0x0
c000dc79:	eb 49                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dc7b:	90                   	nop
c000dc7c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dc84:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dc8c:	77 2e                	ja     c000dcbc <findRSDP()+0x84>
c000dc8e:	83 ec 04             	sub    esp,0x4
c000dc91:	6a 08                	push   0x8
c000dc93:	68 3f de 01 c0       	push   0xc001de3f
c000dc98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc9c:	e8 ef 26 ff ff       	call   c0000390 <memcmp>
c000dca1:	83 c4 10             	add    esp,0x10
c000dca4:	85 c0                	test   eax,eax
c000dca6:	0f 94 c0             	sete   al
c000dca9:	84 c0                	test   al,al
c000dcab:	74 07                	je     c000dcb4 <findRSDP()+0x7c>
c000dcad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcb1:	eb 11                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dcb3:	90                   	nop
c000dcb4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcb9:	eb c9                	jmp    c000dc84 <findRSDP()+0x4c>
c000dcbb:	90                   	nop
c000dcbc:	b8 00 00 00 00       	mov    eax,0x0
c000dcc1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc4:	83 c4 1c             	add    esp,0x1c
c000dcc7:	c3                   	ret    

c000dcc8 <loadACPITables(unsigned char*)>:
c000dcc8:	57                   	push   edi
c000dcc9:	56                   	push   esi
c000dcca:	53                   	push   ebx
c000dccb:	83 ec 60             	sub    esp,0x60
c000dcce:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000dcd3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcd9:	83 e0 04             	and    eax,0x4
c000dcdc:	84 c0                	test   al,al
c000dcde:	0f 84 3c 02 00 00    	je     c000df20 <loadACPITables(unsigned char*)+0x258>
c000dce4:	a0 60 2c 02 c0       	mov    al,ds:0xc0022c60
c000dce9:	84 c0                	test   al,al
c000dceb:	74 77                	je     c000dd64 <loadACPITables(unsigned char*)+0x9c>
c000dced:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dcf1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dcf5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dcf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcfc:	83 e8 24             	sub    eax,0x24
c000dcff:	c1 e8 03             	shr    eax,0x3
c000dd02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd06:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd0e:	66 90                	xchg   ax,ax
c000dd10:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd14:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd18:	0f 8d b6 00 00 00    	jge    c000ddd4 <loadACPITables(unsigned char*)+0x10c>
c000dd1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd22:	83 c0 24             	add    eax,0x24
c000dd25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd2d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd35:	c1 e0 03             	shl    eax,0x3
c000dd38:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd43:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd45:	89 c1                	mov    ecx,eax
c000dd47:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c000dd4c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd4f:	89 15 4c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a4c,edx
c000dd55:	89 ca                	mov    edx,ecx
c000dd57:	89 14 c5 64 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd59c],edx
c000dd5e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd62:	eb ac                	jmp    c000dd10 <loadACPITables(unsigned char*)+0x48>
c000dd64:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd73:	83 e8 24             	sub    eax,0x24
c000dd76:	c1 e8 02             	shr    eax,0x2
c000dd79:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dd85:	8d 76 00             	lea    esi,[esi+0x0]
c000dd88:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd8c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dd90:	7d 42                	jge    c000ddd4 <loadACPITables(unsigned char*)+0x10c>
c000dd92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd96:	83 c0 24             	add    eax,0x24
c000dd99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dda1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dda5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dda9:	c1 e0 02             	shl    eax,0x2
c000ddac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ddb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddb6:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c000ddbb:	8d 50 01             	lea    edx,[eax+0x1]
c000ddbe:	89 15 4c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a4c,edx
c000ddc4:	89 ca                	mov    edx,ecx
c000ddc6:	89 14 c5 64 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd59c],edx
c000ddcd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ddd1:	eb b5                	jmp    c000dd88 <loadACPITables(unsigned char*)+0xc0>
c000ddd3:	90                   	nop
c000ddd4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dddc:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c000dde1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dde5:	0f 8d 39 01 00 00    	jge    c000df24 <loadACPITables(unsigned char*)+0x25c>
c000ddeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ddef:	8b 04 c5 64 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd59c]
c000ddf6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de06:	25 ff 0f 00 00       	and    eax,0xfff
c000de0b:	89 c6                	mov    esi,eax
c000de0d:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	6a 01                	push   0x1
c000de18:	e8 18 b4 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c000de1d:	83 c4 10             	add    esp,0x10
c000de20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de2a:	83 ec 0c             	sub    esp,0xc
c000de2d:	6a 01                	push   0x1
c000de2f:	6a 01                	push   0x1
c000de31:	50                   	push   eax
c000de32:	52                   	push   edx
c000de33:	53                   	push   ebx
c000de34:	e8 8b bd ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de39:	83 c4 20             	add    esp,0x20
c000de3c:	09 f0                	or     eax,esi
c000de3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de42:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de46:	c1 e0 03             	shl    eax,0x3
c000de49:	05 60 2a 02 c0       	add    eax,0xc0022a60
c000de4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de5a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de76:	89 c6                	mov    esi,eax
c000de78:	89 d7                	mov    edi,edx
c000de7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de7c:	89 c8                	mov    eax,ecx
c000de7e:	89 fa                	mov    edx,edi
c000de80:	89 f3                	mov    ebx,esi
c000de82:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000de8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de9d:	05 00 10 00 00       	add    eax,0x1000
c000dea2:	c1 e8 0c             	shr    eax,0xc
c000dea5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dea9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dead:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000deb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb5:	25 ff 0f 00 00       	and    eax,0xfff
c000deba:	89 c6                	mov    esi,eax
c000debc:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dec9:	e8 67 b3 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c000dece:	83 c4 10             	add    esp,0x10
c000ded1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ded5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	6a 01                	push   0x1
c000dee0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dee4:	50                   	push   eax
c000dee5:	52                   	push   edx
c000dee6:	53                   	push   ebx
c000dee7:	e8 d8 bc ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000deec:	83 c4 20             	add    esp,0x20
c000deef:	09 f0                	or     eax,esi
c000def1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000def5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def9:	83 ec 0c             	sub    esp,0xc
c000defc:	50                   	push   eax
c000defd:	e8 63 b6 ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c000df02:	83 c4 10             	add    esp,0x10
c000df05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df0d:	89 14 c5 64 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd59c],edx
c000df14:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df18:	e9 bf fe ff ff       	jmp    c000dddc <loadACPITables(unsigned char*)+0x114>
c000df1d:	8d 76 00             	lea    esi,[esi+0x0]
c000df20:	90                   	nop
c000df21:	8d 76 00             	lea    esi,[esi+0x0]
c000df24:	83 c4 60             	add    esp,0x60
c000df27:	5b                   	pop    ebx
c000df28:	5e                   	pop    esi
c000df29:	5f                   	pop    edi
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <findRSDT(unsigned char*)>:
c000df2c:	57                   	push   edi
c000df2d:	56                   	push   esi
c000df2e:	53                   	push   ebx
c000df2f:	83 ec 50             	sub    esp,0x50
c000df32:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000df37:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df3d:	83 e0 04             	and    eax,0x4
c000df40:	84 c0                	test   al,al
c000df42:	75 0c                	jne    c000df50 <findRSDT(unsigned char*)+0x24>
c000df44:	b8 00 00 00 00       	mov    eax,0x0
c000df49:	e9 26 01 00 00       	jmp    c000e074 <findRSDT(unsigned char*)+0x148>
c000df4e:	66 90                	xchg   ax,ax
c000df50:	89 e0                	mov    eax,esp
c000df52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df56:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df5e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df7a:	89 c6                	mov    esi,eax
c000df7c:	89 d7                	mov    edi,edx
c000df7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df80:	89 c8                	mov    eax,ecx
c000df82:	89 fa                	mov    edx,edi
c000df84:	89 f3                	mov    ebx,esi
c000df86:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000df8a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df96:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000df9a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfb6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfba:	25 ff 0f 00 00       	and    eax,0xfff
c000dfbf:	89 c6                	mov    esi,eax
c000dfc1:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c000dfc7:	83 ec 0c             	sub    esp,0xc
c000dfca:	6a 02                	push   0x2
c000dfcc:	e8 64 b2 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dfd8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	6a 01                	push   0x1
c000dfe3:	6a 02                	push   0x2
c000dfe5:	50                   	push   eax
c000dfe6:	52                   	push   edx
c000dfe7:	53                   	push   ebx
c000dfe8:	e8 d7 bb ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfed:	83 c4 20             	add    esp,0x20
c000dff0:	09 f0                	or     eax,esi
c000dff2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dff6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dffa:	25 ff 0f 00 00       	and    eax,0xfff
c000dfff:	89 c6                	mov    esi,eax
c000e001:	8b 1d 50 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020550
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	6a 02                	push   0x2
c000e00c:	e8 24 b2 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c000e011:	83 c4 10             	add    esp,0x10
c000e014:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e018:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	6a 01                	push   0x1
c000e023:	6a 02                	push   0x2
c000e025:	50                   	push   eax
c000e026:	52                   	push   edx
c000e027:	53                   	push   ebx
c000e028:	e8 97 bb ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e02d:	83 c4 20             	add    esp,0x20
c000e030:	09 f0                	or     eax,esi
c000e032:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e036:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e03b:	75 13                	jne    c000e050 <findRSDT(unsigned char*)+0x124>
c000e03d:	c6 05 60 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022c60,0x0
c000e044:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e048:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e04c:	eb 22                	jmp    c000e070 <findRSDT(unsigned char*)+0x144>
c000e04e:	66 90                	xchg   ax,ax
c000e050:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e055:	75 11                	jne    c000e068 <findRSDT(unsigned char*)+0x13c>
c000e057:	c6 05 60 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c60,0x1
c000e05e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e062:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e066:	eb 08                	jmp    c000e070 <findRSDT(unsigned char*)+0x144>
c000e068:	b8 00 00 00 00       	mov    eax,0x0
c000e06d:	eb 05                	jmp    c000e074 <findRSDT(unsigned char*)+0x148>
c000e06f:	90                   	nop
c000e070:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e074:	83 c4 50             	add    esp,0x50
c000e077:	5b                   	pop    ebx
c000e078:	5e                   	pop    esi
c000e079:	5f                   	pop    edi
c000e07a:	c3                   	ret    
c000e07b:	90                   	nop

c000e07c <findDataTable(unsigned char*, char*)>:
c000e07c:	83 ec 1c             	sub    esp,0x1c
c000e07f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e084:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e08a:	83 e0 04             	and    eax,0x4
c000e08d:	84 c0                	test   al,al
c000e08f:	75 07                	jne    c000e098 <findDataTable(unsigned char*, char*)+0x1c>
c000e091:	b8 00 00 00 00       	mov    eax,0x0
c000e096:	eb 58                	jmp    c000e0f0 <findDataTable(unsigned char*, char*)+0x74>
c000e098:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0a0:	a1 4c 2a 02 c0       	mov    eax,ds:0xc0022a4c
c000e0a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0a9:	7d 3d                	jge    c000e0e8 <findDataTable(unsigned char*, char*)+0x6c>
c000e0ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0af:	c1 e0 03             	shl    eax,0x3
c000e0b2:	05 60 2a 02 c0       	add    eax,0xc0022a60
c000e0b7:	83 ec 04             	sub    esp,0x4
c000e0ba:	6a 04                	push   0x4
c000e0bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c0:	50                   	push   eax
c000e0c1:	e8 ca 22 ff ff       	call   c0000390 <memcmp>
c000e0c6:	83 c4 10             	add    esp,0x10
c000e0c9:	85 c0                	test   eax,eax
c000e0cb:	0f 94 c0             	sete   al
c000e0ce:	84 c0                	test   al,al
c000e0d0:	74 0e                	je     c000e0e0 <findDataTable(unsigned char*, char*)+0x64>
c000e0d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0d6:	8b 04 c5 64 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd59c]
c000e0dd:	eb 11                	jmp    c000e0f0 <findDataTable(unsigned char*, char*)+0x74>
c000e0df:	90                   	nop
c000e0e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e0e4:	eb ba                	jmp    c000e0a0 <findDataTable(unsigned char*, char*)+0x24>
c000e0e6:	66 90                	xchg   ax,ax
c000e0e8:	b8 00 00 00 00       	mov    eax,0x0
c000e0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e0f0:	83 c4 1c             	add    esp,0x1c
c000e0f3:	c3                   	ret    

c000e0f4 <scanMADT()>:
c000e0f4:	53                   	push   ebx
c000e0f5:	83 ec 38             	sub    esp,0x38
c000e0f8:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c000e0fd:	25 00 04 00 00       	and    eax,0x400
c000e102:	74 14                	je     c000e118 <scanMADT()+0x24>
c000e104:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e109:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e10f:	83 e2 fb             	and    edx,0xfffffffb
c000e112:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e118:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e11d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e123:	83 e0 04             	and    eax,0x4
c000e126:	84 c0                	test   al,al
c000e128:	0f 84 8a 04 00 00    	je     c000e5b8 <scanMADT()+0x4c4>
c000e12e:	e8 05 fb ff ff       	call   c000dc38 <findRSDP()>
c000e133:	a3 6c 2c 02 c0       	mov    ds:0xc0022c6c,eax
c000e138:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000e13d:	85 c0                	test   eax,eax
c000e13f:	75 1b                	jne    c000e15c <scanMADT()+0x68>
c000e141:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e146:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e14c:	83 e2 fb             	and    edx,0xfffffffb
c000e14f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e155:	e9 66 04 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e15a:	66 90                	xchg   ax,ax
c000e15c:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000e161:	83 ec 0c             	sub    esp,0xc
c000e164:	50                   	push   eax
c000e165:	e8 c2 fd ff ff       	call   c000df2c <findRSDT(unsigned char*)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	a3 68 2c 02 c0       	mov    ds:0xc0022c68,eax
c000e172:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000e177:	85 c0                	test   eax,eax
c000e179:	75 19                	jne    c000e194 <scanMADT()+0xa0>
c000e17b:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e180:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e186:	83 e2 fb             	and    edx,0xfffffffb
c000e189:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e18f:	e9 2c 04 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e194:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 26 fb ff ff       	call   c000dcc8 <loadACPITables(unsigned char*)>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000e1aa:	83 ec 08             	sub    esp,0x8
c000e1ad:	68 48 de 01 c0       	push   0xc001de48
c000e1b2:	50                   	push   eax
c000e1b3:	e8 c4 fe ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000e1b8:	83 c4 10             	add    esp,0x10
c000e1bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1c4:	75 1a                	jne    c000e1e0 <scanMADT()+0xec>
c000e1c6:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e1cb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1d1:	83 e2 fe             	and    edx,0xfffffffe
c000e1d4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1da:	e9 e1 03 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e1df:	90                   	nop
c000e1e0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e1e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1ef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e1f3:	0f 87 c7 03 00 00    	ja     c000e5c0 <scanMADT()+0x4cc>
c000e1f9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e201:	0f 87 b9 03 00 00    	ja     c000e5c0 <scanMADT()+0x4cc>
c000e207:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e20b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e20f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e213:	8d 50 01             	lea    edx,[eax+0x1]
c000e216:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e21a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e21e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e222:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e22a:	8d 50 01             	lea    edx,[eax+0x1]
c000e22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e235:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e239:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e23d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e242:	0f 86 74 03 00 00    	jbe    c000e5bc <scanMADT()+0x4c8>
c000e248:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e24d:	75 5d                	jne    c000e2ac <scanMADT()+0x1b8>
c000e24f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e253:	8d 50 01             	lea    edx,[eax+0x1]
c000e256:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e25a:	8a 15 60 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e60
c000e260:	81 e2 ff 00 00 00    	and    edx,0xff
c000e266:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e26a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e26e:	88 82 a0 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd160],al
c000e274:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e278:	8d 42 01             	lea    eax,[edx+0x1]
c000e27b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e27f:	a0 60 2e 02 c0       	mov    al,ds:0xc0022e60
c000e284:	8d 48 01             	lea    ecx,[eax+0x1]
c000e287:	88 0d 60 2e 02 c0    	mov    BYTE PTR ds:0xc0022e60,cl
c000e28d:	25 ff 00 00 00       	and    eax,0xff
c000e292:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e296:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e29a:	88 90 80 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd180],dl
c000e2a0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2a5:	e9 f6 02 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e2aa:	66 90                	xchg   ax,ax
c000e2ac:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2b1:	0f 85 29 01 00 00    	jne    c000e3e0 <scanMADT()+0x2ec>
c000e2b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e2be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2c2:	8a 15 20 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d20
c000e2c8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2d6:	88 82 40 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd2c0],al
c000e2dc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e2e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2e8:	01 d0                	add    eax,edx
c000e2ea:	83 c0 2c             	add    eax,0x2c
c000e2ed:	8a 00                	mov    al,BYTE PTR [eax]
c000e2ef:	31 d2                	xor    edx,edx
c000e2f1:	88 c2                	mov    dl,al
c000e2f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e302:	25 ff 00 00 00       	and    eax,0xff
c000e307:	c1 e0 08             	shl    eax,0x8
c000e30a:	89 d1                	mov    ecx,edx
c000e30c:	09 c1                	or     ecx,eax
c000e30e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e312:	8d 50 02             	lea    edx,[eax+0x2]
c000e315:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e319:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e31d:	25 ff 00 00 00       	and    eax,0xff
c000e322:	c1 e0 10             	shl    eax,0x10
c000e325:	09 c1                	or     ecx,eax
c000e327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32b:	8d 50 03             	lea    edx,[eax+0x3]
c000e32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e332:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e336:	25 ff 00 00 00       	and    eax,0xff
c000e33b:	c1 e0 18             	shl    eax,0x18
c000e33e:	09 c1                	or     ecx,eax
c000e340:	89 ca                	mov    edx,ecx
c000e342:	a0 20 2d 02 c0       	mov    al,ds:0xc0022d20
c000e347:	25 ff 00 00 00       	and    eax,0xff
c000e34c:	89 14 85 60 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd2a0],edx
c000e353:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e358:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e35c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e360:	01 d0                	add    eax,edx
c000e362:	83 c0 2c             	add    eax,0x2c
c000e365:	8a 00                	mov    al,BYTE PTR [eax]
c000e367:	31 d2                	xor    edx,edx
c000e369:	88 c2                	mov    dl,al
c000e36b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e376:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e37a:	25 ff 00 00 00       	and    eax,0xff
c000e37f:	c1 e0 08             	shl    eax,0x8
c000e382:	89 d1                	mov    ecx,edx
c000e384:	09 c1                	or     ecx,eax
c000e386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e38a:	8d 50 02             	lea    edx,[eax+0x2]
c000e38d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e391:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e395:	25 ff 00 00 00       	and    eax,0xff
c000e39a:	c1 e0 10             	shl    eax,0x10
c000e39d:	09 c1                	or     ecx,eax
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ae:	25 ff 00 00 00       	and    eax,0xff
c000e3b3:	c1 e0 18             	shl    eax,0x18
c000e3b6:	09 c1                	or     ecx,eax
c000e3b8:	89 ca                	mov    edx,ecx
c000e3ba:	a0 20 2d 02 c0       	mov    al,ds:0xc0022d20
c000e3bf:	25 ff 00 00 00       	and    eax,0xff
c000e3c4:	89 14 85 e0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd220],edx
c000e3cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3d0:	a0 20 2d 02 c0       	mov    al,ds:0xc0022d20
c000e3d5:	40                   	inc    eax
c000e3d6:	a2 20 2d 02 c0       	mov    ds:0xc0022d20,al
c000e3db:	e9 c0 01 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e3e0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e3e5:	0f 85 fd 00 00 00    	jne    c000e4e8 <scanMADT()+0x3f4>
c000e3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e3f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3fe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e402:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e406:	8d 50 01             	lea    edx,[eax+0x1]
c000e409:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e40d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e411:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e415:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e419:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e41d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e421:	01 d0                	add    eax,edx
c000e423:	83 c0 2c             	add    eax,0x2c
c000e426:	8a 00                	mov    al,BYTE PTR [eax]
c000e428:	31 d2                	xor    edx,edx
c000e42a:	88 c2                	mov    dl,al
c000e42c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e430:	8d 48 01             	lea    ecx,[eax+0x1]
c000e433:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e437:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e43b:	25 ff 00 00 00       	and    eax,0xff
c000e440:	c1 e0 08             	shl    eax,0x8
c000e443:	89 d1                	mov    ecx,edx
c000e445:	09 c1                	or     ecx,eax
c000e447:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44b:	8d 50 02             	lea    edx,[eax+0x2]
c000e44e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e452:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e456:	25 ff 00 00 00       	and    eax,0xff
c000e45b:	c1 e0 10             	shl    eax,0x10
c000e45e:	09 c1                	or     ecx,eax
c000e460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e464:	8d 50 03             	lea    edx,[eax+0x3]
c000e467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e46b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e46f:	25 ff 00 00 00       	and    eax,0xff
c000e474:	c1 e0 18             	shl    eax,0x18
c000e477:	09 c8                	or     eax,ecx
c000e479:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e47d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48a:	01 d0                	add    eax,edx
c000e48c:	83 c0 2c             	add    eax,0x2c
c000e48f:	8a 00                	mov    al,BYTE PTR [eax]
c000e491:	25 ff 00 00 00       	and    eax,0xff
c000e496:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e49a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4a5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4ab:	c1 e2 08             	shl    edx,0x8
c000e4ae:	09 d0                	or     eax,edx
c000e4b0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4b5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4ba:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4be:	25 ff 00 00 00       	and    eax,0xff
c000e4c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4c7:	88 90 80 f1 01 c0    	mov    BYTE PTR [eax-0x3ffe0e80],dl
c000e4cd:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4d1:	31 d2                	xor    edx,edx
c000e4d3:	88 c2                	mov    dl,al
c000e4d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e4da:	66 89 84 12 00 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd300],ax
c000e4e2:	e9 b9 00 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e4e7:	90                   	nop
c000e4e8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e4ed:	0f 85 a1 00 00 00    	jne    c000e594 <scanMADT()+0x4a0>
c000e4f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e502:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e506:	25 ff 00 00 00       	and    eax,0xff
c000e50b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e50f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	01 d0                	add    eax,edx
c000e519:	83 c0 2c             	add    eax,0x2c
c000e51c:	8a 00                	mov    al,BYTE PTR [eax]
c000e51e:	31 d2                	xor    edx,edx
c000e520:	88 c2                	mov    dl,al
c000e522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e526:	8d 48 01             	lea    ecx,[eax+0x1]
c000e529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e52d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e531:	25 ff 00 00 00       	and    eax,0xff
c000e536:	c1 e0 08             	shl    eax,0x8
c000e539:	09 d0                	or     eax,edx
c000e53b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e53f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e548:	8d 50 01             	lea    edx,[eax+0x1]
c000e54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e54f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e553:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e557:	25 ff 00 00 00       	and    eax,0xff
c000e55c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e564:	c1 e0 08             	shl    eax,0x8
c000e567:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e56b:	89 c1                	mov    ecx,eax
c000e56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e571:	c1 e0 18             	shl    eax,0x18
c000e574:	89 c3                	mov    ebx,eax
c000e576:	a1 70 2c 02 c0       	mov    eax,ds:0xc0022c70
c000e57b:	8d 50 01             	lea    edx,[eax+0x1]
c000e57e:	89 15 70 2c 02 c0    	mov    DWORD PTR ds:0xc0022c70,edx
c000e584:	09 d9                	or     ecx,ebx
c000e586:	89 ca                	mov    edx,ecx
c000e588:	89 14 85 80 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd380],edx
c000e58f:	eb 0f                	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e599:	75 05                	jne    c000e5a0 <scanMADT()+0x4ac>
c000e59b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5a0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5a4:	31 d2                	xor    edx,edx
c000e5a6:	88 c2                	mov    dl,al
c000e5a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5ac:	01 d0                	add    eax,edx
c000e5ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5b2:	e9 31 fc ff ff       	jmp    c000e1e8 <scanMADT()+0xf4>
c000e5b7:	90                   	nop
c000e5b8:	90                   	nop
c000e5b9:	eb 05                	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e5bb:	90                   	nop
c000e5bc:	90                   	nop
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	83 c4 38             	add    esp,0x38
c000e5c3:	5b                   	pop    ebx
c000e5c4:	c3                   	ret    
c000e5c5:	90                   	nop
c000e5c6:	66 90                	xchg   ax,ax

c000e5c8 <ACPI::ACPI()>:
c000e5c8:	83 ec 0c             	sub    esp,0xc
c000e5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cf:	83 ec 08             	sub    esp,0x8
c000e5d2:	68 4d de 01 c0       	push   0xc001de4d
c000e5d7:	50                   	push   eax
c000e5d8:	e8 83 d4 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	ba 84 df 01 c0       	mov    edx,0xc001df84
c000e5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e9:	89 10                	mov    DWORD PTR [eax],edx
c000e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e608:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e612:	e8 dd fa ff ff       	call   c000e0f4 <scanMADT()>
c000e617:	90                   	nop
c000e618:	83 c4 0c             	add    esp,0xc
c000e61b:	c3                   	ret    

c000e61c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e61c:	83 ec 2c             	sub    esp,0x2c
c000e61f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e623:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e627:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e62b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e62f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e634:	88 d0                	mov    al,dl
c000e636:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e63a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e63f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e647:	90                   	nop
c000e648:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e64c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e652:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e656:	0f 8d 9c 00 00 00    	jge    c000e6f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e65c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e660:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e664:	83 c2 2a             	add    edx,0x2a
c000e667:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e66b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e670:	75 7a                	jne    c000e6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e672:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e676:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e67a:	83 c2 2a             	add    edx,0x2a
c000e67d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e681:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e685:	75 65                	jne    c000e6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e687:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e68c:	74 3a                	je     c000e6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e68e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e692:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e696:	83 c2 2a             	add    edx,0x2a
c000e699:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e69d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6a4:	39 c2                	cmp    edx,eax
c000e6a6:	74 10                	je     c000e6b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6a8:	83 ec 0c             	sub    esp,0xc
c000e6ab:	68 c8 dd 01 c0       	push   0xc001ddc8
c000e6b0:	e8 4e 1a 00 00       	call   c0010103 <KePanic(char const*)>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	83 ec 0c             	sub    esp,0xc
c000e6bb:	68 52 de 01 c0       	push   0xc001de52
c000e6c0:	e8 3e 1a 00 00       	call   c0010103 <KePanic(char const*)>
c000e6c5:	83 c4 10             	add    esp,0x10
c000e6c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e6cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d4:	83 c2 2a             	add    edx,0x2a
c000e6d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e6db:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6e0:	89 01                	mov    DWORD PTR [ecx],eax
c000e6e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e6e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e6ea:	66 90                	xchg   ax,ax
c000e6ec:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e6f0:	e9 53 ff ff ff       	jmp    c000e648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6f8:	90                   	nop
c000e6f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6fd:	83 c4 2c             	add    esp,0x2c
c000e700:	c2 04 00             	ret    0x4
c000e703:	90                   	nop

c000e704 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e704:	83 ec 1c             	sub    esp,0x1c
c000e707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e70b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e70f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e713:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e718:	88 c8                	mov    al,cl
c000e71a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e71e:	88 d0                	mov    al,dl
c000e720:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e728:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e732:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e735:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e739:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e741:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e747:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e74b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e752:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e761:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e765:	8d 48 01             	lea    ecx,[eax+0x1]
c000e768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76c:	83 c2 2a             	add    edx,0x2a
c000e76f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e777:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e781:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e784:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e788:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e78c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e790:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e796:	8d 50 01             	lea    edx,[eax+0x1]
c000e799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ad:	3d 00 02 00 00       	cmp    eax,0x200
c000e7b2:	75 10                	jne    c000e7c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	68 61 de 01 c0       	push   0xc001de61
c000e7bc:	e8 42 19 00 00       	call   c0010103 <KePanic(char const*)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	90                   	nop
c000e7c5:	83 c4 1c             	add    esp,0x1c
c000e7c8:	c3                   	ret    
c000e7c9:	90                   	nop
c000e7ca:	66 90                	xchg   ax,ax

c000e7cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e7cc:	b8 00 00 00 00       	mov    eax,0x0
c000e7d1:	c3                   	ret    
c000e7d2:	66 90                	xchg   ax,ax

c000e7d4 <ACPI::detectPCI()>:
c000e7d4:	53                   	push   ebx
c000e7d5:	83 ec 28             	sub    esp,0x28
c000e7d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7dd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e7e2:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000e7e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7ed:	83 e0 04             	and    eax,0x4
c000e7f0:	84 c0                	test   al,al
c000e7f2:	74 2c                	je     c000e820 <ACPI::detectPCI()+0x4c>
c000e7f4:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000e7f9:	83 ec 08             	sub    esp,0x8
c000e7fc:	68 7e de 01 c0       	push   0xc001de7e
c000e801:	50                   	push   eax
c000e802:	e8 75 f8 ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000e807:	83 c4 10             	add    esp,0x10
c000e80a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e80e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e813:	74 0b                	je     c000e820 <ACPI::detectPCI()+0x4c>
c000e815:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e81a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e81f:	90                   	nop
c000e820:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e82c:	8a 00                	mov    al,BYTE PTR [eax]
c000e82e:	3c 01                	cmp    al,0x1
c000e830:	75 0e                	jne    c000e840 <ACPI::detectPCI()+0x6c>
c000e832:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e837:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e83c:	eb 2a                	jmp    c000e868 <ACPI::detectPCI()+0x94>
c000e83e:	66 90                	xchg   ax,ax
c000e840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e844:	8a 00                	mov    al,BYTE PTR [eax]
c000e846:	3c 02                	cmp    al,0x2
c000e848:	75 1e                	jne    c000e868 <ACPI::detectPCI()+0x94>
c000e84a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e84f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e854:	74 12                	je     c000e868 <ACPI::detectPCI()+0x94>
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	68 f8 dd 01 c0       	push   0xc001ddf8
c000e85e:	e8 a0 18 00 00       	call   c0010103 <KePanic(char const*)>
c000e863:	83 c4 10             	add    esp,0x10
c000e866:	66 90                	xchg   ax,ax
c000e868:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e86c:	83 f0 01             	xor    eax,0x1
c000e86f:	84 c0                	test   al,al
c000e871:	74 41                	je     c000e8b4 <ACPI::detectPCI()+0xe0>
c000e873:	e8 b8 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e878:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e87c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e881:	75 0d                	jne    c000e890 <ACPI::detectPCI()+0xbc>
c000e883:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e888:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e88d:	eb 25                	jmp    c000e8b4 <ACPI::detectPCI()+0xe0>
c000e88f:	90                   	nop
c000e890:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e895:	75 1d                	jne    c000e8b4 <ACPI::detectPCI()+0xe0>
c000e897:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e89c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8a1:	74 11                	je     c000e8b4 <ACPI::detectPCI()+0xe0>
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 f8 dd 01 c0       	push   0xc001ddf8
c000e8ab:	e8 53 18 00 00       	call   c0010103 <KePanic(char const*)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	90                   	nop
c000e8b4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8b9:	0f 84 85 00 00 00    	je     c000e944 <ACPI::detectPCI()+0x170>
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	68 83 de 01 c0       	push   0xc001de83
c000e8c7:	e8 bf 11 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e8d7:	83 ec 0c             	sub    esp,0xc
c000e8da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8de:	e8 d6 8e ff ff       	call   c00077b9 <malloc>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	89 c3                	mov    ebx,eax
c000e8e8:	83 ec 0c             	sub    esp,0xc
c000e8eb:	53                   	push   ebx
c000e8ec:	e8 c9 96 00 00       	call   c0017fba <PCI::PCI()>
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e8f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8fc:	83 ec 08             	sub    esp,0x8
c000e8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e903:	50                   	push   eax
c000e904:	e8 bf cf ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c000e909:	83 c4 10             	add    esp,0x10
c000e90c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e910:	8b 00                	mov    eax,DWORD PTR [eax]
c000e912:	83 c0 08             	add    eax,0x8
c000e915:	8b 00                	mov    eax,DWORD PTR [eax]
c000e917:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e91c:	74 0a                	je     c000e928 <ACPI::detectPCI()+0x154>
c000e91e:	ba 01 00 00 00       	mov    edx,0x1
c000e923:	eb 0b                	jmp    c000e930 <ACPI::detectPCI()+0x15c>
c000e925:	8d 76 00             	lea    esi,[esi+0x0]
c000e928:	ba 02 00 00 00       	mov    edx,0x2
c000e92d:	8d 76 00             	lea    esi,[esi+0x0]
c000e930:	6a 00                	push   0x0
c000e932:	6a 00                	push   0x0
c000e934:	52                   	push   edx
c000e935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e939:	ff d0                	call   eax
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	e9 91 00 00 00       	jmp    c000e9d4 <ACPI::detectPCI()+0x200>
c000e943:	90                   	nop
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	68 9b de 01 c0       	push   0xc001de9b
c000e94c:	e8 3a 11 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e95b:	83 ec 0c             	sub    esp,0xc
c000e95e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e962:	e8 52 8e ff ff       	call   c00077b9 <malloc>
c000e967:	83 c4 10             	add    esp,0x10
c000e96a:	89 c3                	mov    ebx,eax
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	53                   	push   ebx
c000e970:	e8 71 a1 00 00       	call   c0018ae6 <IDE::IDE()>
c000e975:	83 c4 10             	add    esp,0x10
c000e978:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e97c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e980:	83 ec 08             	sub    esp,0x8
c000e983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e987:	50                   	push   eax
c000e988:	e8 3b cf ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e994:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9a2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9af:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9be:	83 c0 08             	add    eax,0x8
c000e9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c3:	6a 00                	push   0x0
c000e9c5:	6a 00                	push   0x0
c000e9c7:	6a 00                	push   0x0
c000e9c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9cd:	ff d0                	call   eax
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	66 90                	xchg   ax,ax
c000e9d4:	90                   	nop
c000e9d5:	83 c4 28             	add    esp,0x28
c000e9d8:	5b                   	pop    ebx
c000e9d9:	c3                   	ret    
c000e9da:	66 90                	xchg   ax,ax

c000e9dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e9dc:	83 ec 1c             	sub    esp,0x1c
c000e9df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e9e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e9e6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e9ea:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c000e9f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9f4:	25 ff 00 00 00       	and    eax,0xff
c000e9f9:	83 ec 08             	sub    esp,0x8
c000e9fc:	50                   	push   eax
c000e9fd:	52                   	push   edx
c000e9fe:	e8 a3 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea0a:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c000ea10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea14:	25 ff 00 00 00       	and    eax,0xff
c000ea19:	83 ec 04             	sub    esp,0x4
c000ea1c:	6a 01                	push   0x1
c000ea1e:	50                   	push   eax
c000ea1f:	52                   	push   edx
c000ea20:	e8 97 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	90                   	nop
c000ea29:	83 c4 1c             	add    esp,0x1c
c000ea2c:	c3                   	ret    
c000ea2d:	90                   	nop
c000ea2e:	66 90                	xchg   ax,ax

c000ea30 <ACPI::sleep()>:
c000ea30:	83 ec 0c             	sub    esp,0xc
c000ea33:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c000ea38:	85 c0                	test   eax,eax
c000ea3a:	74 08                	je     c000ea44 <ACPI::sleep()+0x14>
c000ea3c:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c000ea41:	ff d0                	call   eax
c000ea43:	90                   	nop
c000ea44:	90                   	nop
c000ea45:	83 c4 0c             	add    esp,0xc
c000ea48:	c3                   	ret    
c000ea49:	90                   	nop
c000ea4a:	66 90                	xchg   ax,ax

c000ea4c <ACPI::open(int, int, void*)>:
c000ea4c:	57                   	push   edi
c000ea4d:	56                   	push   esi
c000ea4e:	53                   	push   ebx
c000ea4f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea5f:	e8 70 fd ff ff       	call   c000e7d4 <ACPI::detectPCI()>
c000ea64:	83 c4 10             	add    esp,0x10
c000ea67:	83 ec 0c             	sub    esp,0xc
c000ea6a:	68 20 de 01 c0       	push   0xc001de20
c000ea6f:	e8 17 10 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000ea74:	83 c4 10             	add    esp,0x10
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 b0 de 01 c0       	push   0xc001deb0
c000ea7f:	e8 27 34 00 00       	call   c0011eab <Thr::loadKernelSymbolTable(char const*)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ea8f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eaa4:	e8 10 8d ff ff       	call   c00077b9 <malloc>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	89 c3                	mov    ebx,eax
c000eaae:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000eab3:	83 ec 04             	sub    esp,0x4
c000eab6:	50                   	push   eax
c000eab7:	68 ce de 01 c0       	push   0xc001dece
c000eabc:	53                   	push   ebx
c000eabd:	e8 3c bf ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000eac2:	83 c4 10             	add    esp,0x10
c000eac5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eacc:	83 ec 08             	sub    esp,0x8
c000eacf:	6a 01                	push   0x1
c000ead1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ead8:	e8 e1 bf ff ff       	call   c000aabe <File::open(FileOpenMode)>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eae7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eaef:	75 17                	jne    c000eb08 <ACPI::open(int, int, void*)+0xbc>
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eafb:	e8 1c c0 ff ff       	call   c000ab1c <File::close()>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	eb 0b                	jmp    c000eb10 <ACPI::open(int, int, void*)+0xc4>
c000eb05:	8d 76 00             	lea    esi,[esi+0x0]
c000eb08:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb10:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb18:	74 1e                	je     c000eb38 <ACPI::open(int, int, void*)+0xec>
c000eb1a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb21:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb23:	83 c0 08             	add    eax,0x8
c000eb26:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb32:	ff d0                	call   eax
c000eb34:	83 c4 10             	add    esp,0x10
c000eb37:	90                   	nop
c000eb38:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb3f:	83 f0 01             	xor    eax,0x1
c000eb42:	84 c0                	test   al,al
c000eb44:	74 42                	je     c000eb88 <ACPI::open(int, int, void*)+0x13c>
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	68 ec de 01 c0       	push   0xc001deec
c000eb4e:	e8 38 0f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000eb53:	83 c4 10             	add    esp,0x10
c000eb56:	83 ec 04             	sub    esp,0x4
c000eb59:	6a 0c                	push   0xc
c000eb5b:	68 07 df 01 c0       	push   0xc001df07
c000eb60:	68 18 df 01 c0       	push   0xc001df18
c000eb65:	e8 6c 29 00 00       	call   c00114d6 <Reg::readIntWithDefault(char*, char*, int)>
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb7e:	e8 bc a8 ff ff       	call   c000943f <Virt::setupPageSwapping(int)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	66 90                	xchg   ax,ax
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	68 97 cf 01 c0       	push   0xc001cf97
c000eb90:	e8 f6 0e 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	6a 12                	push   0x12
c000eba4:	50                   	push   eax
c000eba5:	e8 36 d0 ff ff       	call   c000bbe0 <getDevicesOfType(DeviceType)>
c000ebaa:	83 c4 0c             	add    esp,0xc
c000ebad:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebba:	50                   	push   eax
c000ebbb:	e8 2c d8 00 00       	call   c001c3ec <LinkedList<Device>::isEmpty()>
c000ebc0:	83 c4 10             	add    esp,0x10
c000ebc3:	83 f0 01             	xor    eax,0x1
c000ebc6:	84 c0                	test   al,al
c000ebc8:	0f 84 46 01 00 00    	je     c000ed14 <ACPI::open(int, int, void*)+0x2c8>
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebd8:	50                   	push   eax
c000ebd9:	e8 2a d8 00 00       	call   c001c408 <LinkedList<Device>::getFirstElement()>
c000ebde:	83 c4 10             	add    esp,0x10
c000ebe1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ebe8:	83 ec 0c             	sub    esp,0xc
c000ebeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebf2:	50                   	push   eax
c000ebf3:	e8 18 d8 00 00       	call   c001c410 <LinkedList<Device>::removeFirst()>
c000ebf8:	83 c4 10             	add    esp,0x10
c000ebfb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec02:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec09:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec14:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec1a:	ba 09 00 00 00       	mov    edx,0x9
c000ec1f:	fc                   	cld    
c000ec20:	89 c7                	mov    edi,eax
c000ec22:	89 de                	mov    esi,ebx
c000ec24:	89 d1                	mov    ecx,edx
c000ec26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec28:	83 ec 08             	sub    esp,0x8
c000ec2b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec2f:	50                   	push   eax
c000ec30:	83 ec 24             	sub    esp,0x24
c000ec33:	89 e0                	mov    eax,esp
c000ec35:	89 c3                	mov    ebx,eax
c000ec37:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec3b:	ba 09 00 00 00       	mov    edx,0x9
c000ec40:	89 df                	mov    edi,ebx
c000ec42:	89 c6                	mov    esi,eax
c000ec44:	89 d1                	mov    ecx,edx
c000ec46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec48:	e8 4f 98 00 00       	call   c001849c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec4d:	83 c4 30             	add    esp,0x30
c000ec50:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec57:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec5f:	0f 84 4b ff ff ff    	je     c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ec65:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec7a:	e8 3a 8b ff ff       	call   c00077b9 <malloc>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	89 c3                	mov    ebx,eax
c000ec84:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000ec89:	83 ec 04             	sub    esp,0x4
c000ec8c:	50                   	push   eax
c000ec8d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec94:	53                   	push   ebx
c000ec95:	e8 64 bd ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000ec9a:	83 c4 10             	add    esp,0x10
c000ec9d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eca4:	83 ec 0c             	sub    esp,0xc
c000eca7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecae:	e8 79 c0 ff ff       	call   c000ad2c <File::exists()>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	84 c0                	test   al,al
c000ecb8:	74 2a                	je     c000ece4 <ACPI::open(int, int, void*)+0x298>
c000ecba:	83 ec 08             	sub    esp,0x8
c000ecbd:	6a 01                	push   0x1
c000ecbf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecc6:	e8 57 3c 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000eccb:	83 c4 10             	add    esp,0x10
c000ecce:	83 ec 08             	sub    esp,0x8
c000ecd1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecd8:	50                   	push   eax
c000ecd9:	e8 75 3e 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	8d 76 00             	lea    esi,[esi+0x0]
c000ece4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ecec:	0f 84 be fe ff ff    	je     c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ecf2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ecf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecfb:	83 c0 08             	add    eax,0x8
c000ecfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed00:	83 ec 0c             	sub    esp,0xc
c000ed03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed0a:	ff d0                	call   eax
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	e9 9c fe ff ff       	jmp    c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed1e:	50                   	push   eax
c000ed1f:	e8 c4 d6 00 00       	call   c001c3e8 <LinkedList<Device>::~LinkedList()>
c000ed24:	83 c4 10             	add    esp,0x10
c000ed27:	8b 1d 58 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020458
c000ed2d:	83 ec 08             	sub    esp,0x8
c000ed30:	6a 01                	push   0x1
c000ed32:	68 1f df 01 c0       	push   0xc001df1f
c000ed37:	e8 e6 3b 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	83 ec 08             	sub    esp,0x8
c000ed42:	53                   	push   ebx
c000ed43:	50                   	push   eax
c000ed44:	e8 0a 3e 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000ed51:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed57:	83 e0 04             	and    eax,0x4
c000ed5a:	84 c0                	test   al,al
c000ed5c:	0f 84 16 01 00 00    	je     c000ee78 <ACPI::open(int, int, void*)+0x42c>
c000ed62:	83 ec 0c             	sub    esp,0xc
c000ed65:	68 3c df 01 c0       	push   0xc001df3c
c000ed6a:	e8 1c 0d 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed7d:	83 ec 0c             	sub    esp,0xc
c000ed80:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ed87:	e8 2d 8a ff ff       	call   c00077b9 <malloc>
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	89 c3                	mov    ebx,eax
c000ed91:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000ed96:	83 ec 04             	sub    esp,0x4
c000ed99:	50                   	push   eax
c000ed9a:	68 59 df 01 c0       	push   0xc001df59
c000ed9f:	53                   	push   ebx
c000eda0:	e8 59 bc ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000eda5:	83 c4 10             	add    esp,0x10
c000eda8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edaf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edb7:	74 1b                	je     c000edd4 <ACPI::open(int, int, void*)+0x388>
c000edb9:	83 ec 0c             	sub    esp,0xc
c000edbc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edc3:	e8 64 bf ff ff       	call   c000ad2c <File::exists()>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	84 c0                	test   al,al
c000edcd:	74 05                	je     c000edd4 <ACPI::open(int, int, void*)+0x388>
c000edcf:	b0 01                	mov    al,0x1
c000edd1:	eb 05                	jmp    c000edd8 <ACPI::open(int, int, void*)+0x38c>
c000edd3:	90                   	nop
c000edd4:	b0 00                	mov    al,0x0
c000edd6:	66 90                	xchg   ax,ax
c000edd8:	84 c0                	test   al,al
c000edda:	74 28                	je     c000ee04 <ACPI::open(int, int, void*)+0x3b8>
c000eddc:	83 ec 08             	sub    esp,0x8
c000eddf:	6a 01                	push   0x1
c000ede1:	68 59 df 01 c0       	push   0xc001df59
c000ede6:	e8 37 3b 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c000edeb:	83 c4 10             	add    esp,0x10
c000edee:	83 ec 08             	sub    esp,0x8
c000edf1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000edf8:	50                   	push   eax
c000edf9:	e8 55 3d 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c000edfe:	83 c4 10             	add    esp,0x10
c000ee01:	8d 76 00             	lea    esi,[esi+0x0]
c000ee04:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee0c:	74 2a                	je     c000ee38 <ACPI::open(int, int, void*)+0x3ec>
c000ee0e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee16:	74 20                	je     c000ee38 <ACPI::open(int, int, void*)+0x3ec>
c000ee18:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee21:	83 c0 08             	add    eax,0x8
c000ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee26:	83 ec 0c             	sub    esp,0xc
c000ee29:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee30:	ff d0                	call   eax
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000ee3d:	83 ec 08             	sub    esp,0x8
c000ee40:	68 76 df 01 c0       	push   0xc001df76
c000ee45:	50                   	push   eax
c000ee46:	e8 31 f2 ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee55:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee5d:	74 19                	je     c000ee78 <ACPI::open(int, int, void*)+0x42c>
c000ee5f:	83 ec 08             	sub    esp,0x8
c000ee62:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee69:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee70:	e8 67 fb ff ff       	call   c000e9dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	b8 00 00 00 00       	mov    eax,0x0
c000ee7d:	81 c4 70 01 00 00    	add    esp,0x170
c000ee83:	5b                   	pop    ebx
c000ee84:	5e                   	pop    esi
c000ee85:	5f                   	pop    edi
c000ee86:	c3                   	ret    
c000ee87:	90                   	nop

c000ee88 <CPU::close(int, int, void*)>:
c000ee88:	31 c0                	xor    eax,eax
c000ee8a:	c3                   	ret    
c000ee8b:	90                   	nop

c000ee8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ee8c:	60                   	pusha  
c000ee8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee99:	9c                   	pushf  
c000ee9a:	fa                   	cli    
c000ee9b:	0f 09                	wbinvd 
c000ee9d:	0f 30                	wrmsr  
c000ee9f:	9d                   	popf   
c000eea0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eea4:	89 02                	mov    DWORD PTR [edx],eax
c000eea6:	61                   	popa   
c000eea7:	c3                   	ret    

c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eea8:	60                   	pusha  
c000eea9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eead:	9c                   	pushf  
c000eeae:	fa                   	cli    
c000eeaf:	0f 09                	wbinvd 
c000eeb1:	31 c0                	xor    eax,eax
c000eeb3:	31 d2                	xor    edx,edx
c000eeb5:	0f 32                	rdmsr  
c000eeb7:	9d                   	popf   
c000eeb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eebc:	89 02                	mov    DWORD PTR [edx],eax
c000eebe:	61                   	popa   
c000eebf:	c3                   	ret    

c000eec0 <CPU::AMD_K6_writeback(int, int, int)>:
c000eec0:	56                   	push   esi
c000eec1:	53                   	push   ebx
c000eec2:	83 ec 10             	sub    esp,0x10
c000eec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000eece:	75 5d                	jne    c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eed0:	83 f8 08             	cmp    eax,0x8
c000eed3:	75 09                	jne    c000eede <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000eed5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000eeda:	7e 13                	jle    c000eeef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eedc:	eb 30                	jmp    c000ef0e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eede:	83 f8 06             	cmp    eax,0x6
c000eee1:	7c 4a                	jl     c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eee3:	83 f8 07             	cmp    eax,0x7
c000eee6:	7e 07                	jle    c000eeef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eee8:	83 f8 09             	cmp    eax,0x9
c000eeeb:	74 21                	je     c000ef0e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eeed:	eb 3e                	jmp    c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eeef:	89 e6                	mov    esi,esp
c000eef1:	8b 1d 7c 04 02 c0    	mov    ebx,DWORD PTR ds:0xc002047c
c000eef7:	56                   	push   esi
c000eef8:	c1 eb 15             	shr    ebx,0x15
c000eefb:	68 82 00 00 c0       	push   0xc0000082
c000ef00:	83 e3 7e             	and    ebx,0x7e
c000ef03:	e8 a0 ff ff ff       	call   c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef08:	56                   	push   esi
c000ef09:	6a 00                	push   0x0
c000ef0b:	53                   	push   ebx
c000ef0c:	eb 12                	jmp    c000ef20 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef0e:	89 e3                	mov    ebx,esp
c000ef10:	53                   	push   ebx
c000ef11:	68 82 00 00 c0       	push   0xc0000082
c000ef16:	e8 8d ff ff ff       	call   c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef1b:	53                   	push   ebx
c000ef1c:	6a 00                	push   0x0
c000ef1e:	6a 00                	push   0x0
c000ef20:	68 82 00 00 c0       	push   0xc0000082
c000ef25:	e8 62 ff ff ff       	call   c000ee8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef2a:	83 c4 18             	add    esp,0x18
c000ef2d:	83 c4 10             	add    esp,0x10
c000ef30:	5b                   	pop    ebx
c000ef31:	5e                   	pop    esi
c000ef32:	c3                   	ret    
c000ef33:	90                   	nop

c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef34:	55                   	push   ebp
c000ef35:	57                   	push   edi
c000ef36:	56                   	push   esi
c000ef37:	53                   	push   ebx
c000ef38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef44:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef48:	39 05 90 f1 01 c0    	cmp    DWORD PTR ds:0xc001f190,eax
c000ef4e:	75 23                	jne    c000ef73 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef50:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c000ef55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef59:	89 06                	mov    DWORD PTR [esi],eax
c000ef5b:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c000ef60:	89 07                	mov    DWORD PTR [edi],eax
c000ef62:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000ef67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef6a:	a1 c0 2e 02 c0       	mov    eax,ds:0xc0022ec0
c000ef6f:	89 02                	mov    DWORD PTR [edx],eax
c000ef71:	eb 3f                	jmp    c000efb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef73:	31 c9                	xor    ecx,ecx
c000ef75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef79:	0f a2                	cpuid  
c000ef7b:	89 06                	mov    DWORD PTR [esi],eax
c000ef7d:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef83:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ef86:	89 10                	mov    DWORD PTR [eax],edx
c000ef88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef8c:	a3 90 f1 01 c0       	mov    ds:0xc001f190,eax
c000ef91:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef93:	a3 cc 2e 02 c0       	mov    ds:0xc0022ecc,eax
c000ef98:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef9a:	a3 c8 2e 02 c0       	mov    ds:0xc0022ec8,eax
c000ef9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efa2:	a3 c4 2e 02 c0       	mov    ds:0xc0022ec4,eax
c000efa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efab:	8b 00                	mov    eax,DWORD PTR [eax]
c000efad:	a3 c0 2e 02 c0       	mov    ds:0xc0022ec0,eax
c000efb2:	5b                   	pop    ebx
c000efb3:	5e                   	pop    esi
c000efb4:	5f                   	pop    edi
c000efb5:	5d                   	pop    ebp
c000efb6:	c3                   	ret    
c000efb7:	90                   	nop

c000efb8 <CPU::cpuidCheckEDX(unsigned int)>:
c000efb8:	83 ec 10             	sub    esp,0x10
c000efbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efbf:	50                   	push   eax
c000efc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc4:	50                   	push   eax
c000efc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc9:	50                   	push   eax
c000efca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efce:	50                   	push   eax
c000efcf:	6a 01                	push   0x1
c000efd1:	e8 5e ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efda:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000efde:	0f 95 c0             	setne  al
c000efe1:	83 c4 24             	add    esp,0x24
c000efe4:	c3                   	ret    
c000efe5:	90                   	nop

c000efe6 <CPU::cpuidCheckECX(unsigned int)>:
c000efe6:	83 ec 10             	sub    esp,0x10
c000efe9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efed:	50                   	push   eax
c000efee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff2:	50                   	push   eax
c000eff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff7:	50                   	push   eax
c000eff8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000effc:	50                   	push   eax
c000effd:	6a 01                	push   0x1
c000efff:	e8 30 ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f004:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f008:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f00c:	0f 95 c0             	setne  al
c000f00f:	83 c4 24             	add    esp,0x24
c000f012:	c3                   	ret    
c000f013:	90                   	nop

c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f014:	83 ec 10             	sub    esp,0x10
c000f017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01b:	50                   	push   eax
c000f01c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f020:	50                   	push   eax
c000f021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f025:	50                   	push   eax
c000f026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02a:	50                   	push   eax
c000f02b:	6a 07                	push   0x7
c000f02d:	e8 02 ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f032:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f036:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f03a:	0f 95 c0             	setne  al
c000f03d:	83 c4 24             	add    esp,0x24
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f042:	83 ec 10             	sub    esp,0x10
c000f045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f049:	50                   	push   eax
c000f04a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04e:	50                   	push   eax
c000f04f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f053:	50                   	push   eax
c000f054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f058:	50                   	push   eax
c000f059:	6a 07                	push   0x7
c000f05b:	e8 d4 fe ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f060:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f064:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f068:	0f 95 c0             	setne  al
c000f06b:	83 c4 24             	add    esp,0x24
c000f06e:	c3                   	ret    
c000f06f:	90                   	nop

c000f070 <CPU::CPU()>:
c000f070:	83 ec 0c             	sub    esp,0xc
c000f073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f077:	83 ec 08             	sub    esp,0x8
c000f07a:	68 99 e0 01 c0       	push   0xc001e099
c000f07f:	50                   	push   eax
c000f080:	e8 db c9 ff ff       	call   c000ba60 <Device::Device(char const*)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	ba 20 e1 01 c0       	mov    edx,0xc001e120
c000f08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f091:	89 10                	mov    DWORD PTR [eax],edx
c000f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f097:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a5:	05 78 01 00 00       	add    eax,0x178
c000f0aa:	83 ec 0c             	sub    esp,0xc
c000f0ad:	50                   	push   eax
c000f0ae:	e8 c7 7f ff ff       	call   c000707a <GDT::GDT()>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ba:	05 7c 09 00 00       	add    eax,0x97c
c000f0bf:	83 ec 0c             	sub    esp,0xc
c000f0c2:	50                   	push   eax
c000f0c3:	e8 ec 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f0c8:	83 c4 10             	add    esp,0x10
c000f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cf:	05 7c 11 00 00       	add    eax,0x117c
c000f0d4:	83 ec 0c             	sub    esp,0xc
c000f0d7:	50                   	push   eax
c000f0d8:	e8 9b 9a ff ff       	call   c0008b78 <TSS::TSS()>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ef:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f0f9:	90                   	nop
c000f0fa:	83 c4 0c             	add    esp,0xc
c000f0fd:	c3                   	ret    

c000f0fe <CPU::displayFeatures()>:
c000f0fe:	c3                   	ret    
c000f0ff:	90                   	nop

c000f100 <CPU::detectFeatures()>:
c000f100:	55                   	push   ebp
c000f101:	57                   	push   edi
c000f102:	56                   	push   esi
c000f103:	53                   	push   ebx
c000f104:	83 ec 30             	sub    esp,0x30
c000f107:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f10b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f115:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f11c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f122:	6a 0d                	push   0xd
c000f124:	6a 00                	push   0x0
c000f126:	55                   	push   ebp
c000f127:	e8 a4 13 ff ff       	call   c00004d0 <memset>
c000f12c:	83 c4 10             	add    esp,0x10
c000f12f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000f134:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f13b:	0f 84 d5 05 00 00    	je     c000f716 <CPU::detectFeatures()+0x616>
c000f141:	83 ec 0c             	sub    esp,0xc
c000f144:	89 ef                	mov    edi,ebp
c000f146:	6a 10                	push   0x10
c000f148:	e8 6b fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f14d:	83 e0 01             	and    eax,0x1
c000f150:	8d 14 00             	lea    edx,[eax+eax*1]
c000f153:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f159:	83 e0 fd             	and    eax,0xfffffffd
c000f15c:	09 d0                	or     eax,edx
c000f15e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f164:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f16b:	e8 48 fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f170:	83 e0 01             	and    eax,0x1
c000f173:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f17a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f180:	83 e0 fb             	and    eax,0xfffffffb
c000f183:	09 d0                	or     eax,edx
c000f185:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f18b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f192:	e8 21 fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f197:	83 e0 01             	and    eax,0x1
c000f19a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a7:	83 e0 f7             	and    eax,0xfffffff7
c000f1aa:	09 d0                	or     eax,edx
c000f1ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1b2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1b9:	e8 fa fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1be:	83 e0 01             	and    eax,0x1
c000f1c1:	c1 e0 04             	shl    eax,0x4
c000f1c4:	88 c2                	mov    dl,al
c000f1c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1cc:	83 e0 ef             	and    eax,0xffffffef
c000f1cf:	09 d0                	or     eax,edx
c000f1d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1d7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f1de:	e8 d5 fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1e3:	83 e0 01             	and    eax,0x1
c000f1e6:	c1 e0 05             	shl    eax,0x5
c000f1e9:	88 c2                	mov    dl,al
c000f1eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1f1:	83 e0 df             	and    eax,0xffffffdf
c000f1f4:	09 d0                	or     eax,edx
c000f1f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1fc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f203:	e8 b0 fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f208:	83 e0 01             	and    eax,0x1
c000f20b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f20e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f214:	83 e0 fd             	and    eax,0xfffffffd
c000f217:	09 d0                	or     eax,edx
c000f219:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f21f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f226:	e8 8d fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f22b:	83 e0 01             	and    eax,0x1
c000f22e:	c1 e0 06             	shl    eax,0x6
c000f231:	88 c2                	mov    dl,al
c000f233:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f239:	83 e0 bf             	and    eax,0xffffffbf
c000f23c:	09 d0                	or     eax,edx
c000f23e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f244:	58                   	pop    eax
c000f245:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f249:	50                   	push   eax
c000f24a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f24e:	50                   	push   eax
c000f24f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f253:	56                   	push   esi
c000f254:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f258:	50                   	push   eax
c000f259:	6a 00                	push   0x0
c000f25b:	e8 d4 fc ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f260:	b8 04 00 00 00       	mov    eax,0x4
c000f265:	89 c1                	mov    ecx,eax
c000f267:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f269:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f26f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f273:	89 c1                	mov    ecx,eax
c000f275:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f277:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f27d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f281:	89 c1                	mov    ecx,eax
c000f283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f285:	83 c4 18             	add    esp,0x18
c000f288:	68 a8 df 01 c0       	push   0xc001dfa8
c000f28d:	55                   	push   ebp
c000f28e:	e8 4d 14 ff ff       	call   c00006e0 <strcmp>
c000f293:	83 c4 10             	add    esp,0x10
c000f296:	85 c0                	test   eax,eax
c000f298:	75 0f                	jne    c000f2a9 <CPU::detectFeatures()+0x1a9>
c000f29a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2a4:	e9 22 02 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f2a9:	50                   	push   eax
c000f2aa:	50                   	push   eax
c000f2ab:	68 b5 df 01 c0       	push   0xc001dfb5
c000f2b0:	55                   	push   ebp
c000f2b1:	e8 2a 14 ff ff       	call   c00006e0 <strcmp>
c000f2b6:	83 c4 10             	add    esp,0x10
c000f2b9:	85 c0                	test   eax,eax
c000f2bb:	74 dd                	je     c000f29a <CPU::detectFeatures()+0x19a>
c000f2bd:	50                   	push   eax
c000f2be:	50                   	push   eax
c000f2bf:	68 c2 df 01 c0       	push   0xc001dfc2
c000f2c4:	55                   	push   ebp
c000f2c5:	e8 16 14 ff ff       	call   c00006e0 <strcmp>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	85 c0                	test   eax,eax
c000f2cf:	74 2a                	je     c000f2fb <CPU::detectFeatures()+0x1fb>
c000f2d1:	50                   	push   eax
c000f2d2:	50                   	push   eax
c000f2d3:	68 cf df 01 c0       	push   0xc001dfcf
c000f2d8:	55                   	push   ebp
c000f2d9:	e8 02 14 ff ff       	call   c00006e0 <strcmp>
c000f2de:	83 c4 10             	add    esp,0x10
c000f2e1:	85 c0                	test   eax,eax
c000f2e3:	74 16                	je     c000f2fb <CPU::detectFeatures()+0x1fb>
c000f2e5:	50                   	push   eax
c000f2e6:	50                   	push   eax
c000f2e7:	68 dc df 01 c0       	push   0xc001dfdc
c000f2ec:	55                   	push   ebp
c000f2ed:	e8 ee 13 ff ff       	call   c00006e0 <strcmp>
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	85 c0                	test   eax,eax
c000f2f7:	74 48                	je     c000f341 <CPU::detectFeatures()+0x241>
c000f2f9:	eb 0f                	jmp    c000f30a <CPU::detectFeatures()+0x20a>
c000f2fb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f305:	e9 c1 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f30a:	50                   	push   eax
c000f30b:	50                   	push   eax
c000f30c:	68 e9 df 01 c0       	push   0xc001dfe9
c000f311:	55                   	push   ebp
c000f312:	e8 c9 13 ff ff       	call   c00006e0 <strcmp>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	85 c0                	test   eax,eax
c000f31c:	74 23                	je     c000f341 <CPU::detectFeatures()+0x241>
c000f31e:	57                   	push   edi
c000f31f:	57                   	push   edi
c000f320:	68 f6 df 01 c0       	push   0xc001dff6
c000f325:	55                   	push   ebp
c000f326:	e8 b5 13 ff ff       	call   c00006e0 <strcmp>
c000f32b:	83 c4 10             	add    esp,0x10
c000f32e:	85 c0                	test   eax,eax
c000f330:	75 1e                	jne    c000f350 <CPU::detectFeatures()+0x250>
c000f332:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f33c:	e9 8a 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f341:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f34b:	e9 7b 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f350:	56                   	push   esi
c000f351:	56                   	push   esi
c000f352:	68 03 e0 01 c0       	push   0xc001e003
c000f357:	55                   	push   ebp
c000f358:	e8 83 13 ff ff       	call   c00006e0 <strcmp>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	85 c0                	test   eax,eax
c000f362:	75 0f                	jne    c000f373 <CPU::detectFeatures()+0x273>
c000f364:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f36e:	e9 58 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f373:	51                   	push   ecx
c000f374:	51                   	push   ecx
c000f375:	68 c2 df 01 c0       	push   0xc001dfc2
c000f37a:	55                   	push   ebp
c000f37b:	e8 60 13 ff ff       	call   c00006e0 <strcmp>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	85 c0                	test   eax,eax
c000f385:	75 0f                	jne    c000f396 <CPU::detectFeatures()+0x296>
c000f387:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f391:	e9 35 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f396:	52                   	push   edx
c000f397:	52                   	push   edx
c000f398:	68 10 e0 01 c0       	push   0xc001e010
c000f39d:	55                   	push   ebp
c000f39e:	e8 3d 13 ff ff       	call   c00006e0 <strcmp>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	85 c0                	test   eax,eax
c000f3a8:	75 0f                	jne    c000f3b9 <CPU::detectFeatures()+0x2b9>
c000f3aa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3b4:	e9 12 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3b9:	50                   	push   eax
c000f3ba:	50                   	push   eax
c000f3bb:	68 1d e0 01 c0       	push   0xc001e01d
c000f3c0:	55                   	push   ebp
c000f3c1:	e8 1a 13 ff ff       	call   c00006e0 <strcmp>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	85 c0                	test   eax,eax
c000f3cb:	75 0f                	jne    c000f3dc <CPU::detectFeatures()+0x2dc>
c000f3cd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f3d7:	e9 ef 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3dc:	50                   	push   eax
c000f3dd:	50                   	push   eax
c000f3de:	68 2a e0 01 c0       	push   0xc001e02a
c000f3e3:	55                   	push   ebp
c000f3e4:	e8 f7 12 ff ff       	call   c00006e0 <strcmp>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	85 c0                	test   eax,eax
c000f3ee:	75 0f                	jne    c000f3ff <CPU::detectFeatures()+0x2ff>
c000f3f0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f3fa:	e9 cc 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3ff:	50                   	push   eax
c000f400:	50                   	push   eax
c000f401:	68 37 e0 01 c0       	push   0xc001e037
c000f406:	55                   	push   ebp
c000f407:	e8 d4 12 ff ff       	call   c00006e0 <strcmp>
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 0f                	jne    c000f422 <CPU::detectFeatures()+0x322>
c000f413:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f41d:	e9 a9 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f422:	50                   	push   eax
c000f423:	50                   	push   eax
c000f424:	68 44 e0 01 c0       	push   0xc001e044
c000f429:	55                   	push   ebp
c000f42a:	e8 b1 12 ff ff       	call   c00006e0 <strcmp>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	85 c0                	test   eax,eax
c000f434:	75 0f                	jne    c000f445 <CPU::detectFeatures()+0x345>
c000f436:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f440:	e9 86 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f445:	50                   	push   eax
c000f446:	50                   	push   eax
c000f447:	68 51 e0 01 c0       	push   0xc001e051
c000f44c:	55                   	push   ebp
c000f44d:	e8 8e 12 ff ff       	call   c00006e0 <strcmp>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	85 c0                	test   eax,eax
c000f457:	75 0c                	jne    c000f465 <CPU::detectFeatures()+0x365>
c000f459:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f463:	eb 66                	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f465:	50                   	push   eax
c000f466:	50                   	push   eax
c000f467:	68 5e e0 01 c0       	push   0xc001e05e
c000f46c:	55                   	push   ebp
c000f46d:	e8 6e 12 ff ff       	call   c00006e0 <strcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	75 0c                	jne    c000f485 <CPU::detectFeatures()+0x385>
c000f479:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f483:	eb 46                	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f485:	57                   	push   edi
c000f486:	57                   	push   edi
c000f487:	68 6b e0 01 c0       	push   0xc001e06b
c000f48c:	55                   	push   ebp
c000f48d:	e8 4e 12 ff ff       	call   c00006e0 <strcmp>
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	85 c0                	test   eax,eax
c000f497:	74 e0                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f499:	56                   	push   esi
c000f49a:	56                   	push   esi
c000f49b:	68 78 e0 01 c0       	push   0xc001e078
c000f4a0:	55                   	push   ebp
c000f4a1:	e8 3a 12 ff ff       	call   c00006e0 <strcmp>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	74 cc                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f4ad:	51                   	push   ecx
c000f4ae:	51                   	push   ecx
c000f4af:	68 85 e0 01 c0       	push   0xc001e085
c000f4b4:	55                   	push   ebp
c000f4b5:	e8 26 12 ff ff       	call   c00006e0 <strcmp>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	85 c0                	test   eax,eax
c000f4bf:	74 b8                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f4c1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f4cb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f4d0:	0f 86 be 00 00 00    	jbe    c000f594 <CPU::detectFeatures()+0x494>
c000f4d6:	83 ec 0c             	sub    esp,0xc
c000f4d9:	68 80 00 00 00       	push   0x80
c000f4de:	e8 31 fb ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4e3:	83 e0 01             	and    eax,0x1
c000f4e6:	c1 e0 06             	shl    eax,0x6
c000f4e9:	88 c2                	mov    dl,al
c000f4eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4f1:	83 e0 bf             	and    eax,0xffffffbf
c000f4f4:	09 d0                	or     eax,edx
c000f4f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4fc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f503:	e8 0c fb ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f508:	83 e0 01             	and    eax,0x1
c000f50b:	c1 e0 04             	shl    eax,0x4
c000f50e:	88 c2                	mov    dl,al
c000f510:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f516:	83 e0 ef             	and    eax,0xffffffef
c000f519:	09 d0                	or     eax,edx
c000f51b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f521:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f528:	e8 e7 fa ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f52d:	c1 e0 07             	shl    eax,0x7
c000f530:	88 c2                	mov    dl,al
c000f532:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f538:	83 e0 7f             	and    eax,0x7f
c000f53b:	09 d0                	or     eax,edx
c000f53d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f543:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f54a:	e8 f3 fa ff ff       	call   c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f54f:	83 e0 01             	and    eax,0x1
c000f552:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f559:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f55f:	83 e0 f7             	and    eax,0xfffffff7
c000f562:	09 d0                	or     eax,edx
c000f564:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f56a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f571:	e8 cc fa ff ff       	call   c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	83 e0 01             	and    eax,0x1
c000f57c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f583:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f589:	83 e0 fb             	and    eax,0xfffffffb
c000f58c:	09 d0                	or     eax,edx
c000f58e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f594:	83 ec 0c             	sub    esp,0xc
c000f597:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f59b:	50                   	push   eax
c000f59c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5a0:	50                   	push   eax
c000f5a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5a5:	56                   	push   esi
c000f5a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5aa:	50                   	push   eax
c000f5ab:	6a 01                	push   0x1
c000f5ad:	e8 82 f9 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5b2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5b6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5bc:	88 ca                	mov    dl,cl
c000f5be:	83 e0 f0             	and    eax,0xfffffff0
c000f5c1:	83 e2 0f             	and    edx,0xf
c000f5c4:	09 d0                	or     eax,edx
c000f5c6:	88 ca                	mov    dl,cl
c000f5c8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f5ce:	c0 ea 04             	shr    dl,0x4
c000f5d1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f5d5:	0f b6 c2             	movzx  eax,dl
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	c1 e0 06             	shl    eax,0x6
c000f5de:	89 c7                	mov    edi,eax
c000f5e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f5e6:	66 25 3f c0          	and    ax,0xc03f
c000f5ea:	09 f8                	or     eax,edi
c000f5ec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f5f3:	89 c8                	mov    eax,ecx
c000f5f5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f5fc:	c1 e8 08             	shr    eax,0x8
c000f5ff:	83 e5 3f             	and    ebp,0x3f
c000f602:	83 e0 0f             	and    eax,0xf
c000f605:	89 c7                	mov    edi,eax
c000f607:	c1 e7 06             	shl    edi,0x6
c000f60a:	09 ef                	or     edi,ebp
c000f60c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f613:	89 fa                	mov    edx,edi
c000f615:	83 e5 c0             	and    ebp,0xffffffc0
c000f618:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f61e:	88 c2                	mov    dl,al
c000f620:	c0 ea 02             	shr    dl,0x2
c000f623:	89 d7                	mov    edi,edx
c000f625:	09 ef                	or     edi,ebp
c000f627:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f62d:	89 fa                	mov    edx,edi
c000f62f:	83 e5 cf             	and    ebp,0xffffffcf
c000f632:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f638:	89 cf                	mov    edi,ecx
c000f63a:	c1 ef 0c             	shr    edi,0xc
c000f63d:	83 e7 03             	and    edi,0x3
c000f640:	c1 e7 04             	shl    edi,0x4
c000f643:	09 ef                	or     edi,ebp
c000f645:	3c 06                	cmp    al,0x6
c000f647:	89 fa                	mov    edx,edi
c000f649:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f64f:	74 04                	je     c000f655 <CPU::detectFeatures()+0x555>
c000f651:	3c 0f                	cmp    al,0xf
c000f653:	75 5c                	jne    c000f6b1 <CPU::detectFeatures()+0x5b1>
c000f655:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f659:	89 cf                	mov    edi,ecx
c000f65b:	c1 ef 10             	shr    edi,0x10
c000f65e:	c1 e7 04             	shl    edi,0x4
c000f661:	09 fa                	or     edx,edi
c000f663:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f669:	0f b6 d2             	movzx  edx,dl
c000f66c:	66 81 e7 3f c0       	and    di,0xc03f
c000f671:	c1 e2 06             	shl    edx,0x6
c000f674:	09 fa                	or     edx,edi
c000f676:	3c 0f                	cmp    al,0xf
c000f678:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f67f:	75 30                	jne    c000f6b1 <CPU::detectFeatures()+0x5b1>
c000f681:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f687:	c1 e9 14             	shr    ecx,0x14
c000f68a:	83 e0 3f             	and    eax,0x3f
c000f68d:	83 c1 0f             	add    ecx,0xf
c000f690:	88 ca                	mov    dl,cl
c000f692:	c0 e9 02             	shr    cl,0x2
c000f695:	c1 e2 06             	shl    edx,0x6
c000f698:	09 d0                	or     eax,edx
c000f69a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6a0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6a6:	83 e0 c0             	and    eax,0xffffffc0
c000f6a9:	09 c1                	or     ecx,eax
c000f6ab:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6b1:	83 ec 0c             	sub    esp,0xc
c000f6b4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6bf:	50                   	push   eax
c000f6c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6c4:	55                   	push   ebp
c000f6c5:	56                   	push   esi
c000f6c6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f6ca:	57                   	push   edi
c000f6cb:	68 00 00 00 80       	push   0x80000000
c000f6d0:	e8 5f f8 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6d5:	83 c4 20             	add    esp,0x20
c000f6d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f6e0:	76 22                	jbe    c000f704 <CPU::detectFeatures()+0x604>
c000f6e2:	83 ec 0c             	sub    esp,0xc
c000f6e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6e9:	50                   	push   eax
c000f6ea:	55                   	push   ebp
c000f6eb:	56                   	push   esi
c000f6ec:	57                   	push   edi
c000f6ed:	68 01 00 00 80       	push   0x80000001
c000f6f2:	e8 3d f8 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f7:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f701:	83 c4 20             	add    esp,0x20
c000f704:	52                   	push   edx
c000f705:	52                   	push   edx
c000f706:	68 91 e0 01 c0       	push   0xc001e091
c000f70b:	53                   	push   ebx
c000f70c:	e8 41 c3 ff ff       	call   c000ba52 <Device::setName(char const*)>
c000f711:	83 c4 10             	add    esp,0x10
c000f714:	eb 67                	jmp    c000f77d <CPU::detectFeatures()+0x67d>
c000f716:	50                   	push   eax
c000f717:	50                   	push   eax
c000f718:	68 f6 df 01 c0       	push   0xc001dff6
c000f71d:	55                   	push   ebp
c000f71e:	e8 dd 0e ff ff       	call   c0000600 <strcpy>
c000f723:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f72d:	e8 91 0a ff ff       	call   c00001c3 <is486>
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	85 c0                	test   eax,eax
c000f737:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f73d:	74 1d                	je     c000f75c <CPU::detectFeatures()+0x65c>
c000f73f:	83 c8 07             	or     eax,0x7
c000f742:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f748:	0f 20 c0             	mov    eax,cr0
c000f74b:	83 e0 14             	and    eax,0x14
c000f74e:	83 f8 04             	cmp    eax,0x4
c000f751:	75 0e                	jne    c000f761 <CPU::detectFeatures()+0x661>
c000f753:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f75a:	eb 21                	jmp    c000f77d <CPU::detectFeatures()+0x67d>
c000f75c:	83 e0 f8             	and    eax,0xfffffff8
c000f75f:	eb e1                	jmp    c000f742 <CPU::detectFeatures()+0x642>
c000f761:	e8 38 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f766:	83 e0 01             	and    eax,0x1
c000f769:	8d 14 00             	lea    edx,[eax+eax*1]
c000f76c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f772:	83 e0 fd             	and    eax,0xfffffffd
c000f775:	09 d0                	or     eax,edx
c000f777:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f77d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f784:	74 0e                	je     c000f794 <CPU::detectFeatures()+0x694>
c000f786:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000f78b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f792:	eb 20                	jmp    c000f7b4 <CPU::detectFeatures()+0x6b4>
c000f794:	e8 05 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f799:	83 e0 01             	and    eax,0x1
c000f79c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f79f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7a5:	83 e0 fd             	and    eax,0xfffffffd
c000f7a8:	09 d0                	or     eax,edx
c000f7aa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7b0:	a8 02                	test   al,0x2
c000f7b2:	75 d2                	jne    c000f786 <CPU::detectFeatures()+0x686>
c000f7b4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7bb:	83 c4 2c             	add    esp,0x2c
c000f7be:	5b                   	pop    ebx
c000f7bf:	5e                   	pop    esi
c000f7c0:	5f                   	pop    edi
c000f7c1:	5d                   	pop    ebp
c000f7c2:	c3                   	ret    
c000f7c3:	90                   	nop

c000f7c4 <CPU::setupSMEP()>:
c000f7c4:	0f 20 e0             	mov    eax,cr4
c000f7c7:	0d 00 00 10 00       	or     eax,0x100000
c000f7cc:	0f 22 e0             	mov    cr4,eax
c000f7cf:	c3                   	ret    

c000f7d0 <CPU::setupUMIP()>:
c000f7d0:	0f 20 e0             	mov    eax,cr4
c000f7d3:	80 cc 08             	or     ah,0x8
c000f7d6:	0f 22 e0             	mov    cr4,eax
c000f7d9:	c3                   	ret    

c000f7da <CPU::setupTSC()>:
c000f7da:	0f 20 e0             	mov    eax,cr4
c000f7dd:	83 c8 04             	or     eax,0x4
c000f7e0:	0f 22 e0             	mov    cr4,eax
c000f7e3:	c3                   	ret    

c000f7e4 <CPU::setupLargePages()>:
c000f7e4:	0f 20 e0             	mov    eax,cr4
c000f7e7:	83 c8 10             	or     eax,0x10
c000f7ea:	0f 22 e0             	mov    cr4,eax
c000f7ed:	c3                   	ret    

c000f7ee <CPU::setupPAT()>:
c000f7ee:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c000f7f3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f7fa:	74 2c                	je     c000f828 <CPU::setupPAT()+0x3a>
c000f7fc:	53                   	push   ebx
c000f7fd:	83 ec 10             	sub    esp,0x10
c000f800:	68 77 02 00 00       	push   0x277
c000f805:	50                   	push   eax
c000f806:	e8 e7 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f80b:	83 e2 f8             	and    edx,0xfffffff8
c000f80e:	83 ca 01             	or     edx,0x1
c000f811:	52                   	push   edx
c000f812:	50                   	push   eax
c000f813:	68 77 02 00 00       	push   0x277
c000f818:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c000f81e:	e8 fb 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f823:	83 c4 28             	add    esp,0x28
c000f826:	5b                   	pop    ebx
c000f827:	c3                   	ret    
c000f828:	c3                   	ret    
c000f829:	90                   	nop

c000f82a <CPU::setupMTRR()>:
c000f82a:	c3                   	ret    
c000f82b:	90                   	nop

c000f82c <CPU::setupGlobalPages()>:
c000f82c:	0f 20 e0             	mov    eax,cr4
c000f82f:	0c 80                	or     al,0x80
c000f831:	0f 22 e0             	mov    cr4,eax
c000f834:	c3                   	ret    
c000f835:	90                   	nop

c000f836 <CPU::allowUsermodeDataAccess()>:
c000f836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f83a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f841:	74 03                	je     c000f846 <CPU::allowUsermodeDataAccess()+0x10>
c000f843:	0f 01 cb             	stac   
c000f846:	c3                   	ret    
c000f847:	90                   	nop

c000f848 <CPU::prohibitUsermodeDataAccess()>:
c000f848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f84c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f853:	74 03                	je     c000f858 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f855:	0f 01 ca             	clac   
c000f858:	c3                   	ret    
c000f859:	90                   	nop

c000f85a <CPU::setupSMAP()>:
c000f85a:	0f 20 e0             	mov    eax,cr4
c000f85d:	0d 00 00 20 00       	or     eax,0x200000
c000f862:	0f 22 e0             	mov    cr4,eax
c000f865:	eb e1                	jmp    c000f848 <CPU::prohibitUsermodeDataAccess()>
c000f867:	90                   	nop

c000f868 <CPU::setupFeatures()>:
c000f868:	53                   	push   ebx
c000f869:	83 ec 08             	sub    esp,0x8
c000f86c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f870:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f877:	74 18                	je     c000f891 <CPU::setupFeatures()+0x29>
c000f879:	83 ec 0c             	sub    esp,0xc
c000f87c:	68 9d e0 01 c0       	push   0xc001e09d
c000f881:	e8 02 ac ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000f886:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f889:	e8 42 ff ff ff       	call   c000f7d0 <CPU::setupUMIP()>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f898:	74 18                	je     c000f8b2 <CPU::setupFeatures()+0x4a>
c000f89a:	83 ec 0c             	sub    esp,0xc
c000f89d:	68 a7 e0 01 c0       	push   0xc001e0a7
c000f8a2:	e8 e1 ab ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000f8a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8aa:	e8 2b ff ff ff       	call   c000f7da <CPU::setupTSC()>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8b9:	74 18                	je     c000f8d3 <CPU::setupFeatures()+0x6b>
c000f8bb:	83 ec 0c             	sub    esp,0xc
c000f8be:	68 b0 e0 01 c0       	push   0xc001e0b0
c000f8c3:	e8 c0 ab ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000f8c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8cb:	e8 14 ff ff ff       	call   c000f7e4 <CPU::setupLargePages()>
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f8da:	74 18                	je     c000f8f4 <CPU::setupFeatures()+0x8c>
c000f8dc:	83 ec 0c             	sub    esp,0xc
c000f8df:	68 b9 e0 01 c0       	push   0xc001e0b9
c000f8e4:	e8 9f ab ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000f8e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ec:	e8 3b ff ff ff       	call   c000f82c <CPU::setupGlobalPages()>
c000f8f1:	83 c4 10             	add    esp,0x10
c000f8f4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f8fb:	74 18                	je     c000f915 <CPU::setupFeatures()+0xad>
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	68 cb e0 01 c0       	push   0xc001e0cb
c000f905:	e8 7e ab ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c000f90a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f90d:	e8 dc fe ff ff       	call   c000f7ee <CPU::setupPAT()>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f91c:	74 11                	je     c000f92f <CPU::setupFeatures()+0xc7>
c000f91e:	c7 44 24 10 d4 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e0d4
c000f926:	83 c4 08             	add    esp,0x8
c000f929:	5b                   	pop    ebx
c000f92a:	e9 59 ab ff ff       	jmp    c000a488 <Dbg::kprintf(char const*, ...)>
c000f92f:	83 c4 08             	add    esp,0x8
c000f932:	5b                   	pop    ebx
c000f933:	c3                   	ret    

c000f934 <CPU::open(int, int, void*)>:
c000f934:	57                   	push   edi
c000f935:	56                   	push   esi
c000f936:	53                   	push   ebx
c000f937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f93b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f945:	83 ec 0c             	sub    esp,0xc
c000f948:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f94e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f954:	50                   	push   eax
c000f955:	e8 82 77 ff ff       	call   c00070dc <GDT::setup()>
c000f95a:	83 c4 0c             	add    esp,0xc
c000f95d:	6a 00                	push   0x0
c000f95f:	68 ef be ad de       	push   0xdeadbeef
c000f964:	57                   	push   edi
c000f965:	e8 52 92 ff ff       	call   c0008bbc <TSS::setup(unsigned long, unsigned long)>
c000f96a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f96d:	e8 2a 92 ff ff       	call   c0008b9c <TSS::flush()>
c000f972:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f978:	89 04 24             	mov    DWORD PTR [esp],eax
c000f97b:	e8 aa 79 ff ff       	call   c000732a <IDT::setup()>
c000f980:	b8 00 04 00 00       	mov    eax,0x400
c000f985:	0f 23 f8             	mov    db7,eax
c000f988:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f992:	e8 fe 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f997:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f99d:	89 30                	mov    DWORD PTR [eax],esi
c000f99f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9a8:	58                   	pop    eax
c000f9a9:	5a                   	pop    edx
c000f9aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9b4:	e8 ed a1 ff ff       	call   c0009ba6 <VAS::setCPUSpecific(unsigned long)>
c000f9b9:	c7 04 24 de e0 01 c0 	mov    DWORD PTR [esp],0xc001e0de
c000f9c0:	e8 c6 00 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000f9c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9c8:	e8 33 f7 ff ff       	call   c000f100 <CPU::detectFeatures()>
c000f9cd:	c7 04 24 01 e1 01 c0 	mov    DWORD PTR [esp],0xc001e101
c000f9d4:	e8 b2 00 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000f9d9:	e8 42 58 00 00       	call   c0015220 <HalInitialise()>
c000f9de:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c000f9e3:	83 e0 10             	and    eax,0x10
c000f9e6:	83 f8 01             	cmp    eax,0x1
c000f9e9:	19 c0                	sbb    eax,eax
c000f9eb:	83 e0 46             	and    eax,0x46
c000f9ee:	83 c0 1e             	add    eax,0x1e
c000f9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9f4:	e8 40 d7 ff ff       	call   c000d139 <setupTimer(int)>
c000f9f9:	83 c4 10             	add    esp,0x10
c000f9fc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa02:	f6 05 70 04 02 c0 20 	test   BYTE PTR ds:0xc0020470,0x20
c000fa09:	74 0c                	je     c000fa17 <CPU::open(int, int, void*)+0xe3>
c000fa0b:	83 ec 0c             	sub    esp,0xc
c000fa0e:	53                   	push   ebx
c000fa0f:	e8 54 fe ff ff       	call   c000f868 <CPU::setupFeatures()>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	5b                   	pop    ebx
c000fa18:	31 c0                	xor    eax,eax
c000fa1a:	5e                   	pop    esi
c000fa1b:	5f                   	pop    edi
c000fa1c:	c3                   	ret    

c000fa1d <KeDisplaySplashScreen()>:
c000fa1d:	55                   	push   ebp
c000fa1e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa23:	57                   	push   edi
c000fa24:	bf a0 f1 01 c0       	mov    edi,0xc001f1a0
c000fa29:	56                   	push   esi
c000fa2a:	be 0a 00 00 00       	mov    esi,0xa
c000fa2f:	53                   	push   ebx
c000fa30:	31 db                	xor    ebx,ebx
c000fa32:	83 ec 0c             	sub    esp,0xc
c000fa35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa38:	84 c0                	test   al,al
c000fa3a:	74 47                	je     c000fa83 <KeDisplaySplashScreen()+0x66>
c000fa3c:	80 bb d6 f1 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0e2a],0xdb
c000fa43:	75 13                	jne    c000fa58 <KeDisplaySplashScreen()+0x3b>
c000fa45:	0f b6 93 d5 f1 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0e2b]
c000fa4c:	83 e2 fe             	and    edx,0xfffffffe
c000fa4f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa55:	75 01                	jne    c000fa58 <KeDisplaySplashScreen()+0x3b>
c000fa57:	46                   	inc    esi
c000fa58:	3c 0d                	cmp    al,0xd
c000fa5a:	74 24                	je     c000fa80 <KeDisplaySplashScreen()+0x63>
c000fa5c:	3c 0a                	cmp    al,0xa
c000fa5e:	75 0a                	jne    c000fa6a <KeDisplaySplashScreen()+0x4d>
c000fa60:	45                   	inc    ebp
c000fa61:	be 0a 00 00 00       	mov    esi,0xa
c000fa66:	31 db                	xor    ebx,ebx
c000fa68:	eb 16                	jmp    c000fa80 <KeDisplaySplashScreen()+0x63>
c000fa6a:	83 ec 0c             	sub    esp,0xc
c000fa6d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa70:	55                   	push   ebp
c000fa71:	43                   	inc    ebx
c000fa72:	52                   	push   edx
c000fa73:	6a 00                	push   0x0
c000fa75:	6a 0e                	push   0xe
c000fa77:	50                   	push   eax
c000fa78:	e8 07 64 00 00       	call   c0015e84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa7d:	83 c4 20             	add    esp,0x20
c000fa80:	47                   	inc    edi
c000fa81:	eb b2                	jmp    c000fa35 <KeDisplaySplashScreen()+0x18>
c000fa83:	83 c4 0c             	add    esp,0xc
c000fa86:	5b                   	pop    ebx
c000fa87:	5e                   	pop    esi
c000fa88:	5f                   	pop    edi
c000fa89:	5d                   	pop    ebp
c000fa8a:	c3                   	ret    

c000fa8b <KeSetBootMessage(char const*)>:
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa94:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa9b:	68 9e 00 00 00       	push   0x9e
c000faa0:	6a 00                	push   0x0
c000faa2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000faa6:	56                   	push   esi
c000faa7:	e8 24 0a ff ff       	call   c00004d0 <memset>
c000faac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faaf:	e8 8c 0a ff ff       	call   c0000540 <strlen>
c000fab4:	ba 50 00 00 00       	mov    edx,0x50
c000fab9:	83 c4 10             	add    esp,0x10
c000fabc:	29 c2                	sub    edx,eax
c000fabe:	31 c9                	xor    ecx,ecx
c000fac0:	83 e2 fe             	and    edx,0xfffffffe
c000fac3:	01 f2                	add    edx,esi
c000fac5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000faca:	84 c0                	test   al,al
c000facc:	74 0a                	je     c000fad8 <KeSetBootMessage(char const*)+0x4d>
c000face:	80 cc 0f             	or     ah,0xf
c000fad1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fad5:	41                   	inc    ecx
c000fad6:	eb ed                	jmp    c000fac5 <KeSetBootMessage(char const*)+0x3a>
c000fad8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fadd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fae2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fae4:	81 c4 a0 00 00 00    	add    esp,0xa0
c000faea:	5b                   	pop    ebx
c000faeb:	5e                   	pop    esi
c000faec:	5f                   	pop    edi
c000faed:	c3                   	ret    

c000faee <EnvVarContainer::getEnv(char const*)>:
c000faee:	57                   	push   edi
c000faef:	56                   	push   esi
c000faf0:	53                   	push   ebx
c000faf1:	31 db                	xor    ebx,ebx
c000faf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000faf7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000faf9:	7e 2b                	jle    c000fb26 <EnvVarContainer::getEnv(char const*)+0x38>
c000fafb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb02:	50                   	push   eax
c000fb03:	50                   	push   eax
c000fb04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb07:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb0e:	e8 cd 0b ff ff       	call   c00006e0 <strcmp>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	85 c0                	test   eax,eax
c000fb18:	75 09                	jne    c000fb23 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb1d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb21:	eb 05                	jmp    c000fb28 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb23:	43                   	inc    ebx
c000fb24:	eb d1                	jmp    c000faf7 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb26:	31 c0                	xor    eax,eax
c000fb28:	5b                   	pop    ebx
c000fb29:	5e                   	pop    esi
c000fb2a:	5f                   	pop    edi
c000fb2b:	c3                   	ret    

c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb2c:	55                   	push   ebp
c000fb2d:	57                   	push   edi
c000fb2e:	56                   	push   esi
c000fb2f:	53                   	push   ebx
c000fb30:	83 ec 28             	sub    esp,0x28
c000fb33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb37:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb3f:	56                   	push   esi
c000fb40:	e8 fb 09 ff ff       	call   c0000540 <strlen>
c000fb45:	40                   	inc    eax
c000fb46:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb49:	e8 6b 7c ff ff       	call   c00077b9 <malloc>
c000fb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb55:	e8 e6 09 ff ff       	call   c0000540 <strlen>
c000fb5a:	40                   	inc    eax
c000fb5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5e:	e8 56 7c ff ff       	call   c00077b9 <malloc>
c000fb63:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb6a:	e8 d1 09 ff ff       	call   c0000540 <strlen>
c000fb6f:	83 c4 0c             	add    esp,0xc
c000fb72:	40                   	inc    eax
c000fb73:	50                   	push   eax
c000fb74:	6a 00                	push   0x0
c000fb76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb7a:	e8 51 09 ff ff       	call   c00004d0 <memset>
c000fb7f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb82:	e8 b9 09 ff ff       	call   c0000540 <strlen>
c000fb87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb8b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb93:	89 de                	mov    esi,ebx
c000fb95:	e8 a6 09 ff ff       	call   c0000540 <strlen>
c000fb9a:	83 c4 0c             	add    esp,0xc
c000fb9d:	40                   	inc    eax
c000fb9e:	50                   	push   eax
c000fb9f:	6a 00                	push   0x0
c000fba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fba5:	e8 26 09 ff ff       	call   c00004d0 <memset>
c000fbaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbad:	e8 8e 09 ff ff       	call   c0000540 <strlen>
c000fbb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbb6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbbe:	40                   	inc    eax
c000fbbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbc2:	c1 e0 03             	shl    eax,0x3
c000fbc5:	5a                   	pop    edx
c000fbc6:	59                   	pop    ecx
c000fbc7:	50                   	push   eax
c000fbc8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fbcb:	e8 d5 7b ff ff       	call   c00077a5 <realloc>
c000fbd0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fbd4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fbd7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fbda:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fbde:	b9 08 00 00 00       	mov    ecx,0x8
c000fbe3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe5:	83 c4 2c             	add    esp,0x2c
c000fbe8:	5b                   	pop    ebx
c000fbe9:	5e                   	pop    esi
c000fbea:	5f                   	pop    edi
c000fbeb:	5d                   	pop    ebp
c000fbec:	c3                   	ret    
c000fbed:	90                   	nop

c000fbee <EnvVarContainer::deleteEnv(char const*)>:
c000fbee:	c3                   	ret    
c000fbef:	90                   	nop

c000fbf0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fbf0:	55                   	push   ebp
c000fbf1:	57                   	push   edi
c000fbf2:	56                   	push   esi
c000fbf3:	53                   	push   ebx
c000fbf4:	81 ec 38 01 00 00    	sub    esp,0x138
c000fbfa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc01:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc08:	68 14 01 00 00       	push   0x114
c000fc0d:	e8 a7 7b ff ff       	call   c00077b9 <malloc>
c000fc12:	83 c4 0c             	add    esp,0xc
c000fc15:	89 c3                	mov    ebx,eax
c000fc17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc1a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc21:	50                   	push   eax
c000fc22:	e8 d7 ad ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c000fc27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc2a:	e8 fd b0 ff ff       	call   c000ad2c <File::exists()>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	84 c0                	test   al,al
c000fc34:	75 31                	jne    c000fc67 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc36:	50                   	push   eax
c000fc37:	50                   	push   eax
c000fc38:	6a 12                	push   0x12
c000fc3a:	53                   	push   ebx
c000fc3b:	e8 7e ae ff ff       	call   c000aabe <File::open(FileOpenMode)>
c000fc40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc45:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc48:	e8 f3 08 ff ff       	call   c0000540 <strlen>
c000fc4d:	5a                   	pop    edx
c000fc4e:	31 d2                	xor    edx,edx
c000fc50:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc54:	51                   	push   ecx
c000fc55:	56                   	push   esi
c000fc56:	52                   	push   edx
c000fc57:	50                   	push   eax
c000fc58:	53                   	push   ebx
c000fc59:	ff d7                	call   edi
c000fc5b:	83 c4 14             	add    esp,0x14
c000fc5e:	53                   	push   ebx
c000fc5f:	e8 b8 ae ff ff       	call   c000ab1c <File::close()>
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	56                   	push   esi
c000fc68:	31 f6                	xor    esi,esi
c000fc6a:	68 00 01 00 00       	push   0x100
c000fc6f:	6a 00                	push   0x0
c000fc71:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc75:	50                   	push   eax
c000fc76:	e8 55 08 ff ff       	call   c00004d0 <memset>
c000fc7b:	5f                   	pop    edi
c000fc7c:	58                   	pop    eax
c000fc7d:	6a 01                	push   0x1
c000fc7f:	53                   	push   ebx
c000fc80:	e8 39 ae ff ff       	call   c000aabe <File::open(FileOpenMode)>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc95:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc99:	51                   	push   ecx
c000fc9a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fc9e:	52                   	push   edx
c000fc9f:	6a 00                	push   0x0
c000fca1:	6a 01                	push   0x1
c000fca3:	53                   	push   ebx
c000fca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fca7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fcab:	83 c4 20             	add    esp,0x20
c000fcae:	3c 0d                	cmp    al,0xd
c000fcb0:	0f 84 09 01 00 00    	je     c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcbb:	0f 84 ef 00 00 00    	je     c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcc1:	3c 0a                	cmp    al,0xa
c000fcc3:	74 13                	je     c000fcd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fcca:	74 0c                	je     c000fcd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fccc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fcd2:	0f 8e d8 00 00 00    	jle    c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	8d 78 01             	lea    edi,[eax+0x1]
c000fce2:	57                   	push   edi
c000fce3:	e8 d1 7a ff ff       	call   c00077b9 <malloc>
c000fce8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fcec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcf0:	8d 56 04             	lea    edx,[esi+0x4]
c000fcf3:	89 14 24             	mov    DWORD PTR [esp],edx
c000fcf6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcfa:	e8 ba 7a ff ff       	call   c00077b9 <malloc>
c000fcff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd03:	83 c4 0c             	add    esp,0xc
c000fd06:	57                   	push   edi
c000fd07:	6a 00                	push   0x0
c000fd09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd0d:	e8 be 07 ff ff       	call   c00004d0 <memset>
c000fd12:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd20:	83 c4 0c             	add    esp,0xc
c000fd23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd27:	52                   	push   edx
c000fd28:	6a 00                	push   0x0
c000fd2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd2e:	e8 9d 07 ff ff       	call   c00004d0 <memset>
c000fd33:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd37:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd3b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd3e:	e8 fd 07 ff ff       	call   c0000540 <strlen>
c000fd43:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd47:	89 c1                	mov    ecx,eax
c000fd49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd4e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd51:	40                   	inc    eax
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd58:	85 d2                	test   edx,edx
c000fd5a:	75 0c                	jne    c000fd68 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	6a 08                	push   0x8
c000fd61:	e8 53 7a ff ff       	call   c00077b9 <malloc>
c000fd66:	eb 0c                	jmp    c000fd74 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd68:	c1 e0 03             	shl    eax,0x3
c000fd6b:	51                   	push   ecx
c000fd6c:	51                   	push   ecx
c000fd6d:	50                   	push   eax
c000fd6e:	52                   	push   edx
c000fd6f:	e8 31 7a ff ff       	call   c00077a5 <realloc>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd7a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd7d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fd80:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd84:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd88:	b9 08 00 00 00       	mov    ecx,0x8
c000fd8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8f:	31 f6                	xor    esi,esi
c000fd91:	50                   	push   eax
c000fd92:	68 00 01 00 00       	push   0x100
c000fd97:	6a 00                	push   0x0
c000fd99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd9d:	50                   	push   eax
c000fd9e:	e8 2d 07 ff ff       	call   c00004d0 <memset>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdae:	eb 0f                	jmp    c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdb0:	3c 3d                	cmp    al,0x3d
c000fdb2:	74 07                	je     c000fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdb4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdb8:	46                   	inc    esi
c000fdb9:	eb 04                	jmp    c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdbb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdc4:	0f 85 c6 fe ff ff    	jne    c000fc90 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fdca:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fdd0:	5b                   	pop    ebx
c000fdd1:	5e                   	pop    esi
c000fdd2:	5f                   	pop    edi
c000fdd3:	5d                   	pop    ebp
c000fdd4:	c3                   	ret    
c000fdd5:	90                   	nop

c000fdd6 <EnvVarContainer::__loadSystem()>:
c000fdd6:	83 ec 10             	sub    esp,0x10
c000fdd9:	68 00 f3 01 c0       	push   0xc001f300
c000fdde:	68 44 e1 01 c0       	push   0xc001e144
c000fde3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde7:	e8 04 fe ff ff       	call   c000fbf0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fdec:	83 c4 1c             	add    esp,0x1c
c000fdef:	c3                   	ret    

c000fdf0 <EnvVarContainer::__loadUser()>:
c000fdf0:	c3                   	ret    
c000fdf1:	90                   	nop

c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe12:	90                   	nop
c000fe13:	c3                   	ret    

c000fe14 <EnvVarContainer::~EnvVarContainer()>:
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe1e:	85 c0                	test   eax,eax
c000fe20:	74 1d                	je     c000fe3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe28:	85 c0                	test   eax,eax
c000fe2a:	74 13                	je     c000fe3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	50                   	push   eax
c000fe37:	e8 8d 79 ff ff       	call   c00077c9 <free>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	90                   	nop
c000fe40:	83 c4 0c             	add    esp,0xc
c000fe43:	c3                   	ret    

c000fe44 <Krnl::getEnv(Process*, char const*)>:
c000fe44:	53                   	push   ebx
c000fe45:	83 ec 08             	sub    esp,0x8
c000fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe50:	39 05 30 37 02 c0    	cmp    DWORD PTR ds:0xc0023730,eax
c000fe56:	74 04                	je     c000fe5c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe58:	85 c0                	test   eax,eax
c000fe5a:	75 0b                	jne    c000fe67 <Krnl::getEnv(Process*, char const*)+0x23>
c000fe5c:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fe61:	85 c0                	test   eax,eax
c000fe63:	75 19                	jne    c000fe7e <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe65:	eb 27                	jmp    c000fe8e <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe67:	52                   	push   edx
c000fe68:	52                   	push   edx
c000fe69:	53                   	push   ebx
c000fe6a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe70:	e8 79 fc ff ff       	call   c000faee <EnvVarContainer::getEnv(char const*)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	85 c0                	test   eax,eax
c000fe7a:	75 28                	jne    c000fea4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe7c:	eb de                	jmp    c000fe5c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe7e:	52                   	push   edx
c000fe7f:	52                   	push   edx
c000fe80:	53                   	push   ebx
c000fe81:	50                   	push   eax
c000fe82:	e8 67 fc ff ff       	call   c000faee <EnvVarContainer::getEnv(char const*)>
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	85 c0                	test   eax,eax
c000fe8c:	75 16                	jne    c000fea4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe8e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe92:	a1 d4 2e 02 c0       	mov    eax,ds:0xc0022ed4
c000fe97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe9b:	83 c4 08             	add    esp,0x8
c000fe9e:	5b                   	pop    ebx
c000fe9f:	e9 4a fc ff ff       	jmp    c000faee <EnvVarContainer::getEnv(char const*)>
c000fea4:	83 c4 08             	add    esp,0x8
c000fea7:	5b                   	pop    ebx
c000fea8:	c3                   	ret    

c000fea9 <Krnl::setEnvSystem(char const*, char const*)>:
c000fea9:	83 ec 10             	sub    esp,0x10
c000feac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb4:	ff 35 d4 2e 02 c0    	push   DWORD PTR ds:0xc0022ed4
c000feba:	e8 6d fc ff ff       	call   c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>
c000febf:	83 c4 1c             	add    esp,0x1c
c000fec2:	c3                   	ret    

c000fec3 <Krnl::setEnvUser(char const*, char const*)>:
c000fec3:	a1 d0 2e 02 c0       	mov    eax,ds:0xc0022ed0
c000fec8:	85 c0                	test   eax,eax
c000feca:	74 15                	je     c000fee1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000fecc:	83 ec 10             	sub    esp,0x10
c000fecf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed7:	50                   	push   eax
c000fed8:	e8 4f fc ff ff       	call   c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>
c000fedd:	83 c4 1c             	add    esp,0x1c
c000fee0:	c3                   	ret    
c000fee1:	c3                   	ret    

c000fee2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000fee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fee6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000feec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fef0:	e9 37 fc ff ff       	jmp    c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>

c000fef5 <Krnl::deleteEnvSystem(char const*)>:
c000fef5:	c3                   	ret    

c000fef6 <Krnl::deleteEnvUser(char const*)>:
c000fef6:	c3                   	ret    

c000fef7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fef7:	c3                   	ret    

c000fef8 <Krnl::newProcessEnv(Process*)>:
c000fef8:	83 ec 28             	sub    esp,0x28
c000fefb:	6a 0c                	push   0xc
c000fefd:	e8 b7 78 ff ff       	call   c00077b9 <malloc>
c000ff02:	5a                   	pop    edx
c000ff03:	59                   	pop    ecx
c000ff04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff08:	50                   	push   eax
c000ff09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff0d:	e8 e0 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff16:	83 c4 2c             	add    esp,0x2c
c000ff19:	c3                   	ret    

c000ff1a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff1a:	57                   	push   edi
c000ff1b:	56                   	push   esi
c000ff1c:	53                   	push   ebx
c000ff1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff21:	83 ec 0c             	sub    esp,0xc
c000ff24:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff2a:	6a 0c                	push   0xc
c000ff2c:	e8 88 78 ff ff       	call   c00077b9 <malloc>
c000ff31:	89 c3                	mov    ebx,eax
c000ff33:	58                   	pop    eax
c000ff34:	5a                   	pop    edx
c000ff35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff39:	53                   	push   ebx
c000ff3a:	e8 b3 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff3f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff41:	89 03                	mov    DWORD PTR [ebx],eax
c000ff43:	c1 e0 03             	shl    eax,0x3
c000ff46:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff49:	e8 6b 78 ff ff       	call   c00077b9 <malloc>
c000ff4e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff51:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff53:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff56:	c1 e1 03             	shl    ecx,0x3
c000ff59:	89 c7                	mov    edi,eax
c000ff5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	89 d8                	mov    eax,ebx
c000ff62:	5b                   	pop    ebx
c000ff63:	5e                   	pop    esi
c000ff64:	5f                   	pop    edi
c000ff65:	c3                   	ret    

c000ff66 <Krnl::loadSystemEnv()>:
c000ff66:	53                   	push   ebx
c000ff67:	83 ec 14             	sub    esp,0x14
c000ff6a:	6a 0c                	push   0xc
c000ff6c:	e8 48 78 ff ff       	call   c00077b9 <malloc>
c000ff71:	89 c3                	mov    ebx,eax
c000ff73:	58                   	pop    eax
c000ff74:	5a                   	pop    edx
c000ff75:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 71 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff84:	89 1d d4 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed4,ebx
c000ff8a:	e8 47 fe ff ff       	call   c000fdd6 <EnvVarContainer::__loadSystem()>
c000ff8f:	83 c4 18             	add    esp,0x18
c000ff92:	5b                   	pop    ebx
c000ff93:	c3                   	ret    

c000ff94 <Krnl::loadUserEnv()>:
c000ff94:	53                   	push   ebx
c000ff95:	83 ec 14             	sub    esp,0x14
c000ff98:	6a 0c                	push   0xc
c000ff9a:	e8 1a 78 ff ff       	call   c00077b9 <malloc>
c000ff9f:	89 c3                	mov    ebx,eax
c000ffa1:	58                   	pop    eax
c000ffa2:	5a                   	pop    edx
c000ffa3:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c000ffa9:	53                   	push   ebx
c000ffaa:	e8 43 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffaf:	89 1d d0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed0,ebx
c000ffb5:	83 c4 18             	add    esp,0x18
c000ffb8:	5b                   	pop    ebx
c000ffb9:	c3                   	ret    

c000ffba <Krnl::flushEnv()>:
c000ffba:	c3                   	ret    

c000ffbb <Krnl::getProcessTotalEnvCount(Process*)>:
c000ffbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffbf:	8b 15 d0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ed0
c000ffc5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffcb:	a1 d4 2e 02 c0       	mov    eax,ds:0xc0022ed4
c000ffd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffd2:	03 01                	add    eax,DWORD PTR [ecx]
c000ffd4:	85 d2                	test   edx,edx
c000ffd6:	74 02                	je     c000ffda <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000ffd8:	03 02                	add    eax,DWORD PTR [edx]
c000ffda:	c3                   	ret    

c000ffdb <Krnl::getProcessEnvPair(Process*, int)>:
c000ffdb:	57                   	push   edi
c000ffdc:	56                   	push   esi
c000ffdd:	8b 35 d0 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed0
c000ffe3:	53                   	push   ebx
c000ffe4:	85 f6                	test   esi,esi
c000ffe6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffee:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000fff4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fff8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fffa:	75 16                	jne    c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000fffc:	39 c2                	cmp    edx,eax
c000fffe:	7c 16                	jl     c0010016 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010000:	8b 0d d4 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ed4
c0010006:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010008:	01 c6                	add    esi,eax
c001000a:	39 d6                	cmp    esi,edx
c001000c:	7e 3c                	jle    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001000e:	29 c2                	sub    edx,eax
c0010010:	eb 04                	jmp    c0010016 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010012:	39 c2                	cmp    edx,eax
c0010014:	7d 05                	jge    c001001b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010016:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010019:	eb 20                	jmp    c001003b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001001b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001001d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010020:	39 d1                	cmp    ecx,edx
c0010022:	7e 04                	jle    c0010028 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010024:	29 c2                	sub    edx,eax
c0010026:	eb 10                	jmp    c0010038 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010028:	8b 35 d4 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed4
c001002e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010030:	39 d1                	cmp    ecx,edx
c0010032:	7e 16                	jle    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010034:	29 c2                	sub    edx,eax
c0010036:	29 fa                	sub    edx,edi
c0010038:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001003b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001003e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010040:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010043:	89 03                	mov    DWORD PTR [ebx],eax
c0010045:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010048:	eb 1d                	jmp    c0010067 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001004a:	83 ec 0c             	sub    esp,0xc
c001004d:	68 66 e1 01 c0       	push   0xc001e166
c0010052:	e8 ac 00 00 00       	call   c0010103 <KePanic(char const*)>
c0010057:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001005d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	89 d8                	mov    eax,ebx
c0010069:	5b                   	pop    ebx
c001006a:	5e                   	pop    esi
c001006b:	5f                   	pop    edi
c001006c:	c2 04 00             	ret    0x4

c001006f <CPU::current()>:
c001006f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0010074:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001007a:	c3                   	ret    

c001007b <operator new(unsigned long)>:
c001007b:	e9 39 77 ff ff       	jmp    c00077b9 <malloc>

c0010080 <operator delete(void*)>:
c0010080:	e9 54 77 ff ff       	jmp    c00077d9 <rfree>

c0010085 <disableIRQs()>:
c0010085:	fa                   	cli    
c0010086:	c3                   	ret    

c0010087 <enableIRQs()>:
c0010087:	fb                   	sti    
c0010088:	c3                   	ret    

c0010089 <lockScheduler()>:
c0010089:	fa                   	cli    
c001008a:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0010090:	c3                   	ret    

c0010091 <unlockScheduler()>:
c0010091:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0010096:	48                   	dec    eax
c0010097:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001009c:	75 01                	jne    c001009f <unlockScheduler()+0xe>
c001009e:	fb                   	sti    
c001009f:	c3                   	ret    

c00100a0 <lockStuff()>:
c00100a0:	fa                   	cli    
c00100a1:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c00100a7:	ff 05 04 37 02 c0    	inc    DWORD PTR ds:0xc0023704
c00100ad:	c3                   	ret    

c00100ae <unlockStuff()>:
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00100b6:	48                   	dec    eax
c00100b7:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c00100bc:	75 18                	jne    c00100d6 <unlockStuff()+0x28>
c00100be:	83 3d 00 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023700,0x0
c00100c5:	74 0f                	je     c00100d6 <unlockStuff()+0x28>
c00100c7:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c00100d1:	e8 3e 32 00 00       	call   c0013314 <schedule()>
c00100d6:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00100db:	48                   	dec    eax
c00100dc:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00100e1:	75 01                	jne    c00100e4 <unlockStuff()+0x36>
c00100e3:	fb                   	sti    
c00100e4:	83 c4 0c             	add    esp,0xc
c00100e7:	c3                   	ret    

c00100e8 <Virt::getAKernelVAS()>:
c00100e8:	a1 50 05 02 c0       	mov    eax,ds:0xc0020550
c00100ed:	c3                   	ret    

c00100ee <__not_memcpy>:
c00100ee:	57                   	push   edi
c00100ef:	56                   	push   esi
c00100f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100fc:	89 c7                	mov    edi,eax
c00100fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010100:	5e                   	pop    esi
c0010101:	5f                   	pop    edi
c0010102:	c3                   	ret    

c0010103 <KePanic(char const*)>:
c0010103:	c6 05 d8 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ed8,0x1
c001010a:	e9 fd 4f 00 00       	jmp    c001510c <HalPanic(char const*)>

c001010f <Krnl::powerThread(void*)>:
c001010f:	83 ec 0c             	sub    esp,0xc
c0010112:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0010117:	48                   	dec    eax
c0010118:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001011d:	75 01                	jne    c0010120 <Krnl::powerThread(void*)+0x11>
c001011f:	fb                   	sti    
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	c6 05 e0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ee0,0x0
c001012a:	6a 0a                	push   0xa
c001012c:	e8 f3 34 00 00       	call   c0013624 <sleep(unsigned int)>
c0010131:	83 05 24 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022f24,0xa
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	eb e3                	jmp    c0010120 <Krnl::powerThread(void*)+0x11>

c001013d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001013d:	57                   	push   edi
c001013e:	b9 09 00 00 00       	mov    ecx,0x9
c0010143:	56                   	push   esi
c0010144:	bf 00 2f 02 c0       	mov    edi,0xc0022f00
c0010149:	fc                   	cld    
c001014a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001014e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010150:	5e                   	pop    esi
c0010151:	5f                   	pop    edi
c0010152:	c3                   	ret    

c0010153 <Krnl::userIOReceived()>:
c0010153:	c7 05 24 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f24,0x0
c001015d:	c3                   	ret    

c001015e <Krnl::handlePowerButton()>:
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c0010166:	83 f8 02             	cmp    eax,0x2
c0010169:	75 10                	jne    c001017b <Krnl::handlePowerButton()+0x1d>
c001016b:	83 ec 0c             	sub    esp,0xc
c001016e:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0010174:	e8 dd 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010179:	eb 11                	jmp    c001018c <Krnl::handlePowerButton()+0x2e>
c001017b:	48                   	dec    eax
c001017c:	75 11                	jne    c001018f <Krnl::handlePowerButton()+0x31>
c001017e:	83 ec 0c             	sub    esp,0xc
c0010181:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0010187:	e8 fa 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001018c:	83 c4 10             	add    esp,0x10
c001018f:	83 c4 0c             	add    esp,0xc
c0010192:	c3                   	ret    

c0010193 <Krnl::handleSleepButton()>:
c0010193:	83 ec 0c             	sub    esp,0xc
c0010196:	a1 04 2f 02 c0       	mov    eax,ds:0xc0022f04
c001019b:	83 f8 02             	cmp    eax,0x2
c001019e:	75 10                	jne    c00101b0 <Krnl::handleSleepButton()+0x1d>
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00101a9:	e8 a8 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101ae:	eb 11                	jmp    c00101c1 <Krnl::handleSleepButton()+0x2e>
c00101b0:	48                   	dec    eax
c00101b1:	75 11                	jne    c00101c4 <Krnl::handleSleepButton()+0x31>
c00101b3:	83 ec 0c             	sub    esp,0xc
c00101b6:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00101bc:	e8 c5 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101c1:	83 c4 10             	add    esp,0x10
c00101c4:	83 c4 0c             	add    esp,0xc
c00101c7:	c3                   	ret    

c00101c8 <Krnl::setupPowerManager()>:
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	c7 05 24 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f24,0x0
c00101d5:	68 f0 00 00 00       	push   0xf0
c00101da:	c6 05 e0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ee0,0x0
c00101e1:	6a 00                	push   0x0
c00101e3:	68 0f 01 01 c0       	push   0xc001010f
c00101e8:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c00101ee:	e8 01 2f 00 00       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c00101f3:	c7 05 00 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f00,0x2
c00101fd:	c7 05 04 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f04,0x1
c0010207:	c7 05 08 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f08,0x3
c0010211:	c7 05 0c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f0c,0x0
c001021b:	c7 05 18 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f18,0x0
c0010225:	c7 05 10 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f10,0x0
c001022f:	c7 05 1c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f1c,0x0
c0010239:	c7 05 14 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f14,0x3c
c0010243:	c7 05 20 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f20,0x3c
c001024d:	83 c4 1c             	add    esp,0x1c
c0010250:	c3                   	ret    
c0010251:	66 90                	xchg   ax,ax
c0010253:	90                   	nop

c0010254 <KeResolveCompatibilitySymbol(char*)>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	83 ec 08             	sub    esp,0x8
c001025a:	68 80 e1 01 c0       	push   0xc001e180
c001025f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010263:	e8 78 04 ff ff       	call   c00006e0 <strcmp>
c0010268:	83 c4 10             	add    esp,0x10
c001026b:	85 c0                	test   eax,eax
c001026d:	0f 94 c0             	sete   al
c0010270:	84 c0                	test   al,al
c0010272:	74 0c                	je     c0010280 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010274:	b8 58 04 02 c0       	mov    eax,0xc0020458
c0010279:	e9 62 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001027e:	66 90                	xchg   ax,ax
c0010280:	83 ec 08             	sub    esp,0x8
c0010283:	68 89 e1 01 c0       	push   0xc001e189
c0010288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001028c:	e8 4f 04 ff ff       	call   c00006e0 <strcmp>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	85 c0                	test   eax,eax
c0010296:	0f 94 c0             	sete   al
c0010299:	84 c0                	test   al,al
c001029b:	74 0b                	je     c00102a8 <KeResolveCompatibilitySymbol(char*)+0x54>
c001029d:	b8 10 bc 01 c0       	mov    eax,0xc001bc10
c00102a2:	e9 39 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102a7:	90                   	nop
c00102a8:	83 ec 08             	sub    esp,0x8
c00102ab:	68 93 e1 01 c0       	push   0xc001e193
c00102b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b4:	e8 27 04 ff ff       	call   c00006e0 <strcmp>
c00102b9:	83 c4 10             	add    esp,0x10
c00102bc:	85 c0                	test   eax,eax
c00102be:	0f 94 c0             	sete   al
c00102c1:	84 c0                	test   al,al
c00102c3:	74 0b                	je     c00102d0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102c5:	b8 44 b9 01 c0       	mov    eax,0xc001b944
c00102ca:	e9 11 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102cf:	90                   	nop
c00102d0:	83 ec 08             	sub    esp,0x8
c00102d3:	68 9c e1 01 c0       	push   0xc001e19c
c00102d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102dc:	e8 ff 03 ff ff       	call   c00006e0 <strcmp>
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	85 c0                	test   eax,eax
c00102e6:	0f 94 c0             	sete   al
c00102e9:	84 c0                	test   al,al
c00102eb:	74 0b                	je     c00102f8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00102ed:	b8 03 01 01 c0       	mov    eax,0xc0010103
c00102f2:	e9 e9 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102f7:	90                   	nop
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	68 af e1 01 c0       	push   0xc001e1af
c0010300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010304:	e8 d7 03 ff ff       	call   c00006e0 <strcmp>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	85 c0                	test   eax,eax
c001030e:	0f 94 c0             	sete   al
c0010311:	84 c0                	test   al,al
c0010313:	74 0b                	je     c0010320 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010315:	b8 8b fa 00 c0       	mov    eax,0xc000fa8b
c001031a:	e9 c1 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001031f:	90                   	nop
c0010320:	83 ec 08             	sub    esp,0x8
c0010323:	68 cc e1 01 c0       	push   0xc001e1cc
c0010328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032c:	e8 af 03 ff ff       	call   c00006e0 <strcmp>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	85 c0                	test   eax,eax
c0010336:	0f 94 c0             	sete   al
c0010339:	84 c0                	test   al,al
c001033b:	74 0b                	je     c0010348 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001033d:	b8 10 bd 01 c0       	mov    eax,0xc001bd10
c0010342:	e9 99 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010347:	90                   	nop
c0010348:	83 ec 08             	sub    esp,0x8
c001034b:	68 d6 e1 01 c0       	push   0xc001e1d6
c0010350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010354:	e8 87 03 ff ff       	call   c00006e0 <strcmp>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	85 c0                	test   eax,eax
c001035e:	0f 94 c0             	sete   al
c0010361:	84 c0                	test   al,al
c0010363:	74 07                	je     c001036c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010365:	b8 90 ba 01 c0       	mov    eax,0xc001ba90
c001036a:	eb 74                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001036c:	83 ec 08             	sub    esp,0x8
c001036f:	68 df e1 01 c0       	push   0xc001e1df
c0010374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010378:	e8 63 03 ff ff       	call   c00006e0 <strcmp>
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	85 c0                	test   eax,eax
c0010382:	0f 94 c0             	sete   al
c0010385:	84 c0                	test   al,al
c0010387:	74 07                	je     c0010390 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010389:	b8 5c 04 02 c0       	mov    eax,0xc002045c
c001038e:	eb 50                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010390:	83 ec 08             	sub    esp,0x8
c0010393:	68 f7 e1 01 c0       	push   0xc001e1f7
c0010398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039c:	e8 3f 03 ff ff       	call   c00006e0 <strcmp>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 c0                	test   eax,eax
c00103a6:	0f 94 c0             	sete   al
c00103a9:	84 c0                	test   al,al
c00103ab:	74 07                	je     c00103b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103ad:	b8 5c 04 02 c0       	mov    eax,0xc002045c
c00103b2:	eb 2c                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103b4:	83 ec 08             	sub    esp,0x8
c00103b7:	68 04 e2 01 c0       	push   0xc001e204
c00103bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c0:	e8 1b 03 ff ff       	call   c00006e0 <strcmp>
c00103c5:	83 c4 10             	add    esp,0x10
c00103c8:	85 c0                	test   eax,eax
c00103ca:	0f 94 c0             	sete   al
c00103cd:	84 c0                	test   al,al
c00103cf:	74 07                	je     c00103d8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00103d1:	b8 5d 04 02 c0       	mov    eax,0xc002045d
c00103d6:	eb 08                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d8:	b8 00 00 00 00       	mov    eax,0x0
c00103dd:	8d 76 00             	lea    esi,[esi+0x0]
c00103e0:	83 c4 0c             	add    esp,0xc
c00103e3:	c3                   	ret    

c00103e4 <SysSeekDir(regs*)>:
c00103e4:	31 c0                	xor    eax,eax
c00103e6:	31 d2                	xor    edx,edx
c00103e8:	c3                   	ret    

c00103e9 <SysTellDir(regs*)>:
c00103e9:	31 c0                	xor    eax,eax
c00103eb:	31 d2                	xor    edx,edx
c00103ed:	c3                   	ret    

c00103ee <SysVerify(regs*)>:
c00103ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f2:	31 d2                	xor    edx,edx
c00103f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103f7:	c3                   	ret    

c00103f8 <SysGetArgc(regs*)>:
c00103f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010400:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010406:	99                   	cdq    
c0010407:	c3                   	ret    

c0010408 <SysTTYName(regs*)>:
c0010408:	b8 01 00 00 00       	mov    eax,0x1
c001040d:	31 d2                	xor    edx,edx
c001040f:	c3                   	ret    

c0010410 <SysFormatDisk(regs*)>:
c0010410:	56                   	push   esi
c0010411:	53                   	push   ebx
c0010412:	50                   	push   eax
c0010413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010417:	8b 1d 54 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020554
c001041d:	eb 28                	jmp    c0010447 <SysFormatDisk(regs*)+0x37>
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010425:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010428:	8b 13                	mov    edx,DWORD PTR [ebx]
c001042a:	51                   	push   ecx
c001042b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001042e:	51                   	push   ecx
c001042f:	50                   	push   eax
c0010430:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0010437:	50                   	push   eax
c0010438:	53                   	push   ebx
c0010439:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001043c:	83 c4 20             	add    esp,0x20
c001043f:	83 f8 08             	cmp    eax,0x8
c0010442:	75 12                	jne    c0010456 <SysFormatDisk(regs*)+0x46>
c0010444:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010447:	85 db                	test   ebx,ebx
c0010449:	75 d4                	jne    c001041f <SysFormatDisk(regs*)+0xf>
c001044b:	59                   	pop    ecx
c001044c:	b8 03 00 00 00       	mov    eax,0x3
c0010451:	31 d2                	xor    edx,edx
c0010453:	5b                   	pop    ebx
c0010454:	5e                   	pop    esi
c0010455:	c3                   	ret    
c0010456:	85 c0                	test   eax,eax
c0010458:	74 1b                	je     c0010475 <SysFormatDisk(regs*)+0x65>
c001045a:	83 f8 09             	cmp    eax,0x9
c001045d:	74 0b                	je     c001046a <SysFormatDisk(regs*)+0x5a>
c001045f:	59                   	pop    ecx
c0010460:	b8 02 00 00 00       	mov    eax,0x2
c0010465:	31 d2                	xor    edx,edx
c0010467:	5b                   	pop    ebx
c0010468:	5e                   	pop    esi
c0010469:	c3                   	ret    
c001046a:	59                   	pop    ecx
c001046b:	b8 01 00 00 00       	mov    eax,0x1
c0010470:	31 d2                	xor    edx,edx
c0010472:	5b                   	pop    ebx
c0010473:	5e                   	pop    esi
c0010474:	c3                   	ret    
c0010475:	59                   	pop    ecx
c0010476:	31 c0                	xor    eax,eax
c0010478:	31 d2                	xor    edx,edx
c001047a:	5b                   	pop    ebx
c001047b:	5e                   	pop    esi
c001047c:	c3                   	ret    

c001047d <SysSetDiskVolumeLabel(regs*)>:
c001047d:	56                   	push   esi
c001047e:	53                   	push   ebx
c001047f:	53                   	push   ebx
c0010480:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010484:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010487:	83 f8 19             	cmp    eax,0x19
c001048a:	77 2d                	ja     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001048c:	8b 0c 85 c0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd640]
c0010493:	85 c9                	test   ecx,ecx
c0010495:	74 22                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010497:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001049a:	85 db                	test   ebx,ebx
c001049c:	74 1b                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001049e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104a4:	85 d2                	test   edx,edx
c00104a6:	74 11                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104a8:	8b 32                	mov    esi,DWORD PTR [edx]
c00104aa:	53                   	push   ebx
c00104ab:	50                   	push   eax
c00104ac:	51                   	push   ecx
c00104ad:	52                   	push   edx
c00104ae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	99                   	cdq    
c00104b5:	59                   	pop    ecx
c00104b6:	5b                   	pop    ebx
c00104b7:	5e                   	pop    esi
c00104b8:	c3                   	ret    
c00104b9:	59                   	pop    ecx
c00104ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104c4:	5b                   	pop    ebx
c00104c5:	5e                   	pop    esi
c00104c6:	c3                   	ret    

c00104c7 <SysGetDiskVolumeLabel(regs*)>:
c00104c7:	57                   	push   edi
c00104c8:	56                   	push   esi
c00104c9:	53                   	push   ebx
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00104d1:	83 fa 19             	cmp    edx,0x19
c00104d4:	77 38                	ja     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104d6:	8b 0c 95 c0 29 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd640]
c00104dd:	85 c9                	test   ecx,ecx
c00104df:	74 2d                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00104e4:	85 db                	test   ebx,ebx
c00104e6:	74 26                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00104eb:	85 f6                	test   esi,esi
c00104ed:	74 1f                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104ef:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00104f5:	85 c0                	test   eax,eax
c00104f7:	74 15                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00104fe:	56                   	push   esi
c00104ff:	53                   	push   ebx
c0010500:	52                   	push   edx
c0010501:	51                   	push   ecx
c0010502:	50                   	push   eax
c0010503:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010506:	83 c4 20             	add    esp,0x20
c0010509:	99                   	cdq    
c001050a:	5b                   	pop    ebx
c001050b:	5e                   	pop    esi
c001050c:	5f                   	pop    edi
c001050d:	c3                   	ret    
c001050e:	5b                   	pop    ebx
c001050f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010514:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010519:	5e                   	pop    esi
c001051a:	5f                   	pop    edi
c001051b:	c3                   	ret    

c001051c <SysShutdown(regs*)>:
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010526:	85 c0                	test   eax,eax
c0010528:	74 18                	je     c0010542 <SysShutdown(regs*)+0x26>
c001052a:	83 f8 01             	cmp    eax,0x1
c001052d:	74 38                	je     c0010567 <SysShutdown(regs*)+0x4b>
c001052f:	83 f8 02             	cmp    eax,0x2
c0010532:	74 24                	je     c0010558 <SysShutdown(regs*)+0x3c>
c0010534:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010539:	ba ff ff ff ff       	mov    edx,0xffffffff
c001053e:	83 c4 0c             	add    esp,0xc
c0010541:	c3                   	ret    
c0010542:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0010547:	8b 10                	mov    edx,DWORD PTR [eax]
c0010549:	6a 00                	push   0x0
c001054b:	6a 00                	push   0x0
c001054d:	6a 00                	push   0x0
c001054f:	50                   	push   eax
c0010550:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	eb dc                	jmp    c0010534 <SysShutdown(regs*)+0x18>
c0010558:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001055d:	8b 10                	mov    edx,DWORD PTR [eax]
c001055f:	6a 00                	push   0x0
c0010561:	6a 00                	push   0x0
c0010563:	6a 01                	push   0x1
c0010565:	eb e8                	jmp    c001054f <SysShutdown(regs*)+0x33>
c0010567:	a1 40 2a 02 c0       	mov    eax,ds:0xc0022a40
c001056c:	85 c0                	test   eax,eax
c001056e:	74 02                	je     c0010572 <SysShutdown(regs*)+0x56>
c0010570:	ff d0                	call   eax
c0010572:	31 c0                	xor    eax,eax
c0010574:	31 d2                	xor    edx,edx
c0010576:	83 c4 0c             	add    esp,0xc
c0010579:	c3                   	ret    

c001057a <SysRealpath(regs*)>:
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010584:	85 d2                	test   edx,edx
c0010586:	74 07                	je     c001058f <SysRealpath(regs*)+0x15>
c0010588:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001058b:	85 c0                	test   eax,eax
c001058d:	75 0b                	jne    c001059a <SysRealpath(regs*)+0x20>
c001058f:	b8 01 00 00 00       	mov    eax,0x1
c0010594:	31 d2                	xor    edx,edx
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    
c001059a:	51                   	push   ecx
c001059b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105a1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00105aa:	51                   	push   ecx
c00105ab:	52                   	push   edx
c00105ac:	50                   	push   eax
c00105ad:	e8 a2 a2 ff ff       	call   c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	31 c0                	xor    eax,eax
c00105b7:	31 d2                	xor    edx,edx
c00105b9:	83 c4 0c             	add    esp,0xc
c00105bc:	c3                   	ret    

c00105bd <SysReadDir(regs*)>:
c00105bd:	53                   	push   ebx
c00105be:	83 ec 18             	sub    esp,0x18
c00105c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105c8:	83 f8 02             	cmp    eax,0x2
c00105cb:	76 61                	jbe    c001062e <SysReadDir(regs*)+0x71>
c00105cd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00105d4:	77 49                	ja     c001061f <SysReadDir(regs*)+0x62>
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	50                   	push   eax
c00105da:	e8 00 8b ff ff       	call   c00090df <getFromFileDescriptor(int)>
c00105df:	83 c4 10             	add    esp,0x10
c00105e2:	85 c0                	test   eax,eax
c00105e4:	74 39                	je     c001061f <SysReadDir(regs*)+0x62>
c00105e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00105f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00105f7:	51                   	push   ecx
c00105f8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00105fb:	51                   	push   ecx
c00105fc:	6a 00                	push   0x0
c00105fe:	68 10 01 00 00       	push   0x110
c0010603:	50                   	push   eax
c0010604:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010607:	83 c4 20             	add    esp,0x20
c001060a:	85 c0                	test   eax,eax
c001060c:	74 29                	je     c0010637 <SysReadDir(regs*)+0x7a>
c001060e:	83 f8 07             	cmp    eax,0x7
c0010611:	74 1b                	je     c001062e <SysReadDir(regs*)+0x71>
c0010613:	b8 02 00 00 00       	mov    eax,0x2
c0010618:	31 d2                	xor    edx,edx
c001061a:	83 c4 18             	add    esp,0x18
c001061d:	5b                   	pop    ebx
c001061e:	c3                   	ret    
c001061f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010624:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010629:	83 c4 18             	add    esp,0x18
c001062c:	5b                   	pop    ebx
c001062d:	c3                   	ret    
c001062e:	b8 01 00 00 00       	mov    eax,0x1
c0010633:	31 d2                	xor    edx,edx
c0010635:	eb e3                	jmp    c001061a <SysReadDir(regs*)+0x5d>
c0010637:	31 c0                	xor    eax,eax
c0010639:	31 d2                	xor    edx,edx
c001063b:	eb dd                	jmp    c001061a <SysReadDir(regs*)+0x5d>

c001063d <SysIsATTY(regs*)>:
c001063d:	83 ec 0c             	sub    esp,0xc
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010647:	83 f8 02             	cmp    eax,0x2
c001064a:	76 07                	jbe    c0010653 <SysIsATTY(regs*)+0x16>
c001064c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010651:	75 28                	jne    c001067b <SysIsATTY(regs*)+0x3e>
c0010653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010658:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001065b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010661:	85 c0                	test   eax,eax
c0010663:	74 26                	je     c001068b <SysIsATTY(regs*)+0x4e>
c0010665:	83 ec 0c             	sub    esp,0xc
c0010668:	8b 10                	mov    edx,DWORD PTR [eax]
c001066a:	50                   	push   eax
c001066b:	ff 12                	call   DWORD PTR [edx]
c001066d:	31 d2                	xor    edx,edx
c001066f:	25 ff 00 00 00       	and    eax,0xff
c0010674:	83 c4 10             	add    esp,0x10
c0010677:	83 c4 0c             	add    esp,0xc
c001067a:	c3                   	ret    
c001067b:	83 ec 0c             	sub    esp,0xc
c001067e:	50                   	push   eax
c001067f:	e8 5b 8a ff ff       	call   c00090df <getFromFileDescriptor(int)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	85 c0                	test   eax,eax
c0010689:	75 da                	jne    c0010665 <SysIsATTY(regs*)+0x28>
c001068b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010690:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010695:	83 c4 0c             	add    esp,0xc
c0010698:	c3                   	ret    

c0010699 <SysSeek(regs*)>:
c0010699:	53                   	push   ebx
c001069a:	83 ec 08             	sub    esp,0x8
c001069d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106a4:	8d 50 fd             	lea    edx,[eax-0x3]
c00106a7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106ad:	77 34                	ja     c00106e3 <SysSeek(regs*)+0x4a>
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	50                   	push   eax
c00106b3:	e8 27 8a ff ff       	call   c00090df <getFromFileDescriptor(int)>
c00106b8:	83 c4 0c             	add    esp,0xc
c00106bb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106be:	31 db                	xor    ebx,ebx
c00106c0:	53                   	push   ebx
c00106c1:	51                   	push   ecx
c00106c2:	50                   	push   eax
c00106c3:	e8 b4 a4 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	85 c0                	test   eax,eax
c00106cd:	0f 95 c0             	setne  al
c00106d0:	31 d2                	xor    edx,edx
c00106d2:	25 ff 00 00 00       	and    eax,0xff
c00106d7:	f7 d8                	neg    eax
c00106d9:	83 d2 00             	adc    edx,0x0
c00106dc:	83 c4 08             	add    esp,0x8
c00106df:	f7 da                	neg    edx
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106ed:	83 c4 08             	add    esp,0x8
c00106f0:	5b                   	pop    ebx
c00106f1:	c3                   	ret    

c00106f2 <SysTell(regs*)>:
c00106f2:	53                   	push   ebx
c00106f3:	83 ec 08             	sub    esp,0x8
c00106f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106fd:	83 f8 02             	cmp    eax,0x2
c0010700:	76 50                	jbe    c0010752 <SysTell(regs*)+0x60>
c0010702:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010707:	76 19                	jbe    c0010722 <SysTell(regs*)+0x30>
c0010709:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001070c:	31 d2                	xor    edx,edx
c001070e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001071b:	31 c0                	xor    eax,eax
c001071d:	83 c4 08             	add    esp,0x8
c0010720:	5b                   	pop    ebx
c0010721:	c3                   	ret    
c0010722:	83 ec 0c             	sub    esp,0xc
c0010725:	50                   	push   eax
c0010726:	e8 b4 89 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c001072b:	5a                   	pop    edx
c001072c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001072f:	59                   	pop    ecx
c0010730:	53                   	push   ebx
c0010731:	50                   	push   eax
c0010732:	e8 9b a4 ff ff       	call   c000abd2 <File::tell(unsigned long long*)>
c0010737:	83 c4 10             	add    esp,0x10
c001073a:	85 c0                	test   eax,eax
c001073c:	0f 95 c0             	setne  al
c001073f:	31 d2                	xor    edx,edx
c0010741:	25 ff 00 00 00       	and    eax,0xff
c0010746:	f7 d8                	neg    eax
c0010748:	83 d2 00             	adc    edx,0x0
c001074b:	83 c4 08             	add    esp,0x8
c001074e:	f7 da                	neg    edx
c0010750:	5b                   	pop    ebx
c0010751:	c3                   	ret    
c0010752:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010757:	ba ff ff ff ff       	mov    edx,0xffffffff
c001075c:	83 c4 08             	add    esp,0x8
c001075f:	5b                   	pop    ebx
c0010760:	c3                   	ret    

c0010761 <SysSize(regs*)>:
c0010761:	53                   	push   ebx
c0010762:	83 ec 18             	sub    esp,0x18
c0010765:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010769:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001076c:	83 f8 02             	cmp    eax,0x2
c001076f:	76 56                	jbe    c00107c7 <SysSize(regs*)+0x66>
c0010771:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010776:	76 19                	jbe    c0010791 <SysSize(regs*)+0x30>
c0010778:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001077b:	31 d2                	xor    edx,edx
c001077d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001078a:	31 c0                	xor    eax,eax
c001078c:	83 c4 18             	add    esp,0x18
c001078f:	5b                   	pop    ebx
c0010790:	c3                   	ret    
c0010791:	83 ec 0c             	sub    esp,0xc
c0010794:	50                   	push   eax
c0010795:	e8 45 89 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c001079a:	83 c4 0c             	add    esp,0xc
c001079d:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107a1:	52                   	push   edx
c00107a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107a5:	52                   	push   edx
c00107a6:	50                   	push   eax
c00107a7:	e8 be a5 ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	85 c0                	test   eax,eax
c00107b1:	0f 95 c0             	setne  al
c00107b4:	31 d2                	xor    edx,edx
c00107b6:	25 ff 00 00 00       	and    eax,0xff
c00107bb:	f7 d8                	neg    eax
c00107bd:	83 d2 00             	adc    edx,0x0
c00107c0:	83 c4 18             	add    esp,0x18
c00107c3:	f7 da                	neg    edx
c00107c5:	5b                   	pop    ebx
c00107c6:	c3                   	ret    
c00107c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107d1:	83 c4 18             	add    esp,0x18
c00107d4:	5b                   	pop    ebx
c00107d5:	c3                   	ret    

c00107d6 <SysSizeFromFilename(regs*)>:
c00107d6:	57                   	push   edi
c00107d7:	56                   	push   esi
c00107d8:	53                   	push   ebx
c00107d9:	83 ec 20             	sub    esp,0x20
c00107dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00107e0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00107e3:	83 fb 02             	cmp    ebx,0x2
c00107e6:	0f 86 8c 00 00 00    	jbe    c0010878 <SysSizeFromFilename(regs*)+0xa2>
c00107ec:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00107f2:	76 1b                	jbe    c001080f <SysSizeFromFilename(regs*)+0x39>
c00107f4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00107f7:	31 d2                	xor    edx,edx
c00107f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010806:	83 c4 20             	add    esp,0x20
c0010809:	31 c0                	xor    eax,eax
c001080b:	5b                   	pop    ebx
c001080c:	5e                   	pop    esi
c001080d:	5f                   	pop    edi
c001080e:	c3                   	ret    
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	68 14 01 00 00       	push   0x114
c0010817:	e8 9d 6f ff ff       	call   c00077b9 <malloc>
c001081c:	83 c4 0c             	add    esp,0xc
c001081f:	89 c7                	mov    edi,eax
c0010821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	57                   	push   edi
c001082c:	e8 cd a1 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0010831:	83 c4 0c             	add    esp,0xc
c0010834:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010838:	50                   	push   eax
c0010839:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001083c:	52                   	push   edx
c001083d:	57                   	push   edi
c001083e:	e8 27 a5 ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	85 ff                	test   edi,edi
c0010848:	74 14                	je     c001085e <SysSizeFromFilename(regs*)+0x88>
c001084a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001084e:	8b 17                	mov    edx,DWORD PTR [edi]
c0010850:	83 ec 0c             	sub    esp,0xc
c0010853:	57                   	push   edi
c0010854:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001085e:	85 c0                	test   eax,eax
c0010860:	0f 95 c0             	setne  al
c0010863:	31 d2                	xor    edx,edx
c0010865:	25 ff 00 00 00       	and    eax,0xff
c001086a:	f7 d8                	neg    eax
c001086c:	83 d2 00             	adc    edx,0x0
c001086f:	83 c4 20             	add    esp,0x20
c0010872:	f7 da                	neg    edx
c0010874:	5b                   	pop    ebx
c0010875:	5e                   	pop    esi
c0010876:	5f                   	pop    edi
c0010877:	c3                   	ret    
c0010878:	83 c4 20             	add    esp,0x20
c001087b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010880:	5b                   	pop    ebx
c0010881:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010886:	5e                   	pop    esi
c0010887:	5f                   	pop    edi
c0010888:	c3                   	ret    

c0010889 <SysClose(regs*)>:
c0010889:	53                   	push   ebx
c001088a:	83 ec 08             	sub    esp,0x8
c001088d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010891:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010894:	83 f8 02             	cmp    eax,0x2
c0010897:	76 41                	jbe    c00108da <SysClose(regs*)+0x51>
c0010899:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001089f:	83 fa 01             	cmp    edx,0x1
c00108a2:	76 2d                	jbe    c00108d1 <SysClose(regs*)+0x48>
c00108a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00108a9:	77 2f                	ja     c00108da <SysClose(regs*)+0x51>
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	50                   	push   eax
c00108af:	e8 2b 88 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c00108b4:	89 c3                	mov    ebx,eax
c00108b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00108b9:	e8 5e a2 ff ff       	call   c000ab1c <File::close()>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	85 db                	test   ebx,ebx
c00108c3:	74 0c                	je     c00108d1 <SysClose(regs*)+0x48>
c00108c5:	83 ec 0c             	sub    esp,0xc
c00108c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108ca:	53                   	push   ebx
c00108cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	31 d2                	xor    edx,edx
c00108d5:	83 c4 08             	add    esp,0x8
c00108d8:	5b                   	pop    ebx
c00108d9:	c3                   	ret    
c00108da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108e4:	83 c4 08             	add    esp,0x8
c00108e7:	5b                   	pop    ebx
c00108e8:	c3                   	ret    

c00108e9 <SysOpenDir(regs*)>:
c00108e9:	56                   	push   esi
c00108ea:	53                   	push   ebx
c00108eb:	50                   	push   eax
c00108ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108f3:	85 c0                	test   eax,eax
c00108f5:	74 5b                	je     c0010952 <SysOpenDir(regs*)+0x69>
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	68 14 01 00 00       	push   0x114
c00108ff:	e8 b5 6e ff ff       	call   c00077b9 <malloc>
c0010904:	83 c4 0c             	add    esp,0xc
c0010907:	89 c6                	mov    esi,eax
c0010909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010911:	50                   	push   eax
c0010912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010915:	50                   	push   eax
c0010916:	56                   	push   esi
c0010917:	e8 0c a6 ff ff       	call   c000af28 <Directory::Directory(char const*, Process*)>
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	85 f6                	test   esi,esi
c0010921:	74 2f                	je     c0010952 <SysOpenDir(regs*)+0x69>
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	56                   	push   esi
c0010927:	e8 bc a6 ff ff       	call   c000afe8 <Directory::open()>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	85 c0                	test   eax,eax
c0010931:	75 1f                	jne    c0010952 <SysOpenDir(regs*)+0x69>
c0010933:	83 ec 0c             	sub    esp,0xc
c0010936:	56                   	push   esi
c0010937:	e8 ae 84 ff ff       	call   c0008dea <UnixFile::getFileDescriptor()>
c001093c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	89 02                	mov    DWORD PTR [edx],eax
c0010944:	c1 f8 1f             	sar    eax,0x1f
c0010947:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001094a:	31 c0                	xor    eax,eax
c001094c:	59                   	pop    ecx
c001094d:	31 d2                	xor    edx,edx
c001094f:	5b                   	pop    ebx
c0010950:	5e                   	pop    esi
c0010951:	c3                   	ret    
c0010952:	59                   	pop    ecx
c0010953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010958:	ba ff ff ff ff       	mov    edx,0xffffffff
c001095d:	5b                   	pop    ebx
c001095e:	5e                   	pop    esi
c001095f:	c3                   	ret    

c0010960 <SysCloseDir(regs*)>:
c0010960:	53                   	push   ebx
c0010961:	83 ec 08             	sub    esp,0x8
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001096b:	8d 50 fd             	lea    edx,[eax-0x3]
c001096e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010974:	77 2f                	ja     c00109a5 <SysCloseDir(regs*)+0x45>
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	50                   	push   eax
c001097a:	e8 60 87 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c001097f:	89 c3                	mov    ebx,eax
c0010981:	89 04 24             	mov    DWORD PTR [esp],eax
c0010984:	e8 bb a6 ff ff       	call   c000b044 <Directory::close()>
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	85 db                	test   ebx,ebx
c001098e:	74 0c                	je     c001099c <SysCloseDir(regs*)+0x3c>
c0010990:	83 ec 0c             	sub    esp,0xc
c0010993:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010995:	53                   	push   ebx
c0010996:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010999:	83 c4 10             	add    esp,0x10
c001099c:	31 c0                	xor    eax,eax
c001099e:	31 d2                	xor    edx,edx
c00109a0:	83 c4 08             	add    esp,0x8
c00109a3:	5b                   	pop    ebx
c00109a4:	c3                   	ret    
c00109a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109af:	83 c4 08             	add    esp,0x8
c00109b2:	5b                   	pop    ebx
c00109b3:	c3                   	ret    

c00109b4 <SysMakeDir(regs*)>:
c00109b4:	56                   	push   esi
c00109b5:	53                   	push   ebx
c00109b6:	83 ec 10             	sub    esp,0x10
c00109b9:	68 14 01 00 00       	push   0x114
c00109be:	e8 f6 6d ff ff       	call   c00077b9 <malloc>
c00109c3:	83 c4 0c             	add    esp,0xc
c00109c6:	89 c3                	mov    ebx,eax
c00109c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109cd:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00109d0:	56                   	push   esi
c00109d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00109d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109d8:	50                   	push   eax
c00109d9:	53                   	push   ebx
c00109da:	e8 49 a5 ff ff       	call   c000af28 <Directory::Directory(char const*, Process*)>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	85 db                	test   ebx,ebx
c00109e4:	74 32                	je     c0010a18 <SysMakeDir(regs*)+0x64>
c00109e6:	83 ec 0c             	sub    esp,0xc
c00109e9:	53                   	push   ebx
c00109ea:	e8 d9 a7 ff ff       	call   c000b1c8 <Directory::create()>
c00109ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f2:	89 c6                	mov    esi,eax
c00109f4:	e8 4b a6 ff ff       	call   c000b044 <Directory::close()>
c00109f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	31 c0                	xor    eax,eax
c0010a06:	59                   	pop    ecx
c0010a07:	85 f6                	test   esi,esi
c0010a09:	5b                   	pop    ebx
c0010a0a:	0f 95 c0             	setne  al
c0010a0d:	5e                   	pop    esi
c0010a0e:	31 d2                	xor    edx,edx
c0010a10:	f7 d8                	neg    eax
c0010a12:	83 d2 00             	adc    edx,0x0
c0010a15:	f7 da                	neg    edx
c0010a17:	c3                   	ret    
c0010a18:	59                   	pop    ecx
c0010a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a23:	5b                   	pop    ebx
c0010a24:	5e                   	pop    esi
c0010a25:	c3                   	ret    

c0010a26 <SysWait(regs*)>:
c0010a26:	83 ec 10             	sub    esp,0x10
c0010a29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a30:	52                   	push   edx
c0010a31:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a34:	51                   	push   ecx
c0010a35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a38:	50                   	push   eax
c0010a39:	e8 02 2b 00 00       	call   c0013540 <waitTask(int, int*, int)>
c0010a3e:	83 c4 1c             	add    esp,0x1c
c0010a41:	99                   	cdq    
c0010a42:	c3                   	ret    

c0010a43 <SysNotImpl(regs*)>:
c0010a43:	83 ec 18             	sub    esp,0x18
c0010a46:	68 11 e2 01 c0       	push   0xc001e211
c0010a4b:	e8 b3 f6 ff ff       	call   c0010103 <KePanic(char const*)>
c0010a50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a5a:	83 c4 1c             	add    esp,0x1c
c0010a5d:	c3                   	ret    

c0010a5e <SysPanic(regs*)>:
c0010a5e:	83 ec 18             	sub    esp,0x18
c0010a61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a65:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a68:	50                   	push   eax
c0010a69:	e8 95 f6 ff ff       	call   c0010103 <KePanic(char const*)>
c0010a6e:	b8 01 00 00 00       	mov    eax,0x1
c0010a73:	31 d2                	xor    edx,edx
c0010a75:	83 c4 1c             	add    esp,0x1c
c0010a78:	c3                   	ret    

c0010a79 <SysRmdir(regs*)>:
c0010a79:	56                   	push   esi
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 20             	sub    esp,0x20
c0010a7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a82:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a85:	68 14 01 00 00       	push   0x114
c0010a8a:	e8 2a 6d ff ff       	call   c00077b9 <malloc>
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	89 c3                	mov    ebx,eax
c0010a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a9c:	50                   	push   eax
c0010a9d:	56                   	push   esi
c0010a9e:	53                   	push   ebx
c0010a9f:	e8 5a 9f ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0010aa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa7:	e8 8a a1 ff ff       	call   c000ac36 <File::unlink()>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	85 db                	test   ebx,ebx
c0010ab1:	74 14                	je     c0010ac7 <SysRmdir(regs*)+0x4e>
c0010ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	53                   	push   ebx
c0010abd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ac7:	85 c0                	test   eax,eax
c0010ac9:	0f 95 c0             	setne  al
c0010acc:	31 d2                	xor    edx,edx
c0010ace:	25 ff 00 00 00       	and    eax,0xff
c0010ad3:	f7 d8                	neg    eax
c0010ad5:	83 d2 00             	adc    edx,0x0
c0010ad8:	83 c4 14             	add    esp,0x14
c0010adb:	f7 da                	neg    edx
c0010add:	5b                   	pop    ebx
c0010ade:	5e                   	pop    esi
c0010adf:	c3                   	ret    

c0010ae0 <SysUnlink(regs*)>:
c0010ae0:	56                   	push   esi
c0010ae1:	53                   	push   ebx
c0010ae2:	83 ec 20             	sub    esp,0x20
c0010ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ae9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010aec:	68 14 01 00 00       	push   0x114
c0010af1:	e8 c3 6c ff ff       	call   c00077b9 <malloc>
c0010af6:	83 c4 0c             	add    esp,0xc
c0010af9:	89 c3                	mov    ebx,eax
c0010afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b03:	50                   	push   eax
c0010b04:	56                   	push   esi
c0010b05:	53                   	push   ebx
c0010b06:	e8 f3 9e ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0010b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0e:	e8 23 a1 ff ff       	call   c000ac36 <File::unlink()>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	85 db                	test   ebx,ebx
c0010b18:	74 14                	je     c0010b2e <SysUnlink(regs*)+0x4e>
c0010b1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	53                   	push   ebx
c0010b24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b27:	83 c4 10             	add    esp,0x10
c0010b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	0f 95 c0             	setne  al
c0010b33:	31 d2                	xor    edx,edx
c0010b35:	25 ff 00 00 00       	and    eax,0xff
c0010b3a:	f7 d8                	neg    eax
c0010b3c:	83 d2 00             	adc    edx,0x0
c0010b3f:	83 c4 14             	add    esp,0x14
c0010b42:	f7 da                	neg    edx
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	c3                   	ret    

c0010b47 <SysGetArgv(regs*)>:
c0010b47:	83 ec 0c             	sub    esp,0xc
c0010b4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b4e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b51:	85 c0                	test   eax,eax
c0010b53:	78 2c                	js     c0010b81 <SysGetArgv(regs*)+0x3a>
c0010b55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b5b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b5e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b64:	7d 1b                	jge    c0010b81 <SysGetArgv(regs*)+0x3a>
c0010b66:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010b6d:	85 c0                	test   eax,eax
c0010b6f:	74 18                	je     c0010b89 <SysGetArgv(regs*)+0x42>
c0010b71:	83 ec 08             	sub    esp,0x8
c0010b74:	50                   	push   eax
c0010b75:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010b78:	50                   	push   eax
c0010b79:	e8 82 fa fe ff       	call   c0000600 <strcpy>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	31 c0                	xor    eax,eax
c0010b83:	31 d2                	xor    edx,edx
c0010b85:	83 c4 0c             	add    esp,0xc
c0010b88:	c3                   	ret    
c0010b89:	b8 01 00 00 00       	mov    eax,0x1
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	c3                   	ret    

c0010b94 <SysUSleep(regs*)>:
c0010b94:	83 ec 1c             	sub    esp,0x1c
c0010b97:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b9b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b9e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010ba1:	6a 00                	push   0x0
c0010ba3:	6a 64                	push   0x64
c0010ba5:	52                   	push   edx
c0010ba6:	50                   	push   eax
c0010ba7:	e8 64 b0 00 00       	call   c001bc10 <__udivdi3>
c0010bac:	83 c4 14             	add    esp,0x14
c0010baf:	50                   	push   eax
c0010bb0:	e8 5f 2a 00 00       	call   c0013614 <milliTenthSleep(unsigned int)>
c0010bb5:	31 c0                	xor    eax,eax
c0010bb7:	31 d2                	xor    edx,edx
c0010bb9:	83 c4 1c             	add    esp,0x1c
c0010bbc:	c3                   	ret    

c0010bbd <SysSpawn(regs*)>:
c0010bbd:	56                   	push   esi
c0010bbe:	53                   	push   ebx
c0010bbf:	50                   	push   eax
c0010bc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bc7:	85 c0                	test   eax,eax
c0010bc9:	75 08                	jne    c0010bd3 <SysSpawn(regs*)+0x16>
c0010bcb:	59                   	pop    ecx
c0010bcc:	31 c0                	xor    eax,eax
c0010bce:	31 d2                	xor    edx,edx
c0010bd0:	5b                   	pop    ebx
c0010bd1:	5e                   	pop    esi
c0010bd2:	c3                   	ret    
c0010bd3:	83 ec 0c             	sub    esp,0xc
c0010bd6:	68 1f 07 00 00       	push   0x71f
c0010bdb:	e8 d9 6b ff ff       	call   c00077b9 <malloc>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	89 c6                	mov    esi,eax
c0010be5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010be8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010beb:	85 c0                	test   eax,eax
c0010bed:	75 33                	jne    c0010c22 <SysSpawn(regs*)+0x65>
c0010bef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf7:	52                   	push   edx
c0010bf8:	50                   	push   eax
c0010bf9:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010bfc:	53                   	push   ebx
c0010bfd:	56                   	push   esi
c0010bfe:	e8 f5 20 00 00       	call   c0012cf8 <Process::Process(char const*, Process*, char**)>
c0010c03:	83 c4 10             	add    esp,0x10
c0010c06:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c0d:	75 bc                	jne    c0010bcb <SysSpawn(regs*)+0xe>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	56                   	push   esi
c0010c13:	e8 d4 25 00 00       	call   c00131ec <Process::createUserThread()>
c0010c18:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	99                   	cdq    
c0010c1e:	59                   	pop    ecx
c0010c1f:	5b                   	pop    ebx
c0010c20:	5e                   	pop    esi
c0010c21:	c3                   	ret    
c0010c22:	31 c0                	xor    eax,eax
c0010c24:	eb d1                	jmp    c0010bf7 <SysSpawn(regs*)+0x3a>

c0010c26 <SysGetEnv(regs*)>:
c0010c26:	57                   	push   edi
c0010c27:	56                   	push   esi
c0010c28:	53                   	push   ebx
c0010c29:	83 ec 1c             	sub    esp,0x1c
c0010c2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c35:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c38:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c3e:	50                   	push   eax
c0010c3f:	e8 77 f3 ff ff       	call   c000ffbb <Krnl::getProcessTotalEnvCount(Process*)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	39 c7                	cmp    edi,eax
c0010c49:	7c 14                	jl     c0010c5f <SysGetEnv(regs*)+0x39>
c0010c4b:	85 f6                	test   esi,esi
c0010c4d:	75 0b                	jne    c0010c5a <SysGetEnv(regs*)+0x34>
c0010c4f:	83 c4 10             	add    esp,0x10
c0010c52:	31 c0                	xor    eax,eax
c0010c54:	5b                   	pop    ebx
c0010c55:	31 d2                	xor    edx,edx
c0010c57:	5e                   	pop    esi
c0010c58:	5f                   	pop    edi
c0010c59:	c3                   	ret    
c0010c5a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c5d:	eb f0                	jmp    c0010c4f <SysGetEnv(regs*)+0x29>
c0010c5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c63:	52                   	push   edx
c0010c64:	57                   	push   edi
c0010c65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c6b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010c6e:	51                   	push   ecx
c0010c6f:	50                   	push   eax
c0010c70:	e8 66 f3 ff ff       	call   c000ffdb <Krnl::getProcessEnvPair(Process*, int)>
c0010c75:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c80:	83 c4 0c             	add    esp,0xc
c0010c83:	85 db                	test   ebx,ebx
c0010c85:	75 23                	jne    c0010caa <SysGetEnv(regs*)+0x84>
c0010c87:	83 ec 0c             	sub    esp,0xc
c0010c8a:	50                   	push   eax
c0010c8b:	e8 b0 f8 fe ff       	call   c0000540 <strlen>
c0010c90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c93:	89 c3                	mov    ebx,eax
c0010c95:	e8 a6 f8 fe ff       	call   c0000540 <strlen>
c0010c9a:	31 d2                	xor    edx,edx
c0010c9c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010ca0:	83 c4 10             	add    esp,0x10
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	5b                   	pop    ebx
c0010ca7:	5e                   	pop    esi
c0010ca8:	5f                   	pop    edi
c0010ca9:	c3                   	ret    
c0010caa:	83 ec 08             	sub    esp,0x8
c0010cad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cb0:	50                   	push   eax
c0010cb1:	56                   	push   esi
c0010cb2:	e8 49 f9 fe ff       	call   c0000600 <strcpy>
c0010cb7:	58                   	pop    eax
c0010cb8:	5a                   	pop    edx
c0010cb9:	68 2b e2 01 c0       	push   0xc001e22b
c0010cbe:	56                   	push   esi
c0010cbf:	e8 fc fa fe ff       	call   c00007c0 <strcat>
c0010cc4:	59                   	pop    ecx
c0010cc5:	5b                   	pop    ebx
c0010cc6:	57                   	push   edi
c0010cc7:	56                   	push   esi
c0010cc8:	e8 f3 fa fe ff       	call   c00007c0 <strcat>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	e9 7a ff ff ff       	jmp    c0010c4f <SysGetEnv(regs*)+0x29>

c0010cd5 <SysSetFatAttrib(regs*)>:
c0010cd5:	57                   	push   edi
c0010cd6:	56                   	push   esi
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 1c             	sub    esp,0x1c
c0010cdb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010cdf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010ce2:	68 14 01 00 00       	push   0x114
c0010ce7:	e8 cd 6a ff ff       	call   c00077b9 <malloc>
c0010cec:	83 c4 0c             	add    esp,0xc
c0010cef:	89 c3                	mov    ebx,eax
c0010cf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cf6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cf9:	50                   	push   eax
c0010cfa:	57                   	push   edi
c0010cfb:	53                   	push   ebx
c0010cfc:	e8 fd 9c ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0010d01:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d04:	83 c4 0c             	add    esp,0xc
c0010d07:	0f b6 d4             	movzx  edx,ah
c0010d0a:	25 ff 00 00 00       	and    eax,0xff
c0010d0f:	52                   	push   edx
c0010d10:	50                   	push   eax
c0010d11:	53                   	push   ebx
c0010d12:	e8 b9 9f ff ff       	call   c000acd0 <File::chfatattr(unsigned char, unsigned char)>
c0010d17:	83 c4 10             	add    esp,0x10
c0010d1a:	85 db                	test   ebx,ebx
c0010d1c:	74 14                	je     c0010d32 <SysSetFatAttrib(regs*)+0x5d>
c0010d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	53                   	push   ebx
c0010d28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d2b:	83 c4 10             	add    esp,0x10
c0010d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d32:	85 c0                	test   eax,eax
c0010d34:	0f 95 c0             	setne  al
c0010d37:	31 d2                	xor    edx,edx
c0010d39:	25 ff 00 00 00       	and    eax,0xff
c0010d3e:	f7 d8                	neg    eax
c0010d40:	83 d2 00             	adc    edx,0x0
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	f7 da                	neg    edx
c0010d48:	5b                   	pop    ebx
c0010d49:	5e                   	pop    esi
c0010d4a:	5f                   	pop    edi
c0010d4b:	c3                   	ret    

c0010d4c <SysPipe(regs*)>:
c0010d4c:	57                   	push   edi
c0010d4d:	56                   	push   esi
c0010d4e:	53                   	push   ebx
c0010d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d53:	83 ec 0c             	sub    esp,0xc
c0010d56:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d59:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d5c:	6a 20                	push   0x20
c0010d5e:	e8 56 6a ff ff       	call   c00077b9 <malloc>
c0010d63:	89 c3                	mov    ebx,eax
c0010d65:	58                   	pop    eax
c0010d66:	5a                   	pop    edx
c0010d67:	68 00 50 00 00       	push   0x5000
c0010d6c:	53                   	push   ebx
c0010d6d:	e8 4c 73 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d75:	e8 70 80 ff ff       	call   c0008dea <UnixFile::getFileDescriptor()>
c0010d7a:	89 07                	mov    DWORD PTR [edi],eax
c0010d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7f:	e8 66 80 ff ff       	call   c0008dea <UnixFile::getFileDescriptor()>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	89 06                	mov    DWORD PTR [esi],eax
c0010d89:	31 d2                	xor    edx,edx
c0010d8b:	5b                   	pop    ebx
c0010d8c:	31 c0                	xor    eax,eax
c0010d8e:	5e                   	pop    esi
c0010d8f:	5f                   	pop    edi
c0010d90:	c3                   	ret    

c0010d91 <SysGetUnixTime(regs*)>:
c0010d91:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0010d96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010da0:	e9 69 a6 ff ff       	jmp    c000b40e <Clock::timeInSecondsLocal()>

c0010da5 <string_ends_with(char const*, char const*)>:
c0010da5:	57                   	push   edi
c0010da6:	56                   	push   esi
c0010da7:	53                   	push   ebx
c0010da8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	53                   	push   ebx
c0010db4:	e8 87 f7 fe ff       	call   c0000540 <strlen>
c0010db9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010dbc:	89 c6                	mov    esi,eax
c0010dbe:	e8 7d f7 fe ff       	call   c0000540 <strlen>
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	39 c6                	cmp    esi,eax
c0010dc8:	7d 06                	jge    c0010dd0 <string_ends_with(char const*, char const*)+0x2b>
c0010dca:	5b                   	pop    ebx
c0010dcb:	31 c0                	xor    eax,eax
c0010dcd:	5e                   	pop    esi
c0010dce:	5f                   	pop    edi
c0010dcf:	c3                   	ret    
c0010dd0:	83 ec 08             	sub    esp,0x8
c0010dd3:	29 c6                	sub    esi,eax
c0010dd5:	57                   	push   edi
c0010dd6:	01 f3                	add    ebx,esi
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 02 f9 fe ff       	call   c00006e0 <strcmp>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	85 c0                	test   eax,eax
c0010de3:	5b                   	pop    ebx
c0010de4:	0f 94 c0             	sete   al
c0010de7:	5e                   	pop    esi
c0010de8:	25 ff 00 00 00       	and    eax,0xff
c0010ded:	5f                   	pop    edi
c0010dee:	c3                   	ret    

c0010def <SysOpen(regs*)>:
c0010def:	56                   	push   esi
c0010df0:	53                   	push   ebx
c0010df1:	81 ec 04 01 00 00    	sub    esp,0x104
c0010df7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010dfe:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e01:	85 c9                	test   ecx,ecx
c0010e03:	0f 84 b9 01 00 00    	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010e09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	0f 84 ae 01 00 00    	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010e14:	52                   	push   edx
c0010e15:	68 2d e2 01 c0       	push   0xc001e22d
c0010e1a:	50                   	push   eax
c0010e1b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e1f:	56                   	push   esi
c0010e20:	e8 2f 9a ff ff       	call   c000a854 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e25:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e28:	e8 13 f7 fe ff       	call   c0000540 <strlen>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	48                   	dec    eax
c0010e31:	74 1d                	je     c0010e50 <SysOpen(regs*)+0x61>
c0010e33:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e36:	eb 0f                	jmp    c0010e47 <SysOpen(regs*)+0x58>
c0010e38:	80 fa 3a             	cmp    dl,0x3a
c0010e3b:	74 0f                	je     c0010e4c <SysOpen(regs*)+0x5d>
c0010e3d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e41:	48                   	dec    eax
c0010e42:	74 0c                	je     c0010e50 <SysOpen(regs*)+0x61>
c0010e44:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e47:	80 fa 2e             	cmp    dl,0x2e
c0010e4a:	75 ec                	jne    c0010e38 <SysOpen(regs*)+0x49>
c0010e4c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 31 e2 01 c0       	push   0xc001e231
c0010e58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e5b:	50                   	push   eax
c0010e5c:	e8 44 ff ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	85 c0                	test   eax,eax
c0010e66:	74 1d                	je     c0010e85 <SysOpen(regs*)+0x96>
c0010e68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e6b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e78:	81 c4 04 01 00 00    	add    esp,0x104
c0010e7e:	31 c0                	xor    eax,eax
c0010e80:	31 d2                	xor    edx,edx
c0010e82:	5b                   	pop    ebx
c0010e83:	5e                   	pop    esi
c0010e84:	c3                   	ret    
c0010e85:	83 ec 08             	sub    esp,0x8
c0010e88:	68 36 e2 01 c0       	push   0xc001e236
c0010e8d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e90:	50                   	push   eax
c0010e91:	e8 0f ff ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	85 c0                	test   eax,eax
c0010e9b:	75 cb                	jne    c0010e68 <SysOpen(regs*)+0x79>
c0010e9d:	83 ec 08             	sub    esp,0x8
c0010ea0:	68 32 e2 01 c0       	push   0xc001e232
c0010ea5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ea8:	50                   	push   eax
c0010ea9:	e8 32 f8 fe ff       	call   c00006e0 <strcmp>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	85 c0                	test   eax,eax
c0010eb3:	74 b3                	je     c0010e68 <SysOpen(regs*)+0x79>
c0010eb5:	83 ec 08             	sub    esp,0x8
c0010eb8:	68 31 e2 01 c0       	push   0xc001e231
c0010ebd:	56                   	push   esi
c0010ebe:	e8 e2 fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	85 c0                	test   eax,eax
c0010ec8:	75 9e                	jne    c0010e68 <SysOpen(regs*)+0x79>
c0010eca:	83 ec 08             	sub    esp,0x8
c0010ecd:	68 3b e2 01 c0       	push   0xc001e23b
c0010ed2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ed5:	50                   	push   eax
c0010ed6:	e8 ca fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	85 c0                	test   eax,eax
c0010ee0:	0f 85 ef 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	68 40 e2 01 c0       	push   0xc001e240
c0010eee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ef1:	50                   	push   eax
c0010ef2:	e8 ae fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	85 c0                	test   eax,eax
c0010efc:	0f 85 d3 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	68 3c e2 01 c0       	push   0xc001e23c
c0010f0a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f0d:	51                   	push   ecx
c0010f0e:	e8 cd f7 fe ff       	call   c00006e0 <strcmp>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	85 c0                	test   eax,eax
c0010f18:	0f 84 b7 00 00 00    	je     c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f1e:	83 ec 08             	sub    esp,0x8
c0010f21:	68 3b e2 01 c0       	push   0xc001e23b
c0010f26:	56                   	push   esi
c0010f27:	e8 79 fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	85 c0                	test   eax,eax
c0010f31:	0f 85 9e 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f37:	83 ec 0c             	sub    esp,0xc
c0010f3a:	68 14 01 00 00       	push   0x114
c0010f3f:	e8 75 68 ff ff       	call   c00077b9 <malloc>
c0010f44:	83 c4 0c             	add    esp,0xc
c0010f47:	89 c6                	mov    esi,eax
c0010f49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f51:	50                   	push   eax
c0010f52:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f55:	52                   	push   edx
c0010f56:	56                   	push   esi
c0010f57:	e8 a2 9a ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	85 f6                	test   esi,esi
c0010f61:	74 5f                	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010f63:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f66:	89 d0                	mov    eax,edx
c0010f68:	25 ff 00 00 00       	and    eax,0xff
c0010f6d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f70:	89 d0                	mov    eax,edx
c0010f72:	83 e0 01             	and    eax,0x1
c0010f75:	f6 c2 02             	test   dl,0x2
c0010f78:	74 03                	je     c0010f7d <SysOpen(regs*)+0x18e>
c0010f7a:	83 c8 02             	or     eax,0x2
c0010f7d:	f6 c2 04             	test   dl,0x4
c0010f80:	74 03                	je     c0010f85 <SysOpen(regs*)+0x196>
c0010f82:	83 c8 04             	or     eax,0x4
c0010f85:	f6 c2 08             	test   dl,0x8
c0010f88:	74 03                	je     c0010f8d <SysOpen(regs*)+0x19e>
c0010f8a:	83 c8 0a             	or     eax,0xa
c0010f8d:	83 e2 10             	and    edx,0x10
c0010f90:	74 03                	je     c0010f95 <SysOpen(regs*)+0x1a6>
c0010f92:	83 c8 12             	or     eax,0x12
c0010f95:	83 ec 08             	sub    esp,0x8
c0010f98:	50                   	push   eax
c0010f99:	56                   	push   esi
c0010f9a:	e8 1f 9b ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	85 c0                	test   eax,eax
c0010fa4:	75 1c                	jne    c0010fc2 <SysOpen(regs*)+0x1d3>
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	56                   	push   esi
c0010faa:	e8 3b 7e ff ff       	call   c0008dea <UnixFile::getFileDescriptor()>
c0010faf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fb2:	83 c4 10             	add    esp,0x10
c0010fb5:	89 02                	mov    DWORD PTR [edx],eax
c0010fb7:	c1 f8 1f             	sar    eax,0x1f
c0010fba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010fbd:	e9 b6 fe ff ff       	jmp    c0010e78 <SysOpen(regs*)+0x89>
c0010fc2:	81 c4 04 01 00 00    	add    esp,0x104
c0010fc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fd2:	5b                   	pop    ebx
c0010fd3:	5e                   	pop    esi
c0010fd4:	c3                   	ret    
c0010fd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fd8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010fde:	e9 8e fe ff ff       	jmp    c0010e71 <SysOpen(regs*)+0x82>

c0010fe3 <KeSystemCall(regs*, void*)>:
c0010fe3:	53                   	push   ebx
c0010fe4:	83 ec 10             	sub    esp,0x10
c0010fe7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010feb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fee:	68 45 e2 01 c0       	push   0xc001e245
c0010ff3:	e8 90 94 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0010ff8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ffb:	83 c4 10             	add    esp,0x10
c0010ffe:	83 f8 31             	cmp    eax,0x31
c0011001:	77 16                	ja     c0011019 <KeSystemCall(regs*, void*)+0x36>
c0011003:	8b 14 85 60 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0ca0]
c001100a:	85 d2                	test   edx,edx
c001100c:	74 0b                	je     c0011019 <KeSystemCall(regs*, void*)+0x36>
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	53                   	push   ebx
c0011012:	ff d2                	call   edx
c0011014:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011017:	eb 0d                	jmp    c0011026 <KeSystemCall(regs*, void*)+0x43>
c0011019:	52                   	push   edx
c001101a:	52                   	push   edx
c001101b:	50                   	push   eax
c001101c:	68 55 e2 01 c0       	push   0xc001e255
c0011021:	e8 62 94 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001102e:	31 d2                	xor    edx,edx
c0011030:	83 c4 08             	add    esp,0x8
c0011033:	5b                   	pop    ebx
c0011034:	c3                   	ret    

c0011035 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011035:	55                   	push   ebp
c0011036:	57                   	push   edi
c0011037:	56                   	push   esi
c0011038:	53                   	push   ebx
c0011039:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001103f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011046:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011048:	8d 6e 01             	lea    ebp,[esi+0x1]
c001104b:	80 fb 40             	cmp    bl,0x40
c001104e:	75 1b                	jne    c001106b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011050:	8a 16                	mov    dl,BYTE PTR [esi]
c0011052:	84 d2                	test   dl,dl
c0011054:	0f 84 f1 00 00 00    	je     c001114b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001105a:	8d 46 01             	lea    eax,[esi+0x1]
c001105d:	80 fa 3a             	cmp    dl,0x3a
c0011060:	74 04                	je     c0011066 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011062:	89 c6                	mov    esi,eax
c0011064:	eb ea                	jmp    c0011050 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011066:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011069:	89 c6                	mov    esi,eax
c001106b:	50                   	push   eax
c001106c:	6a 40                	push   0x40
c001106e:	6a 00                	push   0x0
c0011070:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011074:	50                   	push   eax
c0011075:	e8 56 f4 fe ff       	call   c00004d0 <memset>
c001107a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011081:	31 c0                	xor    eax,eax
c0011083:	83 c4 10             	add    esp,0x10
c0011086:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011088:	84 c9                	test   cl,cl
c001108a:	0f 84 bb 00 00 00    	je     c001114b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011090:	3d c7 00 00 00       	cmp    eax,0xc7
c0011095:	0f 8f b0 00 00 00    	jg     c001114b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001109b:	80 f9 0a             	cmp    cl,0xa
c001109e:	0f 85 98 00 00 00    	jne    c001113c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00110a4:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00110a9:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00110ad:	a8 df                	test   al,0xdf
c00110af:	0f 94 c1             	sete   cl
c00110b2:	3c 23                	cmp    al,0x23
c00110b4:	0f 94 c2             	sete   dl
c00110b7:	08 d1                	or     cl,dl
c00110b9:	75 4a                	jne    c0011105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110bb:	8d 50 f7             	lea    edx,[eax-0x9]
c00110be:	80 fa 01             	cmp    dl,0x1
c00110c1:	76 42                	jbe    c0011105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110c3:	3c 5b                	cmp    al,0x5b
c00110c5:	75 42                	jne    c0011109 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00110c7:	80 fb 40             	cmp    bl,0x40
c00110ca:	75 39                	jne    c0011105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110cc:	83 ec 0c             	sub    esp,0xc
c00110cf:	8d 54 24 65          	lea    edx,[esp+0x65]
c00110d3:	52                   	push   edx
c00110d4:	e8 67 f4 fe ff       	call   c0000540 <strlen>
c00110d9:	83 c4 10             	add    esp,0x10
c00110dc:	83 f8 3f             	cmp    eax,0x3f
c00110df:	77 6a                	ja     c001114b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110e1:	50                   	push   eax
c00110e2:	50                   	push   eax
c00110e3:	8d 54 24 61          	lea    edx,[esp+0x61]
c00110e7:	52                   	push   edx
c00110e8:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110ec:	52                   	push   edx
c00110ed:	e8 0e f5 fe ff       	call   c0000600 <strcpy>
c00110f2:	58                   	pop    eax
c00110f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110f7:	52                   	push   edx
c00110f8:	e8 43 f4 fe ff       	call   c0000540 <strlen>
c00110fd:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	31 d2                	xor    edx,edx
c0011107:	eb 3a                	jmp    c0011143 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011109:	80 fb 40             	cmp    bl,0x40
c001110c:	74 06                	je     c0011114 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001110e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011112:	eb 20                	jmp    c0011134 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011114:	50                   	push   eax
c0011115:	50                   	push   eax
c0011116:	55                   	push   ebp
c0011117:	8d 44 24 24          	lea    eax,[esp+0x24]
c001111b:	50                   	push   eax
c001111c:	e8 bf f5 fe ff       	call   c00006e0 <strcmp>
c0011121:	83 c4 10             	add    esp,0x10
c0011124:	85 c0                	test   eax,eax
c0011126:	75 dd                	jne    c0011105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011128:	eb e4                	jmp    c001110e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001112a:	8d 50 01             	lea    edx,[eax+0x1]
c001112d:	80 f9 3d             	cmp    cl,0x3d
c0011130:	74 1d                	je     c001114f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011132:	89 d0                	mov    eax,edx
c0011134:	8a 08                	mov    cl,BYTE PTR [eax]
c0011136:	84 c9                	test   cl,cl
c0011138:	75 f0                	jne    c001112a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001113a:	eb 0f                	jmp    c001114b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001113c:	8d 50 01             	lea    edx,[eax+0x1]
c001113f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011143:	47                   	inc    edi
c0011144:	89 d0                	mov    eax,edx
c0011146:	e9 3b ff ff ff       	jmp    c0011086 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001114b:	31 c0                	xor    eax,eax
c001114d:	eb 33                	jmp    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001114f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011153:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011156:	50                   	push   eax
c0011157:	50                   	push   eax
c0011158:	8d 44 24 60          	lea    eax,[esp+0x60]
c001115c:	50                   	push   eax
c001115d:	56                   	push   esi
c001115e:	e8 7d f5 fe ff       	call   c00006e0 <strcmp>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	85 c0                	test   eax,eax
c0011168:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001116c:	75 97                	jne    c0011105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001116e:	51                   	push   ecx
c001116f:	51                   	push   ecx
c0011170:	52                   	push   edx
c0011171:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011178:	e8 83 f4 fe ff       	call   c0000600 <strcpy>
c001117d:	83 c4 10             	add    esp,0x10
c0011180:	b0 01                	mov    al,0x1
c0011182:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011188:	5b                   	pop    ebx
c0011189:	5e                   	pop    esi
c001118a:	5f                   	pop    edi
c001118b:	5d                   	pop    ebp
c001118c:	c3                   	ret    

c001118d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001118d:	57                   	push   edi
c001118e:	56                   	push   esi
c001118f:	53                   	push   ebx
c0011190:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011196:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001119d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00111a4:	53                   	push   ebx
c00111a5:	e8 96 f3 fe ff       	call   c0000540 <strlen>
c00111aa:	89 34 24             	mov    DWORD PTR [esp],esi
c00111ad:	89 c7                	mov    edi,eax
c00111af:	e8 8c f3 fe ff       	call   c0000540 <strlen>
c00111b4:	83 c4 10             	add    esp,0x10
c00111b7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00111bb:	3d ff 00 00 00       	cmp    eax,0xff
c00111c0:	0f 87 d3 00 00 00    	ja     c0011299 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111c6:	57                   	push   edi
c00111c7:	57                   	push   edi
c00111c8:	56                   	push   esi
c00111c9:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00111cd:	56                   	push   esi
c00111ce:	e8 2d f4 fe ff       	call   c0000600 <strcpy>
c00111d3:	58                   	pop    eax
c00111d4:	5a                   	pop    edx
c00111d5:	68 06 e5 01 c0       	push   0xc001e506
c00111da:	56                   	push   esi
c00111db:	e8 e0 f5 fe ff       	call   c00007c0 <strcat>
c00111e0:	59                   	pop    ecx
c00111e1:	5f                   	pop    edi
c00111e2:	53                   	push   ebx
c00111e3:	56                   	push   esi
c00111e4:	e8 d7 f5 fe ff       	call   c00007c0 <strcat>
c00111e9:	58                   	pop    eax
c00111ea:	5a                   	pop    edx
c00111eb:	68 69 e2 01 c0       	push   0xc001e269
c00111f0:	56                   	push   esi
c00111f1:	e8 ca f5 fe ff       	call   c00007c0 <strcat>
c00111f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00111fd:	e8 b7 65 ff ff       	call   c00077b9 <malloc>
c0011202:	83 c4 0c             	add    esp,0xc
c0011205:	89 c3                	mov    ebx,eax
c0011207:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c001120d:	56                   	push   esi
c001120e:	50                   	push   eax
c001120f:	e8 ea 97 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	85 db                	test   ebx,ebx
c0011219:	74 7e                	je     c0011299 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001121b:	51                   	push   ecx
c001121c:	51                   	push   ecx
c001121d:	6a 01                	push   0x1
c001121f:	53                   	push   ebx
c0011220:	e8 99 98 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	85 c0                	test   eax,eax
c001122a:	74 08                	je     c0011234 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011231:	53                   	push   ebx
c0011232:	eb 5f                	jmp    c0011293 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011234:	52                   	push   edx
c0011235:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011239:	50                   	push   eax
c001123a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001123e:	50                   	push   eax
c001123f:	53                   	push   ebx
c0011240:	e8 25 9b ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c0011245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011249:	83 c4 10             	add    esp,0x10
c001124c:	89 c1                	mov    ecx,eax
c001124e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011252:	74 31                	je     c0011285 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011254:	83 ec 0c             	sub    esp,0xc
c0011257:	50                   	push   eax
c0011258:	e8 5c 65 ff ff       	call   c00077b9 <malloc>
c001125d:	89 c6                	mov    esi,eax
c001125f:	58                   	pop    eax
c0011260:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011262:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011266:	52                   	push   edx
c0011267:	56                   	push   esi
c0011268:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001126c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011270:	53                   	push   ebx
c0011271:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011274:	83 c4 20             	add    esp,0x20
c0011277:	85 c0                	test   eax,eax
c0011279:	75 0a                	jne    c0011285 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001127b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001127f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011283:	74 18                	je     c001129d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011285:	83 ec 0c             	sub    esp,0xc
c0011288:	53                   	push   ebx
c0011289:	e8 8e 98 ff ff       	call   c000ab1c <File::close()>
c001128e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011293:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	31 c0                	xor    eax,eax
c001129b:	eb 3b                	jmp    c00112d8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	53                   	push   ebx
c00112a1:	e8 76 98 ff ff       	call   c000ab1c <File::close()>
c00112a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ae:	83 c4 0c             	add    esp,0xc
c00112b1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112b8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00112bf:	56                   	push   esi
c00112c0:	e8 70 fd ff ff       	call   c0011035 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00112c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00112c8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00112cc:	e8 f8 64 ff ff       	call   c00077c9 <free>
c00112d1:	83 c4 10             	add    esp,0x10
c00112d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00112d8:	81 c4 20 01 00 00    	add    esp,0x120
c00112de:	5b                   	pop    ebx
c00112df:	5e                   	pop    esi
c00112e0:	5f                   	pop    edi
c00112e1:	c3                   	ret    

c00112e2 <Reg::getLine(char*, char*, char*)>:
c00112e2:	57                   	push   edi
c00112e3:	56                   	push   esi
c00112e4:	53                   	push   ebx
c00112e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00112ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	68 6e e2 01 c0       	push   0xc001e26e
c00112f9:	e8 8f fe ff ff       	call   c001118d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112fe:	83 c4 10             	add    esp,0x10
c0011301:	84 c0                	test   al,al
c0011303:	75 10                	jne    c0011315 <Reg::getLine(char*, char*, char*)+0x33>
c0011305:	57                   	push   edi
c0011306:	56                   	push   esi
c0011307:	53                   	push   ebx
c0011308:	68 93 e2 01 c0       	push   0xc001e293
c001130d:	e8 7b fe ff ff       	call   c001118d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	5b                   	pop    ebx
c0011316:	5e                   	pop    esi
c0011317:	5f                   	pop    edi
c0011318:	c3                   	ret    

c0011319 <Reg::readInt(char*, char*, int*)>:
c0011319:	55                   	push   ebp
c001131a:	57                   	push   edi
c001131b:	56                   	push   esi
c001131c:	53                   	push   ebx
c001131d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011323:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011327:	57                   	push   edi
c0011328:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001132f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011336:	e8 a7 ff ff ff       	call   c00112e2 <Reg::getLine(char*, char*, char*)>
c001133b:	83 c4 10             	add    esp,0x10
c001133e:	84 c0                	test   al,al
c0011340:	0f 84 b3 00 00 00    	je     c00113f9 <Reg::readInt(char*, char*, int*)+0xe0>
c0011346:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001134a:	80 fa 2b             	cmp    dl,0x2b
c001134d:	74 0c                	je     c001135b <Reg::readInt(char*, char*, int*)+0x42>
c001134f:	80 fa 2d             	cmp    dl,0x2d
c0011352:	75 0e                	jne    c0011362 <Reg::readInt(char*, char*, int*)+0x49>
c0011354:	ba 01 00 00 00       	mov    edx,0x1
c0011359:	eb 0b                	jmp    c0011366 <Reg::readInt(char*, char*, int*)+0x4d>
c001135b:	ba 01 00 00 00       	mov    edx,0x1
c0011360:	eb 02                	jmp    c0011364 <Reg::readInt(char*, char*, int*)+0x4b>
c0011362:	31 d2                	xor    edx,edx
c0011364:	31 c0                	xor    eax,eax
c0011366:	be 0a 00 00 00       	mov    esi,0xa
c001136b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011370:	75 20                	jne    c0011392 <Reg::readInt(char*, char*, int*)+0x79>
c0011372:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011376:	80 f9 78             	cmp    cl,0x78
c0011379:	75 0a                	jne    c0011385 <Reg::readInt(char*, char*, int*)+0x6c>
c001137b:	83 c2 02             	add    edx,0x2
c001137e:	be 10 00 00 00       	mov    esi,0x10
c0011383:	eb 0d                	jmp    c0011392 <Reg::readInt(char*, char*, int*)+0x79>
c0011385:	80 f9 62             	cmp    cl,0x62
c0011388:	75 08                	jne    c0011392 <Reg::readInt(char*, char*, int*)+0x79>
c001138a:	83 c2 02             	add    edx,0x2
c001138d:	be 02 00 00 00       	mov    esi,0x2
c0011392:	01 d7                	add    edi,edx
c0011394:	31 d2                	xor    edx,edx
c0011396:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011398:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001139c:	80 fb 0d             	cmp    bl,0xd
c001139f:	0f 94 c3             	sete   bl
c00113a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00113a7:	0f 94 c1             	sete   cl
c00113aa:	08 cb                	or     bl,cl
c00113ac:	75 3a                	jne    c00113e8 <Reg::readInt(char*, char*, int*)+0xcf>
c00113ae:	0f af d6             	imul   edx,esi
c00113b1:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00113b6:	83 fe 10             	cmp    esi,0x10
c00113b9:	75 26                	jne    c00113e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00113bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113bf:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00113c2:	89 e9                	mov    ecx,ebp
c00113c4:	80 f9 05             	cmp    cl,0x5
c00113c7:	77 06                	ja     c00113cf <Reg::readInt(char*, char*, int*)+0xb6>
c00113c9:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00113cd:	eb 16                	jmp    c00113e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00113cf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113d3:	83 e9 61             	sub    ecx,0x61
c00113d6:	80 f9 05             	cmp    cl,0x5
c00113d9:	77 06                	ja     c00113e1 <Reg::readInt(char*, char*, int*)+0xc8>
c00113db:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00113df:	eb 04                	jmp    c00113e5 <Reg::readInt(char*, char*, int*)+0xcc>
c00113e1:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00113e5:	47                   	inc    edi
c00113e6:	eb ae                	jmp    c0011396 <Reg::readInt(char*, char*, int*)+0x7d>
c00113e8:	84 c0                	test   al,al
c00113ea:	74 02                	je     c00113ee <Reg::readInt(char*, char*, int*)+0xd5>
c00113ec:	f7 da                	neg    edx
c00113ee:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00113f5:	89 10                	mov    DWORD PTR [eax],edx
c00113f7:	88 d8                	mov    al,bl
c00113f9:	81 c4 ec 00 00 00    	add    esp,0xec
c00113ff:	5b                   	pop    ebx
c0011400:	5e                   	pop    esi
c0011401:	5f                   	pop    edi
c0011402:	5d                   	pop    ebp
c0011403:	c3                   	ret    

c0011404 <Reg::readString(char*, char*, char*, int)>:
c0011404:	57                   	push   edi
c0011405:	56                   	push   esi
c0011406:	53                   	push   ebx
c0011407:	81 ec d4 00 00 00    	sub    esp,0xd4
c001140d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011414:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011418:	57                   	push   edi
c0011419:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011420:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011427:	e8 b6 fe ff ff       	call   c00112e2 <Reg::getLine(char*, char*, char*)>
c001142c:	83 c4 10             	add    esp,0x10
c001142f:	89 c6                	mov    esi,eax
c0011431:	84 c0                	test   al,al
c0011433:	74 44                	je     c0011479 <Reg::readString(char*, char*, char*, int)+0x75>
c0011435:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001143c:	31 c0                	xor    eax,eax
c001143e:	4a                   	dec    edx
c001143f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011442:	84 c9                	test   cl,cl
c0011444:	74 0f                	je     c0011455 <Reg::readString(char*, char*, char*, int)+0x51>
c0011446:	39 c2                	cmp    edx,eax
c0011448:	7e 0b                	jle    c0011455 <Reg::readString(char*, char*, char*, int)+0x51>
c001144a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001144d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011452:	40                   	inc    eax
c0011453:	eb ea                	jmp    c001143f <Reg::readString(char*, char*, char*, int)+0x3b>
c0011455:	83 ec 0c             	sub    esp,0xc
c0011458:	53                   	push   ebx
c0011459:	e8 e2 f0 fe ff       	call   c0000540 <strlen>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011466:	75 11                	jne    c0011479 <Reg::readString(char*, char*, char*, int)+0x75>
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	53                   	push   ebx
c001146c:	e8 cf f0 fe ff       	call   c0000540 <strlen>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011479:	81 c4 d0 00 00 00    	add    esp,0xd0
c001147f:	89 f0                	mov    eax,esi
c0011481:	5b                   	pop    ebx
c0011482:	5e                   	pop    esi
c0011483:	5f                   	pop    edi
c0011484:	c3                   	ret    

c0011485 <Reg::readBool(char*, char*, bool*)>:
c0011485:	83 ec 20             	sub    esp,0x20
c0011488:	8d 44 24 10          	lea    eax,[esp+0x10]
c001148c:	50                   	push   eax
c001148d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011491:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011495:	e8 7f fe ff ff       	call   c0011319 <Reg::readInt(char*, char*, int*)>
c001149a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001149f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00114a3:	0f 95 02             	setne  BYTE PTR [edx]
c00114a6:	83 c4 2c             	add    esp,0x2c
c00114a9:	c3                   	ret    

c00114aa <Reg::readBoolWithDefault(char*, char*, bool)>:
c00114aa:	53                   	push   ebx
c00114ab:	83 ec 1c             	sub    esp,0x1c
c00114ae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00114b2:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114b6:	50                   	push   eax
c00114b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114bf:	e8 c1 ff ff ff       	call   c0011485 <Reg::readBool(char*, char*, bool*)>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	84 c0                	test   al,al
c00114c9:	74 04                	je     c00114cf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00114cb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00114cf:	88 d8                	mov    al,bl
c00114d1:	83 c4 18             	add    esp,0x18
c00114d4:	5b                   	pop    ebx
c00114d5:	c3                   	ret    

c00114d6 <Reg::readIntWithDefault(char*, char*, int)>:
c00114d6:	53                   	push   ebx
c00114d7:	83 ec 1c             	sub    esp,0x1c
c00114da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114de:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114e2:	50                   	push   eax
c00114e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114eb:	e8 29 fe ff ff       	call   c0011319 <Reg::readInt(char*, char*, int*)>
c00114f0:	83 c4 10             	add    esp,0x10
c00114f3:	84 c0                	test   al,al
c00114f5:	74 04                	je     c00114fb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00114f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114fb:	89 d8                	mov    eax,ebx
c00114fd:	83 c4 18             	add    esp,0x18
c0011500:	5b                   	pop    ebx
c0011501:	c3                   	ret    

c0011502 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011502:	57                   	push   edi
c0011503:	56                   	push   esi
c0011504:	56                   	push   esi
c0011505:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011509:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001150d:	56                   	push   esi
c001150e:	57                   	push   edi
c001150f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011517:	e8 e8 fe ff ff       	call   c0011404 <Reg::readString(char*, char*, char*, int)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	84 c0                	test   al,al
c0011521:	75 1a                	jne    c001153d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011523:	51                   	push   ecx
c0011524:	56                   	push   esi
c0011525:	6a 00                	push   0x0
c0011527:	57                   	push   edi
c0011528:	e8 a3 ef fe ff       	call   c00004d0 <memset>
c001152d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011530:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011534:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001153d:	89 f8                	mov    eax,edi
c001153f:	5a                   	pop    edx
c0011540:	5e                   	pop    esi
c0011541:	5f                   	pop    edi
c0011542:	c3                   	ret    

c0011543 <SysEject(regs*)>:
c0011543:	83 ec 0c             	sub    esp,0xc
c0011546:	83 ca ff             	or     edx,0xffffffff
c0011549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011550:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011555:	83 e9 41             	sub    ecx,0x41
c0011558:	83 f9 19             	cmp    ecx,0x19
c001155b:	77 18                	ja     c0011575 <SysEject(regs*)+0x32>
c001155d:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c0011564:	85 c9                	test   ecx,ecx
c0011566:	74 0d                	je     c0011575 <SysEject(regs*)+0x32>
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	51                   	push   ecx
c001156c:	e8 ab b5 ff ff       	call   c000cb1c <LogicalDisk::eject()>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	99                   	cdq    
c0011575:	83 c4 0c             	add    esp,0xc
c0011578:	c3                   	ret    

c0011579 <SysExit(regs*)>:
c0011579:	83 ec 18             	sub    esp,0x18
c001157c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011580:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011583:	e8 b0 26 00 00       	call   c0013c38 <terminateTask(int)>
c0011588:	83 c8 ff             	or     eax,0xffffffff
c001158b:	83 c4 1c             	add    esp,0x1c
c001158e:	89 c2                	mov    edx,eax
c0011590:	c3                   	ret    

c0011591 <SysGetCwd(regs*)>:
c0011591:	83 ec 10             	sub    esp,0x10
c0011594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011598:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001159b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001159e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115a3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00115a6:	e8 55 92 ff ff       	call   c000a800 <Fs::getcwd(Process*, char*, int)>
c00115ab:	83 c4 1c             	add    esp,0x1c
c00115ae:	99                   	cdq    
c00115af:	c3                   	ret    

c00115b0 <SysGetPID(regs*)>:
c00115b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00115ba:	99                   	cdq    
c00115bb:	c3                   	ret    

c00115bc <SysGetRAMData(regs*)>:
c00115bc:	8b 0d 88 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020488
c00115c2:	69 05 84 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020484,0xc8
c00115cc:	99                   	cdq    
c00115cd:	f7 f9                	idiv   ecx
c00115cf:	c1 e0 18             	shl    eax,0x18
c00115d2:	09 c8                	or     eax,ecx
c00115d4:	99                   	cdq    
c00115d5:	c3                   	ret    

c00115d6 <SysGetVGAPtr(regs*)>:
c00115d6:	55                   	push   ebp
c00115d7:	57                   	push   edi
c00115d8:	56                   	push   esi
c00115d9:	53                   	push   ebx
c00115da:	83 ec 18             	sub    esp,0x18
c00115dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00115e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00115e4:	e8 4f 21 00 00       	call   c0013738 <Thr::processFromPID(int)>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	89 c1                	mov    ecx,eax
c00115ee:	b8 01 00 00 00       	mov    eax,0x1
c00115f3:	85 c9                	test   ecx,ecx
c00115f5:	74 57                	je     c001164e <SysGetVGAPtr(regs*)+0x78>
c00115f7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00115fd:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011601:	74 0c                	je     c001160f <SysGetVGAPtr(regs*)+0x39>
c0011603:	83 ec 0c             	sub    esp,0xc
c0011606:	55                   	push   ebp
c0011607:	e8 eb 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011612:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011615:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001161a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001161c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001161f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011622:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011628:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001162b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001162e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011634:	50                   	push   eax
c0011635:	50                   	push   eax
c0011636:	68 ae e2 01 c0       	push   0xc001e2ae
c001163b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001163e:	05 a8 0f 00 00       	add    eax,0xfa8
c0011643:	50                   	push   eax
c0011644:	e8 b7 ef fe ff       	call   c0000600 <strcpy>
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	31 c0                	xor    eax,eax
c001164e:	83 c4 0c             	add    esp,0xc
c0011651:	31 d2                	xor    edx,edx
c0011653:	5b                   	pop    ebx
c0011654:	5e                   	pop    esi
c0011655:	5f                   	pop    edi
c0011656:	5d                   	pop    ebp
c0011657:	c3                   	ret    

c0011658 <SysLoadDLL(regs*)>:
c0011658:	56                   	push   esi
c0011659:	53                   	push   ebx
c001165a:	31 d2                	xor    edx,edx
c001165c:	51                   	push   ecx
c001165d:	b8 01 00 00 00       	mov    eax,0x1
c0011662:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011666:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001166a:	0f 84 8c 00 00 00    	je     c00116fc <SysLoadDLL(regs*)+0xa4>
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	68 14 01 00 00       	push   0x114
c0011678:	e8 3c 61 ff ff       	call   c00077b9 <malloc>
c001167d:	83 c4 0c             	add    esp,0xc
c0011680:	89 c3                	mov    ebx,eax
c0011682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011687:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001168a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001168d:	53                   	push   ebx
c001168e:	e8 6b 93 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0011693:	83 c4 10             	add    esp,0x10
c0011696:	31 d2                	xor    edx,edx
c0011698:	b8 02 00 00 00       	mov    eax,0x2
c001169d:	85 db                	test   ebx,ebx
c001169f:	74 5b                	je     c00116fc <SysLoadDLL(regs*)+0xa4>
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	53                   	push   ebx
c00116a5:	e8 82 96 ff ff       	call   c000ad2c <File::exists()>
c00116aa:	83 c4 10             	add    esp,0x10
c00116ad:	84 c0                	test   al,al
c00116af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b1:	75 11                	jne    c00116c4 <SysLoadDLL(regs*)+0x6c>
c00116b3:	83 ec 0c             	sub    esp,0xc
c00116b6:	53                   	push   ebx
c00116b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ba:	83 c4 10             	add    esp,0x10
c00116bd:	b8 03 00 00 00       	mov    eax,0x3
c00116c2:	eb 36                	jmp    c00116fa <SysLoadDLL(regs*)+0xa2>
c00116c4:	83 ec 0c             	sub    esp,0xc
c00116c7:	53                   	push   ebx
c00116c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116cb:	58                   	pop    eax
c00116cc:	5a                   	pop    edx
c00116cd:	6a 00                	push   0x0
c00116cf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00116d2:	e8 4b 12 00 00       	call   c0012922 <Thr::loadDLL(char const*, bool)>
c00116d7:	83 c4 10             	add    esp,0x10
c00116da:	89 c1                	mov    ecx,eax
c00116dc:	31 d2                	xor    edx,edx
c00116de:	b8 04 00 00 00       	mov    eax,0x4
c00116e3:	85 c9                	test   ecx,ecx
c00116e5:	74 15                	je     c00116fc <SysLoadDLL(regs*)+0xa4>
c00116e7:	53                   	push   ebx
c00116e8:	53                   	push   ebx
c00116e9:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00116ef:	51                   	push   ecx
c00116f0:	e8 5e 14 00 00       	call   c0012b53 <Thr::executeDLL(unsigned long, void*)>
c00116f5:	83 c4 10             	add    esp,0x10
c00116f8:	31 c0                	xor    eax,eax
c00116fa:	31 d2                	xor    edx,edx
c00116fc:	59                   	pop    ecx
c00116fd:	5b                   	pop    ebx
c00116fe:	5e                   	pop    esi
c00116ff:	c3                   	ret    

c0011700 <SysRead(regs*)>:
c0011700:	57                   	push   edi
c0011701:	56                   	push   esi
c0011702:	53                   	push   ebx
c0011703:	83 ec 10             	sub    esp,0x10
c0011706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001170a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001170d:	83 f8 02             	cmp    eax,0x2
c0011710:	77 10                	ja     c0011722 <SysRead(regs*)+0x22>
c0011712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001171a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011720:	eb 0e                	jmp    c0011730 <SysRead(regs*)+0x30>
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	50                   	push   eax
c0011726:	e8 b4 79 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c001172b:	83 c4 10             	add    esp,0x10
c001172e:	89 c1                	mov    ecx,eax
c0011730:	83 c8 ff             	or     eax,0xffffffff
c0011733:	85 c9                	test   ecx,ecx
c0011735:	89 c2                	mov    edx,eax
c0011737:	74 28                	je     c0011761 <SysRead(regs*)+0x61>
c0011739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011741:	31 ff                	xor    edi,edi
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011748:	8d 54 24 18          	lea    edx,[esp+0x18]
c001174c:	52                   	push   edx
c001174d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011750:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011753:	57                   	push   edi
c0011754:	56                   	push   esi
c0011755:	51                   	push   ecx
c0011756:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011759:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001175d:	83 c4 20             	add    esp,0x20
c0011760:	99                   	cdq    
c0011761:	83 c4 10             	add    esp,0x10
c0011764:	5b                   	pop    ebx
c0011765:	5e                   	pop    esi
c0011766:	5f                   	pop    edi
c0011767:	c3                   	ret    

c0011768 <SysSbrk(regs*)>:
c0011768:	56                   	push   esi
c0011769:	53                   	push   ebx
c001176a:	50                   	push   eax
c001176b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011770:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011777:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001177a:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011780:	85 db                	test   ebx,ebx
c0011782:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011785:	74 02                	je     c0011789 <SysSbrk(regs*)+0x21>
c0011787:	79 06                	jns    c001178f <SysSbrk(regs*)+0x27>
c0011789:	89 f0                	mov    eax,esi
c001178b:	31 d2                	xor    edx,edx
c001178d:	eb 2a                	jmp    c00117b9 <SysSbrk(regs*)+0x51>
c001178f:	83 c8 ff             	or     eax,0xffffffff
c0011792:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011798:	89 c2                	mov    edx,eax
c001179a:	77 1d                	ja     c00117b9 <SysSbrk(regs*)+0x51>
c001179c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00117a2:	50                   	push   eax
c00117a3:	c1 ea 0c             	shr    edx,0xc
c00117a6:	68 07 0c 00 00       	push   0xc07
c00117ab:	52                   	push   edx
c00117ac:	51                   	push   ecx
c00117ad:	e8 1c 82 ff ff       	call   c00099ce <VAS::allocatePages(int, int)>
c00117b2:	89 f0                	mov    eax,esi
c00117b4:	31 d2                	xor    edx,edx
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	59                   	pop    ecx
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	c3                   	ret    

c00117bd <SysSetCwd(regs*)>:
c00117bd:	83 ec 14             	sub    esp,0x14
c00117c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117c4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00117c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00117cf:	e8 f7 95 ff ff       	call   c000adcb <Fs::setcwd(Process*, char*)>
c00117d4:	83 c4 1c             	add    esp,0x1c
c00117d7:	99                   	cdq    
c00117d8:	c3                   	ret    

c00117d9 <SysSetTime(regs*)>:
c00117d9:	55                   	push   ebp
c00117da:	31 c9                	xor    ecx,ecx
c00117dc:	57                   	push   edi
c00117dd:	bd 0c 00 00 00       	mov    ebp,0xc
c00117e2:	56                   	push   esi
c00117e3:	53                   	push   ebx
c00117e4:	31 db                	xor    ebx,ebx
c00117e6:	83 ec 10             	sub    esp,0x10
c00117e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00117ed:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00117f0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00117f3:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00117f6:	89 c2                	mov    edx,eax
c00117f8:	66 81 ef 6c 07       	sub    di,0x76c
c00117fd:	83 e2 1f             	and    edx,0x1f
c0011800:	c1 e7 10             	shl    edi,0x10
c0011803:	42                   	inc    edx
c0011804:	c1 e8 05             	shr    eax,0x5
c0011807:	88 d1                	mov    cl,dl
c0011809:	31 d2                	xor    edx,edx
c001180b:	f7 f5                	div    ebp
c001180d:	89 dd                	mov    ebp,ebx
c001180f:	88 d5                	mov    ch,dl
c0011811:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011817:	0f b7 c1             	movzx  eax,cx
c001181a:	31 d2                	xor    edx,edx
c001181c:	09 f8                	or     eax,edi
c001181e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011823:	89 c1                	mov    ecx,eax
c0011825:	89 f0                	mov    eax,esi
c0011827:	f7 f7                	div    edi
c0011829:	c1 e2 10             	shl    edx,0x10
c001182c:	09 d5                	or     ebp,edx
c001182e:	31 d2                	xor    edx,edx
c0011830:	89 eb                	mov    ebx,ebp
c0011832:	f7 f7                	div    edi
c0011834:	bf 10 0e 00 00       	mov    edi,0xe10
c0011839:	88 d7                	mov    bh,dl
c001183b:	89 f0                	mov    eax,esi
c001183d:	31 d2                	xor    edx,edx
c001183f:	f7 f7                	div    edi
c0011841:	bf 18 00 00 00       	mov    edi,0x18
c0011846:	31 d2                	xor    edx,edx
c0011848:	f7 f7                	div    edi
c001184a:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001184f:	88 d3                	mov    bl,dl
c0011851:	53                   	push   ebx
c0011852:	51                   	push   ecx
c0011853:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011859:	e8 7e 9d ff ff       	call   c000b5dc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001185e:	83 c4 1c             	add    esp,0x1c
c0011861:	83 f0 01             	xor    eax,0x1
c0011864:	5b                   	pop    ebx
c0011865:	0f b6 c0             	movzx  eax,al
c0011868:	5e                   	pop    esi
c0011869:	31 d2                	xor    edx,edx
c001186b:	5f                   	pop    edi
c001186c:	5d                   	pop    ebp
c001186d:	c3                   	ret    

c001186e <SysTimezone(regs*)>:
c001186e:	53                   	push   ebx
c001186f:	83 ec 08             	sub    esp,0x8
c0011872:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011876:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001187a:	75 17                	jne    c0011893 <SysTimezone(regs*)+0x25>
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	68 b8 e2 01 c0       	push   0xc001e2b8
c0011884:	e8 ff 8b ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0011889:	83 c8 ff             	or     eax,0xffffffff
c001188c:	83 c4 10             	add    esp,0x10
c001188f:	89 c2                	mov    edx,eax
c0011891:	eb 20                	jmp    c00118b3 <SysTimezone(regs*)+0x45>
c0011893:	83 ec 0c             	sub    esp,0xc
c0011896:	68 cd e2 01 c0       	push   0xc001e2cd
c001189b:	e8 e8 8b ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c00118a0:	58                   	pop    eax
c00118a1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00118a4:	e8 8f 9a ff ff       	call   c000b338 <User::loadClockSettings(int)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	b8 01 00 00 00       	mov    eax,0x1
c00118b1:	31 d2                	xor    edx,edx
c00118b3:	83 c4 08             	add    esp,0x8
c00118b6:	5b                   	pop    ebx
c00118b7:	c3                   	ret    

c00118b8 <SysWrite(regs*)>:
c00118b8:	57                   	push   edi
c00118b9:	56                   	push   esi
c00118ba:	53                   	push   ebx
c00118bb:	83 ec 10             	sub    esp,0x10
c00118be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118c5:	83 f8 02             	cmp    eax,0x2
c00118c8:	77 10                	ja     c00118da <SysWrite(regs*)+0x22>
c00118ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118d2:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00118d8:	eb 0e                	jmp    c00118e8 <SysWrite(regs*)+0x30>
c00118da:	83 ec 0c             	sub    esp,0xc
c00118dd:	50                   	push   eax
c00118de:	e8 fc 77 ff ff       	call   c00090df <getFromFileDescriptor(int)>
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	89 c1                	mov    ecx,eax
c00118e8:	83 c8 ff             	or     eax,0xffffffff
c00118eb:	85 c9                	test   ecx,ecx
c00118ed:	89 c2                	mov    edx,eax
c00118ef:	74 28                	je     c0011919 <SysWrite(regs*)+0x61>
c00118f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118f9:	31 ff                	xor    edi,edi
c00118fb:	83 ec 0c             	sub    esp,0xc
c00118fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011900:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011904:	52                   	push   edx
c0011905:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011908:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001190b:	57                   	push   edi
c001190c:	56                   	push   esi
c001190d:	51                   	push   ecx
c001190e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011911:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011915:	83 c4 20             	add    esp,0x20
c0011918:	99                   	cdq    
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	5b                   	pop    ebx
c001191d:	5e                   	pop    esi
c001191e:	5f                   	pop    edi
c001191f:	c3                   	ret    

c0011920 <SysWsbe(regs*)>:
c0011920:	57                   	push   edi
c0011921:	b9 0b 00 00 00       	mov    ecx,0xb
c0011926:	56                   	push   esi
c0011927:	be 0c e3 01 c0       	mov    esi,0xc001e30c
c001192c:	53                   	push   ebx
c001192d:	83 ec 30             	sub    esp,0x30
c0011930:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011934:	fc                   	cld    
c0011935:	83 ec 0c             	sub    esp,0xc
c0011938:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001193a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001193e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011943:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011946:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001194c:	8b 06                	mov    eax,DWORD PTR [esi]
c001194e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011951:	57                   	push   edi
c0011952:	e8 e9 eb fe ff       	call   c0000540 <strlen>
c0011957:	5a                   	pop    edx
c0011958:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001195c:	52                   	push   edx
c001195d:	31 d2                	xor    edx,edx
c001195f:	57                   	push   edi
c0011960:	52                   	push   edx
c0011961:	50                   	push   eax
c0011962:	56                   	push   esi
c0011963:	ff d3                	call   ebx
c0011965:	83 c4 14             	add    esp,0x14
c0011968:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001196c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001196f:	e8 c4 22 00 00       	call   c0013c38 <terminateTask(int)>
c0011974:	83 c4 40             	add    esp,0x40
c0011977:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001197c:	5b                   	pop    ebx
c001197d:	31 d2                	xor    edx,edx
c001197f:	5e                   	pop    esi
c0011980:	5f                   	pop    edi
c0011981:	c3                   	ret    

c0011982 <SysYield(regs*)>:
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	fa                   	cli    
c0011986:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001198c:	e8 83 19 00 00       	call   c0013314 <schedule()>
c0011991:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0011996:	48                   	dec    eax
c0011997:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001199c:	75 01                	jne    c001199f <SysYield(regs*)+0x1d>
c001199e:	fb                   	sti    
c001199f:	31 c0                	xor    eax,eax
c00119a1:	31 d2                	xor    edx,edx
c00119a3:	83 c4 0c             	add    esp,0xc
c00119a6:	c3                   	ret    

c00119a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00119a7:	55                   	push   ebp
c00119a8:	57                   	push   edi
c00119a9:	56                   	push   esi
c00119aa:	53                   	push   ebx
c00119ab:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00119b1:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00119b9:	0f 95 c2             	setne  dl
c00119bc:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00119c4:	0f 94 c0             	sete   al
c00119c7:	84 c2                	test   dl,al
c00119c9:	74 34                	je     c00119ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119cb:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00119d6:	74 27                	je     c00119ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c00119d8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00119df:	05 00 10 00 00       	add    eax,0x1000
c00119e4:	89 c1                	mov    ecx,eax
c00119e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119eb:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00119f1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00119f8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00119ff:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a06:	83 ec 0c             	sub    esp,0xc
c0011a09:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a0f:	6a 01                	push   0x1
c0011a11:	e8 1f 78 ff ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0011a16:	83 c4 10             	add    esp,0x10
c0011a19:	89 c3                	mov    ebx,eax
c0011a1b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a21:	0f 86 25 01 00 00    	jbe    c0011b4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011a27:	c1 ee 0c             	shr    esi,0xc
c0011a2a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011a31:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011a35:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a3d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a48:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a4f:	29 ef                	sub    edi,ebp
c0011a51:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a55:	0f 83 f8 00 00 00    	jae    c0011b53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a5b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a61:	76 05                	jbe    c0011a68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a63:	bf 00 10 00 00       	mov    edi,0x1000
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	31 d2                	xor    edx,edx
c0011a6d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011a74:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011a76:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011a7a:	50                   	push   eax
c0011a7b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011a7f:	56                   	push   esi
c0011a80:	52                   	push   edx
c0011a81:	57                   	push   edi
c0011a82:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011a89:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a8c:	83 c4 20             	add    esp,0x20
c0011a8f:	85 c0                	test   eax,eax
c0011a91:	75 06                	jne    c0011a99 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011a93:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011a97:	74 13                	je     c0011aac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011a99:	83 ec 0c             	sub    esp,0xc
c0011a9c:	53                   	push   ebx
c0011a9d:	e8 c3 7a ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	31 c0                	xor    eax,eax
c0011aa7:	e9 7c 01 00 00       	jmp    c0011c28 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011aac:	fa                   	cli    
c0011aad:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0011ab3:	e8 dd 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ab8:	6a 07                	push   0x7
c0011aba:	89 c7                	mov    edi,eax
c0011abc:	53                   	push   ebx
c0011abd:	50                   	push   eax
c0011abe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011acc:	e8 f9 7d ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ad1:	83 c4 0c             	add    esp,0xc
c0011ad4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011adb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ae1:	6a 00                	push   0x0
c0011ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ae8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aeb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011af1:	e8 46 7c ff ff       	call   c000973c <VAS::mapOtherVASIn(bool, VAS*)>
c0011af6:	58                   	pop    eax
c0011af7:	5a                   	pop    edx
c0011af8:	68 07 0c 00 00       	push   0xc07
c0011afd:	55                   	push   ebp
c0011afe:	57                   	push   edi
c0011aff:	89 df                	mov    edi,ebx
c0011b01:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b08:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b0e:	6a 00                	push   0x0
c0011b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b1e:	e8 67 81 ff ff       	call   c0009c8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011b23:	b9 00 10 00 00       	mov    ecx,0x1000
c0011b28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b2a:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0011b2f:	83 c4 20             	add    esp,0x20
c0011b32:	48                   	dec    eax
c0011b33:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0011b38:	85 c0                	test   eax,eax
c0011b3a:	75 01                	jne    c0011b3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b3c:	fb                   	sti    
c0011b3d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b43:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b47:	e9 f1 fe ff ff       	jmp    c0011a3d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b4c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b53:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b5a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b60:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b66:	0f 86 ae 00 00 00    	jbe    c0011c1a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011b6c:	fa                   	cli    
c0011b6d:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0011b73:	c1 ee 0c             	shr    esi,0xc
c0011b76:	51                   	push   ecx
c0011b77:	31 ff                	xor    edi,edi
c0011b79:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b80:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b86:	6a 00                	push   0x0
c0011b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b90:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b96:	e8 a1 7b ff ff       	call   c000973c <VAS::mapOtherVASIn(bool, VAS*)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	e8 f2 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ba3:	47                   	inc    edi
c0011ba4:	6a 07                	push   0x7
c0011ba6:	53                   	push   ebx
c0011ba7:	50                   	push   eax
c0011ba8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011bac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011bb2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011bb5:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011bbb:	e8 0a 7d ff ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bc0:	58                   	pop    eax
c0011bc1:	5a                   	pop    edx
c0011bc2:	68 07 0c 00 00       	push   0xc07
c0011bc7:	55                   	push   ebp
c0011bc8:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011bce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bd2:	50                   	push   eax
c0011bd3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011bda:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011be0:	6a 00                	push   0x0
c0011be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bf0:	e8 95 80 ff ff       	call   c0009c8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011bf5:	83 c4 1c             	add    esp,0x1c
c0011bf8:	68 00 10 00 00       	push   0x1000
c0011bfd:	6a 00                	push   0x0
c0011bff:	53                   	push   ebx
c0011c00:	e8 cb e8 fe ff       	call   c00004d0 <memset>
c0011c05:	83 c4 10             	add    esp,0x10
c0011c08:	39 fe                	cmp    esi,edi
c0011c0a:	77 92                	ja     c0011b9e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c0c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0011c11:	48                   	dec    eax
c0011c12:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0011c17:	75 01                	jne    c0011c1a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c19:	fb                   	sti    
c0011c1a:	83 ec 0c             	sub    esp,0xc
c0011c1d:	53                   	push   ebx
c0011c1e:	e8 42 79 ff ff       	call   c0009565 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	b0 01                	mov    al,0x1
c0011c28:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011c2e:	5b                   	pop    ebx
c0011c2f:	5e                   	pop    esi
c0011c30:	5f                   	pop    edi
c0011c31:	5d                   	pop    ebp
c0011c32:	c3                   	ret    

c0011c33 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011c33:	55                   	push   ebp
c0011c34:	57                   	push   edi
c0011c35:	56                   	push   esi
c0011c36:	53                   	push   ebx
c0011c37:	83 ec 48             	sub    esp,0x48
c0011c3a:	68 14 01 00 00       	push   0x114
c0011c3f:	e8 75 5b ff ff       	call   c00077b9 <malloc>
c0011c44:	83 c4 0c             	add    esp,0xc
c0011c47:	89 c6                	mov    esi,eax
c0011c49:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c4d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c51:	50                   	push   eax
c0011c52:	e8 a7 8d ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0011c57:	58                   	pop    eax
c0011c58:	5a                   	pop    edx
c0011c59:	6a 01                	push   0x1
c0011c5b:	56                   	push   esi
c0011c5c:	e8 5d 8e ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	85 c0                	test   eax,eax
c0011c66:	0f 85 47 01 00 00    	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c6c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c74:	83 ec 0c             	sub    esp,0xc
c0011c77:	6a 34                	push   0x34
c0011c79:	e8 3b 5b ff ff       	call   c00077b9 <malloc>
c0011c7e:	89 c3                	mov    ebx,eax
c0011c80:	58                   	pop    eax
c0011c81:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c83:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011c87:	57                   	push   edi
c0011c88:	53                   	push   ebx
c0011c89:	6a 00                	push   0x0
c0011c8b:	6a 34                	push   0x34
c0011c8d:	56                   	push   esi
c0011c8e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c91:	83 c4 20             	add    esp,0x20
c0011c94:	85 c0                	test   eax,eax
c0011c96:	0f 85 17 01 00 00    	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c9c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011ca2:	0f 85 0b 01 00 00    	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ca8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cab:	85 c0                	test   eax,eax
c0011cad:	0f 84 00 01 00 00    	je     c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cb3:	31 d2                	xor    edx,edx
c0011cb5:	55                   	push   ebp
c0011cb6:	52                   	push   edx
c0011cb7:	50                   	push   eax
c0011cb8:	56                   	push   esi
c0011cb9:	e8 be 8e ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0011cbe:	83 c4 10             	add    esp,0x10
c0011cc1:	85 c0                	test   eax,eax
c0011cc3:	0f 85 ea 00 00 00    	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cc9:	83 ec 0c             	sub    esp,0xc
c0011ccc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011ccf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011cd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011cd7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011cdb:	0f af c2             	imul   eax,edx
c0011cde:	50                   	push   eax
c0011cdf:	e8 d5 5a ff ff       	call   c00077b9 <malloc>
c0011ce4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011ce6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011cea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ced:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011cf1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011cf5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011cf9:	0f af c2             	imul   eax,edx
c0011cfc:	99                   	cdq    
c0011cfd:	52                   	push   edx
c0011cfe:	50                   	push   eax
c0011cff:	56                   	push   esi
c0011d00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d03:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d06:	83 c4 20             	add    esp,0x20
c0011d09:	85 c0                	test   eax,eax
c0011d0b:	0f 84 a2 00 00 00    	je     c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d11:	31 d2                	xor    edx,edx
c0011d13:	51                   	push   ecx
c0011d14:	52                   	push   edx
c0011d15:	50                   	push   eax
c0011d16:	56                   	push   esi
c0011d17:	e8 60 8e ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0011d1c:	83 c4 10             	add    esp,0x10
c0011d1f:	85 c0                	test   eax,eax
c0011d21:	0f 85 8c 00 00 00    	jne    c0011db3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d27:	83 ec 0c             	sub    esp,0xc
c0011d2a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d2e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d32:	31 ed                	xor    ebp,ebp
c0011d34:	0f af c2             	imul   eax,edx
c0011d37:	50                   	push   eax
c0011d38:	e8 7c 5a ff ff       	call   c00077b9 <malloc>
c0011d3d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d43:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d4a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d4e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d52:	0f af c2             	imul   eax,edx
c0011d55:	99                   	cdq    
c0011d56:	52                   	push   edx
c0011d57:	50                   	push   eax
c0011d58:	56                   	push   esi
c0011d59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d5c:	83 c4 20             	add    esp,0x20
c0011d5f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d67:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011d6b:	0f 86 80 00 00 00    	jbe    c0011df1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011d71:	0f b7 fd             	movzx  edi,bp
c0011d74:	c1 e7 05             	shl    edi,0x5
c0011d77:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011d7b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011d7e:	75 6b                	jne    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011d80:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d87:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011d8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d8e:	52                   	push   edx
c0011d8f:	31 d2                	xor    edx,edx
c0011d91:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d94:	52                   	push   edx
c0011d95:	50                   	push   eax
c0011d96:	56                   	push   esi
c0011d97:	e8 e0 8d ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	85 c0                	test   eax,eax
c0011da1:	74 17                	je     c0011dba <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011da3:	83 ec 0c             	sub    esp,0xc
c0011da6:	68 38 e3 01 c0       	push   0xc001e338
c0011dab:	e8 d8 86 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0011db0:	83 c4 10             	add    esp,0x10
c0011db3:	31 c0                	xor    eax,eax
c0011db5:	e9 87 00 00 00       	jmp    c0011e41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011dba:	83 ec 0c             	sub    esp,0xc
c0011dbd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011dc0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011dc3:	50                   	push   eax
c0011dc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011dcc:	56                   	push   esi
c0011dcd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011dd1:	e8 d1 fb ff ff       	call   c00119a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011dd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dda:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011dde:	83 c4 20             	add    esp,0x20
c0011de1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011de5:	73 04                	jae    c0011deb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011de7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011deb:	45                   	inc    ebp
c0011dec:	e9 76 ff ff ff       	jmp    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011df1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011df5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dfd:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e11:	05 00 10 00 00       	add    eax,0x1000
c0011e16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e1d:	e8 a7 59 ff ff       	call   c00077c9 <free>
c0011e22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e25:	e8 9f 59 ff ff       	call   c00077c9 <free>
c0011e2a:	58                   	pop    eax
c0011e2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e2f:	e8 95 59 ff ff       	call   c00077c9 <free>
c0011e34:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e37:	e8 e0 8c ff ff       	call   c000ab1c <File::close()>
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	b0 01                	mov    al,0x1
c0011e41:	83 c4 3c             	add    esp,0x3c
c0011e44:	5b                   	pop    ebx
c0011e45:	5e                   	pop    esi
c0011e46:	5f                   	pop    edi
c0011e47:	5d                   	pop    ebp
c0011e48:	c3                   	ret    

c0011e49 <Thr::runtimeReferenceHelper()>:
c0011e49:	83 ec 18             	sub    esp,0x18
c0011e4c:	68 40 e3 01 c0       	push   0xc001e340
c0011e51:	e8 32 86 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0011e56:	fa                   	cli    
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	eb fe                	jmp    c0011e5a <Thr::runtimeReferenceHelper()+0x11>

c0011e5c <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e5c:	57                   	push   edi
c0011e5d:	56                   	push   esi
c0011e5e:	53                   	push   ebx
c0011e5f:	31 db                	xor    ebx,ebx
c0011e61:	39 1d e0 36 02 c0    	cmp    DWORD PTR ds:0xc00236e0,ebx
c0011e67:	7e 3c                	jle    c0011ea5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011e69:	8b 34 9d 60 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc9a0]
c0011e70:	31 ff                	xor    edi,edi
c0011e72:	39 3c 9d 60 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcaa0],edi
c0011e79:	7e 27                	jle    c0011ea2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011e7b:	50                   	push   eax
c0011e7c:	50                   	push   eax
c0011e7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e81:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e83:	03 04 9d e0 35 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdca20]
c0011e8a:	50                   	push   eax
c0011e8b:	e8 50 e8 fe ff       	call   c00006e0 <strcmp>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	85 c0                	test   eax,eax
c0011e95:	75 05                	jne    c0011e9c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011e97:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011e9a:	eb 0b                	jmp    c0011ea7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011e9c:	83 c6 10             	add    esi,0x10
c0011e9f:	47                   	inc    edi
c0011ea0:	eb d0                	jmp    c0011e72 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011ea2:	43                   	inc    ebx
c0011ea3:	eb bc                	jmp    c0011e61 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011ea5:	31 c0                	xor    eax,eax
c0011ea7:	5b                   	pop    ebx
c0011ea8:	5e                   	pop    esi
c0011ea9:	5f                   	pop    edi
c0011eaa:	c3                   	ret    

c0011eab <Thr::loadKernelSymbolTable(char const*)>:
c0011eab:	55                   	push   ebp
c0011eac:	57                   	push   edi
c0011ead:	56                   	push   esi
c0011eae:	53                   	push   ebx
c0011eaf:	83 ec 68             	sub    esp,0x68
c0011eb2:	8b 35 30 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023730
c0011eb8:	68 14 01 00 00       	push   0x114
c0011ebd:	e8 f7 58 ff ff       	call   c00077b9 <malloc>
c0011ec2:	83 c4 0c             	add    esp,0xc
c0011ec5:	89 c3                	mov    ebx,eax
c0011ec7:	56                   	push   esi
c0011ec8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011ecc:	50                   	push   eax
c0011ecd:	e8 2c 8b ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0011ed2:	5e                   	pop    esi
c0011ed3:	5f                   	pop    edi
c0011ed4:	6a 01                	push   0x1
c0011ed6:	53                   	push   ebx
c0011ed7:	e8 e2 8b ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0011edc:	83 c4 10             	add    esp,0x10
c0011edf:	85 c0                	test   eax,eax
c0011ee1:	74 0a                	je     c0011eed <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	68 62 e3 01 c0       	push   0xc001e362
c0011eeb:	eb 34                	jmp    c0011f21 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011eed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	6a 34                	push   0x34
c0011efa:	e8 ba 58 ff ff       	call   c00077b9 <malloc>
c0011eff:	59                   	pop    ecx
c0011f00:	89 c7                	mov    edi,eax
c0011f02:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f08:	56                   	push   esi
c0011f09:	57                   	push   edi
c0011f0a:	6a 00                	push   0x0
c0011f0c:	6a 34                	push   0x34
c0011f0e:	53                   	push   ebx
c0011f0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f12:	83 c4 20             	add    esp,0x20
c0011f15:	85 c0                	test   eax,eax
c0011f17:	74 17                	je     c0011f30 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f19:	83 ec 0c             	sub    esp,0xc
c0011f1c:	68 79 e3 01 c0       	push   0xc001e379
c0011f21:	e8 dd e1 ff ff       	call   c0010103 <KePanic(char const*)>
c0011f26:	83 c4 10             	add    esp,0x10
c0011f29:	31 c0                	xor    eax,eax
c0011f2b:	e9 31 02 00 00       	jmp    c0012161 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011f30:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011f36:	75 e1                	jne    c0011f19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f38:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f3b:	85 c0                	test   eax,eax
c0011f3d:	74 da                	je     c0011f19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f3f:	52                   	push   edx
c0011f40:	31 d2                	xor    edx,edx
c0011f42:	52                   	push   edx
c0011f43:	50                   	push   eax
c0011f44:	53                   	push   ebx
c0011f45:	e8 32 8c ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	85 c0                	test   eax,eax
c0011f4f:	75 c8                	jne    c0011f19 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f51:	83 ec 0c             	sub    esp,0xc
c0011f54:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f58:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f5c:	31 ed                	xor    ebp,ebp
c0011f5e:	0f af c2             	imul   eax,edx
c0011f61:	50                   	push   eax
c0011f62:	e8 52 58 ff ff       	call   c00077b9 <malloc>
c0011f67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011f69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f74:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f7c:	0f af c2             	imul   eax,edx
c0011f7f:	99                   	cdq    
c0011f80:	52                   	push   edx
c0011f81:	50                   	push   eax
c0011f82:	53                   	push   ebx
c0011f83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f86:	83 c4 20             	add    esp,0x20
c0011f89:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f91:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011f99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011fa1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fa9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011fad:	0f 86 aa 00 00 00    	jbe    c001205d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011fb3:	0f b7 f5             	movzx  esi,bp
c0011fb6:	6b f6 28             	imul   esi,esi,0x28
c0011fb9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011fbd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011fc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fc4:	50                   	push   eax
c0011fc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011fc9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011fcd:	8b 16                	mov    edx,DWORD PTR [esi]
c0011fcf:	6b c0 28             	imul   eax,eax,0x28
c0011fd2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011fd6:	89 d0                	mov    eax,edx
c0011fd8:	31 d2                	xor    edx,edx
c0011fda:	52                   	push   edx
c0011fdb:	50                   	push   eax
c0011fdc:	53                   	push   ebx
c0011fdd:	e8 9a 8b ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0011fe2:	83 c4 0c             	add    esp,0xc
c0011fe5:	6a 20                	push   0x20
c0011fe7:	6a 00                	push   0x0
c0011fe9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fed:	52                   	push   edx
c0011fee:	e8 dd e4 fe ff       	call   c00004d0 <memset>
c0011ff3:	58                   	pop    eax
c0011ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ff6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011ffa:	51                   	push   ecx
c0011ffb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011fff:	52                   	push   edx
c0012000:	6a 00                	push   0x0
c0012002:	6a 1f                	push   0x1f
c0012004:	53                   	push   ebx
c0012005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012008:	83 c4 18             	add    esp,0x18
c001200b:	68 90 e3 01 c0       	push   0xc001e390
c0012010:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012014:	52                   	push   edx
c0012015:	e8 c6 e6 fe ff       	call   c00006e0 <strcmp>
c001201a:	83 c4 10             	add    esp,0x10
c001201d:	85 c0                	test   eax,eax
c001201f:	75 0f                	jne    c0012030 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012021:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012024:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012028:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001202c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012030:	50                   	push   eax
c0012031:	50                   	push   eax
c0012032:	68 98 e3 01 c0       	push   0xc001e398
c0012037:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001203b:	50                   	push   eax
c001203c:	e8 9f e6 fe ff       	call   c00006e0 <strcmp>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	85 c0                	test   eax,eax
c0012046:	75 0f                	jne    c0012057 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012048:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001204b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001204f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012053:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012057:	45                   	inc    ebp
c0012058:	e9 4c ff ff ff       	jmp    c0011fa9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001205d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012062:	75 10                	jne    c0012074 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012064:	83 ec 0c             	sub    esp,0xc
c0012067:	68 a0 e3 01 c0       	push   0xc001e3a0
c001206c:	e8 92 e0 ff ff       	call   c0010103 <KePanic(char const*)>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012079:	75 10                	jne    c001208b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	68 a0 e3 01 c0       	push   0xc001e3a0
c0012083:	e8 7b e0 ff ff       	call   c0010103 <KePanic(char const*)>
c0012088:	83 c4 10             	add    esp,0x10
c001208b:	31 d2                	xor    edx,edx
c001208d:	50                   	push   eax
c001208e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012092:	52                   	push   edx
c0012093:	50                   	push   eax
c0012094:	53                   	push   ebx
c0012095:	e8 e2 8a ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c001209a:	5a                   	pop    edx
c001209b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001209f:	e8 15 57 ff ff       	call   c00077b9 <malloc>
c00120a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120ac:	31 c9                	xor    ecx,ecx
c00120ae:	5e                   	pop    esi
c00120af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120b1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00120b5:	55                   	push   ebp
c00120b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120ba:	51                   	push   ecx
c00120bb:	52                   	push   edx
c00120bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120c0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00120c4:	53                   	push   ebx
c00120c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120c8:	83 c4 14             	add    esp,0x14
c00120cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120cf:	e8 e5 56 ff ff       	call   c00077b9 <malloc>
c00120d4:	89 c6                	mov    esi,eax
c00120d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120db:	56                   	push   esi
c00120dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00120e0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00120e4:	51                   	push   ecx
c00120e5:	52                   	push   edx
c00120e6:	53                   	push   ebx
c00120e7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00120ee:	8b 15 e0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236e0
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c1 e8 04             	shr    eax,0x4
c00120fa:	89 04 95 60 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcaa0],eax
c0012101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012105:	31 d2                	xor    edx,edx
c0012107:	52                   	push   edx
c0012108:	50                   	push   eax
c0012109:	53                   	push   ebx
c001210a:	e8 6d 8a ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c001210f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012111:	31 d2                	xor    edx,edx
c0012113:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012116:	56                   	push   esi
c0012117:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001211b:	52                   	push   edx
c001211c:	50                   	push   eax
c001211d:	53                   	push   ebx
c001211e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012121:	83 c4 14             	add    esp,0x14
c0012124:	53                   	push   ebx
c0012125:	e8 f2 89 ff ff       	call   c000ab1c <File::close()>
c001212a:	5d                   	pop    ebp
c001212b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001212f:	e8 95 56 ff ff       	call   c00077c9 <free>
c0012134:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012137:	e8 8d 56 ff ff       	call   c00077c9 <free>
c001213c:	a1 e0 36 02 c0       	mov    eax,ds:0xc00236e0
c0012141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012145:	8d 50 01             	lea    edx,[eax+0x1]
c0012148:	89 0c 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],ecx
c001214f:	89 34 85 e0 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca20],esi
c0012156:	89 15 e0 36 02 c0    	mov    DWORD PTR ds:0xc00236e0,edx
c001215c:	83 c4 10             	add    esp,0x10
c001215f:	b0 01                	mov    al,0x1
c0012161:	83 c4 5c             	add    esp,0x5c
c0012164:	5b                   	pop    ebx
c0012165:	5e                   	pop    esi
c0012166:	5f                   	pop    edi
c0012167:	5d                   	pop    ebp
c0012168:	c3                   	ret    

c0012169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012169:	55                   	push   ebp
c001216a:	57                   	push   edi
c001216b:	56                   	push   esi
c001216c:	53                   	push   ebx
c001216d:	81 ec 68 03 00 00    	sub    esp,0x368
c0012173:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001217a:	8b 1d 30 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023730
c0012180:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012184:	68 14 01 00 00       	push   0x114
c0012189:	e8 2b 56 ff ff       	call   c00077b9 <malloc>
c001218e:	83 c4 0c             	add    esp,0xc
c0012191:	89 c5                	mov    ebp,eax
c0012193:	53                   	push   ebx
c0012194:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001219b:	50                   	push   eax
c001219c:	e8 5d 88 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c00121a1:	5e                   	pop    esi
c00121a2:	5f                   	pop    edi
c00121a3:	6a 01                	push   0x1
c00121a5:	55                   	push   ebp
c00121a6:	e8 13 89 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	85 c0                	test   eax,eax
c00121b0:	0f 85 a7 06 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121b6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00121be:	83 ec 0c             	sub    esp,0xc
c00121c1:	6a 34                	push   0x34
c00121c3:	e8 f1 55 ff ff       	call   c00077b9 <malloc>
c00121c8:	5b                   	pop    ebx
c00121c9:	89 c7                	mov    edi,eax
c00121cb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00121cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121d2:	53                   	push   ebx
c00121d3:	57                   	push   edi
c00121d4:	6a 00                	push   0x0
c00121d6:	6a 34                	push   0x34
c00121d8:	55                   	push   ebp
c00121d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121dc:	83 c4 20             	add    esp,0x20
c00121df:	85 c0                	test   eax,eax
c00121e1:	0f 85 76 06 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121e7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00121ed:	0f 85 6a 06 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121f3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00121f6:	85 c0                	test   eax,eax
c00121f8:	0f 84 5f 06 00 00    	je     c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121fe:	31 d2                	xor    edx,edx
c0012200:	51                   	push   ecx
c0012201:	52                   	push   edx
c0012202:	50                   	push   eax
c0012203:	55                   	push   ebp
c0012204:	e8 73 89 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	85 c0                	test   eax,eax
c001220e:	0f 85 49 06 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012214:	83 ec 0c             	sub    esp,0xc
c0012217:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001221a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001221e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012222:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012226:	0f af c2             	imul   eax,edx
c0012229:	50                   	push   eax
c001222a:	e8 8a 55 ff ff       	call   c00077b9 <malloc>
c001222f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012232:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001223d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012241:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012245:	0f af c2             	imul   eax,edx
c0012248:	99                   	cdq    
c0012249:	52                   	push   edx
c001224a:	50                   	push   eax
c001224b:	55                   	push   ebp
c001224c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001224f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012252:	83 c4 20             	add    esp,0x20
c0012255:	85 c0                	test   eax,eax
c0012257:	0f 84 00 06 00 00    	je     c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001225d:	52                   	push   edx
c001225e:	31 d2                	xor    edx,edx
c0012260:	52                   	push   edx
c0012261:	50                   	push   eax
c0012262:	55                   	push   ebp
c0012263:	e8 14 89 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0012268:	83 c4 10             	add    esp,0x10
c001226b:	85 c0                	test   eax,eax
c001226d:	0f 85 ea 05 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012273:	83 ec 0c             	sub    esp,0xc
c0012276:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001227a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001227e:	31 f6                	xor    esi,esi
c0012280:	0f af c2             	imul   eax,edx
c0012283:	50                   	push   eax
c0012284:	e8 30 55 ff ff       	call   c00077b9 <malloc>
c0012289:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001228c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012293:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012297:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001229b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001229f:	0f af c2             	imul   eax,edx
c00122a2:	99                   	cdq    
c00122a3:	52                   	push   edx
c00122a4:	50                   	push   eax
c00122a5:	55                   	push   ebp
c00122a6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122a9:	83 c4 20             	add    esp,0x20
c00122ac:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00122b0:	0f 86 8a 00 00 00    	jbe    c0012340 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00122b6:	0f b7 de             	movzx  ebx,si
c00122b9:	c1 e3 05             	shl    ebx,0x5
c00122bc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00122c0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00122c3:	75 75                	jne    c001233a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00122c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00122c8:	31 d2                	xor    edx,edx
c00122ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00122d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122d5:	50                   	push   eax
c00122d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00122d9:	52                   	push   edx
c00122da:	50                   	push   eax
c00122db:	55                   	push   ebp
c00122dc:	e8 9b 88 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	85 c0                	test   eax,eax
c00122e6:	0f 85 71 05 00 00    	jne    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122ec:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00122f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122f6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00122fa:	31 d2                	xor    edx,edx
c00122fc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012300:	83 ec 0c             	sub    esp,0xc
c0012303:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012307:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001230e:	50                   	push   eax
c001230f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012317:	52                   	push   edx
c0012318:	50                   	push   eax
c0012319:	55                   	push   ebp
c001231a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001231d:	83 c4 1c             	add    esp,0x1c
c0012320:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012323:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012326:	50                   	push   eax
c0012327:	6a 00                	push   0x0
c0012329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001232d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012331:	50                   	push   eax
c0012332:	e8 99 e1 fe ff       	call   c00004d0 <memset>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	46                   	inc    esi
c001233b:	e9 6c ff ff ff       	jmp    c00122ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012340:	53                   	push   ebx
c0012341:	31 db                	xor    ebx,ebx
c0012343:	68 00 01 00 00       	push   0x100
c0012348:	6a 00                	push   0x0
c001234a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001234e:	50                   	push   eax
c001234f:	e8 7c e1 fe ff       	call   c00004d0 <memset>
c0012354:	83 c4 0c             	add    esp,0xc
c0012357:	68 00 01 00 00       	push   0x100
c001235c:	6a 00                	push   0x0
c001235e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012365:	50                   	push   eax
c0012366:	e8 65 e1 fe ff       	call   c00004d0 <memset>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012376:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001237e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012386:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001238e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012396:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001239a:	0f 86 30 01 00 00    	jbe    c00124d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00123a0:	0f b7 f3             	movzx  esi,bx
c00123a3:	6b f6 28             	imul   esi,esi,0x28
c00123a6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00123aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00123ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123b1:	52                   	push   edx
c00123b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00123b6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00123ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00123bc:	6b d2 28             	imul   edx,edx,0x28
c00123bf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00123c3:	31 d2                	xor    edx,edx
c00123c5:	52                   	push   edx
c00123c6:	50                   	push   eax
c00123c7:	55                   	push   ebp
c00123c8:	e8 af 87 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c00123cd:	83 c4 0c             	add    esp,0xc
c00123d0:	6a 20                	push   0x20
c00123d2:	6a 00                	push   0x0
c00123d4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123db:	51                   	push   ecx
c00123dc:	e8 ef e0 fe ff       	call   c00004d0 <memset>
c00123e1:	59                   	pop    ecx
c00123e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123e5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00123e9:	52                   	push   edx
c00123ea:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00123f1:	51                   	push   ecx
c00123f2:	6a 00                	push   0x0
c00123f4:	6a 1f                	push   0x1f
c00123f6:	55                   	push   ebp
c00123f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123fa:	83 c4 1c             	add    esp,0x1c
c00123fd:	6a 09                	push   0x9
c00123ff:	68 ba e3 01 c0       	push   0xc001e3ba
c0012404:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001240b:	51                   	push   ecx
c001240c:	e8 7f df fe ff       	call   c0000390 <memcmp>
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	85 c0                	test   eax,eax
c0012416:	75 21                	jne    c0012439 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001241c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012420:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012424:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012428:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001242b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012432:	89 d0                	mov    eax,edx
c0012434:	40                   	inc    eax
c0012435:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012439:	50                   	push   eax
c001243a:	6a 09                	push   0x9
c001243c:	68 c4 e3 01 c0       	push   0xc001e3c4
c0012441:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012448:	50                   	push   eax
c0012449:	e8 42 df fe ff       	call   c0000390 <memcmp>
c001244e:	83 c4 10             	add    esp,0x10
c0012451:	85 c0                	test   eax,eax
c0012453:	75 21                	jne    c0012476 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012459:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001245d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012461:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012465:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012468:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001246f:	89 d0                	mov    eax,edx
c0012471:	40                   	inc    eax
c0012472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012476:	50                   	push   eax
c0012477:	50                   	push   eax
c0012478:	68 90 e3 01 c0       	push   0xc001e390
c001247d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012484:	50                   	push   eax
c0012485:	e8 56 e2 fe ff       	call   c00006e0 <strcmp>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	85 c0                	test   eax,eax
c001248f:	75 0f                	jne    c00124a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012491:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012494:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124a0:	50                   	push   eax
c00124a1:	50                   	push   eax
c00124a2:	68 98 e3 01 c0       	push   0xc001e398
c00124a7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124ae:	50                   	push   eax
c00124af:	e8 2c e2 fe ff       	call   c00006e0 <strcmp>
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	85 c0                	test   eax,eax
c00124b9:	75 0f                	jne    c00124ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00124bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00124ca:	43                   	inc    ebx
c00124cb:	e9 c6 fe ff ff       	jmp    c0012396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00124d0:	31 d2                	xor    edx,edx
c00124d2:	50                   	push   eax
c00124d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124d7:	52                   	push   edx
c00124d8:	50                   	push   eax
c00124d9:	55                   	push   ebp
c00124da:	e8 9d 86 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c00124df:	58                   	pop    eax
c00124e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124e4:	e8 d0 52 ff ff       	call   c00077b9 <malloc>
c00124e9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124f0:	31 d2                	xor    edx,edx
c00124f2:	58                   	pop    eax
c00124f3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00124f7:	53                   	push   ebx
c00124f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012500:	52                   	push   edx
c0012501:	50                   	push   eax
c0012502:	55                   	push   ebp
c0012503:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012506:	83 c4 14             	add    esp,0x14
c0012509:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001250d:	e8 a7 52 ff ff       	call   c00077b9 <malloc>
c0012512:	31 d2                	xor    edx,edx
c0012514:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012518:	83 c4 0c             	add    esp,0xc
c001251b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001251f:	52                   	push   edx
c0012520:	50                   	push   eax
c0012521:	55                   	push   ebp
c0012522:	e8 55 86 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c0012527:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001252a:	31 d2                	xor    edx,edx
c001252c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001252f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012533:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012537:	52                   	push   edx
c0012538:	50                   	push   eax
c0012539:	55                   	push   ebp
c001253a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001253d:	83 c4 20             	add    esp,0x20
c0012540:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012548:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001254c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012550:	0f 84 0b 03 00 00    	je     c0012861 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012556:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001255d:	31 d2                	xor    edx,edx
c001255f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012563:	c1 e8 03             	shr    eax,0x3
c0012566:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001256a:	51                   	push   ecx
c001256b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001256f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012573:	52                   	push   edx
c0012574:	50                   	push   eax
c0012575:	55                   	push   ebp
c0012576:	e8 01 86 ff ff       	call   c000ab7c <File::seek(unsigned long long)>
c001257b:	5b                   	pop    ebx
c001257c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012580:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012587:	e8 2d 52 ff ff       	call   c00077b9 <malloc>
c001258c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001258f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012593:	31 d2                	xor    edx,edx
c0012595:	5e                   	pop    esi
c0012596:	8d 44 24 58          	lea    eax,[esp+0x58]
c001259a:	50                   	push   eax
c001259b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125a3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00125aa:	52                   	push   edx
c00125ab:	50                   	push   eax
c00125ac:	55                   	push   ebp
c00125ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125b0:	83 c4 20             	add    esp,0x20
c00125b3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00125bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125bf:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00125c3:	0f 8d 7c 02 00 00    	jge    c0012845 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00125c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00125cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125d1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00125d6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00125d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00125dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125e1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00125e5:	89 d8                	mov    eax,ebx
c00125e7:	c1 e8 08             	shr    eax,0x8
c00125ea:	89 c6                	mov    esi,eax
c00125ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00125f0:	c1 e6 04             	shl    esi,0x4
c00125f3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00125f7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00125fa:	85 d2                	test   edx,edx
c00125fc:	0f 85 bf 00 00 00    	jne    c00126c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012602:	83 ec 0c             	sub    esp,0xc
c0012605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012609:	03 06                	add    eax,DWORD PTR [esi]
c001260b:	50                   	push   eax
c001260c:	e8 4b f8 ff ff       	call   c0011e5c <Thr::getAddressOfKernelSymbol(char const*)>
c0012611:	83 c4 10             	add    esp,0x10
c0012614:	89 c2                	mov    edx,eax
c0012616:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001261b:	85 c0                	test   eax,eax
c001261d:	0f 85 9e 00 00 00    	jne    c00126c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012623:	83 ec 0c             	sub    esp,0xc
c0012626:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001262a:	03 06                	add    eax,DWORD PTR [esi]
c001262c:	50                   	push   eax
c001262d:	e8 22 dc ff ff       	call   c0010254 <KeResolveCompatibilitySymbol(char*)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	89 c2                	mov    edx,eax
c0012637:	85 c0                	test   eax,eax
c0012639:	0f 85 82 00 00 00    	jne    c00126c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001263f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012643:	50                   	push   eax
c0012644:	50                   	push   eax
c0012645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012649:	03 06                	add    eax,DWORD PTR [esi]
c001264b:	50                   	push   eax
c001264c:	68 ce e3 01 c0       	push   0xc001e3ce
c0012651:	e8 32 7e ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0012656:	58                   	pop    eax
c0012657:	5a                   	pop    edx
c0012658:	68 e8 e3 01 c0       	push   0xc001e3e8
c001265d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012664:	50                   	push   eax
c0012665:	e8 96 df fe ff       	call   c0000600 <strcpy>
c001266a:	59                   	pop    ecx
c001266b:	58                   	pop    eax
c001266c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012670:	03 06                	add    eax,DWORD PTR [esi]
c0012672:	50                   	push   eax
c0012673:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001267a:	50                   	push   eax
c001267b:	e8 40 e1 fe ff       	call   c00007c0 <strcat>
c0012680:	58                   	pop    eax
c0012681:	5a                   	pop    edx
c0012682:	68 7e e4 01 c0       	push   0xc001e47e
c0012687:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001268e:	50                   	push   eax
c001268f:	e8 2c e1 fe ff       	call   c00007c0 <strcat>
c0012694:	83 c4 10             	add    esp,0x10
c0012697:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001269c:	0f 84 5d 01 00 00    	je     c00127ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126ac:	50                   	push   eax
c00126ad:	e8 51 da ff ff       	call   c0010103 <KePanic(char const*)>
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126b9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00126bd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00126c1:	80 fb 01             	cmp    bl,0x1
c00126c4:	0f 85 88 00 00 00    	jne    c0012752 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00126ca:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00126d1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00126d5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00126d9:	01 ce                	add    esi,ecx
c00126db:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00126e1:	0f 94 c0             	sete   al
c00126e4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00126ea:	0f 94 c3             	sete   bl
c00126ed:	09 c3                	or     ebx,eax
c00126ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00126f1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00126f6:	74 41                	je     c0012739 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00126f8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00126fb:	84 db                	test   bl,bl
c00126fd:	75 15                	jne    c0012714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00126ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012703:	66 83 f8 0c          	cmp    ax,0xc
c0012707:	76 05                	jbe    c001270e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012709:	b8 0c 00 00 00       	mov    eax,0xc
c001270e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012712:	76 37                	jbe    c001274b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012714:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012718:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001271d:	0f 84 dc 00 00 00    	je     c00127ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012723:	83 ec 0c             	sub    esp,0xc
c0012726:	68 ff e3 01 c0       	push   0xc001e3ff
c001272b:	e8 d3 d9 ff ff       	call   c0010103 <KePanic(char const*)>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012737:	eb 12                	jmp    c001274b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012739:	01 c1                	add    ecx,eax
c001273b:	84 db                	test   bl,bl
c001273d:	75 0c                	jne    c001274b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001273f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012743:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012747:	77 02                	ja     c001274b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012749:	01 d1                	add    ecx,edx
c001274b:	89 0e                	mov    DWORD PTR [esi],ecx
c001274d:	e9 ea 00 00 00       	jmp    c001283c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012752:	80 fb 02             	cmp    bl,0x2
c0012755:	75 7c                	jne    c00127d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012757:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001275e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012762:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012766:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001276c:	74 20                	je     c001278e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001276e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012774:	74 18                	je     c001278e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012776:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001277a:	b9 0a 00 00 00       	mov    ecx,0xa
c001277f:	66 83 f8 0e          	cmp    ax,0xe
c0012783:	77 03                	ja     c0012788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012785:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012788:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001278c:	76 1f                	jbe    c00127ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001278e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012792:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012797:	74 66                	je     c00127ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012799:	83 ec 0c             	sub    esp,0xc
c001279c:	68 1b e4 01 c0       	push   0xc001e41b
c00127a1:	e8 5d d9 ff ff       	call   c0010103 <KePanic(char const*)>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00127af:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00127b4:	74 13                	je     c00127c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00127b6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00127ba:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00127c1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00127c5:	01 c8                	add    eax,ecx
c00127c7:	eb 04                	jmp    c00127cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00127c9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00127cd:	01 c2                	add    edx,eax
c00127cf:	89 16                	mov    DWORD PTR [esi],edx
c00127d1:	eb 69                	jmp    c001283c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127d3:	0f b6 db             	movzx  ebx,bl
c00127d6:	50                   	push   eax
c00127d7:	50                   	push   eax
c00127d8:	53                   	push   ebx
c00127d9:	68 37 e4 01 c0       	push   0xc001e437
c00127de:	e8 a5 7c ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c00127e3:	83 c4 10             	add    esp,0x10
c00127e6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127eb:	74 12                	je     c00127ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127ed:	83 ec 0c             	sub    esp,0xc
c00127f0:	68 42 e4 01 c0       	push   0xc001e442
c00127f5:	e8 09 d9 ff ff       	call   c0010103 <KePanic(char const*)>
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	eb 3d                	jmp    c001283c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127ff:	83 ec 0c             	sub    esp,0xc
c0012802:	55                   	push   ebp
c0012803:	e8 14 83 ff ff       	call   c000ab1c <File::close()>
c0012808:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001280b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001280e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012811:	59                   	pop    ecx
c0012812:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012816:	e8 ae 4f ff ff       	call   c00077c9 <free>
c001281b:	5b                   	pop    ebx
c001281c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012820:	e8 a4 4f ff ff       	call   c00077c9 <free>
c0012825:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012828:	e8 9c 4f ff ff       	call   c00077c9 <free>
c001282d:	5e                   	pop    esi
c001282e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012832:	e8 92 4f ff ff       	call   c00077c9 <free>
c0012837:	83 c4 10             	add    esp,0x10
c001283a:	eb 21                	jmp    c001285d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001283c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012840:	e9 76 fd ff ff       	jmp    c00125bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012845:	83 ec 0c             	sub    esp,0xc
c0012848:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001284c:	e8 78 4f ff ff       	call   c00077c9 <free>
c0012851:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	e9 eb fc ff ff       	jmp    c0012548 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001285d:	31 c0                	xor    eax,eax
c001285f:	eb 33                	jmp    c0012894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012861:	83 ec 0c             	sub    esp,0xc
c0012864:	55                   	push   ebp
c0012865:	e8 b2 82 ff ff       	call   c000ab1c <File::close()>
c001286a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001286d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012873:	58                   	pop    eax
c0012874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012878:	e8 4c 4f ff ff       	call   c00077c9 <free>
c001287d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012880:	e8 44 4f ff ff       	call   c00077c9 <free>
c0012885:	5a                   	pop    edx
c0012886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001288a:	e8 3a 4f ff ff       	call   c00077c9 <free>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	b0 01                	mov    al,0x1
c0012894:	81 c4 5c 03 00 00    	add    esp,0x35c
c001289a:	5b                   	pop    ebx
c001289b:	5e                   	pop    esi
c001289c:	5f                   	pop    edi
c001289d:	5d                   	pop    ebp
c001289e:	c3                   	ret    

c001289f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001289f:	56                   	push   esi
c00128a0:	31 d2                	xor    edx,edx
c00128a2:	53                   	push   ebx
c00128a3:	8b 1d 40 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f40
c00128a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128ad:	39 d3                	cmp    ebx,edx
c00128af:	7e 1b                	jle    c00128cc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00128b1:	8b 04 95 60 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcea0]
c00128b8:	39 c8                	cmp    eax,ecx
c00128ba:	77 0d                	ja     c00128c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00128bc:	8b 34 95 60 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd0a0]
c00128c3:	01 c6                	add    esi,eax
c00128c5:	39 ce                	cmp    esi,ecx
c00128c7:	77 05                	ja     c00128ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00128c9:	42                   	inc    edx
c00128ca:	eb e1                	jmp    c00128ad <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00128cc:	31 c0                	xor    eax,eax
c00128ce:	5b                   	pop    ebx
c00128cf:	5e                   	pop    esi
c00128d0:	c3                   	ret    

c00128d1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00128d1:	53                   	push   ebx
c00128d2:	31 c0                	xor    eax,eax
c00128d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00128d8:	8b 1d 40 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f40
c00128de:	39 c3                	cmp    ebx,eax
c00128e0:	7e 22                	jle    c0012904 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00128e2:	8b 14 85 60 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcea0]
c00128e9:	39 ca                	cmp    edx,ecx
c00128eb:	77 14                	ja     c0012901 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128ed:	03 14 85 60 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd0a0]
c00128f4:	39 ca                	cmp    edx,ecx
c00128f6:	76 09                	jbe    c0012901 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128f8:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c00128ff:	eb 05                	jmp    c0012906 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012901:	40                   	inc    eax
c0012902:	eb da                	jmp    c00128de <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012904:	31 c0                	xor    eax,eax
c0012906:	5b                   	pop    ebx
c0012907:	c3                   	ret    

c0012908 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012908:	53                   	push   ebx
c0012909:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001290d:	53                   	push   ebx
c001290e:	e8 8c ff ff ff       	call   c001289f <Thr::getDriverBaseFromAddress(unsigned long)>
c0012913:	5a                   	pop    edx
c0012914:	31 d2                	xor    edx,edx
c0012916:	85 c0                	test   eax,eax
c0012918:	74 04                	je     c001291e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001291a:	89 da                	mov    edx,ebx
c001291c:	29 c2                	sub    edx,eax
c001291e:	89 d0                	mov    eax,edx
c0012920:	5b                   	pop    ebx
c0012921:	c3                   	ret    

c0012922 <Thr::loadDLL(char const*, bool)>:
c0012922:	55                   	push   ebp
c0012923:	57                   	push   edi
c0012924:	56                   	push   esi
c0012925:	53                   	push   ebx
c0012926:	81 ec 34 01 00 00    	sub    esp,0x134
c001292c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012933:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001293a:	56                   	push   esi
c001293b:	68 5a e4 01 c0       	push   0xc001e45a
c0012940:	e8 43 7b ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0012945:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001294c:	e8 68 4e ff ff       	call   c00077b9 <malloc>
c0012951:	83 c4 0c             	add    esp,0xc
c0012954:	89 c3                	mov    ebx,eax
c0012956:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c001295c:	56                   	push   esi
c001295d:	50                   	push   eax
c001295e:	e8 9b 80 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0012963:	83 c4 10             	add    esp,0x10
c0012966:	85 db                	test   ebx,ebx
c0012968:	75 3c                	jne    c00129a6 <Thr::loadDLL(char const*, bool)+0x84>
c001296a:	89 f8                	mov    eax,edi
c001296c:	84 c0                	test   al,al
c001296e:	0f 84 d2 01 00 00    	je     c0012b46 <Thr::loadDLL(char const*, bool)+0x224>
c0012974:	55                   	push   ebp
c0012975:	55                   	push   ebp
c0012976:	68 6b e4 01 c0       	push   0xc001e46b
c001297b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001297f:	55                   	push   ebp
c0012980:	e8 7b dc fe ff       	call   c0000600 <strcpy>
c0012985:	58                   	pop    eax
c0012986:	5a                   	pop    edx
c0012987:	56                   	push   esi
c0012988:	55                   	push   ebp
c0012989:	e8 32 de fe ff       	call   c00007c0 <strcat>
c001298e:	59                   	pop    ecx
c001298f:	58                   	pop    eax
c0012990:	68 7e e4 01 c0       	push   0xc001e47e
c0012995:	55                   	push   ebp
c0012996:	e8 25 de fe ff       	call   c00007c0 <strcat>
c001299b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001299e:	e8 60 d7 ff ff       	call   c0010103 <KePanic(char const*)>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	51                   	push   ecx
c00129a7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00129ab:	50                   	push   eax
c00129ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00129b0:	50                   	push   eax
c00129b1:	53                   	push   ebx
c00129b2:	e8 b3 83 ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	85 db                	test   ebx,ebx
c00129bc:	74 0c                	je     c00129ca <Thr::loadDLL(char const*, bool)+0xa8>
c00129be:	83 ec 0c             	sub    esp,0xc
c00129c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129c3:	53                   	push   ebx
c00129c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00129cf:	75 0a                	jne    c00129db <Thr::loadDLL(char const*, bool)+0xb9>
c00129d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129d5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00129d9:	75 3c                	jne    c0012a17 <Thr::loadDLL(char const*, bool)+0xf5>
c00129db:	89 f8                	mov    eax,edi
c00129dd:	84 c0                	test   al,al
c00129df:	0f 84 49 01 00 00    	je     c0012b2e <Thr::loadDLL(char const*, bool)+0x20c>
c00129e5:	51                   	push   ecx
c00129e6:	51                   	push   ecx
c00129e7:	68 6b e4 01 c0       	push   0xc001e46b
c00129ec:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00129f0:	53                   	push   ebx
c00129f1:	e8 0a dc fe ff       	call   c0000600 <strcpy>
c00129f6:	5d                   	pop    ebp
c00129f7:	58                   	pop    eax
c00129f8:	56                   	push   esi
c00129f9:	53                   	push   ebx
c00129fa:	e8 c1 dd fe ff       	call   c00007c0 <strcat>
c00129ff:	58                   	pop    eax
c0012a00:	5a                   	pop    edx
c0012a01:	68 7e e4 01 c0       	push   0xc001e47e
c0012a06:	53                   	push   ebx
c0012a07:	e8 b4 dd fe ff       	call   c00007c0 <strcat>
c0012a0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a0f:	e8 ef d6 ff ff       	call   c0010103 <KePanic(char const*)>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	52                   	push   edx
c0012a18:	6a 03                	push   0x3
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a22:	05 ff 0f 00 00       	add    eax,0xfff
c0012a27:	83 d2 00             	adc    edx,0x0
c0012a2a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012a2e:	50                   	push   eax
c0012a2f:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c0012a35:	e8 94 6f ff ff       	call   c00099ce <VAS::allocatePages(int, int)>
c0012a3a:	59                   	pop    ecx
c0012a3b:	89 c3                	mov    ebx,eax
c0012a3d:	5d                   	pop    ebp
c0012a3e:	50                   	push   eax
c0012a3f:	68 36 d2 01 c0       	push   0xc001d236
c0012a44:	e8 3f 7a ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0012a49:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a4c:	e8 ef da fe ff       	call   c0000540 <strlen>
c0012a51:	8b 2d 40 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f40
c0012a57:	40                   	inc    eax
c0012a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a5b:	e8 59 4d ff ff       	call   c00077b9 <malloc>
c0012a60:	89 04 ad 60 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcca0],eax
c0012a67:	58                   	pop    eax
c0012a68:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c0012a6d:	5a                   	pop    edx
c0012a6e:	56                   	push   esi
c0012a6f:	ff 34 85 60 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcca0]
c0012a76:	e8 85 db fe ff       	call   c0000600 <strcpy>
c0012a7b:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c0012a80:	8d 50 01             	lea    edx,[eax+0x1]
c0012a83:	89 1c 85 60 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcea0],ebx
c0012a8a:	89 15 40 2f 02 c0    	mov    DWORD PTR ds:0xc0022f40,edx
c0012a90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012a94:	83 c4 0c             	add    esp,0xc
c0012a97:	89 14 85 60 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0a0],edx
c0012a9e:	6a 01                	push   0x1
c0012aa0:	53                   	push   ebx
c0012aa1:	56                   	push   esi
c0012aa2:	e8 c2 f6 ff ff       	call   c0012169 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012aa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ab3:	0f 85 89 00 00 00    	jne    c0012b42 <Thr::loadDLL(char const*, bool)+0x220>
c0012ab9:	89 f8                	mov    eax,edi
c0012abb:	84 c0                	test   al,al
c0012abd:	74 73                	je     c0012b32 <Thr::loadDLL(char const*, bool)+0x210>
c0012abf:	83 ec 0c             	sub    esp,0xc
c0012ac2:	68 80 e4 01 c0       	push   0xc001e480
c0012ac7:	e8 37 d6 ff ff       	call   c0010103 <KePanic(char const*)>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 61                	jmp    c0012b32 <Thr::loadDLL(char const*, bool)+0x210>
c0012ad1:	50                   	push   eax
c0012ad2:	50                   	push   eax
c0012ad3:	89 e8                	mov    eax,ebp
c0012ad5:	c1 e0 0c             	shl    eax,0xc
c0012ad8:	01 d8                	add    eax,ebx
c0012ada:	50                   	push   eax
c0012adb:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c0012ae1:	e8 60 6a ff ff       	call   c0009546 <VAS::getPageTableEntry(unsigned long)>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aeb:	a8 60                	test   al,0x60
c0012aed:	75 11                	jne    c0012b00 <Thr::loadDLL(char const*, bool)+0x1de>
c0012aef:	83 ec 0c             	sub    esp,0xc
c0012af2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012af7:	50                   	push   eax
c0012af8:	e8 36 4f ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	45                   	inc    ebp
c0012b01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b09:	05 ff 0f 00 00       	add    eax,0xfff
c0012b0e:	bf 00 00 00 00       	mov    edi,0x0
c0012b13:	83 d2 00             	adc    edx,0x0
c0012b16:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b1a:	c1 ea 0c             	shr    edx,0xc
c0012b1d:	39 c5                	cmp    ebp,eax
c0012b1f:	89 d1                	mov    ecx,edx
c0012b21:	89 f8                	mov    eax,edi
c0012b23:	19 c8                	sbb    eax,ecx
c0012b25:	72 aa                	jb     c0012ad1 <Thr::loadDLL(char const*, bool)+0x1af>
c0012b27:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b2c:	75 18                	jne    c0012b46 <Thr::loadDLL(char const*, bool)+0x224>
c0012b2e:	31 db                	xor    ebx,ebx
c0012b30:	eb 14                	jmp    c0012b46 <Thr::loadDLL(char const*, bool)+0x224>
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	68 9f e4 01 c0       	push   0xc001e49f
c0012b3a:	e8 c4 d5 ff ff       	call   c0010103 <KePanic(char const*)>
c0012b3f:	83 c4 10             	add    esp,0x10
c0012b42:	31 ed                	xor    ebp,ebp
c0012b44:	eb bb                	jmp    c0012b01 <Thr::loadDLL(char const*, bool)+0x1df>
c0012b46:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b4c:	89 d8                	mov    eax,ebx
c0012b4e:	5b                   	pop    ebx
c0012b4f:	5e                   	pop    esi
c0012b50:	5f                   	pop    edi
c0012b51:	5d                   	pop    ebp
c0012b52:	c3                   	ret    

c0012b53 <Thr::executeDLL(unsigned long, void*)>:
c0012b53:	56                   	push   esi
c0012b54:	53                   	push   ebx
c0012b55:	52                   	push   edx
c0012b56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b5e:	85 db                	test   ebx,ebx
c0012b60:	75 10                	jne    c0012b72 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	68 bb e4 01 c0       	push   0xc001e4bb
c0012b6a:	e8 94 d5 ff ff       	call   c0010103 <KePanic(char const*)>
c0012b6f:	83 c4 10             	add    esp,0x10
c0012b72:	50                   	push   eax
c0012b73:	50                   	push   eax
c0012b74:	53                   	push   ebx
c0012b75:	68 e5 e4 01 c0       	push   0xc001e4e5
c0012b7a:	e8 09 79 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0012b7f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012b83:	89 d8                	mov    eax,ebx
c0012b85:	83 c4 14             	add    esp,0x14
c0012b88:	5b                   	pop    ebx
c0012b89:	5e                   	pop    esi
c0012b8a:	ff e0                	jmp    eax

c0012b8c <userModeEntryPoint(void*)>:
c0012b8c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0012b91:	48                   	dec    eax
c0012b92:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0012b97:	75 03                	jne    c0012b9c <userModeEntryPoint(void*)+0x10>
c0012b99:	fb                   	sti    
c0012b9a:	66 90                	xchg   ax,ax
c0012b9c:	fb                   	sti    
c0012b9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ba5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012bab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012baf:	e9 8b d6 fe ff       	jmp    c000023f <goToUsermode>

c0012bb4 <changeTSS>:
c0012bb4:	83 ec 14             	sub    esp,0x14
c0012bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bbc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012bbf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012bc4:	c1 e2 15             	shl    edx,0x15
c0012bc7:	29 d0                	sub    eax,edx
c0012bc9:	50                   	push   eax
c0012bca:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0012bcf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bd5:	05 7c 11 00 00       	add    eax,0x117c
c0012bda:	50                   	push   eax
c0012bdb:	e8 a8 5f ff ff       	call   c0008b88 <TSS::setESP(unsigned long)>
c0012be0:	83 c4 1c             	add    esp,0x1c
c0012be3:	c3                   	ret    

c0012be4 <switchToThread(ThreadControlBlock*)>:
c0012be4:	57                   	push   edi
c0012be5:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0012bea:	56                   	push   esi
c0012beb:	85 c0                	test   eax,eax
c0012bed:	53                   	push   ebx
c0012bee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bf2:	0f 85 90 00 00 00    	jne    c0012c88 <switchToThread(ThreadControlBlock*)+0xa4>
c0012bf8:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012bfb:	80 fa ff             	cmp    dl,0xff
c0012bfe:	0f 84 80 00 00 00    	je     c0012c84 <switchToThread(ThreadControlBlock*)+0xa0>
c0012c04:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c0a:	b8 00 04 00 00       	mov    eax,0x400
c0012c0f:	29 d0                	sub    eax,edx
c0012c11:	d1 f8                	sar    eax,1
c0012c13:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c16:	66 90                	xchg   ax,ax
c0012c18:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c1b:	e8 e5 25 00 00       	call   c0015205 <HalQueryPerformanceCounter()>
c0012c20:	a3 48 37 02 c0       	mov    ds:0xc0023748,eax
c0012c25:	89 15 4c 37 02 c0    	mov    DWORD PTR ds:0xc002374c,edx
c0012c2b:	89 c6                	mov    esi,eax
c0012c2d:	89 d7                	mov    edi,edx
c0012c2f:	2b 35 38 37 02 c0    	sub    esi,DWORD PTR ds:0xc0023738
c0012c35:	a3 38 37 02 c0       	mov    ds:0xc0023738,eax
c0012c3a:	1b 3d 3c 37 02 c0    	sbb    edi,DWORD PTR ds:0xc002373c
c0012c40:	89 35 40 37 02 c0    	mov    DWORD PTR ds:0xc0023740,esi
c0012c46:	89 3d 44 37 02 c0    	mov    DWORD PTR ds:0xc0023744,edi
c0012c4c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c52:	89 15 3c 37 02 c0    	mov    DWORD PTR ds:0xc002373c,edx
c0012c58:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c5b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c5e:	01 c6                	add    esi,eax
c0012c60:	11 d7                	adc    edi,edx
c0012c62:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c65:	83 ec 0c             	sub    esp,0xc
c0012c68:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012c6b:	53                   	push   ebx
c0012c6c:	e8 06 d6 fe ff       	call   c0000277 <switchToThreadASM>
c0012c71:	0f 20 c0             	mov    eax,cr0
c0012c74:	83 c8 08             	or     eax,0x8
c0012c77:	0f 22 c0             	mov    cr0,eax
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	5b                   	pop    ebx
c0012c7e:	5e                   	pop    esi
c0012c7f:	5f                   	pop    edi
c0012c80:	c3                   	ret    
c0012c81:	8d 76 00             	lea    esi,[esi+0x0]
c0012c84:	31 c0                	xor    eax,eax
c0012c86:	eb 90                	jmp    c0012c18 <switchToThread(ThreadControlBlock*)+0x34>
c0012c88:	5b                   	pop    ebx
c0012c89:	c7 05 00 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x1
c0012c93:	5e                   	pop    esi
c0012c94:	5f                   	pop    edi
c0012c95:	c3                   	ret    
c0012c96:	66 90                	xchg   ax,ax

c0012c98 <Process::addArgs(char**)>:
c0012c98:	57                   	push   edi
c0012c99:	56                   	push   esi
c0012c9a:	53                   	push   ebx
c0012c9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c9f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ca3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012cad:	85 ff                	test   edi,edi
c0012caf:	74 43                	je     c0012cf4 <Process::addArgs(char**)+0x5c>
c0012cb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0012cb3:	85 c0                	test   eax,eax
c0012cb5:	74 3d                	je     c0012cf4 <Process::addArgs(char**)+0x5c>
c0012cb7:	31 db                	xor    ebx,ebx
c0012cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	50                   	push   eax
c0012cc0:	e8 7b d8 fe ff       	call   c0000540 <strlen>
c0012cc5:	40                   	inc    eax
c0012cc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012cc9:	e8 eb 4a ff ff       	call   c00077b9 <malloc>
c0012cce:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012cd5:	5a                   	pop    edx
c0012cd6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012cd9:	59                   	pop    ecx
c0012cda:	43                   	inc    ebx
c0012cdb:	52                   	push   edx
c0012cdc:	50                   	push   eax
c0012cdd:	e8 1e d9 fe ff       	call   c0000600 <strcpy>
c0012ce2:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012cee:	85 c0                	test   eax,eax
c0012cf0:	75 ca                	jne    c0012cbc <Process::addArgs(char**)+0x24>
c0012cf2:	66 90                	xchg   ax,ax
c0012cf4:	5b                   	pop    ebx
c0012cf5:	5e                   	pop    esi
c0012cf6:	5f                   	pop    edi
c0012cf7:	c3                   	ret    

c0012cf8 <Process::Process(char const*, Process*, char**)>:
c0012cf8:	56                   	push   esi
c0012cf9:	53                   	push   ebx
c0012cfa:	83 ec 14             	sub    esp,0x14
c0012cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d01:	05 0c 02 00 00       	add    eax,0x20c
c0012d06:	bb 07 00 00 00       	mov    ebx,0x7
c0012d0b:	89 c6                	mov    esi,eax
c0012d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d10:	85 db                	test   ebx,ebx
c0012d12:	78 14                	js     c0012d28 <Process::Process(char const*, Process*, char**)+0x30>
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	56                   	push   esi
c0012d18:	e8 ff 97 00 00       	call   c001c51c <ThreadControlBlock::ThreadControlBlock()>
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	83 c6 5f             	add    esi,0x5f
c0012d23:	4b                   	dec    ebx
c0012d24:	eb ea                	jmp    c0012d10 <Process::Process(char const*, Process*, char**)+0x18>
c0012d26:	66 90                	xchg   ax,ax
c0012d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d2c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012d33:	83 ec 0c             	sub    esp,0xc
c0012d36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d3a:	e8 b9 d1 ff ff       	call   c000fef8 <Krnl::newProcessEnv(Process*)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	89 c2                	mov    edx,eax
c0012d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d48:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d52:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d5b:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0012d60:	8d 50 01             	lea    edx,[eax+0x1]
c0012d63:	89 15 28 f4 01 c0    	mov    DWORD PTR ds:0xc001f428,edx
c0012d69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012d6d:	89 02                	mov    DWORD PTR [edx],eax
c0012d6f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d7e:	e8 36 4a ff ff       	call   c00077b9 <malloc>
c0012d83:	83 c4 10             	add    esp,0x10
c0012d86:	89 c3                	mov    ebx,eax
c0012d88:	83 ec 08             	sub    esp,0x8
c0012d8b:	6a 00                	push   0x0
c0012d8d:	53                   	push   ebx
c0012d8e:	e8 e5 6f ff ff       	call   c0009d78 <VAS::VAS(bool)>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d9a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012da4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012db2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012db6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dc6:	85 c0                	test   eax,eax
c0012dc8:	74 42                	je     c0012e0c <Process::Process(char const*, Process*, char**)+0x114>
c0012dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dd4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dde:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012de4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012de8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012dee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012df8:	05 0c 01 00 00       	add    eax,0x10c
c0012dfd:	83 ec 08             	sub    esp,0x8
c0012e00:	52                   	push   edx
c0012e01:	50                   	push   eax
c0012e02:	e8 f9 d7 fe ff       	call   c0000600 <strcpy>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	eb 64                	jmp    c0012e70 <Process::Process(char const*, Process*, char**)+0x178>
c0012e0c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e14:	83 ec 0c             	sub    esp,0xc
c0012e17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e1b:	e8 99 49 ff ff       	call   c00077b9 <malloc>
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	89 c3                	mov    ebx,eax
c0012e25:	83 ec 08             	sub    esp,0x8
c0012e28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e2c:	53                   	push   ebx
c0012e2d:	e8 c8 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e39:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e49:	83 ec 0c             	sub    esp,0xc
c0012e4c:	50                   	push   eax
c0012e4d:	e8 48 53 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e59:	05 0c 01 00 00       	add    eax,0x10c
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 04 e5 01 c0       	push   0xc001e504
c0012e66:	50                   	push   eax
c0012e67:	e8 94 d7 fe ff       	call   c0000600 <strcpy>
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	90                   	nop
c0012e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e74:	83 c0 0c             	add    eax,0xc
c0012e77:	83 ec 08             	sub    esp,0x8
c0012e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e7e:	50                   	push   eax
c0012e7f:	e8 7c d7 fe ff       	call   c0000600 <strcpy>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	83 ec 08             	sub    esp,0x8
c0012e8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e92:	e8 01 fe ff ff       	call   c0012c98 <Process::addArgs(char**)>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	83 ec 08             	sub    esp,0x8
c0012e9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea5:	e8 89 ed ff ff       	call   c0011c33 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012eaa:	83 c4 10             	add    esp,0x10
c0012ead:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012eb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012eb5:	83 f0 01             	xor    eax,0x1
c0012eb8:	88 c2                	mov    dl,al
c0012eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ebe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012ec4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ec8:	25 ff 00 00 00       	and    eax,0xff
c0012ecd:	83 ec 08             	sub    esp,0x8
c0012ed0:	50                   	push   eax
c0012ed1:	68 5c e5 01 c0       	push   0xc001e55c
c0012ed6:	e8 ad 75 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0012edb:	83 c4 10             	add    esp,0x10
c0012ede:	90                   	nop
c0012edf:	83 c4 14             	add    esp,0x14
c0012ee2:	5b                   	pop    ebx
c0012ee3:	5e                   	pop    esi
c0012ee4:	c3                   	ret    
c0012ee5:	90                   	nop
c0012ee6:	66 90                	xchg   ax,ax

c0012ee8 <Process::Process(bool, char const*, Process*, char**)>:
c0012ee8:	56                   	push   esi
c0012ee9:	53                   	push   ebx
c0012eea:	83 ec 24             	sub    esp,0x24
c0012eed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ef1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ef9:	05 0c 02 00 00       	add    eax,0x20c
c0012efe:	bb 07 00 00 00       	mov    ebx,0x7
c0012f03:	89 c6                	mov    esi,eax
c0012f05:	8d 76 00             	lea    esi,[esi+0x0]
c0012f08:	85 db                	test   ebx,ebx
c0012f0a:	78 14                	js     c0012f20 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f0c:	83 ec 0c             	sub    esp,0xc
c0012f0f:	56                   	push   esi
c0012f10:	e8 07 96 00 00       	call   c001c51c <ThreadControlBlock::ThreadControlBlock()>
c0012f15:	83 c4 10             	add    esp,0x10
c0012f18:	83 c6 5f             	add    esi,0x5f
c0012f1b:	4b                   	dec    ebx
c0012f1c:	eb ea                	jmp    c0012f08 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f1e:	66 90                	xchg   ax,ax
c0012f20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f24:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f2b:	83 ec 0c             	sub    esp,0xc
c0012f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f32:	e8 c1 cf ff ff       	call   c000fef8 <Krnl::newProcessEnv(Process*)>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	89 c2                	mov    edx,eax
c0012f3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f40:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f4a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f53:	a1 28 f4 01 c0       	mov    eax,ds:0xc001f428
c0012f58:	8d 50 01             	lea    edx,[eax+0x1]
c0012f5b:	89 15 28 f4 01 c0    	mov    DWORD PTR ds:0xc001f428,edx
c0012f61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f65:	89 02                	mov    DWORD PTR [edx],eax
c0012f67:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012f6f:	83 ec 0c             	sub    esp,0xc
c0012f72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f76:	e8 3e 48 ff ff       	call   c00077b9 <malloc>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	89 c3                	mov    ebx,eax
c0012f80:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012f84:	25 ff 00 00 00       	and    eax,0xff
c0012f89:	83 ec 08             	sub    esp,0x8
c0012f8c:	50                   	push   eax
c0012f8d:	53                   	push   ebx
c0012f8e:	e8 e5 6d ff ff       	call   c0009d78 <VAS::VAS(bool)>
c0012f93:	83 c4 10             	add    esp,0x10
c0012f96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fa4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012fae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012fb6:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 42                	je     c001300c <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012fca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fd4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012fda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fde:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012fe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fe8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ff4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ff8:	05 0c 01 00 00       	add    eax,0x10c
c0012ffd:	83 ec 08             	sub    esp,0x8
c0013000:	52                   	push   edx
c0013001:	50                   	push   eax
c0013002:	e8 f9 d5 fe ff       	call   c0000600 <strcpy>
c0013007:	83 c4 10             	add    esp,0x10
c001300a:	eb 64                	jmp    c0013070 <Process::Process(bool, char const*, Process*, char**)+0x188>
c001300c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013014:	83 ec 0c             	sub    esp,0xc
c0013017:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001301b:	e8 99 47 ff ff       	call   c00077b9 <malloc>
c0013020:	83 c4 10             	add    esp,0x10
c0013023:	89 c3                	mov    ebx,eax
c0013025:	83 ec 08             	sub    esp,0x8
c0013028:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001302c:	53                   	push   ebx
c001302d:	e8 c8 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013039:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001303f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013043:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013049:	83 ec 0c             	sub    esp,0xc
c001304c:	50                   	push   eax
c001304d:	e8 48 51 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013059:	05 0c 01 00 00       	add    eax,0x10c
c001305e:	83 ec 08             	sub    esp,0x8
c0013061:	68 04 e5 01 c0       	push   0xc001e504
c0013066:	50                   	push   eax
c0013067:	e8 94 d5 fe ff       	call   c0000600 <strcpy>
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	90                   	nop
c0013070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013074:	83 c0 0c             	add    eax,0xc
c0013077:	83 ec 08             	sub    esp,0x8
c001307a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001307e:	50                   	push   eax
c001307f:	e8 7c d5 fe ff       	call   c0000600 <strcpy>
c0013084:	83 c4 10             	add    esp,0x10
c0013087:	83 ec 08             	sub    esp,0x8
c001308a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001308e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013092:	e8 01 fc ff ff       	call   c0012c98 <Process::addArgs(char**)>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	90                   	nop
c001309b:	83 c4 24             	add    esp,0x24
c001309e:	5b                   	pop    ebx
c001309f:	5e                   	pop    esi
c00130a0:	c3                   	ret    
c00130a1:	8d 76 00             	lea    esi,[esi+0x0]

c00130a4 <taskStartupFunction>:
c00130a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130a9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop
c00130ae:	66 90                	xchg   ax,ax

c00130b0 <Semaphore::Semaphore(int)>:
c00130b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130b8:	89 10                	mov    DWORD PTR [eax],edx
c00130ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130be:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00130c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00130d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00130db:	90                   	nop
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop
c00130de:	66 90                	xchg   ax,ax

c00130e0 <Mutex::Mutex()>:
c00130e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e4:	6a 01                	push   0x1
c00130e6:	50                   	push   eax
c00130e7:	e8 c4 ff ff ff       	call   c00130b0 <Semaphore::Semaphore(int)>
c00130ec:	83 c4 08             	add    esp,0x8
c00130ef:	90                   	nop
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop
c00130f2:	66 90                	xchg   ax,ax

c00130f4 <Process::createThread(void (*)(void*), void*, int)>:
c00130f4:	57                   	push   edi
c00130f5:	31 c9                	xor    ecx,ecx
c00130f7:	56                   	push   esi
c00130f8:	53                   	push   ebx
c00130f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130fd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013104:	89 f2                	mov    edx,esi
c0013106:	66 90                	xchg   ax,ax
c0013108:	31 c0                	xor    eax,eax
c001310a:	66 89 d0             	mov    ax,dx
c001310d:	83 e2 01             	and    edx,0x1
c0013110:	74 12                	je     c0013124 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013112:	d1 f8                	sar    eax,1
c0013114:	41                   	inc    ecx
c0013115:	89 c2                	mov    edx,eax
c0013117:	83 f9 10             	cmp    ecx,0x10
c001311a:	75 ec                	jne    c0013108 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001311c:	31 db                	xor    ebx,ebx
c001311e:	89 d8                	mov    eax,ebx
c0013120:	5b                   	pop    ebx
c0013121:	5e                   	pop    esi
c0013122:	5f                   	pop    edi
c0013123:	c3                   	ret    
c0013124:	b8 01 00 00 00       	mov    eax,0x1
c0013129:	d3 e0                	shl    eax,cl
c001312b:	09 c6                	or     esi,eax
c001312d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013130:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013137:	01 c0                	add    eax,eax
c0013139:	01 c8                	add    eax,ecx
c001313b:	8d 04 80             	lea    eax,[eax+eax*4]
c001313e:	01 d8                	add    eax,ebx
c0013140:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013147:	75 0b                	jne    c0013154 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013149:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013153:	90                   	nop
c0013154:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001315a:	83 ec 08             	sub    esp,0x8
c001315d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013160:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013163:	01 c0                	add    eax,eax
c0013165:	01 c8                	add    eax,ecx
c0013167:	8d 3c 80             	lea    edi,[eax+eax*4]
c001316a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001316d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013173:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013179:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001317d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013183:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013189:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013190:	89 ca                	mov    edx,ecx
c0013192:	f7 da                	neg    edx
c0013194:	c1 e2 15             	shl    edx,0x15
c0013197:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001319d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00131a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00131a7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00131b1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00131b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131bb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00131c1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00131cb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00131d5:	53                   	push   ebx
c00131d6:	68 24 37 02 c0       	push   0xc0023724
c00131db:	e8 dc 90 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00131e0:	83 c4 10             	add    esp,0x10
c00131e3:	89 d8                	mov    eax,ebx
c00131e5:	5b                   	pop    ebx
c00131e6:	5e                   	pop    esi
c00131e7:	5f                   	pop    edi
c00131e8:	c3                   	ret    
c00131e9:	90                   	nop
c00131ea:	66 90                	xchg   ax,ax

c00131ec <Process::createUserThread()>:
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	68 80 00 00 00       	push   0x80
c00131f4:	6a 00                	push   0x0
c00131f6:	68 8c 2b 01 c0       	push   0xc0012b8c
c00131fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ff:	50                   	push   eax
c0013200:	e8 ef fe ff ff       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c0013205:	83 c4 1c             	add    esp,0x1c
c0013208:	c3                   	ret    
c0013209:	8d 76 00             	lea    esi,[esi+0x0]

c001320c <setupMultitasking(void (*)())>:
c001320c:	56                   	push   esi
c001320d:	53                   	push   ebx
c001320e:	53                   	push   ebx
c001320f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013213:	eb 13                	jmp    c0013228 <setupMultitasking(void (*)())+0x1c>
c0013215:	8d 76 00             	lea    esi,[esi+0x0]
c0013218:	83 ec 0c             	sub    esp,0xc
c001321b:	68 24 37 02 c0       	push   0xc0023724
c0013220:	e8 df 8f 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	83 ec 0c             	sub    esp,0xc
c001322b:	68 24 37 02 c0       	push   0xc0023724
c0013230:	e8 ab 8f 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	84 c0                	test   al,al
c001323a:	74 dc                	je     c0013218 <setupMultitasking(void (*)())+0xc>
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	68 1f 07 00 00       	push   0x71f
c0013244:	e8 70 45 ff ff       	call   c00077b9 <malloc>
c0013249:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013250:	89 c3                	mov    ebx,eax
c0013252:	6a 00                	push   0x0
c0013254:	68 08 e5 01 c0       	push   0xc001e508
c0013259:	6a 01                	push   0x1
c001325b:	50                   	push   eax
c001325c:	e8 87 fc ff ff       	call   c0012ee8 <Process::Process(bool, char const*, Process*, char**)>
c0013261:	83 c4 14             	add    esp,0x14
c0013264:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001326a:	89 1d 30 37 02 c0    	mov    DWORD PTR ds:0xc0023730,ebx
c0013270:	50                   	push   eax
c0013271:	e8 81 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013276:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001327e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013288:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001328e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013291:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001329b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00132a1:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00132a7:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00132b1:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00132bb:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00132c5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00132cb:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00132d1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00132db:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00132e1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00132eb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00132f1:	5a                   	pop    edx
c00132f2:	59                   	pop    ecx
c00132f3:	68 04 e5 01 c0       	push   0xc001e504
c00132f8:	50                   	push   eax
c00132f9:	e8 02 d3 fe ff       	call   c0000600 <strcpy>
c00132fe:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013305:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013309:	83 c4 14             	add    esp,0x14
c001330c:	5b                   	pop    ebx
c001330d:	5e                   	pop    esi
c001330e:	e9 56 cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013313:	90                   	nop

c0013314 <schedule()>:
c0013314:	8b 15 04 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023704
c001331a:	85 d2                	test   edx,edx
c001331c:	74 0e                	je     c001332c <schedule()+0x18>
c001331e:	c7 05 00 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x1
c0013328:	c3                   	ret    
c0013329:	8d 76 00             	lea    esi,[esi+0x0]
c001332c:	53                   	push   ebx
c001332d:	83 ec 14             	sub    esp,0x14
c0013330:	68 24 37 02 c0       	push   0xc0023724
c0013335:	e8 a6 8e 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001333a:	83 c4 10             	add    esp,0x10
c001333d:	84 c0                	test   al,al
c001333f:	75 3b                	jne    c001337c <schedule()+0x68>
c0013341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013346:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013349:	4a                   	dec    edx
c001334a:	74 38                	je     c0013384 <schedule()+0x70>
c001334c:	83 ec 0c             	sub    esp,0xc
c001334f:	68 24 37 02 c0       	push   0xc0023724
c0013354:	e8 a3 8e 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013359:	c7 04 24 24 37 02 c0 	mov    DWORD PTR [esp],0xc0023724
c0013360:	89 c3                	mov    ebx,eax
c0013362:	e8 9d 8e 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013367:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001336e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013371:	e8 6e f8 ff ff       	call   c0012be4 <switchToThread(ThreadControlBlock*)>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	8d 76 00             	lea    esi,[esi+0x0]
c001337c:	83 c4 08             	add    esp,0x8
c001337f:	5b                   	pop    ebx
c0013380:	c3                   	ret    
c0013381:	8d 76 00             	lea    esi,[esi+0x0]
c0013384:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001338b:	83 ec 08             	sub    esp,0x8
c001338e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013393:	50                   	push   eax
c0013394:	68 24 37 02 c0       	push   0xc0023724
c0013399:	e8 1e 8f 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001339e:	83 c4 10             	add    esp,0x10
c00133a1:	eb a9                	jmp    c001334c <schedule()+0x38>
c00133a3:	90                   	nop

c00133a4 <Semaphore::tryAcquire()>:
c00133a4:	53                   	push   ebx
c00133a5:	83 ec 08             	sub    esp,0x8
c00133a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133ac:	fa                   	cli    
c00133ad:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00133b2:	8d 50 01             	lea    edx,[eax+0x1]
c00133b5:	89 15 08 37 02 c0    	mov    DWORD PTR ds:0xc0023708,edx
c00133bb:	8b 15 04 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023704
c00133c1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00133c4:	89 1d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ebx
c00133ca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00133cd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00133cf:	7c 33                	jl     c0013404 <Semaphore::tryAcquire()+0x60>
c00133d1:	89 15 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,edx
c00133d7:	85 d2                	test   edx,edx
c00133d9:	75 0d                	jne    c00133e8 <Semaphore::tryAcquire()+0x44>
c00133db:	8b 15 00 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023700
c00133e1:	85 d2                	test   edx,edx
c00133e3:	75 6b                	jne    c0013450 <Semaphore::tryAcquire()+0xac>
c00133e5:	8d 76 00             	lea    esi,[esi+0x0]
c00133e8:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00133ed:	85 c0                	test   eax,eax
c00133ef:	74 0b                	je     c00133fc <Semaphore::tryAcquire()+0x58>
c00133f1:	8d 76 00             	lea    esi,[esi+0x0]
c00133f4:	31 c0                	xor    eax,eax
c00133f6:	83 c4 08             	add    esp,0x8
c00133f9:	5b                   	pop    ebx
c00133fa:	c3                   	ret    
c00133fb:	90                   	nop
c00133fc:	fb                   	sti    
c00133fd:	83 c4 08             	add    esp,0x8
c0013400:	5b                   	pop    ebx
c0013401:	c3                   	ret    
c0013402:	66 90                	xchg   ax,ax
c0013404:	43                   	inc    ebx
c0013405:	89 15 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,edx
c001340b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001340e:	85 d2                	test   edx,edx
c0013410:	75 22                	jne    c0013434 <Semaphore::tryAcquire()+0x90>
c0013412:	8b 0d 00 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023700
c0013418:	85 c9                	test   ecx,ecx
c001341a:	74 18                	je     c0013434 <Semaphore::tryAcquire()+0x90>
c001341c:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c0013426:	e8 e9 fe ff ff       	call   c0013314 <schedule()>
c001342b:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013430:	48                   	dec    eax
c0013431:	8d 76 00             	lea    esi,[esi+0x0]
c0013434:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013439:	85 c0                	test   eax,eax
c001343b:	75 0b                	jne    c0013448 <Semaphore::tryAcquire()+0xa4>
c001343d:	fb                   	sti    
c001343e:	b0 01                	mov    al,0x1
c0013440:	83 c4 08             	add    esp,0x8
c0013443:	5b                   	pop    ebx
c0013444:	c3                   	ret    
c0013445:	8d 76 00             	lea    esi,[esi+0x0]
c0013448:	b0 01                	mov    al,0x1
c001344a:	83 c4 08             	add    esp,0x8
c001344d:	5b                   	pop    ebx
c001344e:	c3                   	ret    
c001344f:	90                   	nop
c0013450:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c001345a:	e8 b5 fe ff ff       	call   c0013314 <schedule()>
c001345f:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013464:	48                   	dec    eax
c0013465:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001346a:	85 c0                	test   eax,eax
c001346c:	75 86                	jne    c00133f4 <Semaphore::tryAcquire()+0x50>
c001346e:	eb 8c                	jmp    c00133fc <Semaphore::tryAcquire()+0x58>

c0013470 <Semaphore::assertLocked(char const*)>:
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013477:	fa                   	cli    
c0013478:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001347e:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0013483:	8d 48 01             	lea    ecx,[eax+0x1]
c0013486:	89 0d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ecx
c001348c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001348e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013491:	7c 29                	jl     c00134bc <Semaphore::assertLocked(char const*)+0x4c>
c0013493:	90                   	nop
c0013494:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c0013499:	85 c0                	test   eax,eax
c001349b:	75 0b                	jne    c00134a8 <Semaphore::assertLocked(char const*)+0x38>
c001349d:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c00134a2:	85 c0                	test   eax,eax
c00134a4:	75 2e                	jne    c00134d4 <Semaphore::assertLocked(char const*)+0x64>
c00134a6:	66 90                	xchg   ax,ax
c00134a8:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00134ad:	48                   	dec    eax
c00134ae:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00134b3:	75 03                	jne    c00134b8 <Semaphore::assertLocked(char const*)+0x48>
c00134b5:	fb                   	sti    
c00134b6:	66 90                	xchg   ax,ax
c00134b8:	83 c4 0c             	add    esp,0xc
c00134bb:	c3                   	ret    
c00134bc:	83 ec 0c             	sub    esp,0xc
c00134bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134c3:	52                   	push   edx
c00134c4:	e8 3a cc ff ff       	call   c0010103 <KePanic(char const*)>
c00134c9:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	48                   	dec    eax
c00134d2:	eb c0                	jmp    c0013494 <Semaphore::assertLocked(char const*)+0x24>
c00134d4:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c00134de:	e8 31 fe ff ff       	call   c0013314 <schedule()>
c00134e3:	eb c3                	jmp    c00134a8 <Semaphore::assertLocked(char const*)+0x38>
c00134e5:	8d 76 00             	lea    esi,[esi+0x0]

c00134e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00134e8:	83 ec 0c             	sub    esp,0xc
c00134eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134f7:	e8 18 fe ff ff       	call   c0013314 <schedule()>
c00134fc:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013501:	48                   	dec    eax
c0013502:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013507:	75 03                	jne    c001350c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013509:	fb                   	sti    
c001350a:	66 90                	xchg   ax,ax
c001350c:	83 c4 0c             	add    esp,0xc
c001350f:	c3                   	ret    

c0013510 <blockTask(TaskState)>:
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	fa                   	cli    
c0013514:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001351a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001351e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013523:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013526:	e8 e9 fd ff ff       	call   c0013314 <schedule()>
c001352b:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013530:	48                   	dec    eax
c0013531:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013536:	75 04                	jne    c001353c <blockTask(TaskState)+0x2c>
c0013538:	fb                   	sti    
c0013539:	8d 76 00             	lea    esi,[esi+0x0]
c001353c:	83 c4 0c             	add    esp,0xc
c001353f:	c3                   	ret    

c0013540 <waitTask(int, int*, int)>:
c0013540:	83 ec 18             	sub    esp,0x18
c0013543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013548:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001354c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001354f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013558:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001355b:	6a 07                	push   0x7
c001355d:	e8 ae ff ff ff       	call   c0013510 <blockTask(TaskState)>
c0013562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001356d:	85 d2                	test   edx,edx
c001356f:	74 0b                	je     c001357c <waitTask(int, int*, int)+0x3c>
c0013571:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013574:	89 02                	mov    DWORD PTR [edx],eax
c0013576:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001357b:	90                   	nop
c001357c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001357f:	83 c4 0c             	add    esp,0xc
c0013582:	c3                   	ret    
c0013583:	90                   	nop

c0013584 <milliTenthSleepUntil(unsigned int)>:
c0013584:	83 ec 0c             	sub    esp,0xc
c0013587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358b:	39 05 2c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a2c,eax
c0013591:	76 05                	jbe    c0013598 <milliTenthSleepUntil(unsigned int)+0x14>
c0013593:	90                   	nop
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    
c0013598:	fa                   	cli    
c0013599:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001359f:	83 ec 08             	sub    esp,0x8
c00135a2:	ff 05 04 37 02 c0    	inc    DWORD PTR ds:0xc0023704
c00135a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135ae:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00135b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00135b7:	52                   	push   edx
c00135b8:	68 18 37 02 c0       	push   0xc0023718
c00135bd:	e8 fa 8c 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00135c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00135c9:	e8 42 ff ff ff       	call   c0013510 <blockTask(TaskState)>
c00135ce:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00135d3:	83 c4 10             	add    esp,0x10
c00135d6:	48                   	dec    eax
c00135d7:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c00135dc:	85 c0                	test   eax,eax
c00135de:	75 0c                	jne    c00135ec <milliTenthSleepUntil(unsigned int)+0x68>
c00135e0:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c00135e5:	85 c0                	test   eax,eax
c00135e7:	75 17                	jne    c0013600 <milliTenthSleepUntil(unsigned int)+0x7c>
c00135e9:	8d 76 00             	lea    esi,[esi+0x0]
c00135ec:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00135f1:	48                   	dec    eax
c00135f2:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00135f7:	75 9b                	jne    c0013594 <milliTenthSleepUntil(unsigned int)+0x10>
c00135f9:	fb                   	sti    
c00135fa:	83 c4 0c             	add    esp,0xc
c00135fd:	c3                   	ret    
c00135fe:	66 90                	xchg   ax,ax
c0013600:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c001360a:	e8 05 fd ff ff       	call   c0013314 <schedule()>
c001360f:	eb db                	jmp    c00135ec <milliTenthSleepUntil(unsigned int)+0x68>
c0013611:	8d 76 00             	lea    esi,[esi+0x0]

c0013614 <milliTenthSleep(unsigned int)>:
c0013614:	a1 2c 2a 02 c0       	mov    eax,ds:0xc0022a2c
c0013619:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001361d:	e9 62 ff ff ff       	jmp    c0013584 <milliTenthSleepUntil(unsigned int)>
c0013622:	66 90                	xchg   ax,ax

c0013624 <sleep(unsigned int)>:
c0013624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013628:	8d 04 80             	lea    eax,[eax+eax*4]
c001362b:	8d 04 80             	lea    eax,[eax+eax*4]
c001362e:	8d 04 80             	lea    eax,[eax+eax*4]
c0013631:	8d 04 80             	lea    eax,[eax+eax*4]
c0013634:	c1 e0 04             	shl    eax,0x4
c0013637:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001363b:	eb d7                	jmp    c0013614 <milliTenthSleep(unsigned int)>
c001363d:	90                   	nop
c001363e:	66 90                	xchg   ax,ax

c0013640 <Semaphore::acquire()>:
c0013640:	83 ec 0c             	sub    esp,0xc
c0013643:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013647:	fa                   	cli    
c0013648:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c001364d:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013653:	8d 48 01             	lea    ecx,[eax+0x1]
c0013656:	89 0d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ecx
c001365c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001365f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013661:	7d 2d                	jge    c0013690 <Semaphore::acquire()+0x50>
c0013663:	41                   	inc    ecx
c0013664:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013667:	90                   	nop
c0013668:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c001366d:	85 c0                	test   eax,eax
c001366f:	75 0b                	jne    c001367c <Semaphore::acquire()+0x3c>
c0013671:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c0013676:	85 c0                	test   eax,eax
c0013678:	75 62                	jne    c00136dc <Semaphore::acquire()+0x9c>
c001367a:	66 90                	xchg   ax,ax
c001367c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013681:	48                   	dec    eax
c0013682:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013687:	75 03                	jne    c001368c <Semaphore::acquire()+0x4c>
c0013689:	fb                   	sti    
c001368a:	66 90                	xchg   ax,ax
c001368c:	83 c4 0c             	add    esp,0xc
c001368f:	c3                   	ret    
c0013690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013695:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001369c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001369f:	85 c9                	test   ecx,ecx
c00136a1:	74 4d                	je     c00136f0 <Semaphore::acquire()+0xb0>
c00136a3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00136a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00136ac:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00136af:	90                   	nop
c00136b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136b5:	83 ec 0c             	sub    esp,0xc
c00136b8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00136bb:	68 84 e5 01 c0       	push   0xc001e584
c00136c0:	e8 c3 6d ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c00136c5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00136cc:	e8 3f fe ff ff       	call   c0013510 <blockTask(TaskState)>
c00136d1:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	48                   	dec    eax
c00136da:	eb 8c                	jmp    c0013668 <Semaphore::acquire()+0x28>
c00136dc:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c00136e6:	e8 29 fc ff ff       	call   c0013314 <schedule()>
c00136eb:	eb 8f                	jmp    c001367c <Semaphore::acquire()+0x3c>
c00136ed:	8d 76 00             	lea    esi,[esi+0x0]
c00136f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00136f8:	eb b6                	jmp    c00136b0 <Semaphore::acquire()+0x70>
c00136fa:	66 90                	xchg   ax,ax

c00136fc <taskReturned>:
c00136fc:	83 ec 18             	sub    esp,0x18
c00136ff:	68 a4 e5 01 c0       	push   0xc001e5a4
c0013704:	e8 fa c9 ff ff       	call   c0010103 <KePanic(char const*)>
c0013709:	83 c4 10             	add    esp,0x10
c001370c:	83 ec 0c             	sub    esp,0xc
c001370f:	6a 02                	push   0x2
c0013711:	e8 fa fd ff ff       	call   c0013510 <blockTask(TaskState)>
c0013716:	fa                   	cli    
c0013717:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001371d:	e8 f2 fb ff ff       	call   c0013314 <schedule()>
c0013722:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013727:	83 c4 10             	add    esp,0x10
c001372a:	48                   	dec    eax
c001372b:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013730:	85 c0                	test   eax,eax
c0013732:	75 d8                	jne    c001370c <taskReturned+0x10>
c0013734:	fb                   	sti    
c0013735:	eb d5                	jmp    c001370c <taskReturned+0x10>
c0013737:	90                   	nop

c0013738 <Thr::processFromPID(int)>:
c0013738:	57                   	push   edi
c0013739:	56                   	push   esi
c001373a:	53                   	push   ebx
c001373b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001373f:	fa                   	cli    
c0013740:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013746:	83 ec 0c             	sub    esp,0xc
c0013749:	68 24 37 02 c0       	push   0xc0023724
c001374e:	e8 a9 8a 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013753:	83 c4 10             	add    esp,0x10
c0013756:	89 c7                	mov    edi,eax
c0013758:	eb 16                	jmp    c0013770 <Thr::processFromPID(int)+0x38>
c001375a:	66 90                	xchg   ax,ax
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	68 24 37 02 c0       	push   0xc0023724
c0013764:	e8 93 8a 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	39 f8                	cmp    eax,edi
c001376e:	74 4c                	je     c00137bc <Thr::processFromPID(int)+0x84>
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	68 24 37 02 c0       	push   0xc0023724
c0013778:	e8 7f 8a 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001377d:	c7 04 24 24 37 02 c0 	mov    DWORD PTR [esp],0xc0023724
c0013784:	89 c3                	mov    ebx,eax
c0013786:	e8 79 8a 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001378b:	58                   	pop    eax
c001378c:	5a                   	pop    edx
c001378d:	53                   	push   ebx
c001378e:	68 24 37 02 c0       	push   0xc0023724
c0013793:	e8 24 8b 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013798:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001379b:	83 c4 10             	add    esp,0x10
c001379e:	39 30                	cmp    DWORD PTR [eax],esi
c00137a0:	75 ba                	jne    c001375c <Thr::processFromPID(int)+0x24>
c00137a2:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00137a7:	48                   	dec    eax
c00137a8:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00137ad:	74 09                	je     c00137b8 <Thr::processFromPID(int)+0x80>
c00137af:	90                   	nop
c00137b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00137b3:	5b                   	pop    ebx
c00137b4:	5e                   	pop    esi
c00137b5:	5f                   	pop    edi
c00137b6:	c3                   	ret    
c00137b7:	90                   	nop
c00137b8:	fb                   	sti    
c00137b9:	eb f5                	jmp    c00137b0 <Thr::processFromPID(int)+0x78>
c00137bb:	90                   	nop
c00137bc:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00137c1:	48                   	dec    eax
c00137c2:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00137c7:	75 07                	jne    c00137d0 <Thr::processFromPID(int)+0x98>
c00137c9:	fb                   	sti    
c00137ca:	5b                   	pop    ebx
c00137cb:	5e                   	pop    esi
c00137cc:	5f                   	pop    edi
c00137cd:	c3                   	ret    
c00137ce:	66 90                	xchg   ax,ax
c00137d0:	5b                   	pop    ebx
c00137d1:	31 c0                	xor    eax,eax
c00137d3:	5e                   	pop    esi
c00137d4:	5f                   	pop    edi
c00137d5:	c3                   	ret    
c00137d6:	66 90                	xchg   ax,ax

c00137d8 <unblockTask(ThreadControlBlock*)>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 08             	sub    esp,0x8
c00137dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137e0:	fa                   	cli    
c00137e1:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c00137e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137ea:	85 c0                	test   eax,eax
c00137ec:	74 66                	je     c0013854 <unblockTask(ThreadControlBlock*)+0x7c>
c00137ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137f1:	48                   	dec    eax
c00137f2:	74 38                	je     c001382c <unblockTask(ThreadControlBlock*)+0x54>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 24 37 02 c0       	push   0xc0023724
c00137fc:	e8 fb 89 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	85 c0                	test   eax,eax
c0013806:	75 1c                	jne    c0013824 <unblockTask(ThreadControlBlock*)+0x4c>
c0013808:	eb 5e                	jmp    c0013868 <unblockTask(ThreadControlBlock*)+0x90>
c001380a:	66 90                	xchg   ax,ax
c001380c:	83 ec 08             	sub    esp,0x8
c001380f:	50                   	push   eax
c0013810:	68 24 37 02 c0       	push   0xc0023724
c0013815:	e8 92 8d 00 00       	call   c001c5ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001381a:	83 c4 10             	add    esp,0x10
c001381d:	85 c0                	test   eax,eax
c001381f:	74 47                	je     c0013868 <unblockTask(ThreadControlBlock*)+0x90>
c0013821:	8d 76 00             	lea    esi,[esi+0x0]
c0013824:	39 c3                	cmp    ebx,eax
c0013826:	75 e4                	jne    c001380c <unblockTask(ThreadControlBlock*)+0x34>
c0013828:	eb 12                	jmp    c001383c <unblockTask(ThreadControlBlock*)+0x64>
c001382a:	66 90                	xchg   ax,ax
c001382c:	83 ec 0c             	sub    esp,0xc
c001382f:	68 26 e5 01 c0       	push   0xc001e526
c0013834:	e8 4f 6c ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013841:	48                   	dec    eax
c0013842:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013847:	75 03                	jne    c001384c <unblockTask(ThreadControlBlock*)+0x74>
c0013849:	fb                   	sti    
c001384a:	66 90                	xchg   ax,ax
c001384c:	83 c4 08             	add    esp,0x8
c001384f:	5b                   	pop    ebx
c0013850:	c3                   	ret    
c0013851:	8d 76 00             	lea    esi,[esi+0x0]
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	68 0f e5 01 c0       	push   0xc001e50f
c001385c:	e8 27 6c ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0013861:	83 c4 10             	add    esp,0x10
c0013864:	eb d6                	jmp    c001383c <unblockTask(ThreadControlBlock*)+0x64>
c0013866:	66 90                	xchg   ax,ax
c0013868:	83 ec 08             	sub    esp,0x8
c001386b:	53                   	push   ebx
c001386c:	68 24 37 02 c0       	push   0xc0023724
c0013871:	e8 46 8a 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013876:	83 c4 10             	add    esp,0x10
c0013879:	eb c1                	jmp    c001383c <unblockTask(ThreadControlBlock*)+0x64>
c001387b:	90                   	nop

c001387c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001387c:	55                   	push   ebp
c001387d:	57                   	push   edi
c001387e:	56                   	push   esi
c001387f:	53                   	push   ebx
c0013880:	83 ec 1c             	sub    esp,0x1c
c0013883:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013887:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001388a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013890:	85 ed                	test   ebp,ebp
c0013892:	7e 24                	jle    c00138b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013894:	31 f6                	xor    esi,esi
c0013896:	66 90                	xchg   ax,ax
c0013898:	83 ec 0c             	sub    esp,0xc
c001389b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00138a2:	46                   	inc    esi
c00138a3:	57                   	push   edi
c00138a4:	e8 20 3f ff ff       	call   c00077c9 <free>
c00138a9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00138b5:	7f e1                	jg     c0013898 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00138b7:	90                   	nop
c00138b8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00138c2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00138c7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00138ca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00138cd:	d3 c0                	rol    eax,cl
c00138cf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00138d6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138d9:	89 f7                	mov    edi,esi
c00138db:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00138e3:	0f 85 77 01 00 00    	jne    c0013a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00138e9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00138ef:	85 ed                	test   ebp,ebp
c00138f1:	74 1d                	je     c0013910 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00138f3:	83 ec 0c             	sub    esp,0xc
c00138f6:	55                   	push   ebp
c00138f7:	e8 18 c5 ff ff       	call   c000fe14 <EnvVarContainer::~EnvVarContainer()>
c00138fc:	59                   	pop    ecx
c00138fd:	5e                   	pop    esi
c00138fe:	6a 0c                	push   0xc
c0013900:	55                   	push   ebp
c0013901:	e8 8c 6a ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c0013906:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	89 f7                	mov    edi,esi
c001390e:	66 90                	xchg   ax,ax
c0013910:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013916:	85 c0                	test   eax,eax
c0013918:	0f 84 b6 00 00 00    	je     c00139d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001391e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013921:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013925:	31 c9                	xor    ecx,ecx
c0013927:	eb 17                	jmp    c0013940 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013929:	8d 76 00             	lea    esi,[esi+0x0]
c001392c:	41                   	inc    ecx
c001392d:	83 f9 10             	cmp    ecx,0x10
c0013930:	0f 84 9e 00 00 00    	je     c00139d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013936:	66 90                	xchg   ax,ax
c0013938:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001393e:	66 90                	xchg   ax,ax
c0013940:	31 d2                	xor    edx,edx
c0013942:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013949:	d3 fa                	sar    edx,cl
c001394b:	83 e2 01             	and    edx,0x1
c001394e:	74 dc                	je     c001392c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013950:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013953:	01 d2                	add    edx,edx
c0013955:	01 ca                	add    edx,ecx
c0013957:	8d 14 92             	lea    edx,[edx+edx*4]
c001395a:	01 d0                	add    eax,edx
c001395c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013962:	83 fd 07             	cmp    ebp,0x7
c0013965:	75 c5                	jne    c001392c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013967:	05 40 02 00 00       	add    eax,0x240
c001396c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001396f:	83 fd ff             	cmp    ebp,0xffffffff
c0013972:	0f 8c f0 00 00 00    	jl     c0013a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013978:	0f 84 ae 01 00 00    	je     c0013b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c001397e:	85 ed                	test   ebp,ebp
c0013980:	0f 84 92 01 00 00    	je     c0013b18 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013986:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013988:	75 a2                	jne    c001392c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001398a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013990:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013994:	01 d0                	add    eax,edx
c0013996:	66 90                	xchg   ax,ax
c0013998:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001399c:	83 ec 0c             	sub    esp,0xc
c001399f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00139a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00139ae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00139b5:	50                   	push   eax
c00139b6:	e8 1d fe ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00139c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139c5:	89 f7                	mov    edi,esi
c00139c7:	41                   	inc    ecx
c00139c8:	83 f9 10             	cmp    ecx,0x10
c00139cb:	0f 85 67 ff ff ff    	jne    c0013938 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00139d1:	8d 76 00             	lea    esi,[esi+0x0]
c00139d4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00139da:	85 c0                	test   eax,eax
c00139dc:	74 62                	je     c0013a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139de:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00139e4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00139ea:	74 54                	je     c0013a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139ec:	83 ec 0c             	sub    esp,0xc
c00139ef:	68 24 37 02 c0       	push   0xc0023724
c00139f4:	e8 03 88 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139f9:	c7 04 24 24 37 02 c0 	mov    DWORD PTR [esp],0xc0023724
c0013a00:	89 c7                	mov    edi,eax
c0013a02:	e8 d9 87 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a07:	83 c4 10             	add    esp,0x10
c0013a0a:	84 c0                	test   al,al
c0013a0c:	0f 84 ce 00 00 00    	je     c0013ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013a12:	66 90                	xchg   ax,ax
c0013a14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a17:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a1d:	85 d2                	test   edx,edx
c0013a1f:	74 0f                	je     c0013a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013a21:	83 ec 0c             	sub    esp,0xc
c0013a24:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a26:	52                   	push   edx
c0013a27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a2a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013a3a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a40:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013a46:	85 db                	test   ebx,ebx
c0013a48:	74 16                	je     c0013a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	53                   	push   ebx
c0013a4e:	e8 13 5d ff ff       	call   c0009766 <VAS::~VAS()>
c0013a53:	58                   	pop    eax
c0013a54:	5a                   	pop    edx
c0013a55:	6a 14                	push   0x14
c0013a57:	53                   	push   ebx
c0013a58:	e8 35 69 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c0013a5d:	83 c4 10             	add    esp,0x10
c0013a60:	83 c4 1c             	add    esp,0x1c
c0013a63:	5b                   	pop    ebx
c0013a64:	5e                   	pop    esi
c0013a65:	5f                   	pop    edi
c0013a66:	5d                   	pop    ebp
c0013a67:	c3                   	ret    
c0013a68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	68 d8 e5 01 c0       	push   0xc001e5d8
c0013a74:	e8 8a c6 ff ff       	call   c0010103 <KePanic(char const*)>
c0013a79:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	89 f7                	mov    edi,esi
c0013a81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a85:	e9 a2 fe ff ff       	jmp    c001392c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a8a:	66 90                	xchg   ax,ax
c0013a8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a92:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013a98:	75 1e                	jne    c0013ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013a9a:	83 ec 0c             	sub    esp,0xc
c0013a9d:	68 40 e6 01 c0       	push   0xc001e640
c0013aa2:	e8 e1 69 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0013aa7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013aae:	e8 5d fa ff ff       	call   c0013510 <blockTask(TaskState)>
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	66 90                	xchg   ax,ax
c0013ab8:	83 ec 08             	sub    esp,0x8
c0013abb:	56                   	push   esi
c0013abc:	68 24 37 02 c0       	push   0xc0023724
c0013ac1:	e8 f6 87 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ac6:	c7 04 24 24 37 02 c0 	mov    DWORD PTR [esp],0xc0023724
c0013acd:	e8 2a 87 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	39 f8                	cmp    eax,edi
c0013ad7:	0f 84 37 ff ff ff    	je     c0013a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013add:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	68 24 37 02 c0       	push   0xc0023724
c0013ae8:	e8 0f 87 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013aed:	c7 04 24 24 37 02 c0 	mov    DWORD PTR [esp],0xc0023724
c0013af4:	89 c6                	mov    esi,eax
c0013af6:	e8 09 87 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013afb:	83 c4 10             	add    esp,0x10
c0013afe:	39 f3                	cmp    ebx,esi
c0013b00:	74 b6                	je     c0013ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b02:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b08:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013b0e:	75 a8                	jne    c0013ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b10:	e9 77 ff ff ff       	jmp    c0013a8c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b15:	8d 76 00             	lea    esi,[esi+0x0]
c0013b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	68 0c e6 01 c0       	push   0xc001e60c
c0013b24:	e9 4b ff ff ff       	jmp    c0013a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013b29:	8d 76 00             	lea    esi,[esi+0x0]
c0013b2c:	8b 36                	mov    esi,DWORD PTR [esi]
c0013b2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b32:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013b35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b38:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013b3e:	01 d7                	add    edi,edx
c0013b40:	89 f8                	mov    eax,edi
c0013b42:	e9 51 fe ff ff       	jmp    c0013998 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013b47:	90                   	nop

c0013b48 <cleanerTaskFunction(void*)>:
c0013b48:	53                   	push   ebx
c0013b49:	83 ec 08             	sub    esp,0x8
c0013b4c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013b51:	48                   	dec    eax
c0013b52:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013b57:	75 03                	jne    c0013b5c <cleanerTaskFunction(void*)+0x14>
c0013b59:	fb                   	sti    
c0013b5a:	66 90                	xchg   ax,ax
c0013b5c:	fa                   	cli    
c0013b5d:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013b62:	80 3d ec 36 02 c0 00 	cmp    BYTE PTR ds:0xc00236ec,0x0
c0013b69:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6c:	89 15 08 37 02 c0    	mov    DWORD PTR ds:0xc0023708,edx
c0013b72:	0f 84 ac 00 00 00    	je     c0013c24 <cleanerTaskFunction(void*)+0xdc>
c0013b78:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013b7d:	85 c0                	test   eax,eax
c0013b7f:	75 03                	jne    c0013b84 <cleanerTaskFunction(void*)+0x3c>
c0013b81:	fb                   	sti    
c0013b82:	66 90                	xchg   ax,ax
c0013b84:	c6 05 ec 36 02 c0 00 	mov    BYTE PTR ds:0xc00236ec,0x0
c0013b8b:	fa                   	cli    
c0013b8c:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013b92:	ff 05 04 37 02 c0    	inc    DWORD PTR ds:0xc0023704
c0013b98:	fa                   	cli    
c0013b99:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013b9f:	eb 2b                	jmp    c0013bcc <cleanerTaskFunction(void*)+0x84>
c0013ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	68 0c 37 02 c0       	push   0xc002370c
c0013bac:	e8 4b 86 00 00       	call   c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bb1:	c7 04 24 0c 37 02 c0 	mov    DWORD PTR [esp],0xc002370c
c0013bb8:	89 c3                	mov    ebx,eax
c0013bba:	e8 45 86 00 00       	call   c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013bbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bc2:	e8 b5 fc ff ff       	call   c001387c <cleanupTerminatedTask(ThreadControlBlock*)>
c0013bc7:	83 c4 10             	add    esp,0x10
c0013bca:	66 90                	xchg   ax,ax
c0013bcc:	83 ec 0c             	sub    esp,0xc
c0013bcf:	68 0c 37 02 c0       	push   0xc002370c
c0013bd4:	e8 07 86 00 00       	call   c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013bd9:	83 c4 10             	add    esp,0x10
c0013bdc:	84 c0                	test   al,al
c0013bde:	74 c4                	je     c0013ba4 <cleanerTaskFunction(void*)+0x5c>
c0013be0:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013be5:	48                   	dec    eax
c0013be6:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013beb:	75 03                	jne    c0013bf0 <cleanerTaskFunction(void*)+0xa8>
c0013bed:	fb                   	sti    
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0013bf5:	48                   	dec    eax
c0013bf6:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c0013bfb:	0f 85 4b ff ff ff    	jne    c0013b4c <cleanerTaskFunction(void*)+0x4>
c0013c01:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c0013c06:	85 c0                	test   eax,eax
c0013c08:	0f 84 3e ff ff ff    	je     c0013b4c <cleanerTaskFunction(void*)+0x4>
c0013c0e:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c0013c18:	e8 f7 f6 ff ff       	call   c0013314 <schedule()>
c0013c1d:	e9 2a ff ff ff       	jmp    c0013b4c <cleanerTaskFunction(void*)+0x4>
c0013c22:	66 90                	xchg   ax,ax
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	6a 02                	push   0x2
c0013c29:	e8 ba f8 ff ff       	call   c00134e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	e9 4e ff ff ff       	jmp    c0013b84 <cleanerTaskFunction(void*)+0x3c>
c0013c36:	66 90                	xchg   ax,ax

c0013c38 <terminateTask(int)>:
c0013c38:	83 ec 14             	sub    esp,0x14
c0013c3b:	fa                   	cli    
c0013c3c:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013c42:	ff 05 04 37 02 c0    	inc    DWORD PTR ds:0xc0023704
c0013c48:	fa                   	cli    
c0013c49:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013c4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c58:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c63:	50                   	push   eax
c0013c64:	68 0c 37 02 c0       	push   0xc002370c
c0013c69:	e8 4e 86 00 00       	call   c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013c7d:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013c82:	85 c0                	test   eax,eax
c0013c84:	74 5e                	je     c0013ce4 <terminateTask(int)+0xac>
c0013c86:	83 ec 0c             	sub    esp,0xc
c0013c89:	c6 05 ec 36 02 c0 01 	mov    BYTE PTR ds:0xc00236ec,0x1
c0013c90:	50                   	push   eax
c0013c91:	e8 42 fb ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	8d 76 00             	lea    esi,[esi+0x0]
c0013c9c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013ca1:	48                   	dec    eax
c0013ca2:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013ca7:	75 03                	jne    c0013cac <terminateTask(int)+0x74>
c0013ca9:	fb                   	sti    
c0013caa:	66 90                	xchg   ax,ax
c0013cac:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0013cb1:	48                   	dec    eax
c0013cb2:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c0013cb7:	75 0b                	jne    c0013cc4 <terminateTask(int)+0x8c>
c0013cb9:	83 3d 00 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023700,0x0
c0013cc0:	75 36                	jne    c0013cf8 <terminateTask(int)+0xc0>
c0013cc2:	66 90                	xchg   ax,ax
c0013cc4:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013cc9:	48                   	dec    eax
c0013cca:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013ccf:	75 03                	jne    c0013cd4 <terminateTask(int)+0x9c>
c0013cd1:	fb                   	sti    
c0013cd2:	66 90                	xchg   ax,ax
c0013cd4:	fa                   	cli    
c0013cd5:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013cdb:	90                   	nop
c0013cdc:	e8 33 f6 ff ff       	call   c0013314 <schedule()>
c0013ce1:	eb e1                	jmp    c0013cc4 <terminateTask(int)+0x8c>
c0013ce3:	90                   	nop
c0013ce4:	83 ec 0c             	sub    esp,0xc
c0013ce7:	68 3d e5 01 c0       	push   0xc001e53d
c0013cec:	e8 97 67 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	eb a6                	jmp    c0013c9c <terminateTask(int)+0x64>
c0013cf6:	66 90                	xchg   ax,ax
c0013cf8:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c0013d02:	eb d8                	jmp    c0013cdc <terminateTask(int)+0xa4>

c0013d04 <Thr::terminateFromIRQ(int)>:
c0013d04:	83 ec 18             	sub    esp,0x18
c0013d07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0b:	50                   	push   eax
c0013d0c:	e8 27 ff ff ff       	call   c0013c38 <terminateTask(int)>
c0013d11:	90                   	nop
c0013d12:	66 90                	xchg   ax,ax

c0013d14 <Semaphore::release()>:
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d1b:	fa                   	cli    
c0013d1c:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0013d21:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013d27:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d2a:	89 0d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,ecx
c0013d30:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013d33:	85 c9                	test   ecx,ecx
c0013d35:	74 41                	je     c0013d78 <Semaphore::release()+0x64>
c0013d37:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d40:	51                   	push   ecx
c0013d41:	e8 92 fa ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c0013d46:	a1 04 37 02 c0       	mov    eax,ds:0xc0023704
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	48                   	dec    eax
c0013d4f:	90                   	nop
c0013d50:	a3 04 37 02 c0       	mov    ds:0xc0023704,eax
c0013d55:	85 c0                	test   eax,eax
c0013d57:	75 0b                	jne    c0013d64 <Semaphore::release()+0x50>
c0013d59:	a1 00 37 02 c0       	mov    eax,ds:0xc0023700
c0013d5e:	85 c0                	test   eax,eax
c0013d60:	75 1e                	jne    c0013d80 <Semaphore::release()+0x6c>
c0013d62:	66 90                	xchg   ax,ax
c0013d64:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013d69:	48                   	dec    eax
c0013d6a:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013d6f:	75 03                	jne    c0013d74 <Semaphore::release()+0x60>
c0013d71:	fb                   	sti    
c0013d72:	66 90                	xchg   ax,ax
c0013d74:	83 c4 0c             	add    esp,0xc
c0013d77:	c3                   	ret    
c0013d78:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013d7b:	eb d3                	jmp    c0013d50 <Semaphore::release()+0x3c>
c0013d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d80:	c7 05 00 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023700,0x0
c0013d8a:	e8 85 f5 ff ff       	call   c0013314 <schedule()>
c0013d8f:	eb d3                	jmp    c0013d64 <Semaphore::release()+0x50>
c0013d91:	8d 76 00             	lea    esi,[esi+0x0]

c0013d94 <__static_initialization_and_destruction_0(int, int)>:
c0013d94:	83 ec 0c             	sub    esp,0xc
c0013d97:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013d9c:	0f 85 8e 00 00 00    	jne    c0013e30 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013da2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013daa:	0f 85 80 00 00 00    	jne    c0013e30 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013db0:	83 ec 0c             	sub    esp,0xc
c0013db3:	68 24 37 02 c0       	push   0xc0023724
c0013db8:	e8 ab 87 00 00       	call   c001c568 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013dbd:	83 c4 10             	add    esp,0x10
c0013dc0:	83 ec 04             	sub    esp,0x4
c0013dc3:	68 f0 f0 01 c0       	push   0xc001f0f0
c0013dc8:	68 24 37 02 c0       	push   0xc0023724
c0013dcd:	68 18 c5 01 c0       	push   0xc001c518
c0013dd2:	e8 6b 65 ff ff       	call   c000a342 <__cxa_atexit>
c0013dd7:	83 c4 10             	add    esp,0x10
c0013dda:	83 ec 0c             	sub    esp,0xc
c0013ddd:	68 18 37 02 c0       	push   0xc0023718
c0013de2:	e8 81 87 00 00       	call   c001c568 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	83 ec 04             	sub    esp,0x4
c0013ded:	68 f0 f0 01 c0       	push   0xc001f0f0
c0013df2:	68 18 37 02 c0       	push   0xc0023718
c0013df7:	68 18 c5 01 c0       	push   0xc001c518
c0013dfc:	e8 41 65 ff ff       	call   c000a342 <__cxa_atexit>
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	68 0c 37 02 c0       	push   0xc002370c
c0013e0c:	e8 57 87 00 00       	call   c001c568 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	83 ec 04             	sub    esp,0x4
c0013e17:	68 f0 f0 01 c0       	push   0xc001f0f0
c0013e1c:	68 0c 37 02 c0       	push   0xc002370c
c0013e21:	68 18 c5 01 c0       	push   0xc001c518
c0013e26:	e8 17 65 ff ff       	call   c000a342 <__cxa_atexit>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	66 90                	xchg   ax,ax
c0013e30:	90                   	nop
c0013e31:	83 c4 0c             	add    esp,0xc
c0013e34:	c3                   	ret    
c0013e35:	8d 76 00             	lea    esi,[esi+0x0]

c0013e38 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013e38:	83 ec 0c             	sub    esp,0xc
c0013e3b:	83 ec 08             	sub    esp,0x8
c0013e3e:	68 ff ff 00 00       	push   0xffff
c0013e43:	6a 01                	push   0x1
c0013e45:	e8 4a ff ff ff       	call   c0013d94 <__static_initialization_and_destruction_0(int, int)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	83 c4 0c             	add    esp,0xc
c0013e50:	c3                   	ret    

c0013e51 <Vm::inbv(unsigned short)>:
c0013e51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e55:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e5a:	75 06                	jne    c0013e62 <Vm::inbv(unsigned short)+0x11>
c0013e5c:	a0 6c 37 02 c0       	mov    al,ds:0xc002376c
c0013e61:	c3                   	ret    
c0013e62:	ec                   	in     al,dx
c0013e63:	c3                   	ret    

c0013e64 <Vm::outbv(unsigned short, unsigned char)>:
c0013e64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e6c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e71:	75 25                	jne    c0013e98 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013e73:	8b 0d 6c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002376c
c0013e79:	8d 51 01             	lea    edx,[ecx+0x1]
c0013e7c:	88 81 80 37 02 c0    	mov    BYTE PTR [ecx-0x3ffdc880],al
c0013e82:	89 15 6c 37 02 c0    	mov    DWORD PTR ds:0xc002376c,edx
c0013e88:	83 fa 20             	cmp    edx,0x20
c0013e8b:	75 0c                	jne    c0013e99 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013e8d:	c7 05 6c 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002376c,0x1f
c0013e97:	c3                   	ret    
c0013e98:	ee                   	out    dx,al
c0013e99:	c3                   	ret    

c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>:
c0013e9a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013e9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013ea4:	c1 e0 04             	shl    eax,0x4
c0013ea7:	01 d0                	add    eax,edx
c0013ea9:	c3                   	ret    

c0013eaa <Vm::getSegment(unsigned int)>:
c0013eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eae:	c1 e8 10             	shr    eax,0x10
c0013eb1:	c3                   	ret    

c0013eb2 <Vm::getOffset(unsigned int)>:
c0013eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013eb6:	c3                   	ret    

c0013eb7 <Vm::mainloop2()>:
c0013eb7:	83 ec 18             	sub    esp,0x18
c0013eba:	fa                   	cli    
c0013ebb:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013ec1:	6a 02                	push   0x2
c0013ec3:	c6 05 65 37 02 c0 01 	mov    BYTE PTR ds:0xc0023765,0x1
c0013eca:	e8 19 f6 ff ff       	call   c00134e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013ecf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ed4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013ed8:	52                   	push   edx
c0013ed9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013edd:	52                   	push   edx
c0013ede:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013ee2:	52                   	push   edx
c0013ee3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013ee7:	50                   	push   eax
c0013ee8:	e8 22 c3 fe ff       	call   c000020f <goToVM86>
c0013eed:	83 c4 2c             	add    esp,0x2c
c0013ef0:	c3                   	ret    

c0013ef1 <Vm::mainVm8086Loop(void*)>:
c0013ef1:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013ef6:	48                   	dec    eax
c0013ef7:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013efc:	75 01                	jne    c0013eff <Vm::mainVm8086Loop(void*)+0xe>
c0013efe:	fb                   	sti    
c0013eff:	eb b6                	jmp    c0013eb7 <Vm::mainloop2()>

c0013f01 <Vm::mainloop3(unsigned long)>:
c0013f01:	83 ec 18             	sub    esp,0x18
c0013f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f08:	fa                   	cli    
c0013f09:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013f0f:	6a 02                	push   0x2
c0013f11:	c6 05 64 37 02 c0 01 	mov    BYTE PTR ds:0xc0023764,0x1
c0013f18:	a3 60 37 02 c0       	mov    ds:0xc0023760,eax
c0013f1d:	e8 c6 f5 ff ff       	call   c00134e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f22:	83 c4 1c             	add    esp,0x1c
c0013f25:	eb 90                	jmp    c0013eb7 <Vm::mainloop2()>

c0013f27 <Vm::initialise8086()>:
c0013f27:	83 ec 0c             	sub    esp,0xc
c0013f2a:	68 80 00 00 00       	push   0x80
c0013f2f:	6a 00                	push   0x0
c0013f31:	68 f1 3e 01 c0       	push   0xc0013ef1
c0013f36:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c0013f3c:	e8 b3 f1 ff ff       	call   c00130f4 <Process::createThread(void (*)(void*), void*, int)>
c0013f41:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013f48:	a3 68 37 02 c0       	mov    ds:0xc0023768,eax
c0013f4d:	68 00 01 00 00       	push   0x100
c0013f52:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0013f57:	6a 00                	push   0x0
c0013f59:	6a 00                	push   0x0
c0013f5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f61:	e8 5e 5c ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f66:	83 c4 2c             	add    esp,0x2c
c0013f69:	c3                   	ret    

c0013f6a <Vm::finish8086()>:
c0013f6a:	53                   	push   ebx
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	fa                   	cli    
c0013f6f:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c0013f75:	80 3d 64 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023764,0x0
c0013f7c:	75 15                	jne    c0013f93 <Vm::finish8086()+0x29>
c0013f7e:	e8 91 f3 ff ff       	call   c0013314 <schedule()>
c0013f83:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013f88:	48                   	dec    eax
c0013f89:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0013f8e:	75 de                	jne    c0013f6e <Vm::finish8086()+0x4>
c0013f90:	fb                   	sti    
c0013f91:	eb db                	jmp    c0013f6e <Vm::finish8086()+0x4>
c0013f93:	83 ec 0c             	sub    esp,0xc
c0013f96:	8b 1d 60 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023760
c0013f9c:	ff 35 68 37 02 c0    	push   DWORD PTR ds:0xc0023768
c0013fa2:	c6 05 64 37 02 c0 00 	mov    BYTE PTR ds:0xc0023764,0x0
c0013fa9:	e8 2a f8 ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c0013fae:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	8d 50 ff             	lea    edx,[eax-0x1]
c0013fb9:	89 15 08 37 02 c0    	mov    DWORD PTR ds:0xc0023708,edx
c0013fbf:	85 d2                	test   edx,edx
c0013fc1:	75 01                	jne    c0013fc4 <Vm::finish8086()+0x5a>
c0013fc3:	fb                   	sti    
c0013fc4:	89 d8                	mov    eax,ebx
c0013fc6:	83 c4 08             	add    esp,0x8
c0013fc9:	5b                   	pop    ebx
c0013fca:	c3                   	ret    

c0013fcb <Vm::getOutput8086(unsigned char*)>:
c0013fcb:	57                   	push   edi
c0013fcc:	8b 0d 6c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002376c
c0013fd2:	56                   	push   esi
c0013fd3:	be 80 37 02 c0       	mov    esi,0xc0023780
c0013fd8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013fdc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fde:	a1 6c 37 02 c0       	mov    eax,ds:0xc002376c
c0013fe3:	5e                   	pop    esi
c0013fe4:	c7 05 6c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002376c,0x0
c0013fee:	5f                   	pop    edi
c0013fef:	c3                   	ret    

c0013ff0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013ff0:	55                   	push   ebp
c0013ff1:	57                   	push   edi
c0013ff2:	56                   	push   esi
c0013ff3:	53                   	push   ebx
c0013ff4:	83 ec 0c             	sub    esp,0xc
c0013ff7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013ffb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013fff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014003:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014007:	fa                   	cli    
c0014008:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001400e:	80 3d 65 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023765,0x0
c0014015:	75 15                	jne    c001402c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014017:	e8 f8 f2 ff ff       	call   c0013314 <schedule()>
c001401c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0014021:	48                   	dec    eax
c0014022:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0014027:	75 de                	jne    c0014007 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014029:	fb                   	sti    
c001402a:	eb db                	jmp    c0014007 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001402c:	a1 68 37 02 c0       	mov    eax,ds:0xc0023768
c0014031:	c7 05 6c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002376c,0x0
c001403b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001403f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0014043:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014047:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001404b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001404f:	0f b7 ff             	movzx  edi,di
c0014052:	0f b7 f6             	movzx  esi,si
c0014055:	50                   	push   eax
c0014056:	6a 20                	push   0x20
c0014058:	6a 00                	push   0x0
c001405a:	68 80 37 02 c0       	push   0xc0023780
c001405f:	e8 6c c4 fe ff       	call   c00004d0 <memset>
c0014064:	5a                   	pop    edx
c0014065:	59                   	pop    ecx
c0014066:	57                   	push   edi
c0014067:	56                   	push   esi
c0014068:	e8 2d fe ff ff       	call   c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>
c001406d:	83 c4 10             	add    esp,0x10
c0014070:	89 c7                	mov    edi,eax
c0014072:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014076:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001407a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001407c:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0014081:	c6 05 65 37 02 c0 00 	mov    BYTE PTR ds:0xc0023765,0x0
c0014088:	48                   	dec    eax
c0014089:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001408e:	75 01                	jne    c0014091 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014090:	fb                   	sti    
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	ff 35 68 37 02 c0    	push   DWORD PTR ds:0xc0023768
c001409a:	e8 39 f7 ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c001409f:	83 c4 1c             	add    esp,0x1c
c00140a2:	b0 01                	mov    al,0x1
c00140a4:	5b                   	pop    ebx
c00140a5:	5e                   	pop    esi
c00140a6:	5f                   	pop    edi
c00140a7:	5d                   	pop    ebp
c00140a8:	c3                   	ret    

c00140a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00140a9:	55                   	push   ebp
c00140aa:	57                   	push   edi
c00140ab:	56                   	push   esi
c00140ac:	53                   	push   ebx
c00140ad:	83 ec 2c             	sub    esp,0x2c
c00140b0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00140b4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00140b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00140bc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00140c0:	fa                   	cli    
c00140c1:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c00140c7:	0f b6 35 65 37 02 c0 	movzx  esi,BYTE PTR ds:0xc0023765
c00140ce:	89 f0                	mov    eax,esi
c00140d0:	84 c0                	test   al,al
c00140d2:	75 1d                	jne    c00140f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00140d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00140d8:	e8 37 f2 ff ff       	call   c0013314 <schedule()>
c00140dd:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00140e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140e6:	48                   	dec    eax
c00140e7:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00140ec:	75 d2                	jne    c00140c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140ee:	fb                   	sti    
c00140ef:	eb cf                	jmp    c00140c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140f1:	a1 68 37 02 c0       	mov    eax,ds:0xc0023768
c00140f6:	c7 05 6c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002376c,0x0
c0014100:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014104:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014108:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001410c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014110:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014114:	50                   	push   eax
c0014115:	6a 20                	push   0x20
c0014117:	6a 00                	push   0x0
c0014119:	68 80 37 02 c0       	push   0xc0023780
c001411e:	e8 ad c3 fe ff       	call   c00004d0 <memset>
c0014123:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001412a:	e8 8a 36 ff ff       	call   c00077b9 <malloc>
c001412f:	83 c4 0c             	add    esp,0xc
c0014132:	89 c3                	mov    ebx,eax
c0014134:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c001413a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001413e:	50                   	push   eax
c001413f:	e8 ba 68 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c0014144:	83 c4 10             	add    esp,0x10
c0014147:	85 db                	test   ebx,ebx
c0014149:	75 0a                	jne    c0014155 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001414b:	83 ec 0c             	sub    esp,0xc
c001414e:	68 68 e6 01 c0       	push   0xc001e668
c0014153:	eb 3e                	jmp    c0014193 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014155:	50                   	push   eax
c0014156:	8d 44 24 17          	lea    eax,[esp+0x17]
c001415a:	50                   	push   eax
c001415b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001415f:	50                   	push   eax
c0014160:	53                   	push   ebx
c0014161:	e8 04 6c ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c0014166:	83 c4 10             	add    esp,0x10
c0014169:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001416e:	74 0a                	je     c001417a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	68 7c e6 01 c0       	push   0xc001e67c
c0014178:	eb 19                	jmp    c0014193 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001417a:	51                   	push   ecx
c001417b:	51                   	push   ecx
c001417c:	6a 01                	push   0x1
c001417e:	53                   	push   ebx
c001417f:	e8 3a 69 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0014184:	83 c4 10             	add    esp,0x10
c0014187:	85 c0                	test   eax,eax
c0014189:	74 24                	je     c00141af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001418b:	83 ec 0c             	sub    esp,0xc
c001418e:	68 95 e6 01 c0       	push   0xc001e695
c0014193:	e8 6b bf ff ff       	call   c0010103 <KePanic(char const*)>
c0014198:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	48                   	dec    eax
c00141a1:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00141a6:	85 c0                	test   eax,eax
c00141a8:	75 01                	jne    c00141ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00141aa:	fb                   	sti    
c00141ab:	31 f6                	xor    esi,esi
c00141ad:	eb 58                	jmp    c0014207 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00141af:	0f b7 ed             	movzx  ebp,bp
c00141b2:	50                   	push   eax
c00141b3:	0f b7 ff             	movzx  edi,di
c00141b6:	50                   	push   eax
c00141b7:	55                   	push   ebp
c00141b8:	57                   	push   edi
c00141b9:	e8 dc fc ff ff       	call   c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>
c00141be:	5a                   	pop    edx
c00141bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141c1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00141c5:	51                   	push   ecx
c00141c6:	50                   	push   eax
c00141c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00141cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00141cf:	53                   	push   ebx
c00141d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00141d3:	83 c4 14             	add    esp,0x14
c00141d6:	53                   	push   ebx
c00141d7:	e8 40 69 ff ff       	call   c000ab1c <File::close()>
c00141dc:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	48                   	dec    eax
c00141e5:	c6 05 65 37 02 c0 00 	mov    BYTE PTR ds:0xc0023765,0x0
c00141ec:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c00141f1:	85 c0                	test   eax,eax
c00141f3:	75 01                	jne    c00141f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00141f5:	fb                   	sti    
c00141f6:	83 ec 0c             	sub    esp,0xc
c00141f9:	ff 35 68 37 02 c0    	push   DWORD PTR ds:0xc0023768
c00141ff:	e8 d4 f5 ff ff       	call   c00137d8 <unblockTask(ThreadControlBlock*)>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	83 c4 2c             	add    esp,0x2c
c001420a:	89 f0                	mov    eax,esi
c001420c:	5b                   	pop    ebx
c001420d:	5e                   	pop    esi
c001420e:	5f                   	pop    edi
c001420f:	5d                   	pop    ebp
c0014210:	c3                   	ret    

c0014211 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014211:	57                   	push   edi
c0014212:	56                   	push   esi
c0014213:	53                   	push   ebx
c0014214:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001421c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014220:	83 e8 06             	sub    eax,0x6
c0014223:	0f b7 c0             	movzx  eax,ax
c0014226:	50                   	push   eax
c0014227:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001422c:	50                   	push   eax
c001422d:	e8 68 fc ff ff       	call   c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>
c0014232:	5a                   	pop    edx
c0014233:	5e                   	pop    esi
c0014234:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014237:	8d 56 fa             	lea    edx,[esi-0x6]
c001423a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014240:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0014243:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014246:	83 c2 02             	add    edx,0x2
c0014249:	66 89 10             	mov    WORD PTR [eax],dx
c001424c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001424f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014253:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014256:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001425a:	89 d6                	mov    esi,edx
c001425c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014262:	66 81 e6 ff fd       	and    si,0xfdff
c0014267:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001426b:	74 07                	je     c0014274 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001426d:	89 d6                	mov    esi,edx
c001426f:	66 81 ce 00 02       	or     si,0x200
c0014274:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001427d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014281:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014289:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001428c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014294:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014297:	5b                   	pop    ebx
c0014298:	5e                   	pop    esi
c0014299:	5f                   	pop    edi
c001429a:	c3                   	ret    

c001429b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001429b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142a5:	c1 e0 04             	shl    eax,0x4
c00142a8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00142ab:	c3                   	ret    

c00142ac <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00142ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142b6:	c1 e0 04             	shl    eax,0x4
c00142b9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00142bd:	c3                   	ret    

c00142be <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00142be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142c8:	c1 e0 04             	shl    eax,0x4
c00142cb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00142ce:	c3                   	ret    

c00142cf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00142cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142d9:	c1 e0 04             	shl    eax,0x4
c00142dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142e0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00142e3:	c3                   	ret    

c00142e4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00142e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142ee:	c1 e0 04             	shl    eax,0x4
c00142f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142f5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00142f9:	c3                   	ret    

c00142fa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00142fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014304:	c1 e0 04             	shl    eax,0x4
c0014307:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001430b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001430e:	c3                   	ret    

c001430f <Vm::faultHandler(regs*)>:
c001430f:	55                   	push   ebp
c0014310:	57                   	push   edi
c0014311:	56                   	push   esi
c0014312:	53                   	push   ebx
c0014313:	83 ec 1c             	sub    esp,0x1c
c0014316:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001431a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001431d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014321:	0f b7 f8             	movzx  edi,ax
c0014324:	52                   	push   edx
c0014325:	0f b7 c0             	movzx  eax,ax
c0014328:	50                   	push   eax
c0014329:	e8 6c fb ff ff       	call   c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>
c001432e:	5a                   	pop    edx
c001432f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0014332:	59                   	pop    ecx
c0014333:	89 c1                	mov    ecx,eax
c0014335:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014341:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014345:	0f b7 c5             	movzx  eax,bp
c0014348:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001434c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014350:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014354:	e8 41 fb ff ff       	call   c0013e9a <Vm::realToLinear(unsigned short, unsigned short)>
c0014359:	5e                   	pop    esi
c001435a:	be 06 00 00 00       	mov    esi,0x6
c001435f:	5a                   	pop    edx
c0014360:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014365:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001436a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001436d:	80 fa 9d             	cmp    dl,0x9d
c0014370:	0f 84 2c 02 00 00    	je     c00145a2 <Vm::faultHandler(regs*)+0x293>
c0014376:	0f 87 91 00 00 00    	ja     c001440d <Vm::faultHandler(regs*)+0xfe>
c001437c:	80 fa 66             	cmp    dl,0x66
c001437f:	0f 84 98 01 00 00    	je     c001451d <Vm::faultHandler(regs*)+0x20e>
c0014385:	77 47                	ja     c00143ce <Vm::faultHandler(regs*)+0xbf>
c0014387:	80 fa 36             	cmp    dl,0x36
c001438a:	0f 84 80 01 00 00    	je     c0014510 <Vm::faultHandler(regs*)+0x201>
c0014390:	77 1a                	ja     c00143ac <Vm::faultHandler(regs*)+0x9d>
c0014392:	80 fa 26             	cmp    dl,0x26
c0014395:	0f 84 4e 01 00 00    	je     c00144e9 <Vm::faultHandler(regs*)+0x1da>
c001439b:	80 fa 2e             	cmp    dl,0x2e
c001439e:	0f 85 e2 05 00 00    	jne    c0014986 <Vm::faultHandler(regs*)+0x677>
c00143a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143a7:	31 f6                	xor    esi,esi
c00143a9:	41                   	inc    ecx
c00143aa:	eb be                	jmp    c001436a <Vm::faultHandler(regs*)+0x5b>
c00143ac:	80 fa 64             	cmp    dl,0x64
c00143af:	0f 84 41 01 00 00    	je     c00144f6 <Vm::faultHandler(regs*)+0x1e7>
c00143b5:	0f 87 48 01 00 00    	ja     c0014503 <Vm::faultHandler(regs*)+0x1f4>
c00143bb:	80 fa 3e             	cmp    dl,0x3e
c00143be:	0f 85 c2 05 00 00    	jne    c0014986 <Vm::faultHandler(regs*)+0x677>
c00143c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00143c7:	be 01 00 00 00       	mov    esi,0x1
c00143cc:	eb db                	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c00143ce:	80 fa 6d             	cmp    dl,0x6d
c00143d1:	0f 84 ec 02 00 00    	je     c00146c3 <Vm::faultHandler(regs*)+0x3b4>
c00143d7:	77 17                	ja     c00143f0 <Vm::faultHandler(regs*)+0xe1>
c00143d9:	80 fa 67             	cmp    dl,0x67
c00143dc:	0f 84 48 01 00 00    	je     c001452a <Vm::faultHandler(regs*)+0x21b>
c00143e2:	80 fa 6c             	cmp    dl,0x6c
c00143e5:	0f 84 69 02 00 00    	je     c0014654 <Vm::faultHandler(regs*)+0x345>
c00143eb:	e9 96 05 00 00       	jmp    c0014986 <Vm::faultHandler(regs*)+0x677>
c00143f0:	80 fa 6f             	cmp    dl,0x6f
c00143f3:	0f 84 f4 03 00 00    	je     c00147ed <Vm::faultHandler(regs*)+0x4de>
c00143f9:	0f 82 59 03 00 00    	jb     c0014758 <Vm::faultHandler(regs*)+0x449>
c00143ff:	80 fa 9c             	cmp    dl,0x9c
c0014402:	0f 84 2f 01 00 00    	je     c0014537 <Vm::faultHandler(regs*)+0x228>
c0014408:	e9 79 05 00 00       	jmp    c0014986 <Vm::faultHandler(regs*)+0x677>
c001440d:	80 fa ec             	cmp    dl,0xec
c0014410:	0f 84 14 05 00 00    	je     c001492a <Vm::faultHandler(regs*)+0x61b>
c0014416:	77 7b                	ja     c0014493 <Vm::faultHandler(regs*)+0x184>
c0014418:	80 fa e4             	cmp    dl,0xe4
c001441b:	0f 84 93 04 00 00    	je     c00148b4 <Vm::faultHandler(regs*)+0x5a5>
c0014421:	77 53                	ja     c0014476 <Vm::faultHandler(regs*)+0x167>
c0014423:	80 fa cd             	cmp    dl,0xcd
c0014426:	0f 84 d9 01 00 00    	je     c0014605 <Vm::faultHandler(regs*)+0x2f6>
c001442c:	80 fa cf             	cmp    dl,0xcf
c001442f:	0f 85 51 05 00 00    	jne    c0014986 <Vm::faultHandler(regs*)+0x677>
c0014435:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014438:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001443b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001443f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014442:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014446:	81 ca 00 02 02 00    	or     edx,0x20200
c001444c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001444f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014453:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014459:	66 c1 e8 09          	shr    ax,0x9
c001445d:	83 e0 01             	and    eax,0x1
c0014460:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014463:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014466:	83 c0 06             	add    eax,0x6
c0014469:	25 ff ff 00 00       	and    eax,0xffff
c001446e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014471:	e9 0c 05 00 00       	jmp    c0014982 <Vm::faultHandler(regs*)+0x673>
c0014476:	80 fa e6             	cmp    dl,0xe6
c0014479:	0f 84 7f 04 00 00    	je     c00148fe <Vm::faultHandler(regs*)+0x5ef>
c001447f:	0f 82 4b 04 00 00    	jb     c00148d0 <Vm::faultHandler(regs*)+0x5c1>
c0014485:	80 fa e7             	cmp    dl,0xe7
c0014488:	0f 84 87 04 00 00    	je     c0014915 <Vm::faultHandler(regs*)+0x606>
c001448e:	e9 f3 04 00 00       	jmp    c0014986 <Vm::faultHandler(regs*)+0x677>
c0014493:	80 fa ef             	cmp    dl,0xef
c0014496:	0f 84 d1 04 00 00    	je     c001496d <Vm::faultHandler(regs*)+0x65e>
c001449c:	77 28                	ja     c00144c6 <Vm::faultHandler(regs*)+0x1b7>
c001449e:	80 fa ed             	cmp    dl,0xed
c00144a1:	0f 84 9f 04 00 00    	je     c0014946 <Vm::faultHandler(regs*)+0x637>
c00144a7:	80 fa ee             	cmp    dl,0xee
c00144aa:	0f 85 d6 04 00 00    	jne    c0014986 <Vm::faultHandler(regs*)+0x677>
c00144b0:	50                   	push   eax
c00144b1:	50                   	push   eax
c00144b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00144b6:	50                   	push   eax
c00144b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00144bb:	50                   	push   eax
c00144bc:	e8 a3 f9 ff ff       	call   c0013e64 <Vm::outbv(unsigned short, unsigned char)>
c00144c1:	e9 9f 04 00 00       	jmp    c0014965 <Vm::faultHandler(regs*)+0x656>
c00144c6:	80 fa fa             	cmp    dl,0xfa
c00144c9:	0f 84 69 01 00 00    	je     c0014638 <Vm::faultHandler(regs*)+0x329>
c00144cf:	80 fa fb             	cmp    dl,0xfb
c00144d2:	0f 84 6e 01 00 00    	je     c0014646 <Vm::faultHandler(regs*)+0x337>
c00144d8:	80 fa f3             	cmp    dl,0xf3
c00144db:	0f 85 a5 04 00 00    	jne    c0014986 <Vm::faultHandler(regs*)+0x677>
c00144e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144e4:	e9 c0 fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c00144e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ec:	be 02 00 00 00       	mov    esi,0x2
c00144f1:	e9 b3 fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c00144f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144f9:	be 03 00 00 00       	mov    esi,0x3
c00144fe:	e9 a6 fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c0014503:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014506:	be 04 00 00 00       	mov    esi,0x4
c001450b:	e9 99 fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c0014510:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014513:	be 05 00 00 00       	mov    esi,0x5
c0014518:	e9 8c fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c001451d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014520:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014525:	e9 7f fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c001452a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001452d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014532:	e9 72 fe ff ff       	jmp    c00143a9 <Vm::faultHandler(regs*)+0x9a>
c0014537:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001453a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001453e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014543:	74 30                	je     c0014575 <Vm::faultHandler(regs*)+0x266>
c0014545:	83 e9 04             	sub    ecx,0x4
c0014548:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001454e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014554:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014557:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001455a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014560:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014564:	0f 84 15 04 00 00    	je     c001497f <Vm::faultHandler(regs*)+0x670>
c001456a:	80 ce 02             	or     dh,0x2
c001456d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014570:	e9 0a 04 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014575:	83 e9 02             	sub    ecx,0x2
c0014578:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001457e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014581:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014585:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001458b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001458f:	74 05                	je     c0014596 <Vm::faultHandler(regs*)+0x287>
c0014591:	80 ce 02             	or     dh,0x2
c0014594:	eb 03                	jmp    c0014599 <Vm::faultHandler(regs*)+0x28a>
c0014596:	80 e6 fd             	and    dh,0xfd
c0014599:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001459d:	e9 dd 03 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c00145a2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145a7:	74 2a                	je     c00145d3 <Vm::faultHandler(regs*)+0x2c4>
c00145a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00145ab:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145b1:	81 ca 00 02 02 00    	or     edx,0x20200
c00145b7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00145bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145c2:	c1 e8 09             	shr    eax,0x9
c00145c5:	83 e0 01             	and    eax,0x1
c00145c8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145cb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145ce:	83 c0 04             	add    eax,0x4
c00145d1:	eb 25                	jmp    c00145f8 <Vm::faultHandler(regs*)+0x2e9>
c00145d3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00145d6:	81 ca 00 02 02 00    	or     edx,0x20200
c00145dc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00145df:	66 8b 00             	mov    ax,WORD PTR [eax]
c00145e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00145e8:	66 c1 e8 09          	shr    ax,0x9
c00145ec:	83 e0 01             	and    eax,0x1
c00145ef:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145f2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145f5:	83 c0 02             	add    eax,0x2
c00145f8:	25 ff ff 00 00       	and    eax,0xffff
c00145fd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014600:	e9 7a 03 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014605:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014609:	3c ee                	cmp    al,0xee
c001460b:	75 10                	jne    c001461d <Vm::faultHandler(regs*)+0x30e>
c001460d:	83 ec 0c             	sub    esp,0xc
c0014610:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014613:	e8 e9 f8 ff ff       	call   c0013f01 <Vm::mainloop3(unsigned long)>
c0014618:	e9 4b 03 00 00       	jmp    c0014968 <Vm::faultHandler(regs*)+0x659>
c001461d:	83 ec 0c             	sub    esp,0xc
c0014620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014628:	51                   	push   ecx
c0014629:	50                   	push   eax
c001462a:	53                   	push   ebx
c001462b:	e8 e1 fb ff ff       	call   c0014211 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014630:	83 c4 20             	add    esp,0x20
c0014633:	e9 4a 03 00 00       	jmp    c0014982 <Vm::faultHandler(regs*)+0x673>
c0014638:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001463d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014641:	e9 39 03 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001464f:	e9 2b 03 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014654:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014657:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001465c:	74 2b                	je     c0014689 <Vm::faultHandler(regs*)+0x37a>
c001465e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014665:	76 22                	jbe    c0014689 <Vm::faultHandler(regs*)+0x37a>
c0014667:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001466b:	50                   	push   eax
c001466c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014670:	50                   	push   eax
c0014671:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014675:	50                   	push   eax
c0014676:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001467a:	50                   	push   eax
c001467b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001467f:	50                   	push   eax
c0014680:	6a 6c                	push   0x6c
c0014682:	6a 6c                	push   0x6c
c0014684:	e9 b9 01 00 00       	jmp    c0014842 <Vm::faultHandler(regs*)+0x533>
c0014689:	83 ec 0c             	sub    esp,0xc
c001468c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014690:	0f b7 f6             	movzx  esi,si
c0014693:	50                   	push   eax
c0014694:	e8 b8 f7 ff ff       	call   c0013e51 <Vm::inbv(unsigned short)>
c0014699:	83 c4 0c             	add    esp,0xc
c001469c:	0f b6 c0             	movzx  eax,al
c001469f:	50                   	push   eax
c00146a0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00146a4:	50                   	push   eax
c00146a5:	56                   	push   esi
c00146a6:	e8 24 fc ff ff       	call   c00142cf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00146ab:	83 c4 10             	add    esp,0x10
c00146ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146b1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146b5:	74 03                	je     c00146ba <Vm::faultHandler(regs*)+0x3ab>
c00146b7:	48                   	dec    eax
c00146b8:	eb 01                	jmp    c00146bb <Vm::faultHandler(regs*)+0x3ac>
c00146ba:	40                   	inc    eax
c00146bb:	0f b7 c0             	movzx  eax,ax
c00146be:	e9 8d 00 00 00       	jmp    c0014750 <Vm::faultHandler(regs*)+0x441>
c00146c3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00146ce:	74 29                	je     c00146f9 <Vm::faultHandler(regs*)+0x3ea>
c00146d0:	3d ff ff 00 00       	cmp    eax,0xffff
c00146d5:	76 22                	jbe    c00146f9 <Vm::faultHandler(regs*)+0x3ea>
c00146d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146db:	50                   	push   eax
c00146dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146e0:	50                   	push   eax
c00146e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146e5:	50                   	push   eax
c00146e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146ea:	50                   	push   eax
c00146eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146ef:	50                   	push   eax
c00146f0:	6a 6d                	push   0x6d
c00146f2:	6a 6d                	push   0x6d
c00146f4:	e9 49 01 00 00       	jmp    c0014842 <Vm::faultHandler(regs*)+0x533>
c00146f9:	0f b7 c8             	movzx  ecx,ax
c00146fc:	0f b7 f6             	movzx  esi,si
c00146ff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014702:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014707:	74 20                	je     c0014729 <Vm::faultHandler(regs*)+0x41a>
c0014709:	ed                   	in     eax,dx
c001470a:	55                   	push   ebp
c001470b:	50                   	push   eax
c001470c:	51                   	push   ecx
c001470d:	56                   	push   esi
c001470e:	e8 e7 fb ff ff       	call   c00142fa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014719:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001471d:	74 05                	je     c0014724 <Vm::faultHandler(regs*)+0x415>
c001471f:	83 e8 04             	sub    eax,0x4
c0014722:	eb 27                	jmp    c001474b <Vm::faultHandler(regs*)+0x43c>
c0014724:	83 c0 04             	add    eax,0x4
c0014727:	eb 22                	jmp    c001474b <Vm::faultHandler(regs*)+0x43c>
c0014729:	66 ed                	in     ax,dx
c001472b:	0f b7 c0             	movzx  eax,ax
c001472e:	57                   	push   edi
c001472f:	50                   	push   eax
c0014730:	51                   	push   ecx
c0014731:	56                   	push   esi
c0014732:	e8 ad fb ff ff       	call   c00142e4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014737:	83 c4 10             	add    esp,0x10
c001473a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001473d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014741:	74 05                	je     c0014748 <Vm::faultHandler(regs*)+0x439>
c0014743:	83 e8 02             	sub    eax,0x2
c0014746:	eb 03                	jmp    c001474b <Vm::faultHandler(regs*)+0x43c>
c0014748:	83 c0 02             	add    eax,0x2
c001474b:	25 ff ff 00 00       	and    eax,0xffff
c0014750:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014753:	e9 27 02 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014758:	8d 46 ff             	lea    eax,[esi-0x1]
c001475b:	3c 05                	cmp    al,0x5
c001475d:	77 24                	ja     c0014783 <Vm::faultHandler(regs*)+0x474>
c001475f:	0f b6 c0             	movzx  eax,al
c0014762:	ff 24 85 08 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18f8]
c0014769:	0f b7 fd             	movzx  edi,bp
c001476c:	eb 15                	jmp    c0014783 <Vm::faultHandler(regs*)+0x474>
c001476e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014772:	eb 0f                	jmp    c0014783 <Vm::faultHandler(regs*)+0x474>
c0014774:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014778:	eb 09                	jmp    c0014783 <Vm::faultHandler(regs*)+0x474>
c001477a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001477e:	eb 03                	jmp    c0014783 <Vm::faultHandler(regs*)+0x474>
c0014780:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014783:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014786:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001478b:	74 29                	je     c00147b6 <Vm::faultHandler(regs*)+0x4a7>
c001478d:	3d ff ff 00 00       	cmp    eax,0xffff
c0014792:	76 22                	jbe    c00147b6 <Vm::faultHandler(regs*)+0x4a7>
c0014794:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014798:	50                   	push   eax
c0014799:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001479d:	50                   	push   eax
c001479e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00147a2:	50                   	push   eax
c00147a3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00147a7:	50                   	push   eax
c00147a8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00147ac:	50                   	push   eax
c00147ad:	6a 6e                	push   0x6e
c00147af:	6a 6e                	push   0x6e
c00147b1:	e9 8c 00 00 00       	jmp    c0014842 <Vm::faultHandler(regs*)+0x533>
c00147b6:	0f b7 c0             	movzx  eax,ax
c00147b9:	52                   	push   edx
c00147ba:	52                   	push   edx
c00147bb:	50                   	push   eax
c00147bc:	57                   	push   edi
c00147bd:	e8 d9 fa ff ff       	call   c001429b <Vm::readByteFromReal(unsigned short, unsigned short)>
c00147c2:	59                   	pop    ecx
c00147c3:	0f b6 c0             	movzx  eax,al
c00147c6:	5e                   	pop    esi
c00147c7:	50                   	push   eax
c00147c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00147cc:	50                   	push   eax
c00147cd:	e8 92 f6 ff ff       	call   c0013e64 <Vm::outbv(unsigned short, unsigned char)>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147dc:	74 03                	je     c00147e1 <Vm::faultHandler(regs*)+0x4d2>
c00147de:	48                   	dec    eax
c00147df:	eb 01                	jmp    c00147e2 <Vm::faultHandler(regs*)+0x4d3>
c00147e1:	40                   	inc    eax
c00147e2:	0f b7 c0             	movzx  eax,ax
c00147e5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00147e8:	e9 92 01 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c00147ed:	8d 46 ff             	lea    eax,[esi-0x1]
c00147f0:	3c 05                	cmp    al,0x5
c00147f2:	77 1f                	ja     c0014813 <Vm::faultHandler(regs*)+0x504>
c00147f4:	0f b6 c0             	movzx  eax,al
c00147f7:	ff 24 85 20 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe18e0]
c00147fe:	89 ef                	mov    edi,ebp
c0014800:	eb 11                	jmp    c0014813 <Vm::faultHandler(regs*)+0x504>
c0014802:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014805:	eb 0c                	jmp    c0014813 <Vm::faultHandler(regs*)+0x504>
c0014807:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001480a:	eb 07                	jmp    c0014813 <Vm::faultHandler(regs*)+0x504>
c001480c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001480f:	eb 02                	jmp    c0014813 <Vm::faultHandler(regs*)+0x504>
c0014811:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014813:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014816:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001481b:	74 37                	je     c0014854 <Vm::faultHandler(regs*)+0x545>
c001481d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014823:	76 2f                	jbe    c0014854 <Vm::faultHandler(regs*)+0x545>
c0014825:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014829:	50                   	push   eax
c001482a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001482e:	50                   	push   eax
c001482f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014833:	50                   	push   eax
c0014834:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014838:	50                   	push   eax
c0014839:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001483d:	50                   	push   eax
c001483e:	6a 6f                	push   0x6f
c0014840:	6a 6f                	push   0x6f
c0014842:	68 ae e6 01 c0       	push   0xc001e6ae
c0014847:	e8 3c 5c ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001484c:	83 c4 20             	add    esp,0x20
c001484f:	e9 86 01 00 00       	jmp    c00149da <Vm::faultHandler(regs*)+0x6cb>
c0014854:	0f b7 d7             	movzx  edx,di
c0014857:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001485a:	0f b7 c6             	movzx  eax,si
c001485d:	81 e1 00 04 00 00    	and    ecx,0x400
c0014863:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014866:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001486b:	74 1d                	je     c001488a <Vm::faultHandler(regs*)+0x57b>
c001486d:	55                   	push   ebp
c001486e:	55                   	push   ebp
c001486f:	50                   	push   eax
c0014870:	52                   	push   edx
c0014871:	e8 48 fa ff ff       	call   c00142be <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014876:	83 c4 10             	add    esp,0x10
c0014879:	89 fa                	mov    edx,edi
c001487b:	ef                   	out    dx,eax
c001487c:	85 c9                	test   ecx,ecx
c001487e:	74 05                	je     c0014885 <Vm::faultHandler(regs*)+0x576>
c0014880:	83 ee 04             	sub    esi,0x4
c0014883:	eb 21                	jmp    c00148a6 <Vm::faultHandler(regs*)+0x597>
c0014885:	83 c6 04             	add    esi,0x4
c0014888:	eb 1c                	jmp    c00148a6 <Vm::faultHandler(regs*)+0x597>
c001488a:	55                   	push   ebp
c001488b:	55                   	push   ebp
c001488c:	50                   	push   eax
c001488d:	52                   	push   edx
c001488e:	e8 19 fa ff ff       	call   c00142ac <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	89 fa                	mov    edx,edi
c0014898:	66 ef                	out    dx,ax
c001489a:	85 c9                	test   ecx,ecx
c001489c:	74 05                	je     c00148a3 <Vm::faultHandler(regs*)+0x594>
c001489e:	83 ee 02             	sub    esi,0x2
c00148a1:	eb 03                	jmp    c00148a6 <Vm::faultHandler(regs*)+0x597>
c00148a3:	83 c6 02             	add    esi,0x2
c00148a6:	81 e6 ff ff 00 00    	and    esi,0xffff
c00148ac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00148af:	e9 cb 00 00 00       	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c00148b4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148bb:	83 ec 0c             	sub    esp,0xc
c00148be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148c2:	50                   	push   eax
c00148c3:	e8 89 f5 ff ff       	call   c0013e51 <Vm::inbv(unsigned short)>
c00148c8:	0f b6 c0             	movzx  eax,al
c00148cb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00148ce:	eb 3f                	jmp    c001490f <Vm::faultHandler(regs*)+0x600>
c00148d0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148d5:	74 07                	je     c00148de <Vm::faultHandler(regs*)+0x5cf>
c00148d7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148db:	ed                   	in     eax,dx
c00148dc:	eb 14                	jmp    c00148f2 <Vm::faultHandler(regs*)+0x5e3>
c00148de:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00148e1:	66 31 f6             	xor    si,si
c00148e4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00148e7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148eb:	66 ed                	in     ax,dx
c00148ed:	0f b7 c0             	movzx  eax,ax
c00148f0:	09 f0                	or     eax,esi
c00148f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00148f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148f9:	e9 84 00 00 00       	jmp    c0014982 <Vm::faultHandler(regs*)+0x673>
c00148fe:	52                   	push   edx
c00148ff:	52                   	push   edx
c0014900:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014904:	50                   	push   eax
c0014905:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014909:	50                   	push   eax
c001490a:	e8 55 f5 ff ff       	call   c0013e64 <Vm::outbv(unsigned short, unsigned char)>
c001490f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014913:	eb 53                	jmp    c0014968 <Vm::faultHandler(regs*)+0x659>
c0014915:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014918:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001491c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014921:	74 03                	je     c0014926 <Vm::faultHandler(regs*)+0x617>
c0014923:	ef                   	out    dx,eax
c0014924:	eb cf                	jmp    c00148f5 <Vm::faultHandler(regs*)+0x5e6>
c0014926:	66 ef                	out    dx,ax
c0014928:	eb cb                	jmp    c00148f5 <Vm::faultHandler(regs*)+0x5e6>
c001492a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014931:	83 ec 0c             	sub    esp,0xc
c0014934:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014938:	50                   	push   eax
c0014939:	e8 13 f5 ff ff       	call   c0013e51 <Vm::inbv(unsigned short)>
c001493e:	0f b6 c0             	movzx  eax,al
c0014941:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014944:	eb 1f                	jmp    c0014965 <Vm::faultHandler(regs*)+0x656>
c0014946:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014949:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001494e:	74 03                	je     c0014953 <Vm::faultHandler(regs*)+0x644>
c0014950:	ed                   	in     eax,dx
c0014951:	eb 0d                	jmp    c0014960 <Vm::faultHandler(regs*)+0x651>
c0014953:	66 ed                	in     ax,dx
c0014955:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014958:	0f b7 c0             	movzx  eax,ax
c001495b:	66 31 d2             	xor    dx,dx
c001495e:	09 d0                	or     eax,edx
c0014960:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014963:	eb 1a                	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c0014965:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014968:	83 c4 10             	add    esp,0x10
c001496b:	eb 15                	jmp    c0014982 <Vm::faultHandler(regs*)+0x673>
c001496d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014970:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014973:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014978:	74 03                	je     c001497d <Vm::faultHandler(regs*)+0x66e>
c001497a:	ef                   	out    dx,eax
c001497b:	eb 02                	jmp    c001497f <Vm::faultHandler(regs*)+0x670>
c001497d:	66 ef                	out    dx,ax
c001497f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014982:	b0 01                	mov    al,0x1
c0014984:	eb 56                	jmp    c00149dc <Vm::faultHandler(regs*)+0x6cd>
c0014986:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001498a:	50                   	push   eax
c001498b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001498f:	50                   	push   eax
c0014990:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014994:	50                   	push   eax
c0014995:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014999:	50                   	push   eax
c001499a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001499e:	50                   	push   eax
c001499f:	52                   	push   edx
c00149a0:	52                   	push   edx
c00149a1:	68 db e6 01 c0       	push   0xc001e6db
c00149a6:	e8 dd 5a ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c00149ab:	83 c4 20             	add    esp,0x20
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	6a 60                	push   0x60
c00149b3:	e8 99 f4 ff ff       	call   c0013e51 <Vm::inbv(unsigned short)>
c00149b8:	83 c4 10             	add    esp,0x10
c00149bb:	3c 1c                	cmp    al,0x1c
c00149bd:	74 04                	je     c00149c3 <Vm::faultHandler(regs*)+0x6b4>
c00149bf:	3c 5a                	cmp    al,0x5a
c00149c1:	75 eb                	jne    c00149ae <Vm::faultHandler(regs*)+0x69f>
c00149c3:	3c 5a                	cmp    al,0x5a
c00149c5:	74 04                	je     c00149cb <Vm::faultHandler(regs*)+0x6bc>
c00149c7:	3c 1c                	cmp    al,0x1c
c00149c9:	75 0f                	jne    c00149da <Vm::faultHandler(regs*)+0x6cb>
c00149cb:	83 ec 0c             	sub    esp,0xc
c00149ce:	6a 60                	push   0x60
c00149d0:	e8 7c f4 ff ff       	call   c0013e51 <Vm::inbv(unsigned short)>
c00149d5:	83 c4 10             	add    esp,0x10
c00149d8:	eb e9                	jmp    c00149c3 <Vm::faultHandler(regs*)+0x6b4>
c00149da:	31 c0                	xor    eax,eax
c00149dc:	83 c4 1c             	add    esp,0x1c
c00149df:	5b                   	pop    ebx
c00149e0:	5e                   	pop    esi
c00149e1:	5f                   	pop    edi
c00149e2:	5d                   	pop    ebp
c00149e3:	c3                   	ret    

c00149e4 <noCopro(unsigned long)>:
c00149e4:	c3                   	ret    

c00149e5 <nmiHandler(regs*, void*)>:
c00149e5:	83 ec 0c             	sub    esp,0xc
c00149e8:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c00149ed:	83 ec 0c             	sub    esp,0xc
c00149f0:	50                   	push   eax
c00149f1:	e8 e4 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	90                   	nop
c00149fa:	83 c4 0c             	add    esp,0xc
c00149fd:	c3                   	ret    

c00149fe <doubleFault(regs*, void*)>:
c00149fe:	55                   	push   ebp
c00149ff:	89 e5                	mov    ebp,esp
c0014a01:	83 ec 08             	sub    esp,0x8
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	68 38 e7 01 c0       	push   0xc001e738
c0014a0c:	e8 f2 b6 ff ff       	call   c0010103 <KePanic(char const*)>
c0014a11:	83 c4 10             	add    esp,0x10
c0014a14:	90                   	nop
c0014a15:	c9                   	leave  
c0014a16:	c3                   	ret    

c0014a17 <displayDebugInfo(regs*)>:
c0014a17:	83 ec 1c             	sub    esp,0x1c
c0014a1a:	0f 20 c0             	mov    eax,cr0
c0014a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a21:	0f 20 d0             	mov    eax,cr2
c0014a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a28:	0f 20 d8             	mov    eax,cr3
c0014a2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a2f:	0f 20 e0             	mov    eax,cr4
c0014a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a39:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014a3c:	83 ec 08             	sub    esp,0x8
c0014a3f:	50                   	push   eax
c0014a40:	68 54 e7 01 c0       	push   0xc001e754
c0014a45:	e8 3e 5a ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a51:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a54:	83 ec 08             	sub    esp,0x8
c0014a57:	50                   	push   eax
c0014a58:	68 45 e7 01 c0       	push   0xc001e745
c0014a5d:	e8 26 5a ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014a62:	83 c4 10             	add    esp,0x10
c0014a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a69:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014a6c:	83 ec 08             	sub    esp,0x8
c0014a6f:	50                   	push   eax
c0014a70:	68 50 e7 01 c0       	push   0xc001e750
c0014a75:	e8 0e 5a ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014a7a:	83 c4 10             	add    esp,0x10
c0014a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a84:	83 ec 08             	sub    esp,0x8
c0014a87:	50                   	push   eax
c0014a88:	68 5f e7 01 c0       	push   0xc001e75f
c0014a8d:	e8 f6 59 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014a92:	83 c4 10             	add    esp,0x10
c0014a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a99:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014a9c:	83 ec 08             	sub    esp,0x8
c0014a9f:	50                   	push   eax
c0014aa0:	68 6a e7 01 c0       	push   0xc001e76a
c0014aa5:	e8 de 59 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	83 ec 08             	sub    esp,0x8
c0014ab0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ab4:	68 75 e7 01 c0       	push   0xc001e775
c0014ab9:	e8 ca 59 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	83 ec 08             	sub    esp,0x8
c0014ac4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014ac8:	68 80 e7 01 c0       	push   0xc001e780
c0014acd:	e8 b6 59 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014ada:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	50                   	push   eax
c0014ae4:	e8 0e 39 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014ae9:	83 c4 10             	add    esp,0x10
c0014aec:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014af1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014af7:	83 ec 08             	sub    esp,0x8
c0014afa:	68 8b e7 01 c0       	push   0xc001e78b
c0014aff:	50                   	push   eax
c0014b00:	e8 31 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b05:	83 c4 10             	add    esp,0x10
c0014b08:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014b0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b13:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b18:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b1a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b1d:	83 c2 0c             	add    edx,0xc
c0014b20:	83 ec 08             	sub    esp,0x8
c0014b23:	52                   	push   edx
c0014b24:	50                   	push   eax
c0014b25:	e8 0c 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014b32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b38:	83 ec 08             	sub    esp,0x8
c0014b3b:	68 94 e7 01 c0       	push   0xc001e794
c0014b40:	50                   	push   eax
c0014b41:	e8 f0 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b46:	83 c4 10             	add    esp,0x10
c0014b49:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014b4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b58:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b5b:	83 ec 08             	sub    esp,0x8
c0014b5e:	52                   	push   edx
c0014b5f:	50                   	push   eax
c0014b60:	e8 8b 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b65:	83 c4 10             	add    esp,0x10
c0014b68:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014b6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b73:	83 ec 08             	sub    esp,0x8
c0014b76:	68 9c e7 01 c0       	push   0xc001e79c
c0014b7b:	50                   	push   eax
c0014b7c:	e8 b5 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014b89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b93:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014b96:	83 ec 08             	sub    esp,0x8
c0014b99:	52                   	push   edx
c0014b9a:	50                   	push   eax
c0014b9b:	e8 50 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014ba8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bae:	83 ec 08             	sub    esp,0x8
c0014bb1:	68 a4 e7 01 c0       	push   0xc001e7a4
c0014bb6:	50                   	push   eax
c0014bb7:	e8 7a 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014bc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bce:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014bd1:	83 ec 08             	sub    esp,0x8
c0014bd4:	52                   	push   edx
c0014bd5:	50                   	push   eax
c0014bd6:	e8 15 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014be3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014be9:	83 ec 08             	sub    esp,0x8
c0014bec:	68 ac e7 01 c0       	push   0xc001e7ac
c0014bf1:	50                   	push   eax
c0014bf2:	e8 3f 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014bff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c09:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014c0c:	83 ec 08             	sub    esp,0x8
c0014c0f:	52                   	push   edx
c0014c10:	50                   	push   eax
c0014c11:	e8 da 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014c1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c24:	83 ec 08             	sub    esp,0x8
c0014c27:	68 b4 e7 01 c0       	push   0xc001e7b4
c0014c2c:	50                   	push   eax
c0014c2d:	e8 04 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c32:	83 c4 10             	add    esp,0x10
c0014c35:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014c3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c44:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014c47:	83 ec 08             	sub    esp,0x8
c0014c4a:	52                   	push   edx
c0014c4b:	50                   	push   eax
c0014c4c:	e8 9f 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c51:	83 c4 10             	add    esp,0x10
c0014c54:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014c59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c5f:	83 ec 08             	sub    esp,0x8
c0014c62:	68 bc e7 01 c0       	push   0xc001e7bc
c0014c67:	50                   	push   eax
c0014c68:	e8 c9 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c6d:	83 c4 10             	add    esp,0x10
c0014c70:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014c75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c7f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014c82:	83 ec 08             	sub    esp,0x8
c0014c85:	52                   	push   edx
c0014c86:	50                   	push   eax
c0014c87:	e8 64 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c8c:	83 c4 10             	add    esp,0x10
c0014c8f:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014c94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c9a:	83 ec 08             	sub    esp,0x8
c0014c9d:	68 c4 e7 01 c0       	push   0xc001e7c4
c0014ca2:	50                   	push   eax
c0014ca3:	e8 8e 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014cb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb6:	83 ec 08             	sub    esp,0x8
c0014cb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014cbd:	50                   	push   eax
c0014cbe:	e8 2d 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014ccb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd1:	83 ec 08             	sub    esp,0x8
c0014cd4:	68 cd e7 01 c0       	push   0xc001e7cd
c0014cd9:	50                   	push   eax
c0014cda:	e8 57 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cdf:	83 c4 10             	add    esp,0x10
c0014ce2:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014ce7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ced:	83 ec 08             	sub    esp,0x8
c0014cf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014cf4:	50                   	push   eax
c0014cf5:	e8 f6 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014d02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d08:	83 ec 08             	sub    esp,0x8
c0014d0b:	68 d5 e7 01 c0       	push   0xc001e7d5
c0014d10:	50                   	push   eax
c0014d11:	e8 20 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0014d1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d24:	83 ec 08             	sub    esp,0x8
c0014d27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d2b:	50                   	push   eax
c0014d2c:	e8 bf 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d31:	83 c4 10             	add    esp,0x10
c0014d34:	fa                   	cli    
c0014d35:	f4                   	hlt    
c0014d36:	eb fe                	jmp    c0014d36 <displayDebugInfo(regs*)+0x31f>

c0014d38 <HalSystemIdle()>:
c0014d38:	56                   	push   esi
c0014d39:	53                   	push   ebx
c0014d3a:	83 ec 14             	sub    esp,0x14
c0014d3d:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0014d42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d48:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d4e:	83 e0 04             	and    eax,0x4
c0014d51:	84 c0                	test   al,al
c0014d53:	0f 95 c0             	setne  al
c0014d56:	84 c0                	test   al,al
c0014d58:	74 4c                	je     c0014da6 <HalSystemIdle()+0x6e>
c0014d5a:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0014d5f:	83 ec 08             	sub    esp,0x8
c0014d62:	68 e1 00 00 00       	push   0xe1
c0014d67:	50                   	push   eax
c0014d68:	e8 85 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d78:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0014d7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d81:	83 e2 02             	and    edx,0x2
c0014d84:	89 d3                	mov    ebx,edx
c0014d86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d8a:	83 e2 00             	and    edx,0x0
c0014d8d:	89 d6                	mov    esi,edx
c0014d8f:	56                   	push   esi
c0014d90:	53                   	push   ebx
c0014d91:	68 e1 00 00 00       	push   0xe1
c0014d96:	50                   	push   eax
c0014d97:	e8 82 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014d9c:	83 c4 10             	add    esp,0x10
c0014d9f:	e8 f0 b3 fe ff       	call   c0000194 <doTPAUSE>
c0014da4:	eb 01                	jmp    c0014da7 <HalSystemIdle()+0x6f>
c0014da6:	f4                   	hlt    
c0014da7:	90                   	nop
c0014da8:	83 c4 14             	add    esp,0x14
c0014dab:	5b                   	pop    ebx
c0014dac:	5e                   	pop    esi
c0014dad:	c3                   	ret    

c0014dae <displayProgramFault(char const*)>:
c0014dae:	83 ec 0c             	sub    esp,0xc
c0014db1:	83 ec 0c             	sub    esp,0xc
c0014db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014db8:	e8 cb 56 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014dca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dd0:	85 c0                	test   eax,eax
c0014dd2:	74 21                	je     c0014df5 <displayProgramFault(char const*)+0x47>
c0014dd4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ddb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014dde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014de4:	6a 04                	push   0x4
c0014de6:	6a 0f                	push   0xf
c0014de8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014dec:	50                   	push   eax
c0014ded:	e8 b6 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	90                   	nop
c0014df6:	83 c4 0c             	add    esp,0xc
c0014df9:	c3                   	ret    

c0014dfa <gpFault(regs*, void*)>:
c0014dfa:	83 ec 1c             	sub    esp,0x1c
c0014dfd:	c7 05 b0 37 02 c0 0f 43 01 c0 	mov    DWORD PTR ds:0xc00237b0,0xc001430f
c0014e07:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014e0c:	85 c0                	test   eax,eax
c0014e0e:	74 1c                	je     c0014e2c <gpFault(regs*, void*)+0x32>
c0014e10:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014e15:	83 ec 0c             	sub    esp,0xc
c0014e18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e1c:	ff d0                	call   eax
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e25:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e2a:	75 2e                	jne    c0014e5a <gpFault(regs*, void*)+0x60>
c0014e2c:	83 ec 0c             	sub    esp,0xc
c0014e2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e33:	e8 df fb ff ff       	call   c0014a17 <displayDebugInfo(regs*)>
c0014e38:	83 c4 10             	add    esp,0x10
c0014e3b:	83 ec 0c             	sub    esp,0xc
c0014e3e:	68 dd e7 01 c0       	push   0xc001e7dd
c0014e43:	e8 66 ff ff ff       	call   c0014dae <displayProgramFault(char const*)>
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	83 ec 0c             	sub    esp,0xc
c0014e4e:	6a 00                	push   0x0
c0014e50:	e8 af ee ff ff       	call   c0013d04 <Thr::terminateFromIRQ(int)>
c0014e55:	83 c4 10             	add    esp,0x10
c0014e58:	eb 01                	jmp    c0014e5b <gpFault(regs*, void*)+0x61>
c0014e5a:	90                   	nop
c0014e5b:	83 c4 1c             	add    esp,0x1c
c0014e5e:	c3                   	ret    

c0014e5f <pgFault(regs*, void*)>:
c0014e5f:	83 ec 1c             	sub    esp,0x1c
c0014e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e66:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e69:	0f 20 d0             	mov    eax,cr2
c0014e6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e74:	83 ec 04             	sub    esp,0x4
c0014e77:	52                   	push   edx
c0014e78:	50                   	push   eax
c0014e79:	68 bc e8 01 c0       	push   0xc001e8bc
c0014e7e:	e8 05 56 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014e96:	0f 20 d2             	mov    edx,cr2
c0014e99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ea1:	83 ec 08             	sub    esp,0x8
c0014ea4:	52                   	push   edx
c0014ea5:	50                   	push   eax
c0014ea6:	e8 0f 52 ff ff       	call   c000a0ba <VAS::tryLoadBackOffDisk(unsigned long)>
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	84 c0                	test   al,al
c0014eb0:	75 2e                	jne    c0014ee0 <pgFault(regs*, void*)+0x81>
c0014eb2:	83 ec 0c             	sub    esp,0xc
c0014eb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb9:	e8 59 fb ff ff       	call   c0014a17 <displayDebugInfo(regs*)>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	83 ec 0c             	sub    esp,0xc
c0014ec4:	68 f6 e7 01 c0       	push   0xc001e7f6
c0014ec9:	e8 e0 fe ff ff       	call   c0014dae <displayProgramFault(char const*)>
c0014ece:	83 c4 10             	add    esp,0x10
c0014ed1:	83 ec 0c             	sub    esp,0xc
c0014ed4:	6a 00                	push   0x0
c0014ed6:	e8 29 ee ff ff       	call   c0013d04 <Thr::terminateFromIRQ(int)>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	eb 01                	jmp    c0014ee1 <pgFault(regs*, void*)+0x82>
c0014ee0:	90                   	nop
c0014ee1:	83 c4 1c             	add    esp,0x1c
c0014ee4:	c3                   	ret    

c0014ee5 <otherISRHandler(regs*, void*)>:
c0014ee5:	83 ec 0c             	sub    esp,0xc
c0014ee8:	83 ec 0c             	sub    esp,0xc
c0014eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eef:	e8 23 fb ff ff       	call   c0014a17 <displayDebugInfo(regs*)>
c0014ef4:	83 c4 10             	add    esp,0x10
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	68 e4 e8 01 c0       	push   0xc001e8e4
c0014eff:	e8 aa fe ff ff       	call   c0014dae <displayProgramFault(char const*)>
c0014f04:	83 c4 10             	add    esp,0x10
c0014f07:	83 ec 0c             	sub    esp,0xc
c0014f0a:	6a 00                	push   0x0
c0014f0c:	e8 f3 ed ff ff       	call   c0013d04 <Thr::terminateFromIRQ(int)>
c0014f11:	83 c4 10             	add    esp,0x10
c0014f14:	90                   	nop
c0014f15:	83 c4 0c             	add    esp,0xc
c0014f18:	c3                   	ret    

c0014f19 <opcodeFault(regs*, void*)>:
c0014f19:	55                   	push   ebp
c0014f1a:	89 e5                	mov    ebp,esp
c0014f1c:	83 ec 08             	sub    esp,0x8
c0014f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f25:	83 ec 08             	sub    esp,0x8
c0014f28:	50                   	push   eax
c0014f29:	68 01 e8 01 c0       	push   0xc001e801
c0014f2e:	e8 55 55 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0014f3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f41:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014f47:	84 c0                	test   al,al
c0014f49:	74 21                	je     c0014f6c <opcodeFault(regs*, void*)+0x53>
c0014f4b:	83 ec 0c             	sub    esp,0xc
c0014f4e:	68 0c e9 01 c0       	push   0xc001e90c
c0014f53:	e8 30 55 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0014f58:	83 c4 10             	add    esp,0x10
c0014f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f61:	8d 50 19             	lea    edx,[eax+0x19]
c0014f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f67:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f6a:	eb 2b                	jmp    c0014f97 <opcodeFault(regs*, void*)+0x7e>
c0014f6c:	83 ec 0c             	sub    esp,0xc
c0014f6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f72:	e8 a0 fa ff ff       	call   c0014a17 <displayDebugInfo(regs*)>
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	83 ec 0c             	sub    esp,0xc
c0014f7d:	68 0f e8 01 c0       	push   0xc001e80f
c0014f82:	e8 27 fe ff ff       	call   c0014dae <displayProgramFault(char const*)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	83 ec 0c             	sub    esp,0xc
c0014f8d:	6a 00                	push   0x0
c0014f8f:	e8 70 ed ff ff       	call   c0013d04 <Thr::terminateFromIRQ(int)>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	c9                   	leave  
c0014f98:	c3                   	ret    

c0014f99 <i386SaveCoprocessor(void*)>:
c0014f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f9d:	83 c0 3f             	add    eax,0x3f
c0014fa0:	83 e0 c0             	and    eax,0xffffffc0
c0014fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fa7:	ff 25 ac 37 02 c0    	jmp    DWORD PTR ds:0xc00237ac

c0014fad <i386LoadCoprocessor(void*)>:
c0014fad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fb1:	83 c0 3f             	add    eax,0x3f
c0014fb4:	83 e0 c0             	and    eax,0xffffffc0
c0014fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fbb:	ff 25 a8 37 02 c0    	jmp    DWORD PTR ds:0xc00237a8

c0014fc1 <x87EmulHandler(regs*, void*)>:
c0014fc1:	53                   	push   ebx
c0014fc2:	83 ec 08             	sub    esp,0x8
c0014fc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fca:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014fce:	74 10                	je     c0014fe0 <x87EmulHandler(regs*, void*)+0x1f>
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	68 1c e8 01 c0       	push   0xc001e81c
c0014fd8:	e8 26 b1 ff ff       	call   c0010103 <KePanic(char const*)>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	0f 20 c0             	mov    eax,cr0
c0014fe3:	a8 08                	test   al,0x8
c0014fe5:	74 59                	je     c0015040 <x87EmulHandler(regs*, void*)+0x7f>
c0014fe7:	0f 06                	clts   
c0014fe9:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0014fee:	85 c0                	test   eax,eax
c0014ff0:	74 0e                	je     c0015000 <x87EmulHandler(regs*, void*)+0x3f>
c0014ff2:	83 ec 0c             	sub    esp,0xc
c0014ff5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014ff8:	e8 9c ff ff ff       	call   c0014f99 <i386SaveCoprocessor(void*)>
c0014ffd:	83 c4 10             	add    esp,0x10
c0015000:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015006:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001500a:	75 12                	jne    c001501e <x87EmulHandler(regs*, void*)+0x5d>
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	68 40 02 00 00       	push   0x240
c0015014:	e8 a0 27 ff ff       	call   c00077b9 <malloc>
c0015019:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001501c:	eb 10                	jmp    c001502e <x87EmulHandler(regs*, void*)+0x6d>
c001501e:	83 ec 0c             	sub    esp,0xc
c0015021:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0015026:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015029:	e8 7f ff ff ff       	call   c0014fad <i386LoadCoprocessor(void*)>
c001502e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c001503b:	83 c4 08             	add    esp,0x8
c001503e:	5b                   	pop    ebx
c001503f:	c3                   	ret    
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	68 30 e8 01 c0       	push   0xc001e830
c0015048:	e8 3b 54 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001504d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015055:	83 c4 18             	add    esp,0x18
c0015058:	5b                   	pop    ebx
c0015059:	e9 a6 ec ff ff       	jmp    c0013d04 <Thr::terminateFromIRQ(int)>

c001505e <HalInitialiseCoprocessor()>:
c001505e:	83 ec 10             	sub    esp,0x10
c0015061:	c7 05 a4 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a4,0x0
c001506b:	6a 00                	push   0x0
c001506d:	68 c1 4f 01 c0       	push   0xc0014fc1
c0015072:	6a 07                	push   0x7
c0015074:	e8 83 6d ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015079:	e8 92 65 00 00       	call   c001b610 <avxDetect>
c001507e:	83 c4 10             	add    esp,0x10
c0015081:	85 c0                	test   eax,eax
c0015083:	74 1c                	je     c00150a1 <HalInitialiseCoprocessor()+0x43>
c0015085:	c7 05 ac 37 02 c0 3a b6 01 c0 	mov    DWORD PTR ds:0xc00237ac,0xc001b63a
c001508f:	c7 05 a8 37 02 c0 4b b6 01 c0 	mov    DWORD PTR ds:0xc00237a8,0xc001b64b
c0015099:	83 c4 0c             	add    esp,0xc
c001509c:	e9 bb 65 00 00       	jmp    c001b65c <avxInit>
c00150a1:	e8 ea 67 00 00       	call   c001b890 <absolutelyNoChanceInHell>
c00150a6:	85 c0                	test   eax,eax
c00150a8:	74 1c                	je     c00150c6 <HalInitialiseCoprocessor()+0x68>
c00150aa:	c7 05 ac 37 02 c0 a8 b8 01 c0 	mov    DWORD PTR ds:0xc00237ac,0xc001b8a8
c00150b4:	c7 05 a8 37 02 c0 b0 b8 01 c0 	mov    DWORD PTR ds:0xc00237a8,0xc001b8b0
c00150be:	83 c4 0c             	add    esp,0xc
c00150c1:	e9 f2 67 00 00       	jmp    c001b8b8 <sseInit>
c00150c6:	e8 0b 68 00 00       	call   c001b8d6 <x87Detect>
c00150cb:	85 c0                	test   eax,eax
c00150cd:	74 1c                	je     c00150eb <HalInitialiseCoprocessor()+0x8d>
c00150cf:	c7 05 ac 37 02 c0 f1 b8 01 c0 	mov    DWORD PTR ds:0xc00237ac,0xc001b8f1
c00150d9:	c7 05 a8 37 02 c0 f8 b8 01 c0 	mov    DWORD PTR ds:0xc00237a8,0xc001b8f8
c00150e3:	83 c4 0c             	add    esp,0xc
c00150e6:	e9 14 68 00 00       	jmp    c001b8ff <x87Init>
c00150eb:	c7 05 ac 37 02 c0 e4 49 01 c0 	mov    DWORD PTR ds:0xc00237ac,0xc00149e4
c00150f5:	c7 05 a8 37 02 c0 e4 49 01 c0 	mov    DWORD PTR ds:0xc00237a8,0xc00149e4
c00150ff:	0f 20 c0             	mov    eax,cr0
c0015102:	83 c8 04             	or     eax,0x4
c0015105:	0f 22 c0             	mov    cr0,eax
c0015108:	83 c4 0c             	add    esp,0xc
c001510b:	c3                   	ret    

c001510c <HalPanic(char const*)>:
c001510c:	53                   	push   ebx
c001510d:	83 ec 10             	sub    esp,0x10
c0015110:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015114:	fa                   	cli    
c0015115:	53                   	push   ebx
c0015116:	68 46 e8 01 c0       	push   0xc001e846
c001511b:	e8 68 53 ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0015120:	83 c4 0c             	add    esp,0xc
c0015123:	6a 01                	push   0x1
c0015125:	6a 0f                	push   0xf
c0015127:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c001512d:	e8 18 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015132:	58                   	pop    eax
c0015133:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c0015139:	e8 04 33 ff ff       	call   c0008442 <VgaText::clearScreen()>
c001513e:	5a                   	pop    edx
c001513f:	59                   	pop    ecx
c0015140:	68 ae e8 01 c0       	push   0xc001e8ae
c0015145:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c001514b:	e8 32 31 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015150:	83 c4 0c             	add    esp,0xc
c0015153:	6a 01                	push   0x1
c0015155:	6a 0f                	push   0xf
c0015157:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c001515d:	e8 e8 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015162:	58                   	pop    eax
c0015163:	5a                   	pop    edx
c0015164:	68 5f e8 01 c0       	push   0xc001e85f
c0015169:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c001516f:	e8 c2 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015174:	83 c4 0c             	add    esp,0xc
c0015177:	6a 0f                	push   0xf
c0015179:	6a 01                	push   0x1
c001517b:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c0015181:	e8 c4 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015186:	59                   	pop    ecx
c0015187:	58                   	pop    eax
c0015188:	68 68 e8 01 c0       	push   0xc001e868
c001518d:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c0015193:	e8 9e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015198:	83 c4 0c             	add    esp,0xc
c001519b:	6a 01                	push   0x1
c001519d:	6a 0f                	push   0xf
c001519f:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151a5:	e8 a0 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151aa:	58                   	pop    eax
c00151ab:	5a                   	pop    edx
c00151ac:	68 ac e8 01 c0       	push   0xc001e8ac
c00151b1:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151b7:	e8 7a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151bc:	59                   	pop    ecx
c00151bd:	58                   	pop    eax
c00151be:	68 75 e8 01 c0       	push   0xc001e875
c00151c3:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151c9:	e8 68 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151ce:	58                   	pop    eax
c00151cf:	5a                   	pop    edx
c00151d0:	68 af e8 01 c0       	push   0xc001e8af
c00151d5:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151db:	e8 56 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151e0:	59                   	pop    ecx
c00151e1:	58                   	pop    eax
c00151e2:	53                   	push   ebx
c00151e3:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151e9:	e8 48 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151ee:	58                   	pop    eax
c00151ef:	5a                   	pop    edx
c00151f0:	68 ac e8 01 c0       	push   0xc001e8ac
c00151f5:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c00151fb:	e8 36 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	eb fe                	jmp    c0015203 <HalPanic(char const*)+0xf7>

c0015205 <HalQueryPerformanceCounter()>:
c0015205:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001520a:	31 d2                	xor    edx,edx
c001520c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015212:	31 c0                	xor    eax,eax
c0015214:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001521b:	74 02                	je     c001521f <HalQueryPerformanceCounter()+0x1a>
c001521d:	0f 31                	rdtsc  
c001521f:	c3                   	ret    

c0015220 <HalInitialise()>:
c0015220:	53                   	push   ebx
c0015221:	83 ec 08             	sub    esp,0x8
c0015224:	e8 06 6e ff ff       	call   c000c02f <setupINTS()>
c0015229:	80 3d 20 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022d20,0x0
c0015230:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0015235:	75 07                	jne    c001523e <HalInitialise()+0x1e>
c0015237:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001523e:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015244:	83 e0 01             	and    eax,0x1
c0015247:	a2 a0 37 02 c0       	mov    ds:0xc00237a0,al
c001524c:	e8 a7 02 00 00       	call   c00154f8 <picOpen()>
c0015251:	80 3d a0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a0,0x0
c0015258:	74 0a                	je     c0015264 <HalInitialise()+0x44>
c001525a:	e8 e1 01 00 00       	call   c0015440 <picDisable()>
c001525f:	e8 26 5d 00 00       	call   c001af8a <apicOpen()>
c0015264:	bb 0f 00 00 00       	mov    ebx,0xf
c0015269:	50                   	push   eax
c001526a:	6a 00                	push   0x0
c001526c:	68 e5 4e 01 c0       	push   0xc0014ee5
c0015271:	6a 00                	push   0x0
c0015273:	e8 84 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015278:	83 c4 0c             	add    esp,0xc
c001527b:	6a 00                	push   0x0
c001527d:	68 e5 4e 01 c0       	push   0xc0014ee5
c0015282:	6a 01                	push   0x1
c0015284:	e8 73 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015289:	83 c4 0c             	add    esp,0xc
c001528c:	6a 00                	push   0x0
c001528e:	68 e5 49 01 c0       	push   0xc00149e5
c0015293:	6a 02                	push   0x2
c0015295:	e8 62 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001529a:	83 c4 0c             	add    esp,0xc
c001529d:	6a 00                	push   0x0
c001529f:	68 e5 4e 01 c0       	push   0xc0014ee5
c00152a4:	6a 03                	push   0x3
c00152a6:	e8 51 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ab:	83 c4 0c             	add    esp,0xc
c00152ae:	6a 00                	push   0x0
c00152b0:	68 e5 4e 01 c0       	push   0xc0014ee5
c00152b5:	6a 04                	push   0x4
c00152b7:	e8 40 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152bc:	83 c4 0c             	add    esp,0xc
c00152bf:	6a 00                	push   0x0
c00152c1:	68 e5 4e 01 c0       	push   0xc0014ee5
c00152c6:	6a 05                	push   0x5
c00152c8:	e8 2f 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152cd:	83 c4 0c             	add    esp,0xc
c00152d0:	6a 00                	push   0x0
c00152d2:	68 19 4f 01 c0       	push   0xc0014f19
c00152d7:	6a 06                	push   0x6
c00152d9:	e8 1e 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152de:	83 c4 0c             	add    esp,0xc
c00152e1:	6a 00                	push   0x0
c00152e3:	68 fe 49 01 c0       	push   0xc00149fe
c00152e8:	6a 08                	push   0x8
c00152ea:	e8 0d 6b ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152ef:	83 c4 0c             	add    esp,0xc
c00152f2:	6a 00                	push   0x0
c00152f4:	68 e5 4e 01 c0       	push   0xc0014ee5
c00152f9:	6a 09                	push   0x9
c00152fb:	e8 fc 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015300:	83 c4 0c             	add    esp,0xc
c0015303:	6a 00                	push   0x0
c0015305:	68 e5 4e 01 c0       	push   0xc0014ee5
c001530a:	6a 0a                	push   0xa
c001530c:	e8 eb 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015311:	83 c4 0c             	add    esp,0xc
c0015314:	6a 00                	push   0x0
c0015316:	68 e5 4e 01 c0       	push   0xc0014ee5
c001531b:	6a 0b                	push   0xb
c001531d:	e8 da 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015322:	83 c4 0c             	add    esp,0xc
c0015325:	6a 00                	push   0x0
c0015327:	68 fa 4d 01 c0       	push   0xc0014dfa
c001532c:	6a 0d                	push   0xd
c001532e:	e8 c9 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015333:	83 c4 0c             	add    esp,0xc
c0015336:	6a 00                	push   0x0
c0015338:	68 5f 4e 01 c0       	push   0xc0014e5f
c001533d:	6a 0e                	push   0xe
c001533f:	e8 b8 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	50                   	push   eax
c0015348:	6a 00                	push   0x0
c001534a:	68 e5 4e 01 c0       	push   0xc0014ee5
c001534f:	53                   	push   ebx
c0015350:	43                   	inc    ebx
c0015351:	e8 a6 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015356:	83 c4 10             	add    esp,0x10
c0015359:	83 fb 1e             	cmp    ebx,0x1e
c001535c:	75 e9                	jne    c0015347 <HalInitialise()+0x127>
c001535e:	50                   	push   eax
c001535f:	6a 00                	push   0x0
c0015361:	68 e3 0f 01 c0       	push   0xc0010fe3
c0015366:	6a 60                	push   0x60
c0015368:	e8 8f 6a ff ff       	call   c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001536d:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0015372:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001537c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015383:	e8 31 24 ff ff       	call   c00077b9 <malloc>
c0015388:	89 04 24             	mov    DWORD PTR [esp],eax
c001538b:	89 c3                	mov    ebx,eax
c001538d:	e8 2e 09 00 00       	call   c0015cc0 <RTC::RTC()>
c0015392:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001539c:	5a                   	pop    edx
c001539d:	59                   	pop    ecx
c001539e:	53                   	push   ebx
c001539f:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00153a5:	e8 1e 65 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c00153aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153ac:	6a 00                	push   0x0
c00153ae:	6a 00                	push   0x0
c00153b0:	6a 00                	push   0x0
c00153b2:	53                   	push   ebx
c00153b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153b6:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c00153bb:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00153c1:	83 c4 28             	add    esp,0x28
c00153c4:	5b                   	pop    ebx
c00153c5:	c3                   	ret    

c00153c6 <HalMakeBeep(int)>:
c00153c6:	53                   	push   ebx
c00153c7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00153cb:	85 db                	test   ebx,ebx
c00153cd:	75 07                	jne    c00153d6 <HalMakeBeep(int)+0x10>
c00153cf:	e4 61                	in     al,0x61
c00153d1:	83 e0 fc             	and    eax,0xfffffffc
c00153d4:	eb 26                	jmp    c00153fc <HalMakeBeep(int)+0x36>
c00153d6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00153db:	99                   	cdq    
c00153dc:	f7 fb                	idiv   ebx
c00153de:	89 c1                	mov    ecx,eax
c00153e0:	b0 b6                	mov    al,0xb6
c00153e2:	e6 43                	out    0x43,al
c00153e4:	88 c8                	mov    al,cl
c00153e6:	e6 42                	out    0x42,al
c00153e8:	89 c8                	mov    eax,ecx
c00153ea:	c1 e8 08             	shr    eax,0x8
c00153ed:	e6 42                	out    0x42,al
c00153ef:	e4 61                	in     al,0x61
c00153f1:	88 c2                	mov    dl,al
c00153f3:	83 ca 03             	or     edx,0x3
c00153f6:	38 c2                	cmp    dl,al
c00153f8:	74 04                	je     c00153fe <HalMakeBeep(int)+0x38>
c00153fa:	88 d0                	mov    al,dl
c00153fc:	e6 61                	out    0x61,al
c00153fe:	5b                   	pop    ebx
c00153ff:	c3                   	ret    

c0015400 <HalGetRand()>:
c0015400:	31 c0                	xor    eax,eax
c0015402:	c3                   	ret    

c0015403 <HalEndOfInterrupt(int)>:
c0015403:	80 3d a0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237a0,0x0
c001540a:	74 23                	je     c001542f <HalEndOfInterrupt(int)+0x2c>
c001540c:	83 ec 14             	sub    esp,0x14
c001540f:	6a 1b                	push   0x1b
c0015411:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015417:	e8 d6 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001541c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015421:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001542b:	83 c4 1c             	add    esp,0x1c
c001542e:	c3                   	ret    
c001542f:	e9 54 02 00 00       	jmp    c0015688 <picEOI(int)>

c0015434 <HalRestart()>:
c0015434:	c3                   	ret    

c0015435 <HalShutdown()>:
c0015435:	c3                   	ret    

c0015436 <HalSleep()>:
c0015436:	c3                   	ret    
c0015437:	90                   	nop

c0015438 <picIoWait()>:
c0015438:	eb 00                	jmp    c001543a <picIoWait()+0x2>
c001543a:	eb 00                	jmp    c001543c <picIoWait()+0x4>
c001543c:	90                   	nop
c001543d:	c3                   	ret    
c001543e:	66 90                	xchg   ax,ax

c0015440 <picDisable()>:
c0015440:	83 ec 10             	sub    esp,0x10
c0015443:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001544a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001544f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015453:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015458:	ee                   	out    dx,al
c0015459:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015460:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015465:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015469:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001546e:	ee                   	out    dx,al
c001546f:	90                   	nop
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	c3                   	ret    

c0015474 <picGetIRQReg(int)>:
c0015474:	83 ec 10             	sub    esp,0x10
c0015477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001547b:	25 ff 00 00 00       	and    eax,0xff
c0015480:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015487:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001548b:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001548f:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015494:	ee                   	out    dx,al
c0015495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015499:	25 ff 00 00 00       	and    eax,0xff
c001549e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00154a5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00154a9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00154ad:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00154b2:	ee                   	out    dx,al
c00154b3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00154ba:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00154bf:	89 c2                	mov    edx,eax
c00154c1:	ec                   	in     al,dx
c00154c2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00154c6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154ca:	25 ff 00 00 00       	and    eax,0xff
c00154cf:	c1 e0 08             	shl    eax,0x8
c00154d2:	89 c1                	mov    ecx,eax
c00154d4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00154db:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00154e0:	89 c2                	mov    edx,eax
c00154e2:	ec                   	in     al,dx
c00154e3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00154e7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154eb:	25 ff 00 00 00       	and    eax,0xff
c00154f0:	09 c8                	or     eax,ecx
c00154f2:	83 c4 10             	add    esp,0x10
c00154f5:	c3                   	ret    
c00154f6:	66 90                	xchg   ax,ax

c00154f8 <picOpen()>:
c00154f8:	83 ec 50             	sub    esp,0x50
c00154fb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015502:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015507:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001550b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001550f:	ee                   	out    dx,al
c0015510:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015517:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001551c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015524:	ee                   	out    dx,al
c0015525:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001552d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015535:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001553c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015540:	89 c2                	mov    edx,eax
c0015542:	ec                   	in     al,dx
c0015543:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015547:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001554b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001554f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015556:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001555a:	89 c2                	mov    edx,eax
c001555c:	ec                   	in     al,dx
c001555d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015561:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015565:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015569:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015570:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015575:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015579:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001557d:	ee                   	out    dx,al
c001557e:	e8 b5 fe ff ff       	call   c0015438 <picIoWait()>
c0015583:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001558a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001558f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015593:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015597:	ee                   	out    dx,al
c0015598:	e8 9b fe ff ff       	call   c0015438 <picIoWait()>
c001559d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155a1:	25 ff 00 00 00       	and    eax,0xff
c00155a6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00155ad:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00155b1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00155b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155b9:	ee                   	out    dx,al
c00155ba:	e8 79 fe ff ff       	call   c0015438 <picIoWait()>
c00155bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00155c3:	25 ff 00 00 00       	and    eax,0xff
c00155c8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00155cf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00155d3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00155d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00155db:	ee                   	out    dx,al
c00155dc:	e8 57 fe ff ff       	call   c0015438 <picIoWait()>
c00155e1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00155e8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00155ed:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00155f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00155f5:	ee                   	out    dx,al
c00155f6:	e8 3d fe ff ff       	call   c0015438 <picIoWait()>
c00155fb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015602:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015607:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001560b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001560f:	ee                   	out    dx,al
c0015610:	e8 23 fe ff ff       	call   c0015438 <picIoWait()>
c0015615:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001561c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015621:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015625:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015629:	ee                   	out    dx,al
c001562a:	e8 09 fe ff ff       	call   c0015438 <picIoWait()>
c001562f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015636:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001563b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001563f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015643:	ee                   	out    dx,al
c0015644:	e8 ef fd ff ff       	call   c0015438 <picIoWait()>
c0015649:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c001564d:	25 ff 00 00 00       	and    eax,0xff
c0015652:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015659:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001565d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015661:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015665:	ee                   	out    dx,al
c0015666:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c001566a:	25 ff 00 00 00       	and    eax,0xff
c001566f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015676:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001567a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001567e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015682:	ee                   	out    dx,al
c0015683:	90                   	nop
c0015684:	83 c4 50             	add    esp,0x50
c0015687:	c3                   	ret    

c0015688 <picEOI(int)>:
c0015688:	83 ec 10             	sub    esp,0x10
c001568b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015690:	75 22                	jne    c00156b4 <picEOI(int)+0x2c>
c0015692:	6a 0b                	push   0xb
c0015694:	e8 db fd ff ff       	call   c0015474 <picGetIRQReg(int)>
c0015699:	83 c4 04             	add    esp,0x4
c001569c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00156a1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00156a6:	25 ff ff 00 00       	and    eax,0xffff
c00156ab:	25 80 00 00 00       	and    eax,0x80
c00156b0:	74 72                	je     c0015724 <picEOI(int)+0x9c>
c00156b2:	66 90                	xchg   ax,ax
c00156b4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00156b9:	75 31                	jne    c00156ec <picEOI(int)+0x64>
c00156bb:	6a 0b                	push   0xb
c00156bd:	e8 b2 fd ff ff       	call   c0015474 <picGetIRQReg(int)>
c00156c2:	83 c4 04             	add    esp,0x4
c00156c5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00156ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00156ce:	66 85 c0             	test   ax,ax
c00156d1:	78 19                	js     c00156ec <picEOI(int)+0x64>
c00156d3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00156da:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00156df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00156e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00156e8:	ee                   	out    dx,al
c00156e9:	eb 3d                	jmp    c0015728 <picEOI(int)+0xa0>
c00156eb:	90                   	nop
c00156ec:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156f1:	7e 19                	jle    c001570c <picEOI(int)+0x84>
c00156f3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00156fa:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00156ff:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015703:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015708:	ee                   	out    dx,al
c0015709:	8d 76 00             	lea    esi,[esi+0x0]
c001570c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015713:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015718:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001571c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015721:	ee                   	out    dx,al
c0015722:	eb 04                	jmp    c0015728 <picEOI(int)+0xa0>
c0015724:	90                   	nop
c0015725:	8d 76 00             	lea    esi,[esi+0x0]
c0015728:	83 c4 10             	add    esp,0x10
c001572b:	c3                   	ret    

c001572c <RTC::open(int, int, void*)>:
c001572c:	31 c0                	xor    eax,eax
c001572e:	c3                   	ret    
c001572f:	90                   	nop

c0015730 <RTC::close(int, int, void*)>:
c0015730:	31 c0                	xor    eax,eax
c0015732:	c3                   	ret    
c0015733:	90                   	nop

c0015734 <RTC::timeInSecondsUTC()>:
c0015734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015738:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001573e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015744:	c3                   	ret    
c0015745:	90                   	nop

c0015746 <RTC::timeInDatetimeUTC()>:
c0015746:	53                   	push   ebx
c0015747:	83 ec 14             	sub    esp,0x14
c001574a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001574e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015752:	8b 10                	mov    edx,DWORD PTR [eax]
c0015754:	50                   	push   eax
c0015755:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	52                   	push   edx
c001575c:	50                   	push   eax
c001575d:	53                   	push   ebx
c001575e:	e8 d9 5e ff ff       	call   c000b63c <secondsToDatetime(unsigned long long)>
c0015763:	89 d8                	mov    eax,ebx
c0015765:	83 c4 14             	add    esp,0x14
c0015768:	5b                   	pop    ebx
c0015769:	c2 04 00             	ret    0x4

c001576c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001576c:	56                   	push   esi
c001576d:	53                   	push   ebx
c001576e:	83 ec 14             	sub    esp,0x14
c0015771:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015775:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015777:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001577a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001577e:	52                   	push   edx
c001577f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015787:	50                   	push   eax
c0015788:	e8 af 5e ff ff       	call   c000b63c <secondsToDatetime(unsigned long long)>
c001578d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015791:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015795:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015799:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001579d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00157a1:	89 f0                	mov    eax,esi
c00157a3:	83 c4 20             	add    esp,0x20
c00157a6:	5b                   	pop    ebx
c00157a7:	5e                   	pop    esi
c00157a8:	ff e0                	jmp    eax

c00157aa <RTC::~RTC()>:
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	ba 4c e9 01 c0       	mov    edx,0xc001e94c
c00157b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157b6:	89 10                	mov    DWORD PTR [eax],edx
c00157b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	50                   	push   eax
c00157c0:	e8 fb 5b ff ff       	call   c000b3c0 <Clock::~Clock()>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	90                   	nop
c00157c9:	83 c4 0c             	add    esp,0xc
c00157cc:	c3                   	ret    
c00157cd:	90                   	nop

c00157ce <RTC::~RTC()>:
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157d8:	e8 cd ff ff ff       	call   c00157aa <RTC::~RTC()>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	83 ec 08             	sub    esp,0x8
c00157e3:	68 60 01 00 00       	push   0x160
c00157e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157ec:	e8 a1 4b ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	83 c4 0c             	add    esp,0xc
c00157f7:	c3                   	ret    

c00157f8 <RTC::get_update_in_progress_flag()>:
c00157f8:	83 ec 14             	sub    esp,0x14
c00157fb:	6a 0a                	push   0xa
c00157fd:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015803:	e8 9e 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015808:	83 c4 1c             	add    esp,0x1c
c001580b:	c0 e8 07             	shr    al,0x7
c001580e:	c3                   	ret    
c001580f:	90                   	nop

c0015810 <RTC::completeRTCRefresh()>:
c0015810:	55                   	push   ebp
c0015811:	57                   	push   edi
c0015812:	56                   	push   esi
c0015813:	53                   	push   ebx
c0015814:	83 ec 2c             	sub    esp,0x2c
c0015817:	8b 1d 2c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a2c
c001581d:	83 ec 0c             	sub    esp,0xc
c0015820:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015824:	e8 cf ff ff ff       	call   c00157f8 <RTC::get_update_in_progress_flag()>
c0015829:	83 c4 10             	add    esp,0x10
c001582c:	84 c0                	test   al,al
c001582e:	74 0e                	je     c001583e <RTC::completeRTCRefresh()+0x2e>
c0015830:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015836:	3b 05 2c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a2c
c001583c:	73 df                	jae    c001581d <RTC::completeRTCRefresh()+0xd>
c001583e:	55                   	push   ebp
c001583f:	55                   	push   ebp
c0015840:	6a 00                	push   0x0
c0015842:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015848:	e8 59 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001584d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015851:	58                   	pop    eax
c0015852:	5a                   	pop    edx
c0015853:	6a 02                	push   0x2
c0015855:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c001585b:	e8 46 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015860:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015864:	59                   	pop    ecx
c0015865:	5b                   	pop    ebx
c0015866:	6a 04                	push   0x4
c0015868:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c001586e:	e8 33 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015873:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015877:	5e                   	pop    esi
c0015878:	5f                   	pop    edi
c0015879:	6a 07                	push   0x7
c001587b:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015881:	e8 20 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015886:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001588a:	5d                   	pop    ebp
c001588b:	58                   	pop    eax
c001588c:	6a 08                	push   0x8
c001588e:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015894:	e8 0d 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015899:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001589d:	58                   	pop    eax
c001589e:	5a                   	pop    edx
c001589f:	6a 09                	push   0x9
c00158a1:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00158a7:	e8 fa 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158ac:	83 c4 10             	add    esp,0x10
c00158af:	0f b6 e8             	movzx  ebp,al
c00158b2:	8b 1d 2c 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a2c
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158bf:	e8 34 ff ff ff       	call   c00157f8 <RTC::get_update_in_progress_flag()>
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	84 c0                	test   al,al
c00158c9:	74 0e                	je     c00158d9 <RTC::completeRTCRefresh()+0xc9>
c00158cb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00158d1:	3b 05 2c 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022a2c
c00158d7:	73 df                	jae    c00158b8 <RTC::completeRTCRefresh()+0xa8>
c00158d9:	50                   	push   eax
c00158da:	50                   	push   eax
c00158db:	6a 00                	push   0x0
c00158dd:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00158e3:	e8 be 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e8:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00158ec:	58                   	pop    eax
c00158ed:	5a                   	pop    edx
c00158ee:	6a 02                	push   0x2
c00158f0:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00158f6:	e8 ab 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158fb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00158ff:	59                   	pop    ecx
c0015900:	5b                   	pop    ebx
c0015901:	6a 04                	push   0x4
c0015903:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015909:	e8 98 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001590e:	5e                   	pop    esi
c001590f:	88 c3                	mov    bl,al
c0015911:	5f                   	pop    edi
c0015912:	6a 07                	push   0x7
c0015914:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c001591a:	e8 87 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001591f:	89 c6                	mov    esi,eax
c0015921:	58                   	pop    eax
c0015922:	5a                   	pop    edx
c0015923:	6a 08                	push   0x8
c0015925:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c001592b:	e8 76 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015930:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015934:	59                   	pop    ecx
c0015935:	5f                   	pop    edi
c0015936:	6a 09                	push   0x9
c0015938:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c001593e:	e8 63 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015943:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015947:	0f b6 f8             	movzx  edi,al
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015951:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015955:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015959:	89 f1                	mov    ecx,esi
c001595b:	0f 94 c0             	sete   al
c001595e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015962:	0f 94 c2             	sete   dl
c0015965:	21 d0                	and    eax,edx
c0015967:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001596b:	0f 94 c2             	sete   dl
c001596e:	21 c2                	and    edx,eax
c0015970:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015974:	0f 94 c0             	sete   al
c0015977:	21 d0                	and    eax,edx
c0015979:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001597d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015981:	0f 94 c1             	sete   cl
c0015984:	84 c8                	test   al,cl
c0015986:	75 29                	jne    c00159b1 <RTC::completeRTCRefresh()+0x1a1>
c0015988:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001598c:	89 fd                	mov    ebp,edi
c001598e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015992:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015996:	89 f0                	mov    eax,esi
c0015998:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001599c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159a0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00159a4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00159a8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159ac:	e9 01 ff ff ff       	jmp    c00158b2 <RTC::completeRTCRefresh()+0xa2>
c00159b1:	39 fd                	cmp    ebp,edi
c00159b3:	75 d3                	jne    c0015988 <RTC::completeRTCRefresh()+0x178>
c00159b5:	55                   	push   ebp
c00159b6:	55                   	push   ebp
c00159b7:	6a 0b                	push   0xb
c00159b9:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c00159bf:	e8 e2 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	89 c5                	mov    ebp,eax
c00159c9:	a8 04                	test   al,0x4
c00159cb:	75 78                	jne    c0015a45 <RTC::completeRTCRefresh()+0x235>
c00159cd:	b1 0a                	mov    cl,0xa
c00159cf:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c00159d3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00159d7:	83 e2 0f             	and    edx,0xf
c00159da:	c0 e8 04             	shr    al,0x4
c00159dd:	c1 ef 04             	shr    edi,0x4
c00159e0:	f6 e1                	mul    cl
c00159e2:	6b ff 0a             	imul   edi,edi,0xa
c00159e5:	01 d0                	add    eax,edx
c00159e7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159eb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00159ef:	83 e2 0f             	and    edx,0xf
c00159f2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159f6:	c0 e8 04             	shr    al,0x4
c00159f9:	f6 e1                	mul    cl
c00159fb:	01 d0                	add    eax,edx
c00159fd:	88 da                	mov    dl,bl
c00159ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a03:	83 e2 0f             	and    edx,0xf
c0015a06:	88 d8                	mov    al,bl
c0015a08:	83 e3 80             	and    ebx,0xffffff80
c0015a0b:	c0 e8 04             	shr    al,0x4
c0015a0e:	83 e0 07             	and    eax,0x7
c0015a11:	f6 e1                	mul    cl
c0015a13:	01 d0                	add    eax,edx
c0015a15:	89 f2                	mov    edx,esi
c0015a17:	09 c3                	or     ebx,eax
c0015a19:	83 e2 0f             	and    edx,0xf
c0015a1c:	89 f0                	mov    eax,esi
c0015a1e:	c0 e8 04             	shr    al,0x4
c0015a21:	f6 e1                	mul    cl
c0015a23:	8d 34 02             	lea    esi,[edx+eax*1]
c0015a26:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a2a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a2e:	83 e2 0f             	and    edx,0xf
c0015a31:	c0 e8 04             	shr    al,0x4
c0015a34:	f6 e1                	mul    cl
c0015a36:	01 d0                	add    eax,edx
c0015a38:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015a3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a40:	83 e0 0f             	and    eax,0xf
c0015a43:	01 c7                	add    edi,eax
c0015a45:	83 e5 02             	and    ebp,0x2
c0015a48:	75 14                	jne    c0015a5e <RTC::completeRTCRefresh()+0x24e>
c0015a4a:	84 db                	test   bl,bl
c0015a4c:	79 10                	jns    c0015a5e <RTC::completeRTCRefresh()+0x24e>
c0015a4e:	83 e3 7f             	and    ebx,0x7f
c0015a51:	b9 18 00 00 00       	mov    ecx,0x18
c0015a56:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a59:	99                   	cdq    
c0015a5a:	f7 f9                	idiv   ecx
c0015a5c:	88 d3                	mov    bl,dl
c0015a5e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a64:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015a6a:	77 06                	ja     c0015a72 <RTC::completeRTCRefresh()+0x262>
c0015a6c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015a72:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015a77:	31 d2                	xor    edx,edx
c0015a79:	c1 e1 10             	shl    ecx,0x10
c0015a7c:	89 d7                	mov    edi,edx
c0015a7e:	c1 e5 10             	shl    ebp,0x10
c0015a81:	31 c0                	xor    eax,eax
c0015a83:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015a89:	09 cf                	or     edi,ecx
c0015a8b:	89 fa                	mov    edx,edi
c0015a8d:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015a91:	88 da                	mov    dl,bl
c0015a93:	89 f3                	mov    ebx,esi
c0015a95:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015a99:	88 d8                	mov    al,bl
c0015a9b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015a9f:	0f b7 c8             	movzx  ecx,ax
c0015aa2:	09 e9                	or     ecx,ebp
c0015aa4:	89 c8                	mov    eax,ecx
c0015aa6:	51                   	push   ecx
c0015aa7:	51                   	push   ecx
c0015aa8:	52                   	push   edx
c0015aa9:	50                   	push   eax
c0015aaa:	e8 00 5a ff ff       	call   c000b4af <datetimeToSeconds(datetime_t)>
c0015aaf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015ab3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015ab9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015abf:	83 c4 3c             	add    esp,0x3c
c0015ac2:	5b                   	pop    ebx
c0015ac3:	5e                   	pop    esi
c0015ac4:	5f                   	pop    edi
c0015ac5:	5d                   	pop    ebp
c0015ac6:	c3                   	ret    
c0015ac7:	90                   	nop

c0015ac8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015ac8:	55                   	push   ebp
c0015ac9:	57                   	push   edi
c0015aca:	56                   	push   esi
c0015acb:	53                   	push   ebx
c0015acc:	83 ec 30             	sub    esp,0x30
c0015acf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ad3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015ad7:	6a 00                	push   0x0
c0015ad9:	6a 00                	push   0x0
c0015adb:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015ae1:	e8 d6 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ae6:	83 c4 0c             	add    esp,0xc
c0015ae9:	6a 00                	push   0x0
c0015aeb:	6a 02                	push   0x2
c0015aed:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015af3:	e8 c4 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015af8:	31 d2                	xor    edx,edx
c0015afa:	89 f9                	mov    ecx,edi
c0015afc:	89 f8                	mov    eax,edi
c0015afe:	c1 e9 10             	shr    ecx,0x10
c0015b01:	0f b6 c4             	movzx  eax,ah
c0015b04:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015b08:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015b0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b10:	b9 64 00 00 00       	mov    ecx,0x64
c0015b15:	89 f0                	mov    eax,esi
c0015b17:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b1b:	89 f0                	mov    eax,esi
c0015b1d:	0f b6 c4             	movzx  eax,ah
c0015b20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b24:	89 f0                	mov    eax,esi
c0015b26:	c1 e8 10             	shr    eax,0x10
c0015b29:	66 f7 f1             	div    cx
c0015b2c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015b31:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015b36:	59                   	pop    ecx
c0015b37:	5b                   	pop    ebx
c0015b38:	89 fb                	mov    ebx,edi
c0015b3a:	6a 0b                	push   0xb
c0015b3c:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015b42:	e8 5f 13 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015b47:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b53:	75 74                	jne    c0015bc9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b55:	b2 0a                	mov    dl,0xa
c0015b57:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b5b:	0f b6 c1             	movzx  eax,cl
c0015b5e:	f6 f2                	div    dl
c0015b60:	88 c3                	mov    bl,al
c0015b62:	88 e0                	mov    al,ah
c0015b64:	c1 e3 04             	shl    ebx,0x4
c0015b67:	09 c3                	or     ebx,eax
c0015b69:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015b6e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015b72:	f6 f2                	div    dl
c0015b74:	88 c1                	mov    cl,al
c0015b76:	88 e0                	mov    al,ah
c0015b78:	c1 e1 04             	shl    ecx,0x4
c0015b7b:	09 c1                	or     ecx,eax
c0015b7d:	89 f8                	mov    eax,edi
c0015b7f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015b83:	0f b6 c0             	movzx  eax,al
c0015b86:	f6 f2                	div    dl
c0015b88:	88 c3                	mov    bl,al
c0015b8a:	88 e0                	mov    al,ah
c0015b8c:	c1 e3 04             	shl    ebx,0x4
c0015b8f:	09 c3                	or     ebx,eax
c0015b91:	89 f0                	mov    eax,esi
c0015b93:	0f b6 c0             	movzx  eax,al
c0015b96:	f6 f2                	div    dl
c0015b98:	88 c1                	mov    cl,al
c0015b9a:	88 e0                	mov    al,ah
c0015b9c:	c1 e1 04             	shl    ecx,0x4
c0015b9f:	09 c1                	or     ecx,eax
c0015ba1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015ba6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015baa:	f6 f2                	div    dl
c0015bac:	88 c1                	mov    cl,al
c0015bae:	88 e0                	mov    al,ah
c0015bb0:	c1 e1 04             	shl    ecx,0x4
c0015bb3:	09 c1                	or     ecx,eax
c0015bb5:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015bba:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015bbe:	f6 f2                	div    dl
c0015bc0:	89 c5                	mov    ebp,eax
c0015bc2:	88 e0                	mov    al,ah
c0015bc4:	c1 e5 04             	shl    ebp,0x4
c0015bc7:	09 c5                	or     ebp,eax
c0015bc9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015bce:	75 17                	jne    c0015be7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015bd0:	80 fb 0b             	cmp    bl,0xb
c0015bd3:	76 0c                	jbe    c0015be1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015bd5:	80 eb 0c             	sub    bl,0xc
c0015bd8:	75 02                	jne    c0015bdc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015bda:	b3 0c                	mov    bl,0xc
c0015bdc:	83 cb 80             	or     ebx,0xffffff80
c0015bdf:	eb 06                	jmp    c0015be7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015be1:	84 db                	test   bl,bl
c0015be3:	75 02                	jne    c0015be7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015be5:	b3 0c                	mov    bl,0xc
c0015be7:	0f b6 db             	movzx  ebx,bl
c0015bea:	50                   	push   eax
c0015beb:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015bf0:	50                   	push   eax
c0015bf1:	6a 00                	push   0x0
c0015bf3:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015bf9:	e8 be 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bfe:	83 c4 0c             	add    esp,0xc
c0015c01:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c06:	50                   	push   eax
c0015c07:	6a 02                	push   0x2
c0015c09:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c0f:	e8 a8 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c14:	83 c4 0c             	add    esp,0xc
c0015c17:	53                   	push   ebx
c0015c18:	6a 04                	push   0x4
c0015c1a:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c20:	e8 97 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c25:	83 c4 0c             	add    esp,0xc
c0015c28:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015c2d:	50                   	push   eax
c0015c2e:	6a 07                	push   0x7
c0015c30:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c36:	e8 81 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c3b:	83 c4 0c             	add    esp,0xc
c0015c3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015c43:	50                   	push   eax
c0015c44:	6a 08                	push   0x8
c0015c46:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c4c:	e8 6b 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c51:	83 c4 0c             	add    esp,0xc
c0015c54:	89 e8                	mov    eax,ebp
c0015c56:	0f b6 e8             	movzx  ebp,al
c0015c59:	55                   	push   ebp
c0015c5a:	6a 09                	push   0x9
c0015c5c:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c62:	e8 55 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c67:	5a                   	pop    edx
c0015c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c6c:	e8 9f fb ff ff       	call   c0015810 <RTC::completeRTCRefresh()>
c0015c71:	83 c4 3c             	add    esp,0x3c
c0015c74:	b0 01                	mov    al,0x1
c0015c76:	5b                   	pop    ebx
c0015c77:	5e                   	pop    esi
c0015c78:	5f                   	pop    edi
c0015c79:	5d                   	pop    ebp
c0015c7a:	c3                   	ret    

c0015c7b <rtcIRQHandler(regs*, void*)>:
c0015c7b:	53                   	push   ebx
c0015c7c:	83 ec 10             	sub    esp,0x10
c0015c7f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c83:	6a 0c                	push   0xc
c0015c85:	ff 35 58 04 02 c0    	push   DWORD PTR ds:0xc0020458
c0015c8b:	e8 16 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	84 c0                	test   al,al
c0015c95:	79 24                	jns    c0015cbb <rtcIRQHandler(regs*, void*)+0x40>
c0015c97:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015c9e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015ca5:	66 ff 05 b4 37 02 c0 	inc    WORD PTR ds:0xc00237b4
c0015cac:	75 0d                	jne    c0015cbb <rtcIRQHandler(regs*, void*)+0x40>
c0015cae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015cb2:	83 c4 08             	add    esp,0x8
c0015cb5:	5b                   	pop    ebx
c0015cb6:	e9 55 fb ff ff       	jmp    c0015810 <RTC::completeRTCRefresh()>
c0015cbb:	83 c4 08             	add    esp,0x8
c0015cbe:	5b                   	pop    ebx
c0015cbf:	c3                   	ret    

c0015cc0 <RTC::RTC()>:
c0015cc0:	83 ec 1c             	sub    esp,0x1c
c0015cc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc7:	83 ec 08             	sub    esp,0x8
c0015cca:	68 2f e9 01 c0       	push   0xc001e92f
c0015ccf:	50                   	push   eax
c0015cd0:	e8 b5 56 ff ff       	call   c000b38a <Clock::Clock(char const*)>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	ba 4c e9 01 c0       	mov    edx,0xc001e94c
c0015cdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce1:	89 10                	mov    DWORD PTR [eax],edx
c0015ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce7:	83 ec 0c             	sub    esp,0xc
c0015cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cee:	6a 01                	push   0x1
c0015cf0:	68 7b 5c 01 c0       	push   0xc0015c7b
c0015cf5:	6a 08                	push   0x8
c0015cf7:	50                   	push   eax
c0015cf8:	e8 77 5b ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015cfd:	83 c4 20             	add    esp,0x20
c0015d00:	89 c2                	mov    edx,eax
c0015d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d06:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015d0c:	fa                   	cli    
c0015d0d:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0015d12:	40                   	inc    eax
c0015d13:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0015d18:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0015d1d:	83 ec 08             	sub    esp,0x8
c0015d20:	6a 0b                	push   0xb
c0015d22:	50                   	push   eax
c0015d23:	e8 7e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d28:	83 c4 10             	add    esp,0x10
c0015d2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d2f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0015d34:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015d38:	83 ca 10             	or     edx,0x10
c0015d3b:	81 e2 ff 00 00 00    	and    edx,0xff
c0015d41:	83 ec 04             	sub    esp,0x4
c0015d44:	52                   	push   edx
c0015d45:	6a 0b                	push   0xb
c0015d47:	50                   	push   eax
c0015d48:	e8 6f 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d4d:	83 c4 10             	add    esp,0x10
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d57:	e8 b4 fa ff ff       	call   c0015810 <RTC::completeRTCRefresh()>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0015d64:	48                   	dec    eax
c0015d65:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0015d6a:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c0015d6f:	85 c0                	test   eax,eax
c0015d71:	75 01                	jne    c0015d74 <RTC::RTC()+0xb4>
c0015d73:	fb                   	sti    
c0015d74:	90                   	nop
c0015d75:	83 c4 1c             	add    esp,0x1c
c0015d78:	c3                   	ret    
c0015d79:	66 90                	xchg   ax,ax
c0015d7b:	90                   	nop

c0015d7c <HalConsoleScroll(int, int)>:
c0015d7c:	83 ec 10             	sub    esp,0x10
c0015d7f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015d87:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015d8f:	90                   	nop
c0015d90:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015d95:	0f 8f e1 00 00 00    	jg     c0015e7c <HalConsoleScroll(int, int)+0x100>
c0015d9b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015da3:	90                   	nop
c0015da4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015dac:	0f 8f be 00 00 00    	jg     c0015e70 <HalConsoleScroll(int, int)+0xf4>
c0015db2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015db6:	89 d0                	mov    eax,edx
c0015db8:	c1 e0 02             	shl    eax,0x2
c0015dbb:	01 d0                	add    eax,edx
c0015dbd:	c1 e0 05             	shl    eax,0x5
c0015dc0:	89 c2                	mov    edx,eax
c0015dc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc6:	01 d0                	add    eax,edx
c0015dc8:	89 c2                	mov    edx,eax
c0015dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015dd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dd5:	89 d0                	mov    eax,edx
c0015dd7:	c1 e0 02             	shl    eax,0x2
c0015dda:	01 d0                	add    eax,edx
c0015ddc:	c1 e0 05             	shl    eax,0x5
c0015ddf:	89 c2                	mov    edx,eax
c0015de1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de5:	01 d0                	add    eax,edx
c0015de7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015ded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df1:	01 c2                	add    edx,eax
c0015df3:	8a 01                	mov    al,BYTE PTR [ecx]
c0015df5:	88 02                	mov    BYTE PTR [edx],al
c0015df7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015dfc:	75 66                	jne    c0015e64 <HalConsoleScroll(int, int)+0xe8>
c0015dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e02:	83 e0 01             	and    eax,0x1
c0015e05:	74 39                	je     c0015e40 <HalConsoleScroll(int, int)+0xc4>
c0015e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e0b:	83 e0 0f             	and    eax,0xf
c0015e0e:	88 c2                	mov    dl,al
c0015e10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e14:	c1 e0 04             	shl    eax,0x4
c0015e17:	88 d1                	mov    cl,dl
c0015e19:	09 c1                	or     ecx,eax
c0015e1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e1f:	89 d0                	mov    eax,edx
c0015e21:	c1 e0 02             	shl    eax,0x2
c0015e24:	01 d0                	add    eax,edx
c0015e26:	c1 e0 05             	shl    eax,0x5
c0015e29:	89 c2                	mov    edx,eax
c0015e2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e2f:	01 d0                	add    eax,edx
c0015e31:	89 c2                	mov    edx,eax
c0015e33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e37:	01 d0                	add    eax,edx
c0015e39:	88 ca                	mov    dl,cl
c0015e3b:	88 10                	mov    BYTE PTR [eax],dl
c0015e3d:	eb 25                	jmp    c0015e64 <HalConsoleScroll(int, int)+0xe8>
c0015e3f:	90                   	nop
c0015e40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e44:	89 d0                	mov    eax,edx
c0015e46:	c1 e0 02             	shl    eax,0x2
c0015e49:	01 d0                	add    eax,edx
c0015e4b:	c1 e0 05             	shl    eax,0x5
c0015e4e:	89 c2                	mov    edx,eax
c0015e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e54:	01 d0                	add    eax,edx
c0015e56:	89 c2                	mov    edx,eax
c0015e58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e5c:	01 d0                	add    eax,edx
c0015e5e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e61:	8d 76 00             	lea    esi,[esi+0x0]
c0015e64:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015e68:	e9 37 ff ff ff       	jmp    c0015da4 <HalConsoleScroll(int, int)+0x28>
c0015e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e70:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015e74:	e9 17 ff ff ff       	jmp    c0015d90 <HalConsoleScroll(int, int)+0x14>
c0015e79:	8d 76 00             	lea    esi,[esi+0x0]
c0015e7c:	90                   	nop
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	c3                   	ret    
c0015e81:	8d 76 00             	lea    esi,[esi+0x0]

c0015e84 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015e84:	83 ec 14             	sub    esp,0x14
c0015e87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e8b:	88 04 24             	mov    BYTE PTR [esp],al
c0015e8e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015e91:	25 ff 00 00 00       	and    eax,0xff
c0015e96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e9a:	89 d1                	mov    ecx,edx
c0015e9c:	83 e1 0f             	and    ecx,0xf
c0015e9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ea3:	c1 e2 04             	shl    edx,0x4
c0015ea6:	81 e2 ff 00 00 00    	and    edx,0xff
c0015eac:	09 ca                	or     edx,ecx
c0015eae:	c1 e2 08             	shl    edx,0x8
c0015eb1:	09 d0                	or     eax,edx
c0015eb3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015eb8:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015ec0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ec4:	89 d0                	mov    eax,edx
c0015ec6:	c1 e0 02             	shl    eax,0x2
c0015ec9:	01 d0                	add    eax,edx
c0015ecb:	c1 e0 04             	shl    eax,0x4
c0015ece:	89 c2                	mov    edx,eax
c0015ed0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ed4:	01 d0                	add    eax,edx
c0015ed6:	01 c0                	add    eax,eax
c0015ed8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015edc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ee0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015ee5:	66 89 02             	mov    WORD PTR [edx],ax
c0015ee8:	90                   	nop
c0015ee9:	83 c4 14             	add    esp,0x14
c0015eec:	c3                   	ret    
c0015eed:	8d 76 00             	lea    esi,[esi+0x0]

c0015ef0 <HalConsoleCursorUpdate(int, int)>:
c0015ef0:	83 ec 20             	sub    esp,0x20
c0015ef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ef7:	89 c2                	mov    edx,eax
c0015ef9:	89 d0                	mov    eax,edx
c0015efb:	c1 e0 02             	shl    eax,0x2
c0015efe:	01 d0                	add    eax,edx
c0015f00:	c1 e0 04             	shl    eax,0x4
c0015f03:	89 c2                	mov    edx,eax
c0015f05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f09:	01 d0                	add    eax,edx
c0015f0b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015f10:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f17:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f1c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f24:	ee                   	out    dx,al
c0015f25:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f2a:	25 ff 00 00 00       	and    eax,0xff
c0015f2f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015f36:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015f3a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015f3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015f42:	ee                   	out    dx,al
c0015f43:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015f4a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f4f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f57:	ee                   	out    dx,al
c0015f58:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f5d:	66 c1 e8 08          	shr    ax,0x8
c0015f61:	25 ff 00 00 00       	and    eax,0xff
c0015f66:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015f6d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f71:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015f75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f79:	ee                   	out    dx,al
c0015f7a:	90                   	nop
c0015f7b:	83 c4 20             	add    esp,0x20
c0015f7e:	c3                   	ret    
c0015f7f:	90                   	nop

c0015f80 <FAT::getName()>:
c0015f80:	b8 80 e9 01 c0       	mov    eax,0xc001e980
c0015f85:	c3                   	ret    
c0015f86:	66 90                	xchg   ax,ax

c0015f88 <FAT::tell(void*, unsigned long long*)>:
c0015f88:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f8d:	75 09                	jne    c0015f98 <FAT::tell(void*, unsigned long long*)+0x10>
c0015f8f:	b8 04 00 00 00       	mov    eax,0x4
c0015f94:	c3                   	ret    
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]
c0015f98:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f9d:	75 09                	jne    c0015fa8 <FAT::tell(void*, unsigned long long*)+0x20>
c0015f9f:	b8 04 00 00 00       	mov    eax,0x4
c0015fa4:	c3                   	ret    
c0015fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015faf:	ba 00 00 00 00       	mov    edx,0x0
c0015fb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fb8:	89 01                	mov    DWORD PTR [ecx],eax
c0015fba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015fbd:	b8 00 00 00 00       	mov    eax,0x0
c0015fc2:	c3                   	ret    
c0015fc3:	90                   	nop

c0015fc4 <FAT::stat(void*, unsigned long long*)>:
c0015fc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015fc9:	75 09                	jne    c0015fd4 <FAT::stat(void*, unsigned long long*)+0x10>
c0015fcb:	b8 04 00 00 00       	mov    eax,0x4
c0015fd0:	c3                   	ret    
c0015fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fd4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015fd9:	75 09                	jne    c0015fe4 <FAT::stat(void*, unsigned long long*)+0x20>
c0015fdb:	b8 04 00 00 00       	mov    eax,0x4
c0015fe0:	c3                   	ret    
c0015fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015feb:	ba 00 00 00 00       	mov    edx,0x0
c0015ff0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ff4:	89 01                	mov    DWORD PTR [ecx],eax
c0015ff6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015ff9:	b8 00 00 00 00       	mov    eax,0x0
c0015ffe:	c3                   	ret    
c0015fff:	90                   	nop

c0016000 <FAT::~FAT()>:
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0016008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600c:	89 10                	mov    DWORD PTR [eax],edx
c001600e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016012:	83 ec 0c             	sub    esp,0xc
c0016015:	50                   	push   eax
c0016016:	e8 b3 47 ff ff       	call   c000a7ce <Filesystem::~Filesystem()>
c001601b:	83 c4 10             	add    esp,0x10
c001601e:	90                   	nop
c001601f:	83 c4 0c             	add    esp,0xc
c0016022:	c3                   	ret    
c0016023:	90                   	nop

c0016024 <FAT::~FAT()>:
c0016024:	83 ec 0c             	sub    esp,0xc
c0016027:	83 ec 0c             	sub    esp,0xc
c001602a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001602e:	e8 cd ff ff ff       	call   c0016000 <FAT::~FAT()>
c0016033:	83 c4 10             	add    esp,0x10
c0016036:	83 ec 08             	sub    esp,0x8
c0016039:	6a 08                	push   0x8
c001603b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603f:	e8 4e 43 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c0016044:	83 c4 10             	add    esp,0x10
c0016047:	83 c4 0c             	add    esp,0xc
c001604a:	c3                   	ret    
c001604b:	90                   	nop

c001604c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001604c:	83 ec 1c             	sub    esp,0x1c
c001604f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016056:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001605b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001605f:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c0016066:	83 f8 ff             	cmp    eax,0xffffffff
c0016069:	75 35                	jne    c00160a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001606b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001606f:	88 c2                	mov    dl,al
c0016071:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016076:	01 d0                	add    eax,edx
c0016078:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001607c:	8b 15 c0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c0
c0016082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016086:	89 14 85 e0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc820],edx
c001608d:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016092:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016096:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c001609d:	eb 19                	jmp    c00160b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001609f:	90                   	nop
c00160a0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160a4:	88 c2                	mov    dl,al
c00160a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160aa:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c00160b1:	01 d0                	add    eax,edx
c00160b3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160b7:	90                   	nop
c00160b8:	83 ec 04             	sub    esp,0x4
c00160bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160c3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00160c7:	50                   	push   eax
c00160c8:	e8 87 ed fe ff       	call   c0004e54 <f_getlabel>
c00160cd:	83 c4 10             	add    esp,0x10
c00160d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160d9:	75 09                	jne    c00160e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00160db:	b8 00 00 00 00       	mov    eax,0x0
c00160e0:	eb 0a                	jmp    c00160ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00160e2:	66 90                	xchg   ax,ax
c00160e4:	b8 01 00 00 00       	mov    eax,0x1
c00160e9:	8d 76 00             	lea    esi,[esi+0x0]
c00160ec:	83 c4 1c             	add    esp,0x1c
c00160ef:	c3                   	ret    

c00160f0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00160f0:	57                   	push   edi
c00160f1:	83 ec 58             	sub    esp,0x58
c00160f4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00160fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016100:	b8 00 00 00 00       	mov    eax,0x0
c0016105:	b9 0f 00 00 00       	mov    ecx,0xf
c001610a:	fc                   	cld    
c001610b:	89 d7                	mov    edi,edx
c001610d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001610f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016113:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c001611a:	83 f8 ff             	cmp    eax,0xffffffff
c001611d:	75 35                	jne    c0016154 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001611f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016123:	88 c2                	mov    dl,al
c0016125:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c001612a:	01 d0                	add    eax,edx
c001612c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016130:	8b 15 c0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c0
c0016136:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001613a:	89 14 85 e0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc820],edx
c0016141:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016146:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001614a:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c0016151:	eb 19                	jmp    c001616c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016153:	90                   	nop
c0016154:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016158:	88 c2                	mov    dl,al
c001615a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001615e:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c0016165:	01 d0                	add    eax,edx
c0016167:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001616b:	90                   	nop
c001616c:	83 ec 08             	sub    esp,0x8
c001616f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016173:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016177:	50                   	push   eax
c0016178:	e8 43 a6 fe ff       	call   c00007c0 <strcat>
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	83 ec 0c             	sub    esp,0xc
c0016183:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016187:	50                   	push   eax
c0016188:	e8 18 ee fe ff       	call   c0004fa5 <f_setlabel>
c001618d:	83 c4 10             	add    esp,0x10
c0016190:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016194:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016199:	75 09                	jne    c00161a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001619b:	b8 00 00 00 00       	mov    eax,0x0
c00161a0:	eb 0a                	jmp    c00161ac <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00161a2:	66 90                	xchg   ax,ax
c00161a4:	b8 01 00 00 00       	mov    eax,0x1
c00161a9:	8d 76 00             	lea    esi,[esi+0x0]
c00161ac:	83 c4 58             	add    esp,0x58
c00161af:	5f                   	pop    edi
c00161b0:	c3                   	ret    
c00161b1:	90                   	nop
c00161b2:	66 90                	xchg   ax,ax

c00161b4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00161b4:	83 ec 2c             	sub    esp,0x2c
c00161b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00161bf:	83 ec 08             	sub    esp,0x8
c00161c2:	68 a4 e9 01 c0       	push   0xc001e9a4
c00161c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161cb:	e8 10 a5 fe ff       	call   c00006e0 <strcmp>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	85 c0                	test   eax,eax
c00161d5:	0f 94 c0             	sete   al
c00161d8:	84 c0                	test   al,al
c00161da:	74 10                	je     c00161ec <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00161dc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161e4:	e9 b3 00 00 00       	jmp    c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161e9:	8d 76 00             	lea    esi,[esi+0x0]
c00161ec:	83 ec 08             	sub    esp,0x8
c00161ef:	68 96 e9 01 c0       	push   0xc001e996
c00161f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161f8:	e8 e3 a4 fe ff       	call   c00006e0 <strcmp>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	85 c0                	test   eax,eax
c0016202:	0f 94 c0             	sete   al
c0016205:	84 c0                	test   al,al
c0016207:	74 0f                	je     c0016218 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016209:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016211:	e9 86 00 00 00       	jmp    c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016216:	66 90                	xchg   ax,ax
c0016218:	83 ec 08             	sub    esp,0x8
c001621b:	68 9c e9 01 c0       	push   0xc001e99c
c0016220:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016224:	e8 b7 a4 fe ff       	call   c00006e0 <strcmp>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	85 c0                	test   eax,eax
c001622e:	0f 94 c0             	sete   al
c0016231:	84 c0                	test   al,al
c0016233:	74 0b                	je     c0016240 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016235:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001623d:	eb 5d                	jmp    c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001623f:	90                   	nop
c0016240:	83 ec 08             	sub    esp,0x8
c0016243:	68 fc c9 01 c0       	push   0xc001c9fc
c0016248:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001624c:	e8 8f a4 fe ff       	call   c00006e0 <strcmp>
c0016251:	83 c4 10             	add    esp,0x10
c0016254:	85 c0                	test   eax,eax
c0016256:	0f 94 c0             	sete   al
c0016259:	84 c0                	test   al,al
c001625b:	74 0b                	je     c0016268 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001625d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016265:	eb 35                	jmp    c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016267:	90                   	nop
c0016268:	83 ec 08             	sub    esp,0x8
c001626b:	68 a2 e9 01 c0       	push   0xc001e9a2
c0016270:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016274:	e8 67 a4 fe ff       	call   c00006e0 <strcmp>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	85 c0                	test   eax,eax
c001627e:	0f 94 c0             	sete   al
c0016281:	84 c0                	test   al,al
c0016283:	74 0b                	je     c0016290 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016285:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001628d:	eb 0d                	jmp    c001629c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001628f:	90                   	nop
c0016290:	b8 08 00 00 00       	mov    eax,0x8
c0016295:	e9 ea 00 00 00       	jmp    c0016384 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001629a:	66 90                	xchg   ax,ax
c001629c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00162a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00162a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162ac:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c00162b3:	83 f8 ff             	cmp    eax,0xffffffff
c00162b6:	75 34                	jne    c00162ec <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00162b8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162bc:	88 c2                	mov    dl,al
c00162be:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c00162c3:	01 d0                	add    eax,edx
c00162c5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162c9:	8b 15 c0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c0
c00162cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162d3:	89 14 85 e0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc820],edx
c00162da:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c00162df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00162e3:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00162ea:	eb 18                	jmp    c0016304 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00162ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162f0:	88 c2                	mov    dl,al
c00162f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162f6:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c00162fd:	01 d0                	add    eax,edx
c00162ff:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016303:	90                   	nop
c0016304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016308:	88 04 24             	mov    BYTE PTR [esp],al
c001630b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001630f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016313:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001631b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016320:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	68 00 20 00 00       	push   0x2000
c0016330:	e8 84 14 ff ff       	call   c00077b9 <malloc>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001633c:	68 00 20 00 00       	push   0x2000
c0016341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016345:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016349:	50                   	push   eax
c001634a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001634e:	50                   	push   eax
c001634f:	e8 41 ef fe ff       	call   c0005295 <f_mkfs>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001635b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016360:	75 0a                	jne    c001636c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016362:	b8 00 00 00 00       	mov    eax,0x0
c0016367:	eb 1b                	jmp    c0016384 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016369:	8d 76 00             	lea    esi,[esi+0x0]
c001636c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016371:	75 09                	jne    c001637c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016373:	b8 09 00 00 00       	mov    eax,0x9
c0016378:	eb 0a                	jmp    c0016384 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001637a:	66 90                	xchg   ax,ax
c001637c:	b8 01 00 00 00       	mov    eax,0x1
c0016381:	8d 76 00             	lea    esi,[esi+0x0]
c0016384:	83 c4 2c             	add    esp,0x2c
c0016387:	c3                   	ret    

c0016388 <FAT::tryMount(LogicalDisk*, int)>:
c0016388:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001638e:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016393:	83 f8 14             	cmp    eax,0x14
c0016396:	75 18                	jne    c00163b0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	68 a8 e9 01 c0       	push   0xc001e9a8
c00163a0:	e8 5e 9d ff ff       	call   c0010103 <KePanic(char const*)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	b0 00                	mov    al,0x0
c00163aa:	e9 e9 01 00 00       	jmp    c0016598 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163af:	90                   	nop
c00163b0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00163b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00163bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00163c3:	3d 00 02 00 00       	cmp    eax,0x200
c00163c8:	74 0a                	je     c00163d4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00163ca:	b0 00                	mov    al,0x0
c00163cc:	e9 c7 01 00 00       	jmp    c0016598 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163d1:	8d 76 00             	lea    esi,[esi+0x0]
c00163d4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00163dc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00163e3:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c00163ea:	83 f8 ff             	cmp    eax,0xffffffff
c00163ed:	74 09                	je     c00163f8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00163ef:	b0 01                	mov    al,0x1
c00163f1:	e9 a2 01 00 00       	jmp    c0016598 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163f6:	66 90                	xchg   ax,ax
c00163f8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016402:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001640a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016411:	88 c2                	mov    dl,al
c0016413:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016418:	01 d0                	add    eax,edx
c001641a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016421:	8b 15 c0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237c0
c0016427:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001642e:	89 14 85 e0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc820],edx
c0016435:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c001643a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016441:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	68 34 02 00 00       	push   0x234
c0016450:	e8 64 13 ff ff       	call   c00077b9 <malloc>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001645f:	83 ec 04             	sub    esp,0x4
c0016462:	6a 00                	push   0x0
c0016464:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001646b:	50                   	push   eax
c001646c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016473:	e8 43 d6 fe ff       	call   c0003abb <f_mount>
c0016478:	83 c4 10             	add    esp,0x10
c001647b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016482:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001648a:	74 1c                	je     c00164a8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016496:	e8 3e 13 ff ff       	call   c00077d9 <rfree>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	b0 00                	mov    al,0x0
c00164a0:	e9 f3 00 00 00       	jmp    c0016598 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00164a5:	8d 76 00             	lea    esi,[esi+0x0]
c00164a8:	83 ec 04             	sub    esp,0x4
c00164ab:	68 00 01 00 00       	push   0x100
c00164b0:	6a 00                	push   0x0
c00164b2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164b9:	50                   	push   eax
c00164ba:	e8 11 a0 fe ff       	call   c00004d0 <memset>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	83 ec 08             	sub    esp,0x8
c00164c5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00164cc:	50                   	push   eax
c00164cd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164d4:	50                   	push   eax
c00164d5:	e8 e6 a2 fe ff       	call   c00007c0 <strcat>
c00164da:	83 c4 10             	add    esp,0x10
c00164dd:	83 ec 08             	sub    esp,0x8
c00164e0:	68 b6 e9 01 c0       	push   0xc001e9b6
c00164e5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164ec:	50                   	push   eax
c00164ed:	e8 ce a2 fe ff       	call   c00007c0 <strcat>
c00164f2:	83 c4 10             	add    esp,0x10
c00164f5:	83 ec 04             	sub    esp,0x4
c00164f8:	6a 01                	push   0x1
c00164fa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016501:	50                   	push   eax
c0016502:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016506:	50                   	push   eax
c0016507:	e8 11 d6 fe ff       	call   c0003b1d <f_open>
c001650c:	83 c4 10             	add    esp,0x10
c001650f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016516:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001651d:	85 c0                	test   eax,eax
c001651f:	74 0b                	je     c001652c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016521:	78 31                	js     c0016554 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016523:	83 e8 04             	sub    eax,0x4
c0016526:	83 f8 01             	cmp    eax,0x1
c0016529:	77 29                	ja     c0016554 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001652b:	90                   	nop
c001652c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	8d 44 24 14          	lea    eax,[esp+0x14]
c001653b:	50                   	push   eax
c001653c:	e8 8f dd fe ff       	call   c00042d0 <f_close>
c0016541:	83 c4 10             	add    esp,0x10
c0016544:	90                   	nop
c0016545:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c001654d:	74 41                	je     c0016590 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001654f:	eb 33                	jmp    c0016584 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016551:	8d 76 00             	lea    esi,[esi+0x0]
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001655e:	e8 76 12 ff ff       	call   c00077d9 <rfree>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	83 ec 04             	sub    esp,0x4
c0016569:	6a 00                	push   0x0
c001656b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016572:	50                   	push   eax
c0016573:	6a 00                	push   0x0
c0016575:	e8 41 d5 fe ff       	call   c0003abb <f_mount>
c001657a:	83 c4 10             	add    esp,0x10
c001657d:	b0 00                	mov    al,0x0
c001657f:	eb 17                	jmp    c0016598 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016581:	8d 76 00             	lea    esi,[esi+0x0]
c0016584:	a1 c0 37 02 c0       	mov    eax,ds:0xc00237c0
c0016589:	40                   	inc    eax
c001658a:	a3 c0 37 02 c0       	mov    ds:0xc00237c0,eax
c001658f:	90                   	nop
c0016590:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016597:	90                   	nop
c0016598:	81 c4 4c 03 00 00    	add    esp,0x34c
c001659e:	c3                   	ret    
c001659f:	90                   	nop

c00165a0 <FAT::allocateSwapfile(char const*, int)>:
c00165a0:	55                   	push   ebp
c00165a1:	57                   	push   edi
c00165a2:	56                   	push   esi
c00165a3:	53                   	push   ebx
c00165a4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00165aa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00165b5:	83 ec 0c             	sub    esp,0xc
c00165b8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00165bf:	e8 f5 11 ff ff       	call   c00077b9 <malloc>
c00165c4:	83 c4 10             	add    esp,0x10
c00165c7:	89 c7                	mov    edi,eax
c00165c9:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c00165ce:	83 ec 04             	sub    esp,0x4
c00165d1:	50                   	push   eax
c00165d2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00165d9:	57                   	push   edi
c00165da:	e8 1f 44 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00165e9:	83 ec 04             	sub    esp,0x4
c00165ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c00165f0:	50                   	push   eax
c00165f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165f5:	50                   	push   eax
c00165f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00165fd:	e8 68 47 ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001660c:	c1 e0 14             	shl    eax,0x14
c001660f:	89 c7                	mov    edi,eax
c0016611:	89 c5                	mov    ebp,eax
c0016613:	c1 fd 1f             	sar    ebp,0x1f
c0016616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001661a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001661e:	89 f9                	mov    ecx,edi
c0016620:	31 c1                	xor    ecx,eax
c0016622:	89 cb                	mov    ebx,ecx
c0016624:	89 e9                	mov    ecx,ebp
c0016626:	31 d1                	xor    ecx,edx
c0016628:	89 ce                	mov    esi,ecx
c001662a:	89 f0                	mov    eax,esi
c001662c:	09 d8                	or     eax,ebx
c001662e:	0f 84 9c 00 00 00    	je     c00166d0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001663e:	e8 f3 45 ff ff       	call   c000ac36 <File::unlink()>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	83 ec 08             	sub    esp,0x8
c0016649:	6a 12                	push   0x12
c001664b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016652:	e8 67 44 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016661:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016667:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001666e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016675:	c1 e0 14             	shl    eax,0x14
c0016678:	83 ec 04             	sub    esp,0x4
c001667b:	6a 01                	push   0x1
c001667d:	50                   	push   eax
c001667e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016685:	e8 ab ea fe ff       	call   c0005135 <f_expand>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016694:	8b 00                	mov    eax,DWORD PTR [eax]
c0016696:	83 c0 10             	add    eax,0x10
c0016699:	8b 00                	mov    eax,DWORD PTR [eax]
c001669b:	83 ec 0c             	sub    esp,0xc
c001669e:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166a2:	52                   	push   edx
c00166a3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00166a7:	52                   	push   edx
c00166a8:	6a 00                	push   0x0
c00166aa:	68 00 04 00 00       	push   0x400
c00166af:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166b6:	ff d0                	call   eax
c00166b8:	83 c4 20             	add    esp,0x20
c00166bb:	83 ec 0c             	sub    esp,0xc
c00166be:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166c5:	e8 52 44 ff ff       	call   c000ab1c <File::close()>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	8d 76 00             	lea    esi,[esi+0x0]
c00166d0:	83 ec 08             	sub    esp,0x8
c00166d3:	6a 01                	push   0x1
c00166d5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166dc:	e8 dd 43 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00166ed:	83 c0 0c             	add    eax,0xc
c00166f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00166f2:	83 ec 0c             	sub    esp,0xc
c00166f5:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166f9:	52                   	push   edx
c00166fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00166fe:	52                   	push   edx
c00166ff:	6a 00                	push   0x0
c0016701:	6a 04                	push   0x4
c0016703:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001670a:	ff d0                	call   eax
c001670c:	83 c4 20             	add    esp,0x20
c001670f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016716:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001671c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016723:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001672a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001672d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016734:	83 ec 0c             	sub    esp,0xc
c0016737:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001673e:	e8 d9 43 ff ff       	call   c000ab1c <File::close()>
c0016743:	83 c4 10             	add    esp,0x10
c0016746:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001674d:	ba 00 00 00 00       	mov    edx,0x0
c0016752:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016758:	5b                   	pop    ebx
c0016759:	5e                   	pop    esi
c001675a:	5f                   	pop    edi
c001675b:	5d                   	pop    ebp
c001675c:	c3                   	ret    
c001675d:	90                   	nop
c001675e:	66 90                	xchg   ax,ax

c0016760 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016760:	57                   	push   edi
c0016761:	56                   	push   esi
c0016762:	53                   	push   ebx
c0016763:	81 ec 50 02 00 00    	sub    esp,0x250
c0016769:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016771:	74 0d                	je     c0016780 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016773:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001677b:	75 0f                	jne    c001678c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001677d:	8d 76 00             	lea    esi,[esi+0x0]
c0016780:	b8 04 00 00 00       	mov    eax,0x4
c0016785:	e9 36 01 00 00       	jmp    c00168c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001678a:	66 90                	xchg   ax,ax
c001678c:	83 ec 08             	sub    esp,0x8
c001678f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016796:	50                   	push   eax
c0016797:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001679e:	e8 f0 dd fe ff       	call   c0004593 <f_readdir>
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00167ad:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00167be:	83 c0 16             	add    eax,0x16
c00167c1:	50                   	push   eax
c00167c2:	e8 79 9d fe ff       	call   c0000540 <strlen>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	ba 00 00 00 00       	mov    edx,0x0
c00167cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00167d7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00167de:	25 ff 00 00 00       	and    eax,0xff
c00167e3:	83 e0 10             	and    eax,0x10
c00167e6:	74 08                	je     c00167f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00167e8:	b8 02 00 00 00       	mov    eax,0x2
c00167ed:	eb 09                	jmp    c00167f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00167ef:	90                   	nop
c00167f0:	b8 01 00 00 00       	mov    eax,0x1
c00167f5:	8d 76 00             	lea    esi,[esi+0x0]
c00167f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167fc:	83 ec 08             	sub    esp,0x8
c00167ff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016806:	83 c0 16             	add    eax,0x16
c0016809:	50                   	push   eax
c001680a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001680e:	83 c0 10             	add    eax,0x10
c0016811:	50                   	push   eax
c0016812:	e8 e9 9d fe ff       	call   c0000600 <strcpy>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016821:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016828:	8d 44 24 08          	lea    eax,[esp+0x8]
c001682c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016833:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001683a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016841:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016848:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001684f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016856:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001685d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016864:	89 c6                	mov    esi,eax
c0016866:	89 d7                	mov    edi,edx
c0016868:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001686a:	89 c8                	mov    eax,ecx
c001686c:	89 fa                	mov    edx,edi
c001686e:	89 f3                	mov    ebx,esi
c0016870:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016877:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001687e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016885:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001688c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016892:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016899:	84 c0                	test   al,al
c001689b:	75 07                	jne    c00168a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001689d:	b8 07 00 00 00       	mov    eax,0x7
c00168a2:	eb 1c                	jmp    c00168c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168a4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00168ab:	85 c0                	test   eax,eax
c00168ad:	75 09                	jne    c00168b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c00168af:	b8 00 00 00 00       	mov    eax,0x0
c00168b4:	eb 0a                	jmp    c00168c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168b6:	66 90                	xchg   ax,ax
c00168b8:	b8 01 00 00 00       	mov    eax,0x1
c00168bd:	8d 76 00             	lea    esi,[esi+0x0]
c00168c0:	81 c4 50 02 00 00    	add    esp,0x250
c00168c6:	5b                   	pop    ebx
c00168c7:	5e                   	pop    esi
c00168c8:	5f                   	pop    edi
c00168c9:	c3                   	ret    
c00168ca:	66 90                	xchg   ax,ax

c00168cc <FAT::read(void*, unsigned long, void*, int*)>:
c00168cc:	83 ec 1c             	sub    esp,0x1c
c00168cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00168d4:	74 0a                	je     c00168e0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00168d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00168db:	75 0b                	jne    c00168e8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]
c00168e0:	b8 04 00 00 00       	mov    eax,0x4
c00168e5:	eb 41                	jmp    c0016928 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00168e7:	90                   	nop
c00168e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168ec:	50                   	push   eax
c00168ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168f9:	e8 ea d4 fe ff       	call   c0003de8 <f_read>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016905:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016909:	89 c2                	mov    edx,eax
c001690b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001690f:	89 10                	mov    DWORD PTR [eax],edx
c0016911:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016915:	85 c0                	test   eax,eax
c0016917:	75 07                	jne    c0016920 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016919:	b8 00 00 00 00       	mov    eax,0x0
c001691e:	eb 08                	jmp    c0016928 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016920:	b8 01 00 00 00       	mov    eax,0x1
c0016925:	8d 76 00             	lea    esi,[esi+0x0]
c0016928:	83 c4 1c             	add    esp,0x1c
c001692b:	c3                   	ret    

c001692c <FAT::write(void*, unsigned long, void*, int*)>:
c001692c:	83 ec 1c             	sub    esp,0x1c
c001692f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016934:	74 0a                	je     c0016940 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016936:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001693b:	75 0b                	jne    c0016948 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001693d:	8d 76 00             	lea    esi,[esi+0x0]
c0016940:	b8 04 00 00 00       	mov    eax,0x4
c0016945:	eb 41                	jmp    c0016988 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016947:	90                   	nop
c0016948:	8d 44 24 08          	lea    eax,[esp+0x8]
c001694c:	50                   	push   eax
c001694d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016951:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016955:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016959:	e8 89 d6 fe ff       	call   c0003fe7 <f_write>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016969:	89 c2                	mov    edx,eax
c001696b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001696f:	89 10                	mov    DWORD PTR [eax],edx
c0016971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016975:	85 c0                	test   eax,eax
c0016977:	75 07                	jne    c0016980 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016979:	b8 00 00 00 00       	mov    eax,0x0
c001697e:	eb 08                	jmp    c0016988 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016980:	b8 01 00 00 00       	mov    eax,0x1
c0016985:	8d 76 00             	lea    esi,[esi+0x0]
c0016988:	83 c4 1c             	add    esp,0x1c
c001698b:	c3                   	ret    

c001698c <FAT::close(void*)>:
c001698c:	83 ec 1c             	sub    esp,0x1c
c001698f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016994:	75 0a                	jne    c00169a0 <FAT::close(void*)+0x14>
c0016996:	b8 04 00 00 00       	mov    eax,0x4
c001699b:	eb 3f                	jmp    c00169dc <FAT::close(void*)+0x50>
c001699d:	8d 76 00             	lea    esi,[esi+0x0]
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169a7:	e8 24 d9 fe ff       	call   c00042d0 <f_close>
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169b3:	83 ec 0c             	sub    esp,0xc
c00169b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169ba:	e8 0a 0e ff ff       	call   c00077c9 <free>
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169c6:	85 c0                	test   eax,eax
c00169c8:	75 0a                	jne    c00169d4 <FAT::close(void*)+0x48>
c00169ca:	b8 00 00 00 00       	mov    eax,0x0
c00169cf:	eb 0b                	jmp    c00169dc <FAT::close(void*)+0x50>
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	b8 01 00 00 00       	mov    eax,0x1
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	83 c4 1c             	add    esp,0x1c
c00169df:	c3                   	ret    

c00169e0 <FAT::closeDir(void*)>:
c00169e0:	83 ec 1c             	sub    esp,0x1c
c00169e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169e8:	75 0a                	jne    c00169f4 <FAT::closeDir(void*)+0x14>
c00169ea:	b8 04 00 00 00       	mov    eax,0x4
c00169ef:	eb 3f                	jmp    c0016a30 <FAT::closeDir(void*)+0x50>
c00169f1:	8d 76 00             	lea    esi,[esi+0x0]
c00169f4:	83 ec 0c             	sub    esp,0xc
c00169f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169fb:	e8 71 db fe ff       	call   c0004571 <f_closedir>
c0016a00:	83 c4 10             	add    esp,0x10
c0016a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a07:	83 ec 0c             	sub    esp,0xc
c0016a0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a0e:	e8 b6 0d ff ff       	call   c00077c9 <free>
c0016a13:	83 c4 10             	add    esp,0x10
c0016a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1a:	85 c0                	test   eax,eax
c0016a1c:	75 0a                	jne    c0016a28 <FAT::closeDir(void*)+0x48>
c0016a1e:	b8 00 00 00 00       	mov    eax,0x0
c0016a23:	eb 0b                	jmp    c0016a30 <FAT::closeDir(void*)+0x50>
c0016a25:	8d 76 00             	lea    esi,[esi+0x0]
c0016a28:	b8 01 00 00 00       	mov    eax,0x1
c0016a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a30:	83 c4 1c             	add    esp,0x1c
c0016a33:	c3                   	ret    

c0016a34 <FAT::seek(void*, unsigned long long)>:
c0016a34:	83 ec 2c             	sub    esp,0x2c
c0016a37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016a3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a47:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a4c:	75 0a                	jne    c0016a58 <FAT::seek(void*, unsigned long long)+0x24>
c0016a4e:	b8 04 00 00 00       	mov    eax,0x4
c0016a53:	eb 33                	jmp    c0016a88 <FAT::seek(void*, unsigned long long)+0x54>
c0016a55:	8d 76 00             	lea    esi,[esi+0x0]
c0016a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a5c:	83 ec 08             	sub    esp,0x8
c0016a5f:	50                   	push   eax
c0016a60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a64:	e8 96 d8 fe ff       	call   c00042ff <f_lseek>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a74:	85 c0                	test   eax,eax
c0016a76:	75 08                	jne    c0016a80 <FAT::seek(void*, unsigned long long)+0x4c>
c0016a78:	b8 00 00 00 00       	mov    eax,0x0
c0016a7d:	eb 09                	jmp    c0016a88 <FAT::seek(void*, unsigned long long)+0x54>
c0016a7f:	90                   	nop
c0016a80:	b8 01 00 00 00       	mov    eax,0x1
c0016a85:	8d 76 00             	lea    esi,[esi+0x0]
c0016a88:	83 c4 2c             	add    esp,0x2c
c0016a8b:	c3                   	ret    

c0016a8c <fatWrapperReadDisk>:
c0016a8c:	53                   	push   ebx
c0016a8d:	83 ec 18             	sub    esp,0x18
c0016a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a98:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016a9c:	25 ff 00 00 00       	and    eax,0xff
c0016aa1:	8b 0c 85 c0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd640]
c0016aa8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016aac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ab0:	ba 00 00 00 00       	mov    edx,0x0
c0016ab5:	83 ec 0c             	sub    esp,0xc
c0016ab8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016abc:	53                   	push   ebx
c0016abd:	52                   	push   edx
c0016abe:	50                   	push   eax
c0016abf:	51                   	push   ecx
c0016ac0:	e8 c1 60 ff ff       	call   c000cb86 <LogicalDisk::read(unsigned long long, int, void*)>
c0016ac5:	83 c4 20             	add    esp,0x20
c0016ac8:	83 c4 18             	add    esp,0x18
c0016acb:	5b                   	pop    ebx
c0016acc:	c3                   	ret    
c0016acd:	8d 76 00             	lea    esi,[esi+0x0]

c0016ad0 <fatWrapperWriteDisk>:
c0016ad0:	53                   	push   ebx
c0016ad1:	83 ec 18             	sub    esp,0x18
c0016ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016adc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ae0:	25 ff 00 00 00       	and    eax,0xff
c0016ae5:	8b 0c 85 c0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd640]
c0016aec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016af0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016af4:	ba 00 00 00 00       	mov    edx,0x0
c0016af9:	83 ec 0c             	sub    esp,0xc
c0016afc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b00:	53                   	push   ebx
c0016b01:	52                   	push   edx
c0016b02:	50                   	push   eax
c0016b03:	51                   	push   ecx
c0016b04:	e8 e9 60 ff ff       	call   c000cbf2 <LogicalDisk::write(unsigned long long, int, void*)>
c0016b09:	83 c4 20             	add    esp,0x20
c0016b0c:	83 c4 18             	add    esp,0x18
c0016b0f:	5b                   	pop    ebx
c0016b10:	c3                   	ret    
c0016b11:	8d 76 00             	lea    esi,[esi+0x0]

c0016b14 <fatWrapperIoctl>:
c0016b14:	53                   	push   ebx
c0016b15:	83 ec 28             	sub    esp,0x28
c0016b18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b20:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016b24:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016b28:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016b2d:	75 35                	jne    c0016b64 <fatWrapperIoctl+0x50>
c0016b2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b3b:	25 ff 00 00 00       	and    eax,0xff
c0016b40:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0016b47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b57:	66 89 02             	mov    WORD PTR [edx],ax
c0016b5a:	b8 00 00 00 00       	mov    eax,0x0
c0016b5f:	e9 c4 00 00 00       	jmp    c0016c28 <fatWrapperIoctl+0x114>
c0016b64:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016b69:	75 75                	jne    c0016be0 <fatWrapperIoctl+0xcc>
c0016b6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b73:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b77:	25 ff 00 00 00       	and    eax,0xff
c0016b7c:	8b 04 85 c0 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd640]
c0016b83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b89:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016b8f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016b95:	89 c8                	mov    eax,ecx
c0016b97:	89 da                	mov    edx,ebx
c0016b99:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b9d:	c1 e0 0a             	shl    eax,0xa
c0016ba0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016ba4:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016baa:	8b 0c 8d c0 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd640]
c0016bb1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016bb7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016bbd:	89 cb                	mov    ebx,ecx
c0016bbf:	c1 fb 1f             	sar    ebx,0x1f
c0016bc2:	53                   	push   ebx
c0016bc3:	51                   	push   ecx
c0016bc4:	52                   	push   edx
c0016bc5:	50                   	push   eax
c0016bc6:	e8 45 50 00 00       	call   c001bc10 <__udivdi3>
c0016bcb:	83 c4 10             	add    esp,0x10
c0016bce:	89 c2                	mov    edx,eax
c0016bd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bd4:	89 10                	mov    DWORD PTR [eax],edx
c0016bd6:	b8 00 00 00 00       	mov    eax,0x0
c0016bdb:	eb 4b                	jmp    c0016c28 <fatWrapperIoctl+0x114>
c0016bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016be0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016be5:	75 09                	jne    c0016bf0 <fatWrapperIoctl+0xdc>
c0016be7:	b8 00 00 00 00       	mov    eax,0x0
c0016bec:	eb 3a                	jmp    c0016c28 <fatWrapperIoctl+0x114>
c0016bee:	66 90                	xchg   ax,ax
c0016bf0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016bf5:	75 19                	jne    c0016c10 <fatWrapperIoctl+0xfc>
c0016bf7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c03:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016c09:	b8 00 00 00 00       	mov    eax,0x0
c0016c0e:	eb 18                	jmp    c0016c28 <fatWrapperIoctl+0x114>
c0016c10:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c15:	75 09                	jne    c0016c20 <fatWrapperIoctl+0x10c>
c0016c17:	b8 00 00 00 00       	mov    eax,0x0
c0016c1c:	eb 0a                	jmp    c0016c28 <fatWrapperIoctl+0x114>
c0016c1e:	66 90                	xchg   ax,ax
c0016c20:	b8 04 00 00 00       	mov    eax,0x4
c0016c25:	8d 76 00             	lea    esi,[esi+0x0]
c0016c28:	83 c4 28             	add    esp,0x28
c0016c2b:	5b                   	pop    ebx
c0016c2c:	c3                   	ret    
c0016c2d:	90                   	nop
c0016c2e:	66 90                	xchg   ax,ax

c0016c30 <FAT::FAT()>:
c0016c30:	83 ec 1c             	sub    esp,0x1c
c0016c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c37:	83 ec 0c             	sub    esp,0xc
c0016c3a:	50                   	push   eax
c0016c3b:	e8 6a 3b ff ff       	call   c000a7aa <Filesystem::Filesystem()>
c0016c40:	83 c4 10             	add    esp,0x10
c0016c43:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0016c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4c:	89 10                	mov    DWORD PTR [eax],edx
c0016c4e:	c7 05 c0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237c0,0x0
c0016c58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c60:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c65:	7f 15                	jg     c0016c7c <FAT::FAT()+0x4c>
c0016c67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c6b:	c7 04 85 e0 37 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc820],0xffffffff
c0016c76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016c7a:	eb e4                	jmp    c0016c60 <FAT::FAT()+0x30>
c0016c7c:	90                   	nop
c0016c7d:	83 c4 1c             	add    esp,0x1c
c0016c80:	c3                   	ret    
c0016c81:	90                   	nop
c0016c82:	66 90                	xchg   ax,ax

c0016c84 <FAT::fixFilepath(char*)>:
c0016c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c88:	8a 00                	mov    al,BYTE PTR [eax]
c0016c8a:	3c 40                	cmp    al,0x40
c0016c8c:	7e 2e                	jle    c0016cbc <FAT::fixFilepath(char*)+0x38>
c0016c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c92:	8a 00                	mov    al,BYTE PTR [eax]
c0016c94:	83 e8 41             	sub    eax,0x41
c0016c97:	88 c2                	mov    dl,al
c0016c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c9d:	88 10                	mov    BYTE PTR [eax],dl
c0016c9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ca3:	8a 00                	mov    al,BYTE PTR [eax]
c0016ca5:	0f be c0             	movsx  eax,al
c0016ca8:	8b 04 85 e0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc820]
c0016caf:	83 c0 30             	add    eax,0x30
c0016cb2:	88 c2                	mov    dl,al
c0016cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cb8:	88 10                	mov    BYTE PTR [eax],dl
c0016cba:	66 90                	xchg   ax,ax
c0016cbc:	90                   	nop
c0016cbd:	c3                   	ret    
c0016cbe:	66 90                	xchg   ax,ax

c0016cc0 <FAT::open(char const*, void**, FileOpenMode)>:
c0016cc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016cc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016cce:	74 0c                	je     c0016cdc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016cd0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016cd8:	75 0e                	jne    c0016ce8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016cda:	66 90                	xchg   ax,ax
c0016cdc:	b8 04 00 00 00       	mov    eax,0x4
c0016ce1:	e9 0a 01 00 00       	jmp    c0016df0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016ce6:	66 90                	xchg   ax,ax
c0016ce8:	83 ec 08             	sub    esp,0x8
c0016ceb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cf6:	50                   	push   eax
c0016cf7:	e8 04 99 fe ff       	call   c0000600 <strcpy>
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	83 ec 08             	sub    esp,0x8
c0016d02:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d06:	50                   	push   eax
c0016d07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d0e:	e8 71 ff ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d25:	83 e0 01             	and    eax,0x1
c0016d28:	74 0a                	je     c0016d34 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016d2a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016d32:	66 90                	xchg   ax,ax
c0016d34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d3b:	83 e0 04             	and    eax,0x4
c0016d3e:	74 10                	je     c0016d50 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016d40:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016d48:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d57:	83 e0 02             	and    eax,0x2
c0016d5a:	74 08                	je     c0016d64 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d5c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d64:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d6b:	83 e0 08             	and    eax,0x8
c0016d6e:	74 08                	je     c0016d78 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016d70:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016d78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d7f:	83 e0 10             	and    eax,0x10
c0016d82:	74 08                	je     c0016d8c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016d84:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	68 28 02 00 00       	push   0x228
c0016d94:	e8 20 0a ff ff       	call   c00077b9 <malloc>
c0016d99:	83 c4 10             	add    esp,0x10
c0016d9c:	89 c2                	mov    edx,eax
c0016d9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016da5:	89 10                	mov    DWORD PTR [eax],edx
c0016da7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016dae:	31 d2                	xor    edx,edx
c0016db0:	88 c2                	mov    dl,al
c0016db2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dbb:	83 ec 04             	sub    esp,0x4
c0016dbe:	52                   	push   edx
c0016dbf:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016dc3:	52                   	push   edx
c0016dc4:	50                   	push   eax
c0016dc5:	e8 53 cd fe ff       	call   c0003b1d <f_open>
c0016dca:	83 c4 10             	add    esp,0x10
c0016dcd:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016dd4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016ddc:	74 0a                	je     c0016de8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016dde:	b8 01 00 00 00       	mov    eax,0x1
c0016de3:	eb 0b                	jmp    c0016df0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016de5:	8d 76 00             	lea    esi,[esi+0x0]
c0016de8:	b8 00 00 00 00       	mov    eax,0x0
c0016ded:	8d 76 00             	lea    esi,[esi+0x0]
c0016df0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016df6:	c3                   	ret    
c0016df7:	90                   	nop

c0016df8 <FAT::openDir(char const*, void**)>:
c0016df8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016dfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e06:	74 0c                	je     c0016e14 <FAT::openDir(char const*, void**)+0x1c>
c0016e08:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e10:	75 0e                	jne    c0016e20 <FAT::openDir(char const*, void**)+0x28>
c0016e12:	66 90                	xchg   ax,ax
c0016e14:	b8 04 00 00 00       	mov    eax,0x4
c0016e19:	e9 82 00 00 00       	jmp    c0016ea0 <FAT::openDir(char const*, void**)+0xa8>
c0016e1e:	66 90                	xchg   ax,ax
c0016e20:	83 ec 08             	sub    esp,0x8
c0016e23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e2e:	50                   	push   eax
c0016e2f:	e8 cc 97 fe ff       	call   c0000600 <strcpy>
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	83 ec 08             	sub    esp,0x8
c0016e3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e3e:	50                   	push   eax
c0016e3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e46:	e8 39 fe ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	6a 30                	push   0x30
c0016e53:	e8 61 09 ff ff       	call   c00077b9 <malloc>
c0016e58:	83 c4 10             	add    esp,0x10
c0016e5b:	89 c2                	mov    edx,eax
c0016e5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e64:	89 10                	mov    DWORD PTR [eax],edx
c0016e66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e6f:	83 ec 08             	sub    esp,0x8
c0016e72:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016e76:	52                   	push   edx
c0016e77:	50                   	push   eax
c0016e78:	e8 29 d6 fe ff       	call   c00044a6 <f_opendir>
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016e87:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016e8f:	74 07                	je     c0016e98 <FAT::openDir(char const*, void**)+0xa0>
c0016e91:	b8 01 00 00 00       	mov    eax,0x1
c0016e96:	eb 08                	jmp    c0016ea0 <FAT::openDir(char const*, void**)+0xa8>
c0016e98:	b8 00 00 00 00       	mov    eax,0x0
c0016e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ea0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016ea6:	c3                   	ret    
c0016ea7:	90                   	nop

c0016ea8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016ea8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016eae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016eb6:	75 0c                	jne    c0016ec4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016eb8:	b8 04 00 00 00       	mov    eax,0x4
c0016ebd:	e9 d6 00 00 00       	jmp    c0016f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ec2:	66 90                	xchg   ax,ax
c0016ec4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016ecc:	75 0a                	jne    c0016ed8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016ece:	b8 04 00 00 00       	mov    eax,0x4
c0016ed3:	e9 c0 00 00 00       	jmp    c0016f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ed8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016ee0:	75 0a                	jne    c0016eec <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016ee2:	b8 04 00 00 00       	mov    eax,0x4
c0016ee7:	e9 ac 00 00 00       	jmp    c0016f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016eec:	83 ec 08             	sub    esp,0x8
c0016eef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016ef6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016efd:	50                   	push   eax
c0016efe:	e8 fd 96 fe ff       	call   c0000600 <strcpy>
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	83 ec 08             	sub    esp,0x8
c0016f09:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f10:	50                   	push   eax
c0016f11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f18:	e8 67 fd ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0016f1d:	83 c4 10             	add    esp,0x10
c0016f20:	83 ec 08             	sub    esp,0x8
c0016f23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f27:	50                   	push   eax
c0016f28:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f2f:	50                   	push   eax
c0016f30:	e8 f0 d6 fe ff       	call   c0004625 <f_stat>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016f3f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016f46:	85 c0                	test   eax,eax
c0016f48:	74 0a                	je     c0016f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016f4a:	83 f8 04             	cmp    eax,0x4
c0016f4d:	74 39                	je     c0016f88 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f4f:	eb 3f                	jmp    c0016f90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f51:	8d 76 00             	lea    esi,[esi+0x0]
c0016f54:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f58:	25 ff 00 00 00       	and    eax,0xff
c0016f5d:	83 e0 10             	and    eax,0x10
c0016f60:	0f 95 c2             	setne  dl
c0016f63:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016f6a:	88 10                	mov    BYTE PTR [eax],dl
c0016f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f70:	ba 00 00 00 00       	mov    edx,0x0
c0016f75:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016f7c:	89 01                	mov    DWORD PTR [ecx],eax
c0016f7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f81:	b8 00 00 00 00       	mov    eax,0x0
c0016f86:	eb 10                	jmp    c0016f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f88:	b8 02 00 00 00       	mov    eax,0x2
c0016f8d:	eb 09                	jmp    c0016f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f8f:	90                   	nop
c0016f90:	b8 01 00 00 00       	mov    eax,0x1
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016f9e:	c3                   	ret    
c0016f9f:	90                   	nop

c0016fa0 <FAT::unlink(char const*)>:
c0016fa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016fa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016fae:	75 08                	jne    c0016fb8 <FAT::unlink(char const*)+0x18>
c0016fb0:	b8 04 00 00 00       	mov    eax,0x4
c0016fb5:	eb 61                	jmp    c0017018 <FAT::unlink(char const*)+0x78>
c0016fb7:	90                   	nop
c0016fb8:	83 ec 08             	sub    esp,0x8
c0016fbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fc6:	50                   	push   eax
c0016fc7:	e8 34 96 fe ff       	call   c0000600 <strcpy>
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	83 ec 08             	sub    esp,0x8
c0016fd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016fd6:	50                   	push   eax
c0016fd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016fde:	e8 a1 fc ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0016fe3:	83 c4 10             	add    esp,0x10
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fed:	50                   	push   eax
c0016fee:	e8 97 d8 fe ff       	call   c000488a <f_unlink>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016ffd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017004:	85 c0                	test   eax,eax
c0017006:	75 08                	jne    c0017010 <FAT::unlink(char const*)+0x70>
c0017008:	b8 00 00 00 00       	mov    eax,0x0
c001700d:	eb 09                	jmp    c0017018 <FAT::unlink(char const*)+0x78>
c001700f:	90                   	nop
c0017010:	b8 01 00 00 00       	mov    eax,0x1
c0017015:	8d 76 00             	lea    esi,[esi+0x0]
c0017018:	81 c4 1c 01 00 00    	add    esp,0x11c
c001701e:	c3                   	ret    
c001701f:	90                   	nop

c0017020 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017020:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017026:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001702d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017034:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017038:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001703c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017044:	75 0a                	jne    c0017050 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017046:	b8 04 00 00 00       	mov    eax,0x4
c001704b:	e9 54 01 00 00       	jmp    c00171a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017050:	83 ec 08             	sub    esp,0x8
c0017053:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001705a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001705e:	50                   	push   eax
c001705f:	e8 9c 95 fe ff       	call   c0000600 <strcpy>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	83 ec 08             	sub    esp,0x8
c001706a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001706e:	50                   	push   eax
c001706f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017076:	e8 09 fc ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017086:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001708e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017092:	25 ff 00 00 00       	and    eax,0xff
c0017097:	83 e0 01             	and    eax,0x1
c001709a:	74 08                	je     c00170a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001709c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00170a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170a8:	25 ff 00 00 00       	and    eax,0xff
c00170ad:	83 e0 02             	and    eax,0x2
c00170b0:	74 0a                	je     c00170bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00170b2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00170ba:	66 90                	xchg   ax,ax
c00170bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170c0:	25 ff 00 00 00       	and    eax,0xff
c00170c5:	83 e0 04             	and    eax,0x4
c00170c8:	74 0a                	je     c00170d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00170ca:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00170d2:	66 90                	xchg   ax,ax
c00170d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170d8:	25 ff 00 00 00       	and    eax,0xff
c00170dd:	83 e0 08             	and    eax,0x8
c00170e0:	74 0a                	je     c00170ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00170e2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00170ea:	66 90                	xchg   ax,ax
c00170ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f0:	25 ff 00 00 00       	and    eax,0xff
c00170f5:	83 e0 01             	and    eax,0x1
c00170f8:	74 0a                	je     c0017104 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00170fa:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017102:	66 90                	xchg   ax,ax
c0017104:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017108:	25 ff 00 00 00       	and    eax,0xff
c001710d:	83 e0 02             	and    eax,0x2
c0017110:	74 0a                	je     c001711c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017112:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001711a:	66 90                	xchg   ax,ax
c001711c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017120:	25 ff 00 00 00       	and    eax,0xff
c0017125:	83 e0 04             	and    eax,0x4
c0017128:	74 0a                	je     c0017134 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001712a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017132:	66 90                	xchg   ax,ax
c0017134:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017138:	25 ff 00 00 00       	and    eax,0xff
c001713d:	83 e0 08             	and    eax,0x8
c0017140:	74 0a                	je     c001714c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017142:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001714a:	66 90                	xchg   ax,ax
c001714c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017153:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001715a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017161:	31 d2                	xor    edx,edx
c0017163:	88 c2                	mov    dl,al
c0017165:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001716c:	25 ff 00 00 00       	and    eax,0xff
c0017171:	83 ec 04             	sub    esp,0x4
c0017174:	52                   	push   edx
c0017175:	50                   	push   eax
c0017176:	8d 44 24 24          	lea    eax,[esp+0x24]
c001717a:	50                   	push   eax
c001717b:	e8 7d db fe ff       	call   c0004cfd <f_chmod>
c0017180:	83 c4 10             	add    esp,0x10
c0017183:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001718a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017191:	85 c0                	test   eax,eax
c0017193:	75 07                	jne    c001719c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017195:	b8 00 00 00 00       	mov    eax,0x0
c001719a:	eb 08                	jmp    c00171a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001719c:	b8 01 00 00 00       	mov    eax,0x1
c00171a1:	8d 76 00             	lea    esi,[esi+0x0]
c00171a4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00171aa:	c3                   	ret    
c00171ab:	90                   	nop

c00171ac <FAT::rename(char const*, char const*)>:
c00171ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00171b2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00171ba:	74 0c                	je     c00171c8 <FAT::rename(char const*, char const*)+0x1c>
c00171bc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00171c4:	75 0e                	jne    c00171d4 <FAT::rename(char const*, char const*)+0x28>
c00171c6:	66 90                	xchg   ax,ax
c00171c8:	b8 04 00 00 00       	mov    eax,0x4
c00171cd:	e9 9e 00 00 00       	jmp    c0017270 <FAT::rename(char const*, char const*)+0xc4>
c00171d2:	66 90                	xchg   ax,ax
c00171d4:	83 ec 08             	sub    esp,0x8
c00171d7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00171e5:	50                   	push   eax
c00171e6:	e8 15 94 fe ff       	call   c0000600 <strcpy>
c00171eb:	83 c4 10             	add    esp,0x10
c00171ee:	83 ec 08             	sub    esp,0x8
c00171f1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00171f8:	50                   	push   eax
c00171f9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017200:	e8 7f fa ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	83 ec 08             	sub    esp,0x8
c001720b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017212:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017216:	50                   	push   eax
c0017217:	e8 e4 93 fe ff       	call   c0000600 <strcpy>
c001721c:	83 c4 10             	add    esp,0x10
c001721f:	83 ec 08             	sub    esp,0x8
c0017222:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017226:	50                   	push   eax
c0017227:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001722e:	e8 51 fa ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0017233:	83 c4 10             	add    esp,0x10
c0017236:	83 ec 08             	sub    esp,0x8
c0017239:	8d 44 24 14          	lea    eax,[esp+0x14]
c001723d:	50                   	push   eax
c001723e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017245:	50                   	push   eax
c0017246:	e8 fc d8 fe ff       	call   c0004b47 <f_rename>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017255:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001725c:	85 c0                	test   eax,eax
c001725e:	75 08                	jne    c0017268 <FAT::rename(char const*, char const*)+0xbc>
c0017260:	b8 00 00 00 00       	mov    eax,0x0
c0017265:	eb 09                	jmp    c0017270 <FAT::rename(char const*, char const*)+0xc4>
c0017267:	90                   	nop
c0017268:	b8 01 00 00 00       	mov    eax,0x1
c001726d:	8d 76 00             	lea    esi,[esi+0x0]
c0017270:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017276:	c3                   	ret    
c0017277:	90                   	nop

c0017278 <FAT::mkdir(char const*)>:
c0017278:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001727e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017286:	75 08                	jne    c0017290 <FAT::mkdir(char const*)+0x18>
c0017288:	b8 04 00 00 00       	mov    eax,0x4
c001728d:	eb 61                	jmp    c00172f0 <FAT::mkdir(char const*)+0x78>
c001728f:	90                   	nop
c0017290:	83 ec 08             	sub    esp,0x8
c0017293:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001729a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001729e:	50                   	push   eax
c001729f:	e8 5c 93 fe ff       	call   c0000600 <strcpy>
c00172a4:	83 c4 10             	add    esp,0x10
c00172a7:	83 ec 08             	sub    esp,0x8
c00172aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ae:	50                   	push   eax
c00172af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172b6:	e8 c9 f9 ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	83 ec 0c             	sub    esp,0xc
c00172c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172c5:	50                   	push   eax
c00172c6:	e8 e1 d6 fe ff       	call   c00049ac <f_mkdir>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00172d5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00172dc:	85 c0                	test   eax,eax
c00172de:	75 08                	jne    c00172e8 <FAT::mkdir(char const*)+0x70>
c00172e0:	b8 00 00 00 00       	mov    eax,0x0
c00172e5:	eb 09                	jmp    c00172f0 <FAT::mkdir(char const*)+0x78>
c00172e7:	90                   	nop
c00172e8:	b8 01 00 00 00       	mov    eax,0x1
c00172ed:	8d 76 00             	lea    esi,[esi+0x0]
c00172f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172f6:	c3                   	ret    
c00172f7:	90                   	nop

c00172f8 <FAT::exists(char const*)>:
c00172f8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00172fe:	83 ec 08             	sub    esp,0x8
c0017301:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017308:	8d 44 24 10          	lea    eax,[esp+0x10]
c001730c:	50                   	push   eax
c001730d:	e8 ee 92 fe ff       	call   c0000600 <strcpy>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	83 ec 08             	sub    esp,0x8
c0017318:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001731c:	50                   	push   eax
c001731d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017324:	e8 5b f9 ff ff       	call   c0016c84 <FAT::fixFilepath(char*)>
c0017329:	83 c4 10             	add    esp,0x10
c001732c:	83 ec 08             	sub    esp,0x8
c001732f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017336:	50                   	push   eax
c0017337:	8d 44 24 10          	lea    eax,[esp+0x10]
c001733b:	50                   	push   eax
c001733c:	e8 e4 d2 fe ff       	call   c0004625 <f_stat>
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001734b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017352:	85 c0                	test   eax,eax
c0017354:	75 06                	jne    c001735c <FAT::exists(char const*)+0x64>
c0017356:	b0 01                	mov    al,0x1
c0017358:	eb 06                	jmp    c0017360 <FAT::exists(char const*)+0x68>
c001735a:	66 90                	xchg   ax,ax
c001735c:	b0 00                	mov    al,0x0
c001735e:	66 90                	xchg   ax,ax
c0017360:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017366:	c3                   	ret    
c0017367:	90                   	nop

c0017368 <isoReadDiscSectorHelper>:
c0017368:	83 ec 2c             	sub    esp,0x2c
c001736b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001736f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017373:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017378:	83 e8 41             	sub    eax,0x41
c001737b:	8b 0c 85 c0 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd640]
c0017382:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017386:	ba 00 00 00 00       	mov    edx,0x0
c001738b:	83 ec 0c             	sub    esp,0xc
c001738e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017392:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017396:	52                   	push   edx
c0017397:	50                   	push   eax
c0017398:	51                   	push   ecx
c0017399:	e8 e8 57 ff ff       	call   c000cb86 <LogicalDisk::read(unsigned long long, int, void*)>
c001739e:	83 c4 20             	add    esp,0x20
c00173a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173a5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00173aa:	74 0c                	je     c00173b8 <isoReadDiscSectorHelper+0x50>
c00173ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173b0:	c1 e0 0b             	shl    eax,0xb
c00173b3:	eb 0b                	jmp    c00173c0 <isoReadDiscSectorHelper+0x58>
c00173b5:	8d 76 00             	lea    esi,[esi+0x0]
c00173b8:	b8 00 00 00 00       	mov    eax,0x0
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]
c00173c0:	83 c4 2c             	add    esp,0x2c
c00173c3:	c3                   	ret    

c00173c4 <iso_kprintf>:
c00173c4:	83 ec 0c             	sub    esp,0xc
c00173c7:	a1 a4 04 02 c0       	mov    eax,ds:0xc00204a4
c00173cc:	83 ec 08             	sub    esp,0x8
c00173cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173d3:	50                   	push   eax
c00173d4:	e8 5d 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	90                   	nop
c00173dd:	83 c4 0c             	add    esp,0xc
c00173e0:	c3                   	ret    
c00173e1:	8d 76 00             	lea    esi,[esi+0x0]

c00173e4 <iso_kprintfd>:
c00173e4:	83 ec 0c             	sub    esp,0xc
c00173e7:	a1 a4 04 02 c0       	mov    eax,ds:0xc00204a4
c00173ec:	83 ec 08             	sub    esp,0x8
c00173ef:	68 2c ea 01 c0       	push   0xc001ea2c
c00173f4:	50                   	push   eax
c00173f5:	e8 3c 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173fa:	83 c4 10             	add    esp,0x10
c00173fd:	a1 a4 04 02 c0       	mov    eax,ds:0xc00204a4
c0017402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017406:	83 ec 08             	sub    esp,0x8
c0017409:	52                   	push   edx
c001740a:	50                   	push   eax
c001740b:	e8 e0 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017410:	83 c4 10             	add    esp,0x10
c0017413:	a1 a4 04 02 c0       	mov    eax,ds:0xc00204a4
c0017418:	83 ec 08             	sub    esp,0x8
c001741b:	68 ad e8 01 c0       	push   0xc001e8ad
c0017420:	50                   	push   eax
c0017421:	e8 10 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017426:	83 c4 10             	add    esp,0x10
c0017429:	90                   	nop
c001742a:	83 c4 0c             	add    esp,0xc
c001742d:	c3                   	ret    

c001742e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001742e:	b8 08 00 00 00       	mov    eax,0x8
c0017433:	c3                   	ret    

c0017434 <ISO9660::getName()>:
c0017434:	b8 2f ea 01 c0       	mov    eax,0xc001ea2f
c0017439:	c3                   	ret    

c001743a <ISO9660::closeDir(void*)>:
c001743a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001743e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017440:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017443:	90                   	nop

c0017444 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017444:	b8 01 00 00 00       	mov    eax,0x1
c0017449:	c3                   	ret    

c001744a <ISO9660::unlink(char const*)>:
c001744a:	b8 01 00 00 00       	mov    eax,0x1
c001744f:	c3                   	ret    

c0017450 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017450:	b8 03 00 00 00       	mov    eax,0x3
c0017455:	c3                   	ret    

c0017456 <ISO9660::rename(char const*, char const*)>:
c0017456:	b8 01 00 00 00       	mov    eax,0x1
c001745b:	c3                   	ret    

c001745c <ISO9660::mkdir(char const*)>:
c001745c:	b8 01 00 00 00       	mov    eax,0x1
c0017461:	c3                   	ret    

c0017462 <ISO9660::~ISO9660()>:
c0017462:	83 ec 0c             	sub    esp,0xc
c0017465:	ba 80 ea 01 c0       	mov    edx,0xc001ea80
c001746a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001746e:	89 10                	mov    DWORD PTR [eax],edx
c0017470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017474:	83 ec 0c             	sub    esp,0xc
c0017477:	50                   	push   eax
c0017478:	e8 51 33 ff ff       	call   c000a7ce <Filesystem::~Filesystem()>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	90                   	nop
c0017481:	83 c4 0c             	add    esp,0xc
c0017484:	c3                   	ret    
c0017485:	90                   	nop

c0017486 <ISO9660::~ISO9660()>:
c0017486:	83 ec 0c             	sub    esp,0xc
c0017489:	83 ec 0c             	sub    esp,0xc
c001748c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017490:	e8 cd ff ff ff       	call   c0017462 <ISO9660::~ISO9660()>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	83 ec 08             	sub    esp,0x8
c001749b:	6a 08                	push   0x8
c001749d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174a1:	e8 ec 2e ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c00174a6:	83 c4 10             	add    esp,0x10
c00174a9:	83 c4 0c             	add    esp,0xc
c00174ac:	c3                   	ret    
c00174ad:	90                   	nop

c00174ae <ISO9660::exists(char const*)>:
c00174ae:	83 ec 18             	sub    esp,0x18
c00174b1:	68 4a ea 01 c0       	push   0xc001ea4a
c00174b6:	e8 48 8c ff ff       	call   c0010103 <KePanic(char const*)>
c00174bb:	31 c0                	xor    eax,eax
c00174bd:	83 c4 1c             	add    esp,0x1c
c00174c0:	c3                   	ret    
c00174c1:	90                   	nop

c00174c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00174c2:	56                   	push   esi
c00174c3:	53                   	push   ebx
c00174c4:	50                   	push   eax
c00174c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00174c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00174cd:	85 db                	test   ebx,ebx
c00174cf:	0f 84 82 00 00 00    	je     c0017557 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00174d5:	85 f6                	test   esi,esi
c00174d7:	74 7e                	je     c0017557 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c00174d9:	ba 03 00 00 00       	mov    edx,0x3
c00174de:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00174e3:	75 77                	jne    c001755c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00174e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00174e8:	3a 05 c0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238c0
c00174ee:	74 34                	je     c0017524 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	50                   	push   eax
c00174f4:	e8 c6 f2 fe ff       	call   c00067bf <init_percd>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	ba 0b 00 00 00       	mov    edx,0xb
c0017501:	40                   	inc    eax
c0017502:	74 58                	je     c001755c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017504:	80 3d c0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238c0,0x0
c001750b:	74 10                	je     c001751d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001750d:	83 ec 0c             	sub    esp,0xc
c0017510:	68 68 ea 01 c0       	push   0xc001ea68
c0017515:	e8 e9 8b ff ff       	call   c0010103 <KePanic(char const*)>
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	8a 03                	mov    al,BYTE PTR [ebx]
c001751f:	a2 c0 38 02 c0       	mov    ds:0xc00238c0,al
c0017524:	83 ec 0c             	sub    esp,0xc
c0017527:	0f be 05 c0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238c0
c001752e:	83 c3 03             	add    ebx,0x3
c0017531:	50                   	push   eax
c0017532:	e8 88 f2 fe ff       	call   c00067bf <init_percd>
c0017537:	59                   	pop    ecx
c0017538:	58                   	pop    eax
c0017539:	6a 00                	push   0x0
c001753b:	53                   	push   ebx
c001753c:	e8 bc ed fe ff       	call   c00062fd <iso_open>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	ba 01 00 00 00       	mov    edx,0x1
c0017549:	83 f8 ff             	cmp    eax,0xffffffff
c001754c:	74 0e                	je     c001755c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001754e:	83 c0 64             	add    eax,0x64
c0017551:	31 d2                	xor    edx,edx
c0017553:	89 06                	mov    DWORD PTR [esi],eax
c0017555:	eb 05                	jmp    c001755c <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017557:	ba 04 00 00 00       	mov    edx,0x4
c001755c:	89 d0                	mov    eax,edx
c001755e:	5a                   	pop    edx
c001755f:	5b                   	pop    ebx
c0017560:	5e                   	pop    esi
c0017561:	c3                   	ret    

c0017562 <ISO9660::openDir(char const*, void**)>:
c0017562:	56                   	push   esi
c0017563:	53                   	push   ebx
c0017564:	50                   	push   eax
c0017565:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017569:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001756d:	85 db                	test   ebx,ebx
c001756f:	74 76                	je     c00175e7 <ISO9660::openDir(char const*, void**)+0x85>
c0017571:	85 f6                	test   esi,esi
c0017573:	74 72                	je     c00175e7 <ISO9660::openDir(char const*, void**)+0x85>
c0017575:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017578:	3a 05 c0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238c0
c001757e:	74 34                	je     c00175b4 <ISO9660::openDir(char const*, void**)+0x52>
c0017580:	83 ec 0c             	sub    esp,0xc
c0017583:	50                   	push   eax
c0017584:	e8 36 f2 fe ff       	call   c00067bf <init_percd>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	ba 0b 00 00 00       	mov    edx,0xb
c0017591:	40                   	inc    eax
c0017592:	74 58                	je     c00175ec <ISO9660::openDir(char const*, void**)+0x8a>
c0017594:	80 3d c0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238c0,0x0
c001759b:	74 10                	je     c00175ad <ISO9660::openDir(char const*, void**)+0x4b>
c001759d:	83 ec 0c             	sub    esp,0xc
c00175a0:	68 68 ea 01 c0       	push   0xc001ea68
c00175a5:	e8 59 8b ff ff       	call   c0010103 <KePanic(char const*)>
c00175aa:	83 c4 10             	add    esp,0x10
c00175ad:	8a 03                	mov    al,BYTE PTR [ebx]
c00175af:	a2 c0 38 02 c0       	mov    ds:0xc00238c0,al
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	0f be 05 c0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238c0
c00175be:	83 c3 03             	add    ebx,0x3
c00175c1:	50                   	push   eax
c00175c2:	e8 f8 f1 fe ff       	call   c00067bf <init_percd>
c00175c7:	59                   	pop    ecx
c00175c8:	58                   	pop    eax
c00175c9:	6a 01                	push   0x1
c00175cb:	53                   	push   ebx
c00175cc:	e8 2c ed fe ff       	call   c00062fd <iso_open>
c00175d1:	83 c4 10             	add    esp,0x10
c00175d4:	ba 01 00 00 00       	mov    edx,0x1
c00175d9:	83 f8 ff             	cmp    eax,0xffffffff
c00175dc:	74 0e                	je     c00175ec <ISO9660::openDir(char const*, void**)+0x8a>
c00175de:	83 c0 64             	add    eax,0x64
c00175e1:	31 d2                	xor    edx,edx
c00175e3:	89 06                	mov    DWORD PTR [esi],eax
c00175e5:	eb 05                	jmp    c00175ec <ISO9660::openDir(char const*, void**)+0x8a>
c00175e7:	ba 04 00 00 00       	mov    edx,0x4
c00175ec:	89 d0                	mov    eax,edx
c00175ee:	5a                   	pop    edx
c00175ef:	5b                   	pop    ebx
c00175f0:	5e                   	pop    esi
c00175f1:	c3                   	ret    

c00175f2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00175f2:	53                   	push   ebx
c00175f3:	83 ec 08             	sub    esp,0x8
c00175f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175fe:	85 c0                	test   eax,eax
c0017600:	74 25                	je     c0017627 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017602:	85 db                	test   ebx,ebx
c0017604:	74 21                	je     c0017627 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017606:	83 e8 64             	sub    eax,0x64
c0017609:	52                   	push   edx
c001760a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001760e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017612:	50                   	push   eax
c0017613:	e8 8d ed fe ff       	call   c00063a5 <iso_read>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	89 03                	mov    DWORD PTR [ebx],eax
c001761d:	09 d0                	or     eax,edx
c001761f:	0f 94 c0             	sete   al
c0017622:	0f b6 c0             	movzx  eax,al
c0017625:	eb 05                	jmp    c001762c <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017627:	b8 04 00 00 00       	mov    eax,0x4
c001762c:	83 c4 08             	add    esp,0x8
c001762f:	5b                   	pop    ebx
c0017630:	c3                   	ret    
c0017631:	90                   	nop

c0017632 <ISO9660::seek(void*, unsigned long long)>:
c0017632:	57                   	push   edi
c0017633:	56                   	push   esi
c0017634:	b8 04 00 00 00       	mov    eax,0x4
c0017639:	51                   	push   ecx
c001763a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001763e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017642:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017646:	85 d2                	test   edx,edx
c0017648:	74 1c                	je     c0017666 <ISO9660::seek(void*, unsigned long long)+0x34>
c001764a:	6a 00                	push   0x0
c001764c:	83 ea 64             	sub    edx,0x64
c001764f:	57                   	push   edi
c0017650:	56                   	push   esi
c0017651:	52                   	push   edx
c0017652:	e8 64 ee fe ff       	call   c00064bb <iso_seek>
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	31 f0                	xor    eax,esi
c001765c:	31 fa                	xor    edx,edi
c001765e:	09 d0                	or     eax,edx
c0017660:	0f 95 c0             	setne  al
c0017663:	0f b6 c0             	movzx  eax,al
c0017666:	5a                   	pop    edx
c0017667:	5e                   	pop    esi
c0017668:	5f                   	pop    edi
c0017669:	c3                   	ret    

c001766a <ISO9660::tell(void*, unsigned long long*)>:
c001766a:	53                   	push   ebx
c001766b:	83 ec 08             	sub    esp,0x8
c001766e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017672:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017676:	85 c0                	test   eax,eax
c0017678:	74 1c                	je     c0017696 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c001767a:	85 db                	test   ebx,ebx
c001767c:	74 18                	je     c0017696 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c001767e:	83 ec 0c             	sub    esp,0xc
c0017681:	83 e8 64             	sub    eax,0x64
c0017684:	50                   	push   eax
c0017685:	e8 b5 ee fe ff       	call   c000653f <iso_tell>
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	89 03                	mov    DWORD PTR [ebx],eax
c001768f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017692:	31 c0                	xor    eax,eax
c0017694:	eb 05                	jmp    c001769b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017696:	b8 04 00 00 00       	mov    eax,0x4
c001769b:	83 c4 08             	add    esp,0x8
c001769e:	5b                   	pop    ebx
c001769f:	c3                   	ret    

c00176a0 <ISO9660::stat(void*, unsigned long long*)>:
c00176a0:	53                   	push   ebx
c00176a1:	83 ec 08             	sub    esp,0x8
c00176a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176ac:	85 c0                	test   eax,eax
c00176ae:	74 20                	je     c00176d0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176b0:	85 db                	test   ebx,ebx
c00176b2:	74 1c                	je     c00176d0 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00176b4:	83 ec 0c             	sub    esp,0xc
c00176b7:	83 e8 64             	sub    eax,0x64
c00176ba:	50                   	push   eax
c00176bb:	e8 b0 ee fe ff       	call   c0006570 <iso_total>
c00176c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00176c7:	89 03                	mov    DWORD PTR [ebx],eax
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	31 c0                	xor    eax,eax
c00176ce:	eb 05                	jmp    c00176d5 <ISO9660::stat(void*, unsigned long long*)+0x35>
c00176d0:	b8 04 00 00 00       	mov    eax,0x4
c00176d5:	83 c4 08             	add    esp,0x8
c00176d8:	5b                   	pop    ebx
c00176d9:	c3                   	ret    

c00176da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00176da:	55                   	push   ebp
c00176db:	57                   	push   edi
c00176dc:	56                   	push   esi
c00176dd:	53                   	push   ebx
c00176de:	83 ec 0c             	sub    esp,0xc
c00176e1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00176e5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00176e9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00176ed:	85 ff                	test   edi,edi
c00176ef:	0f 94 c2             	sete   dl
c00176f2:	85 f6                	test   esi,esi
c00176f4:	0f 94 c0             	sete   al
c00176f7:	08 c2                	or     dl,al
c00176f9:	0f 85 9e 00 00 00    	jne    c001779d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00176ff:	85 db                	test   ebx,ebx
c0017701:	0f 84 96 00 00 00    	je     c001779d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017707:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001770a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017710:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017717:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001771a:	3a 05 c0 38 02 c0    	cmp    al,BYTE PTR ds:0xc00238c0
c0017720:	74 34                	je     c0017756 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017722:	83 ec 0c             	sub    esp,0xc
c0017725:	50                   	push   eax
c0017726:	e8 94 f0 fe ff       	call   c00067bf <init_percd>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	ba 0b 00 00 00       	mov    edx,0xb
c0017733:	40                   	inc    eax
c0017734:	74 6c                	je     c00177a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017736:	80 3d c0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238c0,0x0
c001773d:	74 10                	je     c001774f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c001773f:	83 ec 0c             	sub    esp,0xc
c0017742:	68 68 ea 01 c0       	push   0xc001ea68
c0017747:	e8 b7 89 ff ff       	call   c0010103 <KePanic(char const*)>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	8a 03                	mov    al,BYTE PTR [ebx]
c0017751:	a2 c0 38 02 c0       	mov    ds:0xc00238c0,al
c0017756:	83 c3 03             	add    ebx,0x3
c0017759:	52                   	push   edx
c001775a:	52                   	push   edx
c001775b:	6a 00                	push   0x0
c001775d:	53                   	push   ebx
c001775e:	e8 9a eb fe ff       	call   c00062fd <iso_open>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	89 c5                	mov    ebp,eax
c0017768:	83 f8 ff             	cmp    eax,0xffffffff
c001776b:	75 0f                	jne    c001777c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c001776d:	50                   	push   eax
c001776e:	50                   	push   eax
c001776f:	6a 01                	push   0x1
c0017771:	53                   	push   ebx
c0017772:	e8 86 eb fe ff       	call   c00062fd <iso_open>
c0017777:	c6 07 01             	mov    BYTE PTR [edi],0x1
c001777a:	eb 1a                	jmp    c0017796 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	50                   	push   eax
c0017780:	e8 eb ed fe ff       	call   c0006570 <iso_total>
c0017785:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001778c:	89 06                	mov    DWORD PTR [esi],eax
c001778e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017791:	e8 f1 eb fe ff       	call   c0006387 <iso_close>
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	31 d2                	xor    edx,edx
c001779b:	eb 05                	jmp    c00177a2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c001779d:	ba 04 00 00 00       	mov    edx,0x4
c00177a2:	83 c4 0c             	add    esp,0xc
c00177a5:	89 d0                	mov    eax,edx
c00177a7:	5b                   	pop    ebx
c00177a8:	5e                   	pop    esi
c00177a9:	5f                   	pop    edi
c00177aa:	5d                   	pop    ebp
c00177ab:	c3                   	ret    

c00177ac <ISO9660::close(void*)>:
c00177ac:	83 ec 0c             	sub    esp,0xc
c00177af:	b8 04 00 00 00       	mov    eax,0x4
c00177b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177b8:	85 d2                	test   edx,edx
c00177ba:	74 11                	je     c00177cd <ISO9660::close(void*)+0x21>
c00177bc:	83 ec 0c             	sub    esp,0xc
c00177bf:	83 ea 64             	sub    edx,0x64
c00177c2:	52                   	push   edx
c00177c3:	e8 bf eb fe ff       	call   c0006387 <iso_close>
c00177c8:	83 c4 10             	add    esp,0x10
c00177cb:	31 c0                	xor    eax,eax
c00177cd:	83 c4 0c             	add    esp,0xc
c00177d0:	c3                   	ret    
c00177d1:	90                   	nop

c00177d2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00177d2:	55                   	push   ebp
c00177d3:	57                   	push   edi
c00177d4:	56                   	push   esi
c00177d5:	53                   	push   ebx
c00177d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177dc:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00177e3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00177ea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00177f1:	85 c0                	test   eax,eax
c00177f3:	0f 84 96 00 00 00    	je     c001788f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177f9:	85 db                	test   ebx,ebx
c00177fb:	0f 84 8e 00 00 00    	je     c001788f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017801:	83 ec 0c             	sub    esp,0xc
c0017804:	83 e8 64             	sub    eax,0x64
c0017807:	50                   	push   eax
c0017808:	e8 b4 ed fe ff       	call   c00065c1 <iso_readdir>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	89 c6                	mov    esi,eax
c0017812:	85 c0                	test   eax,eax
c0017814:	75 18                	jne    c001782e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017816:	52                   	push   edx
c0017817:	68 10 01 00 00       	push   0x110
c001781c:	6a 00                	push   0x0
c001781e:	57                   	push   edi
c001781f:	e8 ac 8c fe ff       	call   c00004d0 <memset>
c0017824:	83 c4 10             	add    esp,0x10
c0017827:	b8 01 00 00 00       	mov    eax,0x1
c001782c:	eb 66                	jmp    c0017894 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c001782e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017834:	8d 68 08             	lea    ebp,[eax+0x8]
c0017837:	83 ec 0c             	sub    esp,0xc
c001783a:	55                   	push   ebp
c001783b:	e8 00 8d fe ff       	call   c0000540 <strlen>
c0017840:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017848:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017853:	75 0a                	jne    c001785f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017855:	b8 02 00 00 00       	mov    eax,0x2
c001785a:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001785d:	74 05                	je     c0017864 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001785f:	b8 01 00 00 00       	mov    eax,0x1
c0017864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017868:	50                   	push   eax
c0017869:	50                   	push   eax
c001786a:	55                   	push   ebp
c001786b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001786f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017873:	50                   	push   eax
c0017874:	e8 87 8d fe ff       	call   c0000600 <strcpy>
c0017879:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017882:	31 c0                	xor    eax,eax
c0017884:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001788a:	83 c4 10             	add    esp,0x10
c001788d:	eb 05                	jmp    c0017894 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c001788f:	b8 04 00 00 00       	mov    eax,0x4
c0017894:	81 c4 1c 01 00 00    	add    esp,0x11c
c001789a:	5b                   	pop    ebx
c001789b:	5e                   	pop    esi
c001789c:	5f                   	pop    edi
c001789d:	5d                   	pop    ebp
c001789e:	c3                   	ret    

c001789f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001789f:	57                   	push   edi
c00178a0:	56                   	push   esi
c00178a1:	53                   	push   ebx
c00178a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00178ae:	39 35 c4 38 02 c0    	cmp    DWORD PTR ds:0xc00238c4,esi
c00178b4:	75 08                	jne    c00178be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00178b6:	38 1d 2c f4 01 c0    	cmp    BYTE PTR ds:0xc001f42c,bl
c00178bc:	74 4a                	je     c0017908 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178be:	83 ec 0c             	sub    esp,0xc
c00178c1:	31 d2                	xor    edx,edx
c00178c3:	68 e0 38 02 c0       	push   0xc00238e0
c00178c8:	0f be c3             	movsx  eax,bl
c00178cb:	6a 01                	push   0x1
c00178cd:	52                   	push   edx
c00178ce:	56                   	push   esi
c00178cf:	ff 34 85 bc 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd744]
c00178d6:	e8 ab 52 ff ff       	call   c000cb86 <LogicalDisk::read(unsigned long long, int, void*)>
c00178db:	83 c4 20             	add    esp,0x20
c00178de:	85 c0                	test   eax,eax
c00178e0:	75 0e                	jne    c00178f0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00178e2:	89 35 c4 38 02 c0    	mov    DWORD PTR ds:0xc00238c4,esi
c00178e8:	88 1d 2c f4 01 c0    	mov    BYTE PTR ds:0xc001f42c,bl
c00178ee:	eb 18                	jmp    c0017908 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178f0:	50                   	push   eax
c00178f1:	68 00 08 00 00       	push   0x800
c00178f6:	6a 00                	push   0x0
c00178f8:	57                   	push   edi
c00178f9:	e8 d2 8b fe ff       	call   c00004d0 <memset>
c00178fe:	83 c4 10             	add    esp,0x10
c0017901:	b8 01 00 00 00       	mov    eax,0x1
c0017906:	eb 0e                	jmp    c0017916 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017908:	be e0 38 02 c0       	mov    esi,0xc00238e0
c001790d:	b9 00 08 00 00       	mov    ecx,0x800
c0017912:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017914:	31 c0                	xor    eax,eax
c0017916:	5b                   	pop    ebx
c0017917:	5e                   	pop    esi
c0017918:	5f                   	pop    edi
c0017919:	c3                   	ret    

c001791a <ISO9660::tryMount(LogicalDisk*, int)>:
c001791a:	53                   	push   ebx
c001791b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017921:	c7 05 c4 38 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00238c4,0xdeadbeef
c001792b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017932:	8d 58 41             	lea    ebx,[eax+0x41]
c0017935:	0f be db             	movsx  ebx,bl
c0017938:	53                   	push   ebx
c0017939:	8d 44 24 08          	lea    eax,[esp+0x8]
c001793d:	50                   	push   eax
c001793e:	6a 10                	push   0x10
c0017940:	e8 5a ff ff ff       	call   c001789f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017945:	83 c4 10             	add    esp,0x10
c0017948:	31 d2                	xor    edx,edx
c001794a:	85 c0                	test   eax,eax
c001794c:	75 33                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001794e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017953:	75 2c                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017955:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001795a:	75 25                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001795c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017961:	75 1e                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017963:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017968:	75 17                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001796a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001796f:	75 10                	jne    c0017981 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	53                   	push   ebx
c0017975:	e8 45 ee fe ff       	call   c00067bf <init_percd>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	40                   	inc    eax
c001797e:	0f 95 c2             	setne  dl
c0017981:	88 d0                	mov    al,dl
c0017983:	81 c4 08 08 00 00    	add    esp,0x808
c0017989:	5b                   	pop    ebx
c001798a:	c3                   	ret    
c001798b:	90                   	nop

c001798c <ISO9660::ISO9660()>:
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017993:	83 ec 0c             	sub    esp,0xc
c0017996:	50                   	push   eax
c0017997:	e8 0e 2e ff ff       	call   c000a7aa <Filesystem::Filesystem()>
c001799c:	83 c4 10             	add    esp,0x10
c001799f:	ba 80 ea 01 c0       	mov    edx,0xc001ea80
c00179a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a8:	89 10                	mov    DWORD PTR [eax],edx
c00179aa:	e8 12 ef fe ff       	call   c00068c1 <fs_iso9660_init>
c00179af:	90                   	nop
c00179b0:	83 c4 0c             	add    esp,0xc
c00179b3:	c3                   	ret    

c00179b4 <SoundCard::beginPlayback()>:
c00179b4:	c7 44 24 04 e0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eae0
c00179bc:	e9 42 87 ff ff       	jmp    c0010103 <KePanic(char const*)>
c00179c1:	90                   	nop

c00179c2 <SoundCard::stopPlayback()>:
c00179c2:	c7 44 24 04 e0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eae0
c00179ca:	e9 34 87 ff ff       	jmp    c0010103 <KePanic(char const*)>
c00179cf:	90                   	nop

c00179d0 <SoundCard::SoundCard(char const*)>:
c00179d0:	83 ec 1c             	sub    esp,0x1c
c00179d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d7:	83 ec 08             	sub    esp,0x8
c00179da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179de:	50                   	push   eax
c00179df:	e8 7c 40 ff ff       	call   c000ba60 <Device::Device(char const*)>
c00179e4:	83 c4 10             	add    esp,0x10
c00179e7:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c00179ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f0:	89 10                	mov    DWORD PTR [eax],edx
c00179f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00179fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a01:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017a35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017a3d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017a42:	7f 19                	jg     c0017a5d <SoundCard::SoundCard(char const*)+0x8d>
c0017a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a4c:	83 c2 54             	add    edx,0x54
c0017a4f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a57:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a5b:	eb e0                	jmp    c0017a3d <SoundCard::SoundCard(char const*)+0x6d>
c0017a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a61:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a68:	90                   	nop
c0017a69:	83 c4 1c             	add    esp,0x1c
c0017a6c:	c3                   	ret    
c0017a6d:	90                   	nop

c0017a6e <SoundCard::~SoundCard()>:
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	ba 2c eb 01 c0       	mov    edx,0xc001eb2c
c0017a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a7a:	89 10                	mov    DWORD PTR [eax],edx
c0017a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a80:	83 ec 0c             	sub    esp,0xc
c0017a83:	50                   	push   eax
c0017a84:	e8 41 3d ff ff       	call   c000b7ca <Device::~Device()>
c0017a89:	83 c4 10             	add    esp,0x10
c0017a8c:	90                   	nop
c0017a8d:	83 c4 0c             	add    esp,0xc
c0017a90:	c3                   	ret    
c0017a91:	90                   	nop

c0017a92 <SoundCard::~SoundCard()>:
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a9c:	e8 cd ff ff ff       	call   c0017a6e <SoundCard::~SoundCard()>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	83 ec 08             	sub    esp,0x8
c0017aa7:	68 e8 01 00 00       	push   0x1e8
c0017aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab0:	e8 dd 28 ff ff       	call   c000a392 <operator delete(void*, unsigned long)>
c0017ab5:	83 c4 10             	add    esp,0x10
c0017ab8:	83 c4 0c             	add    esp,0xc
c0017abb:	c3                   	ret    

c0017abc <SoundCard::configureRates(int, int, int)>:
c0017abc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ac0:	31 c0                	xor    eax,eax
c0017ac2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017ac9:	75 20                	jne    c0017aeb <SoundCard::configureRates(int, int, int)+0x2f>
c0017acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017acf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017ad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ad9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017ae9:	b0 01                	mov    al,0x1
c0017aeb:	c3                   	ret    

c0017aec <SoundCard::getSamples16(int, short*)>:
c0017aec:	55                   	push   ebp
c0017aed:	57                   	push   edi
c0017aee:	31 ff                	xor    edi,edi
c0017af0:	56                   	push   esi
c0017af1:	53                   	push   ebx
c0017af2:	31 db                	xor    ebx,ebx
c0017af4:	83 ec 10             	sub    esp,0x10
c0017af7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017afb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017aff:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b02:	50                   	push   eax
c0017b03:	6a 00                	push   0x0
c0017b05:	55                   	push   ebp
c0017b06:	e8 c5 89 fe ff       	call   c00004d0 <memset>
c0017b0b:	83 c4 10             	add    esp,0x10
c0017b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b12:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b19:	85 c0                	test   eax,eax
c0017b1b:	74 1b                	je     c0017b38 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b1d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b21:	75 15                	jne    c0017b38 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b27:	55                   	push   ebp
c0017b28:	56                   	push   esi
c0017b29:	50                   	push   eax
c0017b2a:	e8 ed 02 00 00       	call   c0017e1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	39 c7                	cmp    edi,eax
c0017b34:	7d 02                	jge    c0017b38 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b36:	89 c7                	mov    edi,eax
c0017b38:	43                   	inc    ebx
c0017b39:	83 fb 20             	cmp    ebx,0x20
c0017b3c:	75 d0                	jne    c0017b0e <SoundCard::getSamples16(int, short*)+0x22>
c0017b3e:	83 c4 0c             	add    esp,0xc
c0017b41:	89 f8                	mov    eax,edi
c0017b43:	5b                   	pop    ebx
c0017b44:	5e                   	pop    esi
c0017b45:	5f                   	pop    edi
c0017b46:	5d                   	pop    ebp
c0017b47:	c3                   	ret    

c0017b48 <SoundCard::getSamples32(int, int*)>:
c0017b48:	55                   	push   ebp
c0017b49:	57                   	push   edi
c0017b4a:	31 ff                	xor    edi,edi
c0017b4c:	56                   	push   esi
c0017b4d:	31 f6                	xor    esi,esi
c0017b4f:	53                   	push   ebx
c0017b50:	83 ec 10             	sub    esp,0x10
c0017b53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b57:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b5b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b5f:	c1 e0 02             	shl    eax,0x2
c0017b62:	50                   	push   eax
c0017b63:	6a 00                	push   0x0
c0017b65:	55                   	push   ebp
c0017b66:	e8 65 89 fe ff       	call   c00004d0 <memset>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017b75:	85 c0                	test   eax,eax
c0017b77:	74 1b                	je     c0017b94 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b79:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b7d:	75 15                	jne    c0017b94 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b7f:	53                   	push   ebx
c0017b80:	55                   	push   ebp
c0017b81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b85:	50                   	push   eax
c0017b86:	e8 55 03 00 00       	call   c0017ee0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	39 c6                	cmp    esi,eax
c0017b90:	7d 02                	jge    c0017b94 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b92:	89 c6                	mov    esi,eax
c0017b94:	47                   	inc    edi
c0017b95:	83 ff 20             	cmp    edi,0x20
c0017b98:	75 d4                	jne    c0017b6e <SoundCard::getSamples32(int, int*)+0x26>
c0017b9a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017ba0:	85 f6                	test   esi,esi
c0017ba2:	75 0f                	jne    c0017bb3 <SoundCard::getSamples32(int, int*)+0x6b>
c0017ba4:	84 c0                	test   al,al
c0017ba6:	74 1b                	je     c0017bc3 <SoundCard::getSamples32(int, int*)+0x7b>
c0017ba8:	83 ec 0c             	sub    esp,0xc
c0017bab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bad:	53                   	push   ebx
c0017bae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017bb1:	eb 0d                	jmp    c0017bc0 <SoundCard::getSamples32(int, int*)+0x78>
c0017bb3:	84 c0                	test   al,al
c0017bb5:	75 0c                	jne    c0017bc3 <SoundCard::getSamples32(int, int*)+0x7b>
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bbc:	53                   	push   ebx
c0017bbd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017bc0:	83 c4 10             	add    esp,0x10
c0017bc3:	83 c4 0c             	add    esp,0xc
c0017bc6:	89 f0                	mov    eax,esi
c0017bc8:	5b                   	pop    ebx
c0017bc9:	5e                   	pop    esi
c0017bca:	5f                   	pop    edi
c0017bcb:	5d                   	pop    ebp
c0017bcc:	c3                   	ret    
c0017bcd:	90                   	nop

c0017bce <SoundCard::addChannel(SoundPort*)>:
c0017bce:	83 ec 0c             	sub    esp,0xc
c0017bd1:	31 c0                	xor    eax,eax
c0017bd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bd7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017bdf:	74 1b                	je     c0017bfc <SoundCard::addChannel(SoundPort*)+0x2e>
c0017be1:	40                   	inc    eax
c0017be2:	83 f8 20             	cmp    eax,0x20
c0017be5:	75 f0                	jne    c0017bd7 <SoundCard::addChannel(SoundPort*)+0x9>
c0017be7:	83 ec 0c             	sub    esp,0xc
c0017bea:	68 05 eb 01 c0       	push   0xc001eb05
c0017bef:	e8 0f 85 ff ff       	call   c0010103 <KePanic(char const*)>
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	83 c8 ff             	or     eax,0xffffffff
c0017bfa:	eb 0b                	jmp    c0017c07 <SoundCard::addChannel(SoundPort*)+0x39>
c0017bfc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c00:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c07:	83 c4 0c             	add    esp,0xc
c0017c0a:	c3                   	ret    
c0017c0b:	90                   	nop

c0017c0c <SoundCard::removeChannel(int)>:
c0017c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c14:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c1f:	c3                   	ret    

c0017c20 <SoundPort::SoundPort(int, int, int, int)>:
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c27:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c32:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c3e:	89 10                	mov    DWORD PTR [eax],edx
c0017c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c56:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c5b:	75 13                	jne    c0017c70 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c63:	05 a0 0f 00 00       	add    eax,0xfa0
c0017c68:	01 c0                	add    eax,eax
c0017c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c6e:	66 90                	xchg   ax,ax
c0017c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c78:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c7f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c8d:	c1 e0 02             	shl    eax,0x2
c0017c90:	83 ec 0c             	sub    esp,0xc
c0017c93:	50                   	push   eax
c0017c94:	e8 20 fb fe ff       	call   c00077b9 <malloc>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	89 c2                	mov    edx,eax
c0017c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017ca5:	90                   	nop
c0017ca6:	83 c4 0c             	add    esp,0xc
c0017ca9:	c3                   	ret    
c0017caa:	66 90                	xchg   ax,ax

c0017cac <SoundPort::~SoundPort()>:
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cb6:	85 c0                	test   eax,eax
c0017cb8:	74 1e                	je     c0017cd8 <SoundPort::~SoundPort()+0x2c>
c0017cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017cc1:	83 ec 0c             	sub    esp,0xc
c0017cc4:	50                   	push   eax
c0017cc5:	e8 ff fa fe ff       	call   c00077c9 <free>
c0017cca:	83 c4 10             	add    esp,0x10
c0017ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cd1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cd8:	90                   	nop
c0017cd9:	83 c4 0c             	add    esp,0xc
c0017cdc:	c3                   	ret    
c0017cdd:	90                   	nop
c0017cde:	66 90                	xchg   ax,ax

c0017ce0 <SoundPort::unpause()>:
c0017ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ce4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017ce8:	c3                   	ret    
c0017ce9:	90                   	nop
c0017cea:	66 90                	xchg   ax,ax

c0017cec <SoundPort::pause()>:
c0017cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017cf4:	c3                   	ret    
c0017cf5:	90                   	nop
c0017cf6:	66 90                	xchg   ax,ax

c0017cf8 <SoundPort::getBufferUsed()>:
c0017cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cfc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017cff:	c3                   	ret    

c0017d00 <SoundPort::getBufferSize()>:
c0017d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d07:	c3                   	ret    

c0017d08 <SoundPort::buffer16(short*, int)>:
c0017d08:	55                   	push   ebp
c0017d09:	57                   	push   edi
c0017d0a:	56                   	push   esi
c0017d0b:	53                   	push   ebx
c0017d0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d10:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d14:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d17:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d1a:	74 68                	je     c0017d84 <SoundPort::buffer16(short*, int)+0x7c>
c0017d1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d20:	85 c9                	test   ecx,ecx
c0017d22:	7e 60                	jle    c0017d84 <SoundPort::buffer16(short*, int)+0x7c>
c0017d24:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017d28:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d2b:	c1 e1 0f             	shl    ecx,0xf
c0017d2e:	8d 70 01             	lea    esi,[eax+0x1]
c0017d31:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d34:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017d37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d3a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d3d:	74 4d                	je     c0017d8c <SoundPort::buffer16(short*, int)+0x84>
c0017d3f:	31 f6                	xor    esi,esi
c0017d41:	eb 21                	jmp    c0017d64 <SoundPort::buffer16(short*, int)+0x5c>
c0017d43:	90                   	nop
c0017d44:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017d49:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d4c:	c1 e3 0f             	shl    ebx,0xf
c0017d4f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d52:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d55:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d58:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d5b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d5e:	74 1c                	je     c0017d7c <SoundPort::buffer16(short*, int)+0x74>
c0017d60:	89 c6                	mov    esi,eax
c0017d62:	66 90                	xchg   ax,ax
c0017d64:	8d 46 01             	lea    eax,[esi+0x1]
c0017d67:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017d6b:	75 d7                	jne    c0017d44 <SoundPort::buffer16(short*, int)+0x3c>
c0017d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d71:	8d 76 00             	lea    esi,[esi+0x0]
c0017d74:	5b                   	pop    ebx
c0017d75:	5e                   	pop    esi
c0017d76:	5f                   	pop    edi
c0017d77:	5d                   	pop    ebp
c0017d78:	c3                   	ret    
c0017d79:	8d 76 00             	lea    esi,[esi+0x0]
c0017d7c:	5b                   	pop    ebx
c0017d7d:	8d 46 02             	lea    eax,[esi+0x2]
c0017d80:	5e                   	pop    esi
c0017d81:	5f                   	pop    edi
c0017d82:	5d                   	pop    ebp
c0017d83:	c3                   	ret    
c0017d84:	5b                   	pop    ebx
c0017d85:	31 c0                	xor    eax,eax
c0017d87:	5e                   	pop    esi
c0017d88:	5f                   	pop    edi
c0017d89:	5d                   	pop    ebp
c0017d8a:	c3                   	ret    
c0017d8b:	90                   	nop
c0017d8c:	b8 01 00 00 00       	mov    eax,0x1
c0017d91:	eb e1                	jmp    c0017d74 <SoundPort::buffer16(short*, int)+0x6c>
c0017d93:	90                   	nop

c0017d94 <SoundPort::buffer32(int*, int)>:
c0017d94:	55                   	push   ebp
c0017d95:	57                   	push   edi
c0017d96:	56                   	push   esi
c0017d97:	53                   	push   ebx
c0017d98:	51                   	push   ecx
c0017d99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017da1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017da4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017da8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017dab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dae:	74 5c                	je     c0017e0c <SoundPort::buffer32(int*, int)+0x78>
c0017db0:	85 c0                	test   eax,eax
c0017db2:	7e 58                	jle    c0017e0c <SoundPort::buffer32(int*, int)+0x78>
c0017db4:	8d 71 01             	lea    esi,[ecx+0x1]
c0017db7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017dba:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017dbd:	8b 37                	mov    esi,DWORD PTR [edi]
c0017dbf:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017dc2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dc5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dc8:	74 4a                	je     c0017e14 <SoundPort::buffer32(int*, int)+0x80>
c0017dca:	31 f6                	xor    esi,esi
c0017dcc:	eb 1e                	jmp    c0017dec <SoundPort::buffer32(int*, int)+0x58>
c0017dce:	66 90                	xchg   ax,ax
c0017dd0:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017dd3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017dd6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017dd9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017ddc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017de0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017de3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017de6:	74 18                	je     c0017e00 <SoundPort::buffer32(int*, int)+0x6c>
c0017de8:	89 de                	mov    esi,ebx
c0017dea:	66 90                	xchg   ax,ax
c0017dec:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017def:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017df2:	75 dc                	jne    c0017dd0 <SoundPort::buffer32(int*, int)+0x3c>
c0017df4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017df7:	90                   	nop
c0017df8:	5a                   	pop    edx
c0017df9:	5b                   	pop    ebx
c0017dfa:	5e                   	pop    esi
c0017dfb:	5f                   	pop    edi
c0017dfc:	5d                   	pop    ebp
c0017dfd:	c3                   	ret    
c0017dfe:	66 90                	xchg   ax,ax
c0017e00:	5a                   	pop    edx
c0017e01:	8d 46 02             	lea    eax,[esi+0x2]
c0017e04:	5b                   	pop    ebx
c0017e05:	5e                   	pop    esi
c0017e06:	5f                   	pop    edi
c0017e07:	5d                   	pop    ebp
c0017e08:	c3                   	ret    
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]
c0017e0c:	5a                   	pop    edx
c0017e0d:	31 c0                	xor    eax,eax
c0017e0f:	5b                   	pop    ebx
c0017e10:	5e                   	pop    esi
c0017e11:	5f                   	pop    edi
c0017e12:	5d                   	pop    ebp
c0017e13:	c3                   	ret    
c0017e14:	b8 01 00 00 00       	mov    eax,0x1
c0017e19:	eb dd                	jmp    c0017df8 <SoundPort::buffer32(int*, int)+0x64>
c0017e1b:	90                   	nop

c0017e1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e1c:	57                   	push   edi
c0017e1d:	56                   	push   esi
c0017e1e:	53                   	push   ebx
c0017e1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017e27:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017e2d:	39 03                	cmp    DWORD PTR [ebx],eax
c0017e2f:	74 13                	je     c0017e44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017e31:	83 ec 0c             	sub    esp,0xc
c0017e34:	68 58 eb 01 c0       	push   0xc001eb58
c0017e39:	e8 c5 82 ff ff       	call   c0010103 <KePanic(char const*)>
c0017e3e:	83 c4 10             	add    esp,0x10
c0017e41:	8d 76 00             	lea    esi,[esi+0x0]
c0017e44:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017e4a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e4d:	74 11                	je     c0017e60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e4f:	83 ec 0c             	sub    esp,0xc
c0017e52:	68 97 eb 01 c0       	push   0xc001eb97
c0017e57:	e8 a7 82 ff ff       	call   c0010103 <KePanic(char const*)>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	90                   	nop
c0017e60:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e66:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017e69:	74 11                	je     c0017e7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017e6b:	83 ec 0c             	sub    esp,0xc
c0017e6e:	68 97 eb 01 c0       	push   0xc001eb97
c0017e73:	e8 8b 82 ff ff       	call   c0010103 <KePanic(char const*)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	90                   	nop
c0017e7c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017e7f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017e83:	7e 07                	jle    c0017e8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017e85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e89:	8d 76 00             	lea    esi,[esi+0x0]
c0017e8c:	85 f6                	test   esi,esi
c0017e8e:	7e 2c                	jle    c0017ebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017e90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e94:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017e97:	31 c9                	xor    ecx,ecx
c0017e99:	01 d7                	add    edi,edx
c0017e9b:	90                   	nop
c0017e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017e9f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017ea2:	85 c0                	test   eax,eax
c0017ea4:	79 06                	jns    c0017eac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017ea6:	05 ff 7f 00 00       	add    eax,0x7fff
c0017eab:	90                   	nop
c0017eac:	c1 f8 0f             	sar    eax,0xf
c0017eaf:	83 c1 04             	add    ecx,0x4
c0017eb2:	66 01 02             	add    WORD PTR [edx],ax
c0017eb5:	83 c2 02             	add    edx,0x2
c0017eb8:	39 d7                	cmp    edi,edx
c0017eba:	75 e0                	jne    c0017e9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017ebc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017ebf:	50                   	push   eax
c0017ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017ec3:	29 f0                	sub    eax,esi
c0017ec5:	c1 e0 02             	shl    eax,0x2
c0017ec8:	50                   	push   eax
c0017ec9:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017ecc:	50                   	push   eax
c0017ecd:	52                   	push   edx
c0017ece:	e8 0d 85 fe ff       	call   c00003e0 <memmove>
c0017ed3:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	89 f0                	mov    eax,esi
c0017edb:	5b                   	pop    ebx
c0017edc:	5e                   	pop    esi
c0017edd:	5f                   	pop    edi
c0017ede:	c3                   	ret    
c0017edf:	90                   	nop

c0017ee0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017ee0:	57                   	push   edi
c0017ee1:	56                   	push   esi
c0017ee2:	53                   	push   ebx
c0017ee3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017ee7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017eeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017eef:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017ef5:	39 06                	cmp    DWORD PTR [esi],eax
c0017ef7:	74 13                	je     c0017f0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017ef9:	83 ec 0c             	sub    esp,0xc
c0017efc:	68 78 eb 01 c0       	push   0xc001eb78
c0017f01:	e8 fd 81 ff ff       	call   c0010103 <KePanic(char const*)>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	8d 76 00             	lea    esi,[esi+0x0]
c0017f0c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f12:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f15:	74 11                	je     c0017f28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f17:	83 ec 0c             	sub    esp,0xc
c0017f1a:	68 b3 eb 01 c0       	push   0xc001ebb3
c0017f1f:	e8 df 81 ff ff       	call   c0010103 <KePanic(char const*)>
c0017f24:	83 c4 10             	add    esp,0x10
c0017f27:	90                   	nop
c0017f28:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017f2e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017f31:	74 11                	je     c0017f44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017f33:	83 ec 0c             	sub    esp,0xc
c0017f36:	68 b3 eb 01 c0       	push   0xc001ebb3
c0017f3b:	e8 c3 81 ff ff       	call   c0010103 <KePanic(char const*)>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	90                   	nop
c0017f44:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017f47:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017f4b:	7e 07                	jle    c0017f54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f51:	8d 76 00             	lea    esi,[esi+0x0]
c0017f54:	85 ff                	test   edi,edi
c0017f56:	7e 1c                	jle    c0017f74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f58:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f5f:	31 c0                	xor    eax,eax
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f67:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017f6a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017f6d:	83 c0 04             	add    eax,0x4
c0017f70:	39 c1                	cmp    ecx,eax
c0017f72:	75 f0                	jne    c0017f64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017f74:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f77:	50                   	push   eax
c0017f78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017f7b:	29 f8                	sub    eax,edi
c0017f7d:	c1 e0 02             	shl    eax,0x2
c0017f80:	50                   	push   eax
c0017f81:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017f84:	50                   	push   eax
c0017f85:	52                   	push   edx
c0017f86:	e8 55 84 fe ff       	call   c00003e0 <memmove>
c0017f8b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	89 f8                	mov    eax,edi
c0017f93:	5b                   	pop    ebx
c0017f94:	5e                   	pop    esi
c0017f95:	5f                   	pop    edi
c0017f96:	c3                   	ret    
c0017f97:	90                   	nop

c0017f98 <PCI::open(int, int, void*)>:
c0017f98:	83 ec 18             	sub    esp,0x18
c0017f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fa3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017fa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0017fab:	50                   	push   eax
c0017fac:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017faf:	31 c0                	xor    eax,eax
c0017fb1:	83 c4 1c             	add    esp,0x1c
c0017fb4:	c3                   	ret    
c0017fb5:	90                   	nop

c0017fb6 <PCI::close(int, int, void*)>:
c0017fb6:	31 c0                	xor    eax,eax
c0017fb8:	c3                   	ret    
c0017fb9:	90                   	nop

c0017fba <PCI::PCI()>:
c0017fba:	83 ec 0c             	sub    esp,0xc
c0017fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc1:	83 ec 08             	sub    esp,0x8
c0017fc4:	68 cf eb 01 c0       	push   0xc001ebcf
c0017fc9:	50                   	push   eax
c0017fca:	e8 4d 32 ff ff       	call   c000b21c <Bus::Bus(char const*)>
c0017fcf:	83 c4 10             	add    esp,0x10
c0017fd2:	ba 78 ec 01 c0       	mov    edx,0xc001ec78
c0017fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fdb:	89 10                	mov    DWORD PTR [eax],edx
c0017fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fef:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0017ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017ffe:	31 d2                	xor    edx,edx
c0018000:	88 c2                	mov    dl,al
c0018002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018006:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001800d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018011:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018017:	31 d2                	xor    edx,edx
c0018019:	88 c2                	mov    dl,al
c001801b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001801f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018028:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001802e:	8d 50 01             	lea    edx,[eax+0x1]
c0018031:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018035:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001803b:	31 d2                	xor    edx,edx
c001803d:	88 c2                	mov    dl,al
c001803f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018043:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0018047:	83 c9 c0             	or     ecx,0xffffffc0
c001804a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001804e:	90                   	nop
c001804f:	83 c4 0c             	add    esp,0xc
c0018052:	c3                   	ret    
c0018053:	90                   	nop

c0018054 <PCI::readBAR8(unsigned int, int)>:
c0018054:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018058:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001805c:	f6 c2 01             	test   dl,0x1
c001805f:	74 07                	je     c0018068 <PCI::readBAR8(unsigned int, int)+0x14>
c0018061:	83 e2 fc             	and    edx,0xfffffffc
c0018064:	01 c2                	add    edx,eax
c0018066:	ec                   	in     al,dx
c0018067:	c3                   	ret    
c0018068:	83 e2 f0             	and    edx,0xfffffff0
c001806b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001806e:	c3                   	ret    
c001806f:	90                   	nop

c0018070 <PCI::readBAR16(unsigned int, int)>:
c0018070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018078:	f6 c2 01             	test   dl,0x1
c001807b:	74 08                	je     c0018085 <PCI::readBAR16(unsigned int, int)+0x15>
c001807d:	83 e2 fc             	and    edx,0xfffffffc
c0018080:	01 c2                	add    edx,eax
c0018082:	66 ed                	in     ax,dx
c0018084:	c3                   	ret    
c0018085:	83 e2 f0             	and    edx,0xfffffff0
c0018088:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001808c:	c3                   	ret    
c001808d:	90                   	nop

c001808e <PCI::readBAR32(unsigned int, int)>:
c001808e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018096:	f6 c2 01             	test   dl,0x1
c0018099:	74 07                	je     c00180a2 <PCI::readBAR32(unsigned int, int)+0x14>
c001809b:	83 e2 fc             	and    edx,0xfffffffc
c001809e:	01 c2                	add    edx,eax
c00180a0:	ed                   	in     eax,dx
c00180a1:	c3                   	ret    
c00180a2:	83 e2 f0             	and    edx,0xfffffff0
c00180a5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00180a8:	c3                   	ret    
c00180a9:	90                   	nop

c00180aa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00180aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180b6:	f6 c2 01             	test   dl,0x1
c00180b9:	74 07                	je     c00180c2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00180bb:	83 e2 fc             	and    edx,0xfffffffc
c00180be:	01 ca                	add    edx,ecx
c00180c0:	ee                   	out    dx,al
c00180c1:	c3                   	ret    
c00180c2:	83 e2 f0             	and    edx,0xfffffff0
c00180c5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00180c8:	c3                   	ret    
c00180c9:	90                   	nop

c00180ca <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00180ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180d6:	f6 c2 01             	test   dl,0x1
c00180d9:	74 08                	je     c00180e3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00180db:	83 e2 fc             	and    edx,0xfffffffc
c00180de:	01 ca                	add    edx,ecx
c00180e0:	66 ef                	out    dx,ax
c00180e2:	c3                   	ret    
c00180e3:	83 e2 f0             	and    edx,0xfffffff0
c00180e6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00180ea:	c3                   	ret    
c00180eb:	90                   	nop

c00180ec <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00180ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180f8:	f6 c2 01             	test   dl,0x1
c00180fb:	74 07                	je     c0018104 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00180fd:	83 e2 fc             	and    edx,0xfffffffc
c0018100:	01 ca                	add    edx,ecx
c0018102:	ef                   	out    dx,eax
c0018103:	c3                   	ret    
c0018104:	83 e2 f0             	and    edx,0xfffffff0
c0018107:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001810a:	c3                   	ret    
c001810b:	90                   	nop

c001810c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001810c:	55                   	push   ebp
c001810d:	57                   	push   edi
c001810e:	56                   	push   esi
c001810f:	53                   	push   ebx
c0018110:	83 ec 0c             	sub    esp,0xc
c0018113:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018117:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001811b:	89 f0                	mov    eax,esi
c001811d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018121:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018125:	3c 07                	cmp    al,0x7
c0018127:	76 10                	jbe    c0018139 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	68 d7 eb 01 c0       	push   0xc001ebd7
c0018131:	e8 cd 7f ff ff       	call   c0010103 <KePanic(char const*)>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	80 fb 0f             	cmp    bl,0xf
c001813c:	76 10                	jbe    c001814e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001813e:	83 ec 0c             	sub    esp,0xc
c0018141:	68 07 ec 01 c0       	push   0xc001ec07
c0018146:	e8 b8 7f ff ff       	call   c0010103 <KePanic(char const*)>
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	8d 04 36             	lea    eax,[esi+esi*1]
c0018151:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018156:	83 c8 f0             	or     eax,0xfffffff0
c0018159:	ee                   	out    dx,al
c001815a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001815f:	89 e8                	mov    eax,ebp
c0018161:	ee                   	out    dx,al
c0018162:	83 c4 0c             	add    esp,0xc
c0018165:	89 d8                	mov    eax,ebx
c0018167:	66 81 e7 fc 00       	and    di,0xfc
c001816c:	5b                   	pop    ebx
c001816d:	c1 e0 08             	shl    eax,0x8
c0018170:	5e                   	pop    esi
c0018171:	09 f8                	or     eax,edi
c0018173:	5f                   	pop    edi
c0018174:	66 0d 00 c0          	or     ax,0xc000
c0018178:	5d                   	pop    ebp
c0018179:	c3                   	ret    

c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001817a:	57                   	push   edi
c001817b:	56                   	push   esi
c001817c:	53                   	push   ebx
c001817d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018181:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018185:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001818b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001818f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018193:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018197:	83 ff 01             	cmp    edi,0x1
c001819a:	75 3e                	jne    c00181da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001819c:	89 de                	mov    esi,ebx
c001819e:	0f b6 c0             	movzx  eax,al
c00181a1:	81 e6 fc 00 00 00    	and    esi,0xfc
c00181a7:	c1 e0 10             	shl    eax,0x10
c00181aa:	0f b6 c9             	movzx  ecx,cl
c00181ad:	09 f0                	or     eax,esi
c00181af:	c1 e1 08             	shl    ecx,0x8
c00181b2:	0f b6 d2             	movzx  edx,dl
c00181b5:	09 c8                	or     eax,ecx
c00181b7:	c1 e2 0b             	shl    edx,0xb
c00181ba:	09 d0                	or     eax,edx
c00181bc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181c1:	0d 00 00 00 80       	or     eax,0x80000000
c00181c6:	ef                   	out    dx,eax
c00181c7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00181cc:	ed                   	in     eax,dx
c00181cd:	83 e3 02             	and    ebx,0x2
c00181d0:	0f b6 cb             	movzx  ecx,bl
c00181d3:	c1 e1 03             	shl    ecx,0x3
c00181d6:	d3 e8                	shr    eax,cl
c00181d8:	eb 43                	jmp    c001821d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181da:	83 ff 02             	cmp    edi,0x2
c00181dd:	75 2c                	jne    c001820b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	0f b6 c9             	movzx  ecx,cl
c00181e5:	0f b6 d2             	movzx  edx,dl
c00181e8:	0f b6 fb             	movzx  edi,bl
c00181eb:	0f b6 c0             	movzx  eax,al
c00181ee:	57                   	push   edi
c00181ef:	51                   	push   ecx
c00181f0:	52                   	push   edx
c00181f1:	50                   	push   eax
c00181f2:	56                   	push   esi
c00181f3:	e8 14 ff ff ff       	call   c001810c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181f8:	89 c2                	mov    edx,eax
c00181fa:	ed                   	in     eax,dx
c00181fb:	83 e3 02             	and    ebx,0x2
c00181fe:	83 c4 20             	add    esp,0x20
c0018201:	0f b6 cb             	movzx  ecx,bl
c0018204:	c1 e1 03             	shl    ecx,0x3
c0018207:	d3 e8                	shr    eax,cl
c0018209:	eb 12                	jmp    c001821d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001820b:	83 ec 0c             	sub    esp,0xc
c001820e:	68 37 ec 01 c0       	push   0xc001ec37
c0018213:	e8 eb 7e ff ff       	call   c0010103 <KePanic(char const*)>
c0018218:	83 c4 10             	add    esp,0x10
c001821b:	31 c0                	xor    eax,eax
c001821d:	5b                   	pop    ebx
c001821e:	5e                   	pop    esi
c001821f:	5f                   	pop    edi
c0018220:	c3                   	ret    
c0018221:	90                   	nop

c0018222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018222:	83 ec 18             	sub    esp,0x18
c0018225:	6a 00                	push   0x0
c0018227:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001822c:	50                   	push   eax
c001822d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018232:	50                   	push   eax
c0018233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018238:	50                   	push   eax
c0018239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001823d:	e8 38 ff ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018242:	83 c4 2c             	add    esp,0x2c
c0018245:	c3                   	ret    

c0018246 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0018246:	83 ec 18             	sub    esp,0x18
c0018249:	6a 0e                	push   0xe
c001824b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018250:	50                   	push   eax
c0018251:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018256:	50                   	push   eax
c0018257:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001825c:	50                   	push   eax
c001825d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018261:	e8 14 ff ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018266:	83 c4 2c             	add    esp,0x2c
c0018269:	0f b6 c0             	movzx  eax,al
c001826c:	c3                   	ret    
c001826d:	90                   	nop

c001826e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001826e:	55                   	push   ebp
c001826f:	57                   	push   edi
c0018270:	56                   	push   esi
c0018271:	53                   	push   ebx
c0018272:	83 ec 18             	sub    esp,0x18
c0018275:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001827a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001827f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018284:	6a 0a                	push   0xa
c0018286:	56                   	push   esi
c0018287:	55                   	push   ebp
c0018288:	57                   	push   edi
c0018289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001828d:	e8 e8 fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018292:	83 c4 14             	add    esp,0x14
c0018295:	89 c3                	mov    ebx,eax
c0018297:	6a 0a                	push   0xa
c0018299:	0f b6 db             	movzx  ebx,bl
c001829c:	56                   	push   esi
c001829d:	55                   	push   ebp
c001829e:	57                   	push   edi
c001829f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182a3:	e8 d2 fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182a8:	83 c4 2c             	add    esp,0x2c
c00182ab:	25 00 ff 00 00       	and    eax,0xff00
c00182b0:	09 d8                	or     eax,ebx
c00182b2:	5b                   	pop    ebx
c00182b3:	5e                   	pop    esi
c00182b4:	5f                   	pop    edi
c00182b5:	5d                   	pop    ebp
c00182b6:	c3                   	ret    
c00182b7:	90                   	nop

c00182b8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00182b8:	83 ec 18             	sub    esp,0x18
c00182bb:	6a 08                	push   0x8
c00182bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c2:	50                   	push   eax
c00182c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c8:	50                   	push   eax
c00182c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ce:	50                   	push   eax
c00182cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182d3:	e8 a2 fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182d8:	83 c4 2c             	add    esp,0x2c
c00182db:	0f b6 c4             	movzx  eax,ah
c00182de:	c3                   	ret    
c00182df:	90                   	nop

c00182e0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00182e0:	83 ec 18             	sub    esp,0x18
c00182e3:	6a 08                	push   0x8
c00182e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ea:	50                   	push   eax
c00182eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182f0:	50                   	push   eax
c00182f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182f6:	50                   	push   eax
c00182f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182fb:	e8 7a fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018300:	83 c4 2c             	add    esp,0x2c
c0018303:	c3                   	ret    

c0018304 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018304:	83 ec 18             	sub    esp,0x18
c0018307:	6a 3c                	push   0x3c
c0018309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001830e:	50                   	push   eax
c001830f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018314:	50                   	push   eax
c0018315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001831a:	50                   	push   eax
c001831b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001831f:	e8 56 fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018324:	83 c4 2c             	add    esp,0x2c
c0018327:	c3                   	ret    

c0018328 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018328:	83 ec 18             	sub    esp,0x18
c001832b:	6a 18                	push   0x18
c001832d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018332:	50                   	push   eax
c0018333:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018338:	50                   	push   eax
c0018339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001833e:	50                   	push   eax
c001833f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018343:	e8 32 fe ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018348:	83 c4 2c             	add    esp,0x2c
c001834b:	0f b6 c4             	movzx  eax,ah
c001834e:	c3                   	ret    
c001834f:	90                   	nop

c0018350 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018350:	55                   	push   ebp
c0018351:	57                   	push   edi
c0018352:	56                   	push   esi
c0018353:	53                   	push   ebx
c0018354:	83 ec 28             	sub    esp,0x28
c0018357:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001835b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018360:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018365:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001836a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018371:	8d 43 12             	lea    eax,[ebx+0x12]
c0018374:	83 c3 10             	add    ebx,0x10
c0018377:	0f b6 c0             	movzx  eax,al
c001837a:	0f b6 db             	movzx  ebx,bl
c001837d:	50                   	push   eax
c001837e:	51                   	push   ecx
c001837f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018383:	57                   	push   edi
c0018384:	55                   	push   ebp
c0018385:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018389:	e8 ec fd ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001838e:	83 c4 14             	add    esp,0x14
c0018391:	89 c6                	mov    esi,eax
c0018393:	53                   	push   ebx
c0018394:	c1 e6 10             	shl    esi,0x10
c0018397:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001839b:	51                   	push   ecx
c001839c:	57                   	push   edi
c001839d:	55                   	push   ebp
c001839e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183a2:	e8 d3 fd ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183a7:	83 c4 3c             	add    esp,0x3c
c00183aa:	0f b7 c0             	movzx  eax,ax
c00183ad:	5b                   	pop    ebx
c00183ae:	09 f0                	or     eax,esi
c00183b0:	5e                   	pop    esi
c00183b1:	5f                   	pop    edi
c00183b2:	5d                   	pop    ebp
c00183b3:	c3                   	ret    

c00183b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00183b4:	55                   	push   ebp
c00183b5:	57                   	push   edi
c00183b6:	56                   	push   esi
c00183b7:	53                   	push   ebx
c00183b8:	83 ec 0c             	sub    esp,0xc
c00183bb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00183bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183c3:	89 f5                	mov    ebp,esi
c00183c5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00183cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00183cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00183d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00183db:	83 f9 01             	cmp    ecx,0x1
c00183de:	75 5d                	jne    c001843d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00183e0:	0f b6 c8             	movzx  ecx,al
c00183e3:	0f b6 d2             	movzx  edx,dl
c00183e6:	c1 e1 10             	shl    ecx,0x10
c00183e9:	c1 e2 0b             	shl    edx,0xb
c00183ec:	89 f0                	mov    eax,esi
c00183ee:	25 fc 00 00 00       	and    eax,0xfc
c00183f3:	09 c1                	or     ecx,eax
c00183f5:	89 e8                	mov    eax,ebp
c00183f7:	0f b6 c0             	movzx  eax,al
c00183fa:	c1 e0 08             	shl    eax,0x8
c00183fd:	09 c1                	or     ecx,eax
c00183ff:	09 d1                	or     ecx,edx
c0018401:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018406:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001840c:	89 c8                	mov    eax,ecx
c001840e:	ef                   	out    dx,eax
c001840f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018414:	ed                   	in     eax,dx
c0018415:	0f b7 db             	movzx  ebx,bx
c0018418:	83 e6 02             	and    esi,0x2
c001841b:	74 0a                	je     c0018427 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001841d:	0f b7 d0             	movzx  edx,ax
c0018420:	c1 e3 10             	shl    ebx,0x10
c0018423:	09 d3                	or     ebx,edx
c0018425:	eb 05                	jmp    c001842c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018427:	66 31 c0             	xor    ax,ax
c001842a:	09 c3                	or     ebx,eax
c001842c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018431:	89 c8                	mov    eax,ecx
c0018433:	ef                   	out    dx,eax
c0018434:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018439:	89 d8                	mov    eax,ebx
c001843b:	eb 41                	jmp    c001847e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001843d:	83 f9 02             	cmp    ecx,0x2
c0018440:	75 45                	jne    c0018487 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018442:	83 ec 0c             	sub    esp,0xc
c0018445:	0f b6 d2             	movzx  edx,dl
c0018448:	89 f1                	mov    ecx,esi
c001844a:	0f b6 c0             	movzx  eax,al
c001844d:	0f b6 f1             	movzx  esi,cl
c0018450:	89 e9                	mov    ecx,ebp
c0018452:	56                   	push   esi
c0018453:	0f b6 c9             	movzx  ecx,cl
c0018456:	51                   	push   ecx
c0018457:	52                   	push   edx
c0018458:	50                   	push   eax
c0018459:	57                   	push   edi
c001845a:	e8 ad fc ff ff       	call   c001810c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001845f:	89 c2                	mov    edx,eax
c0018461:	ed                   	in     eax,dx
c0018462:	83 c4 20             	add    esp,0x20
c0018465:	0f b7 db             	movzx  ebx,bx
c0018468:	f6 c2 02             	test   dl,0x2
c001846b:	74 0c                	je     c0018479 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001846d:	0f b7 c8             	movzx  ecx,ax
c0018470:	89 d8                	mov    eax,ebx
c0018472:	c1 e0 10             	shl    eax,0x10
c0018475:	09 c8                	or     eax,ecx
c0018477:	eb 05                	jmp    c001847e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018479:	66 31 c0             	xor    ax,ax
c001847c:	09 d8                	or     eax,ebx
c001847e:	ef                   	out    dx,eax
c001847f:	83 c4 0c             	add    esp,0xc
c0018482:	5b                   	pop    ebx
c0018483:	5e                   	pop    esi
c0018484:	5f                   	pop    edi
c0018485:	5d                   	pop    ebp
c0018486:	c3                   	ret    
c0018487:	c7 44 24 20 37 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ec37
c001848f:	83 c4 0c             	add    esp,0xc
c0018492:	5b                   	pop    ebx
c0018493:	5e                   	pop    esi
c0018494:	5f                   	pop    edi
c0018495:	5d                   	pop    ebp
c0018496:	e9 68 7c ff ff       	jmp    c0010103 <KePanic(char const*)>
c001849b:	90                   	nop

c001849c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001849c:	55                   	push   ebp
c001849d:	57                   	push   edi
c001849e:	56                   	push   esi
c001849f:	53                   	push   ebx
c00184a0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00184a6:	80 3d ec 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240ec,0x0
c00184ad:	0f 85 84 00 00 00    	jne    c0018537 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00184b3:	83 ec 0c             	sub    esp,0xc
c00184b6:	68 14 01 00 00       	push   0x114
c00184bb:	e8 f9 f2 fe ff       	call   c00077b9 <malloc>
c00184c0:	83 c4 0c             	add    esp,0xc
c00184c3:	89 c3                	mov    ebx,eax
c00184c5:	ff 35 30 37 02 c0    	push   DWORD PTR ds:0xc0023730
c00184cb:	68 3d ec 01 c0       	push   0xc001ec3d
c00184d0:	50                   	push   eax
c00184d1:	e8 28 25 ff ff       	call   c000a9fe <File::File(char const*, Process*)>
c00184d6:	5a                   	pop    edx
c00184d7:	59                   	pop    ecx
c00184d8:	6a 01                	push   0x1
c00184da:	53                   	push   ebx
c00184db:	e8 de 25 ff ff       	call   c000aabe <File::open(FileOpenMode)>
c00184e0:	83 c4 0c             	add    esp,0xc
c00184e3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00184e7:	50                   	push   eax
c00184e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184ec:	50                   	push   eax
c00184ed:	53                   	push   ebx
c00184ee:	e8 77 28 ff ff       	call   c000ad6a <File::stat(unsigned long long*, bool*)>
c00184f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f7:	40                   	inc    eax
c00184f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00184fb:	e8 b9 f2 fe ff       	call   c00077b9 <malloc>
c0018500:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018504:	a3 e8 40 02 c0       	mov    ds:0xc00240e8,eax
c0018509:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001850d:	5e                   	pop    esi
c001850e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018510:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018514:	51                   	push   ecx
c0018515:	50                   	push   eax
c0018516:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001851a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001851e:	53                   	push   ebx
c001851f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018522:	83 c4 14             	add    esp,0x14
c0018525:	53                   	push   ebx
c0018526:	e8 f1 25 ff ff       	call   c000ab1c <File::close()>
c001852b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852f:	83 c4 10             	add    esp,0x10
c0018532:	a3 e4 40 02 c0       	mov    ds:0xc00240e4,eax
c0018537:	a1 e4 40 02 c0       	mov    eax,ds:0xc00240e4
c001853c:	8b 15 e8 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240e8
c0018542:	89 04 24             	mov    DWORD PTR [esp],eax
c0018545:	31 ff                	xor    edi,edi
c0018547:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001854f:	31 f6                	xor    esi,esi
c0018551:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018556:	31 db                	xor    ebx,ebx
c0018558:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018560:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018565:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001856c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018570:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018577:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001857b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001857e:	0f 8e 6b 01 00 00    	jle    c00186ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018584:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018587:	d4 40                	aam    0x40
c0018589:	d5 39                	aad    0x39
c001858b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001858f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018593:	d4 40                	aam    0x40
c0018595:	d5 39                	aad    0x39
c0018597:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001859b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001859f:	d4 40                	aam    0x40
c00185a1:	d5 39                	aad    0x39
c00185a3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00185a7:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00185ab:	d4 40                	aam    0x40
c00185ad:	d5 39                	aad    0x39
c00185af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00185b3:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00185b7:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00185bb:	3c 56                	cmp    al,0x56
c00185bd:	74 45                	je     c0018604 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00185bf:	d4 40                	aam    0x40
c00185c1:	d5 39                	aad    0x39
c00185c3:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185c6:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00185ca:	0f b6 c9             	movzx  ecx,cl
c00185cd:	c1 e1 04             	shl    ecx,0x4
c00185d0:	d4 40                	aam    0x40
c00185d2:	d5 39                	aad    0x39
c00185d4:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185d7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00185db:	0f b6 db             	movzx  ebx,bl
c00185de:	09 cb                	or     ebx,ecx
c00185e0:	c1 e3 04             	shl    ebx,0x4
c00185e3:	d4 40                	aam    0x40
c00185e5:	d5 39                	aad    0x39
c00185e7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00185ea:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00185ee:	0f b6 c9             	movzx  ecx,cl
c00185f1:	09 cb                	or     ebx,ecx
c00185f3:	c1 e3 04             	shl    ebx,0x4
c00185f6:	89 d9                	mov    ecx,ebx
c00185f8:	d4 40                	aam    0x40
c00185fa:	d5 39                	aad    0x39
c00185fc:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185ff:	0f b6 db             	movzx  ebx,bl
c0018602:	09 cb                	or     ebx,ecx
c0018604:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018608:	80 f9 44             	cmp    cl,0x44
c001860b:	74 47                	je     c0018654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001860d:	88 c8                	mov    al,cl
c001860f:	d4 40                	aam    0x40
c0018611:	d5 39                	aad    0x39
c0018613:	83 e8 30             	sub    eax,0x30
c0018616:	0f b6 e8             	movzx  ebp,al
c0018619:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001861d:	c1 e5 04             	shl    ebp,0x4
c0018620:	d4 40                	aam    0x40
c0018622:	d5 39                	aad    0x39
c0018624:	83 e8 30             	sub    eax,0x30
c0018627:	0f b6 f0             	movzx  esi,al
c001862a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001862e:	09 ee                	or     esi,ebp
c0018630:	c1 e6 04             	shl    esi,0x4
c0018633:	d4 40                	aam    0x40
c0018635:	d5 39                	aad    0x39
c0018637:	83 e8 30             	sub    eax,0x30
c001863a:	0f b6 e8             	movzx  ebp,al
c001863d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018641:	09 ee                	or     esi,ebp
c0018643:	c1 e6 04             	shl    esi,0x4
c0018646:	89 f5                	mov    ebp,esi
c0018648:	d4 40                	aam    0x40
c001864a:	d5 39                	aad    0x39
c001864c:	83 e8 30             	sub    eax,0x30
c001864f:	0f b6 f0             	movzx  esi,al
c0018652:	09 ee                	or     esi,ebp
c0018654:	83 c7 10             	add    edi,0x10
c0018657:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001865b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001865e:	3c 0a                	cmp    al,0xa
c0018660:	74 09                	je     c001866b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018662:	45                   	inc    ebp
c0018663:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018666:	75 16                	jne    c001867e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018668:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001866b:	3c 0a                	cmp    al,0xa
c001866d:	0f 94 c0             	sete   al
c0018670:	0f b6 c0             	movzx  eax,al
c0018673:	01 c7                	add    edi,eax
c0018675:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001867a:	75 0c                	jne    c0018688 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001867c:	eb 15                	jmp    c0018693 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001867e:	47                   	inc    edi
c001867f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018682:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018686:	eb d3                	jmp    c001865b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018688:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001868d:	0f 85 e8 fe ff ff    	jne    c001857b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018693:	80 f9 44             	cmp    cl,0x44
c0018696:	74 0b                	je     c00186a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018698:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001869d:	0f 85 d8 fe ff ff    	jne    c001857b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186a3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00186a7:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00186ab:	c1 e1 04             	shl    ecx,0x4
c00186ae:	83 e8 30             	sub    eax,0x30
c00186b1:	09 c8                	or     eax,ecx
c00186b3:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00186b7:	0f 85 be fe ff ff    	jne    c001857b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186bd:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00186c1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186c5:	c1 e1 04             	shl    ecx,0x4
c00186c8:	83 e8 30             	sub    eax,0x30
c00186cb:	09 c8                	or     eax,ecx
c00186cd:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00186d1:	0f 85 a4 fe ff ff    	jne    c001857b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00186d7:	50                   	push   eax
c00186d8:	50                   	push   eax
c00186d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00186dd:	50                   	push   eax
c00186de:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00186e5:	e8 16 7f fe ff       	call   c0000600 <strcpy>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	eb 15                	jmp    c0018704 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00186ef:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186f6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018701:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018704:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001870b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018711:	5b                   	pop    ebx
c0018712:	5e                   	pop    esi
c0018713:	5f                   	pop    edi
c0018714:	5d                   	pop    ebp
c0018715:	c3                   	ret    

c0018716 <PCI::checkBus(unsigned char)>:
c0018716:	56                   	push   esi
c0018717:	53                   	push   ebx
c0018718:	31 f6                	xor    esi,esi
c001871a:	51                   	push   ecx
c001871b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001871f:	0f b6 c3             	movzx  eax,bl
c0018722:	52                   	push   edx
c0018723:	56                   	push   esi
c0018724:	46                   	inc    esi
c0018725:	50                   	push   eax
c0018726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001872a:	e8 f3 02 00 00       	call   c0018a22 <PCI::checkDevice(unsigned char, unsigned char)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	83 fe 20             	cmp    esi,0x20
c0018735:	75 e8                	jne    c001871f <PCI::checkBus(unsigned char)+0x9>
c0018737:	58                   	pop    eax
c0018738:	5b                   	pop    ebx
c0018739:	5e                   	pop    esi
c001873a:	c3                   	ret    
c001873b:	90                   	nop

c001873c <PCI::foundDevice(PCIDeviceInfo)>:
c001873c:	55                   	push   ebp
c001873d:	57                   	push   edi
c001873e:	56                   	push   esi
c001873f:	53                   	push   ebx
c0018740:	83 ec 1c             	sub    esp,0x1c
c0018743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018747:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001874d:	0f 84 52 01 00 00    	je     c00188a5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018753:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018757:	66 81 f9 06 04       	cmp    cx,0x406
c001875c:	75 2c                	jne    c001878a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001875e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018763:	50                   	push   eax
c0018764:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018769:	50                   	push   eax
c001876a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001876f:	50                   	push   eax
c0018770:	56                   	push   esi
c0018771:	e8 b2 fb ff ff       	call   c0018328 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018776:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001877a:	0f b6 c0             	movzx  eax,al
c001877d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018781:	83 c4 2c             	add    esp,0x2c
c0018784:	5b                   	pop    ebx
c0018785:	5e                   	pop    esi
c0018786:	5f                   	pop    edi
c0018787:	5d                   	pop    ebp
c0018788:	eb 8c                	jmp    c0018716 <PCI::checkBus(unsigned char)>
c001878a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001878e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018794:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018798:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001879c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00187a0:	88 d3                	mov    bl,dl
c00187a2:	85 c0                	test   eax,eax
c00187a4:	74 33                	je     c00187d9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00187a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00187a9:	85 d2                	test   edx,edx
c00187ab:	74 28                	je     c00187d5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187ad:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00187b3:	31 ef                	xor    edi,ebp
c00187b5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00187bb:	75 18                	jne    c00187d5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187bd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00187c1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00187c7:	75 0c                	jne    c00187d5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00187c9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00187cf:	0f 84 d0 00 00 00    	je     c00188a5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00187d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00187d7:	eb c9                	jmp    c00187a2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00187d9:	66 81 f9 01 06       	cmp    cx,0x601
c00187de:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00187e2:	75 19                	jne    c00187fd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00187e4:	83 ec 0c             	sub    esp,0xc
c00187e7:	68 64 01 00 00       	push   0x164
c00187ec:	e8 c8 ef fe ff       	call   c00077b9 <malloc>
c00187f1:	89 c5                	mov    ebp,eax
c00187f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00187f6:	e8 47 0e 00 00       	call   c0019642 <SATABus::SATABus()>
c00187fb:	eb 1e                	jmp    c001881b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00187fd:	66 81 f9 01 01       	cmp    cx,0x101
c0018802:	75 60                	jne    c0018864 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	68 70 02 00 00       	push   0x270
c001880c:	e8 a8 ef fe ff       	call   c00077b9 <malloc>
c0018811:	89 c5                	mov    ebp,eax
c0018813:	89 04 24             	mov    DWORD PTR [esp],eax
c0018816:	e8 cb 02 00 00       	call   c0018ae6 <IDE::IDE()>
c001881b:	58                   	pop    eax
c001881c:	5a                   	pop    edx
c001881d:	55                   	push   ebp
c001881e:	56                   	push   esi
c001881f:	e8 a4 30 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c0018824:	83 ec 1c             	sub    esp,0x1c
c0018827:	b9 09 00 00 00       	mov    ecx,0x9
c001882c:	fc                   	cld    
c001882d:	89 e7                	mov    edi,esp
c001882f:	89 de                	mov    esi,ebx
c0018831:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018833:	55                   	push   ebp
c0018834:	e8 d5 2f ff ff       	call   c000b80e <Device::preOpenPCI(PCIDeviceInfo)>
c0018839:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001883c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018840:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018848:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018850:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018858:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001885b:	83 c4 4c             	add    esp,0x4c
c001885e:	5b                   	pop    ebx
c001885f:	5e                   	pop    esi
c0018860:	5f                   	pop    edi
c0018861:	5d                   	pop    ebp
c0018862:	ff e0                	jmp    eax
c0018864:	83 ec 0c             	sub    esp,0xc
c0018867:	68 58 01 00 00       	push   0x158
c001886c:	e8 48 ef fe ff       	call   c00077b9 <malloc>
c0018871:	89 c5                	mov    ebp,eax
c0018873:	58                   	pop    eax
c0018874:	5a                   	pop    edx
c0018875:	68 56 ec 01 c0       	push   0xc001ec56
c001887a:	55                   	push   ebp
c001887b:	e8 e6 32 ff ff       	call   c000bb66 <DriverlessDevice::DriverlessDevice(char const*)>
c0018880:	59                   	pop    ecx
c0018881:	5f                   	pop    edi
c0018882:	55                   	push   ebp
c0018883:	56                   	push   esi
c0018884:	e8 3f 30 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c0018889:	b9 09 00 00 00       	mov    ecx,0x9
c001888e:	fc                   	cld    
c001888f:	89 df                	mov    edi,ebx
c0018891:	89 de                	mov    esi,ebx
c0018893:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018895:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018899:	83 c4 2c             	add    esp,0x2c
c001889c:	5b                   	pop    ebx
c001889d:	5e                   	pop    esi
c001889e:	5f                   	pop    edi
c001889f:	5d                   	pop    ebp
c00188a0:	e9 69 2f ff ff       	jmp    c000b80e <Device::preOpenPCI(PCIDeviceInfo)>
c00188a5:	83 c4 1c             	add    esp,0x1c
c00188a8:	5b                   	pop    ebx
c00188a9:	5e                   	pop    esi
c00188aa:	5f                   	pop    edi
c00188ab:	5d                   	pop    ebp
c00188ac:	c3                   	ret    
c00188ad:	90                   	nop

c00188ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00188ae:	55                   	push   ebp
c00188af:	57                   	push   edi
c00188b0:	56                   	push   esi
c00188b1:	53                   	push   ebx
c00188b2:	83 ec 68             	sub    esp,0x68
c00188b5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00188b9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00188c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188c4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00188cb:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c00188d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00188d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00188db:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c00188e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00188e4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00188e9:	6a 0c                	push   0xc
c00188eb:	57                   	push   edi
c00188ec:	53                   	push   ebx
c00188ed:	56                   	push   esi
c00188ee:	55                   	push   ebp
c00188ef:	e8 86 f8 ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f4:	83 c4 20             	add    esp,0x20
c00188f7:	57                   	push   edi
c00188f8:	53                   	push   ebx
c00188f9:	56                   	push   esi
c00188fa:	55                   	push   ebp
c00188fb:	e8 6e f9 ff ff       	call   c001826e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018900:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018905:	57                   	push   edi
c0018906:	53                   	push   ebx
c0018907:	56                   	push   esi
c0018908:	55                   	push   ebp
c0018909:	e8 f6 f9 ff ff       	call   c0018304 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001890e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018912:	83 c4 14             	add    esp,0x14
c0018915:	6a 3c                	push   0x3c
c0018917:	57                   	push   edi
c0018918:	53                   	push   ebx
c0018919:	56                   	push   esi
c001891a:	55                   	push   ebp
c001891b:	e8 5a f8 ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018920:	0f b6 c4             	movzx  eax,ah
c0018923:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018927:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001892b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001892f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c0018934:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001893a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018940:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018944:	83 c4 20             	add    esp,0x20
c0018947:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001894c:	74 30                	je     c001897e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001894e:	31 c0                	xor    eax,eax
c0018950:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018954:	7e 28                	jle    c001897e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018956:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001895e:	39 cb                	cmp    ebx,ecx
c0018960:	75 19                	jne    c001897b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018962:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001896a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001896e:	75 0b                	jne    c001897b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018970:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018977:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001897b:	40                   	inc    eax
c001897c:	eb d2                	jmp    c0018950 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001897e:	31 d2                	xor    edx,edx
c0018980:	83 ec 0c             	sub    esp,0xc
c0018983:	57                   	push   edi
c0018984:	53                   	push   ebx
c0018985:	56                   	push   esi
c0018986:	52                   	push   edx
c0018987:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001898b:	55                   	push   ebp
c001898c:	e8 bf f9 ff ff       	call   c0018350 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018991:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018995:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018999:	42                   	inc    edx
c001899a:	83 c4 20             	add    esp,0x20
c001899d:	83 fa 06             	cmp    edx,0x6
c00189a0:	75 de                	jne    c0018980 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c00189a2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189a7:	83 ec 0c             	sub    esp,0xc
c00189aa:	86 e0                	xchg   al,ah
c00189ac:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00189b1:	6a 02                	push   0x2
c00189b3:	57                   	push   edi
c00189b4:	53                   	push   ebx
c00189b5:	56                   	push   esi
c00189b6:	55                   	push   ebp
c00189b7:	e8 be f7 ff ff       	call   c001817a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189bc:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00189c1:	83 c4 20             	add    esp,0x20
c00189c4:	57                   	push   edi
c00189c5:	53                   	push   ebx
c00189c6:	56                   	push   esi
c00189c7:	55                   	push   ebp
c00189c8:	e8 eb f8 ff ff       	call   c00182b8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00189cd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00189d1:	57                   	push   edi
c00189d2:	53                   	push   ebx
c00189d3:	56                   	push   esi
c00189d4:	55                   	push   ebp
c00189d5:	e8 48 f8 ff ff       	call   c0018222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189da:	b9 09 00 00 00       	mov    ecx,0x9
c00189df:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00189e4:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c00189e8:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00189ec:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00189f0:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00189f4:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00189f8:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00189fc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a00:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a04:	83 ec 0c             	sub    esp,0xc
c0018a07:	fc                   	cld    
c0018a08:	89 e7                	mov    edi,esp
c0018a0a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a10:	55                   	push   ebp
c0018a11:	e8 26 fd ff ff       	call   c001873c <PCI::foundDevice(PCIDeviceInfo)>
c0018a16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a1c:	5b                   	pop    ebx
c0018a1d:	5e                   	pop    esi
c0018a1e:	5f                   	pop    edi
c0018a1f:	5d                   	pop    ebp
c0018a20:	c3                   	ret    
c0018a21:	90                   	nop

c0018a22 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018a22:	55                   	push   ebp
c0018a23:	57                   	push   edi
c0018a24:	56                   	push   esi
c0018a25:	53                   	push   ebx
c0018a26:	83 ec 0c             	sub    esp,0xc
c0018a29:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a2d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018a32:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018a37:	6a 00                	push   0x0
c0018a39:	56                   	push   esi
c0018a3a:	57                   	push   edi
c0018a3b:	55                   	push   ebp
c0018a3c:	e8 e1 f7 ff ff       	call   c0018222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a41:	6a 00                	push   0x0
c0018a43:	56                   	push   esi
c0018a44:	57                   	push   edi
c0018a45:	55                   	push   ebp
c0018a46:	e8 63 fe ff ff       	call   c00188ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a4b:	83 c4 20             	add    esp,0x20
c0018a4e:	6a 00                	push   0x0
c0018a50:	56                   	push   esi
c0018a51:	57                   	push   edi
c0018a52:	55                   	push   ebp
c0018a53:	e8 ee f7 ff ff       	call   c0018246 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a58:	83 c4 10             	add    esp,0x10
c0018a5b:	84 c0                	test   al,al
c0018a5d:	79 27                	jns    c0018a86 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a5f:	bb 01 00 00 00       	mov    ebx,0x1
c0018a64:	53                   	push   ebx
c0018a65:	56                   	push   esi
c0018a66:	57                   	push   edi
c0018a67:	55                   	push   ebp
c0018a68:	e8 b5 f7 ff ff       	call   c0018222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a6d:	83 c4 10             	add    esp,0x10
c0018a70:	66 40                	inc    ax
c0018a72:	74 0c                	je     c0018a80 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018a74:	53                   	push   ebx
c0018a75:	56                   	push   esi
c0018a76:	57                   	push   edi
c0018a77:	55                   	push   ebp
c0018a78:	e8 31 fe ff ff       	call   c00188ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a7d:	83 c4 10             	add    esp,0x10
c0018a80:	43                   	inc    ebx
c0018a81:	83 fb 08             	cmp    ebx,0x8
c0018a84:	75 de                	jne    c0018a64 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018a86:	83 c4 0c             	add    esp,0xc
c0018a89:	5b                   	pop    ebx
c0018a8a:	5e                   	pop    esi
c0018a8b:	5f                   	pop    edi
c0018a8c:	5d                   	pop    ebp
c0018a8d:	c3                   	ret    

c0018a8e <PCI::detect()>:
c0018a8e:	56                   	push   esi
c0018a8f:	53                   	push   ebx
c0018a90:	53                   	push   ebx
c0018a91:	31 db                	xor    ebx,ebx
c0018a93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a97:	6a 00                	push   0x0
c0018a99:	6a 00                	push   0x0
c0018a9b:	6a 00                	push   0x0
c0018a9d:	56                   	push   esi
c0018a9e:	e8 a3 f7 ff ff       	call   c0018246 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018aa3:	83 c4 10             	add    esp,0x10
c0018aa6:	a8 80                	test   al,0x80
c0018aa8:	75 21                	jne    c0018acb <PCI::detect()+0x3d>
c0018aaa:	51                   	push   ecx
c0018aab:	51                   	push   ecx
c0018aac:	6a 00                	push   0x0
c0018aae:	56                   	push   esi
c0018aaf:	e8 62 fc ff ff       	call   c0018716 <PCI::checkBus(unsigned char)>
c0018ab4:	83 c4 10             	add    esp,0x10
c0018ab7:	eb 24                	jmp    c0018add <PCI::detect()+0x4f>
c0018ab9:	52                   	push   edx
c0018aba:	52                   	push   edx
c0018abb:	53                   	push   ebx
c0018abc:	43                   	inc    ebx
c0018abd:	56                   	push   esi
c0018abe:	e8 53 fc ff ff       	call   c0018716 <PCI::checkBus(unsigned char)>
c0018ac3:	83 c4 10             	add    esp,0x10
c0018ac6:	83 fb 08             	cmp    ebx,0x8
c0018ac9:	74 12                	je     c0018add <PCI::detect()+0x4f>
c0018acb:	53                   	push   ebx
c0018acc:	6a 00                	push   0x0
c0018ace:	6a 00                	push   0x0
c0018ad0:	56                   	push   esi
c0018ad1:	e8 4c f7 ff ff       	call   c0018222 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ad6:	83 c4 10             	add    esp,0x10
c0018ad9:	66 40                	inc    ax
c0018adb:	74 dc                	je     c0018ab9 <PCI::detect()+0x2b>
c0018add:	58                   	pop    eax
c0018ade:	5b                   	pop    ebx
c0018adf:	5e                   	pop    esi
c0018ae0:	c3                   	ret    
c0018ae1:	90                   	nop

c0018ae2 <IDE::close(int, int, void*)>:
c0018ae2:	83 c8 ff             	or     eax,0xffffffff
c0018ae5:	c3                   	ret    

c0018ae6 <IDE::IDE()>:
c0018ae6:	83 ec 0c             	sub    esp,0xc
c0018ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aed:	83 ec 08             	sub    esp,0x8
c0018af0:	68 9c ec 01 c0       	push   0xc001ec9c
c0018af5:	50                   	push   eax
c0018af6:	e8 11 31 ff ff       	call   c000bc0c <HardDiskController::HardDiskController(char const*)>
c0018afb:	83 c4 10             	add    esp,0x10
c0018afe:	ba 2c ed 01 c0       	mov    edx,0xc001ed2c
c0018b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b07:	89 10                	mov    DWORD PTR [eax],edx
c0018b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b14:	90                   	nop
c0018b15:	83 c4 0c             	add    esp,0xc
c0018b18:	c3                   	ret    
c0018b19:	90                   	nop

c0018b1a <IDE::prepareInterrupt(unsigned char)>:
c0018b1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018b23:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018b2b:	c3                   	ret    

c0018b2c <selectDrive(unsigned char, unsigned char)>:
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop

c0018b2e <IDE::getBase(unsigned char)>:
c0018b2e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b37:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018b3f:	c3                   	ret    

c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018b40:	55                   	push   ebp
c0018b41:	57                   	push   edi
c0018b42:	56                   	push   esi
c0018b43:	53                   	push   ebx
c0018b44:	83 ec 1c             	sub    esp,0x1c
c0018b47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b4f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b56:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b5a:	80 f9 03             	cmp    cl,0x3
c0018b5d:	77 51                	ja     c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b63:	0f b6 f2             	movzx  esi,dl
c0018b66:	0f b6 db             	movzx  ebx,bl
c0018b69:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018b6c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018b70:	83 ca 80             	or     edx,0xffffff80
c0018b73:	0f b6 d2             	movzx  edx,dl
c0018b76:	52                   	push   edx
c0018b77:	6a 0c                	push   0xc
c0018b79:	56                   	push   esi
c0018b7a:	57                   	push   edi
c0018b7b:	e8 c0 ff ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b80:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018b85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b89:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018b8d:	ee                   	out    dx,al
c0018b8e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018b93:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018b97:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018b9b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b9f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018ba7:	83 c4 2c             	add    esp,0x2c
c0018baa:	5b                   	pop    ebx
c0018bab:	5e                   	pop    esi
c0018bac:	5f                   	pop    edi
c0018bad:	5d                   	pop    ebp
c0018bae:	eb 90                	jmp    c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bb0:	80 fb 07             	cmp    bl,0x7
c0018bb3:	77 12                	ja     c0018bc7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018bb5:	0f b6 d2             	movzx  edx,dl
c0018bb8:	0f b6 db             	movzx  ebx,bl
c0018bbb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018bc3:	89 da                	mov    edx,ebx
c0018bc5:	eb 2f                	jmp    c0018bf6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bc7:	80 fb 0d             	cmp    bl,0xd
c0018bca:	77 13                	ja     c0018bdf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018bcc:	0f b6 d2             	movzx  edx,dl
c0018bcf:	0f b6 db             	movzx  ebx,bl
c0018bd2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018bd9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018bdd:	eb 17                	jmp    c0018bf6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018bdf:	80 fb 15             	cmp    bl,0x15
c0018be2:	77 13                	ja     c0018bf7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018be4:	0f b6 d2             	movzx  edx,dl
c0018be7:	0f b6 db             	movzx  ebx,bl
c0018bea:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018bf2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018bf6:	ee                   	out    dx,al
c0018bf7:	83 c4 1c             	add    esp,0x1c
c0018bfa:	5b                   	pop    ebx
c0018bfb:	5e                   	pop    esi
c0018bfc:	5f                   	pop    edi
c0018bfd:	5d                   	pop    ebp
c0018bfe:	c3                   	ret    
c0018bff:	90                   	nop

c0018c00 <IDE::read(unsigned char, unsigned char)>:
c0018c00:	55                   	push   ebp
c0018c01:	57                   	push   edi
c0018c02:	56                   	push   esi
c0018c03:	53                   	push   ebx
c0018c04:	83 ec 1c             	sub    esp,0x1c
c0018c07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018c0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c0f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c16:	3c 03                	cmp    al,0x3
c0018c18:	77 43                	ja     c0018c5d <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c1a:	0f b6 f2             	movzx  esi,dl
c0018c1d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c20:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018c24:	83 c8 80             	or     eax,0xffffff80
c0018c27:	0f b6 c0             	movzx  eax,al
c0018c2a:	50                   	push   eax
c0018c2b:	6a 0c                	push   0xc
c0018c2d:	56                   	push   esi
c0018c2e:	57                   	push   edi
c0018c2f:	e8 0c ff ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c34:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018c39:	0f b6 c3             	movzx  eax,bl
c0018c3c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018c40:	ec                   	in     al,dx
c0018c41:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018c45:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018c4a:	52                   	push   edx
c0018c4b:	6a 0c                	push   0xc
c0018c4d:	56                   	push   esi
c0018c4e:	57                   	push   edi
c0018c4f:	e8 ec fe ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c54:	83 c4 20             	add    esp,0x20
c0018c57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c5b:	eb 49                	jmp    c0018ca6 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c5d:	80 fb 07             	cmp    bl,0x7
c0018c60:	77 12                	ja     c0018c74 <IDE::read(unsigned char, unsigned char)+0x74>
c0018c62:	0f b6 d2             	movzx  edx,dl
c0018c65:	0f b6 c3             	movzx  eax,bl
c0018c68:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018c70:	89 c2                	mov    edx,eax
c0018c72:	eb 31                	jmp    c0018ca5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c74:	80 fb 0d             	cmp    bl,0xd
c0018c77:	77 13                	ja     c0018c8c <IDE::read(unsigned char, unsigned char)+0x8c>
c0018c79:	0f b6 d2             	movzx  edx,dl
c0018c7c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018c83:	0f b6 d3             	movzx  edx,bl
c0018c86:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018c8a:	eb 19                	jmp    c0018ca5 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c8c:	31 c0                	xor    eax,eax
c0018c8e:	80 fb 15             	cmp    bl,0x15
c0018c91:	77 13                	ja     c0018ca6 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c93:	0f b6 d2             	movzx  edx,dl
c0018c96:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018c9e:	0f b6 d3             	movzx  edx,bl
c0018ca1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018ca5:	ec                   	in     al,dx
c0018ca6:	83 c4 1c             	add    esp,0x1c
c0018ca9:	5b                   	pop    ebx
c0018caa:	5e                   	pop    esi
c0018cab:	5f                   	pop    edi
c0018cac:	5d                   	pop    ebp
c0018cad:	c3                   	ret    

c0018cae <IDE::waitInterrupt(unsigned char)>:
c0018cae:	57                   	push   edi
c0018caf:	56                   	push   esi
c0018cb0:	31 f6                	xor    esi,esi
c0018cb2:	53                   	push   ebx
c0018cb3:	83 ec 10             	sub    esp,0x10
c0018cb6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018cba:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018cbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018cc2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018cc7:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018cce:	84 db                	test   bl,bl
c0018cd0:	75 33                	jne    c0018d05 <IDE::waitInterrupt(unsigned char)+0x57>
c0018cd2:	52                   	push   edx
c0018cd3:	6a 0c                	push   0xc
c0018cd5:	50                   	push   eax
c0018cd6:	57                   	push   edi
c0018cd7:	e8 24 ff ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0018cdc:	83 c4 10             	add    esp,0x10
c0018cdf:	a8 01                	test   al,0x1
c0018ce1:	75 2a                	jne    c0018d0d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018ce3:	f7 c6 04 00 00 00    	test   esi,0x4
c0018ce9:	75 12                	jne    c0018cfd <IDE::waitInterrupt(unsigned char)+0x4f>
c0018ceb:	83 fe 32             	cmp    esi,0x32
c0018cee:	7e 0d                	jle    c0018cfd <IDE::waitInterrupt(unsigned char)+0x4f>
c0018cf0:	83 ec 0c             	sub    esp,0xc
c0018cf3:	6a 64                	push   0x64
c0018cf5:	e8 1a a9 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	83 fe 3c             	cmp    esi,0x3c
c0018d00:	74 0b                	je     c0018d0d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d02:	46                   	inc    esi
c0018d03:	eb bd                	jmp    c0018cc2 <IDE::waitInterrupt(unsigned char)+0x14>
c0018d05:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	88 d8                	mov    al,bl
c0018d12:	5b                   	pop    ebx
c0018d13:	5e                   	pop    esi
c0018d14:	5f                   	pop    edi
c0018d15:	c3                   	ret    

c0018d16 <ideChannel0IRQHandler(regs*, void*)>:
c0018d16:	83 ec 10             	sub    esp,0x10
c0018d19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d1d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018d24:	6a 07                	push   0x7
c0018d26:	6a 00                	push   0x0
c0018d28:	50                   	push   eax
c0018d29:	e8 d2 fe ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0018d2e:	83 c4 1c             	add    esp,0x1c
c0018d31:	c3                   	ret    

c0018d32 <ideChannel1IRQHandler(regs*, void*)>:
c0018d32:	83 ec 10             	sub    esp,0x10
c0018d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d39:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018d40:	6a 07                	push   0x7
c0018d42:	6a 01                	push   0x1
c0018d44:	50                   	push   eax
c0018d45:	e8 b6 fe ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0018d4a:	83 c4 1c             	add    esp,0x1c
c0018d4d:	c3                   	ret    

c0018d4e <IDE::enableIRQs(unsigned char, bool)>:
c0018d4e:	57                   	push   edi
c0018d4f:	56                   	push   esi
c0018d50:	be 04 00 00 00       	mov    esi,0x4
c0018d55:	53                   	push   ebx
c0018d56:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d5f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d64:	0f 94 c0             	sete   al
c0018d67:	01 c0                	add    eax,eax
c0018d69:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018d70:	0f b6 c0             	movzx  eax,al
c0018d73:	50                   	push   eax
c0018d74:	6a 0c                	push   0xc
c0018d76:	57                   	push   edi
c0018d77:	53                   	push   ebx
c0018d78:	e8 c3 fd ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	50                   	push   eax
c0018d81:	6a 0c                	push   0xc
c0018d83:	57                   	push   edi
c0018d84:	53                   	push   ebx
c0018d85:	e8 76 fe ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0018d8a:	83 c4 10             	add    esp,0x10
c0018d8d:	4e                   	dec    esi
c0018d8e:	75 f0                	jne    c0018d80 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018d90:	5b                   	pop    ebx
c0018d91:	5e                   	pop    esi
c0018d92:	5f                   	pop    edi
c0018d93:	c3                   	ret    

c0018d94 <IDE::open(int, int, void*)>:
c0018d94:	55                   	push   ebp
c0018d95:	57                   	push   edi
c0018d96:	56                   	push   esi
c0018d97:	53                   	push   ebx
c0018d98:	83 ec 1c             	sub    esp,0x1c
c0018d9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d9f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018da8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018db1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018db8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018dbf:	0f 85 b0 02 00 00    	jne    c0019075 <IDE::open(int, int, void*)+0x2e1>
c0018dc5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018dcb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018dcf:	83 e0 7f             	and    eax,0x7f
c0018dd2:	3c 05                	cmp    al,0x5
c0018dd4:	74 04                	je     c0018dda <IDE::open(int, int, void*)+0x46>
c0018dd6:	3c 0f                	cmp    al,0xf
c0018dd8:	75 32                	jne    c0018e0c <IDE::open(int, int, void*)+0x78>
c0018dda:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018de0:	83 e0 fc             	and    eax,0xfffffffc
c0018de3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018dea:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018df0:	83 e0 fc             	and    eax,0xfffffffc
c0018df3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018dfa:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e00:	83 e0 fc             	and    eax,0xfffffffc
c0018e03:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e0a:	eb 14                	jmp    c0018e20 <IDE::open(int, int, void*)+0x8c>
c0018e0c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e16:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018e20:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018e27:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018e2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e32:	89 c6                	mov    esi,eax
c0018e34:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e39:	c1 e6 10             	shl    esi,0x10
c0018e3c:	89 e8                	mov    eax,ebp
c0018e3e:	89 fa                	mov    edx,edi
c0018e40:	c1 e0 0b             	shl    eax,0xb
c0018e43:	09 f0                	or     eax,esi
c0018e45:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e4c:	c1 e6 08             	shl    esi,0x8
c0018e4f:	09 c6                	or     esi,eax
c0018e51:	89 f0                	mov    eax,esi
c0018e53:	0d 08 00 00 80       	or     eax,0x80000008
c0018e58:	ef                   	out    dx,eax
c0018e59:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e5e:	89 ca                	mov    edx,ecx
c0018e60:	ed                   	in     eax,dx
c0018e61:	c1 e8 10             	shr    eax,0x10
c0018e64:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e69:	0f 84 f5 00 00 00    	je     c0018f64 <IDE::open(int, int, void*)+0x1d0>
c0018e6f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018e75:	89 fa                	mov    edx,edi
c0018e77:	89 f0                	mov    eax,esi
c0018e79:	ef                   	out    dx,eax
c0018e7a:	b0 fe                	mov    al,0xfe
c0018e7c:	89 ca                	mov    edx,ecx
c0018e7e:	ee                   	out    dx,al
c0018e7f:	89 f0                	mov    eax,esi
c0018e81:	89 fa                	mov    edx,edi
c0018e83:	ef                   	out    dx,eax
c0018e84:	89 ca                	mov    edx,ecx
c0018e86:	ed                   	in     eax,dx
c0018e87:	3c fe                	cmp    al,0xfe
c0018e89:	0f 85 a9 00 00 00    	jne    c0018f38 <IDE::open(int, int, void*)+0x1a4>
c0018e8f:	8b 15 58 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020458
c0018e95:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018e9c:	74 33                	je     c0018ed1 <IDE::open(int, int, void*)+0x13d>
c0018e9e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018ea4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018ea8:	40                   	inc    eax
c0018ea9:	83 ec 0c             	sub    esp,0xc
c0018eac:	0f b6 c0             	movzx  eax,al
c0018eaf:	50                   	push   eax
c0018eb0:	55                   	push   ebp
c0018eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018eb5:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018ebb:	51                   	push   ecx
c0018ebc:	e8 5b 57 ff ff       	call   c000e61c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018ec1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018ec6:	83 c4 1c             	add    esp,0x1c
c0018ec9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018ecf:	eb 0a                	jmp    c0018edb <IDE::open(int, int, void*)+0x147>
c0018ed1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018edb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018ee2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018ee9:	c1 e1 10             	shl    ecx,0x10
c0018eec:	c1 e0 08             	shl    eax,0x8
c0018eef:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ef4:	09 c1                	or     ecx,eax
c0018ef6:	89 fa                	mov    edx,edi
c0018ef8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018eff:	c1 e0 0b             	shl    eax,0xb
c0018f02:	09 c1                	or     ecx,eax
c0018f04:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018f0a:	89 c8                	mov    eax,ecx
c0018f0c:	ef                   	out    dx,eax
c0018f0d:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f12:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f18:	89 f2                	mov    edx,esi
c0018f1a:	ee                   	out    dx,al
c0018f1b:	89 c8                	mov    eax,ecx
c0018f1d:	89 fa                	mov    edx,edi
c0018f1f:	ef                   	out    dx,eax
c0018f20:	89 f2                	mov    edx,esi
c0018f22:	ed                   	in     eax,dx
c0018f23:	0f b6 c0             	movzx  eax,al
c0018f26:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018f2c:	74 46                	je     c0018f74 <IDE::open(int, int, void*)+0x1e0>
c0018f2e:	83 ec 0c             	sub    esp,0xc
c0018f31:	68 b4 ec 01 c0       	push   0xc001ecb4
c0018f36:	eb 34                	jmp    c0018f6c <IDE::open(int, int, void*)+0x1d8>
c0018f38:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018f41:	75 17                	jne    c0018f5a <IDE::open(int, int, void*)+0x1c6>
c0018f43:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018f48:	74 07                	je     c0018f51 <IDE::open(int, int, void*)+0x1bd>
c0018f4a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f4f:	75 09                	jne    c0018f5a <IDE::open(int, int, void*)+0x1c6>
c0018f51:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f58:	eb 1a                	jmp    c0018f74 <IDE::open(int, int, void*)+0x1e0>
c0018f5a:	83 ec 0c             	sub    esp,0xc
c0018f5d:	68 bc ec 01 c0       	push   0xc001ecbc
c0018f62:	eb 08                	jmp    c0018f6c <IDE::open(int, int, void*)+0x1d8>
c0018f64:	83 ec 0c             	sub    esp,0xc
c0018f67:	68 ed ec 01 c0       	push   0xc001eced
c0018f6c:	e8 92 71 ff ff       	call   c0010103 <KePanic(char const*)>
c0018f71:	83 c4 10             	add    esp,0x10
c0018f74:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018f7b:	79 1a                	jns    c0018f97 <IDE::open(int, int, void*)+0x203>
c0018f7d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018f83:	83 e0 fc             	and    eax,0xfffffffc
c0018f86:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018f8d:	83 c0 08             	add    eax,0x8
c0018f90:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018f97:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f9d:	89 c2                	mov    edx,eax
c0018f9f:	83 e2 0f             	and    edx,0xf
c0018fa2:	66 83 fa 08          	cmp    dx,0x8
c0018fa6:	75 0a                	jne    c0018fb2 <IDE::open(int, int, void*)+0x21e>
c0018fa8:	83 e8 02             	sub    eax,0x2
c0018fab:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fb2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018fb8:	89 c2                	mov    edx,eax
c0018fba:	83 e2 0f             	and    edx,0xf
c0018fbd:	66 83 fa 08          	cmp    dx,0x8
c0018fc1:	75 0a                	jne    c0018fcd <IDE::open(int, int, void*)+0x239>
c0018fc3:	83 e8 02             	sub    eax,0x2
c0018fc6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018fcd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018fd4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018fdb:	89 d0                	mov    eax,edx
c0018fdd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fe0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fe4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018fe8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018feb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018ff0:	0f b6 c9             	movzx  ecx,cl
c0018ff3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018ffa:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018ffd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019001:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019005:	8d 50 02             	lea    edx,[eax+0x2]
c0019008:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001900d:	0f b6 d2             	movzx  edx,dl
c0019010:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019016:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019019:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001901d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019021:	8d 48 03             	lea    ecx,[eax+0x3]
c0019024:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019029:	0f b6 c9             	movzx  ecx,cl
c001902c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019032:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019035:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019039:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001903d:	8d 50 04             	lea    edx,[eax+0x4]
c0019040:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0019046:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001904b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019052:	66 85 f6             	test   si,si
c0019055:	74 5b                	je     c00190b2 <IDE::open(int, int, void*)+0x31e>
c0019057:	0f b6 d2             	movzx  edx,dl
c001905a:	83 c0 05             	add    eax,0x5
c001905d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019060:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019064:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019068:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001906e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019073:	eb 3d                	jmp    c00190b2 <IDE::open(int, int, void*)+0x31e>
c0019075:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001907b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019082:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019089:	66 05 06 02          	add    ax,0x206
c001908d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019094:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001909b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00190a2:	66 05 06 02          	add    ax,0x206
c00190a6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00190ad:	e9 e5 fe ff ff       	jmp    c0018f97 <IDE::open(int, int, void*)+0x203>
c00190b2:	50                   	push   eax
c00190b3:	50                   	push   eax
c00190b4:	6a 00                	push   0x0
c00190b6:	53                   	push   ebx
c00190b7:	e8 5e fa ff ff       	call   c0018b1a <IDE::prepareInterrupt(unsigned char)>
c00190bc:	5a                   	pop    edx
c00190bd:	59                   	pop    ecx
c00190be:	6a 01                	push   0x1
c00190c0:	53                   	push   ebx
c00190c1:	e8 54 fa ff ff       	call   c0018b1a <IDE::prepareInterrupt(unsigned char)>
c00190c6:	83 c4 0c             	add    esp,0xc
c00190c9:	6a 00                	push   0x0
c00190cb:	6a 00                	push   0x0
c00190cd:	53                   	push   ebx
c00190ce:	e8 7b fc ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c00190d3:	83 c4 0c             	add    esp,0xc
c00190d6:	6a 00                	push   0x0
c00190d8:	6a 01                	push   0x1
c00190da:	53                   	push   ebx
c00190db:	e8 6e fc ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c00190e0:	83 c4 10             	add    esp,0x10
c00190e3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00190ea:	74 34                	je     c0019120 <IDE::open(int, int, void*)+0x38c>
c00190ec:	83 ec 0c             	sub    esp,0xc
c00190ef:	53                   	push   ebx
c00190f0:	6a 01                	push   0x1
c00190f2:	68 16 8d 01 c0       	push   0xc0018d16
c00190f7:	6a 0e                	push   0xe
c00190f9:	53                   	push   ebx
c00190fa:	e8 75 27 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190ff:	83 c4 14             	add    esp,0x14
c0019102:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019108:	53                   	push   ebx
c0019109:	6a 01                	push   0x1
c001910b:	68 32 8d 01 c0       	push   0xc0018d32
c0019110:	6a 0f                	push   0xf
c0019112:	53                   	push   ebx
c0019113:	e8 5c 27 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019118:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001911e:	eb 38                	jmp    c0019158 <IDE::open(int, int, void*)+0x3c4>
c0019120:	83 ec 0c             	sub    esp,0xc
c0019123:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001912d:	53                   	push   ebx
c001912e:	6a 00                	push   0x0
c0019130:	68 16 8d 01 c0       	push   0xc0018d16
c0019135:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001913b:	53                   	push   ebx
c001913c:	e8 33 27 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019141:	83 c4 14             	add    esp,0x14
c0019144:	53                   	push   ebx
c0019145:	6a 00                	push   0x0
c0019147:	68 32 8d 01 c0       	push   0xc0018d32
c001914c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019152:	53                   	push   ebx
c0019153:	e8 1c 27 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019158:	8b 03                	mov    eax,DWORD PTR [ebx]
c001915a:	83 c4 20             	add    esp,0x20
c001915d:	83 ec 0c             	sub    esp,0xc
c0019160:	53                   	push   ebx
c0019161:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019164:	83 c4 0c             	add    esp,0xc
c0019167:	6a 07                	push   0x7
c0019169:	6a 00                	push   0x0
c001916b:	53                   	push   ebx
c001916c:	e8 8f fa ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019171:	83 c4 0c             	add    esp,0xc
c0019174:	6a 07                	push   0x7
c0019176:	6a 01                	push   0x1
c0019178:	53                   	push   ebx
c0019179:	e8 82 fa ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c001917e:	83 c4 0c             	add    esp,0xc
c0019181:	6a 01                	push   0x1
c0019183:	6a 00                	push   0x0
c0019185:	53                   	push   ebx
c0019186:	e8 c3 fb ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c001918b:	83 c4 0c             	add    esp,0xc
c001918e:	6a 01                	push   0x1
c0019190:	6a 01                	push   0x1
c0019192:	53                   	push   ebx
c0019193:	e8 b6 fb ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c0019198:	83 c4 2c             	add    esp,0x2c
c001919b:	31 c0                	xor    eax,eax
c001919d:	5b                   	pop    ebx
c001919e:	5e                   	pop    esi
c001919f:	5f                   	pop    edi
c00191a0:	5d                   	pop    ebp
c00191a1:	c3                   	ret    

c00191a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00191a2:	55                   	push   ebp
c00191a3:	57                   	push   edi
c00191a4:	56                   	push   esi
c00191a5:	53                   	push   ebx
c00191a6:	83 ec 1c             	sub    esp,0x1c
c00191a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00191ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00191b1:	8d 50 f8             	lea    edx,[eax-0x8]
c00191b4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00191b8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00191bc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00191c0:	80 fa 03             	cmp    dl,0x3
c00191c3:	77 5d                	ja     c0019222 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00191c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00191cd:	0f b6 db             	movzx  ebx,bl
c00191d0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00191d3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00191d7:	83 ca 80             	or     edx,0xffffff80
c00191da:	0f b6 d2             	movzx  edx,dl
c00191dd:	52                   	push   edx
c00191de:	6a 0c                	push   0xc
c00191e0:	53                   	push   ebx
c00191e1:	56                   	push   esi
c00191e2:	e8 59 f9 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191e7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00191ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191f4:	0f b6 c0             	movzx  eax,al
c00191f7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00191fb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00191fd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019202:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019206:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001920a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001920e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019216:	83 c4 2c             	add    esp,0x2c
c0019219:	5b                   	pop    ebx
c001921a:	5e                   	pop    esi
c001921b:	5f                   	pop    edi
c001921c:	5d                   	pop    ebp
c001921d:	e9 1e f9 ff ff       	jmp    c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019222:	3c 07                	cmp    al,0x7
c0019224:	77 10                	ja     c0019236 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019226:	0f b6 db             	movzx  ebx,bl
c0019229:	0f b6 d0             	movzx  edx,al
c001922c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019234:	eb 2d                	jmp    c0019263 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019236:	3c 0d                	cmp    al,0xd
c0019238:	77 13                	ja     c001924d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001923a:	0f b6 db             	movzx  ebx,bl
c001923d:	0f b6 c0             	movzx  eax,al
c0019240:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0019247:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001924b:	eb 16                	jmp    c0019263 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001924d:	3c 15                	cmp    al,0x15
c001924f:	77 14                	ja     c0019265 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019251:	0f b6 db             	movzx  ebx,bl
c0019254:	0f b6 c0             	movzx  eax,al
c0019257:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001925f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019263:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019265:	83 c4 1c             	add    esp,0x1c
c0019268:	5b                   	pop    ebx
c0019269:	5e                   	pop    esi
c001926a:	5f                   	pop    edi
c001926b:	5d                   	pop    ebp
c001926c:	c3                   	ret    
c001926d:	90                   	nop

c001926e <IDE::detect()>:
c001926e:	55                   	push   ebp
c001926f:	57                   	push   edi
c0019270:	56                   	push   esi
c0019271:	53                   	push   ebx
c0019272:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019278:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001927f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019286:	0f 85 97 02 00 00    	jne    c0019523 <IDE::detect()+0x2b5>
c001928c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019293:	31 f6                	xor    esi,esi
c0019295:	31 ed                	xor    ebp,ebp
c0019297:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001929f:	89 e8                	mov    eax,ebp
c00192a1:	c1 e0 06             	shl    eax,0x6
c00192a4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00192ac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00192b0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00192b4:	c1 e0 04             	shl    eax,0x4
c00192b7:	83 c8 a0             	or     eax,0xffffffa0
c00192ba:	0f b6 c0             	movzx  eax,al
c00192bd:	50                   	push   eax
c00192be:	6a 06                	push   0x6
c00192c0:	56                   	push   esi
c00192c1:	53                   	push   ebx
c00192c2:	e8 79 f8 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192c7:	83 c4 0c             	add    esp,0xc
c00192ca:	6a 0c                	push   0xc
c00192cc:	56                   	push   esi
c00192cd:	53                   	push   ebx
c00192ce:	e8 2d f9 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00192d3:	83 c4 0c             	add    esp,0xc
c00192d6:	6a 0c                	push   0xc
c00192d8:	56                   	push   esi
c00192d9:	53                   	push   ebx
c00192da:	e8 21 f9 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	6a 0c                	push   0xc
c00192e4:	56                   	push   esi
c00192e5:	53                   	push   ebx
c00192e6:	e8 15 f9 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00192eb:	83 c4 0c             	add    esp,0xc
c00192ee:	6a 0c                	push   0xc
c00192f0:	56                   	push   esi
c00192f1:	53                   	push   ebx
c00192f2:	e8 09 f9 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00192f7:	68 ec 00 00 00       	push   0xec
c00192fc:	6a 07                	push   0x7
c00192fe:	56                   	push   esi
c00192ff:	53                   	push   ebx
c0019300:	e8 3b f8 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019305:	83 c4 1c             	add    esp,0x1c
c0019308:	6a 0c                	push   0xc
c001930a:	56                   	push   esi
c001930b:	53                   	push   ebx
c001930c:	e8 ef f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019311:	83 c4 0c             	add    esp,0xc
c0019314:	6a 0c                	push   0xc
c0019316:	56                   	push   esi
c0019317:	53                   	push   ebx
c0019318:	e8 e3 f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c001931d:	83 c4 0c             	add    esp,0xc
c0019320:	6a 0c                	push   0xc
c0019322:	56                   	push   esi
c0019323:	53                   	push   ebx
c0019324:	e8 d7 f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019329:	83 c4 0c             	add    esp,0xc
c001932c:	6a 0c                	push   0xc
c001932e:	56                   	push   esi
c001932f:	53                   	push   ebx
c0019330:	e8 cb f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019335:	83 c4 0c             	add    esp,0xc
c0019338:	6a 0c                	push   0xc
c001933a:	56                   	push   esi
c001933b:	53                   	push   ebx
c001933c:	e8 bf f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019341:	83 c4 10             	add    esp,0x10
c0019344:	84 c0                	test   al,al
c0019346:	0f 84 5f 01 00 00    	je     c00194ab <IDE::detect()+0x23d>
c001934c:	31 ff                	xor    edi,edi
c001934e:	50                   	push   eax
c001934f:	6a 0c                	push   0xc
c0019351:	56                   	push   esi
c0019352:	53                   	push   ebx
c0019353:	e8 a8 f8 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019358:	83 c4 10             	add    esp,0x10
c001935b:	a8 01                	test   al,0x1
c001935d:	0f 85 69 01 00 00    	jne    c00194cc <IDE::detect()+0x25e>
c0019363:	84 c0                	test   al,al
c0019365:	78 04                	js     c001936b <IDE::detect()+0xfd>
c0019367:	a8 08                	test   al,0x8
c0019369:	75 23                	jne    c001938e <IDE::detect()+0x120>
c001936b:	47                   	inc    edi
c001936c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019372:	7e da                	jle    c001934e <IDE::detect()+0xe0>
c0019374:	83 ec 0c             	sub    esp,0xc
c0019377:	6a 32                	push   0x32
c0019379:	e8 96 a2 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019387:	75 c5                	jne    c001934e <IDE::detect()+0xe0>
c0019389:	e9 3e 01 00 00       	jmp    c00194cc <IDE::detect()+0x25e>
c001938e:	31 c9                	xor    ecx,ecx
c0019390:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019394:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	68 80 00 00 00       	push   0x80
c00193a0:	57                   	push   edi
c00193a1:	6a 00                	push   0x0
c00193a3:	56                   	push   esi
c00193a4:	53                   	push   ebx
c00193a5:	e8 f8 fd ff ff       	call   c00191a2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00193aa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00193af:	89 e8                	mov    eax,ebp
c00193b1:	89 d1                	mov    ecx,edx
c00193b3:	c1 e0 06             	shl    eax,0x6
c00193b6:	01 d8                	add    eax,ebx
c00193b8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00193bf:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00193c6:	89 f2                	mov    edx,esi
c00193c8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00193ce:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00193d2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00193d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00193dc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00193e3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00193eb:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00193f2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00193fa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019400:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019407:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001940d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019411:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019415:	83 c4 20             	add    esp,0x20
c0019418:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001941b:	83 c0 02             	add    eax,0x2
c001941e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019424:	83 c7 02             	add    edi,0x2
c0019427:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001942a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019430:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019434:	75 e2                	jne    c0019418 <IDE::detect()+0x1aa>
c0019436:	89 e8                	mov    eax,ebp
c0019438:	c1 e0 06             	shl    eax,0x6
c001943b:	01 d8                	add    eax,ebx
c001943d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019443:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001944a:	66 c1 ea 09          	shr    dx,0x9
c001944e:	83 e2 01             	and    edx,0x1
c0019451:	84 c9                	test   cl,cl
c0019453:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019459:	75 22                	jne    c001947d <IDE::detect()+0x20f>
c001945b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019462:	74 46                	je     c00194aa <IDE::detect()+0x23c>
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	68 7c 01 00 00       	push   0x17c
c001946c:	e8 48 e3 fe ff       	call   c00077b9 <malloc>
c0019471:	89 c7                	mov    edi,eax
c0019473:	89 04 24             	mov    DWORD PTR [esp],eax
c0019476:	e8 11 05 00 00       	call   c001998c <ATA::ATA()>
c001947b:	eb 17                	jmp    c0019494 <IDE::detect()+0x226>
c001947d:	83 ec 0c             	sub    esp,0xc
c0019480:	68 84 01 00 00       	push   0x184
c0019485:	e8 2f e3 fe ff       	call   c00077b9 <malloc>
c001948a:	89 c7                	mov    edi,eax
c001948c:	89 04 24             	mov    DWORD PTR [esp],eax
c001948f:	e8 f0 0a 00 00       	call   c0019f84 <ATAPI::ATAPI()>
c0019494:	5a                   	pop    edx
c0019495:	59                   	pop    ecx
c0019496:	57                   	push   edi
c0019497:	53                   	push   ebx
c0019498:	e8 2b 24 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c001949d:	8b 07                	mov    eax,DWORD PTR [edi]
c001949f:	53                   	push   ebx
c00194a0:	55                   	push   ebp
c00194a1:	6a 00                	push   0x0
c00194a3:	57                   	push   edi
c00194a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00194a7:	83 c4 20             	add    esp,0x20
c00194aa:	45                   	inc    ebp
c00194ab:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00194b0:	74 0d                	je     c00194bf <IDE::detect()+0x251>
c00194b2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00194ba:	e9 e0 fd ff ff       	jmp    c001929f <IDE::detect()+0x31>
c00194bf:	4e                   	dec    esi
c00194c0:	74 61                	je     c0019523 <IDE::detect()+0x2b5>
c00194c2:	be 01 00 00 00       	mov    esi,0x1
c00194c7:	e9 cb fd ff ff       	jmp    c0019297 <IDE::detect()+0x29>
c00194cc:	50                   	push   eax
c00194cd:	6a 04                	push   0x4
c00194cf:	56                   	push   esi
c00194d0:	53                   	push   ebx
c00194d1:	e8 2a f7 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00194d6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00194da:	83 c4 0c             	add    esp,0xc
c00194dd:	6a 05                	push   0x5
c00194df:	56                   	push   esi
c00194e0:	53                   	push   ebx
c00194e1:	e8 1a f7 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00194e6:	83 c4 10             	add    esp,0x10
c00194e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194ed:	80 fa 14             	cmp    dl,0x14
c00194f0:	75 04                	jne    c00194f6 <IDE::detect()+0x288>
c00194f2:	3c eb                	cmp    al,0xeb
c00194f4:	eb 07                	jmp    c00194fd <IDE::detect()+0x28f>
c00194f6:	3c 96                	cmp    al,0x96
c00194f8:	75 b1                	jne    c00194ab <IDE::detect()+0x23d>
c00194fa:	80 fa 69             	cmp    dl,0x69
c00194fd:	75 ac                	jne    c00194ab <IDE::detect()+0x23d>
c00194ff:	68 a1 00 00 00       	push   0xa1
c0019504:	6a 07                	push   0x7
c0019506:	56                   	push   esi
c0019507:	53                   	push   ebx
c0019508:	e8 33 f6 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001950d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019514:	e8 fb a0 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c0019519:	83 c4 10             	add    esp,0x10
c001951c:	b1 01                	mov    cl,0x1
c001951e:	e9 6d fe ff ff       	jmp    c0019390 <IDE::detect()+0x122>
c0019523:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019529:	5b                   	pop    ebx
c001952a:	5e                   	pop    esi
c001952b:	5f                   	pop    edi
c001952c:	5d                   	pop    ebp
c001952d:	c3                   	ret    

c001952e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001952e:	55                   	push   ebp
c001952f:	57                   	push   edi
c0019530:	56                   	push   esi
c0019531:	53                   	push   ebx
c0019532:	83 ec 1c             	sub    esp,0x1c
c0019535:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019539:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001953d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019541:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019545:	88 c3                	mov    bl,al
c0019547:	84 c0                	test   al,al
c0019549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001954d:	0f 84 81 00 00 00    	je     c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019553:	83 ec 0c             	sub    esp,0xc
c0019556:	68 17 ed 01 c0       	push   0xc001ed17
c001955b:	e8 28 0f ff ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019567:	3c 01                	cmp    al,0x1
c0019569:	74 63                	je     c00195ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001956b:	3c 02                	cmp    al,0x2
c001956d:	75 53                	jne    c00195c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001956f:	01 f6                	add    esi,esi
c0019571:	09 ee                	or     esi,ebp
c0019573:	50                   	push   eax
c0019574:	89 f0                	mov    eax,esi
c0019576:	6a 01                	push   0x1
c0019578:	0f b6 f0             	movzx  esi,al
c001957b:	c1 e6 06             	shl    esi,0x6
c001957e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019586:	50                   	push   eax
c0019587:	57                   	push   edi
c0019588:	e8 73 f6 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c001958d:	83 c4 10             	add    esp,0x10
c0019590:	a8 01                	test   al,0x1
c0019592:	74 02                	je     c0019596 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019594:	b3 07                	mov    bl,0x7
c0019596:	a8 02                	test   al,0x2
c0019598:	74 02                	je     c001959c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001959a:	b3 03                	mov    bl,0x3
c001959c:	a8 04                	test   al,0x4
c001959e:	74 02                	je     c00195a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00195a0:	b3 14                	mov    bl,0x14
c00195a2:	a8 08                	test   al,0x8
c00195a4:	74 02                	je     c00195a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00195a6:	b3 03                	mov    bl,0x3
c00195a8:	a8 10                	test   al,0x10
c00195aa:	74 02                	je     c00195ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00195ac:	b3 15                	mov    bl,0x15
c00195ae:	a8 20                	test   al,0x20
c00195b0:	74 02                	je     c00195b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00195b2:	b3 03                	mov    bl,0x3
c00195b4:	a8 40                	test   al,0x40
c00195b6:	74 02                	je     c00195ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00195b8:	b3 16                	mov    bl,0x16
c00195ba:	84 c0                	test   al,al
c00195bc:	79 16                	jns    c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195be:	b3 0d                	mov    bl,0xd
c00195c0:	eb 12                	jmp    c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195c2:	3c 03                	cmp    al,0x3
c00195c4:	74 0c                	je     c00195d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00195c6:	3c 04                	cmp    al,0x4
c00195c8:	75 0a                	jne    c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195ca:	b3 08                	mov    bl,0x8
c00195cc:	eb 06                	jmp    c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195ce:	b3 13                	mov    bl,0x13
c00195d0:	eb 02                	jmp    c00195d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195d2:	b3 17                	mov    bl,0x17
c00195d4:	83 c4 1c             	add    esp,0x1c
c00195d7:	88 d8                	mov    al,bl
c00195d9:	5b                   	pop    ebx
c00195da:	5e                   	pop    esi
c00195db:	5f                   	pop    edi
c00195dc:	5d                   	pop    ebp
c00195dd:	c3                   	ret    

c00195de <IDE::polling(unsigned char, unsigned int)>:
c00195de:	55                   	push   ebp
c00195df:	bd 04 00 00 00       	mov    ebp,0x4
c00195e4:	57                   	push   edi
c00195e5:	56                   	push   esi
c00195e6:	53                   	push   ebx
c00195e7:	83 ec 0c             	sub    esp,0xc
c00195ea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195ee:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00195f2:	0f b6 f3             	movzx  esi,bl
c00195f5:	52                   	push   edx
c00195f6:	6a 0c                	push   0xc
c00195f8:	56                   	push   esi
c00195f9:	57                   	push   edi
c00195fa:	e8 01 f6 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c00195ff:	83 c4 10             	add    esp,0x10
c0019602:	4d                   	dec    ebp
c0019603:	75 ed                	jne    c00195f2 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019605:	bb a0 86 01 00       	mov    ebx,0x186a0
c001960a:	50                   	push   eax
c001960b:	6a 0c                	push   0xc
c001960d:	56                   	push   esi
c001960e:	57                   	push   edi
c001960f:	e8 ec f5 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019614:	83 c4 10             	add    esp,0x10
c0019617:	a8 01                	test   al,0x1
c0019619:	75 17                	jne    c0019632 <IDE::polling(unsigned char, unsigned int)+0x54>
c001961b:	a8 20                	test   al,0x20
c001961d:	75 0f                	jne    c001962e <IDE::polling(unsigned char, unsigned int)+0x50>
c001961f:	4b                   	dec    ebx
c0019620:	74 10                	je     c0019632 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019622:	84 c0                	test   al,al
c0019624:	78 e4                	js     c001960a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019626:	a8 08                	test   al,0x8
c0019628:	74 e0                	je     c001960a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001962a:	31 c0                	xor    eax,eax
c001962c:	eb 06                	jmp    c0019634 <IDE::polling(unsigned char, unsigned int)+0x56>
c001962e:	b0 01                	mov    al,0x1
c0019630:	eb 02                	jmp    c0019634 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019632:	b0 02                	mov    al,0x2
c0019634:	83 c4 0c             	add    esp,0xc
c0019637:	5b                   	pop    ebx
c0019638:	5e                   	pop    esi
c0019639:	5f                   	pop    edi
c001963a:	5d                   	pop    ebp
c001963b:	c3                   	ret    

c001963c <SATABus::close(int, int, void*)>:
c001963c:	31 c0                	xor    eax,eax
c001963e:	c3                   	ret    
c001963f:	90                   	nop

c0019640 <SATABus::detect()>:
c0019640:	c3                   	ret    
c0019641:	90                   	nop

c0019642 <SATABus::SATABus()>:
c0019642:	83 ec 0c             	sub    esp,0xc
c0019645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019649:	83 ec 08             	sub    esp,0x8
c001964c:	68 50 ed 01 c0       	push   0xc001ed50
c0019651:	50                   	push   eax
c0019652:	e8 b5 25 ff ff       	call   c000bc0c <HardDiskController::HardDiskController(char const*)>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	ba 7c ed 01 c0       	mov    edx,0xc001ed7c
c001965f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019663:	89 10                	mov    DWORD PTR [eax],edx
c0019665:	83 ec 0c             	sub    esp,0xc
c0019668:	6a 50                	push   0x50
c001966a:	e8 e4 e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	89 c2                	mov    edx,eax
c0019674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019678:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001967e:	83 ec 0c             	sub    esp,0xc
c0019681:	6a 50                	push   0x50
c0019683:	e8 ad fb fe ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	89 c2                	mov    edx,eax
c001968d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019691:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019697:	a1 50 05 02 c0       	mov    eax,ds:0xc0020550
c001969c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196a0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00196a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196aa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00196b0:	83 ec 0c             	sub    esp,0xc
c00196b3:	6a 03                	push   0x3
c00196b5:	6a 50                	push   0x50
c00196b7:	51                   	push   ecx
c00196b8:	52                   	push   edx
c00196b9:	50                   	push   eax
c00196ba:	e8 05 05 ff ff       	call   c0009bc4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196bf:	83 c4 20             	add    esp,0x20
c00196c2:	90                   	nop
c00196c3:	83 c4 0c             	add    esp,0xc
c00196c6:	c3                   	ret    
c00196c7:	90                   	nop

c00196c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00196c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196cc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00196cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196d2:	09 c2                	or     edx,eax
c00196d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00196de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00196e0:	31 c0                	xor    eax,eax
c00196e2:	c1 e9 08             	shr    ecx,0x8
c00196e5:	83 e1 0f             	and    ecx,0xf
c00196e8:	39 c8                	cmp    eax,ecx
c00196ea:	74 0a                	je     c00196f6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00196ec:	f6 c2 01             	test   dl,0x1
c00196ef:	74 08                	je     c00196f9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00196f1:	d1 ea                	shr    edx,1
c00196f3:	40                   	inc    eax
c00196f4:	eb f2                	jmp    c00196e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00196f6:	83 c8 ff             	or     eax,0xffffffff
c00196f9:	c3                   	ret    

c00196fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00196fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00196fe:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019701:	89 c2                	mov    edx,eax
c0019703:	c1 ea 08             	shr    edx,0x8
c0019706:	83 e2 0f             	and    edx,0xf
c0019709:	fe ca                	dec    dl
c001970b:	75 31                	jne    c001973e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001970d:	83 e0 0f             	and    eax,0xf
c0019710:	3c 03                	cmp    al,0x3
c0019712:	75 2a                	jne    c001973e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019714:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019717:	b8 02 00 00 00       	mov    eax,0x2
c001971c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019722:	74 1c                	je     c0019740 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019724:	b8 04 00 00 00       	mov    eax,0x4
c0019729:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001972f:	74 0f                	je     c0019740 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019731:	31 c0                	xor    eax,eax
c0019733:	83 fa 03             	cmp    edx,0x3
c0019736:	0f 94 c0             	sete   al
c0019739:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001973d:	c3                   	ret    
c001973e:	31 c0                	xor    eax,eax
c0019740:	c3                   	ret    
c0019741:	90                   	nop

c0019742 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019746:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019749:	0f ba e2 0f          	bt     edx,0xf
c001974d:	72 f7                	jb     c0019746 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001974f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019752:	83 ca 10             	or     edx,0x10
c0019755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019758:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001975b:	83 ca 01             	or     edx,0x1
c001975e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019761:	c3                   	ret    

c0019762 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019766:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019769:	83 e2 fe             	and    edx,0xfffffffe
c001976c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001976f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019772:	83 e2 ef             	and    edx,0xffffffef
c0019775:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019778:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001977b:	0f ba e2 0e          	bt     edx,0xe
c001977f:	72 f7                	jb     c0019778 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019781:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019784:	0f ba e2 0f          	bt     edx,0xf
c0019788:	72 ee                	jb     c0019778 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001978a:	c3                   	ret    
c001978b:	90                   	nop

c001978c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001978c:	55                   	push   ebp
c001978d:	57                   	push   edi
c001978e:	56                   	push   esi
c001978f:	53                   	push   ebx
c0019790:	83 ec 1c             	sub    esp,0x1c
c0019793:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001979b:	53                   	push   ebx
c001979c:	56                   	push   esi
c001979d:	e8 c0 ff ff ff       	call   c0019762 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00197a2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00197a6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197ac:	83 ec 0c             	sub    esp,0xc
c00197af:	c1 e5 0a             	shl    ebp,0xa
c00197b2:	01 e8                	add    eax,ebp
c00197b4:	89 03                	mov    DWORD PTR [ebx],eax
c00197b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197b8:	68 00 04 00 00       	push   0x400
c00197bd:	6a 00                	push   0x0
c00197bf:	50                   	push   eax
c00197c0:	e8 0b 6d fe ff       	call   c00004d0 <memset>
c00197c5:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00197cb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00197cf:	01 e8                	add    eax,ebp
c00197d1:	83 c4 1c             	add    esp,0x1c
c00197d4:	89 03                	mov    DWORD PTR [ebx],eax
c00197d6:	c1 e2 08             	shl    edx,0x8
c00197d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00197e0:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00197e6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197ec:	01 f8                	add    eax,edi
c00197ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00197f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00197f4:	68 00 01 00 00       	push   0x100
c00197f9:	6a 00                	push   0x0
c00197fb:	50                   	push   eax
c00197fc:	e8 cf 6c fe ff       	call   c00004d0 <memset>
c0019801:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019807:	01 fa                	add    edx,edi
c0019809:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001980d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019810:	c1 e7 0d             	shl    edi,0xd
c0019813:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001981a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019820:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019826:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001982a:	31 ff                	xor    edi,edi
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019839:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001983f:	83 c5 20             	add    ebp,0x20
c0019842:	01 f8                	add    eax,edi
c0019844:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019847:	52                   	push   edx
c0019848:	68 00 01 00 00       	push   0x100
c001984d:	6a 00                	push   0x0
c001984f:	50                   	push   eax
c0019850:	e8 7b 6c fe ff       	call   c00004d0 <memset>
c0019855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019859:	83 c4 10             	add    esp,0x10
c001985c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019862:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019869:	01 f8                	add    eax,edi
c001986b:	81 c7 00 01 00 00    	add    edi,0x100
c0019871:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019874:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001987a:	75 b3                	jne    c001982f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001987c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019883:	50                   	push   eax
c0019884:	50                   	push   eax
c0019885:	53                   	push   ebx
c0019886:	56                   	push   esi
c0019887:	e8 b6 fe ff ff       	call   c0019742 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001988c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019893:	83 c4 2c             	add    esp,0x2c
c0019896:	5b                   	pop    ebx
c0019897:	5e                   	pop    esi
c0019898:	5f                   	pop    edi
c0019899:	5d                   	pop    ebp
c001989a:	c3                   	ret    
c001989b:	90                   	nop

c001989c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001989c:	55                   	push   ebp
c001989d:	57                   	push   edi
c001989e:	56                   	push   esi
c001989f:	53                   	push   ebx
c00198a0:	31 db                	xor    ebx,ebx
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00198a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198ad:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00198b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00198b6:	74 7a                	je     c0019932 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00198bc:	89 d8                	mov    eax,ebx
c00198be:	c1 e0 07             	shl    eax,0x7
c00198c1:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c00198c8:	55                   	push   ebp
c00198c9:	56                   	push   esi
c00198ca:	e8 2b fe ff ff       	call   c00196fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00198cf:	5a                   	pop    edx
c00198d0:	83 f8 01             	cmp    eax,0x1
c00198d3:	59                   	pop    ecx
c00198d4:	75 21                	jne    c00198f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c00198d6:	50                   	push   eax
c00198d7:	53                   	push   ebx
c00198d8:	55                   	push   ebp
c00198d9:	56                   	push   esi
c00198da:	e8 ad fe ff ff       	call   c001978c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198df:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00198e6:	e8 ce de fe ff       	call   c00077b9 <malloc>
c00198eb:	89 c5                	mov    ebp,eax
c00198ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f0:	e8 43 0d 00 00       	call   c001a638 <SATA::SATA()>
c00198f5:	eb 24                	jmp    c001991b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00198f7:	83 f8 04             	cmp    eax,0x4
c00198fa:	75 36                	jne    c0019932 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198fc:	51                   	push   ecx
c00198fd:	53                   	push   ebx
c00198fe:	55                   	push   ebp
c00198ff:	56                   	push   esi
c0019900:	e8 87 fe ff ff       	call   c001978c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019905:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001990c:	e8 a8 de fe ff       	call   c00077b9 <malloc>
c0019911:	89 c5                	mov    ebp,eax
c0019913:	89 04 24             	mov    DWORD PTR [esp],eax
c0019916:	e8 79 10 00 00       	call   c001a994 <SATAPI::SATAPI()>
c001991b:	58                   	pop    eax
c001991c:	5a                   	pop    edx
c001991d:	55                   	push   ebp
c001991e:	56                   	push   esi
c001991f:	e8 a4 1f ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c0019924:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019927:	56                   	push   esi
c0019928:	6a 00                	push   0x0
c001992a:	53                   	push   ebx
c001992b:	55                   	push   ebp
c001992c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001992f:	83 c4 20             	add    esp,0x20
c0019932:	d1 ef                	shr    edi,1
c0019934:	43                   	inc    ebx
c0019935:	83 fb 20             	cmp    ebx,0x20
c0019938:	0f 85 72 ff ff ff    	jne    c00198b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001993e:	83 c4 0c             	add    esp,0xc
c0019941:	5b                   	pop    ebx
c0019942:	5e                   	pop    esi
c0019943:	5f                   	pop    edi
c0019944:	5d                   	pop    ebp
c0019945:	c3                   	ret    

c0019946 <SATABus::open(int, int, void*)>:
c0019946:	83 ec 14             	sub    esp,0x14
c0019949:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001994d:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019953:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019959:	52                   	push   edx
c001995a:	50                   	push   eax
c001995b:	e8 3c ff ff ff       	call   c001989c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019960:	31 c0                	xor    eax,eax
c0019962:	83 c4 1c             	add    esp,0x1c
c0019965:	c3                   	ret    

c0019966 <ATA::close(int, int, void*)>:
c0019966:	83 ec 0c             	sub    esp,0xc
c0019969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001996d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019973:	85 c0                	test   eax,eax
c0019975:	74 0c                	je     c0019983 <ATA::close(int, int, void*)+0x1d>
c0019977:	83 ec 0c             	sub    esp,0xc
c001997a:	8b 10                	mov    edx,DWORD PTR [eax]
c001997c:	50                   	push   eax
c001997d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019980:	83 c4 10             	add    esp,0x10
c0019983:	31 c0                	xor    eax,eax
c0019985:	83 c4 0c             	add    esp,0xc
c0019988:	c3                   	ret    
c0019989:	90                   	nop

c001998a <ATA::powerSaving(PowerSavingLevel)>:
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <ATA::ATA()>:
c001998c:	83 ec 0c             	sub    esp,0xc
c001998f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019993:	83 ec 04             	sub    esp,0x4
c0019996:	68 00 02 00 00       	push   0x200
c001999b:	68 49 ee 01 c0       	push   0xc001ee49
c00199a0:	50                   	push   eax
c00199a1:	e8 f0 22 ff ff       	call   c000bc96 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00199a6:	83 c4 10             	add    esp,0x10
c00199a9:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c00199ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199b2:	89 10                	mov    DWORD PTR [eax],edx
c00199b4:	90                   	nop
c00199b5:	83 c4 0c             	add    esp,0xc
c00199b8:	c3                   	ret    
c00199b9:	90                   	nop

c00199ba <ATA::flush(bool)>:
c00199ba:	53                   	push   ebx
c00199bb:	83 ec 08             	sub    esp,0x8
c00199be:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00199c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199c7:	19 c0                	sbb    eax,eax
c00199c9:	83 e0 fd             	and    eax,0xfffffffd
c00199cc:	05 ea 00 00 00       	add    eax,0xea
c00199d1:	50                   	push   eax
c00199d2:	6a 07                	push   0x7
c00199d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199db:	50                   	push   eax
c00199dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199e2:	e8 59 f1 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199e7:	83 c4 0c             	add    esp,0xc
c00199ea:	6a 00                	push   0x0
c00199ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199f3:	50                   	push   eax
c00199f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199fa:	e8 df fb ff ff       	call   c00195de <IDE::polling(unsigned char, unsigned int)>
c00199ff:	83 c4 18             	add    esp,0x18
c0019a02:	5b                   	pop    ebx
c0019a03:	c3                   	ret    

c0019a04 <ATA::readyForCommand()>:
c0019a04:	56                   	push   esi
c0019a05:	53                   	push   ebx
c0019a06:	53                   	push   ebx
c0019a07:	31 db                	xor    ebx,ebx
c0019a09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a0d:	51                   	push   ecx
c0019a0e:	6a 0c                	push   0xc
c0019a10:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a17:	50                   	push   eax
c0019a18:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a1e:	e8 dd f1 ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019a23:	83 c4 10             	add    esp,0x10
c0019a26:	a8 88                	test   al,0x88
c0019a28:	74 1f                	je     c0019a49 <ATA::readyForCommand()+0x45>
c0019a2a:	43                   	inc    ebx
c0019a2b:	83 fb 63             	cmp    ebx,0x63
c0019a2e:	7e dd                	jle    c0019a0d <ATA::readyForCommand()+0x9>
c0019a30:	83 ec 0c             	sub    esp,0xc
c0019a33:	6a 0a                	push   0xa
c0019a35:	e8 da 9b ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c0019a3a:	83 c4 10             	add    esp,0x10
c0019a3d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019a43:	75 c8                	jne    c0019a0d <ATA::readyForCommand()+0x9>
c0019a45:	31 c0                	xor    eax,eax
c0019a47:	eb 02                	jmp    c0019a4b <ATA::readyForCommand()+0x47>
c0019a49:	b0 01                	mov    al,0x1
c0019a4b:	5a                   	pop    edx
c0019a4c:	5b                   	pop    ebx
c0019a4d:	5e                   	pop    esi
c0019a4e:	c3                   	ret    
c0019a4f:	90                   	nop

c0019a50 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a50:	55                   	push   ebp
c0019a51:	57                   	push   edi
c0019a52:	56                   	push   esi
c0019a53:	53                   	push   ebx
c0019a54:	83 ec 2c             	sub    esp,0x2c
c0019a57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a5b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a5f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a67:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a6b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a6f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a73:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a7d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019a83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a87:	c1 e0 06             	shl    eax,0x6
c0019a8a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019a92:	74 5d                	je     c0019af1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019a94:	89 fa                	mov    edx,edi
c0019a96:	89 f0                	mov    eax,esi
c0019a98:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019a9c:	c1 ea 1c             	shr    edx,0x1c
c0019a9f:	89 d1                	mov    ecx,edx
c0019aa1:	09 c1                	or     ecx,eax
c0019aa3:	74 25                	je     c0019aca <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019aa5:	31 ed                	xor    ebp,ebp
c0019aa7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019aae:	89 fa                	mov    edx,edi
c0019ab0:	89 f0                	mov    eax,esi
c0019ab2:	0f ad d0             	shrd   eax,edx,cl
c0019ab5:	d3 ea                	shr    edx,cl
c0019ab7:	f6 c1 20             	test   cl,0x20
c0019aba:	74 02                	je     c0019abe <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019abc:	89 d0                	mov    eax,edx
c0019abe:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019ac2:	45                   	inc    ebp
c0019ac3:	83 fd 06             	cmp    ebp,0x6
c0019ac6:	75 df                	jne    c0019aa7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019ac8:	eb 76                	jmp    c0019b40 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019aca:	89 f0                	mov    eax,esi
c0019acc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019ad1:	89 fa                	mov    edx,edi
c0019ad3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ada:	0f ac d0 10          	shrd   eax,edx,0x10
c0019ade:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019ae3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019ae7:	c1 ee 18             	shr    esi,0x18
c0019aea:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019aef:	eb 56                	jmp    c0019b47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019af1:	6a 00                	push   0x0
c0019af3:	6a 3f                	push   0x3f
c0019af5:	57                   	push   edi
c0019af6:	56                   	push   esi
c0019af7:	e8 14 22 00 00       	call   c001bd10 <__umoddi3>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	40                   	inc    eax
c0019b00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b04:	6a 00                	push   0x0
c0019b06:	68 f0 03 00 00       	push   0x3f0
c0019b0b:	57                   	push   edi
c0019b0c:	56                   	push   esi
c0019b0d:	e8 fe 20 00 00       	call   c001bc10 <__udivdi3>
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b1a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b21:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b26:	6a 00                	push   0x0
c0019b28:	6a 3f                	push   0x3f
c0019b2a:	57                   	push   edi
c0019b2b:	56                   	push   esi
c0019b2c:	e8 df 20 00 00       	call   c001bc10 <__udivdi3>
c0019b31:	83 c4 10             	add    esp,0x10
c0019b34:	89 c6                	mov    esi,eax
c0019b36:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019b3b:	83 e6 0f             	and    esi,0xf
c0019b3e:	eb 07                	jmp    c0019b47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b40:	31 f6                	xor    esi,esi
c0019b42:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019b47:	bf 01 00 00 00       	mov    edi,0x1
c0019b4c:	50                   	push   eax
c0019b4d:	6a 00                	push   0x0
c0019b4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b56:	50                   	push   eax
c0019b57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b5b:	e8 ee f1 ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c0019b60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b63:	e8 9c fe ff ff       	call   c0019a04 <ATA::readyForCommand()>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	84 c0                	test   al,al
c0019b6d:	0f 84 4e 02 00 00    	je     c0019dc1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019b73:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019b79:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019b7f:	c1 e0 04             	shl    eax,0x4
c0019b82:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019b89:	09 c6                	or     esi,eax
c0019b8b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019b90:	75 05                	jne    c0019b97 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019b92:	83 ce a0             	or     esi,0xffffffa0
c0019b95:	eb 03                	jmp    c0019b9a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019b97:	83 ce e0             	or     esi,0xffffffe0
c0019b9a:	89 f0                	mov    eax,esi
c0019b9c:	0f b6 f0             	movzx  esi,al
c0019b9f:	56                   	push   esi
c0019ba0:	6a 06                	push   0x6
c0019ba2:	51                   	push   ecx
c0019ba3:	52                   	push   edx
c0019ba4:	e8 97 ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ba9:	83 c4 10             	add    esp,0x10
c0019bac:	6a 00                	push   0x0
c0019bae:	6a 01                	push   0x1
c0019bb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bb7:	50                   	push   eax
c0019bb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bbe:	e8 7d ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019bcb:	75 6e                	jne    c0019c3b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019bcd:	6a 00                	push   0x0
c0019bcf:	6a 08                	push   0x8
c0019bd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bd8:	50                   	push   eax
c0019bd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bdf:	e8 5c ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019be4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019be9:	50                   	push   eax
c0019bea:	6a 09                	push   0x9
c0019bec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bf3:	50                   	push   eax
c0019bf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bfa:	e8 41 ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bff:	83 c4 20             	add    esp,0x20
c0019c02:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c07:	50                   	push   eax
c0019c08:	6a 0a                	push   0xa
c0019c0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c11:	50                   	push   eax
c0019c12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c18:	e8 23 ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c1d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019c22:	50                   	push   eax
c0019c23:	6a 0b                	push   0xb
c0019c25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c2c:	50                   	push   eax
c0019c2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c33:	e8 08 ef ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c38:	83 c4 20             	add    esp,0x20
c0019c3b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019c40:	50                   	push   eax
c0019c41:	6a 02                	push   0x2
c0019c43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c4a:	50                   	push   eax
c0019c4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c51:	e8 ea ee ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c56:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c5b:	50                   	push   eax
c0019c5c:	6a 03                	push   0x3
c0019c5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c65:	50                   	push   eax
c0019c66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6c:	e8 cf ee ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c71:	83 c4 20             	add    esp,0x20
c0019c74:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019c79:	50                   	push   eax
c0019c7a:	6a 04                	push   0x4
c0019c7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c83:	50                   	push   eax
c0019c84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c8a:	e8 b1 ee ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c94:	50                   	push   eax
c0019c95:	6a 05                	push   0x5
c0019c97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c9e:	50                   	push   eax
c0019c9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca5:	e8 96 ee ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019caa:	83 c4 20             	add    esp,0x20
c0019cad:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019cb2:	0f 94 c0             	sete   al
c0019cb5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019cba:	74 09                	je     c0019cc5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019cbc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019cc3:	eb 07                	jmp    c0019ccc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019cc5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019ccc:	0f b6 c0             	movzx  eax,al
c0019ccf:	50                   	push   eax
c0019cd0:	6a 07                	push   0x7
c0019cd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cd9:	50                   	push   eax
c0019cda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ce0:	e8 5b ee ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ce5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019ce9:	83 c4 10             	add    esp,0x10
c0019cec:	85 f6                	test   esi,esi
c0019cee:	0f 84 ae 00 00 00    	je     c0019da2 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019cf4:	50                   	push   eax
c0019cf5:	6a 01                	push   0x1
c0019cf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cfe:	50                   	push   eax
c0019cff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d05:	e8 d4 f8 ff ff       	call   c00195de <IDE::polling(unsigned char, unsigned int)>
c0019d0a:	83 c4 10             	add    esp,0x10
c0019d0d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d13:	84 c0                	test   al,al
c0019d15:	74 20                	je     c0019d37 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d17:	0f b6 f8             	movzx  edi,al
c0019d1a:	0f b6 d2             	movzx  edx,dl
c0019d1d:	57                   	push   edi
c0019d1e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019d25:	50                   	push   eax
c0019d26:	52                   	push   edx
c0019d27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d2d:	e8 fc f7 ff ff       	call   c001952e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019d32:	e9 87 00 00 00       	jmp    c0019dbe <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019d37:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019d3c:	74 33                	je     c0019d71 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019d3e:	31 ed                	xor    ebp,ebp
c0019d40:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019d44:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019d48:	50                   	push   eax
c0019d49:	50                   	push   eax
c0019d4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d51:	50                   	push   eax
c0019d52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d58:	e8 d1 ed ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c0019d5d:	89 c2                	mov    edx,eax
c0019d5f:	89 f8                	mov    eax,edi
c0019d61:	66 ef                	out    dx,ax
c0019d63:	45                   	inc    ebp
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019d6d:	75 d1                	jne    c0019d40 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019d6f:	eb 23                	jmp    c0019d94 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019d71:	0f b6 d2             	movzx  edx,dl
c0019d74:	51                   	push   ecx
c0019d75:	51                   	push   ecx
c0019d76:	52                   	push   edx
c0019d77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d7d:	e8 ac ed ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c0019d82:	b9 00 01 00 00       	mov    ecx,0x100
c0019d87:	89 c2                	mov    edx,eax
c0019d89:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019d8d:	fc                   	cld    
c0019d8e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019d91:	83 c4 10             	add    esp,0x10
c0019d94:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019d9c:	4e                   	dec    esi
c0019d9d:	e9 4a ff ff ff       	jmp    c0019cec <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019da2:	31 ff                	xor    edi,edi
c0019da4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019da9:	74 16                	je     c0019dc1 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019dab:	50                   	push   eax
c0019dac:	50                   	push   eax
c0019dad:	31 c0                	xor    eax,eax
c0019daf:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019db4:	0f 94 c0             	sete   al
c0019db7:	50                   	push   eax
c0019db8:	53                   	push   ebx
c0019db9:	e8 fc fb ff ff       	call   c00199ba <ATA::flush(bool)>
c0019dbe:	83 c4 10             	add    esp,0x10
c0019dc1:	83 c4 2c             	add    esp,0x2c
c0019dc4:	89 f8                	mov    eax,edi
c0019dc6:	5b                   	pop    ebx
c0019dc7:	5e                   	pop    esi
c0019dc8:	5f                   	pop    edi
c0019dc9:	5d                   	pop    ebp
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <ATA::read(unsigned long long, int, void*)>:
c0019dcc:	57                   	push   edi
c0019dcd:	b8 04 00 00 00       	mov    eax,0x4
c0019dd2:	56                   	push   esi
c0019dd3:	53                   	push   ebx
c0019dd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ddc:	8d 7a ff             	lea    edi,[edx-0x1]
c0019ddf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019de3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019de7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019ded:	77 25                	ja     c0019e14 <ATA::read(unsigned long long, int, void*)+0x48>
c0019def:	b8 06 00 00 00       	mov    eax,0x6
c0019df4:	85 f6                	test   esi,esi
c0019df6:	74 1c                	je     c0019e14 <ATA::read(unsigned long long, int, void*)+0x48>
c0019df8:	50                   	push   eax
c0019df9:	50                   	push   eax
c0019dfa:	6a 00                	push   0x0
c0019dfc:	56                   	push   esi
c0019dfd:	52                   	push   edx
c0019dfe:	53                   	push   ebx
c0019dff:	51                   	push   ecx
c0019e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e04:	e8 47 fc ff ff       	call   c0019a50 <ATA::access(unsigned long long, int, void*, bool)>
c0019e09:	83 c4 20             	add    esp,0x20
c0019e0c:	85 c0                	test   eax,eax
c0019e0e:	0f 95 c0             	setne  al
c0019e11:	0f b6 c0             	movzx  eax,al
c0019e14:	5b                   	pop    ebx
c0019e15:	5e                   	pop    esi
c0019e16:	5f                   	pop    edi
c0019e17:	c3                   	ret    

c0019e18 <ATA::write(unsigned long long, int, void*)>:
c0019e18:	57                   	push   edi
c0019e19:	b8 04 00 00 00       	mov    eax,0x4
c0019e1e:	56                   	push   esi
c0019e1f:	53                   	push   ebx
c0019e20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e28:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e2f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e33:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e39:	77 25                	ja     c0019e60 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e3b:	b8 06 00 00 00       	mov    eax,0x6
c0019e40:	85 f6                	test   esi,esi
c0019e42:	74 1c                	je     c0019e60 <ATA::write(unsigned long long, int, void*)+0x48>
c0019e44:	50                   	push   eax
c0019e45:	50                   	push   eax
c0019e46:	6a 01                	push   0x1
c0019e48:	56                   	push   esi
c0019e49:	52                   	push   edx
c0019e4a:	53                   	push   ebx
c0019e4b:	51                   	push   ecx
c0019e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e50:	e8 fb fb ff ff       	call   c0019a50 <ATA::access(unsigned long long, int, void*, bool)>
c0019e55:	83 c4 20             	add    esp,0x20
c0019e58:	85 c0                	test   eax,eax
c0019e5a:	0f 95 c0             	setne  al
c0019e5d:	0f b6 c0             	movzx  eax,al
c0019e60:	5b                   	pop    ebx
c0019e61:	5e                   	pop    esi
c0019e62:	5f                   	pop    edi
c0019e63:	c3                   	ret    

c0019e64 <ATA::detectCHS()>:
c0019e64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e68:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019e6e:	c1 e0 06             	shl    eax,0x6
c0019e71:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019e77:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019e81:	c7 44 24 04 a0 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eda0
c0019e89:	e9 75 62 ff ff       	jmp    c0010103 <KePanic(char const*)>

c0019e8e <ATA::open(int, int, void*)>:
c0019e8e:	53                   	push   ebx
c0019e8f:	83 ec 08             	sub    esp,0x8
c0019e92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e9e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019ea4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019eaa:	c1 e0 06             	shl    eax,0x6
c0019ead:	01 d0                	add    eax,edx
c0019eaf:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019eb6:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019ebc:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019ec3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019ecd:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019ed3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019eda:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019ee1:	75 0c                	jne    c0019eef <ATA::open(int, int, void*)+0x61>
c0019ee3:	83 ec 0c             	sub    esp,0xc
c0019ee6:	53                   	push   ebx
c0019ee7:	e8 78 ff ff ff       	call   c0019e64 <ATA::detectCHS()>
c0019eec:	83 c4 10             	add    esp,0x10
c0019eef:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019ef5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019efb:	c1 e0 06             	shl    eax,0x6
c0019efe:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f05:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f0f:	d1 e8                	shr    eax,1
c0019f11:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f17:	6a 04                	push   0x4
c0019f19:	6a 0c                	push   0xc
c0019f1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f22:	50                   	push   eax
c0019f23:	52                   	push   edx
c0019f24:	e8 17 ec ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f29:	90                   	nop
c0019f2a:	90                   	nop
c0019f2b:	6a 00                	push   0x0
c0019f2d:	6a 0c                	push   0xc
c0019f2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f36:	50                   	push   eax
c0019f37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f3d:	e8 fe eb ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f42:	83 c4 14             	add    esp,0x14
c0019f45:	53                   	push   ebx
c0019f46:	e8 b3 1d ff ff       	call   c000bcfe <PhysicalDisk::startCache()>
c0019f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f4e:	e8 3b 2e ff ff       	call   c000cd8e <createPartitionsForDisk(PhysicalDisk*)>
c0019f53:	31 c0                	xor    eax,eax
c0019f55:	83 c4 18             	add    esp,0x18
c0019f58:	5b                   	pop    ebx
c0019f59:	c3                   	ret    

c0019f5a <ATAPI::write(unsigned long long, int, void*)>:
c0019f5a:	b8 03 00 00 00       	mov    eax,0x3
c0019f5f:	c3                   	ret    

c0019f60 <ATAPI::close(int, int, void*)>:
c0019f60:	83 ec 0c             	sub    esp,0xc
c0019f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f6d:	85 c0                	test   eax,eax
c0019f6f:	74 0c                	je     c0019f7d <ATAPI::close(int, int, void*)+0x1d>
c0019f71:	83 ec 0c             	sub    esp,0xc
c0019f74:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f76:	50                   	push   eax
c0019f77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	31 c0                	xor    eax,eax
c0019f7f:	83 c4 0c             	add    esp,0xc
c0019f82:	c3                   	ret    
c0019f83:	90                   	nop

c0019f84 <ATAPI::ATAPI()>:
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8b:	83 ec 04             	sub    esp,0x4
c0019f8e:	68 00 08 00 00       	push   0x800
c0019f93:	68 e9 ee 01 c0       	push   0xc001eee9
c0019f98:	50                   	push   eax
c0019f99:	e8 f8 1c ff ff       	call   c000bc96 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	ba 04 ee 01 c0       	mov    edx,0xc001ee04
c0019fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019faa:	89 10                	mov    DWORD PTR [eax],edx
c0019fac:	90                   	nop
c0019fad:	83 c4 0c             	add    esp,0xc
c0019fb0:	c3                   	ret    
c0019fb1:	90                   	nop

c0019fb2 <ATAPI::readyForCommand()>:
c0019fb2:	56                   	push   esi
c0019fb3:	53                   	push   ebx
c0019fb4:	53                   	push   ebx
c0019fb5:	31 db                	xor    ebx,ebx
c0019fb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fbb:	51                   	push   ecx
c0019fbc:	6a 0c                	push   0xc
c0019fbe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fc5:	50                   	push   eax
c0019fc6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fcc:	e8 2f ec ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c0019fd1:	83 c4 10             	add    esp,0x10
c0019fd4:	a8 88                	test   al,0x88
c0019fd6:	74 25                	je     c0019ffd <ATAPI::readyForCommand()+0x4b>
c0019fd8:	43                   	inc    ebx
c0019fd9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019fdf:	7e da                	jle    c0019fbb <ATAPI::readyForCommand()+0x9>
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	68 5e 01 00 00       	push   0x15e
c0019fe9:	e8 26 96 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019ff7:	75 c2                	jne    c0019fbb <ATAPI::readyForCommand()+0x9>
c0019ff9:	31 c0                	xor    eax,eax
c0019ffb:	eb 02                	jmp    c0019fff <ATAPI::readyForCommand()+0x4d>
c0019ffd:	b0 01                	mov    al,0x1
c0019fff:	5a                   	pop    edx
c001a000:	5b                   	pop    ebx
c001a001:	5e                   	pop    esi
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a004:	55                   	push   ebp
c001a005:	57                   	push   edi
c001a006:	56                   	push   esi
c001a007:	53                   	push   ebx
c001a008:	83 ec 20             	sub    esp,0x20
c001a00b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a00f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a013:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a017:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a01b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a01f:	6a 01                	push   0x1
c001a021:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a028:	50                   	push   eax
c001a029:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a02f:	e8 1a ed ff ff       	call   c0018d4e <IDE::enableIRQs(unsigned char, bool)>
c001a034:	5e                   	pop    esi
c001a035:	58                   	pop    eax
c001a036:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a03d:	50                   	push   eax
c001a03e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a044:	e8 d1 ea ff ff       	call   c0018b1a <IDE::prepareInterrupt(unsigned char)>
c001a049:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a04c:	e8 61 ff ff ff       	call   c0019fb2 <ATAPI::readyForCommand()>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	84 c0                	test   al,al
c001a056:	75 0a                	jne    c001a062 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a058:	bb 01 00 00 00       	mov    ebx,0x1
c001a05d:	e9 57 02 00 00       	jmp    c001a2b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a062:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a068:	c1 e0 04             	shl    eax,0x4
c001a06b:	0f b6 c0             	movzx  eax,al
c001a06e:	50                   	push   eax
c001a06f:	6a 06                	push   0x6
c001a071:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a078:	50                   	push   eax
c001a079:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a07f:	e8 bc ea ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a084:	6a 00                	push   0x0
c001a086:	6a 01                	push   0x1
c001a088:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a08f:	50                   	push   eax
c001a090:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a096:	e8 a5 ea ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a09b:	83 c4 20             	add    esp,0x20
c001a09e:	0f b6 c3             	movzx  eax,bl
c001a0a1:	0f b6 df             	movzx  ebx,bh
c001a0a4:	50                   	push   eax
c001a0a5:	6a 04                	push   0x4
c001a0a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ae:	50                   	push   eax
c001a0af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b5:	e8 86 ea ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ba:	53                   	push   ebx
c001a0bb:	6a 05                	push   0x5
c001a0bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0c4:	50                   	push   eax
c001a0c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0cb:	e8 70 ea ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d0:	83 c4 20             	add    esp,0x20
c001a0d3:	68 a0 00 00 00       	push   0xa0
c001a0d8:	6a 07                	push   0x7
c001a0da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0e1:	50                   	push   eax
c001a0e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0e8:	e8 53 ea ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ed:	83 c4 0c             	add    esp,0xc
c001a0f0:	6a 01                	push   0x1
c001a0f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0f9:	50                   	push   eax
c001a0fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a100:	e8 d9 f4 ff ff       	call   c00195de <IDE::polling(unsigned char, unsigned int)>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a10e:	84 c0                	test   al,al
c001a110:	74 23                	je     c001a135 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a112:	0f b6 d8             	movzx  ebx,al
c001a115:	0f b6 d2             	movzx  edx,dl
c001a118:	53                   	push   ebx
c001a119:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a120:	50                   	push   eax
c001a121:	52                   	push   edx
c001a122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a128:	e8 01 f4 ff ff       	call   c001952e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a12d:	83 c4 10             	add    esp,0x10
c001a130:	e9 84 01 00 00       	jmp    c001a2b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a135:	0f b6 d2             	movzx  edx,dl
c001a138:	53                   	push   ebx
c001a139:	53                   	push   ebx
c001a13a:	52                   	push   edx
c001a13b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a141:	e8 e8 e9 ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c001a146:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a14a:	b9 06 00 00 00       	mov    ecx,0x6
c001a14f:	89 c2                	mov    edx,eax
c001a151:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a154:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a161:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a168:	85 db                	test   ebx,ebx
c001a16a:	0f 84 ec 00 00 00    	je     c001a25c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a170:	51                   	push   ecx
c001a171:	51                   	push   ecx
c001a172:	52                   	push   edx
c001a173:	50                   	push   eax
c001a174:	e8 35 eb ff ff       	call   c0018cae <IDE::waitInterrupt(unsigned char)>
c001a179:	83 c4 10             	add    esp,0x10
c001a17c:	84 c0                	test   al,al
c001a17e:	0f 84 d4 fe ff ff    	je     c001a058 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a184:	56                   	push   esi
c001a185:	56                   	push   esi
c001a186:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a18d:	50                   	push   eax
c001a18e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a194:	e8 81 e9 ff ff       	call   c0018b1a <IDE::prepareInterrupt(unsigned char)>
c001a199:	83 c4 0c             	add    esp,0xc
c001a19c:	6a 04                	push   0x4
c001a19e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1a5:	50                   	push   eax
c001a1a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1ac:	e8 4f ea ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c001a1b1:	83 c4 0c             	add    esp,0xc
c001a1b4:	89 c6                	mov    esi,eax
c001a1b6:	6a 05                	push   0x5
c001a1b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1bf:	50                   	push   eax
c001a1c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1c6:	e8 35 ea ff ff       	call   c0018c00 <IDE::read(unsigned char, unsigned char)>
c001a1cb:	89 f1                	mov    ecx,esi
c001a1cd:	0f b6 c0             	movzx  eax,al
c001a1d0:	0f b6 f1             	movzx  esi,cl
c001a1d3:	c1 e0 08             	shl    eax,0x8
c001a1d6:	09 c6                	or     esi,eax
c001a1d8:	d1 fe                	sar    esi,1
c001a1da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a1de:	83 c4 10             	add    esp,0x10
c001a1e1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a1e6:	74 41                	je     c001a229 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a1e8:	31 c9                	xor    ecx,ecx
c001a1ea:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1f0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1f7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a1fb:	75 0a                	jne    c001a207 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a1fd:	01 c9                	add    ecx,ecx
c001a1ff:	01 cd                	add    ebp,ecx
c001a201:	4b                   	dec    ebx
c001a202:	e9 54 ff ff ff       	jmp    c001a15b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a207:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a20c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a210:	51                   	push   ecx
c001a211:	51                   	push   ecx
c001a212:	52                   	push   edx
c001a213:	50                   	push   eax
c001a214:	e8 15 e9 ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c001a219:	89 c2                	mov    edx,eax
c001a21b:	89 f0                	mov    eax,esi
c001a21d:	66 ef                	out    dx,ax
c001a21f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	41                   	inc    ecx
c001a227:	eb c1                	jmp    c001a1ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a229:	31 f6                	xor    esi,esi
c001a22b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a231:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a238:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a23c:	75 06                	jne    c001a244 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a23e:	01 f6                	add    esi,esi
c001a240:	01 f5                	add    ebp,esi
c001a242:	eb bd                	jmp    c001a201 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a244:	51                   	push   ecx
c001a245:	51                   	push   ecx
c001a246:	52                   	push   edx
c001a247:	50                   	push   eax
c001a248:	e8 e1 e8 ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c001a24d:	89 c2                	mov    edx,eax
c001a24f:	66 ed                	in     ax,dx
c001a251:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	46                   	inc    esi
c001a25a:	eb cf                	jmp    c001a22b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a25c:	51                   	push   ecx
c001a25d:	51                   	push   ecx
c001a25e:	52                   	push   edx
c001a25f:	50                   	push   eax
c001a260:	e8 49 ea ff ff       	call   c0018cae <IDE::waitInterrupt(unsigned char)>
c001a265:	83 c4 10             	add    esp,0x10
c001a268:	84 c0                	test   al,al
c001a26a:	0f 84 e8 fd ff ff    	je     c001a058 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a270:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a275:	52                   	push   edx
c001a276:	52                   	push   edx
c001a277:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a27e:	50                   	push   eax
c001a27f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a285:	e8 90 e8 ff ff       	call   c0018b1a <IDE::prepareInterrupt(unsigned char)>
c001a28a:	83 c4 10             	add    esp,0x10
c001a28d:	50                   	push   eax
c001a28e:	50                   	push   eax
c001a28f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a296:	50                   	push   eax
c001a297:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a29d:	e8 8c e8 ff ff       	call   c0018b2e <IDE::getBase(unsigned char)>
c001a2a2:	8d 50 07             	lea    edx,[eax+0x7]
c001a2a5:	ec                   	in     al,dx
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	a8 88                	test   al,0x88
c001a2ab:	74 0a                	je     c001a2b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a2ad:	4b                   	dec    ebx
c001a2ae:	75 dd                	jne    c001a28d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a2b0:	bb 02 00 00 00       	mov    ebx,0x2
c001a2b5:	eb 02                	jmp    c001a2b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a2b7:	31 db                	xor    ebx,ebx
c001a2b9:	83 c4 1c             	add    esp,0x1c
c001a2bc:	89 d8                	mov    eax,ebx
c001a2be:	5b                   	pop    ebx
c001a2bf:	5e                   	pop    esi
c001a2c0:	5f                   	pop    edi
c001a2c1:	5d                   	pop    ebp
c001a2c2:	c3                   	ret    
c001a2c3:	90                   	nop

c001a2c4 <ATAPI::diskRemoved()>:
c001a2c4:	53                   	push   ebx
c001a2c5:	83 ec 14             	sub    esp,0x14
c001a2c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a2cc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a2d3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a2d9:	e8 2e 28 ff ff       	call   c000cb0c <LogicalDisk::unmount()>
c001a2de:	58                   	pop    eax
c001a2df:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a2e5:	e8 6a 31 ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c001a2ea:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a2f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a2f4:	83 c4 18             	add    esp,0x18
c001a2f7:	5b                   	pop    ebx
c001a2f8:	e9 47 31 ff ff       	jmp    c000d444 <VCache::invalidateReadBuffer()>
c001a2fd:	90                   	nop

c001a2fe <ATAPI::eject()>:
c001a2fe:	57                   	push   edi
c001a2ff:	b9 03 00 00 00       	mov    ecx,0x3
c001a304:	53                   	push   ebx
c001a305:	83 ec 14             	sub    esp,0x14
c001a308:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a30c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a310:	fc                   	cld    
c001a311:	31 c0                	xor    eax,eax
c001a313:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a315:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a31a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a31f:	50                   	push   eax
c001a320:	50                   	push   eax
c001a321:	6a 00                	push   0x0
c001a323:	6a 00                	push   0x0
c001a325:	6a 00                	push   0x0
c001a327:	6a 02                	push   0x2
c001a329:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a32d:	50                   	push   eax
c001a32e:	53                   	push   ebx
c001a32f:	e8 d0 fc ff ff       	call   c001a004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a334:	83 c4 14             	add    esp,0x14
c001a337:	53                   	push   ebx
c001a338:	e8 87 ff ff ff       	call   c001a2c4 <ATAPI::diskRemoved()>
c001a33d:	83 c4 24             	add    esp,0x24
c001a340:	31 c0                	xor    eax,eax
c001a342:	5b                   	pop    ebx
c001a343:	5f                   	pop    edi
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <ATAPI::diskInserted()>:
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a351:	c3                   	ret    

c001a352 <ATAPI::detectMedia()>:
c001a352:	56                   	push   esi
c001a353:	53                   	push   ebx
c001a354:	83 ec 28             	sub    esp,0x28
c001a357:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a35b:	6a 0c                	push   0xc
c001a35d:	6a 00                	push   0x0
c001a35f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a363:	56                   	push   esi
c001a364:	e8 67 61 fe ff       	call   c00004d0 <memset>
c001a369:	58                   	pop    eax
c001a36a:	5a                   	pop    edx
c001a36b:	6a 00                	push   0x0
c001a36d:	6a 00                	push   0x0
c001a36f:	6a 00                	push   0x0
c001a371:	6a 00                	push   0x0
c001a373:	56                   	push   esi
c001a374:	53                   	push   ebx
c001a375:	e8 8a fc ff ff       	call   c001a004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a37a:	83 c4 1c             	add    esp,0x1c
c001a37d:	6a 0c                	push   0xc
c001a37f:	6a 00                	push   0x0
c001a381:	56                   	push   esi
c001a382:	e8 49 61 fe ff       	call   c00004d0 <memset>
c001a387:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a38c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a391:	59                   	pop    ecx
c001a392:	58                   	pop    eax
c001a393:	6a 01                	push   0x1
c001a395:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a399:	50                   	push   eax
c001a39a:	6a 00                	push   0x0
c001a39c:	6a 12                	push   0x12
c001a39e:	56                   	push   esi
c001a39f:	53                   	push   ebx
c001a3a0:	e8 5f fc ff ff       	call   c001a004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3a5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a3a9:	83 c4 20             	add    esp,0x20
c001a3ac:	83 e0 7f             	and    eax,0x7f
c001a3af:	3c 70                	cmp    al,0x70
c001a3b1:	74 15                	je     c001a3c8 <ATAPI::detectMedia()+0x76>
c001a3b3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3ba:	75 0c                	jne    c001a3c8 <ATAPI::detectMedia()+0x76>
c001a3bc:	83 ec 0c             	sub    esp,0xc
c001a3bf:	53                   	push   ebx
c001a3c0:	e8 81 ff ff ff       	call   c001a346 <ATAPI::diskInserted()>
c001a3c5:	83 c4 10             	add    esp,0x10
c001a3c8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a3cc:	83 e0 0f             	and    eax,0xf
c001a3cf:	3c 02                	cmp    al,0x2
c001a3d1:	75 1b                	jne    c001a3ee <ATAPI::detectMedia()+0x9c>
c001a3d3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a3d8:	75 2d                	jne    c001a407 <ATAPI::detectMedia()+0xb5>
c001a3da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3e1:	74 24                	je     c001a407 <ATAPI::detectMedia()+0xb5>
c001a3e3:	83 ec 0c             	sub    esp,0xc
c001a3e6:	53                   	push   ebx
c001a3e7:	e8 d8 fe ff ff       	call   c001a2c4 <ATAPI::diskRemoved()>
c001a3ec:	eb 16                	jmp    c001a404 <ATAPI::detectMedia()+0xb2>
c001a3ee:	84 c0                	test   al,al
c001a3f0:	75 15                	jne    c001a407 <ATAPI::detectMedia()+0xb5>
c001a3f2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3f9:	75 0c                	jne    c001a407 <ATAPI::detectMedia()+0xb5>
c001a3fb:	83 ec 0c             	sub    esp,0xc
c001a3fe:	53                   	push   ebx
c001a3ff:	e8 42 ff ff ff       	call   c001a346 <ATAPI::diskInserted()>
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	83 c4 24             	add    esp,0x24
c001a40a:	5b                   	pop    ebx
c001a40b:	5e                   	pop    esi
c001a40c:	c3                   	ret    
c001a40d:	90                   	nop

c001a40e <ATAPI::open(int, int, void*)>:
c001a40e:	56                   	push   esi
c001a40f:	53                   	push   ebx
c001a410:	50                   	push   eax
c001a411:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a419:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a41d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a423:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a429:	c1 e0 06             	shl    eax,0x6
c001a42c:	01 d0                	add    eax,edx
c001a42e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a435:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a43b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a442:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a44c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a452:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a459:	6a 04                	push   0x4
c001a45b:	6a 0c                	push   0xc
c001a45d:	51                   	push   ecx
c001a45e:	52                   	push   edx
c001a45f:	e8 dc e6 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a464:	90                   	nop
c001a465:	90                   	nop
c001a466:	6a 00                	push   0x0
c001a468:	6a 0c                	push   0xc
c001a46a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a471:	50                   	push   eax
c001a472:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a478:	e8 c3 e6 ff ff       	call   c0018b40 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a47d:	83 c4 14             	add    esp,0x14
c001a480:	68 74 01 00 00       	push   0x174
c001a485:	e8 2f d3 fe ff       	call   c00077b9 <malloc>
c001a48a:	83 c4 0c             	add    esp,0xc
c001a48d:	89 c6                	mov    esi,eax
c001a48f:	6a 00                	push   0x0
c001a491:	68 ff ff ff 7f       	push   0x7fffffff
c001a496:	6a 00                	push   0x0
c001a498:	6a 00                	push   0x0
c001a49a:	53                   	push   ebx
c001a49b:	68 a0 ef 01 c0       	push   0xc001efa0
c001a4a0:	50                   	push   eax
c001a4a1:	e8 b2 24 ff ff       	call   c000c958 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a4a6:	83 c4 14             	add    esp,0x14
c001a4a9:	56                   	push   esi
c001a4aa:	e8 5f 25 ff ff       	call   c000ca0e <LogicalDisk::assignDriveLetter()>
c001a4af:	5a                   	pop    edx
c001a4b0:	0f be c0             	movsx  eax,al
c001a4b3:	59                   	pop    ecx
c001a4b4:	50                   	push   eax
c001a4b5:	68 ec ed 01 c0       	push   0xc001edec
c001a4ba:	e8 c9 ff fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001a4bf:	58                   	pop    eax
c001a4c0:	5a                   	pop    edx
c001a4c1:	56                   	push   esi
c001a4c2:	53                   	push   ebx
c001a4c3:	e8 00 14 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c001a4c8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a4ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4d1:	e8 28 18 ff ff       	call   c000bcfe <PhysicalDisk::startCache()>
c001a4d6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a4dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4e0:	e8 6d fe ff ff       	call   c001a352 <ATAPI::detectMedia()>
c001a4e5:	83 c4 14             	add    esp,0x14
c001a4e8:	31 c0                	xor    eax,eax
c001a4ea:	5b                   	pop    ebx
c001a4eb:	5e                   	pop    esi
c001a4ec:	c3                   	ret    
c001a4ed:	90                   	nop

c001a4ee <ATAPI::read(unsigned long long, int, void*)>:
c001a4ee:	55                   	push   ebp
c001a4ef:	57                   	push   edi
c001a4f0:	56                   	push   esi
c001a4f1:	53                   	push   ebx
c001a4f2:	83 ec 1c             	sub    esp,0x1c
c001a4f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a4f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a4fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a501:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a508:	74 3c                	je     c001a546 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a50a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a50e:	b9 03 00 00 00       	mov    ecx,0x3
c001a513:	fc                   	cld    
c001a514:	31 c0                	xor    eax,eax
c001a516:	0f ce                	bswap  esi
c001a518:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a51a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a51f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a523:	89 e8                	mov    eax,ebp
c001a525:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a529:	50                   	push   eax
c001a52a:	50                   	push   eax
c001a52b:	55                   	push   ebp
c001a52c:	c1 e5 0b             	shl    ebp,0xb
c001a52f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a533:	6a 00                	push   0x0
c001a535:	55                   	push   ebp
c001a536:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a53a:	50                   	push   eax
c001a53b:	53                   	push   ebx
c001a53c:	e8 c3 fa ff ff       	call   c001a004 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a541:	83 c4 20             	add    esp,0x20
c001a544:	eb 1a                	jmp    c001a560 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a546:	83 ec 0c             	sub    esp,0xc
c001a549:	53                   	push   ebx
c001a54a:	e8 03 fe ff ff       	call   c001a352 <ATAPI::detectMedia()>
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a559:	75 af                	jne    c001a50a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a55b:	b8 02 00 00 00       	mov    eax,0x2
c001a560:	83 c4 1c             	add    esp,0x1c
c001a563:	5b                   	pop    ebx
c001a564:	5e                   	pop    esi
c001a565:	5f                   	pop    edi
c001a566:	5d                   	pop    ebp
c001a567:	c3                   	ret    

c001a568 <SATA::close(int, int, void*)>:
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a56f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a575:	85 c0                	test   eax,eax
c001a577:	74 0c                	je     c001a585 <SATA::close(int, int, void*)+0x1d>
c001a579:	83 ec 0c             	sub    esp,0xc
c001a57c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a57e:	50                   	push   eax
c001a57f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	31 c0                	xor    eax,eax
c001a587:	83 c4 0c             	add    esp,0xc
c001a58a:	c3                   	ret    
c001a58b:	90                   	nop

c001a58c <SATA::powerSaving(PowerSavingLevel)>:
c001a58c:	c3                   	ret    
c001a58d:	90                   	nop

c001a58e <SATA::open(int, int, void*)>:
c001a58e:	56                   	push   esi
c001a58f:	53                   	push   ebx
c001a590:	50                   	push   eax
c001a591:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a595:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a599:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a5a3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a5a9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a5b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a5c1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a5c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a5ce:	e8 c2 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a5d3:	89 c6                	mov    esi,eax
c001a5d5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a5db:	81 c6 00 10 00 00    	add    esi,0x1000
c001a5e1:	e8 af d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a5e6:	39 c6                	cmp    esi,eax
c001a5e8:	74 10                	je     c001a5fa <SATA::open(int, int, void*)+0x6c>
c001a5ea:	83 ec 0c             	sub    esp,0xc
c001a5ed:	68 34 ee 01 c0       	push   0xc001ee34
c001a5f2:	e8 0c 5b ff ff       	call   c0010103 <KePanic(char const*)>
c001a5f7:	83 c4 10             	add    esp,0x10
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	6a 02                	push   0x2
c001a5ff:	e8 31 ec fe ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c001a604:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a60a:	6a 03                	push   0x3
c001a60c:	50                   	push   eax
c001a60d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a613:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c001a619:	e8 ac f2 fe ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c001a61e:	83 c4 14             	add    esp,0x14
c001a621:	53                   	push   ebx
c001a622:	e8 d7 16 ff ff       	call   c000bcfe <PhysicalDisk::startCache()>
c001a627:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a62a:	e8 5f 27 ff ff       	call   c000cd8e <createPartitionsForDisk(PhysicalDisk*)>
c001a62f:	83 c4 14             	add    esp,0x14
c001a632:	31 c0                	xor    eax,eax
c001a634:	5b                   	pop    ebx
c001a635:	5e                   	pop    esi
c001a636:	c3                   	ret    
c001a637:	90                   	nop

c001a638 <SATA::SATA()>:
c001a638:	83 ec 0c             	sub    esp,0xc
c001a63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a63f:	83 ec 04             	sub    esp,0x4
c001a642:	68 00 02 00 00       	push   0x200
c001a647:	68 48 ee 01 c0       	push   0xc001ee48
c001a64c:	50                   	push   eax
c001a64d:	e8 44 16 ff ff       	call   c000bc96 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	ba b8 ee 01 c0       	mov    edx,0xc001eeb8
c001a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a65e:	89 10                	mov    DWORD PTR [eax],edx
c001a660:	90                   	nop
c001a661:	83 c4 0c             	add    esp,0xc
c001a664:	c3                   	ret    
c001a665:	90                   	nop

c001a666 <SATA::access(unsigned long long, int, void*, bool)>:
c001a666:	55                   	push   ebp
c001a667:	57                   	push   edi
c001a668:	56                   	push   esi
c001a669:	53                   	push   ebx
c001a66a:	83 ec 2c             	sub    esp,0x2c
c001a66d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a671:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a675:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a679:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a67d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a681:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a686:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a68a:	7e 10                	jle    c001a69c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	68 58 ee 01 c0       	push   0xc001ee58
c001a694:	e8 6a 5a ff ff       	call   c0010103 <KePanic(char const*)>
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a6a2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a6a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a6ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a6b2:	89 d0                	mov    eax,edx
c001a6b4:	c1 e0 07             	shl    eax,0x7
c001a6b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6bb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a6c5:	51                   	push   ecx
c001a6c6:	8d 42 02             	lea    eax,[edx+0x2]
c001a6c9:	51                   	push   ecx
c001a6ca:	c1 e0 07             	shl    eax,0x7
c001a6cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a6d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a6d5:	50                   	push   eax
c001a6d6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a6dc:	e8 e7 ef ff ff       	call   c00196c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a6e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a6ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6f1:	0f 84 4f 01 00 00    	je     c001a846 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a6f7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6fb:	c1 e0 09             	shl    eax,0x9
c001a6fe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a703:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a707:	74 0e                	je     c001a717 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a709:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a70f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a713:	89 c1                	mov    ecx,eax
c001a715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a717:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a71b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a721:	8d 42 02             	lea    eax,[edx+0x2]
c001a724:	c1 e0 07             	shl    eax,0x7
c001a727:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a72b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a72d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a733:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a739:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a73d:	c1 e1 05             	shl    ecx,0x5
c001a740:	01 c8                	add    eax,ecx
c001a742:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a746:	83 e1 01             	and    ecx,0x1
c001a749:	89 ce                	mov    esi,ecx
c001a74b:	8a 08                	mov    cl,BYTE PTR [eax]
c001a74d:	c1 e6 06             	shl    esi,0x6
c001a750:	83 e1 bf             	and    ecx,0xffffffbf
c001a753:	09 f1                	or     ecx,esi
c001a755:	88 08                	mov    BYTE PTR [eax],cl
c001a757:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a759:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a75f:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a765:	89 08                	mov    DWORD PTR [eax],ecx
c001a767:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a76d:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a773:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a779:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a77c:	50                   	push   eax
c001a77d:	68 90 00 00 00       	push   0x90
c001a782:	6a 00                	push   0x0
c001a784:	56                   	push   esi
c001a785:	e8 46 5d fe ff       	call   c00004d0 <memset>
c001a78a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a790:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a794:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a79a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a79e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a7a2:	83 c4 10             	add    esp,0x10
c001a7a5:	48                   	dec    eax
c001a7a6:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a7ab:	89 c1                	mov    ecx,eax
c001a7ad:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a7b3:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a7b8:	09 c8                	or     eax,ecx
c001a7ba:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a7c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a7c3:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a7ca:	66 25 00 7f          	and    ax,0x7f00
c001a7ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7d2:	66 0d 27 80          	or     ax,0x8027
c001a7d6:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a7db:	66 89 06             	mov    WORD PTR [esi],ax
c001a7de:	19 c0                	sbb    eax,eax
c001a7e0:	83 e0 f0             	and    eax,0xfffffff0
c001a7e3:	83 c0 35             	add    eax,0x35
c001a7e6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a7e9:	89 e8                	mov    eax,ebp
c001a7eb:	c1 e8 10             	shr    eax,0x10
c001a7ee:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a7f1:	89 e8                	mov    eax,ebp
c001a7f3:	c1 e8 18             	shr    eax,0x18
c001a7f6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a7f9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a7fd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a800:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a804:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a807:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a80b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a80f:	89 d6                	mov    esi,edx
c001a811:	31 c0                	xor    eax,eax
c001a813:	c1 e6 07             	shl    esi,0x7
c001a816:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a81a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a820:	80 e1 88             	and    cl,0x88
c001a823:	74 0a                	je     c001a82f <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a825:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a82a:	74 0a                	je     c001a836 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a82c:	40                   	inc    eax
c001a82d:	eb eb                	jmp    c001a81a <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a82f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a834:	75 17                	jne    c001a84d <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a836:	83 ec 0c             	sub    esp,0xc
c001a839:	68 91 ee 01 c0       	push   0xc001ee91
c001a83e:	e8 45 fc fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001a843:	83 c4 10             	add    esp,0x10
c001a846:	b8 01 00 00 00       	mov    eax,0x1
c001a84b:	eb 5d                	jmp    c001a8aa <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a84d:	b8 01 00 00 00       	mov    eax,0x1
c001a852:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a856:	c1 e2 07             	shl    edx,0x7
c001a859:	d3 e0                	shl    eax,cl
c001a85b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a85f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a865:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a86b:	85 c8                	test   eax,ecx
c001a86d:	74 16                	je     c001a885 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a86f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a875:	0f ba e1 1e          	bt     ecx,0x1e
c001a879:	73 ea                	jae    c001a865 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a87b:	83 ec 0c             	sub    esp,0xc
c001a87e:	68 9f ee 01 c0       	push   0xc001ee9f
c001a883:	eb b9                	jmp    c001a83e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a885:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a88b:	0f ba e0 1e          	bt     eax,0x1e
c001a88f:	72 b5                	jb     c001a846 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a891:	31 c0                	xor    eax,eax
c001a893:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a898:	75 10                	jne    c001a8aa <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a89a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a8a0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a8a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8aa:	83 c4 2c             	add    esp,0x2c
c001a8ad:	5b                   	pop    ebx
c001a8ae:	5e                   	pop    esi
c001a8af:	5f                   	pop    edi
c001a8b0:	5d                   	pop    ebp
c001a8b1:	c3                   	ret    

c001a8b2 <SATA::read(unsigned long long, int, void*)>:
c001a8b2:	57                   	push   edi
c001a8b3:	b8 04 00 00 00       	mov    eax,0x4
c001a8b8:	56                   	push   esi
c001a8b9:	53                   	push   ebx
c001a8ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8c2:	8d 7a ff             	lea    edi,[edx-0x1]
c001a8c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a8c9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a8cd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a8d3:	77 25                	ja     c001a8fa <SATA::read(unsigned long long, int, void*)+0x48>
c001a8d5:	b8 06 00 00 00       	mov    eax,0x6
c001a8da:	85 f6                	test   esi,esi
c001a8dc:	74 1c                	je     c001a8fa <SATA::read(unsigned long long, int, void*)+0x48>
c001a8de:	50                   	push   eax
c001a8df:	50                   	push   eax
c001a8e0:	6a 00                	push   0x0
c001a8e2:	56                   	push   esi
c001a8e3:	52                   	push   edx
c001a8e4:	53                   	push   ebx
c001a8e5:	51                   	push   ecx
c001a8e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8ea:	e8 77 fd ff ff       	call   c001a666 <SATA::access(unsigned long long, int, void*, bool)>
c001a8ef:	83 c4 20             	add    esp,0x20
c001a8f2:	85 c0                	test   eax,eax
c001a8f4:	0f 95 c0             	setne  al
c001a8f7:	0f b6 c0             	movzx  eax,al
c001a8fa:	5b                   	pop    ebx
c001a8fb:	5e                   	pop    esi
c001a8fc:	5f                   	pop    edi
c001a8fd:	c3                   	ret    

c001a8fe <SATA::write(unsigned long long, int, void*)>:
c001a8fe:	55                   	push   ebp
c001a8ff:	b8 04 00 00 00       	mov    eax,0x4
c001a904:	57                   	push   edi
c001a905:	56                   	push   esi
c001a906:	53                   	push   ebx
c001a907:	83 ec 0c             	sub    esp,0xc
c001a90a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a90e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a912:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a915:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a919:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a91d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a923:	77 3d                	ja     c001a962 <SATA::write(unsigned long long, int, void*)+0x64>
c001a925:	b8 06 00 00 00       	mov    eax,0x6
c001a92a:	85 ed                	test   ebp,ebp
c001a92c:	74 34                	je     c001a962 <SATA::write(unsigned long long, int, void*)+0x64>
c001a92e:	c1 e3 09             	shl    ebx,0x9
c001a931:	01 eb                	add    ebx,ebp
c001a933:	89 d6                	mov    esi,edx
c001a935:	89 cf                	mov    edi,ecx
c001a937:	83 c6 01             	add    esi,0x1
c001a93a:	83 d7 00             	adc    edi,0x0
c001a93d:	50                   	push   eax
c001a93e:	50                   	push   eax
c001a93f:	6a 01                	push   0x1
c001a941:	55                   	push   ebp
c001a942:	81 c5 00 02 00 00    	add    ebp,0x200
c001a948:	6a 01                	push   0x1
c001a94a:	51                   	push   ecx
c001a94b:	52                   	push   edx
c001a94c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a950:	e8 11 fd ff ff       	call   c001a666 <SATA::access(unsigned long long, int, void*, bool)>
c001a955:	83 c4 20             	add    esp,0x20
c001a958:	89 f2                	mov    edx,esi
c001a95a:	89 f9                	mov    ecx,edi
c001a95c:	39 dd                	cmp    ebp,ebx
c001a95e:	75 d3                	jne    c001a933 <SATA::write(unsigned long long, int, void*)+0x35>
c001a960:	31 c0                	xor    eax,eax
c001a962:	83 c4 0c             	add    esp,0xc
c001a965:	5b                   	pop    ebx
c001a966:	5e                   	pop    esi
c001a967:	5f                   	pop    edi
c001a968:	5d                   	pop    ebp
c001a969:	c3                   	ret    

c001a96a <SATAPI::write(unsigned long long, int, void*)>:
c001a96a:	b8 03 00 00 00       	mov    eax,0x3
c001a96f:	c3                   	ret    

c001a970 <SATAPI::close(int, int, void*)>:
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a977:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a97d:	85 c0                	test   eax,eax
c001a97f:	74 0c                	je     c001a98d <SATAPI::close(int, int, void*)+0x1d>
c001a981:	83 ec 0c             	sub    esp,0xc
c001a984:	8b 10                	mov    edx,DWORD PTR [eax]
c001a986:	50                   	push   eax
c001a987:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	31 c0                	xor    eax,eax
c001a98f:	83 c4 0c             	add    esp,0xc
c001a992:	c3                   	ret    
c001a993:	90                   	nop

c001a994 <SATAPI::SATAPI()>:
c001a994:	83 ec 0c             	sub    esp,0xc
c001a997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99b:	83 ec 04             	sub    esp,0x4
c001a99e:	68 00 08 00 00       	push   0x800
c001a9a3:	68 e8 ee 01 c0       	push   0xc001eee8
c001a9a8:	50                   	push   eax
c001a9a9:	e8 e8 12 ff ff       	call   c000bc96 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a9ae:	83 c4 10             	add    esp,0x10
c001a9b1:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c001a9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9ba:	89 10                	mov    DWORD PTR [eax],edx
c001a9bc:	90                   	nop
c001a9bd:	83 c4 0c             	add    esp,0xc
c001a9c0:	c3                   	ret    
c001a9c1:	90                   	nop

c001a9c2 <SATAPI::diskRemoved()>:
c001a9c2:	c3                   	ret    
c001a9c3:	90                   	nop

c001a9c4 <SATAPI::diskInserted()>:
c001a9c4:	83 ec 18             	sub    esp,0x18
c001a9c7:	68 f4 ee 01 c0       	push   0xc001eef4
c001a9cc:	e8 b7 fa fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001a9d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a9dc:	83 c4 1c             	add    esp,0x1c
c001a9df:	c3                   	ret    

c001a9e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a9e0:	55                   	push   ebp
c001a9e1:	57                   	push   edi
c001a9e2:	56                   	push   esi
c001a9e3:	53                   	push   ebx
c001a9e4:	83 ec 38             	sub    esp,0x38
c001a9e7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a9eb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a9ef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a9f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9f7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a9fb:	68 0c ef 01 c0       	push   0xc001ef0c
c001aa00:	e8 83 fa fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001aa05:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa15:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa1f:	83 c0 02             	add    eax,0x2
c001aa22:	c1 e0 07             	shl    eax,0x7
c001aa25:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa31:	c1 e0 07             	shl    eax,0x7
c001aa34:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa3c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aa46:	58                   	pop    eax
c001aa47:	5a                   	pop    edx
c001aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aa4c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa52:	e8 71 ec ff ff       	call   c00196c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	b8 01 00 00 00       	mov    eax,0x1
c001aa63:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aa68:	0f 84 49 02 00 00    	je     c001acb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aa6e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa78:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa7a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aa80:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aa86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa8a:	c1 e1 05             	shl    ecx,0x5
c001aa8d:	01 c8                	add    eax,ecx
c001aa8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa91:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aa97:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aa9d:	89 08                	mov    DWORD PTR [eax],ecx
c001aa9f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aaa5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aaab:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aab1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aab4:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aab7:	50                   	push   eax
c001aab8:	68 90 00 00 00       	push   0x90
c001aabd:	6a 00                	push   0x0
c001aabf:	53                   	push   ebx
c001aac0:	e8 0b 5a fe ff       	call   c00004d0 <memset>
c001aac5:	b9 0c 00 00 00       	mov    ecx,0xc
c001aaca:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001aace:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aad0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001aad6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001aada:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aae0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aae4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aae8:	48                   	dec    eax
c001aae9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001aaee:	89 c1                	mov    ecx,eax
c001aaf0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001aaf6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001aafb:	09 c8                	or     eax,ecx
c001aafd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab03:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab06:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab0d:	66 25 00 7f          	and    ax,0x7f00
c001ab11:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab15:	66 0d 27 80          	or     ax,0x8027
c001ab19:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab1d:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab20:	89 d0                	mov    eax,edx
c001ab22:	c1 ea 18             	shr    edx,0x18
c001ab25:	c1 e8 10             	shr    eax,0x10
c001ab28:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab2b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab2e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ab32:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ab35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab39:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ab3c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ab47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab4b:	31 c0                	xor    eax,eax
c001ab4d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab53:	80 e1 88             	and    cl,0x88
c001ab56:	74 0a                	je     c001ab62 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ab58:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab5d:	74 0a                	je     c001ab69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ab5f:	40                   	inc    eax
c001ab60:	eb eb                	jmp    c001ab4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ab62:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab67:	75 43                	jne    c001abac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ab69:	83 ec 0c             	sub    esp,0xc
c001ab6c:	68 26 ef 01 c0       	push   0xc001ef26
c001ab71:	e8 12 f9 fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001ab76:	58                   	pop    eax
c001ab77:	5a                   	pop    edx
c001ab78:	68 3b ef 01 c0       	push   0xc001ef3b
c001ab7d:	ff 35 a4 04 02 c0    	push   DWORD PTR ds:0xc00204a4
c001ab83:	e8 ae db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001ab88:	59                   	pop    ecx
c001ab89:	5b                   	pop    ebx
c001ab8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab8e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ab94:	e8 c9 eb ff ff       	call   c0019762 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ab99:	5e                   	pop    esi
c001ab9a:	5f                   	pop    edi
c001ab9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab9f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aba5:	e8 98 eb ff ff       	call   c0019742 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001abaa:	eb 48                	jmp    c001abf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001abac:	be 01 00 00 00       	mov    esi,0x1
c001abb1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001abb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001abb9:	d3 e6                	shl    esi,cl
c001abbb:	c1 e7 07             	shl    edi,0x7
c001abbe:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001abc4:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001abc9:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001abcd:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001abd3:	85 c6                	test   esi,eax
c001abd5:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001abdb:	0f 84 a3 00 00 00    	je     c001ac84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001abe1:	0f ba e0 1e          	bt     eax,0x1e
c001abe5:	73 1a                	jae    c001ac01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001abe7:	83 ec 0c             	sub    esp,0xc
c001abea:	68 4d ef 01 c0       	push   0xc001ef4d
c001abef:	e8 94 f8 fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001abf4:	83 c4 10             	add    esp,0x10
c001abf7:	b8 01 00 00 00       	mov    eax,0x1
c001abfc:	e9 b6 00 00 00       	jmp    c001acb7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac01:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac07:	83 f8 0d             	cmp    eax,0xd
c001ac0a:	77 0a                	ja     c001ac16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	68 c8 00 00 00       	push   0xc8
c001ac14:	eb 28                	jmp    c001ac3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac16:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac1c:	83 f8 0d             	cmp    eax,0xd
c001ac1f:	77 0a                	ja     c001ac2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001ac21:	83 ec 0c             	sub    esp,0xc
c001ac24:	68 58 02 00 00       	push   0x258
c001ac29:	eb 13                	jmp    c001ac3e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac2b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ac31:	83 f8 06             	cmp    eax,0x6
c001ac34:	77 10                	ja     c001ac46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	68 dc 05 00 00       	push   0x5dc
c001ac3e:	e8 d1 89 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac4a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac4d:	75 06                	jne    c001ac55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ac4f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac53:	74 15                	je     c001ac6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac55:	83 fb 06             	cmp    ebx,0x6
c001ac58:	77 10                	ja     c001ac6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	68 c4 09 00 00       	push   0x9c4
c001ac62:	e8 ad 89 ff ff       	call   c0013614 <milliTenthSleep(unsigned int)>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	43                   	inc    ebx
c001ac6b:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ac71:	0f 85 56 ff ff ff    	jne    c001abcd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001ac77:	83 ec 0c             	sub    esp,0xc
c001ac7a:	68 60 ef 01 c0       	push   0xc001ef60
c001ac7f:	e9 6b ff ff ff       	jmp    c001abef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac84:	0f ba e0 1e          	bt     eax,0x1e
c001ac88:	73 0d                	jae    c001ac97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	68 74 ef 01 c0       	push   0xc001ef74
c001ac92:	e9 58 ff ff ff       	jmp    c001abef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac97:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ac9c:	74 17                	je     c001acb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ac9e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001aca3:	74 10                	je     c001acb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001aca5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001acab:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001acaf:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001acb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001acb5:	31 c0                	xor    eax,eax
c001acb7:	83 c4 2c             	add    esp,0x2c
c001acba:	5b                   	pop    ebx
c001acbb:	5e                   	pop    esi
c001acbc:	5f                   	pop    edi
c001acbd:	5d                   	pop    ebp
c001acbe:	c3                   	ret    
c001acbf:	90                   	nop

c001acc0 <SATAPI::eject()>:
c001acc0:	57                   	push   edi
c001acc1:	b9 03 00 00 00       	mov    ecx,0x3
c001acc6:	83 ec 18             	sub    esp,0x18
c001acc9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001accd:	fc                   	cld    
c001acce:	31 c0                	xor    eax,eax
c001acd0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001acd2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001acd7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001acdc:	50                   	push   eax
c001acdd:	6a 00                	push   0x0
c001acdf:	6a 00                	push   0x0
c001ace1:	6a 00                	push   0x0
c001ace3:	6a 00                	push   0x0
c001ace5:	6a 02                	push   0x2
c001ace7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aceb:	50                   	push   eax
c001acec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acf0:	e8 eb fc ff ff       	call   c001a9e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001acf5:	31 c0                	xor    eax,eax
c001acf7:	83 c4 38             	add    esp,0x38
c001acfa:	5f                   	pop    edi
c001acfb:	c3                   	ret    

c001acfc <SATAPI::detectMedia()>:
c001acfc:	53                   	push   ebx
c001acfd:	83 ec 14             	sub    esp,0x14
c001ad00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad04:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad0a:	e8 45 27 ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c001ad0f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad15:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad19:	83 c4 18             	add    esp,0x18
c001ad1c:	5b                   	pop    ebx
c001ad1d:	e9 22 27 ff ff       	jmp    c000d444 <VCache::invalidateReadBuffer()>

c001ad22 <SATAPI::open(int, int, void*)>:
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	51                   	push   ecx
c001ad25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad2d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ad37:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ad3d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ad47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad4b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad55:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad5b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad62:	e8 2e cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad67:	89 c6                	mov    esi,eax
c001ad69:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ad6f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad75:	e8 1b cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad7a:	39 c6                	cmp    esi,eax
c001ad7c:	74 10                	je     c001ad8e <SATAPI::open(int, int, void*)+0x6c>
c001ad7e:	83 ec 0c             	sub    esp,0xc
c001ad81:	68 89 ef 01 c0       	push   0xc001ef89
c001ad86:	e8 78 53 ff ff       	call   c0010103 <KePanic(char const*)>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	6a 02                	push   0x2
c001ad93:	e8 9d e4 fe ff       	call   c0009235 <Virt::allocateKernelVirtualPages(int)>
c001ad98:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ad9e:	6a 03                	push   0x3
c001ada0:	50                   	push   eax
c001ada1:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ada7:	ff 35 50 05 02 c0    	push   DWORD PTR ds:0xc0020550
c001adad:	e8 18 eb fe ff       	call   c00098ca <VAS::mapPage(unsigned long, unsigned long, int)>
c001adb2:	83 c4 14             	add    esp,0x14
c001adb5:	68 74 01 00 00       	push   0x174
c001adba:	e8 fa c9 fe ff       	call   c00077b9 <malloc>
c001adbf:	83 c4 0c             	add    esp,0xc
c001adc2:	89 c6                	mov    esi,eax
c001adc4:	6a 00                	push   0x0
c001adc6:	68 ff ff ff 7f       	push   0x7fffffff
c001adcb:	6a 00                	push   0x0
c001adcd:	6a 00                	push   0x0
c001adcf:	53                   	push   ebx
c001add0:	68 9f ef 01 c0       	push   0xc001ef9f
c001add5:	50                   	push   eax
c001add6:	e8 7d 1b ff ff       	call   c000c958 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001addb:	83 c4 14             	add    esp,0x14
c001adde:	56                   	push   esi
c001addf:	e8 2a 1c ff ff       	call   c000ca0e <LogicalDisk::assignDriveLetter()>
c001ade4:	5a                   	pop    edx
c001ade5:	0f be c0             	movsx  eax,al
c001ade8:	59                   	pop    ecx
c001ade9:	50                   	push   eax
c001adea:	68 ec ed 01 c0       	push   0xc001edec
c001adef:	e8 94 f6 fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001adf4:	58                   	pop    eax
c001adf5:	5a                   	pop    edx
c001adf6:	56                   	push   esi
c001adf7:	53                   	push   ebx
c001adf8:	e8 cb 0a ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c001adfd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae06:	e8 f3 0e ff ff       	call   c000bcfe <PhysicalDisk::startCache()>
c001ae0b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae15:	e8 e2 fe ff ff       	call   c001acfc <SATAPI::detectMedia()>
c001ae1a:	83 c4 14             	add    esp,0x14
c001ae1d:	31 c0                	xor    eax,eax
c001ae1f:	5b                   	pop    ebx
c001ae20:	5e                   	pop    esi
c001ae21:	c3                   	ret    

c001ae22 <SATAPI::read(unsigned long long, int, void*)>:
c001ae22:	57                   	push   edi
c001ae23:	56                   	push   esi
c001ae24:	53                   	push   ebx
c001ae25:	83 ec 3c             	sub    esp,0x3c
c001ae28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae2c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ae30:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ae34:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ae38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae3c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae40:	68 ad ef 01 c0       	push   0xc001efad
c001ae45:	e8 3e f6 fe ff       	call   c000a488 <Dbg::kprintf(char const*, ...)>
c001ae4a:	83 c4 10             	add    esp,0x10
c001ae4d:	83 fe 04             	cmp    esi,0x4
c001ae50:	7e 10                	jle    c001ae62 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae52:	83 ec 0c             	sub    esp,0xc
c001ae55:	68 be ef 01 c0       	push   0xc001efbe
c001ae5a:	e8 a4 52 ff ff       	call   c0010103 <KePanic(char const*)>
c001ae5f:	83 c4 10             	add    esp,0x10
c001ae62:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ae68:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ae6e:	51                   	push   ecx
c001ae6f:	50                   	push   eax
c001ae70:	83 c0 02             	add    eax,0x2
c001ae73:	c1 e0 07             	shl    eax,0x7
c001ae76:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ae7c:	50                   	push   eax
c001ae7d:	52                   	push   edx
c001ae7e:	e8 09 e9 ff ff       	call   c001978c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ae83:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ae87:	b9 03 00 00 00       	mov    ecx,0x3
c001ae8c:	fc                   	cld    
c001ae8d:	31 c0                	xor    eax,eax
c001ae8f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae91:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ae96:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ae9b:	83 c4 0c             	add    esp,0xc
c001ae9e:	6a 00                	push   0x0
c001aea0:	6a 00                	push   0x0
c001aea2:	6a 00                	push   0x0
c001aea4:	6a 00                	push   0x0
c001aea6:	6a 02                	push   0x2
c001aea8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aeac:	50                   	push   eax
c001aead:	53                   	push   ebx
c001aeae:	e8 2d fb ff ff       	call   c001a9e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aeb3:	83 c4 20             	add    esp,0x20
c001aeb6:	85 c0                	test   eax,eax
c001aeb8:	75 44                	jne    c001aefe <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001aeba:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001aebe:	b9 03 00 00 00       	mov    ecx,0x3
c001aec3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aec9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001aece:	0f c8                	bswap  eax
c001aed0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001aed4:	89 f0                	mov    eax,esi
c001aed6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001aeda:	50                   	push   eax
c001aedb:	56                   	push   esi
c001aedc:	c1 e6 0b             	shl    esi,0xb
c001aedf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001aee3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aee7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aeeb:	56                   	push   esi
c001aeec:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aef0:	50                   	push   eax
c001aef1:	53                   	push   ebx
c001aef2:	e8 e9 fa ff ff       	call   c001a9e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aef7:	83 c4 20             	add    esp,0x20
c001aefa:	85 c0                	test   eax,eax
c001aefc:	74 14                	je     c001af12 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001aefe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	53                   	push   ebx
c001af06:	e8 f1 fd ff ff       	call   c001acfc <SATAPI::detectMedia()>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af12:	83 c4 30             	add    esp,0x30
c001af15:	5b                   	pop    ebx
c001af16:	5e                   	pop    esi
c001af17:	5f                   	pop    edi
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <IOAPIC::close(int, int, void*)>:
c001af1a:	b8 00 00 00 00       	mov    eax,0x0
c001af1f:	c3                   	ret    

c001af20 <apicGetBase()>:
c001af20:	55                   	push   ebp
c001af21:	89 e5                	mov    ebp,esp
c001af23:	83 ec 18             	sub    esp,0x18
c001af26:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001af2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001af31:	83 e0 08             	and    eax,0x8
c001af34:	84 c0                	test   al,al
c001af36:	75 07                	jne    c001af3f <apicGetBase()+0x1f>
c001af38:	b8 00 00 00 00       	mov    eax,0x0
c001af3d:	eb 21                	jmp    c001af60 <apicGetBase()+0x40>
c001af3f:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001af44:	83 ec 08             	sub    esp,0x8
c001af47:	6a 1b                	push   0x1b
c001af49:	50                   	push   eax
c001af4a:	e8 a3 be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001af4f:	83 c4 10             	add    esp,0x10
c001af52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af55:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af5b:	25 00 00 ff ff       	and    eax,0xffff0000
c001af60:	c9                   	leave  
c001af61:	c3                   	ret    

c001af62 <IOAPIC::IOAPIC()>:
c001af62:	83 ec 0c             	sub    esp,0xc
c001af65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af69:	83 ec 08             	sub    esp,0x8
c001af6c:	68 20 f0 01 c0       	push   0xc001f020
c001af71:	50                   	push   eax
c001af72:	e8 e9 0a ff ff       	call   c000ba60 <Device::Device(char const*)>
c001af77:	83 c4 10             	add    esp,0x10
c001af7a:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af83:	89 10                	mov    DWORD PTR [eax],edx
c001af85:	90                   	nop
c001af86:	83 c4 0c             	add    esp,0xc
c001af89:	c3                   	ret    

c001af8a <apicOpen()>:
c001af8a:	55                   	push   ebp
c001af8b:	89 e5                	mov    ebp,esp
c001af8d:	53                   	push   ebx
c001af8e:	83 ec 34             	sub    esp,0x34
c001af91:	a0 40 41 02 c0       	mov    al,ds:0xc0024140
c001af96:	83 f0 01             	xor    eax,0x1
c001af99:	84 c0                	test   al,al
c001af9b:	0f 84 9d 00 00 00    	je     c001b03e <apicOpen()+0xb4>
c001afa1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001afa5:	a0 20 2d 02 c0       	mov    al,ds:0xc0022d20
c001afaa:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001afad:	0f 83 84 00 00 00    	jae    c001b037 <apicOpen()+0xad>
c001afb3:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001afba:	83 ec 0c             	sub    esp,0xc
c001afbd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001afc0:	e8 f4 c7 fe ff       	call   c00077b9 <malloc>
c001afc5:	83 c4 10             	add    esp,0x10
c001afc8:	89 c3                	mov    ebx,eax
c001afca:	83 ec 0c             	sub    esp,0xc
c001afcd:	53                   	push   ebx
c001afce:	e8 8f ff ff ff       	call   c001af62 <IOAPIC::IOAPIC()>
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001afd9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001afdc:	25 ff 00 00 00       	and    eax,0xff
c001afe1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001afe4:	89 14 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],edx
c001afeb:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c001aff0:	40                   	inc    eax
c001aff1:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c001aff6:	a1 58 04 02 c0       	mov    eax,ds:0xc0020458
c001affb:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b001:	83 ec 08             	sub    esp,0x8
c001b004:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b007:	50                   	push   eax
c001b008:	e8 bb 08 ff ff       	call   c000b8c8 <Device::addChild(Device*)>
c001b00d:	83 c4 10             	add    esp,0x10
c001b010:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b013:	8b 00                	mov    eax,DWORD PTR [eax]
c001b015:	83 c0 08             	add    eax,0x8
c001b018:	8b 10                	mov    edx,DWORD PTR [eax]
c001b01a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b01d:	25 ff 00 00 00       	and    eax,0xff
c001b022:	6a 00                	push   0x0
c001b024:	6a 00                	push   0x0
c001b026:	50                   	push   eax
c001b027:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b02a:	ff d2                	call   edx
c001b02c:	83 c4 10             	add    esp,0x10
c001b02f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b032:	e9 6e ff ff ff       	jmp    c001afa5 <apicOpen()+0x1b>
c001b037:	c6 05 40 41 02 c0 01 	mov    BYTE PTR ds:0xc0024140,0x1
c001b03e:	e8 dd fe ff ff       	call   c001af20 <apicGetBase()>
c001b043:	05 f0 00 00 00       	add    eax,0xf0
c001b048:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b04b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b04e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b050:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b053:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b05a:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b061:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b064:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b067:	89 10                	mov    DWORD PTR [eax],edx
c001b069:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b070:	a1 70 2c 02 c0       	mov    eax,ds:0xc0022c70
c001b075:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b078:	7d 70                	jge    c001b0ea <apicOpen()+0x160>
c001b07a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b07d:	8b 04 85 80 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd380]
c001b084:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b087:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b08a:	8b 04 85 80 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd380]
c001b091:	c1 e8 08             	shr    eax,0x8
c001b094:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b098:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b09b:	8b 04 85 80 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd380]
c001b0a2:	c1 e8 18             	shr    eax,0x18
c001b0a5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b0a8:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b0ac:	75 37                	jne    c001b0e5 <apicOpen()+0x15b>
c001b0ae:	e8 6d fe ff ff       	call   c001af20 <apicGetBase()>
c001b0b3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b0b7:	75 07                	jne    c001b0c0 <apicOpen()+0x136>
c001b0b9:	ba 60 03 00 00       	mov    edx,0x360
c001b0be:	eb 05                	jmp    c001b0c5 <apicOpen()+0x13b>
c001b0c0:	ba 50 03 00 00       	mov    edx,0x350
c001b0c5:	01 d0                	add    eax,edx
c001b0c7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b0ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b0cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0cf:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b0d2:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b0d9:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b0dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b0e0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b0e3:	89 10                	mov    DWORD PTR [eax],edx
c001b0e5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b0e8:	eb 86                	jmp    c001b070 <apicOpen()+0xe6>
c001b0ea:	90                   	nop
c001b0eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b0ee:	c9                   	leave  
c001b0ef:	c3                   	ret    

c001b0f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b0f0:	55                   	push   ebp
c001b0f1:	89 e5                	mov    ebp,esp
c001b0f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b0fc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b0ff:	72 1d                	jb     c001b11e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b104:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b10a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b10d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b113:	01 d0                	add    eax,edx
c001b115:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b118:	73 04                	jae    c001b11e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b11a:	b0 01                	mov    al,0x1
c001b11c:	eb 02                	jmp    c001b120 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b11e:	b0 00                	mov    al,0x0
c001b120:	5d                   	pop    ebp
c001b121:	c3                   	ret    

c001b122 <IOAPIC::read(int)>:
c001b122:	55                   	push   ebp
c001b123:	89 e5                	mov    ebp,esp
c001b125:	83 ec 10             	sub    esp,0x10
c001b128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b12b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b131:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b134:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b137:	31 d2                	xor    edx,edx
c001b139:	88 c2                	mov    dl,al
c001b13b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b13e:	89 10                	mov    DWORD PTR [eax],edx
c001b140:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b143:	83 c0 10             	add    eax,0x10
c001b146:	8b 00                	mov    eax,DWORD PTR [eax]
c001b148:	c9                   	leave  
c001b149:	c3                   	ret    

c001b14a <IOAPIC::open(int, int, void*)>:
c001b14a:	55                   	push   ebp
c001b14b:	89 e5                	mov    ebp,esp
c001b14d:	57                   	push   edi
c001b14e:	56                   	push   esi
c001b14f:	53                   	push   ebx
c001b150:	83 ec 04             	sub    esp,0x4
c001b153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b156:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b159:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b162:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b168:	8b 14 85 60 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd2a0]
c001b16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b172:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b17b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b181:	8b 14 85 e0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd220]
c001b188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b18b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b194:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b19a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b19d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1a3:	89 c6                	mov    esi,eax
c001b1a5:	81 e6 ff 00 00 00    	and    esi,0xff
c001b1ab:	89 d0                	mov    eax,edx
c001b1ad:	ba 00 00 00 00       	mov    edx,0x0
c001b1b2:	89 c7                	mov    edi,eax
c001b1b4:	83 e7 ff             	and    edi,0xffffffff
c001b1b7:	89 f9                	mov    ecx,edi
c001b1b9:	89 d0                	mov    eax,edx
c001b1bb:	25 ff 00 00 00       	and    eax,0xff
c001b1c0:	89 c3                	mov    ebx,eax
c001b1c2:	89 c8                	mov    eax,ecx
c001b1c4:	89 da                	mov    edx,ebx
c001b1c6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b1c9:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b1cc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b1d0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b1d4:	83 e0 00             	and    eax,0x0
c001b1d7:	09 d0                	or     eax,edx
c001b1d9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1e0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b1e6:	8d 50 01             	lea    edx,[eax+0x1]
c001b1e9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b1ec:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b1f2:	31 d2                	xor    edx,edx
c001b1f4:	88 c2                	mov    dl,al
c001b1f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1f9:	83 c2 08             	add    edx,0x8
c001b1fc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b200:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b206:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b20c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b210:	6a 01                	push   0x1
c001b212:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b215:	e8 08 ff ff ff       	call   c001b122 <IOAPIC::read(int)>
c001b21a:	83 c4 08             	add    esp,0x8
c001b21d:	c1 f8 10             	sar    eax,0x10
c001b220:	25 ff 00 00 00       	and    eax,0xff
c001b225:	8d 50 01             	lea    edx,[eax+0x1]
c001b228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b22b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b231:	b8 00 00 00 00       	mov    eax,0x0
c001b236:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b239:	5b                   	pop    ebx
c001b23a:	5e                   	pop    esi
c001b23b:	5f                   	pop    edi
c001b23c:	5d                   	pop    ebp
c001b23d:	c3                   	ret    

c001b23e <IOAPIC::write(int, int)>:
c001b23e:	55                   	push   ebp
c001b23f:	89 e5                	mov    ebp,esp
c001b241:	83 ec 10             	sub    esp,0x10
c001b244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b247:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b24d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b250:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b253:	31 d2                	xor    edx,edx
c001b255:	88 c2                	mov    dl,al
c001b257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b25a:	89 10                	mov    DWORD PTR [eax],edx
c001b25c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b25f:	8d 50 10             	lea    edx,[eax+0x10]
c001b262:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b265:	89 02                	mov    DWORD PTR [edx],eax
c001b267:	90                   	nop
c001b268:	c9                   	leave  
c001b269:	c3                   	ret    

c001b26a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b26a:	55                   	push   ebp
c001b26b:	89 e5                	mov    ebp,esp
c001b26d:	53                   	push   ebx
c001b26e:	83 ec 2c             	sub    esp,0x2c
c001b271:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b274:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b277:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b27a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b27d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b280:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b283:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b286:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b289:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b28c:	88 d8                	mov    al,bl
c001b28e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b291:	88 c8                	mov    al,cl
c001b293:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b296:	88 d0                	mov    al,dl
c001b298:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b29b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b29e:	25 ff 00 00 00       	and    eax,0xff
c001b2a3:	83 c0 08             	add    eax,0x8
c001b2a6:	01 c0                	add    eax,eax
c001b2a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b2ab:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b2ae:	25 ff 00 00 00       	and    eax,0xff
c001b2b3:	83 c0 08             	add    eax,0x8
c001b2b6:	01 c0                	add    eax,eax
c001b2b8:	40                   	inc    eax
c001b2b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b2bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2bf:	50                   	push   eax
c001b2c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2c3:	e8 5a fe ff ff       	call   c001b122 <IOAPIC::read(int)>
c001b2c8:	83 c4 08             	add    esp,0x8
c001b2cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b2ce:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b2d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b2d8:	c1 e0 18             	shl    eax,0x18
c001b2db:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b2de:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b2e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b2e4:	52                   	push   edx
c001b2e5:	50                   	push   eax
c001b2e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2e9:	e8 50 ff ff ff       	call   c001b23e <IOAPIC::write(int, int)>
c001b2ee:	83 c4 0c             	add    esp,0xc
c001b2f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2f4:	50                   	push   eax
c001b2f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2f8:	e8 25 fe ff ff       	call   c001b122 <IOAPIC::read(int)>
c001b2fd:	83 c4 08             	add    esp,0x8
c001b300:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b303:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b30a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b311:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b318:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b31c:	74 09                	je     c001b327 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b31e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b325:	eb 07                	jmp    c001b32e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b327:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b32e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b332:	74 09                	je     c001b33d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b334:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b33b:	eb 07                	jmp    c001b344 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b33d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b344:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b34b:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b34e:	25 ff 00 00 00       	and    eax,0xff
c001b353:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b356:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b359:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b35c:	52                   	push   edx
c001b35d:	50                   	push   eax
c001b35e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b361:	e8 d8 fe ff ff       	call   c001b23e <IOAPIC::write(int, int)>
c001b366:	83 c4 0c             	add    esp,0xc
c001b369:	90                   	nop
c001b36a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b36d:	c9                   	leave  
c001b36e:	c3                   	ret    
c001b36f:	90                   	nop

c001b370 <APICTimer::close(int, int, void*)>:
c001b370:	b8 00 00 00 00       	mov    eax,0x0
c001b375:	c3                   	ret    
c001b376:	66 90                	xchg   ax,ax

c001b378 <apicTimerHandler(regs*, void*)>:
c001b378:	83 ec 0c             	sub    esp,0xc
c001b37b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b37f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b381:	b8 10 27 00 00       	mov    eax,0x2710
c001b386:	ba 00 00 00 00       	mov    edx,0x0
c001b38b:	f7 f1                	div    ecx
c001b38d:	83 ec 0c             	sub    esp,0xc
c001b390:	50                   	push   eax
c001b391:	e8 de 1d ff ff       	call   c000d174 <timerHandler(unsigned int)>
c001b396:	83 c4 10             	add    esp,0x10
c001b399:	90                   	nop
c001b39a:	83 c4 0c             	add    esp,0xc
c001b39d:	c3                   	ret    
c001b39e:	66 90                	xchg   ax,ax

c001b3a0 <APICTimer::open(int, int, void*)>:
c001b3a0:	83 ec 0c             	sub    esp,0xc
c001b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3a9:	83 c0 24             	add    eax,0x24
c001b3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3ae:	83 ec 08             	sub    esp,0x8
c001b3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3b9:	ff d0                	call   eax
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3d4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b3da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	51                   	push   ecx
c001b3e8:	6a 01                	push   0x1
c001b3ea:	68 78 b3 01 c0       	push   0xc001b378
c001b3ef:	52                   	push   edx
c001b3f0:	50                   	push   eax
c001b3f1:	e8 7e 04 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b3f6:	83 c4 20             	add    esp,0x20
c001b3f9:	89 c2                	mov    edx,eax
c001b3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b405:	b8 00 00 00 00       	mov    eax,0x0
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	c3                   	ret    
c001b40e:	66 90                	xchg   ax,ax

c001b410 <APICTimer::write(int)>:
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	83 ec 0c             	sub    esp,0xc
c001b416:	68 54 f0 01 c0       	push   0xc001f054
c001b41b:	e8 e3 4c ff ff       	call   c0010103 <KePanic(char const*)>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b427:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b42b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b431:	90                   	nop
c001b432:	83 c4 0c             	add    esp,0xc
c001b435:	c3                   	ret    
c001b436:	66 90                	xchg   ax,ax

c001b438 <APICTimer::APICTimer()>:
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43f:	83 ec 08             	sub    esp,0x8
c001b442:	68 64 f0 01 c0       	push   0xc001f064
c001b447:	50                   	push   eax
c001b448:	e8 5b 1c ff ff       	call   c000d0a8 <Timer::Timer(char const*)>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c001b455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b459:	89 10                	mov    DWORD PTR [eax],edx
c001b45b:	90                   	nop
c001b45c:	83 c4 0c             	add    esp,0xc
c001b45f:	c3                   	ret    

c001b460 <PIT::write(int)>:
c001b460:	83 ec 10             	sub    esp,0x10
c001b463:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b467:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b46b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b471:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b475:	a3 44 41 02 c0       	mov    ds:0xc0024144,eax
c001b47a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b47f:	99                   	cdq    
c001b480:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b484:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b488:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b48f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b494:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b498:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b49d:	ee                   	out    dx,al
c001b49e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4a2:	25 ff 00 00 00       	and    eax,0xff
c001b4a7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b4ae:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b4b2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b4b6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b4bb:	ee                   	out    dx,al
c001b4bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4c0:	c1 f8 08             	sar    eax,0x8
c001b4c3:	25 ff 00 00 00       	and    eax,0xff
c001b4c8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b4cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b4dc:	ee                   	out    dx,al
c001b4dd:	90                   	nop
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	c3                   	ret    
c001b4e2:	66 90                	xchg   ax,ax

c001b4e4 <pitHandler(regs*, void*)>:
c001b4e4:	83 ec 0c             	sub    esp,0xc
c001b4e7:	8b 0d 44 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024144
c001b4ed:	b8 10 27 00 00       	mov    eax,0x2710
c001b4f2:	99                   	cdq    
c001b4f3:	f7 f9                	idiv   ecx
c001b4f5:	83 ec 0c             	sub    esp,0xc
c001b4f8:	50                   	push   eax
c001b4f9:	e8 76 1c ff ff       	call   c000d174 <timerHandler(unsigned int)>
c001b4fe:	83 c4 10             	add    esp,0x10
c001b501:	90                   	nop
c001b502:	83 c4 0c             	add    esp,0xc
c001b505:	c3                   	ret    
c001b506:	66 90                	xchg   ax,ax

c001b508 <PIT::open(int, int, void*)>:
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b511:	83 c0 24             	add    eax,0x24
c001b514:	8b 00                	mov    eax,DWORD PTR [eax]
c001b516:	83 ec 08             	sub    esp,0x8
c001b519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b51d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b521:	ff d0                	call   eax
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b52a:	83 ec 0c             	sub    esp,0xc
c001b52d:	6a 00                	push   0x0
c001b52f:	6a 01                	push   0x1
c001b531:	68 e4 b4 01 c0       	push   0xc001b4e4
c001b536:	6a 00                	push   0x0
c001b538:	50                   	push   eax
c001b539:	e8 36 03 ff ff       	call   c000b874 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b53e:	83 c4 20             	add    esp,0x20
c001b541:	89 c2                	mov    edx,eax
c001b543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b547:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b54d:	b8 00 00 00 00       	mov    eax,0x0
c001b552:	83 c4 0c             	add    esp,0xc
c001b555:	c3                   	ret    
c001b556:	66 90                	xchg   ax,ax

c001b558 <PIT::close(int, int, void*)>:
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56d:	6a 01                	push   0x1
c001b56f:	68 e4 b4 01 c0       	push   0xc001b4e4
c001b574:	6a 00                	push   0x0
c001b576:	50                   	push   eax
c001b577:	e8 2e 03 ff ff       	call   c000b8aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b57c:	83 c4 10             	add    esp,0x10
c001b57f:	b8 00 00 00 00       	mov    eax,0x0
c001b584:	83 c4 0c             	add    esp,0xc
c001b587:	c3                   	ret    

c001b588 <PIT::PIT()>:
c001b588:	83 ec 0c             	sub    esp,0xc
c001b58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58f:	83 ec 08             	sub    esp,0x8
c001b592:	68 a0 f0 01 c0       	push   0xc001f0a0
c001b597:	50                   	push   eax
c001b598:	e8 0b 1b ff ff       	call   c000d0a8 <Timer::Timer(char const*)>
c001b59d:	83 c4 10             	add    esp,0x10
c001b5a0:	ba c8 f0 01 c0       	mov    edx,0xc001f0c8
c001b5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a9:	89 10                	mov    DWORD PTR [eax],edx
c001b5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5b5:	31 d2                	xor    edx,edx
c001b5b7:	88 c2                	mov    dl,al
c001b5b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5bd:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5ce:	31 d2                	xor    edx,edx
c001b5d0:	88 c2                	mov    dl,al
c001b5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b5e5:	8d 50 01             	lea    edx,[eax+0x1]
c001b5e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5ec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b5f2:	31 d2                	xor    edx,edx
c001b5f4:	88 c2                	mov    dl,al
c001b5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b5fe:	83 e1 3f             	and    ecx,0x3f
c001b601:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b605:	90                   	nop
c001b606:	83 c4 0c             	add    esp,0xc
c001b609:	c3                   	ret    
c001b60a:	66 90                	xchg   ax,ax
c001b60c:	66 90                	xchg   ax,ax
c001b60e:	66 90                	xchg   ax,ax

c001b610 <avxDetect>:
c001b610:	b8 01 00 00 00       	mov    eax,0x1
c001b615:	0f a2                	cpuid  
c001b617:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b61d:	74 15                	je     c001b634 <avxDetect.noAVX>
c001b61f:	b8 01 00 00 00       	mov    eax,0x1
c001b624:	0f a2                	cpuid  
c001b626:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b62c:	74 06                	je     c001b634 <avxDetect.noAVX>
c001b62e:	b8 01 00 00 00       	mov    eax,0x1
c001b633:	c3                   	ret    

c001b634 <avxDetect.noAVX>:
c001b634:	b8 00 00 00 00       	mov    eax,0x0
c001b639:	c3                   	ret    

c001b63a <avxSave>:
c001b63a:	53                   	push   ebx
c001b63b:	52                   	push   edx
c001b63c:	31 c0                	xor    eax,eax
c001b63e:	48                   	dec    eax
c001b63f:	89 c2                	mov    edx,eax
c001b641:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b645:	0f ae 23             	xsave  [ebx]
c001b648:	5a                   	pop    edx
c001b649:	5b                   	pop    ebx
c001b64a:	c3                   	ret    

c001b64b <avxLoad>:
c001b64b:	53                   	push   ebx
c001b64c:	52                   	push   edx
c001b64d:	31 c0                	xor    eax,eax
c001b64f:	48                   	dec    eax
c001b650:	89 c2                	mov    edx,eax
c001b652:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b656:	0f ae 2b             	xrstor [ebx]
c001b659:	5a                   	pop    edx
c001b65a:	5b                   	pop    ebx
c001b65b:	c3                   	ret    

c001b65c <avxInit>:
c001b65c:	e8 57 02 00 00       	call   c001b8b8 <sseInit>
c001b661:	50                   	push   eax
c001b662:	51                   	push   ecx
c001b663:	0f 20 e0             	mov    eax,cr4
c001b666:	0d 00 00 04 00       	or     eax,0x40000
c001b66b:	0f 22 e0             	mov    cr4,eax
c001b66e:	31 c9                	xor    ecx,ecx
c001b670:	0f 01 d0             	xgetbv 
c001b673:	0d 07 00 00 00       	or     eax,0x7
c001b678:	0f 01 d1             	xsetbv 
c001b67b:	59                   	pop    ecx
c001b67c:	58                   	pop    eax
c001b67d:	c3                   	ret    

c001b67e <avxClose>:
c001b67e:	c3                   	ret    

c001b67f <wouldSheSayYes>:
c001b67f:	c3                   	ret    
c001b680:	49                   	dec    ecx
c001b681:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b685:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b689:	75 20                	jne    c001b6ab <isr0+0xb>
c001b68b:	4e                   	dec    esi
c001b68c:	79 61                	jns    c001b6ef <isr7+0x3>
c001b68e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b693:	66 90                	xchg   ax,ax
c001b695:	66 90                	xchg   ax,ax
c001b697:	66 90                	xchg   ax,ax
c001b699:	66 90                	xchg   ax,ax
c001b69b:	66 90                	xchg   ax,ax
c001b69d:	66 90                	xchg   ax,ax
c001b69f:	90                   	nop

c001b6a0 <isr0>:
c001b6a0:	fa                   	cli    
c001b6a1:	68 00 00 00 00       	push   0x0
c001b6a6:	68 00 00 00 00       	push   0x0
c001b6ab:	e9 44 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6b0 <isr1>:
c001b6b0:	fa                   	cli    
c001b6b1:	6a 00                	push   0x0
c001b6b3:	6a 01                	push   0x1
c001b6b5:	e9 3a 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6ba <isr2>:
c001b6ba:	fa                   	cli    
c001b6bb:	6a 00                	push   0x0
c001b6bd:	6a 02                	push   0x2
c001b6bf:	e9 30 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6c4 <isr3>:
c001b6c4:	fa                   	cli    
c001b6c5:	6a 00                	push   0x0
c001b6c7:	6a 03                	push   0x3
c001b6c9:	e9 26 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6ce <isr4>:
c001b6ce:	fa                   	cli    
c001b6cf:	6a 00                	push   0x0
c001b6d1:	6a 04                	push   0x4
c001b6d3:	e9 1c 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6d8 <isr5>:
c001b6d8:	fa                   	cli    
c001b6d9:	6a 00                	push   0x0
c001b6db:	6a 05                	push   0x5
c001b6dd:	e9 12 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6e2 <isr6>:
c001b6e2:	fa                   	cli    
c001b6e3:	6a 00                	push   0x0
c001b6e5:	6a 06                	push   0x6
c001b6e7:	e9 08 01 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6ec <isr7>:
c001b6ec:	fa                   	cli    
c001b6ed:	6a 00                	push   0x0
c001b6ef:	6a 07                	push   0x7
c001b6f1:	e9 fe 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6f6 <isr8>:
c001b6f6:	fa                   	cli    
c001b6f7:	6a 08                	push   0x8
c001b6f9:	e9 f6 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b6fe <isr9>:
c001b6fe:	fa                   	cli    
c001b6ff:	6a 00                	push   0x0
c001b701:	6a 09                	push   0x9
c001b703:	e9 ec 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b708 <isr10>:
c001b708:	fa                   	cli    
c001b709:	6a 0a                	push   0xa
c001b70b:	e9 e4 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b710 <isr11>:
c001b710:	fa                   	cli    
c001b711:	6a 0b                	push   0xb
c001b713:	e9 dc 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b718 <isr12>:
c001b718:	fa                   	cli    
c001b719:	6a 0c                	push   0xc
c001b71b:	e9 d4 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b720 <isr13>:
c001b720:	fa                   	cli    
c001b721:	6a 0d                	push   0xd
c001b723:	e9 cc 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b728 <isr14>:
c001b728:	fa                   	cli    
c001b729:	6a 0e                	push   0xe
c001b72b:	e9 c4 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b730 <isr15>:
c001b730:	fa                   	cli    
c001b731:	6a 00                	push   0x0
c001b733:	6a 0f                	push   0xf
c001b735:	e9 ba 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b73a <isr16>:
c001b73a:	fa                   	cli    
c001b73b:	6a 00                	push   0x0
c001b73d:	6a 10                	push   0x10
c001b73f:	e9 b0 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b744 <isr17>:
c001b744:	fa                   	cli    
c001b745:	6a 00                	push   0x0
c001b747:	6a 11                	push   0x11
c001b749:	e9 a6 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b74e <isr18>:
c001b74e:	fa                   	cli    
c001b74f:	6a 00                	push   0x0
c001b751:	6a 12                	push   0x12
c001b753:	e9 9c 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b758 <irq3>:
c001b758:	fa                   	cli    
c001b759:	6a 00                	push   0x0
c001b75b:	6a 23                	push   0x23
c001b75d:	e9 92 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b762 <irq4>:
c001b762:	fa                   	cli    
c001b763:	6a 00                	push   0x0
c001b765:	6a 24                	push   0x24
c001b767:	e9 88 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b76c <irq5>:
c001b76c:	fa                   	cli    
c001b76d:	6a 00                	push   0x0
c001b76f:	6a 25                	push   0x25
c001b771:	e9 7e 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b776 <irq6>:
c001b776:	fa                   	cli    
c001b777:	6a 00                	push   0x0
c001b779:	6a 26                	push   0x26
c001b77b:	e9 74 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b780 <irq7>:
c001b780:	fa                   	cli    
c001b781:	6a 00                	push   0x0
c001b783:	6a 27                	push   0x27
c001b785:	e9 6a 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b78a <irq8>:
c001b78a:	fa                   	cli    
c001b78b:	6a 00                	push   0x0
c001b78d:	6a 28                	push   0x28
c001b78f:	e9 60 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b794 <irq9>:
c001b794:	fa                   	cli    
c001b795:	6a 00                	push   0x0
c001b797:	6a 29                	push   0x29
c001b799:	e9 56 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b79e <irq10>:
c001b79e:	fa                   	cli    
c001b79f:	6a 00                	push   0x0
c001b7a1:	6a 2a                	push   0x2a
c001b7a3:	e9 4c 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7a8 <irq11>:
c001b7a8:	fa                   	cli    
c001b7a9:	6a 00                	push   0x0
c001b7ab:	6a 2b                	push   0x2b
c001b7ad:	e9 42 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7b2 <irq12>:
c001b7b2:	fa                   	cli    
c001b7b3:	6a 00                	push   0x0
c001b7b5:	6a 2c                	push   0x2c
c001b7b7:	e9 38 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7bc <irq13>:
c001b7bc:	fa                   	cli    
c001b7bd:	6a 00                	push   0x0
c001b7bf:	6a 2d                	push   0x2d
c001b7c1:	e9 2e 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7c6 <irq14>:
c001b7c6:	fa                   	cli    
c001b7c7:	6a 00                	push   0x0
c001b7c9:	6a 2e                	push   0x2e
c001b7cb:	e9 24 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7d0 <irq15>:
c001b7d0:	fa                   	cli    
c001b7d1:	6a 00                	push   0x0
c001b7d3:	6a 2f                	push   0x2f
c001b7d5:	e9 1a 00 00 00       	jmp    c001b7f4 <int_common_stub>

c001b7da <irq1>:
c001b7da:	fa                   	cli    
c001b7db:	6a 00                	push   0x0
c001b7dd:	6a 21                	push   0x21
c001b7df:	eb 13                	jmp    c001b7f4 <int_common_stub>

c001b7e1 <irq2>:
c001b7e1:	fa                   	cli    
c001b7e2:	6a 00                	push   0x0
c001b7e4:	6a 22                	push   0x22
c001b7e6:	eb 0c                	jmp    c001b7f4 <int_common_stub>

c001b7e8 <isr96>:
c001b7e8:	6a 00                	push   0x0
c001b7ea:	6a 60                	push   0x60
c001b7ec:	fb                   	sti    
c001b7ed:	eb 05                	jmp    c001b7f4 <int_common_stub>

c001b7ef <irq0>:
c001b7ef:	fa                   	cli    
c001b7f0:	6a 00                	push   0x0
c001b7f2:	6a 20                	push   0x20

c001b7f4 <int_common_stub>:
c001b7f4:	60                   	pusha  
c001b7f5:	1e                   	push   ds
c001b7f6:	06                   	push   es
c001b7f7:	0f a0                	push   fs
c001b7f9:	0f a8                	push   gs
c001b7fb:	66 b8 10 00          	mov    ax,0x10
c001b7ff:	66 8e d8             	mov    ds,ax
c001b802:	66 8e c0             	mov    es,ax
c001b805:	66 8e e0             	mov    fs,ax
c001b808:	66 8e e8             	mov    gs,ax
c001b80b:	54                   	push   esp
c001b80c:	fc                   	cld    
c001b80d:	e8 62 05 ff ff       	call   c000bd74 <int_handler>
c001b812:	81 c4 04 00 00 00    	add    esp,0x4
c001b818:	0f a9                	pop    gs
c001b81a:	0f a1                	pop    fs
c001b81c:	07                   	pop    es
c001b81d:	1f                   	pop    ds
c001b81e:	61                   	popa   
c001b81f:	81 c4 08 00 00 00    	add    esp,0x8
c001b825:	cf                   	iret   

c001b826 <irq16>:
c001b826:	fa                   	cli    
c001b827:	6a 00                	push   0x0
c001b829:	6a 30                	push   0x30
c001b82b:	e9 c4 ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b830 <irq17>:
c001b830:	fa                   	cli    
c001b831:	6a 00                	push   0x0
c001b833:	6a 31                	push   0x31
c001b835:	e9 ba ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b83a <irq18>:
c001b83a:	fa                   	cli    
c001b83b:	6a 00                	push   0x0
c001b83d:	6a 32                	push   0x32
c001b83f:	e9 b0 ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b844 <irq19>:
c001b844:	fa                   	cli    
c001b845:	6a 00                	push   0x0
c001b847:	6a 33                	push   0x33
c001b849:	e9 a6 ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b84e <irq20>:
c001b84e:	fa                   	cli    
c001b84f:	6a 00                	push   0x0
c001b851:	6a 34                	push   0x34
c001b853:	e9 9c ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b858 <irq21>:
c001b858:	fa                   	cli    
c001b859:	6a 00                	push   0x0
c001b85b:	6a 35                	push   0x35
c001b85d:	e9 92 ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b862 <irq22>:
c001b862:	fa                   	cli    
c001b863:	6a 00                	push   0x0
c001b865:	6a 36                	push   0x36
c001b867:	e9 88 ff ff ff       	jmp    c001b7f4 <int_common_stub>

c001b86c <irq23>:
c001b86c:	fa                   	cli    
c001b86d:	6a 00                	push   0x0
c001b86f:	6a 37                	push   0x37
c001b871:	e9 7e ff ff ff       	jmp    c001b7f4 <int_common_stub>
c001b876:	66 90                	xchg   ax,ax
c001b878:	66 90                	xchg   ax,ax
c001b87a:	66 90                	xchg   ax,ax
c001b87c:	66 90                	xchg   ax,ax
c001b87e:	66 90                	xchg   ax,ax

c001b880 <i386GetRDRAND>:
c001b880:	b9 64 00 00 00       	mov    ecx,0x64

c001b885 <retry>:
c001b885:	0f c7 f0             	rdrand eax
c001b888:	72 05                	jb     c001b88f <retry.done>
c001b88a:	e2 f9                	loop   c001b885 <retry>

c001b88c <retry.fail>:
c001b88c:	31 c0                	xor    eax,eax
c001b88e:	c3                   	ret    

c001b88f <retry.done>:
c001b88f:	c3                   	ret    

c001b890 <absolutelyNoChanceInHell>:
c001b890:	b8 01 00 00 00       	mov    eax,0x1
c001b895:	0f a2                	cpuid  
c001b897:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b89d:	74 06                	je     c001b8a5 <sseDetect.noSSE>
c001b89f:	b8 01 00 00 00       	mov    eax,0x1
c001b8a4:	c3                   	ret    

c001b8a5 <sseDetect.noSSE>:
c001b8a5:	31 c0                	xor    eax,eax
c001b8a7:	c3                   	ret    

c001b8a8 <sseSave>:
c001b8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ac:	0f ae 00             	fxsave [eax]
c001b8af:	c3                   	ret    

c001b8b0 <sseLoad>:
c001b8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8b4:	0f ae 08             	fxrstor [eax]
c001b8b7:	c3                   	ret    

c001b8b8 <sseInit>:
c001b8b8:	e8 42 00 00 00       	call   c001b8ff <x87Init>
c001b8bd:	0f 20 e0             	mov    eax,cr4
c001b8c0:	66 0d 00 06          	or     ax,0x600
c001b8c4:	0f 22 e0             	mov    cr4,eax
c001b8c7:	c3                   	ret    

c001b8c8 <sseClose>:
c001b8c8:	c3                   	ret    
c001b8c9:	66 90                	xchg   ax,ax
c001b8cb:	66 90                	xchg   ax,ax
c001b8cd:	66 90                	xchg   ax,ax
c001b8cf:	90                   	nop

c001b8d0 <value_37F>:
c001b8d0:	7f 03                	jg     c001b8d5 <value_37A+0x1>

c001b8d2 <value_37E>:
c001b8d2:	7e 03                	jle    c001b8d7 <x87Detect+0x1>

c001b8d4 <value_37A>:
c001b8d4:	7a 03                	jp     c001b8d9 <x87Detect+0x3>

c001b8d6 <x87Detect>:
c001b8d6:	b8 01 00 00 00       	mov    eax,0x1
c001b8db:	0f a2                	cpuid  
c001b8dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001b8e3:	74 06                	je     c001b8eb <x87Detect.nox87>
c001b8e5:	b8 01 00 00 00       	mov    eax,0x1
c001b8ea:	c3                   	ret    

c001b8eb <x87Detect.nox87>:
c001b8eb:	b8 00 00 00 00       	mov    eax,0x0
c001b8f0:	c3                   	ret    

c001b8f1 <x87Save>:
c001b8f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8f5:	dd 30                	fnsave [eax]
c001b8f7:	c3                   	ret    

c001b8f8 <x87Load>:
c001b8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8fc:	dd 20                	frstor [eax]
c001b8fe:	c3                   	ret    

c001b8ff <x87Init>:
c001b8ff:	0f 20 c0             	mov    eax,cr0
c001b902:	66 25 fb ff          	and    ax,0xfffb
c001b906:	66 0d 22 00          	or     ax,0x22
c001b90a:	0f 22 c0             	mov    cr0,eax
c001b90d:	db e3                	fninit 
c001b90f:	0f 06                	clts   
c001b911:	d9 2d d4 b8 01 c0    	fldcw  WORD PTR ds:0xc001b8d4
c001b917:	c3                   	ret    

c001b918 <x87Close>:
c001b918:	c3                   	ret    
c001b919:	66 90                	xchg   ax,ax
c001b91b:	90                   	nop

c001b91c <__do_global_ctors_aux>:
c001b91c:	a1 cc c8 01 c0       	mov    eax,ds:0xc001c8cc
c001b921:	83 f8 ff             	cmp    eax,0xffffffff
c001b924:	74 1a                	je     c001b940 <__do_global_ctors_aux+0x24>
c001b926:	55                   	push   ebp
c001b927:	89 e5                	mov    ebp,esp
c001b929:	53                   	push   ebx
c001b92a:	52                   	push   edx
c001b92b:	bb cc c8 01 c0       	mov    ebx,0xc001c8cc
c001b930:	ff d0                	call   eax
c001b932:	83 eb 04             	sub    ebx,0x4
c001b935:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b937:	83 f8 ff             	cmp    eax,0xffffffff
c001b93a:	75 f4                	jne    c001b930 <__do_global_ctors_aux+0x14>
c001b93c:	58                   	pop    eax
c001b93d:	5b                   	pop    ebx
c001b93e:	5d                   	pop    ebp
c001b93f:	c3                   	ret    
c001b940:	c3                   	ret    
c001b941:	66 90                	xchg   ax,ax
c001b943:	90                   	nop

c001b944 <__divdi3>:
c001b944:	55                   	push   ebp
c001b945:	57                   	push   edi
c001b946:	56                   	push   esi
c001b947:	53                   	push   ebx
c001b948:	83 ec 1c             	sub    esp,0x1c
c001b94b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b94f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b953:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b956:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b95a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b95e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b962:	85 db                	test   ebx,ebx
c001b964:	0f 88 8e 00 00 00    	js     c001b9f8 <__divdi3+0xb4>
c001b96a:	89 dd                	mov    ebp,ebx
c001b96c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b974:	89 d3                	mov    ebx,edx
c001b976:	85 d2                	test   edx,edx
c001b978:	79 0d                	jns    c001b987 <__divdi3+0x43>
c001b97a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b97e:	f7 d8                	neg    eax
c001b980:	83 d2 00             	adc    edx,0x0
c001b983:	f7 da                	neg    edx
c001b985:	89 d3                	mov    ebx,edx
c001b987:	89 c7                	mov    edi,eax
c001b989:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b98c:	85 db                	test   ebx,ebx
c001b98e:	75 48                	jne    c001b9d8 <__divdi3+0x94>
c001b990:	39 ef                	cmp    edi,ebp
c001b992:	76 24                	jbe    c001b9b8 <__divdi3+0x74>
c001b994:	89 ea                	mov    edx,ebp
c001b996:	f7 f7                	div    edi
c001b998:	89 c1                	mov    ecx,eax
c001b99a:	31 f6                	xor    esi,esi
c001b99c:	89 c8                	mov    eax,ecx
c001b99e:	89 f2                	mov    edx,esi
c001b9a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b9a4:	85 c9                	test   ecx,ecx
c001b9a6:	74 07                	je     c001b9af <__divdi3+0x6b>
c001b9a8:	f7 d8                	neg    eax
c001b9aa:	83 d2 00             	adc    edx,0x0
c001b9ad:	f7 da                	neg    edx
c001b9af:	83 c4 1c             	add    esp,0x1c
c001b9b2:	5b                   	pop    ebx
c001b9b3:	5e                   	pop    esi
c001b9b4:	5f                   	pop    edi
c001b9b5:	5d                   	pop    ebp
c001b9b6:	c3                   	ret    
c001b9b7:	90                   	nop
c001b9b8:	85 ff                	test   edi,edi
c001b9ba:	75 0b                	jne    c001b9c7 <__divdi3+0x83>
c001b9bc:	b8 01 00 00 00       	mov    eax,0x1
c001b9c1:	31 d2                	xor    edx,edx
c001b9c3:	f7 f3                	div    ebx
c001b9c5:	89 c7                	mov    edi,eax
c001b9c7:	31 d2                	xor    edx,edx
c001b9c9:	89 e8                	mov    eax,ebp
c001b9cb:	f7 f7                	div    edi
c001b9cd:	89 c6                	mov    esi,eax
c001b9cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9d2:	f7 f7                	div    edi
c001b9d4:	89 c1                	mov    ecx,eax
c001b9d6:	eb c4                	jmp    c001b99c <__divdi3+0x58>
c001b9d8:	39 eb                	cmp    ebx,ebp
c001b9da:	77 3c                	ja     c001ba18 <__divdi3+0xd4>
c001b9dc:	0f bd f3             	bsr    esi,ebx
c001b9df:	83 f6 1f             	xor    esi,0x1f
c001b9e2:	75 40                	jne    c001ba24 <__divdi3+0xe0>
c001b9e4:	39 eb                	cmp    ebx,ebp
c001b9e6:	72 09                	jb     c001b9f1 <__divdi3+0xad>
c001b9e8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b9eb:	0f 87 97 00 00 00    	ja     c001ba88 <__divdi3+0x144>
c001b9f1:	b9 01 00 00 00       	mov    ecx,0x1
c001b9f6:	eb a4                	jmp    c001b99c <__divdi3+0x58>
c001b9f8:	f7 d9                	neg    ecx
c001b9fa:	83 d3 00             	adc    ebx,0x0
c001b9fd:	f7 db                	neg    ebx
c001b9ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba02:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba06:	89 dd                	mov    ebp,ebx
c001ba08:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba10:	e9 5f ff ff ff       	jmp    c001b974 <__divdi3+0x30>
c001ba15:	8d 76 00             	lea    esi,[esi+0x0]
c001ba18:	31 f6                	xor    esi,esi
c001ba1a:	31 c9                	xor    ecx,ecx
c001ba1c:	e9 7b ff ff ff       	jmp    c001b99c <__divdi3+0x58>
c001ba21:	8d 76 00             	lea    esi,[esi+0x0]
c001ba24:	b8 20 00 00 00       	mov    eax,0x20
c001ba29:	29 f0                	sub    eax,esi
c001ba2b:	89 f1                	mov    ecx,esi
c001ba2d:	d3 e3                	shl    ebx,cl
c001ba2f:	89 fa                	mov    edx,edi
c001ba31:	88 c1                	mov    cl,al
c001ba33:	d3 ea                	shr    edx,cl
c001ba35:	09 da                	or     edx,ebx
c001ba37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ba3b:	89 f1                	mov    ecx,esi
c001ba3d:	d3 e7                	shl    edi,cl
c001ba3f:	89 eb                	mov    ebx,ebp
c001ba41:	88 c1                	mov    cl,al
c001ba43:	d3 eb                	shr    ebx,cl
c001ba45:	89 f1                	mov    ecx,esi
c001ba47:	d3 e5                	shl    ebp,cl
c001ba49:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ba4c:	88 c1                	mov    cl,al
c001ba4e:	d3 ea                	shr    edx,cl
c001ba50:	09 d5                	or     ebp,edx
c001ba52:	89 e8                	mov    eax,ebp
c001ba54:	89 da                	mov    edx,ebx
c001ba56:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba5a:	89 d3                	mov    ebx,edx
c001ba5c:	89 c5                	mov    ebp,eax
c001ba5e:	f7 e7                	mul    edi
c001ba60:	39 d3                	cmp    ebx,edx
c001ba62:	72 18                	jb     c001ba7c <__divdi3+0x138>
c001ba64:	74 0a                	je     c001ba70 <__divdi3+0x12c>
c001ba66:	89 e9                	mov    ecx,ebp
c001ba68:	31 f6                	xor    esi,esi
c001ba6a:	e9 2d ff ff ff       	jmp    c001b99c <__divdi3+0x58>
c001ba6f:	90                   	nop
c001ba70:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ba73:	89 f1                	mov    ecx,esi
c001ba75:	d3 e7                	shl    edi,cl
c001ba77:	39 c7                	cmp    edi,eax
c001ba79:	73 eb                	jae    c001ba66 <__divdi3+0x122>
c001ba7b:	90                   	nop
c001ba7c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ba7f:	31 f6                	xor    esi,esi
c001ba81:	e9 16 ff ff ff       	jmp    c001b99c <__divdi3+0x58>
c001ba86:	66 90                	xchg   ax,ax
c001ba88:	31 c9                	xor    ecx,ecx
c001ba8a:	e9 0d ff ff ff       	jmp    c001b99c <__divdi3+0x58>
c001ba8f:	90                   	nop

c001ba90 <__moddi3>:
c001ba90:	55                   	push   ebp
c001ba91:	57                   	push   edi
c001ba92:	56                   	push   esi
c001ba93:	53                   	push   ebx
c001ba94:	83 ec 2c             	sub    esp,0x2c
c001ba97:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ba9b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ba9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001baa3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001baa7:	85 db                	test   ebx,ebx
c001baa9:	0f 88 85 00 00 00    	js     c001bb34 <__moddi3+0xa4>
c001baaf:	89 de                	mov    esi,ebx
c001bab1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bab9:	89 d7                	mov    edi,edx
c001babb:	85 d2                	test   edx,edx
c001babd:	79 09                	jns    c001bac8 <__moddi3+0x38>
c001babf:	f7 d8                	neg    eax
c001bac1:	83 d2 00             	adc    edx,0x0
c001bac4:	f7 da                	neg    edx
c001bac6:	89 d7                	mov    edi,edx
c001bac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bacc:	89 cd                	mov    ebp,ecx
c001bace:	85 ff                	test   edi,edi
c001bad0:	75 52                	jne    c001bb24 <__moddi3+0x94>
c001bad2:	89 c3                	mov    ebx,eax
c001bad4:	39 f0                	cmp    eax,esi
c001bad6:	76 24                	jbe    c001bafc <__moddi3+0x6c>
c001bad8:	89 c8                	mov    eax,ecx
c001bada:	89 f2                	mov    edx,esi
c001badc:	f7 f3                	div    ebx
c001bade:	89 d6                	mov    esi,edx
c001bae0:	89 f0                	mov    eax,esi
c001bae2:	31 d2                	xor    edx,edx
c001bae4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bae8:	85 c9                	test   ecx,ecx
c001baea:	74 07                	je     c001baf3 <__moddi3+0x63>
c001baec:	f7 d8                	neg    eax
c001baee:	83 d2 00             	adc    edx,0x0
c001baf1:	f7 da                	neg    edx
c001baf3:	83 c4 2c             	add    esp,0x2c
c001baf6:	5b                   	pop    ebx
c001baf7:	5e                   	pop    esi
c001baf8:	5f                   	pop    edi
c001baf9:	5d                   	pop    ebp
c001bafa:	c3                   	ret    
c001bafb:	90                   	nop
c001bafc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb00:	85 db                	test   ebx,ebx
c001bb02:	75 0d                	jne    c001bb11 <__moddi3+0x81>
c001bb04:	b8 01 00 00 00       	mov    eax,0x1
c001bb09:	31 d2                	xor    edx,edx
c001bb0b:	f7 f7                	div    edi
c001bb0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb11:	89 f0                	mov    eax,esi
c001bb13:	31 d2                	xor    edx,edx
c001bb15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb19:	f7 f7                	div    edi
c001bb1b:	89 e8                	mov    eax,ebp
c001bb1d:	f7 f7                	div    edi
c001bb1f:	89 d6                	mov    esi,edx
c001bb21:	eb bd                	jmp    c001bae0 <__moddi3+0x50>
c001bb23:	90                   	nop
c001bb24:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb28:	39 f7                	cmp    edi,esi
c001bb2a:	76 20                	jbe    c001bb4c <__moddi3+0xbc>
c001bb2c:	89 c8                	mov    eax,ecx
c001bb2e:	89 f2                	mov    edx,esi
c001bb30:	eb b2                	jmp    c001bae4 <__moddi3+0x54>
c001bb32:	66 90                	xchg   ax,ax
c001bb34:	f7 d9                	neg    ecx
c001bb36:	83 d3 00             	adc    ebx,0x0
c001bb39:	f7 db                	neg    ebx
c001bb3b:	89 de                	mov    esi,ebx
c001bb3d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bb45:	e9 6f ff ff ff       	jmp    c001bab9 <__moddi3+0x29>
c001bb4a:	66 90                	xchg   ax,ax
c001bb4c:	0f bd c7             	bsr    eax,edi
c001bb4f:	83 f0 1f             	xor    eax,0x1f
c001bb52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb56:	75 24                	jne    c001bb7c <__moddi3+0xec>
c001bb58:	39 f7                	cmp    edi,esi
c001bb5a:	72 06                	jb     c001bb62 <__moddi3+0xd2>
c001bb5c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bb60:	77 0c                	ja     c001bb6e <__moddi3+0xde>
c001bb62:	89 e9                	mov    ecx,ebp
c001bb64:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bb68:	19 fe                	sbb    esi,edi
c001bb6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb72:	89 f2                	mov    edx,esi
c001bb74:	e9 6b ff ff ff       	jmp    c001bae4 <__moddi3+0x54>
c001bb79:	8d 76 00             	lea    esi,[esi+0x0]
c001bb7c:	b8 20 00 00 00       	mov    eax,0x20
c001bb81:	89 c2                	mov    edx,eax
c001bb83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bb87:	29 da                	sub    edx,ebx
c001bb89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bb8d:	88 d9                	mov    cl,bl
c001bb8f:	d3 e7                	shl    edi,cl
c001bb91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb95:	88 d1                	mov    cl,dl
c001bb97:	d3 e8                	shr    eax,cl
c001bb99:	09 c7                	or     edi,eax
c001bb9b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bb9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bba3:	89 d8                	mov    eax,ebx
c001bba5:	88 d9                	mov    cl,bl
c001bba7:	d3 e7                	shl    edi,cl
c001bba9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bbad:	89 f3                	mov    ebx,esi
c001bbaf:	88 d1                	mov    cl,dl
c001bbb1:	d3 eb                	shr    ebx,cl
c001bbb3:	89 c7                	mov    edi,eax
c001bbb5:	88 c1                	mov    cl,al
c001bbb7:	d3 e6                	shl    esi,cl
c001bbb9:	89 e8                	mov    eax,ebp
c001bbbb:	88 d1                	mov    cl,dl
c001bbbd:	d3 e8                	shr    eax,cl
c001bbbf:	09 f0                	or     eax,esi
c001bbc1:	89 f9                	mov    ecx,edi
c001bbc3:	d3 e5                	shl    ebp,cl
c001bbc5:	89 da                	mov    edx,ebx
c001bbc7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bbcb:	89 d3                	mov    ebx,edx
c001bbcd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bbd1:	89 c6                	mov    esi,eax
c001bbd3:	89 d1                	mov    ecx,edx
c001bbd5:	39 d3                	cmp    ebx,edx
c001bbd7:	72 27                	jb     c001bc00 <__moddi3+0x170>
c001bbd9:	74 21                	je     c001bbfc <__moddi3+0x16c>
c001bbdb:	29 f5                	sub    ebp,esi
c001bbdd:	19 cb                	sbb    ebx,ecx
c001bbdf:	89 de                	mov    esi,ebx
c001bbe1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bbe5:	d3 e6                	shl    esi,cl
c001bbe7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bbeb:	89 f9                	mov    ecx,edi
c001bbed:	d3 ed                	shr    ebp,cl
c001bbef:	09 ee                	or     esi,ebp
c001bbf1:	89 f0                	mov    eax,esi
c001bbf3:	d3 eb                	shr    ebx,cl
c001bbf5:	89 da                	mov    edx,ebx
c001bbf7:	e9 e8 fe ff ff       	jmp    c001bae4 <__moddi3+0x54>
c001bbfc:	39 c5                	cmp    ebp,eax
c001bbfe:	73 db                	jae    c001bbdb <__moddi3+0x14b>
c001bc00:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc04:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc08:	89 d1                	mov    ecx,edx
c001bc0a:	89 c6                	mov    esi,eax
c001bc0c:	eb cd                	jmp    c001bbdb <__moddi3+0x14b>
c001bc0e:	66 90                	xchg   ax,ax

c001bc10 <__udivdi3>:
c001bc10:	55                   	push   ebp
c001bc11:	57                   	push   edi
c001bc12:	56                   	push   esi
c001bc13:	53                   	push   ebx
c001bc14:	83 ec 1c             	sub    esp,0x1c
c001bc17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bc23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc27:	85 d2                	test   edx,edx
c001bc29:	75 41                	jne    c001bc6c <__udivdi3+0x5c>
c001bc2b:	39 f7                	cmp    edi,esi
c001bc2d:	76 15                	jbe    c001bc44 <__udivdi3+0x34>
c001bc2f:	89 e8                	mov    eax,ebp
c001bc31:	89 f2                	mov    edx,esi
c001bc33:	f7 f7                	div    edi
c001bc35:	31 db                	xor    ebx,ebx
c001bc37:	89 da                	mov    edx,ebx
c001bc39:	83 c4 1c             	add    esp,0x1c
c001bc3c:	5b                   	pop    ebx
c001bc3d:	5e                   	pop    esi
c001bc3e:	5f                   	pop    edi
c001bc3f:	5d                   	pop    ebp
c001bc40:	c3                   	ret    
c001bc41:	8d 76 00             	lea    esi,[esi+0x0]
c001bc44:	89 f9                	mov    ecx,edi
c001bc46:	85 ff                	test   edi,edi
c001bc48:	75 0b                	jne    c001bc55 <__udivdi3+0x45>
c001bc4a:	b8 01 00 00 00       	mov    eax,0x1
c001bc4f:	31 d2                	xor    edx,edx
c001bc51:	f7 f7                	div    edi
c001bc53:	89 c1                	mov    ecx,eax
c001bc55:	31 d2                	xor    edx,edx
c001bc57:	89 f0                	mov    eax,esi
c001bc59:	f7 f1                	div    ecx
c001bc5b:	89 c3                	mov    ebx,eax
c001bc5d:	89 e8                	mov    eax,ebp
c001bc5f:	f7 f1                	div    ecx
c001bc61:	89 da                	mov    edx,ebx
c001bc63:	83 c4 1c             	add    esp,0x1c
c001bc66:	5b                   	pop    ebx
c001bc67:	5e                   	pop    esi
c001bc68:	5f                   	pop    edi
c001bc69:	5d                   	pop    ebp
c001bc6a:	c3                   	ret    
c001bc6b:	90                   	nop
c001bc6c:	39 f2                	cmp    edx,esi
c001bc6e:	77 1c                	ja     c001bc8c <__udivdi3+0x7c>
c001bc70:	0f bd da             	bsr    ebx,edx
c001bc73:	83 f3 1f             	xor    ebx,0x1f
c001bc76:	75 24                	jne    c001bc9c <__udivdi3+0x8c>
c001bc78:	39 f2                	cmp    edx,esi
c001bc7a:	72 08                	jb     c001bc84 <__udivdi3+0x74>
c001bc7c:	39 ef                	cmp    edi,ebp
c001bc7e:	0f 87 84 00 00 00    	ja     c001bd08 <__udivdi3+0xf8>
c001bc84:	b8 01 00 00 00       	mov    eax,0x1
c001bc89:	eb ac                	jmp    c001bc37 <__udivdi3+0x27>
c001bc8b:	90                   	nop
c001bc8c:	31 db                	xor    ebx,ebx
c001bc8e:	31 c0                	xor    eax,eax
c001bc90:	89 da                	mov    edx,ebx
c001bc92:	83 c4 1c             	add    esp,0x1c
c001bc95:	5b                   	pop    ebx
c001bc96:	5e                   	pop    esi
c001bc97:	5f                   	pop    edi
c001bc98:	5d                   	pop    ebp
c001bc99:	c3                   	ret    
c001bc9a:	66 90                	xchg   ax,ax
c001bc9c:	b8 20 00 00 00       	mov    eax,0x20
c001bca1:	29 d8                	sub    eax,ebx
c001bca3:	88 d9                	mov    cl,bl
c001bca5:	d3 e2                	shl    edx,cl
c001bca7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bcab:	89 fa                	mov    edx,edi
c001bcad:	88 c1                	mov    cl,al
c001bcaf:	d3 ea                	shr    edx,cl
c001bcb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bcb5:	09 d1                	or     ecx,edx
c001bcb7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bcbb:	88 d9                	mov    cl,bl
c001bcbd:	d3 e7                	shl    edi,cl
c001bcbf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bcc3:	89 f7                	mov    edi,esi
c001bcc5:	88 c1                	mov    cl,al
c001bcc7:	d3 ef                	shr    edi,cl
c001bcc9:	88 d9                	mov    cl,bl
c001bccb:	d3 e6                	shl    esi,cl
c001bccd:	89 ea                	mov    edx,ebp
c001bccf:	88 c1                	mov    cl,al
c001bcd1:	d3 ea                	shr    edx,cl
c001bcd3:	09 d6                	or     esi,edx
c001bcd5:	89 f0                	mov    eax,esi
c001bcd7:	89 fa                	mov    edx,edi
c001bcd9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bcdd:	89 d7                	mov    edi,edx
c001bcdf:	89 c6                	mov    esi,eax
c001bce1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bce5:	39 d7                	cmp    edi,edx
c001bce7:	72 13                	jb     c001bcfc <__udivdi3+0xec>
c001bce9:	74 09                	je     c001bcf4 <__udivdi3+0xe4>
c001bceb:	89 f0                	mov    eax,esi
c001bced:	31 db                	xor    ebx,ebx
c001bcef:	e9 43 ff ff ff       	jmp    c001bc37 <__udivdi3+0x27>
c001bcf4:	88 d9                	mov    cl,bl
c001bcf6:	d3 e5                	shl    ebp,cl
c001bcf8:	39 c5                	cmp    ebp,eax
c001bcfa:	73 ef                	jae    c001bceb <__udivdi3+0xdb>
c001bcfc:	8d 46 ff             	lea    eax,[esi-0x1]
c001bcff:	31 db                	xor    ebx,ebx
c001bd01:	e9 31 ff ff ff       	jmp    c001bc37 <__udivdi3+0x27>
c001bd06:	66 90                	xchg   ax,ax
c001bd08:	31 c0                	xor    eax,eax
c001bd0a:	e9 28 ff ff ff       	jmp    c001bc37 <__udivdi3+0x27>
c001bd0f:	90                   	nop

c001bd10 <__umoddi3>:
c001bd10:	55                   	push   ebp
c001bd11:	57                   	push   edi
c001bd12:	56                   	push   esi
c001bd13:	53                   	push   ebx
c001bd14:	83 ec 1c             	sub    esp,0x1c
c001bd17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bd23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd27:	89 da                	mov    edx,ebx
c001bd29:	85 c0                	test   eax,eax
c001bd2b:	75 37                	jne    c001bd64 <__umoddi3+0x54>
c001bd2d:	39 df                	cmp    edi,ebx
c001bd2f:	76 13                	jbe    c001bd44 <__umoddi3+0x34>
c001bd31:	89 f0                	mov    eax,esi
c001bd33:	f7 f7                	div    edi
c001bd35:	89 d0                	mov    eax,edx
c001bd37:	31 d2                	xor    edx,edx
c001bd39:	83 c4 1c             	add    esp,0x1c
c001bd3c:	5b                   	pop    ebx
c001bd3d:	5e                   	pop    esi
c001bd3e:	5f                   	pop    edi
c001bd3f:	5d                   	pop    ebp
c001bd40:	c3                   	ret    
c001bd41:	8d 76 00             	lea    esi,[esi+0x0]
c001bd44:	89 fd                	mov    ebp,edi
c001bd46:	85 ff                	test   edi,edi
c001bd48:	75 0b                	jne    c001bd55 <__umoddi3+0x45>
c001bd4a:	b8 01 00 00 00       	mov    eax,0x1
c001bd4f:	31 d2                	xor    edx,edx
c001bd51:	f7 f7                	div    edi
c001bd53:	89 c5                	mov    ebp,eax
c001bd55:	89 d8                	mov    eax,ebx
c001bd57:	31 d2                	xor    edx,edx
c001bd59:	f7 f5                	div    ebp
c001bd5b:	89 f0                	mov    eax,esi
c001bd5d:	f7 f5                	div    ebp
c001bd5f:	89 d0                	mov    eax,edx
c001bd61:	eb d4                	jmp    c001bd37 <__umoddi3+0x27>
c001bd63:	90                   	nop
c001bd64:	89 f1                	mov    ecx,esi
c001bd66:	39 d8                	cmp    eax,ebx
c001bd68:	76 0a                	jbe    c001bd74 <__umoddi3+0x64>
c001bd6a:	89 f0                	mov    eax,esi
c001bd6c:	83 c4 1c             	add    esp,0x1c
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	5f                   	pop    edi
c001bd72:	5d                   	pop    ebp
c001bd73:	c3                   	ret    
c001bd74:	0f bd e8             	bsr    ebp,eax
c001bd77:	83 f5 1f             	xor    ebp,0x1f
c001bd7a:	75 1c                	jne    c001bd98 <__umoddi3+0x88>
c001bd7c:	39 d8                	cmp    eax,ebx
c001bd7e:	72 04                	jb     c001bd84 <__umoddi3+0x74>
c001bd80:	39 f7                	cmp    edi,esi
c001bd82:	77 08                	ja     c001bd8c <__umoddi3+0x7c>
c001bd84:	89 da                	mov    edx,ebx
c001bd86:	29 fe                	sub    esi,edi
c001bd88:	19 c2                	sbb    edx,eax
c001bd8a:	89 f1                	mov    ecx,esi
c001bd8c:	89 c8                	mov    eax,ecx
c001bd8e:	83 c4 1c             	add    esp,0x1c
c001bd91:	5b                   	pop    ebx
c001bd92:	5e                   	pop    esi
c001bd93:	5f                   	pop    edi
c001bd94:	5d                   	pop    ebp
c001bd95:	c3                   	ret    
c001bd96:	66 90                	xchg   ax,ax
c001bd98:	ba 20 00 00 00       	mov    edx,0x20
c001bd9d:	29 ea                	sub    edx,ebp
c001bd9f:	89 e9                	mov    ecx,ebp
c001bda1:	d3 e0                	shl    eax,cl
c001bda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bda7:	89 f8                	mov    eax,edi
c001bda9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bdad:	88 d1                	mov    cl,dl
c001bdaf:	d3 e8                	shr    eax,cl
c001bdb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bdb5:	09 c1                	or     ecx,eax
c001bdb7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bdbb:	89 e9                	mov    ecx,ebp
c001bdbd:	d3 e7                	shl    edi,cl
c001bdbf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bdc3:	89 d8                	mov    eax,ebx
c001bdc5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdc9:	88 d1                	mov    cl,dl
c001bdcb:	d3 e8                	shr    eax,cl
c001bdcd:	89 c7                	mov    edi,eax
c001bdcf:	89 e9                	mov    ecx,ebp
c001bdd1:	d3 e3                	shl    ebx,cl
c001bdd3:	89 f0                	mov    eax,esi
c001bdd5:	88 d1                	mov    cl,dl
c001bdd7:	d3 e8                	shr    eax,cl
c001bdd9:	09 d8                	or     eax,ebx
c001bddb:	89 e9                	mov    ecx,ebp
c001bddd:	d3 e6                	shl    esi,cl
c001bddf:	89 f3                	mov    ebx,esi
c001bde1:	89 fa                	mov    edx,edi
c001bde3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bde7:	89 d1                	mov    ecx,edx
c001bde9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bded:	89 c6                	mov    esi,eax
c001bdef:	89 d7                	mov    edi,edx
c001bdf1:	39 d1                	cmp    ecx,edx
c001bdf3:	72 27                	jb     c001be1c <__umoddi3+0x10c>
c001bdf5:	74 21                	je     c001be18 <__umoddi3+0x108>
c001bdf7:	89 ca                	mov    edx,ecx
c001bdf9:	29 f3                	sub    ebx,esi
c001bdfb:	19 fa                	sbb    edx,edi
c001bdfd:	89 d0                	mov    eax,edx
c001bdff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be03:	d3 e0                	shl    eax,cl
c001be05:	89 e9                	mov    ecx,ebp
c001be07:	d3 eb                	shr    ebx,cl
c001be09:	09 d8                	or     eax,ebx
c001be0b:	d3 ea                	shr    edx,cl
c001be0d:	83 c4 1c             	add    esp,0x1c
c001be10:	5b                   	pop    ebx
c001be11:	5e                   	pop    esi
c001be12:	5f                   	pop    edi
c001be13:	5d                   	pop    ebp
c001be14:	c3                   	ret    
c001be15:	8d 76 00             	lea    esi,[esi+0x0]
c001be18:	39 c3                	cmp    ebx,eax
c001be1a:	73 db                	jae    c001bdf7 <__umoddi3+0xe7>
c001be1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be20:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001be24:	89 d7                	mov    edi,edx
c001be26:	89 c6                	mov    esi,eax
c001be28:	eb cd                	jmp    c001bdf7 <__umoddi3+0xe7>

Disassembly of section .init:

c001be2a <_init>:
c001be2a:	55                   	push   ebp
c001be2b:	89 e5                	mov    ebp,esp
c001be2d:	e8 c2 42 fe ff       	call   c00000f4 <frame_dummy>
c001be32:	e8 e5 fa ff ff       	call   c001b91c <__do_global_ctors_aux>
c001be37:	5d                   	pop    ebp
c001be38:	c3                   	ret    

Disassembly of section .fini:

c001be39 <_fini>:
c001be39:	55                   	push   ebp
c001be3a:	89 e5                	mov    ebp,esp
c001be3c:	e8 43 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001be41:	5d                   	pop    ebp
c001be42:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001be44 <Computer::~Computer()>:
c001be44:	83 ec 0c             	sub    esp,0xc
c001be47:	ba f8 d0 01 c0       	mov    edx,0xc001d0f8
c001be4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be50:	89 10                	mov    DWORD PTR [eax],edx
c001be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	50                   	push   eax
c001be5a:	e8 6b f9 fe ff       	call   c000b7ca <Device::~Device()>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	90                   	nop
c001be63:	83 c4 0c             	add    esp,0xc
c001be66:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001be68 <Computer::~Computer()>:
c001be68:	83 ec 0c             	sub    esp,0xc
c001be6b:	83 ec 0c             	sub    esp,0xc
c001be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be72:	e8 cd ff ff ff       	call   c001be44 <Computer::~Computer()>
c001be77:	83 c4 10             	add    esp,0x10
c001be7a:	83 ec 08             	sub    esp,0x8
c001be7d:	68 70 01 00 00       	push   0x170
c001be82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be86:	e8 07 e5 fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001be8b:	83 c4 10             	add    esp,0x10
c001be8e:	83 c4 0c             	add    esp,0xc
c001be91:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001be92 <idleCommon()>:
c001be92:	83 ec 0c             	sub    esp,0xc
c001be95:	fa                   	cli    
c001be96:	ff 05 08 37 02 c0    	inc    DWORD PTR ds:0xc0023708
c001be9c:	e8 73 74 ff ff       	call   c0013314 <schedule()>
c001bea1:	a1 08 37 02 c0       	mov    eax,ds:0xc0023708
c001bea6:	48                   	dec    eax
c001bea7:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c001beac:	75 01                	jne    c001beaf <idleCommon()+0x1d>
c001beae:	fb                   	sti    
c001beaf:	83 c4 0c             	add    esp,0xc
c001beb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001beb4 <LinkedList<UnixFile>::~LinkedList()>:
c001beb4:	90                   	nop
c001beb5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001beb6 <LinkedList<UnixFile>::LinkedList()>:
c001beb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bec4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001becb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001becf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bee4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bef6:	90                   	nop
c001bef7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bef8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bef8:	83 ec 0c             	sub    esp,0xc
c001befb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf00:	75 10                	jne    c001bf12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf02:	83 ec 0c             	sub    esp,0xc
c001bf05:	68 50 d3 01 c0       	push   0xc001d350
c001bf0a:	e8 f4 41 ff ff       	call   c0010103 <KePanic(char const*)>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf16:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf18:	85 c0                	test   eax,eax
c001bf1a:	74 34                	je     c001bf50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf23:	85 c0                	test   eax,eax
c001bf25:	74 29                	je     c001bf50 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf39:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf4e:	eb 65                	jmp    c001bfb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf54:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf56:	85 c0                	test   eax,eax
c001bf58:	75 4b                	jne    c001bfa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf61:	85 c0                	test   eax,eax
c001bf63:	75 40                	jne    c001bfa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf6d:	89 10                	mov    DWORD PTR [eax],edx
c001bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf8f:	85 c0                	test   eax,eax
c001bf91:	74 22                	je     c001bfb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf93:	83 ec 0c             	sub    esp,0xc
c001bf96:	68 72 d3 01 c0       	push   0xc001d372
c001bf9b:	e8 63 41 ff ff       	call   c0010103 <KePanic(char const*)>
c001bfa0:	83 c4 10             	add    esp,0x10
c001bfa3:	eb 10                	jmp    c001bfb5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfa5:	83 ec 0c             	sub    esp,0xc
c001bfa8:	68 7c d3 01 c0       	push   0xc001d37c
c001bfad:	e8 51 41 ff ff       	call   c0010103 <KePanic(char const*)>
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfbc:	8d 50 01             	lea    edx,[eax+0x1]
c001bfbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfc6:	90                   	nop
c001bfc7:	83 c4 0c             	add    esp,0xc
c001bfca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bfcc <LinkedList<UnixFile>::getFirstElement()>:
c001bfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bfd4 <LinkedList<UnixFile>::removeFirst()>:
c001bfd4:	83 ec 0c             	sub    esp,0xc
c001bfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfdd:	85 c0                	test   eax,eax
c001bfdf:	75 12                	jne    c001bff3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bfe1:	83 ec 0c             	sub    esp,0xc
c001bfe4:	68 88 d3 01 c0       	push   0xc001d388
c001bfe9:	e8 15 41 ff ff       	call   c0010103 <KePanic(char const*)>
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	eb 7e                	jmp    c001c071 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bffa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bffd:	85 c0                	test   eax,eax
c001bfff:	74 10                	je     c001c011 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c001:	83 ec 0c             	sub    esp,0xc
c001c004:	68 d3 d3 01 c0       	push   0xc001d3d3
c001c009:	e8 f5 40 ff ff       	call   c0010103 <KePanic(char const*)>
c001c00e:	83 c4 10             	add    esp,0x10
c001c011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c015:	8b 00                	mov    eax,DWORD PTR [eax]
c001c017:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c01a:	85 c0                	test   eax,eax
c001c01c:	75 33                	jne    c001c051 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c022:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c037:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c03a:	83 f8 01             	cmp    eax,0x1
c001c03d:	74 21                	je     c001c060 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c03f:	83 ec 0c             	sub    esp,0xc
c001c042:	68 ac d3 01 c0       	push   0xc001d3ac
c001c047:	e8 b7 40 ff ff       	call   c0010103 <KePanic(char const*)>
c001c04c:	83 c4 10             	add    esp,0x10
c001c04f:	eb 0f                	jmp    c001c060 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c055:	8b 00                	mov    eax,DWORD PTR [eax]
c001c057:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c05e:	89 10                	mov    DWORD PTR [eax],edx
c001c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c064:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c067:	8d 50 ff             	lea    edx,[eax-0x1]
c001c06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c071:	83 c4 0c             	add    esp,0xc
c001c074:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c076 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c076:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c07a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c07d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c07e <DriverlessDevice::~DriverlessDevice()>:
c001c07e:	ba 1c da 01 c0       	mov    edx,0xc001da1c
c001c083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c087:	89 10                	mov    DWORD PTR [eax],edx
c001c089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c08d:	50                   	push   eax
c001c08e:	e8 37 f7 fe ff       	call   c000b7ca <Device::~Device()>
c001c093:	83 c4 04             	add    esp,0x4
c001c096:	90                   	nop
c001c097:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c098 <DriverlessDevice::~DriverlessDevice()>:
c001c098:	83 ec 0c             	sub    esp,0xc
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0a2:	e8 d7 ff ff ff       	call   c001c07e <DriverlessDevice::~DriverlessDevice()>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	83 ec 08             	sub    esp,0x8
c001c0ad:	68 58 01 00 00       	push   0x158
c001c0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b6:	e8 d7 e2 fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	83 c4 0c             	add    esp,0xc
c001c0c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c0c2 <LinkedList<Device>::addElement(Device*)>:
c001c0c2:	83 ec 0c             	sub    esp,0xc
c001c0c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c0ca:	75 10                	jne    c001c0dc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c0cc:	83 ec 0c             	sub    esp,0xc
c001c0cf:	68 50 d3 01 c0       	push   0xc001d350
c001c0d4:	e8 2a 40 ff ff       	call   c0010103 <KePanic(char const*)>
c001c0d9:	83 c4 10             	add    esp,0x10
c001c0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0e2:	85 c0                	test   eax,eax
c001c0e4:	74 3a                	je     c001c120 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0ed:	85 c0                	test   eax,eax
c001c0ef:	74 2f                	je     c001c120 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c106:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c10a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c10d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c111:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c114:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c11e:	eb 68                	jmp    c001c188 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c124:	8b 00                	mov    eax,DWORD PTR [eax]
c001c126:	85 c0                	test   eax,eax
c001c128:	75 4e                	jne    c001c178 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c131:	85 c0                	test   eax,eax
c001c133:	75 43                	jne    c001c178 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c139:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c13d:	89 10                	mov    DWORD PTR [eax],edx
c001c13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c143:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c147:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c14e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c151:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c162:	85 c0                	test   eax,eax
c001c164:	74 22                	je     c001c188 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c166:	83 ec 0c             	sub    esp,0xc
c001c169:	68 72 d3 01 c0       	push   0xc001d372
c001c16e:	e8 90 3f ff ff       	call   c0010103 <KePanic(char const*)>
c001c173:	83 c4 10             	add    esp,0x10
c001c176:	eb 10                	jmp    c001c188 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	68 7c d3 01 c0       	push   0xc001d37c
c001c180:	e8 7e 3f ff ff       	call   c0010103 <KePanic(char const*)>
c001c185:	83 c4 10             	add    esp,0x10
c001c188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c18f:	8d 50 01             	lea    edx,[eax+0x1]
c001c192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c196:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c199:	90                   	nop
c001c19a:	83 c4 0c             	add    esp,0xc
c001c19d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c19e <LinkedList<Device>::LinkedList()>:
c001c19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1de:	90                   	nop
c001c1df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c1e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1e6:	85 c0                	test   eax,eax
c001c1e8:	75 0e                	jne    c001c1f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c1ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1f1:	85 c0                	test   eax,eax
c001c1f3:	75 03                	jne    c001c1f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c1f5:	b0 01                	mov    al,0x1
c001c1f7:	c3                   	ret    
c001c1f8:	b0 00                	mov    al,0x0
c001c1fa:	90                   	nop
c001c1fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c1fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c200:	8b 00                	mov    eax,DWORD PTR [eax]
c001c202:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c204 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c20d:	85 c0                	test   eax,eax
c001c20f:	75 17                	jne    c001c228 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	68 88 d3 01 c0       	push   0xc001d388
c001c219:	e8 e5 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	e9 92 00 00 00       	jmp    c001c2b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c226:	66 90                	xchg   ax,ax
c001c228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c22f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c232:	85 c0                	test   eax,eax
c001c234:	0f 95 c0             	setne  al
c001c237:	84 c0                	test   al,al
c001c239:	74 11                	je     c001c24c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c23b:	83 ec 0c             	sub    esp,0xc
c001c23e:	68 d3 d3 01 c0       	push   0xc001d3d3
c001c243:	e8 bb 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	90                   	nop
c001c24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c250:	8b 00                	mov    eax,DWORD PTR [eax]
c001c252:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c255:	85 c0                	test   eax,eax
c001c257:	0f 94 c0             	sete   al
c001c25a:	84 c0                	test   al,al
c001c25c:	74 36                	je     c001c294 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c262:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c277:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c27a:	83 f8 01             	cmp    eax,0x1
c001c27d:	74 25                	je     c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c27f:	83 ec 0c             	sub    esp,0xc
c001c282:	68 ac d3 01 c0       	push   0xc001d3ac
c001c287:	e8 77 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	eb 13                	jmp    c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c291:	8d 76 00             	lea    esi,[esi+0x0]
c001c294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c298:	8b 00                	mov    eax,DWORD PTR [eax]
c001c29a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a1:	89 10                	mov    DWORD PTR [eax],edx
c001c2a3:	90                   	nop
c001c2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ab:	8d 50 ff             	lea    edx,[eax-0x1]
c001c2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2b8:	83 c4 0c             	add    esp,0xc
c001c2bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c2bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c2c4:	75 12                	jne    c001c2d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c2c6:	83 ec 0c             	sub    esp,0xc
c001c2c9:	68 50 d3 01 c0       	push   0xc001d350
c001c2ce:	e8 30 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c2d3:	83 c4 10             	add    esp,0x10
c001c2d6:	66 90                	xchg   ax,ax
c001c2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2de:	85 c0                	test   eax,eax
c001c2e0:	74 36                	je     c001c318 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2e9:	85 c0                	test   eax,eax
c001c2eb:	74 2b                	je     c001c318 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c303:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c30d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c314:	eb 6a                	jmp    c001c380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c316:	66 90                	xchg   ax,ax
c001c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31e:	85 c0                	test   eax,eax
c001c320:	75 4e                	jne    c001c370 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c329:	85 c0                	test   eax,eax
c001c32b:	75 43                	jne    c001c370 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c331:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c335:	89 10                	mov    DWORD PTR [eax],edx
c001c337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c33f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c349:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c357:	85 c0                	test   eax,eax
c001c359:	74 25                	je     c001c380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c35b:	83 ec 0c             	sub    esp,0xc
c001c35e:	68 72 d3 01 c0       	push   0xc001d372
c001c363:	e8 9b 3d ff ff       	call   c0010103 <KePanic(char const*)>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	eb 13                	jmp    c001c380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c36d:	8d 76 00             	lea    esi,[esi+0x0]
c001c370:	83 ec 0c             	sub    esp,0xc
c001c373:	68 7c d3 01 c0       	push   0xc001d37c
c001c378:	e8 86 3d ff ff       	call   c0010103 <KePanic(char const*)>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c384:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c387:	8d 50 01             	lea    edx,[eax+0x1]
c001c38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c391:	90                   	nop
c001c392:	83 c4 0c             	add    esp,0xc
c001c395:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c398 <ACPI::~ACPI()>:
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	ba 84 df 01 c0       	mov    edx,0xc001df84
c001c3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a4:	89 10                	mov    DWORD PTR [eax],edx
c001c3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	50                   	push   eax
c001c3ae:	e8 17 f4 fe ff       	call   c000b7ca <Device::~Device()>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	90                   	nop
c001c3b7:	83 c4 0c             	add    esp,0xc
c001c3ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c3bc <ACPI::~ACPI()>:
c001c3bc:	83 ec 0c             	sub    esp,0xc
c001c3bf:	83 ec 0c             	sub    esp,0xc
c001c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c6:	e8 cd ff ff ff       	call   c001c398 <ACPI::~ACPI()>
c001c3cb:	83 c4 10             	add    esp,0x10
c001c3ce:	83 ec 08             	sub    esp,0x8
c001c3d1:	68 64 12 00 00       	push   0x1264
c001c3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3da:	e8 b3 df fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c3df:	83 c4 10             	add    esp,0x10
c001c3e2:	83 c4 0c             	add    esp,0xc
c001c3e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c3e8 <LinkedList<Device>::~LinkedList()>:
c001c3e8:	90                   	nop
c001c3e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c3ec <LinkedList<Device>::isEmpty()>:
c001c3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3f2:	85 c0                	test   eax,eax
c001c3f4:	75 0e                	jne    c001c404 <LinkedList<Device>::isEmpty()+0x18>
c001c3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3fd:	85 c0                	test   eax,eax
c001c3ff:	75 03                	jne    c001c404 <LinkedList<Device>::isEmpty()+0x18>
c001c401:	b0 01                	mov    al,0x1
c001c403:	c3                   	ret    
c001c404:	b0 00                	mov    al,0x0
c001c406:	90                   	nop
c001c407:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c408 <LinkedList<Device>::getFirstElement()>:
c001c408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c40e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c410 <LinkedList<Device>::removeFirst()>:
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c417:	8b 00                	mov    eax,DWORD PTR [eax]
c001c419:	85 c0                	test   eax,eax
c001c41b:	75 17                	jne    c001c434 <LinkedList<Device>::removeFirst()+0x24>
c001c41d:	83 ec 0c             	sub    esp,0xc
c001c420:	68 88 d3 01 c0       	push   0xc001d388
c001c425:	e8 d9 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c42a:	83 c4 10             	add    esp,0x10
c001c42d:	e9 92 00 00 00       	jmp    c001c4c4 <LinkedList<Device>::removeFirst()+0xb4>
c001c432:	66 90                	xchg   ax,ax
c001c434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c43b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c441:	85 c0                	test   eax,eax
c001c443:	74 13                	je     c001c458 <LinkedList<Device>::removeFirst()+0x48>
c001c445:	83 ec 0c             	sub    esp,0xc
c001c448:	68 d3 d3 01 c0       	push   0xc001d3d3
c001c44d:	e8 b1 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c452:	83 c4 10             	add    esp,0x10
c001c455:	8d 76 00             	lea    esi,[esi+0x0]
c001c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c45e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c464:	85 c0                	test   eax,eax
c001c466:	75 34                	jne    c001c49c <LinkedList<Device>::removeFirst()+0x8c>
c001c468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c476:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c47d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c481:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c484:	83 f8 01             	cmp    eax,0x1
c001c487:	74 27                	je     c001c4b0 <LinkedList<Device>::removeFirst()+0xa0>
c001c489:	83 ec 0c             	sub    esp,0xc
c001c48c:	68 ac d3 01 c0       	push   0xc001d3ac
c001c491:	e8 6d 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c496:	83 c4 10             	add    esp,0x10
c001c499:	eb 15                	jmp    c001c4b0 <LinkedList<Device>::removeFirst()+0xa0>
c001c49b:	90                   	nop
c001c49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4a2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ac:	89 10                	mov    DWORD PTR [eax],edx
c001c4ae:	66 90                	xchg   ax,ax
c001c4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4b7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4c4:	83 c4 0c             	add    esp,0xc
c001c4c7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c4c8 <CPU::~CPU()>:
c001c4c8:	83 ec 0c             	sub    esp,0xc
c001c4cb:	ba 20 e1 01 c0       	mov    edx,0xc001e120
c001c4d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d4:	89 10                	mov    DWORD PTR [eax],edx
c001c4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4da:	83 ec 0c             	sub    esp,0xc
c001c4dd:	50                   	push   eax
c001c4de:	e8 e7 f2 fe ff       	call   c000b7ca <Device::~Device()>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	90                   	nop
c001c4e7:	83 c4 0c             	add    esp,0xc
c001c4ea:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c4ec <CPU::~CPU()>:
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	83 ec 0c             	sub    esp,0xc
c001c4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f6:	e8 cd ff ff ff       	call   c001c4c8 <CPU::~CPU()>
c001c4fb:	83 c4 10             	add    esp,0x10
c001c4fe:	83 ec 08             	sub    esp,0x8
c001c501:	68 94 11 00 00       	push   0x1194
c001c506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c50a:	e8 83 de fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	83 c4 0c             	add    esp,0xc
c001c515:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c518 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c518:	90                   	nop
c001c519:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c51c <ThreadControlBlock::ThreadControlBlock()>:
c001c51c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c520:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c52b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c536:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c53d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c541:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c54c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c557:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c55b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c55f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c563:	90                   	nop
c001c564:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c568 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c56c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c576:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c57d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c581:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c596:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5a8:	90                   	nop
c001c5a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c5ac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c5ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c5b3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c5b4 <PCI::~PCI()>:
c001c5b4:	83 ec 0c             	sub    esp,0xc
c001c5b7:	ba 78 ec 01 c0       	mov    edx,0xc001ec78
c001c5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c0:	89 10                	mov    DWORD PTR [eax],edx
c001c5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c6:	83 ec 0c             	sub    esp,0xc
c001c5c9:	50                   	push   eax
c001c5ca:	e8 85 ec fe ff       	call   c000b254 <Bus::~Bus()>
c001c5cf:	83 c4 10             	add    esp,0x10
c001c5d2:	90                   	nop
c001c5d3:	83 c4 0c             	add    esp,0xc
c001c5d6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c5d8 <PCI::~PCI()>:
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5e2:	e8 cd ff ff ff       	call   c001c5b4 <PCI::~PCI()>
c001c5e7:	83 c4 10             	add    esp,0x10
c001c5ea:	83 ec 08             	sub    esp,0x8
c001c5ed:	68 5c 01 00 00       	push   0x15c
c001c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f6:	e8 97 dd fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	83 c4 0c             	add    esp,0xc
c001c601:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c602 <IDE::~IDE()>:
c001c602:	83 ec 0c             	sub    esp,0xc
c001c605:	ba 2c ed 01 c0       	mov    edx,0xc001ed2c
c001c60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60e:	89 10                	mov    DWORD PTR [eax],edx
c001c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c614:	83 ec 0c             	sub    esp,0xc
c001c617:	50                   	push   eax
c001c618:	e8 27 f6 fe ff       	call   c000bc44 <HardDiskController::~HardDiskController()>
c001c61d:	83 c4 10             	add    esp,0x10
c001c620:	90                   	nop
c001c621:	83 c4 0c             	add    esp,0xc
c001c624:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c626 <IDE::~IDE()>:
c001c626:	83 ec 0c             	sub    esp,0xc
c001c629:	83 ec 0c             	sub    esp,0xc
c001c62c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c630:	e8 cd ff ff ff       	call   c001c602 <IDE::~IDE()>
c001c635:	83 c4 10             	add    esp,0x10
c001c638:	83 ec 08             	sub    esp,0x8
c001c63b:	68 70 02 00 00       	push   0x270
c001c640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c644:	e8 49 dd fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	83 c4 0c             	add    esp,0xc
c001c64f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c650 <SATABus::~SATABus()>:
c001c650:	83 ec 0c             	sub    esp,0xc
c001c653:	ba 7c ed 01 c0       	mov    edx,0xc001ed7c
c001c658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65c:	89 10                	mov    DWORD PTR [eax],edx
c001c65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c662:	83 ec 0c             	sub    esp,0xc
c001c665:	50                   	push   eax
c001c666:	e8 d9 f5 fe ff       	call   c000bc44 <HardDiskController::~HardDiskController()>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	90                   	nop
c001c66f:	83 c4 0c             	add    esp,0xc
c001c672:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c674 <SATABus::~SATABus()>:
c001c674:	83 ec 0c             	sub    esp,0xc
c001c677:	83 ec 0c             	sub    esp,0xc
c001c67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c67e:	e8 cd ff ff ff       	call   c001c650 <SATABus::~SATABus()>
c001c683:	83 c4 10             	add    esp,0x10
c001c686:	83 ec 08             	sub    esp,0x8
c001c689:	68 64 01 00 00       	push   0x164
c001c68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c692:	e8 fb dc fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	83 c4 0c             	add    esp,0xc
c001c69d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c69e <ATA::~ATA()>:
c001c69e:	83 ec 0c             	sub    esp,0xc
c001c6a1:	ba bc ed 01 c0       	mov    edx,0xc001edbc
c001c6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6aa:	89 10                	mov    DWORD PTR [eax],edx
c001c6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b0:	83 ec 0c             	sub    esp,0xc
c001c6b3:	50                   	push   eax
c001c6b4:	e8 6d f6 fe ff       	call   c000bd26 <PhysicalDisk::~PhysicalDisk()>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	90                   	nop
c001c6bd:	83 c4 0c             	add    esp,0xc
c001c6c0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c6c2 <ATA::~ATA()>:
c001c6c2:	83 ec 0c             	sub    esp,0xc
c001c6c5:	83 ec 0c             	sub    esp,0xc
c001c6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6cc:	e8 cd ff ff ff       	call   c001c69e <ATA::~ATA()>
c001c6d1:	83 c4 10             	add    esp,0x10
c001c6d4:	83 ec 08             	sub    esp,0x8
c001c6d7:	68 7c 01 00 00       	push   0x17c
c001c6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e0:	e8 ad dc fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	83 c4 0c             	add    esp,0xc
c001c6eb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c6ec <ATAPI::~ATAPI()>:
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	ba 04 ee 01 c0       	mov    edx,0xc001ee04
c001c6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f8:	89 10                	mov    DWORD PTR [eax],edx
c001c6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fe:	83 ec 0c             	sub    esp,0xc
c001c701:	50                   	push   eax
c001c702:	e8 1f f6 fe ff       	call   c000bd26 <PhysicalDisk::~PhysicalDisk()>
c001c707:	83 c4 10             	add    esp,0x10
c001c70a:	90                   	nop
c001c70b:	83 c4 0c             	add    esp,0xc
c001c70e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c710 <ATAPI::~ATAPI()>:
c001c710:	83 ec 0c             	sub    esp,0xc
c001c713:	83 ec 0c             	sub    esp,0xc
c001c716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c71a:	e8 cd ff ff ff       	call   c001c6ec <ATAPI::~ATAPI()>
c001c71f:	83 c4 10             	add    esp,0x10
c001c722:	83 ec 08             	sub    esp,0x8
c001c725:	68 84 01 00 00       	push   0x184
c001c72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c72e:	e8 5f dc fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	83 c4 0c             	add    esp,0xc
c001c739:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c73a <SATA::~SATA()>:
c001c73a:	83 ec 0c             	sub    esp,0xc
c001c73d:	ba b8 ee 01 c0       	mov    edx,0xc001eeb8
c001c742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c746:	89 10                	mov    DWORD PTR [eax],edx
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	83 ec 0c             	sub    esp,0xc
c001c74f:	50                   	push   eax
c001c750:	e8 d1 f5 fe ff       	call   c000bd26 <PhysicalDisk::~PhysicalDisk()>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	90                   	nop
c001c759:	83 c4 0c             	add    esp,0xc
c001c75c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c75e <SATA::~SATA()>:
c001c75e:	83 ec 0c             	sub    esp,0xc
c001c761:	83 ec 0c             	sub    esp,0xc
c001c764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c768:	e8 cd ff ff ff       	call   c001c73a <SATA::~SATA()>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	83 ec 08             	sub    esp,0x8
c001c773:	68 7c 01 00 00       	push   0x17c
c001c778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c77c:	e8 11 dc fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	83 c4 0c             	add    esp,0xc
c001c787:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c788 <SATAPI::~SATAPI()>:
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c001c790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c794:	89 10                	mov    DWORD PTR [eax],edx
c001c796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79a:	83 ec 0c             	sub    esp,0xc
c001c79d:	50                   	push   eax
c001c79e:	e8 83 f5 fe ff       	call   c000bd26 <PhysicalDisk::~PhysicalDisk()>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	90                   	nop
c001c7a7:	83 c4 0c             	add    esp,0xc
c001c7aa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c7ac <SATAPI::~SATAPI()>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	83 ec 0c             	sub    esp,0xc
c001c7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7b6:	e8 cd ff ff ff       	call   c001c788 <SATAPI::~SATAPI()>
c001c7bb:	83 c4 10             	add    esp,0x10
c001c7be:	83 ec 08             	sub    esp,0x8
c001c7c1:	68 84 01 00 00       	push   0x184
c001c7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ca:	e8 c3 db fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c7cf:	83 c4 10             	add    esp,0x10
c001c7d2:	83 c4 0c             	add    esp,0xc
c001c7d5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c7d6 <IOAPIC::~IOAPIC()>:
c001c7d6:	83 ec 0c             	sub    esp,0xc
c001c7d9:	ba 30 f0 01 c0       	mov    edx,0xc001f030
c001c7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e2:	89 10                	mov    DWORD PTR [eax],edx
c001c7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e8:	83 ec 0c             	sub    esp,0xc
c001c7eb:	50                   	push   eax
c001c7ec:	e8 d9 ef fe ff       	call   c000b7ca <Device::~Device()>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	90                   	nop
c001c7f5:	83 c4 0c             	add    esp,0xc
c001c7f8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c7fa <IOAPIC::~IOAPIC()>:
c001c7fa:	83 ec 0c             	sub    esp,0xc
c001c7fd:	83 ec 0c             	sub    esp,0xc
c001c800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c804:	e8 cd ff ff ff       	call   c001c7d6 <IOAPIC::~IOAPIC()>
c001c809:	83 c4 10             	add    esp,0x10
c001c80c:	83 ec 08             	sub    esp,0x8
c001c80f:	68 68 01 00 00       	push   0x168
c001c814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c818:	e8 75 db fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	83 c4 0c             	add    esp,0xc
c001c823:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c824 <APICTimer::~APICTimer()>:
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c001c82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c830:	89 10                	mov    DWORD PTR [eax],edx
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	83 ec 0c             	sub    esp,0xc
c001c839:	50                   	push   eax
c001c83a:	e8 a1 08 ff ff       	call   c000d0e0 <Timer::~Timer()>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	90                   	nop
c001c843:	83 c4 0c             	add    esp,0xc
c001c846:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c848 <APICTimer::~APICTimer()>:
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c852:	e8 cd ff ff ff       	call   c001c824 <APICTimer::~APICTimer()>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	83 ec 08             	sub    esp,0x8
c001c85d:	68 60 01 00 00       	push   0x160
c001c862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c866:	e8 27 db fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	83 c4 0c             	add    esp,0xc
c001c871:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c874 <PIT::~PIT()>:
c001c874:	83 ec 0c             	sub    esp,0xc
c001c877:	ba c8 f0 01 c0       	mov    edx,0xc001f0c8
c001c87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c880:	89 10                	mov    DWORD PTR [eax],edx
c001c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c886:	83 ec 0c             	sub    esp,0xc
c001c889:	50                   	push   eax
c001c88a:	e8 51 08 ff ff       	call   c000d0e0 <Timer::~Timer()>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	90                   	nop
c001c893:	83 c4 0c             	add    esp,0xc
c001c896:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c898 <PIT::~PIT()>:
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a2:	e8 cd ff ff ff       	call   c001c874 <PIT::~PIT()>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	83 ec 08             	sub    esp,0x8
c001c8ad:	68 5c 01 00 00       	push   0x15c
c001c8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b6:	e8 d7 da fe ff       	call   c000a392 <operator delete(void*, unsigned long)>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	83 c4 0c             	add    esp,0xc
c001c8c1:	c3                   	ret    
