
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 82 f9 00 00       	call   c000f9a2 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 72 02 00       	call   c0027298 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f4 7d 02 c0       	mov    ebx,0xc0027df4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 7e 02 c0    	cmp    ebx,0xc0027e00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 c2 02 c0       	mov    eax,0xc002c258
c0000049:	3d 58 c2 02 c0       	cmp    eax,0xc002c258
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 c2 02 c0       	push   0xc002c258
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 c2 02 c0       	mov    eax,0xc002c258
c0000075:	2d 58 c2 02 c0       	sub    eax,0xc002c258
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 c2 02 c0       	push   0xc002c258
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c888,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 7e 02 c0       	mov    ebx,0xc0027e08
c00000bb:	81 eb 04 7e 02 c0    	sub    ebx,0xc0027e04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 7e 02 c0       	mov    esi,0xc0027e04
c00000ca:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 c2 02 c0       	push   0xc002c258
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c888,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 c8 02 c0       	push   0xc002c890
c000012c:	68 58 c2 02 c0       	push   0xc002c258
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 06 c8 01 00       	call   c001cb56 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 05 23 01 00       	call   c001266d <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 e4 c7 01 00       	call   c001cb56 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 32 cc 01 00       	call   c001cfc3 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 e0 d1 01 00       	call   c001d57a <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 d0 cc 02 c0 	lgdtd  ds:0xc002ccd0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 cf 3f 01 00       	call   c001455d <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d a8 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8a8
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 a8 c8 02 c0       	mov    ds:0xc002c8a8,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 a8 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a8,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 20 7e 02 c0 02 	test   BYTE PTR [edx-0x3ffd81e0],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 20 7e 02 c0 01 	test   BYTE PTR [edx-0x3ffd81e0],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 20 7e 02 c0 08 	test   BYTE PTR [edx-0x3ffd81e0],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 20 7e 02 c0 04 	test   BYTE PTR [edi-0x3ffd81e0],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 20 7e 02 c0 01 	test   BYTE PTR [edx-0x3ffd81e0],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d c0 c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8c0
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d c0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c0,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 c4 c8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd373c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 c4 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd373c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d c0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c0,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 ec c8 02 c0    	cmp    DWORD PTR ds:0xc002c8ec,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d fc c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8fc
c0000c10:	c7 42 0c f4 c8 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c8f4
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 fc c8 02 c0    	mov    DWORD PTR ds:0xc002c8fc,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 ec c8 02 c0    	mov    DWORD PTR ds:0xc002c8ec,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 c0 c8 02 c0 02 	test   BYTE PTR ds:0xc002c8c0,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 50 e7 00 00       	call   c000f441 <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 92 e6 00 00       	call   c000f441 <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 7c e6 00 00       	call   c000f441 <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 58 e6 00 00       	call   c000f441 <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d c0 c8 02 c0    	mov    edi,DWORD PTR ds:0xc002c8c0
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 c4 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd373c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 c4 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd373c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 f4 c8 02 c0 	lea    edx,[eax*8-0x3ffd370c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 00 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c900
c0000f92:	81 fb f4 c8 02 c0    	cmp    ebx,0xc002c8f4
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d f4 c8 02 c0       	cmp    eax,0xc002c8f4
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d f0 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8f0,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 fc c8 02 c0       	mov    ds:0xc002c8fc,eax
c0000fce:	a3 00 c9 02 c0       	mov    ds:0xc002c900,eax
c0000fd3:	a3 f0 c8 02 c0       	mov    ds:0xc002c8f0,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 f4 c8 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c8f4
c0000fe1:	c7 40 0c f4 c8 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c8f4
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 00 c9 02 c0       	mov    ds:0xc002c900,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 f4 c8 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c8f4
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 b8 c8 02 c0 	lea    ebp,[edx*4-0x3ffd3748]
c0001032:	8b 14 95 c0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3740]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 c0 c8 02 c0 	lea    ecx,[edx*4-0x3ffd3740]
c000104d:	8b 14 95 c0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3740]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd f4 cb 02 c0 	or     DWORD PTR [edi*4-0x3ffd340c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 f4 c8 02 c0 	lea    eax,[eax*8-0x3ffd370c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d fc c8 02 c0    	mov    DWORD PTR ds:0xc002c8fc,ecx
c0001107:	89 0d 00 c9 02 c0    	mov    DWORD PTR ds:0xc002c900,ecx
c000110d:	c7 41 08 f4 c8 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c8f4
c0001114:	c7 41 0c f4 c8 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c8f4
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd ec c8 02 c0 	lea    edx,[ecx*8-0x3ffd3714]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d f4 cb 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd340c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d f4 cb 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd340c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 ec c8 02 c0 	lea    edx,[eax*4-0x3ffd3714]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d f4 cb 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd340c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d fc c8 02 c0    	mov    DWORD PTR ds:0xc002c8fc,edi
c00011da:	89 3d 00 c9 02 c0    	mov    DWORD PTR ds:0xc002c900,edi
c00011e0:	c7 47 08 f4 c8 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c8f4
c00011e7:	c7 47 0c f4 c8 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c8f4
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d f0 c8 02 c0    	mov    DWORD PTR ds:0xc002c8f0,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 ec c8 02 c0       	mov    eax,ds:0xc002c8ec
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d ec c8 02 c0    	mov    DWORD PTR ds:0xc002c8ec,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba c0 c8 02 c0       	mov    edx,0xc002c8c0
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d c0 c8 02 c0 00 	cmp    DWORD PTR ds:0xc002c8c0,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 14 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002cc14
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 14 cc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cc14,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 14 cc 02 c0    	mov    DWORD PTR ds:0xc002cc14,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 ec c8 02 c0    	cmp    DWORD PTR ds:0xc002c8ec,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d ec c8 02 c0    	mov    DWORD PTR ds:0xc002c8ec,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d c0 c8 02 c0 00 	cmp    DWORD PTR ds:0xc002c8c0,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 1c cc 02 c0    	push   DWORD PTR ds:0xc002cc1c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d c0 c8 02 c0 00 	cmp    DWORD PTR ds:0xc002c8c0,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 1c cc 02 c0       	mov    eax,ds:0xc002cc1c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d ec c8 02 c0 00 	cmp    DWORD PTR ds:0xc002c8ec,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 ec c8 02 c0       	mov    eax,ds:0xc002c8ec
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 c4 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd373c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 f4 c8 02 c0       	mov    eax,0xc002c8f4
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d ec cb 02 c0       	cmp    eax,0xc002cbec
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 28 cc 02 c0       	mov    eax,ds:0xc002cc28
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 10 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc10
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 24 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc24
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 34 cc 02 c0    	mov    esi,DWORD PTR ds:0xc002cc34
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 24 7f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd80dc]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 c0 c8 02 c0       	mov    eax,ds:0xc002c8c0
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 c0 c8 02 c0       	mov    ds:0xc002c8c0,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 04 cc 02 c0    	mov    DWORD PTR ds:0xc002cc04,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 08 cc 02 c0    	mov    DWORD PTR ds:0xc002cc08,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 0c cc 02 c0    	mov    DWORD PTR ds:0xc002cc0c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 14 cc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cc14,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 80 e3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1c80]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 96 e5 01 00       	jmp    c001ff72 <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 80 e3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1c80]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 c7 e5 01 00       	jmp    c001ffb9 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 80 e3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1c80]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 ef e5 01 00       	jmp    c0020000 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 08 39 02 00       	call   c00255fc <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 40 80 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7fc0]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 40 80 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7fc0]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 40 7f 02 c0       	mov    edx,0xc0027f40
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 60 80 02 c0       	mov    edx,0xc0028060
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba 18 b1 02 c0       	mov    edx,0xc002b118
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 6c 80 02 c0       	mov    edx,0xc002806c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 50 80 02 c0       	mov    edx,0xc0028050
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 60 cc 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd33a0]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 40 cc 02 c0    	mov    ax,ds:0xc002cc40
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 40 cc 02 c0    	mov    ds:0xc002cc40,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 05 27 02 00       	call   c00255fc <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 72 80 02 c0       	mov    eax,0xc0028072
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad c0 7f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8040]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 7b 80 02 c0       	mov    eax,0xc002807b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 40 80 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7fc0]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 d0 10 02 00       	call   c00255fc <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 50 80 02 c0       	mov    edx,0xc0028050
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 40 7f 02 c0       	mov    edx,0xc0027f40
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 50 7f 02 c0       	mov    edx,0xc0027f50
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 60 cc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd33a0]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 60 cc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd33a0],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 97 fa 01 00       	call   c00255fc <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 7d fa 01 00       	call   c00255fc <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 97 7f 02 c0       	mov    eax,0xc0027f97
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 90 7f 02 c0       	mov    eax,0xc0027f90
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 60 cc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd33a0]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 80 7f 02 c0       	mov    esi,0xc0027f80
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 c0 e1 01 00       	call   c00255fc <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 60 80 02 c0       	mov    edx,0xc0028060
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 60 7f 02 c0       	mov    edx,0xc0027f60
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 70 7f 02 c0       	mov    edx,0xc0027f70
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 82 80 02 c0       	mov    edx,0xc0028082
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 8e 80 02 c0       	mov    edx,0xc002808e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba a2 80 02 c0       	mov    edx,0xc00280a2
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 97 73 00 00       	call   c000f5ea <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 91 73 00 00       	call   c000f5fa <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c c0 83 02 c0 	mov    DWORD PTR [esp+0xc],0xc00283c0
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 c0 83 02 c0 	mov    DWORD PTR [esp+0x10],0xc00283c0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 c0 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f40]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 d6 70 00 00       	call   c000f5fa <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 c0 70 00 00       	call   c000f5fa <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 14 eb 01 00       	call   c00270cf <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 d7 ea 01 00       	call   c00270b1 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 ab ea 01 00       	call   c00270cf <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 5e e1 01 00       	call   c00267d4 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 d8 eb 01 00       	call   c0027260 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 25 ea 01 00       	call   c00270cf <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 67 e9 01 00       	call   c00270cf <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 34 e9 01 00       	call   c00270b1 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 21 e8 01 00       	call   c00270cf <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 e9 e7 01 00       	call   c00270b1 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 9f 6c 00 00       	call   c000f61a <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 3a 6c 00 00       	call   c000f5fa <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 f5 e5 01 00       	call   c00270cf <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 ba e5 01 00       	call   c00270b1 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 20 89 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd76e0]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 ca e2 01 00       	call   c0026e63 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 48 dc 01 00       	call   c0026800 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 04 e5 01 00       	call   c00270d3 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 f2 e5 01 00       	call   c00271f7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 dc db 01 00       	call   c0026800 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 87 e4 01 00       	call   c00270cd <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 68 e4 01 00       	call   c00270d1 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 f6 e5 01 00       	call   c0027280 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 a8 e1 01 00       	call   c0026e63 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 26 db 01 00       	call   c0026800 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 e2 e3 01 00       	call   c00270d3 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 d0 e4 01 00       	call   c00271f7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 ba da 01 00       	call   c0026800 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 65 e3 01 00       	call   c00270cd <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 45 e3 01 00       	call   c00270d1 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 d2 e4 01 00       	call   c0027280 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 80 e2 01 00       	call   c00270cf <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 3e e2 01 00       	call   c00270b1 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 26 e2 01 00       	call   c00270cf <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 98 df 01 00       	call   c0026e63 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 9a d2 01 00       	call   c0026183 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 fd d8 01 00       	call   c0026800 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 4f df 01 00       	call   c0026e63 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 55 d2 01 00       	call   c0026183 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 24 df 01 00       	call   c0026e63 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 74 e1 01 00       	call   c00270cd <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 51 d8 01 00       	call   c00267d4 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 cb e2 01 00       	call   c0027260 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 fa e0 01 00       	call   c00270b1 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 f5 d7 01 00       	call   c00267d4 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 73 de 01 00       	call   c0026e63 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 f6 d7 01 00       	call   c0026800 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 48 de 01 00       	call   c0026e63 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 af da 01 00       	call   c0026ae4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 2e d1 01 00       	call   c0026183 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 8e ca 01 00       	call   c0025b18 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 65 e1 01 00       	call   c00271f7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 4e d7 01 00       	call   c0026800 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 35 e1 01 00       	call   c00271f7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 a7 d0 01 00       	call   c0026183 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 e0 df 01 00       	call   c00270d3 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 c8 d9 01 00       	call   c0026ae4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 4e d0 01 00       	call   c0026183 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 34 e1 01 00       	call   c0027280 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 0e dd 01 00       	call   c0026e63 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 65 d6 01 00       	call   c00267d4 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 44 df 01 00       	call   c00270cf <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 dd cf 01 00       	call   c0026183 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 09 d6 01 00       	call   c00267d4 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 a3 e0 01 00       	call   c0027280 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 5c dc 01 00       	call   c0026e63 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 d9 d5 01 00       	call   c0026800 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 2c dc 01 00       	call   c0026e63 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 32 cf 01 00       	call   c0026183 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 02 dc 01 00       	call   c0026e63 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 54 de 01 00       	call   c00270cf <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 2b d5 01 00       	call   c00267d4 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 a5 df 01 00       	call   c0027260 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 d4 dd 01 00       	call   c00270b1 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 ce d4 01 00       	call   c00267d4 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 4c db 01 00       	call   c0026e63 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 cf d4 01 00       	call   c0026800 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 21 db 01 00       	call   c0026e63 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 88 d7 01 00       	call   c0026ae4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 07 ce 01 00       	call   c0026183 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 57 c7 01 00       	call   c0025b18 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 2e de 01 00       	call   c00271f7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 17 d4 01 00       	call   c0026800 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 fe dd 01 00       	call   c00271f7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 70 cd 01 00       	call   c0026183 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 a9 dc 01 00       	call   c00270d3 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 90 d6 01 00       	call   c0026ae4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 0f cd 01 00       	call   c0026183 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 f5 dd 01 00       	call   c0027280 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 cf d9 01 00       	call   c0026e63 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 26 d3 01 00       	call   c00267d4 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 05 dc 01 00       	call   c00270cf <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 9e cc 01 00       	call   c0026183 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 ca d2 01 00       	call   c00267d4 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 3f d9 01 00       	call   c0026e63 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 45 cc 01 00       	call   c0026183 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 80 89 02 c0       	mov    eax,0xc0028980
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 94 89 02 c0       	mov    eax,0xc0028994
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 d3 5f 00 00       	call   c000f5fa <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 d5 5f 00 00       	call   c000f61a <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 ba d7 01 00       	call   c0026e63 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 38 d1 01 00       	call   c0026800 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 ca c3 01 00       	call   c0025b18 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 a1 da 01 00       	call   c00271f7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 8a d0 01 00       	call   c0026800 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 6d da 01 00       	call   c00271f7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 df c9 01 00       	call   c0026183 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 3f da 01 00       	call   c00271f7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 2e d0 01 00       	call   c0026800 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 97 c9 01 00       	call   c0026183 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 b8 c2 01 00       	call   c0025b18 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 8f d9 01 00       	call   c00271f7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 78 cf 01 00       	call   c0026800 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 5b d9 01 00       	call   c00271f7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 cd c8 01 00       	call   c0026183 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 2d d9 01 00       	call   c00271f7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 1c cf 01 00       	call   c0026800 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 85 c8 01 00       	call   c0026183 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 63 c8 01 00       	call   c0026183 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 3f c1 01 00       	call   c0025b18 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 16 d8 01 00       	call   c00271f7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 ff cd 01 00       	call   c0026800 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 e2 d7 01 00       	call   c00271f7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 54 c7 01 00       	call   c0026183 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 b4 d7 01 00       	call   c00271f7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 9d cd 01 00       	call   c0026800 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 06 c7 01 00       	call   c0026183 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 66 d7 01 00       	call   c00271f7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 4f cd 01 00       	call   c0026800 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 b8 c6 01 00       	call   c0026183 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 cd bf 01 00       	call   c0025b18 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 a4 d6 01 00       	call   c00271f7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 8d cc 01 00       	call   c0026800 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 74 d6 01 00       	call   c00271f7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 e6 c5 01 00       	call   c0026183 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 46 d6 01 00       	call   c00271f7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 2f cc 01 00       	call   c0026800 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 98 c5 01 00       	call   c0026183 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 f8 d5 01 00       	call   c00271f7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 e1 cb 01 00       	call   c0026800 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 4a c5 01 00       	call   c0026183 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 1e c5 01 00       	call   c0026183 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 7b cb 01 00       	call   c0026800 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 37 d4 01 00       	call   c00270d3 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 c6 c4 01 00       	call   c0026183 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 23 cb 01 00       	call   c0026800 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 df d3 01 00       	call   c00270d3 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 59 bd 01 00       	call   c0025b18 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 30 d4 01 00       	call   c00271f7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 19 ca 01 00       	call   c0026800 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 fc d3 01 00       	call   c00271f7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 6e c3 01 00       	call   c0026183 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 ce d3 01 00       	call   c00271f7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 b7 c9 01 00       	call   c0026800 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 20 c3 01 00       	call   c0026183 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 80 d3 01 00       	call   c00271f7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 69 c9 01 00       	call   c0026800 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 d2 c2 01 00       	call   c0026183 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 32 d3 01 00       	call   c00271f7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 1b c9 01 00       	call   c0026800 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 84 c2 01 00       	call   c0026183 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 e4 d2 01 00       	call   c00271f7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 cd c8 01 00       	call   c0026800 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 36 c2 01 00       	call   c0026183 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 38 bb 01 00       	call   c0025b18 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 0f d2 01 00       	call   c00271f7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 f8 c7 01 00       	call   c0026800 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 df d1 01 00       	call   c00271f7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 51 c1 01 00       	call   c0026183 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 b1 d1 01 00       	call   c00271f7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 9a c7 01 00       	call   c0026800 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 03 c1 01 00       	call   c0026183 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 63 d1 01 00       	call   c00271f7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 4c c7 01 00       	call   c0026800 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 b5 c0 01 00       	call   c0026183 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 15 d1 01 00       	call   c00271f7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 fe c6 01 00       	call   c0026800 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 67 c0 01 00       	call   c0026183 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 c7 d0 01 00       	call   c00271f7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 b0 c6 01 00       	call   c0026800 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 19 c0 01 00       	call   c0026183 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 ed bf 01 00       	call   c0026183 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 4a c6 01 00       	call   c0026800 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 06 cf 01 00       	call   c00270d3 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 95 bf 01 00       	call   c0026183 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 f2 c5 01 00       	call   c0026800 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 ae ce 01 00       	call   c00270d3 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 3c bf 01 00       	call   c0026183 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 99 c5 01 00       	call   c0026800 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 55 ce 01 00       	call   c00270d3 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 e3 be 01 00       	call   c0026183 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 40 c5 01 00       	call   c0026800 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 fc cd 01 00       	call   c00270d3 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 5a b7 01 00       	call   c0025b18 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 31 ce 01 00       	call   c00271f7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 1a c4 01 00       	call   c0026800 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 fd cd 01 00       	call   c00271f7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 6f bd 01 00       	call   c0026183 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 cf cd 01 00       	call   c00271f7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 b8 c3 01 00       	call   c0026800 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 21 bd 01 00       	call   c0026183 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 81 cd 01 00       	call   c00271f7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 6a c3 01 00       	call   c0026800 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 d3 bc 01 00       	call   c0026183 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 33 cd 01 00       	call   c00271f7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 1c c3 01 00       	call   c0026800 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 85 bc 01 00       	call   c0026183 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 e5 cc 01 00       	call   c00271f7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 ce c2 01 00       	call   c0026800 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 37 bc 01 00       	call   c0026183 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 97 cc 01 00       	call   c00271f7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 80 c2 01 00       	call   c0026800 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 e6 bb 01 00       	call   c0026183 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 46 cc 01 00       	call   c00271f7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 2f c2 01 00       	call   c0026800 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 98 bb 01 00       	call   c0026183 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 92 b4 01 00       	call   c0025b18 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 69 cb 01 00       	call   c00271f7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 52 c1 01 00       	call   c0026800 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 32 cb 01 00       	call   c00271f7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 a4 ba 01 00       	call   c0026183 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 04 cb 01 00       	call   c00271f7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 ed c0 01 00       	call   c0026800 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 56 ba 01 00       	call   c0026183 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 b6 ca 01 00       	call   c00271f7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 9f c0 01 00       	call   c0026800 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 08 ba 01 00       	call   c0026183 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 68 ca 01 00       	call   c00271f7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 51 c0 01 00       	call   c0026800 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 ba b9 01 00       	call   c0026183 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 1a ca 01 00       	call   c00271f7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 03 c0 01 00       	call   c0026800 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 6c b9 01 00       	call   c0026183 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 cc c9 01 00       	call   c00271f7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 b5 bf 01 00       	call   c0026800 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 1b b9 01 00       	call   c0026183 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 7b c9 01 00       	call   c00271f7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 64 bf 01 00       	call   c0026800 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 d3 b8 01 00       	call   c0026183 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 ac b8 01 00       	call   c0026183 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 0a bf 01 00       	call   c0026800 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 c6 c7 01 00       	call   c00270d3 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 55 b8 01 00       	call   c0026183 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 b3 be 01 00       	call   c0026800 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 6f c7 01 00       	call   c00270d3 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 fd b7 01 00       	call   c0026183 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 5b be 01 00       	call   c0026800 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 17 c7 01 00       	call   c00270d3 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 a5 b7 01 00       	call   c0026183 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 03 be 01 00       	call   c0026800 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 bf c6 01 00       	call   c00270d3 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 4d b7 01 00       	call   c0026183 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 ab bd 01 00       	call   c0026800 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 67 c6 01 00       	call   c00270d3 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 fb b6 01 00       	call   c0026183 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 59 bd 01 00       	call   c0026800 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 15 c6 01 00       	call   c00270d3 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 29 af 01 00       	call   c0025b18 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 00 c6 01 00       	call   c00271f7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 e9 bb 01 00       	call   c0026800 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 d0 c5 01 00       	call   c00271f7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 42 b5 01 00       	call   c0026183 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 c4 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd763c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 76 c5 01 00       	call   c00271f7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 5f bb 01 00       	call   c0026800 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 ca b4 01 00       	call   c0026183 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 17 c5 01 00       	call   c00271f7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 00 bb 01 00       	call   c0026800 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 6b b4 01 00       	call   c0026183 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 b8 c4 01 00       	call   c00271f7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 a1 ba 01 00       	call   c0026800 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 0c b4 01 00       	call   c0026183 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 59 c4 01 00       	call   c00271f7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 42 ba 01 00       	call   c0026800 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 ad b3 01 00       	call   c0026183 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 fa c3 01 00       	call   c00271f7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 e3 b9 01 00       	call   c0026800 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 4e b3 01 00       	call   c0026183 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 9b c3 01 00       	call   c00271f7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 84 b9 01 00       	call   c0026800 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 ef b2 01 00       	call   c0026183 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 3c c3 01 00       	call   c00271f7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 25 b9 01 00       	call   c0026800 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 90 b2 01 00       	call   c0026183 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 dd c2 01 00       	call   c00271f7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 c6 b8 01 00       	call   c0026800 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 31 b2 01 00       	call   c0026183 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 3b ab 01 00       	call   c0025b18 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 12 c2 01 00       	call   c00271f7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 fb b7 01 00       	call   c0026800 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 e2 c1 01 00       	call   c00271f7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 54 b1 01 00       	call   c0026183 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 e0 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7620]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 87 c1 01 00       	call   c00271f7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 70 b7 01 00       	call   c0026800 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 db b0 01 00       	call   c0026183 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 27 c1 01 00       	call   c00271f7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 10 b7 01 00       	call   c0026800 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 7b b0 01 00       	call   c0026183 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 c7 c0 01 00       	call   c00271f7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 b0 b6 01 00       	call   c0026800 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 1b b0 01 00       	call   c0026183 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 67 c0 01 00       	call   c00271f7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 50 b6 01 00       	call   c0026800 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 bb af 01 00       	call   c0026183 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 07 c0 01 00       	call   c00271f7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 f0 b5 01 00       	call   c0026800 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 5b af 01 00       	call   c0026183 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 a7 bf 01 00       	call   c00271f7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 90 b5 01 00       	call   c0026800 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 fb ae 01 00       	call   c0026183 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 47 bf 01 00       	call   c00271f7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 30 b5 01 00       	call   c0026800 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 9b ae 01 00       	call   c0026183 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 e7 be 01 00       	call   c00271f7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 d0 b4 01 00       	call   c0026800 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 3b ae 01 00       	call   c0026183 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 fc 89 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7604]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 e0 ad 01 00       	call   c0026183 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 3d b4 01 00       	call   c0026800 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 f9 bc 01 00       	call   c00270d3 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 83 ad 01 00       	call   c0026183 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 e0 b3 01 00       	call   c0026800 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 9c bc 01 00       	call   c00270d3 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 26 ad 01 00       	call   c0026183 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 83 b3 01 00       	call   c0026800 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 3f bc 01 00       	call   c00270d3 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 c9 ac 01 00       	call   c0026183 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 26 b3 01 00       	call   c0026800 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 e2 bb 01 00       	call   c00270d3 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 6c ac 01 00       	call   c0026183 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 c9 b2 01 00       	call   c0026800 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 85 bb 01 00       	call   c00270d3 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 0f ac 01 00       	call   c0026183 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 6c b2 01 00       	call   c0026800 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 28 bb 01 00       	call   c00270d3 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 b2 ab 01 00       	call   c0026183 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 0f b2 01 00       	call   c0026800 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 cb ba 01 00       	call   c00270d3 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 55 ab 01 00       	call   c0026183 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 b2 b1 01 00       	call   c0026800 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 6e ba 01 00       	call   c00270d3 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 6a b1 01 00       	call   c0026800 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 da bb 01 00       	jmp    c0027280 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 4c b8 01 00       	call   c00270cf <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 0a b8 01 00       	call   c00270b1 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 a1 b5 01 00       	call   c0026e63 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 a2 a8 01 00       	call   c0026183 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 71 b5 01 00       	call   c0026e63 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 d8 b1 01 00       	call   c0026ae4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 77 b7 01 00       	call   c00270b1 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 7a b7 01 00       	call   c00270cf <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 4d b7 01 00       	call   c00270cf <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 46 b1 01 00       	call   c0026ae4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 c8 b8 01 00       	call   c0027280 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 a3 b8 01 00       	call   c0027280 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 7d b4 01 00       	call   c0026e63 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 d4 ad 01 00       	call   c00267d4 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 b3 b6 01 00       	call   c00270cf <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 4c a7 01 00       	call   c0026183 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 70 ad 01 00       	call   c00267d4 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 0a b8 01 00       	call   c0027280 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 4a b0 01 00       	call   c0026ae4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 c7 a6 01 00       	call   c0026183 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 f3 b2 01 00       	call   c0026e63 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 f3 a5 01 00       	call   c0026183 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 d3 a5 01 00       	call   c0026183 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 a3 b2 01 00       	call   c0026e63 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 f3 b4 01 00       	call   c00270cd <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 d2 ab 01 00       	call   c00267d4 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 4c b6 01 00       	call   c0027260 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 7b b4 01 00       	call   c00270b1 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 79 ab 01 00       	call   c00267d4 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 f7 b1 01 00       	call   c0026e63 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 7a ab 01 00       	call   c0026800 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 cc b1 01 00       	call   c0026e63 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 33 ae 01 00       	call   c0026ae4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 b2 a4 01 00       	call   c0026183 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 7c b1 01 00       	call   c0026e63 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 c8 b3 01 00       	call   c00270cf <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 bd aa 01 00       	call   c0026800 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 8f aa 01 00       	call   c0026800 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 c8 b0 01 00       	call   c0026e63 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 2c ad 01 00       	call   c0026ae4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 f4 ac 01 00       	call   c0026ae4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 73 a3 01 00       	call   c0026183 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 58 b4 01 00       	call   c0027280 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 32 b0 01 00       	call   c0026e63 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 89 a9 01 00       	call   c00267d4 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 68 b2 01 00       	call   c00270cf <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 00 a3 01 00       	call   c0026183 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 24 a9 01 00       	call   c00267d4 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 be b3 01 00       	call   c0027280 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 87 b1 01 00       	call   c00270cf <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 45 b1 01 00       	call   c00270b1 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 dc ae 01 00       	call   c0026e63 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 dd a1 01 00       	call   c0026183 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 ac ae 01 00       	call   c0026e63 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 13 ab 01 00       	call   c0026ae4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 b2 b0 01 00       	call   c00270b1 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 b5 b0 01 00       	call   c00270cf <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 88 b0 01 00       	call   c00270cf <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 81 aa 01 00       	call   c0026ae4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 03 b2 01 00       	call   c0027280 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 de b1 01 00       	call   c0027280 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 b8 ad 01 00       	call   c0026e63 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 0f a7 01 00       	call   c00267d4 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 ee af 01 00       	call   c00270cf <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 87 a0 01 00       	call   c0026183 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 ab a6 01 00       	call   c00267d4 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 45 b1 01 00       	call   c0027280 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 85 a9 01 00       	call   c0026ae4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 02 a0 01 00       	call   c0026183 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 2d ac 01 00       	call   c0026e63 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 2d 9f 01 00       	call   c0026183 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 0d 9f 01 00       	call   c0026183 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 dd ab 01 00       	call   c0026e63 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 2d ae 01 00       	call   c00270cd <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 0b a5 01 00       	call   c00267d4 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 85 af 01 00       	call   c0027260 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 b4 ad 01 00       	call   c00270b1 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 b1 a4 01 00       	call   c00267d4 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 2f ab 01 00       	call   c0026e63 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 b2 a4 01 00       	call   c0026800 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 04 ab 01 00       	call   c0026e63 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 6b a7 01 00       	call   c0026ae4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 ea 9d 01 00       	call   c0026183 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 b4 aa 01 00       	call   c0026e63 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 00 ad 01 00       	call   c00270cf <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 f5 a3 01 00       	call   c0026800 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 c7 a3 01 00       	call   c0026800 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 fe a9 01 00       	call   c0026e63 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 62 a6 01 00       	call   c0026ae4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 2f a6 01 00       	call   c0026ae4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 ae 9c 01 00       	call   c0026183 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 93 ad 01 00       	call   c0027280 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 6d a9 01 00       	call   c0026e63 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 c4 a2 01 00       	call   c00267d4 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 a3 ab 01 00       	call   c00270cf <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 3b 9c 01 00       	call   c0026183 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 5f a2 01 00       	call   c00267d4 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 f9 ac 01 00       	call   c0027280 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 c2 aa 01 00       	call   c00270cf <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 80 aa 01 00       	call   c00270b1 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 17 a8 01 00       	call   c0026e63 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 18 9b 01 00       	call   c0026183 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 e7 a7 01 00       	call   c0026e63 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 4e a4 01 00       	call   c0026ae4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 ed a9 01 00       	call   c00270b1 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 f0 a9 01 00       	call   c00270cf <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 c3 a9 01 00       	call   c00270cf <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 bc a3 01 00       	call   c0026ae4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 3e ab 01 00       	call   c0027280 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 19 ab 01 00       	call   c0027280 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 f3 a6 01 00       	call   c0026e63 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 4a a0 01 00       	call   c00267d4 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 29 a9 01 00       	call   c00270cf <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 c2 99 01 00       	call   c0026183 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 e6 9f 01 00       	call   c00267d4 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 80 aa 01 00       	call   c0027280 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 c0 a2 01 00       	call   c0026ae4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 3d 99 01 00       	call   c0026183 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 68 a5 01 00       	call   c0026e63 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 68 98 01 00       	call   c0026183 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 48 98 01 00       	call   c0026183 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 18 a5 01 00       	call   c0026e63 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 68 a7 01 00       	call   c00270cd <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 46 9e 01 00       	call   c00267d4 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 c0 a8 01 00       	call   c0027260 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 ef a6 01 00       	call   c00270b1 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 ec 9d 01 00       	call   c00267d4 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 6a a4 01 00       	call   c0026e63 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 ed 9d 01 00       	call   c0026800 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 3f a4 01 00       	call   c0026e63 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 a6 a0 01 00       	call   c0026ae4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 25 97 01 00       	call   c0026183 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 ef a3 01 00       	call   c0026e63 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 3b a6 01 00       	call   c00270cf <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 30 9d 01 00       	call   c0026800 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 02 9d 01 00       	call   c0026800 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 39 a3 01 00       	call   c0026e63 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 9d 9f 01 00       	call   c0026ae4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 6a 9f 01 00       	call   c0026ae4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 e9 95 01 00       	call   c0026183 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 ce a6 01 00       	call   c0027280 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 a8 a2 01 00       	call   c0026e63 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 ff 9b 01 00       	call   c00267d4 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 de a4 01 00       	call   c00270cf <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 76 95 01 00       	call   c0026183 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 9a 9b 01 00       	call   c00267d4 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 34 a6 01 00       	call   c0027280 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 fd a3 01 00       	call   c00270cf <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 bb a3 01 00       	call   c00270b1 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 52 a1 01 00       	call   c0026e63 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 53 94 01 00       	call   c0026183 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 22 a1 01 00       	call   c0026e63 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 89 9d 01 00       	call   c0026ae4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 28 a3 01 00       	call   c00270b1 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 2b a3 01 00       	call   c00270cf <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 fe a2 01 00       	call   c00270cf <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 f7 9c 01 00       	call   c0026ae4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 79 a4 01 00       	call   c0027280 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 54 a4 01 00       	call   c0027280 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 2e a0 01 00       	call   c0026e63 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 85 99 01 00       	call   c00267d4 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 64 a2 01 00       	call   c00270cf <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 fd 92 01 00       	call   c0026183 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 21 99 01 00       	call   c00267d4 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 bb a3 01 00       	call   c0027280 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 fb 9b 01 00       	call   c0026ae4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 78 92 01 00       	call   c0026183 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 a3 9e 01 00       	call   c0026e63 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 a3 91 01 00       	call   c0026183 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 83 91 01 00       	call   c0026183 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 53 9e 01 00       	call   c0026e63 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 a3 a0 01 00       	call   c00270cd <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 81 97 01 00       	call   c00267d4 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 fb a1 01 00       	call   c0027260 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 2a a0 01 00       	call   c00270b1 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 27 97 01 00       	call   c00267d4 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 a5 9d 01 00       	call   c0026e63 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 28 97 01 00       	call   c0026800 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 7a 9d 01 00       	call   c0026e63 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 e1 99 01 00       	call   c0026ae4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 60 90 01 00       	call   c0026183 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 2a 9d 01 00       	call   c0026e63 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 76 9f 01 00       	call   c00270cf <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 6b 96 01 00       	call   c0026800 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 3d 96 01 00       	call   c0026800 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 74 9c 01 00       	call   c0026e63 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 d8 98 01 00       	call   c0026ae4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 a5 98 01 00       	call   c0026ae4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 24 8f 01 00       	call   c0026183 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 09 a0 01 00       	call   c0027280 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 e3 9b 01 00       	call   c0026e63 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 3a 95 01 00       	call   c00267d4 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 19 9e 01 00       	call   c00270cf <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 b1 8e 01 00       	call   c0026183 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 d5 94 01 00       	call   c00267d4 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 6f 9f 01 00       	call   c0027280 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 35 9d 01 00       	call   c00270cf <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 f3 9c 01 00       	call   c00270b1 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 8a 9a 01 00       	call   c0026e63 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 8b 8d 01 00       	call   c0026183 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 5a 9a 01 00       	call   c0026e63 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 c1 96 01 00       	call   c0026ae4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 60 9c 01 00       	call   c00270b1 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 63 9c 01 00       	call   c00270cf <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 36 9c 01 00       	call   c00270cf <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 2f 96 01 00       	call   c0026ae4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 b1 9d 01 00       	call   c0027280 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 88 9d 01 00       	call   c0027280 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 62 99 01 00       	call   c0026e63 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 b9 92 01 00       	call   c00267d4 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 98 9b 01 00       	call   c00270cf <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 31 8c 01 00       	call   c0026183 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 59 92 01 00       	call   c00267d4 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 f3 9c 01 00       	call   c0027280 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 34 95 01 00       	call   c0026ae4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 b1 8b 01 00       	call   c0026183 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 dd 97 01 00       	call   c0026e63 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 dd 8a 01 00       	call   c0026183 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 bd 8a 01 00       	call   c0026183 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 8d 97 01 00       	call   c0026e63 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 c1 99 01 00       	call   c00270b1 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 b8 90 01 00       	call   c00267d4 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 32 9b 01 00       	call   c0027260 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 61 99 01 00       	call   c00270b1 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 5b 90 01 00       	call   c00267d4 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 d9 96 01 00       	call   c0026e63 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 5c 90 01 00       	call   c0026800 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 ae 96 01 00       	call   c0026e63 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 15 93 01 00       	call   c0026ae4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 94 89 01 00       	call   c0026183 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 5e 96 01 00       	call   c0026e63 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 aa 98 01 00       	call   c00270cf <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 9f 8f 01 00       	call   c0026800 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 71 8f 01 00       	call   c0026800 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 b5 95 01 00       	call   c0026e63 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 1c 92 01 00       	call   c0026ae4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 05 8f 01 00       	call   c0026800 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 c1 97 01 00       	call   c00270d3 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 b4 91 01 00       	call   c0026ae4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 33 88 01 00       	call   c0026183 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 18 99 01 00       	call   c0027280 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 f2 94 01 00       	call   c0026e63 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 49 8e 01 00       	call   c00267d4 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 28 97 01 00       	call   c00270cf <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 c0 87 01 00       	call   c0026183 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 e8 8d 01 00       	call   c00267d4 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 82 98 01 00       	call   c0027280 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 24 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd75dc]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 18 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd75e8]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 99 1b 00 00       	call   c000f5fa <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 3d 95 01 00       	call   c00270cf <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 fb 94 01 00       	call   c00270b1 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 e7 94 01 00       	call   c00270cf <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 59 92 01 00       	call   c0026e63 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 d7 8b 01 00       	call   c0026800 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 29 92 01 00       	call   c0026e63 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 2f 85 01 00       	call   c0026183 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 fe 91 01 00       	call   c0026e63 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 4e 94 01 00       	call   c00270cd <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 2f 8b 01 00       	call   c00267d4 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 a9 95 01 00       	call   c0027260 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 d8 93 01 00       	call   c00270b1 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 d7 8a 01 00       	call   c00267d4 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 55 91 01 00       	call   c0026e63 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 d8 8a 01 00       	call   c0026800 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 2a 91 01 00       	call   c0026e63 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 91 8d 01 00       	call   c0026ae4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 10 84 01 00       	call   c0026183 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 38 8d 01 00       	call   c0026ae4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 be 83 01 00       	call   c0026183 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 a4 94 01 00       	call   c0027280 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 7e 90 01 00       	call   c0026e63 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 d5 89 01 00       	call   c00267d4 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 b4 92 01 00       	call   c00270cf <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 4d 83 01 00       	call   c0026183 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 79 89 01 00       	call   c00267d4 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 13 94 01 00       	call   c0027280 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 c8 8f 01 00       	call   c0026e63 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 45 89 01 00       	call   c0026800 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 96 8f 01 00       	call   c0026e63 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 9c 82 01 00       	call   c0026183 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 6c 8f 01 00       	call   c0026e63 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 c0 91 01 00       	call   c00270d1 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 99 88 01 00       	call   c00267d4 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 13 93 01 00       	call   c0027260 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 42 91 01 00       	call   c00270b1 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 40 88 01 00       	call   c00267d4 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 be 8e 01 00       	call   c0026e63 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 41 88 01 00       	call   c0026800 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 93 8e 01 00       	call   c0026e63 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 fa 8a 01 00       	call   c0026ae4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 79 81 01 00       	call   c0026183 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 95 8a 01 00       	call   c0026ae4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 14 81 01 00       	call   c0026183 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 fa 91 01 00       	call   c0027280 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 d4 8d 01 00       	call   c0026e63 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 2b 87 01 00       	call   c00267d4 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 0a 90 01 00       	call   c00270cf <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 a3 80 01 00       	call   c0026183 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 cf 86 01 00       	call   c00267d4 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 40 8d 01 00       	call   c0026e63 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 46 80 01 00       	call   c0026183 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 3e 8b 02 c0       	mov    eax,0xc0028b3e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 4f 8b 02 c0       	mov    eax,0xc0028b4f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 db 13 00 00       	call   c000f5fa <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 dd 13 00 00       	call   c000f61a <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 4c 13 00 00       	call   c000f5ea <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    

c000e2a5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	83 ec 08             	sub    esp,0x8
c000e2ab:	68 86 8b 02 c0       	push   0xc0028b86
c000e2b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b4:	e8 c2 24 ff ff       	call   c000077b <strcmp>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	85 c0                	test   eax,eax
c000e2be:	0f 94 c0             	sete   al
c000e2c1:	84 c0                	test   al,al
c000e2c3:	74 0a                	je     c000e2cf <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2c5:	b8 c8 cc 02 c0       	mov    eax,0xc002ccc8
c000e2ca:	e9 e3 00 00 00       	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e2cf:	83 ec 08             	sub    esp,0x8
c000e2d2:	68 8f 8b 02 c0       	push   0xc0028b8f
c000e2d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2db:	e8 9b 24 ff ff       	call   c000077b <strcmp>
c000e2e0:	83 c4 10             	add    esp,0x10
c000e2e3:	85 c0                	test   eax,eax
c000e2e5:	0f 94 c0             	sete   al
c000e2e8:	84 c0                	test   al,al
c000e2ea:	74 0a                	je     c000e2f6 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e2ec:	b8 fc 55 02 c0       	mov    eax,0xc00255fc
c000e2f1:	e9 bc 00 00 00       	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e2f6:	83 ec 08             	sub    esp,0x8
c000e2f9:	68 99 8b 02 c0       	push   0xc0028b99
c000e2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e302:	e8 74 24 ff ff       	call   c000077b <strcmp>
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	85 c0                	test   eax,eax
c000e30c:	0f 94 c0             	sete   al
c000e30f:	84 c0                	test   al,al
c000e311:	74 0a                	je     c000e31d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e313:	b8 30 53 02 c0       	mov    eax,0xc0025330
c000e318:	e9 95 00 00 00       	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e31d:	83 ec 08             	sub    esp,0x8
c000e320:	68 a2 8b 02 c0       	push   0xc0028ba2
c000e325:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e329:	e8 4d 24 ff ff       	call   c000077b <strcmp>
c000e32e:	83 c4 10             	add    esp,0x10
c000e331:	85 c0                	test   eax,eax
c000e333:	0f 94 c0             	sete   al
c000e336:	84 c0                	test   al,al
c000e338:	74 07                	je     c000e341 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e33a:	b8 fc 56 02 c0       	mov    eax,0xc00256fc
c000e33f:	eb 71                	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e341:	83 ec 08             	sub    esp,0x8
c000e344:	68 ac 8b 02 c0       	push   0xc0028bac
c000e349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34d:	e8 29 24 ff ff       	call   c000077b <strcmp>
c000e352:	83 c4 10             	add    esp,0x10
c000e355:	85 c0                	test   eax,eax
c000e357:	0f 94 c0             	sete   al
c000e35a:	84 c0                	test   al,al
c000e35c:	74 07                	je     c000e365 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e35e:	b8 7c 54 02 c0       	mov    eax,0xc002547c
c000e363:	eb 4d                	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e365:	83 ec 08             	sub    esp,0x8
c000e368:	68 b5 8b 02 c0       	push   0xc0028bb5
c000e36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e371:	e8 05 24 ff ff       	call   c000077b <strcmp>
c000e376:	83 c4 10             	add    esp,0x10
c000e379:	85 c0                	test   eax,eax
c000e37b:	0f 94 c0             	sete   al
c000e37e:	84 c0                	test   al,al
c000e380:	74 07                	je     c000e389 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e382:	b8 cc cc 02 c0       	mov    eax,0xc002cccc
c000e387:	eb 29                	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e389:	83 ec 08             	sub    esp,0x8
c000e38c:	68 c2 8b 02 c0       	push   0xc0028bc2
c000e391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e395:	e8 e1 23 ff ff       	call   c000077b <strcmp>
c000e39a:	83 c4 10             	add    esp,0x10
c000e39d:	85 c0                	test   eax,eax
c000e39f:	0f 94 c0             	sete   al
c000e3a2:	84 c0                	test   al,al
c000e3a4:	74 07                	je     c000e3ad <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3a6:	b8 cd cc 02 c0       	mov    eax,0xc002cccd
c000e3ab:	eb 05                	jmp    c000e3b2 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3ad:	b8 00 00 00 00       	mov    eax,0x0
c000e3b2:	83 c4 0c             	add    esp,0xc
c000e3b5:	c3                   	ret    

c000e3b6 <Computer::close(int, int, void*)>:
c000e3b6:	57                   	push   edi
c000e3b7:	56                   	push   esi
c000e3b8:	53                   	push   ebx
c000e3b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3c1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3c5:	83 ec 0c             	sub    esp,0xc
c000e3c8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e3ce:	e8 59 5a 00 00       	call   c0013e2c <Device::closeAll()>
c000e3d3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e3d9:	83 c4 10             	add    esp,0x10
c000e3dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3de:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e3e2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e3ea:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e3ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3f2:	5b                   	pop    ebx
c000e3f3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e3f6:	5e                   	pop    esi
c000e3f7:	5f                   	pop    edi
c000e3f8:	ff e0                	jmp    eax

c000e3fa <Krnl::firstTask()>:
c000e3fa:	53                   	push   ebx
c000e3fb:	83 ec 14             	sub    esp,0x14
c000e3fe:	fb                   	sti    
c000e3ff:	68 3f 07 00 00       	push   0x73f
c000e404:	e8 e1 11 00 00       	call   c000f5ea <malloc>
c000e409:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e410:	89 c3                	mov    ebx,eax
c000e412:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c000e418:	68 cf 8b 02 c0       	push   0xc0028bcf
c000e41d:	6a 01                	push   0x1
c000e41f:	50                   	push   eax
c000e420:	e8 9f e9 00 00       	call   c001cdc4 <Process::Process(bool, char const*, Process*, char**)>
c000e425:	83 c4 20             	add    esp,0x20
c000e428:	68 ff 00 00 00       	push   0xff
c000e42d:	6a 00                	push   0x0
c000e42f:	68 7f ef 00 c0       	push   0xc000ef7f
c000e434:	53                   	push   ebx
c000e435:	e8 88 ec 00 00       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c000e43a:	6a 7a                	push   0x7a
c000e43c:	6a 00                	push   0x0
c000e43e:	68 20 d9 01 c0       	push   0xc001d920
c000e443:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c000e449:	e8 74 ec 00 00       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c000e44e:	83 c4 20             	add    esp,0x20
c000e451:	a3 c8 e1 02 c0       	mov    ds:0xc002e1c8,eax
c000e456:	c6 05 cd cc 02 c0 01 	mov    BYTE PTR ds:0xc002cccd,0x1
c000e45d:	e8 3f f8 00 00       	call   c001dca1 <Vm::initialise8086()>
c000e462:	e8 ad 47 00 00       	call   c0012c14 <Fs::initVFS()>
c000e467:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c000e46c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e472:	8b 10                	mov    edx,DWORD PTR [eax]
c000e474:	6a 00                	push   0x0
c000e476:	6a 00                	push   0x0
c000e478:	6a 00                	push   0x0
c000e47a:	50                   	push   eax
c000e47b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e47e:	e8 3b d3 00 00       	call   c001b7be <Sys::loadSyscalls()>
c000e483:	e8 20 b4 00 00       	call   c00198a8 <Krnl::loadSystemEnv()>
c000e488:	83 c4 0c             	add    esp,0xc
c000e48b:	6a 3a                	push   0x3a
c000e48d:	68 dc 8b 02 c0       	push   0xc0028bdc
c000e492:	68 e5 8b 02 c0       	push   0xc0028be5
c000e497:	e8 c8 c0 00 00       	call   c001a564 <Reg::readIntWithDefault(char*, char*, int)>
c000e49c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e49f:	e8 58 52 00 00       	call   c00136fc <User::loadClockSettings(int)>
c000e4a4:	58                   	pop    eax
c000e4a5:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c000e4aa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4b0:	e8 4b 59 00 00       	call   c0013e00 <Device::loadDriversForAll()>
c000e4b5:	5a                   	pop    edx
c000e4b6:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c000e4bc:	59                   	pop    ecx
c000e4bd:	6a 01                	push   0x1
c000e4bf:	68 ed 8b 02 c0       	push   0xc0028bed
c000e4c4:	e8 54 e4 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c000e4c9:	5a                   	pop    edx
c000e4ca:	59                   	pop    ecx
c000e4cb:	53                   	push   ebx
c000e4cc:	50                   	push   eax
c000e4cd:	e8 5a e6 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c000e4d2:	83 c4 10             	add    esp,0x10
c000e4d5:	83 ec 0c             	sub    esp,0xc
c000e4d8:	6a 02                	push   0x2
c000e4da:	e8 47 ef 00 00       	call   c001d426 <blockTask(TaskState)>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	eb f1                	jmp    c000e4d5 <Krnl::firstTask()+0xdb>

c000e4e4 <Computer::Computer()>:
c000e4e4:	83 ec 0c             	sub    esp,0xc
c000e4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4eb:	83 ec 08             	sub    esp,0x8
c000e4ee:	68 09 8c 02 c0       	push   0xc0028c09
c000e4f3:	50                   	push   eax
c000e4f4:	e8 ad 59 00 00       	call   c0013ea6 <Device::Device(char const*)>
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	ba a8 8d 02 c0       	mov    edx,0xc0028da8
c000e501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e505:	89 10                	mov    DWORD PTR [eax],edx
c000e507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e519:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e527:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e52d:	83 ca 04             	or     edx,0x4
c000e530:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e540:	0f b6 d0             	movzx  edx,al
c000e543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e547:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e552:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e558:	0f b6 d0             	movzx  edx,al
c000e55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e568:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e56e:	8d 50 01             	lea    edx,[eax+0x1]
c000e571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e575:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e57b:	0f b6 d0             	movzx  edx,al
c000e57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e582:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e586:	83 e1 3f             	and    ecx,0x3f
c000e589:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e591:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e597:	0f b6 d0             	movzx  edx,al
c000e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5af:	0f b6 d0             	movzx  edx,al
c000e5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5c5:	8d 50 01             	lea    edx,[eax+0x1]
c000e5c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5d2:	0f b6 d0             	movzx  edx,al
c000e5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5dd:	83 e1 3f             	and    ecx,0x3f
c000e5e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ee:	0f b6 d0             	movzx  edx,al
c000e5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f5:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e600:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e606:	0f b6 d0             	movzx  edx,al
c000e609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e616:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e61c:	8d 50 01             	lea    edx,[eax+0x1]
c000e61f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e623:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e629:	0f b6 d0             	movzx  edx,al
c000e62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e630:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e634:	83 e1 3f             	and    ecx,0x3f
c000e637:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e63b:	90                   	nop
c000e63c:	83 c4 0c             	add    esp,0xc
c000e63f:	c3                   	ret    

c000e640 <Computer::setBootMessage(char const*)>:
c000e640:	c3                   	ret    
c000e641:	90                   	nop

c000e642 <Computer::detectFeatures()>:
c000e642:	55                   	push   ebp
c000e643:	57                   	push   edi
c000e644:	56                   	push   esi
c000e645:	53                   	push   ebx
c000e646:	83 ec 1c             	sub    esp,0x1c
c000e649:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e64d:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e657:	e8 3d 1c ff ff       	call   c0000299 <detectCPUID>
c000e65c:	85 c0                	test   eax,eax
c000e65e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e664:	0f 95 c2             	setne  dl
c000e667:	83 e0 fd             	and    eax,0xfffffffd
c000e66a:	d1 e2                	shl    edx,1
c000e66c:	09 d0                	or     eax,edx
c000e66e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e674:	a8 02                	test   al,0x2
c000e676:	75 46                	jne    c000e6be <Computer::detectFeatures()+0x7c>
c000e678:	f6 05 e1 cc 02 c0 04 	test   BYTE PTR ds:0xc002cce1,0x4
c000e67f:	74 07                	je     c000e688 <Computer::detectFeatures()+0x46>
c000e681:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e688:	e8 39 6c 01 00       	call   c00252c6 <x87Detect>
c000e68d:	83 e0 01             	and    eax,0x1
c000e690:	c1 e0 04             	shl    eax,0x4
c000e693:	88 c2                	mov    dl,al
c000e695:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69b:	83 e0 ef             	and    eax,0xffffffef
c000e69e:	09 d0                	or     eax,edx
c000e6a0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6a6:	a8 10                	test   al,0x10
c000e6a8:	0f 85 2a 01 00 00    	jne    c000e7d8 <Computer::detectFeatures()+0x196>
c000e6ae:	84 c0                	test   al,al
c000e6b0:	0f 88 45 01 00 00    	js     c000e7fb <Computer::detectFeatures()+0x1b9>
c000e6b6:	83 c4 1c             	add    esp,0x1c
c000e6b9:	5b                   	pop    ebx
c000e6ba:	5e                   	pop    esi
c000e6bb:	5f                   	pop    edi
c000e6bc:	5d                   	pop    ebp
c000e6bd:	c3                   	ret    
c000e6be:	83 ec 0c             	sub    esp,0xc
c000e6c1:	6a 20                	push   0x20
c000e6c3:	e8 a2 9b 00 00       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c000e6c8:	83 e0 01             	and    eax,0x1
c000e6cb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e6d2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d8:	83 e0 f7             	and    eax,0xfffffff7
c000e6db:	09 d0                	or     eax,edx
c000e6dd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e6ea:	e8 7b 9b 00 00       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c000e6ef:	83 e0 01             	and    eax,0x1
c000e6f2:	88 c2                	mov    dl,al
c000e6f4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6fa:	83 e0 fe             	and    eax,0xfffffffe
c000e6fd:	09 d0                	or     eax,edx
c000e6ff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e705:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e70c:	e8 59 9b 00 00       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c000e711:	c1 e0 07             	shl    eax,0x7
c000e714:	88 c2                	mov    dl,al
c000e716:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e71c:	83 e0 7f             	and    eax,0x7f
c000e71f:	09 d0                	or     eax,edx
c000e721:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e727:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e72e:	e8 37 9b 00 00       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	83 e0 01             	and    eax,0x1
c000e739:	c1 e0 05             	shl    eax,0x5
c000e73c:	88 c2                	mov    dl,al
c000e73e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e744:	83 e0 df             	and    eax,0xffffffdf
c000e747:	09 d0                	or     eax,edx
c000e749:	f7 05 e0 cc 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002cce0,0x401
c000e753:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e759:	0f 84 c2 00 00 00    	je     c000e821 <Computer::detectFeatures()+0x1df>
c000e75f:	83 e0 fe             	and    eax,0xfffffffe
c000e762:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e768:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e76e:	88 c2                	mov    dl,al
c000e770:	83 e2 09             	and    edx,0x9
c000e773:	fe ca                	dec    dl
c000e775:	75 09                	jne    c000e780 <Computer::detectFeatures()+0x13e>
c000e777:	83 e0 fe             	and    eax,0xfffffffe
c000e77a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e787:	50                   	push   eax
c000e788:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e78c:	55                   	push   ebp
c000e78d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e791:	57                   	push   edi
c000e792:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e796:	56                   	push   esi
c000e797:	68 00 00 00 80       	push   0x80000000
c000e79c:	e8 45 9a 00 00       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7a1:	83 c4 20             	add    esp,0x20
c000e7a4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7af:	0f 86 c3 fe ff ff    	jbe    c000e678 <Computer::detectFeatures()+0x36>
c000e7b5:	83 ec 0c             	sub    esp,0xc
c000e7b8:	50                   	push   eax
c000e7b9:	55                   	push   ebp
c000e7ba:	57                   	push   edi
c000e7bb:	56                   	push   esi
c000e7bc:	68 01 00 00 80       	push   0x80000001
c000e7c1:	e8 20 9a 00 00       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7c6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e7d0:	83 c4 20             	add    esp,0x20
c000e7d3:	e9 a0 fe ff ff       	jmp    c000e678 <Computer::detectFeatures()+0x36>
c000e7d8:	e8 a3 6a 01 00       	call   c0025280 <absolutelyNoChanceInHell>
c000e7dd:	88 c2                	mov    dl,al
c000e7df:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7e5:	c1 e2 07             	shl    edx,0x7
c000e7e8:	83 e0 7f             	and    eax,0x7f
c000e7eb:	09 d0                	or     eax,edx
c000e7ed:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7f3:	84 c0                	test   al,al
c000e7f5:	0f 89 bb fe ff ff    	jns    c000e6b6 <Computer::detectFeatures()+0x74>
c000e7fb:	e8 60 6a 01 00       	call   c0025260 <avxDetect>
c000e800:	83 e0 01             	and    eax,0x1
c000e803:	c1 e0 05             	shl    eax,0x5
c000e806:	88 c2                	mov    dl,al
c000e808:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e80e:	83 e0 df             	and    eax,0xffffffdf
c000e811:	09 d0                	or     eax,edx
c000e813:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e819:	83 c4 1c             	add    esp,0x1c
c000e81c:	5b                   	pop    ebx
c000e81d:	5e                   	pop    esi
c000e81e:	5f                   	pop    edi
c000e81f:	5d                   	pop    ebp
c000e820:	c3                   	ret    
c000e821:	83 ec 0c             	sub    esp,0xc
c000e824:	68 00 02 00 00       	push   0x200
c000e829:	e8 3c 9a 00 00       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	83 e0 01             	and    eax,0x1
c000e834:	88 c2                	mov    dl,al
c000e836:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e83c:	83 e0 fe             	and    eax,0xfffffffe
c000e83f:	09 d0                	or     eax,edx
c000e841:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e847:	e9 1c ff ff ff       	jmp    c000e768 <Computer::detectFeatures()+0x126>

c000e84c <Computer::displayFeatures()>:
c000e84c:	53                   	push   ebx
c000e84d:	83 ec 14             	sub    esp,0x14
c000e850:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e854:	68 19 8c 02 c0       	push   0xc0028c19
c000e859:	e8 31 40 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e85e:	83 c4 10             	add    esp,0x10
c000e861:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e868:	0f 85 73 02 00 00    	jne    c000eae1 <Computer::displayFeatures()+0x295>
c000e86e:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e873:	83 ec 08             	sub    esp,0x8
c000e876:	50                   	push   eax
c000e877:	68 2c 8c 02 c0       	push   0xc0028c2c
c000e87c:	e8 0e 40 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e88b:	0f 85 8c 02 00 00    	jne    c000eb1d <Computer::displayFeatures()+0x2d1>
c000e891:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e896:	83 ec 08             	sub    esp,0x8
c000e899:	50                   	push   eax
c000e89a:	68 3d 8c 02 c0       	push   0xc0028c3d
c000e89f:	e8 eb 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e8a4:	83 c4 10             	add    esp,0x10
c000e8a7:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8ae:	0f 85 5f 02 00 00    	jne    c000eb13 <Computer::displayFeatures()+0x2c7>
c000e8b4:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e8b9:	83 ec 08             	sub    esp,0x8
c000e8bc:	50                   	push   eax
c000e8bd:	68 4e 8c 02 c0       	push   0xc0028c4e
c000e8c2:	e8 c8 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e8d1:	0f 85 32 02 00 00    	jne    c000eb09 <Computer::displayFeatures()+0x2bd>
c000e8d7:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e8dc:	83 ec 08             	sub    esp,0x8
c000e8df:	50                   	push   eax
c000e8e0:	68 5f 8c 02 c0       	push   0xc0028c5f
c000e8e5:	e8 a5 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e8f4:	0f 85 05 02 00 00    	jne    c000eaff <Computer::displayFeatures()+0x2b3>
c000e8fa:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e8ff:	83 ec 08             	sub    esp,0x8
c000e902:	50                   	push   eax
c000e903:	68 70 8c 02 c0       	push   0xc0028c70
c000e908:	e8 82 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e90d:	83 c4 10             	add    esp,0x10
c000e910:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e917:	0f 85 d8 01 00 00    	jne    c000eaf5 <Computer::displayFeatures()+0x2a9>
c000e91d:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e922:	83 ec 08             	sub    esp,0x8
c000e925:	50                   	push   eax
c000e926:	68 81 8c 02 c0       	push   0xc0028c81
c000e92b:	e8 5f 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e930:	83 c4 10             	add    esp,0x10
c000e933:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e93a:	0f 85 ab 01 00 00    	jne    c000eaeb <Computer::displayFeatures()+0x29f>
c000e940:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e945:	83 ec 08             	sub    esp,0x8
c000e948:	50                   	push   eax
c000e949:	68 92 8c 02 c0       	push   0xc0028c92
c000e94e:	e8 3c 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e953:	83 c4 10             	add    esp,0x10
c000e956:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e95d:	0f 88 1b 02 00 00    	js     c000eb7e <Computer::displayFeatures()+0x332>
c000e963:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e968:	83 ec 08             	sub    esp,0x8
c000e96b:	50                   	push   eax
c000e96c:	68 a3 8c 02 c0       	push   0xc0028ca3
c000e971:	e8 19 3f 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e976:	83 c4 10             	add    esp,0x10
c000e979:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e980:	0f 85 a1 01 00 00    	jne    c000eb27 <Computer::displayFeatures()+0x2db>
c000e986:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e98b:	83 ec 08             	sub    esp,0x8
c000e98e:	50                   	push   eax
c000e98f:	68 b4 8c 02 c0       	push   0xc0028cb4
c000e994:	e8 f6 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e999:	83 c4 10             	add    esp,0x10
c000e99c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9a3:	0f 85 cb 01 00 00    	jne    c000eb74 <Computer::displayFeatures()+0x328>
c000e9a9:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e9ae:	83 ec 08             	sub    esp,0x8
c000e9b1:	50                   	push   eax
c000e9b2:	68 c5 8c 02 c0       	push   0xc0028cc5
c000e9b7:	e8 d3 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e9bc:	83 c4 10             	add    esp,0x10
c000e9bf:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e9c6:	0f 85 9e 01 00 00    	jne    c000eb6a <Computer::displayFeatures()+0x31e>
c000e9cc:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e9d1:	83 ec 08             	sub    esp,0x8
c000e9d4:	50                   	push   eax
c000e9d5:	68 d6 8c 02 c0       	push   0xc0028cd6
c000e9da:	e8 b0 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000e9df:	83 c4 10             	add    esp,0x10
c000e9e2:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e9e9:	0f 85 71 01 00 00    	jne    c000eb60 <Computer::displayFeatures()+0x314>
c000e9ef:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000e9f4:	83 ec 08             	sub    esp,0x8
c000e9f7:	50                   	push   eax
c000e9f8:	68 e7 8c 02 c0       	push   0xc0028ce7
c000e9fd:	e8 8d 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ea02:	83 c4 10             	add    esp,0x10
c000ea05:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea0c:	0f 85 44 01 00 00    	jne    c000eb56 <Computer::displayFeatures()+0x30a>
c000ea12:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000ea17:	83 ec 08             	sub    esp,0x8
c000ea1a:	50                   	push   eax
c000ea1b:	68 f8 8c 02 c0       	push   0xc0028cf8
c000ea20:	e8 6a 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea2f:	0f 85 17 01 00 00    	jne    c000eb4c <Computer::displayFeatures()+0x300>
c000ea35:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000ea3a:	83 ec 08             	sub    esp,0x8
c000ea3d:	50                   	push   eax
c000ea3e:	68 09 8d 02 c0       	push   0xc0028d09
c000ea43:	e8 47 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ea48:	83 c4 10             	add    esp,0x10
c000ea4b:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea52:	0f 85 ea 00 00 00    	jne    c000eb42 <Computer::displayFeatures()+0x2f6>
c000ea58:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000ea5d:	83 ec 08             	sub    esp,0x8
c000ea60:	50                   	push   eax
c000ea61:	68 1a 8d 02 c0       	push   0xc0028d1a
c000ea66:	e8 24 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ea75:	0f 88 0d 01 00 00    	js     c000eb88 <Computer::displayFeatures()+0x33c>
c000ea7b:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000ea80:	83 ec 08             	sub    esp,0x8
c000ea83:	50                   	push   eax
c000ea84:	68 2b 8d 02 c0       	push   0xc0028d2b
c000ea89:	e8 01 3e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ea8e:	83 c4 10             	add    esp,0x10
c000ea91:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ea98:	0f 85 9a 00 00 00    	jne    c000eb38 <Computer::displayFeatures()+0x2ec>
c000ea9e:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000eaa3:	83 ec 08             	sub    esp,0x8
c000eaa6:	50                   	push   eax
c000eaa7:	68 3c 8d 02 c0       	push   0xc0028d3c
c000eaac:	e8 de 3d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000eab1:	83 c4 10             	add    esp,0x10
c000eab4:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eabb:	75 74                	jne    c000eb31 <Computer::displayFeatures()+0x2e5>
c000eabd:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c000eac2:	83 ec 08             	sub    esp,0x8
c000eac5:	50                   	push   eax
c000eac6:	68 4d 8d 02 c0       	push   0xc0028d4d
c000eacb:	e8 bf 3d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ead0:	c7 44 24 20 3b a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a53b
c000ead8:	83 c4 18             	add    esp,0x18
c000eadb:	5b                   	pop    ebx
c000eadc:	e9 ae 3d 00 00       	jmp    c001288f <Dbg::kprintf(char const*, ...)>
c000eae1:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eae6:	e9 88 fd ff ff       	jmp    c000e873 <Computer::displayFeatures()+0x27>
c000eaeb:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eaf0:	e9 50 fe ff ff       	jmp    c000e945 <Computer::displayFeatures()+0xf9>
c000eaf5:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eafa:	e9 23 fe ff ff       	jmp    c000e922 <Computer::displayFeatures()+0xd6>
c000eaff:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb04:	e9 f6 fd ff ff       	jmp    c000e8ff <Computer::displayFeatures()+0xb3>
c000eb09:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb0e:	e9 c9 fd ff ff       	jmp    c000e8dc <Computer::displayFeatures()+0x90>
c000eb13:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb18:	e9 9c fd ff ff       	jmp    c000e8b9 <Computer::displayFeatures()+0x6d>
c000eb1d:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb22:	e9 6f fd ff ff       	jmp    c000e896 <Computer::displayFeatures()+0x4a>
c000eb27:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb2c:	e9 5a fe ff ff       	jmp    c000e98b <Computer::displayFeatures()+0x13f>
c000eb31:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb36:	eb 8a                	jmp    c000eac2 <Computer::displayFeatures()+0x276>
c000eb38:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb3d:	e9 61 ff ff ff       	jmp    c000eaa3 <Computer::displayFeatures()+0x257>
c000eb42:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb47:	e9 11 ff ff ff       	jmp    c000ea5d <Computer::displayFeatures()+0x211>
c000eb4c:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb51:	e9 e4 fe ff ff       	jmp    c000ea3a <Computer::displayFeatures()+0x1ee>
c000eb56:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb5b:	e9 b7 fe ff ff       	jmp    c000ea17 <Computer::displayFeatures()+0x1cb>
c000eb60:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb65:	e9 8a fe ff ff       	jmp    c000e9f4 <Computer::displayFeatures()+0x1a8>
c000eb6a:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb6f:	e9 5d fe ff ff       	jmp    c000e9d1 <Computer::displayFeatures()+0x185>
c000eb74:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb79:	e9 30 fe ff ff       	jmp    c000e9ae <Computer::displayFeatures()+0x162>
c000eb7e:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb83:	e9 e0 fd ff ff       	jmp    c000e968 <Computer::displayFeatures()+0x11c>
c000eb88:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c000eb8d:	e9 ee fe ff ff       	jmp    c000ea80 <Computer::displayFeatures()+0x234>

c000eb92 <Computer::rdmsr(unsigned int)>:
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb99:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eba0:	74 0a                	je     c000ebac <Computer::rdmsr(unsigned int)+0x1a>
c000eba2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eba6:	0f 32                	rdmsr  
c000eba8:	83 c4 0c             	add    esp,0xc
c000ebab:	c3                   	ret    
c000ebac:	83 ec 0c             	sub    esp,0xc
c000ebaf:	68 5e 8d 02 c0       	push   0xc0028d5e
c000ebb4:	e8 28 ae 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	eb e4                	jmp    c000eba2 <Computer::rdmsr(unsigned int)+0x10>

c000ebbe <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebbe:	57                   	push   edi
c000ebbf:	56                   	push   esi
c000ebc0:	52                   	push   edx
c000ebc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebc5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ebc9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ebcd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebd4:	74 0e                	je     c000ebe4 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ebd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebda:	89 f0                	mov    eax,esi
c000ebdc:	89 fa                	mov    edx,edi
c000ebde:	0f 30                	wrmsr  
c000ebe0:	58                   	pop    eax
c000ebe1:	5e                   	pop    esi
c000ebe2:	5f                   	pop    edi
c000ebe3:	c3                   	ret    
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	68 64 8d 02 c0       	push   0xc0028d64
c000ebec:	e8 f0 ad 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	eb e0                	jmp    c000ebd6 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ebf6 <Computer::nmiEnabled()>:
c000ebf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebfa:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec00:	c3                   	ret    
c000ec01:	90                   	nop

c000ec02 <Computer::readCMOS(unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	e4 71                	in     al,0x71
c000ec1a:	c3                   	ret    
c000ec1b:	90                   	nop

c000ec1c <Computer::enableNMI(bool)>:
c000ec1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec24:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec2a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec32:	eb ce                	jmp    c000ec02 <Computer::readCMOS(unsigned char)>

c000ec34 <Computer::open(int, int, void*)>:
c000ec34:	56                   	push   esi
c000ec35:	53                   	push   ebx
c000ec36:	83 ec 10             	sub    esp,0x10
c000ec39:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec3d:	f6 05 e0 cc 02 c0 04 	test   BYTE PTR ds:0xc002cce0,0x4
c000ec44:	68 68 22 00 00       	push   0x2268
c000ec49:	0f 94 05 04 bc 02 c0 	sete   BYTE PTR ds:0xc002bc04
c000ec50:	e8 95 09 00 00       	call   c000f5ea <malloc>
c000ec55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec58:	89 c6                	mov    esi,eax
c000ec5a:	e8 17 8c 00 00       	call   c0017876 <ACPI::ACPI()>
c000ec5f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec65:	58                   	pop    eax
c000ec66:	5a                   	pop    edx
c000ec67:	56                   	push   esi
c000ec68:	53                   	push   ebx
c000ec69:	e8 48 50 00 00       	call   c0013cb6 <Device::addChild(Device*)>
c000ec6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec71:	e8 cc f9 ff ff       	call   c000e642 <Computer::detectFeatures()>
c000ec76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec79:	e8 ce fb ff ff       	call   c000e84c <Computer::displayFeatures()>
c000ec7e:	59                   	pop    ecx
c000ec7f:	5e                   	pop    esi
c000ec80:	6a 01                	push   0x1
c000ec82:	53                   	push   ebx
c000ec83:	e8 94 ff ff ff       	call   c000ec1c <Computer::enableNMI(bool)>
c000ec88:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec8f:	e8 56 09 00 00       	call   c000f5ea <malloc>
c000ec94:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec97:	89 c6                	mov    esi,eax
c000ec99:	e8 84 96 00 00       	call   c0018322 <CPU::CPU()>
c000ec9e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eca4:	58                   	pop    eax
c000eca5:	5a                   	pop    edx
c000eca6:	56                   	push   esi
c000eca7:	53                   	push   ebx
c000eca8:	e8 09 50 00 00       	call   c0013cb6 <Device::addChild(Device*)>
c000ecad:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ecb3:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecb9:	6a 00                	push   0x0
c000ecbb:	6a 00                	push   0x0
c000ecbd:	50                   	push   eax
c000ecbe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecc1:	83 c4 20             	add    esp,0x20
c000ecc4:	e8 5f 55 00 00       	call   c0014228 <setupFPU()>
c000ecc9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eccf:	85 c0                	test   eax,eax
c000ecd1:	74 1f                	je     c000ecf2 <Computer::open(int, int, void*)+0xbe>
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	50                   	push   eax
c000ecd7:	53                   	push   ebx
c000ecd8:	e8 d9 4f 00 00       	call   c0013cb6 <Device::addChild(Device*)>
c000ecdd:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ece3:	8b 10                	mov    edx,DWORD PTR [eax]
c000ece5:	6a 00                	push   0x0
c000ece7:	6a 00                	push   0x0
c000ece9:	6a 00                	push   0x0
c000eceb:	50                   	push   eax
c000ecec:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecef:	83 c4 20             	add    esp,0x20
c000ecf2:	83 ec 0c             	sub    esp,0xc
c000ecf5:	68 fa e3 00 c0       	push   0xc000e3fa
c000ecfa:	e8 c3 e4 00 00       	call   c001d1c2 <setupMultitasking(void (*)())>
c000ecff:	83 c4 14             	add    esp,0x14
c000ed02:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed07:	5b                   	pop    ebx
c000ed08:	5e                   	pop    esi
c000ed09:	c3                   	ret    

c000ed0a <Computer::disableNMI()>:
c000ed0a:	6a 00                	push   0x0
c000ed0c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed10:	e8 07 ff ff ff       	call   c000ec1c <Computer::enableNMI(bool)>
c000ed15:	58                   	pop    eax
c000ed16:	5a                   	pop    edx
c000ed17:	c3                   	ret    

c000ed18 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed1c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed23:	19 c0                	sbb    eax,eax
c000ed25:	83 e0 80             	and    eax,0xffffff80
c000ed28:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed2c:	e6 70                	out    0x70,al
c000ed2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed32:	e6 71                	out    0x71,al
c000ed34:	c3                   	ret    
c000ed35:	90                   	nop

c000ed36 <Computer::handleNMI()>:
c000ed36:	56                   	push   esi
c000ed37:	53                   	push   ebx
c000ed38:	83 ec 10             	sub    esp,0x10
c000ed3b:	e4 92                	in     al,0x92
c000ed3d:	89 c6                	mov    esi,eax
c000ed3f:	e4 61                	in     al,0x61
c000ed41:	68 6a 8d 02 c0       	push   0xc0028d6a
c000ed46:	88 c3                	mov    bl,al
c000ed48:	e8 42 3b 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	83 e6 10             	and    esi,0x10
c000ed53:	75 0d                	jne    c000ed62 <Computer::handleNMI()+0x2c>
c000ed55:	f6 c3 40             	test   bl,0x40
c000ed58:	75 1d                	jne    c000ed77 <Computer::handleNMI()+0x41>
c000ed5a:	84 db                	test   bl,bl
c000ed5c:	78 2d                	js     c000ed8b <Computer::handleNMI()+0x55>
c000ed5e:	58                   	pop    eax
c000ed5f:	5b                   	pop    ebx
c000ed60:	5e                   	pop    esi
c000ed61:	c3                   	ret    
c000ed62:	83 ec 0c             	sub    esp,0xc
c000ed65:	68 7b 8d 02 c0       	push   0xc0028d7b
c000ed6a:	e8 72 ac 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	f6 c3 40             	test   bl,0x40
c000ed75:	74 e3                	je     c000ed5a <Computer::handleNMI()+0x24>
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	68 88 8d 02 c0       	push   0xc0028d88
c000ed7f:	e8 5d ac 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000ed84:	83 c4 10             	add    esp,0x10
c000ed87:	84 db                	test   bl,bl
c000ed89:	79 d3                	jns    c000ed5e <Computer::handleNMI()+0x28>
c000ed8b:	c7 44 24 10 92 8d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028d92
c000ed93:	5a                   	pop    edx
c000ed94:	5b                   	pop    ebx
c000ed95:	5e                   	pop    esi
c000ed96:	e9 46 ac 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c000ed9b:	90                   	nop

c000ed9c <Computer::setDiskActivityLight(int, bool)>:
c000ed9c:	56                   	push   esi
c000ed9d:	53                   	push   ebx
c000ed9e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eda2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eda7:	77 1b                	ja     c000edc4 <Computer::setDiskActivityLight(int, bool)+0x28>
c000eda9:	e4 92                	in     al,0x92
c000edab:	bb 40 00 00 00       	mov    ebx,0x40
c000edb0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edb4:	89 da                	mov    edx,ebx
c000edb6:	d3 e2                	shl    edx,cl
c000edb8:	89 f1                	mov    ecx,esi
c000edba:	f7 d2                	not    edx
c000edbc:	d3 e3                	shl    ebx,cl
c000edbe:	21 d0                	and    eax,edx
c000edc0:	09 d8                	or     eax,ebx
c000edc2:	e6 92                	out    0x92,al
c000edc4:	5b                   	pop    ebx
c000edc5:	5e                   	pop    esi
c000edc6:	c3                   	ret    
c000edc7:	90                   	nop

c000edc8 <GDTEntry::setBase(unsigned int)>:
c000edc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edd0:	89 c1                	mov    ecx,eax
c000edd2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000edd6:	c1 e9 10             	shr    ecx,0x10
c000edd9:	c1 e8 18             	shr    eax,0x18
c000eddc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eddf:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ede2:	c3                   	ret    
c000ede3:	90                   	nop

c000ede4 <GDTEntry::setLimit(unsigned int)>:
c000ede4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ede8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edec:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edef:	66 89 01             	mov    WORD PTR [ecx],ax
c000edf2:	83 e2 f0             	and    edx,0xfffffff0
c000edf5:	c1 e8 10             	shr    eax,0x10
c000edf8:	83 e0 0f             	and    eax,0xf
c000edfb:	09 d0                	or     eax,edx
c000edfd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDT::GDT()>:
c000ee02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee16:	90                   	nop
c000ee17:	c3                   	ret    

c000ee18 <GDT::addEntry(GDTEntry)>:
c000ee18:	53                   	push   ebx
c000ee19:	83 ec 0c             	sub    esp,0xc
c000ee1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee22:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee29:	52                   	push   edx
c000ee2a:	50                   	push   eax
c000ee2b:	68 cc 8d 02 c0       	push   0xc0028dcc
c000ee30:	e8 5a 3a 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ee35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee3b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee3f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee43:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee47:	8d 50 01             	lea    edx,[eax+0x1]
c000ee4a:	c1 e0 03             	shl    eax,0x3
c000ee4d:	89 13                	mov    DWORD PTR [ebx],edx
c000ee4f:	83 c4 18             	add    esp,0x18
c000ee52:	5b                   	pop    ebx
c000ee53:	c3                   	ret    

c000ee54 <GDT::getNumberOfEntries()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee5a:	c3                   	ret    
c000ee5b:	90                   	nop

c000ee5c <GDT::flush()>:
c000ee5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee60:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee62:	83 c0 04             	add    eax,0x4
c000ee65:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee6c:	a3 d2 cc 02 c0       	mov    ds:0xc002ccd2,eax
c000ee71:	66 89 15 d0 cc 02 c0 	mov    WORD PTR ds:0xc002ccd0,dx
c000ee78:	e9 80 15 ff ff       	jmp    c00003fd <loadGDT>
c000ee7d:	90                   	nop

c000ee7e <GDT::setup()>:
c000ee7e:	55                   	push   ebp
c000ee7f:	57                   	push   edi
c000ee80:	56                   	push   esi
c000ee81:	53                   	push   ebx
c000ee82:	83 ec 3c             	sub    esp,0x3c
c000ee85:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee89:	6a 00                	push   0x0
c000ee8b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee8f:	53                   	push   ebx
c000ee90:	e8 33 ff ff ff       	call   c000edc8 <GDTEntry::setBase(unsigned int)>
c000ee95:	6a 00                	push   0x0
c000ee97:	53                   	push   ebx
c000ee98:	e8 47 ff ff ff       	call   c000ede4 <GDTEntry::setLimit(unsigned int)>
c000ee9d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eea5:	6a 00                	push   0x0
c000eea7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eeab:	53                   	push   ebx
c000eeac:	e8 17 ff ff ff       	call   c000edc8 <GDTEntry::setBase(unsigned int)>
c000eeb1:	68 ff ff ff 00       	push   0xffffff
c000eeb6:	53                   	push   ebx
c000eeb7:	e8 28 ff ff ff       	call   c000ede4 <GDTEntry::setLimit(unsigned int)>
c000eebc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eec0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eec5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eeca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eece:	83 c4 20             	add    esp,0x20
c000eed1:	6a 00                	push   0x0
c000eed3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000eed7:	53                   	push   ebx
c000eed8:	e8 eb fe ff ff       	call   c000edc8 <GDTEntry::setBase(unsigned int)>
c000eedd:	68 ff ff ff 00       	push   0xffffff
c000eee2:	53                   	push   ebx
c000eee3:	e8 fc fe ff ff       	call   c000ede4 <GDTEntry::setLimit(unsigned int)>
c000eee8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eeec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eef0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eef4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eef8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eefc:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef01:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef0a:	89 d8                	mov    eax,ebx
c000ef0c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef10:	80 cc 60             	or     ah,0x60
c000ef13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef17:	83 c4 0c             	add    esp,0xc
c000ef1a:	89 f8                	mov    eax,edi
c000ef1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef20:	80 cc 60             	or     ah,0x60
c000ef23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef27:	89 c7                	mov    edi,eax
c000ef29:	55                   	push   ebp
c000ef2a:	e8 e9 fe ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c000ef2f:	83 c4 0c             	add    esp,0xc
c000ef32:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef3a:	55                   	push   ebp
c000ef3b:	e8 d8 fe ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c000ef40:	83 c4 0c             	add    esp,0xc
c000ef43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef4b:	55                   	push   ebp
c000ef4c:	e8 c7 fe ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef5c:	53                   	push   ebx
c000ef5d:	51                   	push   ecx
c000ef5e:	55                   	push   ebp
c000ef5f:	e8 b4 fe ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c000ef64:	83 c4 0c             	add    esp,0xc
c000ef67:	57                   	push   edi
c000ef68:	56                   	push   esi
c000ef69:	55                   	push   ebp
c000ef6a:	e8 a9 fe ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c000ef6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef72:	e8 e5 fe ff ff       	call   c000ee5c <GDT::flush()>
c000ef77:	83 c4 4c             	add    esp,0x4c
c000ef7a:	5b                   	pop    ebx
c000ef7b:	5e                   	pop    esi
c000ef7c:	5f                   	pop    edi
c000ef7d:	5d                   	pop    ebp
c000ef7e:	c3                   	ret    

c000ef7f <idleFunction(void*)>:
c000ef7f:	53                   	push   ebx
c000ef80:	83 ec 08             	sub    esp,0x8
c000ef83:	e8 0a e0 00 00       	call   c001cf92 <unlockScheduler()>
c000ef88:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c000ef8d:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef93:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef9a:	74 3c                	je     c000efd8 <idleFunction(void*)+0x59>
c000ef9c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efa3:	74 33                	je     c000efd8 <idleFunction(void*)+0x59>
c000efa5:	31 db                	xor    ebx,ebx
c000efa7:	52                   	push   edx
c000efa8:	52                   	push   edx
c000efa9:	68 e1 00 00 00       	push   0xe1
c000efae:	50                   	push   eax
c000efaf:	e8 de fb ff ff       	call   c000eb92 <Computer::rdmsr(unsigned int)>
c000efb4:	53                   	push   ebx
c000efb5:	83 e0 02             	and    eax,0x2
c000efb8:	50                   	push   eax
c000efb9:	68 e1 00 00 00       	push   0xe1
c000efbe:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c000efc4:	e8 f5 fb ff ff       	call   c000ebbe <Computer::wrmsr(unsigned int, unsigned long long)>
c000efc9:	83 c4 20             	add    esp,0x20
c000efcc:	e8 63 12 ff ff       	call   c0000234 <doTPAUSE>
c000efd1:	e8 2a 83 01 00       	call   c0027300 <idleCommon()>
c000efd6:	eb f4                	jmp    c000efcc <idleFunction(void*)+0x4d>
c000efd8:	fb                   	sti    
c000efd9:	f4                   	hlt    
c000efda:	e8 21 83 01 00       	call   c0027300 <idleCommon()>
c000efdf:	eb f7                	jmp    c000efd8 <idleFunction(void*)+0x59>
c000efe1:	90                   	nop

c000efe2 <IDTEntry::IDTEntry(bool)>:
c000efe2:	83 ec 04             	sub    esp,0x4
c000efe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efe9:	88 04 24             	mov    BYTE PTR [esp],al
c000efec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eff0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000effe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f002:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f005:	83 e2 f0             	and    edx,0xfffffff0
c000f008:	83 ca 0e             	or     edx,0xe
c000f00b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f00e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f012:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f015:	83 e2 ef             	and    edx,0xffffffef
c000f018:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f01b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f01f:	74 04                	je     c000f025 <IDTEntry::IDTEntry(bool)+0x43>
c000f021:	b2 03                	mov    dl,0x3
c000f023:	eb 02                	jmp    c000f027 <IDTEntry::IDTEntry(bool)+0x45>
c000f025:	b2 00                	mov    dl,0x0
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	83 e2 03             	and    edx,0x3
c000f02e:	88 d1                	mov    cl,dl
c000f030:	c1 e1 05             	shl    ecx,0x5
c000f033:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f036:	83 e2 9f             	and    edx,0xffffff9f
c000f039:	09 ca                	or     edx,ecx
c000f03b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f045:	83 ca 80             	or     edx,0xffffff80
c000f048:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f04b:	90                   	nop
c000f04c:	83 c4 04             	add    esp,0x4
c000f04f:	c3                   	ret    

c000f050 <IDTEntry::setOffset(unsigned int)>:
c000f050:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f054:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f058:	66 89 02             	mov    WORD PTR [edx],ax
c000f05b:	c1 e8 10             	shr    eax,0x10
c000f05e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f062:	c3                   	ret    
c000f063:	90                   	nop

c000f064 <IDT::IDT()>:
c000f064:	90                   	nop
c000f065:	c3                   	ret    

c000f066 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06a:	83 c0 30             	add    eax,0x30
c000f06d:	c3                   	ret    

c000f06e <IDT::addEntry(IDTEntry, int)>:
c000f06e:	53                   	push   ebx
c000f06f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f077:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f07b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f07f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f082:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f086:	5b                   	pop    ebx
c000f087:	c3                   	ret    

c000f088 <IDT::addEntry(int, void (*)(), bool)>:
c000f088:	53                   	push   ebx
c000f089:	83 ec 10             	sub    esp,0x10
c000f08c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f091:	50                   	push   eax
c000f092:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f096:	53                   	push   ebx
c000f097:	e8 46 ff ff ff       	call   c000efe2 <IDTEntry::IDTEntry(bool)>
c000f09c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0a0:	53                   	push   ebx
c000f0a1:	e8 aa ff ff ff       	call   c000f050 <IDTEntry::setOffset(unsigned int)>
c000f0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0b6:	e8 b3 ff ff ff       	call   c000f06e <IDT::addEntry(IDTEntry, int)>
c000f0bb:	83 c4 30             	add    esp,0x30
c000f0be:	5b                   	pop    ebx
c000f0bf:	c3                   	ret    

c000f0c0 <IDT::flush()>:
c000f0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c4:	66 c7 05 d8 cc 02 c0 ff 07 	mov    WORD PTR ds:0xc002ccd8,0x7ff
c000f0cd:	a3 da cc 02 c0       	mov    ds:0xc002ccda,eax
c000f0d2:	0f 01 1d d8 cc 02 c0 	lidtd  ds:0xc002ccd8
c000f0d9:	c3                   	ret    

c000f0da <IDT::setup()>:
c000f0da:	57                   	push   edi
c000f0db:	56                   	push   esi
c000f0dc:	53                   	push   ebx
c000f0dd:	83 ec 10             	sub    esp,0x10
c000f0e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0e4:	6a 00                	push   0x0
c000f0e6:	68 1d 04 00 c0       	push   0xc000041d
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 95 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	68 2d 04 00 c0       	push   0xc000042d
c000f0fa:	6a 01                	push   0x1
c000f0fc:	53                   	push   ebx
c000f0fd:	e8 86 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f102:	83 c4 20             	add    esp,0x20
c000f105:	6a 00                	push   0x0
c000f107:	68 37 04 00 c0       	push   0xc0000437
c000f10c:	6a 02                	push   0x2
c000f10e:	53                   	push   ebx
c000f10f:	e8 74 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f114:	6a 00                	push   0x0
c000f116:	68 41 04 00 c0       	push   0xc0000441
c000f11b:	6a 03                	push   0x3
c000f11d:	53                   	push   ebx
c000f11e:	e8 65 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f123:	83 c4 20             	add    esp,0x20
c000f126:	6a 00                	push   0x0
c000f128:	68 4b 04 00 c0       	push   0xc000044b
c000f12d:	6a 04                	push   0x4
c000f12f:	53                   	push   ebx
c000f130:	e8 53 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f135:	6a 00                	push   0x0
c000f137:	68 55 04 00 c0       	push   0xc0000455
c000f13c:	6a 05                	push   0x5
c000f13e:	53                   	push   ebx
c000f13f:	e8 44 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f144:	83 c4 20             	add    esp,0x20
c000f147:	6a 00                	push   0x0
c000f149:	68 5f 04 00 c0       	push   0xc000045f
c000f14e:	6a 06                	push   0x6
c000f150:	53                   	push   ebx
c000f151:	e8 32 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f156:	6a 00                	push   0x0
c000f158:	68 69 04 00 c0       	push   0xc0000469
c000f15d:	6a 07                	push   0x7
c000f15f:	53                   	push   ebx
c000f160:	e8 23 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f165:	83 c4 20             	add    esp,0x20
c000f168:	6a 00                	push   0x0
c000f16a:	68 73 04 00 c0       	push   0xc0000473
c000f16f:	6a 08                	push   0x8
c000f171:	53                   	push   ebx
c000f172:	e8 11 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f177:	6a 00                	push   0x0
c000f179:	68 7b 04 00 c0       	push   0xc000047b
c000f17e:	6a 09                	push   0x9
c000f180:	53                   	push   ebx
c000f181:	e8 02 ff ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f186:	83 c4 20             	add    esp,0x20
c000f189:	6a 00                	push   0x0
c000f18b:	68 85 04 00 c0       	push   0xc0000485
c000f190:	6a 0a                	push   0xa
c000f192:	53                   	push   ebx
c000f193:	e8 f0 fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f198:	6a 00                	push   0x0
c000f19a:	68 8d 04 00 c0       	push   0xc000048d
c000f19f:	6a 0b                	push   0xb
c000f1a1:	53                   	push   ebx
c000f1a2:	e8 e1 fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1a7:	83 c4 20             	add    esp,0x20
c000f1aa:	6a 00                	push   0x0
c000f1ac:	68 95 04 00 c0       	push   0xc0000495
c000f1b1:	6a 0c                	push   0xc
c000f1b3:	53                   	push   ebx
c000f1b4:	e8 cf fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1b9:	6a 00                	push   0x0
c000f1bb:	68 9d 04 00 c0       	push   0xc000049d
c000f1c0:	6a 0d                	push   0xd
c000f1c2:	53                   	push   ebx
c000f1c3:	e8 c0 fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1c8:	83 c4 20             	add    esp,0x20
c000f1cb:	6a 00                	push   0x0
c000f1cd:	68 a5 04 00 c0       	push   0xc00004a5
c000f1d2:	6a 0e                	push   0xe
c000f1d4:	53                   	push   ebx
c000f1d5:	e8 ae fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1da:	6a 00                	push   0x0
c000f1dc:	68 ad 04 00 c0       	push   0xc00004ad
c000f1e1:	6a 0f                	push   0xf
c000f1e3:	53                   	push   ebx
c000f1e4:	e8 9f fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1e9:	83 c4 20             	add    esp,0x20
c000f1ec:	6a 00                	push   0x0
c000f1ee:	68 b7 04 00 c0       	push   0xc00004b7
c000f1f3:	6a 10                	push   0x10
c000f1f5:	53                   	push   ebx
c000f1f6:	e8 8d fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f1fb:	6a 00                	push   0x0
c000f1fd:	68 c1 04 00 c0       	push   0xc00004c1
c000f202:	6a 11                	push   0x11
c000f204:	53                   	push   ebx
c000f205:	e8 7e fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f20a:	83 c4 20             	add    esp,0x20
c000f20d:	6a 00                	push   0x0
c000f20f:	68 cb 04 00 c0       	push   0xc00004cb
c000f214:	6a 12                	push   0x12
c000f216:	53                   	push   ebx
c000f217:	e8 6c fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f21c:	6a 01                	push   0x1
c000f21e:	68 65 05 00 c0       	push   0xc0000565
c000f223:	6a 60                	push   0x60
c000f225:	53                   	push   ebx
c000f226:	e8 5d fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f22b:	83 c4 20             	add    esp,0x20
c000f22e:	6a 00                	push   0x0
c000f230:	68 6c 05 00 c0       	push   0xc000056c
c000f235:	6a 20                	push   0x20
c000f237:	53                   	push   ebx
c000f238:	e8 4b fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f23d:	6a 00                	push   0x0
c000f23f:	68 57 05 00 c0       	push   0xc0000557
c000f244:	6a 21                	push   0x21
c000f246:	53                   	push   ebx
c000f247:	e8 3c fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f24c:	83 c4 20             	add    esp,0x20
c000f24f:	6a 00                	push   0x0
c000f251:	68 5e 05 00 c0       	push   0xc000055e
c000f256:	6a 22                	push   0x22
c000f258:	53                   	push   ebx
c000f259:	e8 2a fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f25e:	6a 00                	push   0x0
c000f260:	68 d5 04 00 c0       	push   0xc00004d5
c000f265:	6a 23                	push   0x23
c000f267:	53                   	push   ebx
c000f268:	e8 1b fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f26d:	83 c4 20             	add    esp,0x20
c000f270:	6a 00                	push   0x0
c000f272:	68 df 04 00 c0       	push   0xc00004df
c000f277:	6a 24                	push   0x24
c000f279:	53                   	push   ebx
c000f27a:	e8 09 fe ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f27f:	6a 00                	push   0x0
c000f281:	68 e9 04 00 c0       	push   0xc00004e9
c000f286:	6a 25                	push   0x25
c000f288:	53                   	push   ebx
c000f289:	e8 fa fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f28e:	83 c4 20             	add    esp,0x20
c000f291:	6a 00                	push   0x0
c000f293:	68 f3 04 00 c0       	push   0xc00004f3
c000f298:	6a 26                	push   0x26
c000f29a:	53                   	push   ebx
c000f29b:	e8 e8 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2a0:	6a 00                	push   0x0
c000f2a2:	68 fd 04 00 c0       	push   0xc00004fd
c000f2a7:	6a 27                	push   0x27
c000f2a9:	53                   	push   ebx
c000f2aa:	e8 d9 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2af:	83 c4 20             	add    esp,0x20
c000f2b2:	6a 00                	push   0x0
c000f2b4:	68 07 05 00 c0       	push   0xc0000507
c000f2b9:	6a 28                	push   0x28
c000f2bb:	53                   	push   ebx
c000f2bc:	e8 c7 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2c1:	6a 00                	push   0x0
c000f2c3:	68 11 05 00 c0       	push   0xc0000511
c000f2c8:	6a 29                	push   0x29
c000f2ca:	53                   	push   ebx
c000f2cb:	e8 b8 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2d0:	83 c4 20             	add    esp,0x20
c000f2d3:	6a 00                	push   0x0
c000f2d5:	68 1b 05 00 c0       	push   0xc000051b
c000f2da:	6a 2a                	push   0x2a
c000f2dc:	53                   	push   ebx
c000f2dd:	e8 a6 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2e2:	6a 00                	push   0x0
c000f2e4:	68 25 05 00 c0       	push   0xc0000525
c000f2e9:	6a 2b                	push   0x2b
c000f2eb:	53                   	push   ebx
c000f2ec:	e8 97 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f2f1:	83 c4 20             	add    esp,0x20
c000f2f4:	6a 00                	push   0x0
c000f2f6:	68 2f 05 00 c0       	push   0xc000052f
c000f2fb:	6a 2c                	push   0x2c
c000f2fd:	53                   	push   ebx
c000f2fe:	e8 85 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f303:	6a 00                	push   0x0
c000f305:	68 39 05 00 c0       	push   0xc0000539
c000f30a:	6a 2d                	push   0x2d
c000f30c:	53                   	push   ebx
c000f30d:	e8 76 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f312:	83 c4 20             	add    esp,0x20
c000f315:	6a 00                	push   0x0
c000f317:	68 43 05 00 c0       	push   0xc0000543
c000f31c:	6a 2e                	push   0x2e
c000f31e:	53                   	push   ebx
c000f31f:	e8 64 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f324:	6a 00                	push   0x0
c000f326:	68 4d 05 00 c0       	push   0xc000054d
c000f32b:	6a 2f                	push   0x2f
c000f32d:	53                   	push   ebx
c000f32e:	e8 55 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f333:	83 c4 20             	add    esp,0x20
c000f336:	6a 00                	push   0x0
c000f338:	68 a2 05 00 c0       	push   0xc00005a2
c000f33d:	6a 30                	push   0x30
c000f33f:	53                   	push   ebx
c000f340:	e8 43 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f345:	6a 00                	push   0x0
c000f347:	68 ac 05 00 c0       	push   0xc00005ac
c000f34c:	6a 31                	push   0x31
c000f34e:	53                   	push   ebx
c000f34f:	e8 34 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f354:	83 c4 20             	add    esp,0x20
c000f357:	6a 00                	push   0x0
c000f359:	68 b6 05 00 c0       	push   0xc00005b6
c000f35e:	6a 32                	push   0x32
c000f360:	53                   	push   ebx
c000f361:	e8 22 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f366:	6a 00                	push   0x0
c000f368:	68 c0 05 00 c0       	push   0xc00005c0
c000f36d:	6a 33                	push   0x33
c000f36f:	53                   	push   ebx
c000f370:	e8 13 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f375:	83 c4 20             	add    esp,0x20
c000f378:	6a 00                	push   0x0
c000f37a:	68 ca 05 00 c0       	push   0xc00005ca
c000f37f:	6a 34                	push   0x34
c000f381:	53                   	push   ebx
c000f382:	e8 01 fd ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f387:	6a 00                	push   0x0
c000f389:	68 d4 05 00 c0       	push   0xc00005d4
c000f38e:	6a 35                	push   0x35
c000f390:	53                   	push   ebx
c000f391:	e8 f2 fc ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f396:	83 c4 20             	add    esp,0x20
c000f399:	6a 00                	push   0x0
c000f39b:	68 de 05 00 c0       	push   0xc00005de
c000f3a0:	6a 36                	push   0x36
c000f3a2:	53                   	push   ebx
c000f3a3:	e8 e0 fc ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f3a8:	6a 00                	push   0x0
c000f3aa:	68 e8 05 00 c0       	push   0xc00005e8
c000f3af:	6a 37                	push   0x37
c000f3b1:	53                   	push   ebx
c000f3b2:	e8 d1 fc ff ff       	call   c000f088 <IDT::addEntry(int, void (*)(), bool)>
c000f3b7:	83 c4 20             	add    esp,0x20
c000f3ba:	e8 70 26 00 00       	call   c0011a2f <Virt::getAKernelVAS()>
c000f3bf:	52                   	push   edx
c000f3c0:	6a 03                	push   0x3
c000f3c2:	6a 02                	push   0x2
c000f3c4:	50                   	push   eax
c000f3c5:	e8 a0 2c 00 00       	call   c001206a <VAS::allocatePages(int, int)>
c000f3ca:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3d1:	89 c6                	mov    esi,eax
c000f3d3:	e8 12 02 00 00       	call   c000f5ea <malloc>
c000f3d8:	81 c6 00 20 00 00    	add    esi,0x2000
c000f3de:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3e1:	89 c7                	mov    edi,eax
c000f3e3:	e8 e8 1d 00 00       	call   c00111d0 <TSS::TSS()>
c000f3e8:	83 c4 0c             	add    esp,0xc
c000f3eb:	68 73 04 00 c0       	push   0xc0000473
c000f3f0:	56                   	push   esi
c000f3f1:	57                   	push   edi
c000f3f2:	e8 19 1e 00 00       	call   c0011210 <TSS::setup(unsigned long, unsigned long)>
c000f3f7:	59                   	pop    ecx
c000f3f8:	89 c6                	mov    esi,eax
c000f3fa:	5f                   	pop    edi
c000f3fb:	6a 00                	push   0x0
c000f3fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f401:	50                   	push   eax
c000f402:	e8 db fb ff ff       	call   c000efe2 <IDTEntry::IDTEntry(bool)>
c000f407:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f40b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f410:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f417:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f41d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f421:	80 ce 05             	or     dh,0x5
c000f424:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f427:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f42b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f42f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f435:	e8 86 fc ff ff       	call   c000f0c0 <IDT::flush()>
c000f43a:	83 c4 20             	add    esp,0x20
c000f43d:	5b                   	pop    ebx
c000f43e:	5e                   	pop    esi
c000f43f:	5f                   	pop    edi
c000f440:	c3                   	ret    

c000f441 <sbrk>:
c000f441:	55                   	push   ebp
c000f442:	57                   	push   edi
c000f443:	56                   	push   esi
c000f444:	53                   	push   ebx
c000f445:	83 ec 1c             	sub    esp,0x1c
c000f448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f44c:	85 c0                	test   eax,eax
c000f44e:	74 3e                	je     c000f48e <sbrk+0x4d>
c000f450:	78 43                	js     c000f495 <sbrk+0x54>
c000f452:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c000f458:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f45e:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f464:	83 e2 01             	and    edx,0x1
c000f467:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f46b:	8b 0d e4 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bbe4
c000f471:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f475:	05 ff 0f 00 00       	add    eax,0xfff
c000f47a:	89 c2                	mov    edx,eax
c000f47c:	78 2f                	js     c000f4ad <sbrk+0x6c>
c000f47e:	c1 fa 0c             	sar    edx,0xc
c000f481:	89 d7                	mov    edi,edx
c000f483:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f487:	be 00 00 00 00       	mov    esi,0x0
c000f48c:	eb 36                	jmp    c000f4c4 <sbrk+0x83>
c000f48e:	a1 e4 bb 02 c0       	mov    eax,ds:0xc002bbe4
c000f493:	eb 74                	jmp    c000f509 <sbrk+0xc8>
c000f495:	83 ec 08             	sub    esp,0x8
c000f498:	50                   	push   eax
c000f499:	68 e8 8d 02 c0       	push   0xc0028de8
c000f49e:	e8 ec 33 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000f4a3:	83 c4 10             	add    esp,0x10
c000f4a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4ab:	eb 5c                	jmp    c000f509 <sbrk+0xc8>
c000f4ad:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4b3:	eb c9                	jmp    c000f47e <sbrk+0x3d>
c000f4b5:	81 05 e4 bb 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002bbe4,0x1000
c000f4bf:	46                   	inc    esi
c000f4c0:	39 f7                	cmp    edi,esi
c000f4c2:	74 34                	je     c000f4f8 <sbrk+0xb7>
c000f4c4:	e8 66 25 00 00       	call   c0011a2f <Virt::getAKernelVAS()>
c000f4c9:	89 c3                	mov    ebx,eax
c000f4cb:	8b 2d e4 bb 02 c0    	mov    ebp,DWORD PTR ds:0xc002bbe4
c000f4d1:	e8 87 07 00 00       	call   c000fc5d <Phys::allocatePage()>
c000f4d6:	68 01 04 00 00       	push   0x401
c000f4db:	55                   	push   ebp
c000f4dc:	50                   	push   eax
c000f4dd:	53                   	push   ebx
c000f4de:	e8 87 2a 00 00       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f4e3:	83 c4 10             	add    esp,0x10
c000f4e6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4eb:	74 c8                	je     c000f4b5 <sbrk+0x74>
c000f4ed:	8b 1d e4 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bbe4
c000f4f3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f6:	eb bd                	jmp    c000f4b5 <sbrk+0x74>
c000f4f8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4fd:	75 12                	jne    c000f511 <sbrk+0xd0>
c000f4ff:	0f 20 d8             	mov    eax,cr3
c000f502:	0f 22 d8             	mov    cr3,eax
c000f505:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f509:	83 c4 1c             	add    esp,0x1c
c000f50c:	5b                   	pop    ebx
c000f50d:	5e                   	pop    esi
c000f50e:	5f                   	pop    edi
c000f50f:	5d                   	pop    ebp
c000f510:	c3                   	ret    
c000f511:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f515:	89 cb                	mov    ebx,ecx
c000f517:	c1 eb 0a             	shr    ebx,0xa
c000f51a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f520:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f52a:	c1 e0 0c             	shl    eax,0xc
c000f52d:	01 c8                	add    eax,ecx
c000f52f:	c1 e8 0a             	shr    eax,0xa
c000f532:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f537:	2d 00 00 40 00       	sub    eax,0x400000
c000f53c:	39 c3                	cmp    ebx,eax
c000f53e:	77 c5                	ja     c000f505 <sbrk+0xc4>
c000f540:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f543:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f549:	39 d8                	cmp    eax,ebx
c000f54b:	73 f3                	jae    c000f540 <sbrk+0xff>
c000f54d:	eb b6                	jmp    c000f505 <sbrk+0xc4>

c000f54f <mmap>:
c000f54f:	83 ec 18             	sub    esp,0x18
c000f552:	68 18 8e 02 c0       	push   0xc0028e18
c000f557:	e8 85 a4 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000f55c:	b8 00 00 00 00       	mov    eax,0x0
c000f561:	83 c4 1c             	add    esp,0x1c
c000f564:	c3                   	ret    

c000f565 <munmap>:
c000f565:	83 ec 18             	sub    esp,0x18
c000f568:	68 1d 8e 02 c0       	push   0xc0028e1d
c000f56d:	e8 6f a4 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000f572:	b8 00 00 00 00       	mov    eax,0x0
c000f577:	83 c4 1c             	add    esp,0x1c
c000f57a:	c3                   	ret    

c000f57b <liballoc_lock()>:
c000f57b:	83 ec 0c             	sub    esp,0xc
c000f57e:	e8 0d da 00 00       	call   c001cf90 <lockScheduler()>
c000f583:	b8 00 00 00 00       	mov    eax,0x0
c000f588:	83 c4 0c             	add    esp,0xc
c000f58b:	c3                   	ret    

c000f58c <liballoc_unlock()>:
c000f58c:	83 ec 0c             	sub    esp,0xc
c000f58f:	e8 fe d9 00 00       	call   c001cf92 <unlockScheduler()>
c000f594:	b8 00 00 00 00       	mov    eax,0x0
c000f599:	83 c4 0c             	add    esp,0xc
c000f59c:	c3                   	ret    

c000f59d <liballoc_alloc(int)>:
c000f59d:	83 ec 0c             	sub    esp,0xc
c000f5a0:	e8 8a 24 00 00       	call   c0011a2f <Virt::getAKernelVAS()>
c000f5a5:	83 ec 04             	sub    esp,0x4
c000f5a8:	6a 01                	push   0x1
c000f5aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5ae:	50                   	push   eax
c000f5af:	e8 b6 2a 00 00       	call   c001206a <VAS::allocatePages(int, int)>
c000f5b4:	83 c4 1c             	add    esp,0x1c
c000f5b7:	c3                   	ret    

c000f5b8 <liballoc_free(void*, int)>:
c000f5b8:	83 ec 0c             	sub    esp,0xc
c000f5bb:	e8 6f 24 00 00       	call   c0011a2f <Virt::getAKernelVAS()>
c000f5c0:	83 ec 08             	sub    esp,0x8
c000f5c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5c7:	50                   	push   eax
c000f5c8:	e8 59 27 00 00       	call   c0011d26 <VAS::freeAllocatedPages(unsigned long)>
c000f5cd:	b8 00 00 00 00       	mov    eax,0x0
c000f5d2:	83 c4 1c             	add    esp,0x1c
c000f5d5:	c3                   	ret    

c000f5d6 <realloc>:
c000f5d6:	83 ec 14             	sub    esp,0x14
c000f5d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5e1:	e8 1e 1e ff ff       	call   c0001404 <dlrealloc>
c000f5e6:	83 c4 1c             	add    esp,0x1c
c000f5e9:	c3                   	ret    

c000f5ea <malloc>:
c000f5ea:	83 ec 18             	sub    esp,0x18
c000f5ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5f1:	e8 d1 18 ff ff       	call   c0000ec7 <dlmalloc>
c000f5f6:	83 c4 1c             	add    esp,0x1c
c000f5f9:	c3                   	ret    

c000f5fa <free>:
c000f5fa:	83 ec 18             	sub    esp,0x18
c000f5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f601:	e8 66 15 ff ff       	call   c0000b6c <dlfree>
c000f606:	83 c4 1c             	add    esp,0x1c
c000f609:	c3                   	ret    

c000f60a <rfree>:
c000f60a:	83 ec 18             	sub    esp,0x18
c000f60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f611:	e8 56 15 ff ff       	call   c0000b6c <dlfree>
c000f616:	83 c4 1c             	add    esp,0x1c
c000f619:	c3                   	ret    

c000f61a <calloc>:
c000f61a:	56                   	push   esi
c000f61b:	53                   	push   ebx
c000f61c:	83 ec 10             	sub    esp,0x10
c000f61f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f623:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f628:	53                   	push   ebx
c000f629:	e8 bc ff ff ff       	call   c000f5ea <malloc>
c000f62e:	89 c6                	mov    esi,eax
c000f630:	83 c4 0c             	add    esp,0xc
c000f633:	53                   	push   ebx
c000f634:	6a 00                	push   0x0
c000f636:	50                   	push   eax
c000f637:	e8 4f 10 ff ff       	call   c000068b <memset>
c000f63c:	89 f0                	mov    eax,esi
c000f63e:	83 c4 14             	add    esp,0x14
c000f641:	5b                   	pop    ebx
c000f642:	5e                   	pop    esi
c000f643:	c3                   	ret    

c000f644 <hwTextMode_loadInData(VgaText*)>:
c000f644:	55                   	push   ebp
c000f645:	a1 00 bc 02 c0       	mov    eax,ds:0xc002bc00
c000f64a:	57                   	push   edi
c000f64b:	56                   	push   esi
c000f64c:	53                   	push   ebx
c000f64d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f651:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f657:	85 d2                	test   edx,edx
c000f659:	7e 2f                	jle    c000f68a <hwTextMode_loadInData(VgaText*)+0x46>
c000f65b:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f661:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f664:	31 f6                	xor    esi,esi
c000f666:	29 fd                	sub    ebp,edi
c000f668:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f66b:	31 c0                	xor    eax,eax
c000f66d:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f671:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f675:	40                   	inc    eax
c000f676:	83 f8 50             	cmp    eax,0x50
c000f679:	75 f2                	jne    c000f66d <hwTextMode_loadInData(VgaText*)+0x29>
c000f67b:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f681:	46                   	inc    esi
c000f682:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f688:	7f de                	jg     c000f668 <hwTextMode_loadInData(VgaText*)+0x24>
c000f68a:	5b                   	pop    ebx
c000f68b:	5e                   	pop    esi
c000f68c:	5f                   	pop    edi
c000f68d:	5d                   	pop    ebp
c000f68e:	c3                   	ret    

c000f68f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f68f:	55                   	push   ebp
c000f690:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f697:	57                   	push   edi
c000f698:	56                   	push   esi
c000f699:	53                   	push   ebx
c000f69a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f69e:	75 50                	jne    c000f6f0 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6a0:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6a6:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6ac:	8b 15 00 bc 02 c0    	mov    edx,DWORD PTR ds:0xc002bc00
c000f6b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6b6:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6bc:	eb 0e                	jmp    c000f6cc <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6be:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6c4:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6ca:	89 da                	mov    edx,ebx
c000f6cc:	83 e5 0f             	and    ebp,0xf
c000f6cf:	c1 e0 04             	shl    eax,0x4
c000f6d2:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f6d5:	0f b6 c0             	movzx  eax,al
c000f6d8:	41                   	inc    ecx
c000f6d9:	09 e8                	or     eax,ebp
c000f6db:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f6df:	c1 e0 08             	shl    eax,0x8
c000f6e2:	09 e8                	or     eax,ebp
c000f6e4:	39 fb                	cmp    ebx,edi
c000f6e6:	66 89 02             	mov    WORD PTR [edx],ax
c000f6e9:	75 d3                	jne    c000f6be <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f6eb:	5b                   	pop    ebx
c000f6ec:	5e                   	pop    esi
c000f6ed:	5f                   	pop    edi
c000f6ee:	5d                   	pop    ebp
c000f6ef:	c3                   	ret    
c000f6f0:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f6fa:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f704:	31 c0                	xor    eax,eax
c000f706:	bd 02 00 00 00       	mov    ebp,0x2
c000f70b:	eb 9f                	jmp    c000f6ac <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f70d <hwTextMode_showCursor(VgaText*, bool)>:
c000f70d:	56                   	push   esi
c000f70e:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f715:	53                   	push   ebx
c000f716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f71a:	75 39                	jne    c000f755 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f71c:	84 c0                	test   al,al
c000f71e:	74 38                	je     c000f758 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f720:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f725:	b0 0a                	mov    al,0xa
c000f727:	89 da                	mov    edx,ebx
c000f729:	ee                   	out    dx,al
c000f72a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f72f:	89 ca                	mov    edx,ecx
c000f731:	ec                   	in     al,dx
c000f732:	b2 0f                	mov    dl,0xf
c000f734:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f738:	83 e0 c0             	and    eax,0xffffffc0
c000f73b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f741:	09 d0                	or     eax,edx
c000f743:	89 ca                	mov    edx,ecx
c000f745:	ee                   	out    dx,al
c000f746:	b0 0b                	mov    al,0xb
c000f748:	89 da                	mov    edx,ebx
c000f74a:	ee                   	out    dx,al
c000f74b:	89 ca                	mov    edx,ecx
c000f74d:	ec                   	in     al,dx
c000f74e:	83 e0 e0             	and    eax,0xffffffe0
c000f751:	83 c8 0f             	or     eax,0xf
c000f754:	ee                   	out    dx,al
c000f755:	5b                   	pop    ebx
c000f756:	5e                   	pop    esi
c000f757:	c3                   	ret    
c000f758:	b0 0a                	mov    al,0xa
c000f75a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f75f:	ee                   	out    dx,al
c000f760:	b0 20                	mov    al,0x20
c000f762:	ba d5 03 00 00       	mov    edx,0x3d5
c000f767:	ee                   	out    dx,al
c000f768:	5b                   	pop    ebx
c000f769:	5e                   	pop    esi
c000f76a:	c3                   	ret    

c000f76b <hwTextMode_update(VgaText*)>:
c000f76b:	c3                   	ret    

c000f76c <hwTextMode_updateCursor(VgaText*)>:
c000f76c:	56                   	push   esi
c000f76d:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f774:	53                   	push   ebx
c000f775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f779:	75 3f                	jne    c000f7ba <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f77b:	be d4 03 00 00       	mov    esi,0x3d4
c000f780:	b9 19 00 00 00       	mov    ecx,0x19
c000f785:	89 f2                	mov    edx,esi
c000f787:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f78d:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f793:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f796:	c1 e1 04             	shl    ecx,0x4
c000f799:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f79f:	b0 0f                	mov    al,0xf
c000f7a1:	ee                   	out    dx,al
c000f7a2:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7a7:	88 c8                	mov    al,cl
c000f7a9:	89 da                	mov    edx,ebx
c000f7ab:	ee                   	out    dx,al
c000f7ac:	b0 0e                	mov    al,0xe
c000f7ae:	89 f2                	mov    edx,esi
c000f7b0:	ee                   	out    dx,al
c000f7b1:	89 c8                	mov    eax,ecx
c000f7b3:	89 da                	mov    edx,ebx
c000f7b5:	66 c1 e8 08          	shr    ax,0x8
c000f7b9:	ee                   	out    dx,al
c000f7ba:	5b                   	pop    ebx
c000f7bb:	5e                   	pop    esi
c000f7bc:	c3                   	ret    

c000f7bd <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7c1:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f7c8:	75 38                	jne    c000f802 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f7ca:	ba da 03 00 00       	mov    edx,0x3da
c000f7cf:	84 c0                	test   al,al
c000f7d1:	75 18                	jne    c000f7eb <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f7d3:	ec                   	in     al,dx
c000f7d4:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f7d9:	b0 30                	mov    al,0x30
c000f7db:	89 ca                	mov    edx,ecx
c000f7dd:	ee                   	out    dx,al
c000f7de:	ba c1 03 00 00       	mov    edx,0x3c1
c000f7e3:	ec                   	in     al,dx
c000f7e4:	83 c8 08             	or     eax,0x8
c000f7e7:	89 ca                	mov    edx,ecx
c000f7e9:	ee                   	out    dx,al
c000f7ea:	c3                   	ret    
c000f7eb:	ec                   	in     al,dx
c000f7ec:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f7f1:	b0 30                	mov    al,0x30
c000f7f3:	89 ca                	mov    edx,ecx
c000f7f5:	ee                   	out    dx,al
c000f7f6:	ba c1 03 00 00       	mov    edx,0x3c1
c000f7fb:	ec                   	in     al,dx
c000f7fc:	83 e0 f7             	and    eax,0xfffffff7
c000f7ff:	89 ca                	mov    edx,ecx
c000f801:	ee                   	out    dx,al
c000f802:	c3                   	ret    

c000f803 <hwTextMode_scrollScreen(VgaText*)>:
c000f803:	55                   	push   ebp
c000f804:	57                   	push   edi
c000f805:	56                   	push   esi
c000f806:	53                   	push   ebx
c000f807:	83 ec 1c             	sub    esp,0x1c
c000f80a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f80e:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f815:	74 14                	je     c000f82b <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f817:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f821:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f82b:	a1 00 bc 02 c0       	mov    eax,ds:0xc002bc00
c000f830:	bd 02 00 00 00       	mov    ebp,0x2
c000f835:	05 a0 00 00 00       	add    eax,0xa0
c000f83a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f83e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f842:	31 c0                	xor    eax,eax
c000f844:	eb 0b                	jmp    c000f851 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f846:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f84c:	74 57                	je     c000f8a5 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f84e:	43                   	inc    ebx
c000f84f:	89 f0                	mov    eax,esi
c000f851:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f857:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f85d:	88 13                	mov    BYTE PTR [ebx],dl
c000f85f:	8d 70 01             	lea    esi,[eax+0x1]
c000f862:	83 fd 18             	cmp    ebp,0x18
c000f865:	75 df                	jne    c000f846 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f867:	a8 01                	test   al,0x1
c000f869:	75 13                	jne    c000f87e <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f86b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f86e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f874:	75 d8                	jne    c000f84e <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f876:	83 c4 1c             	add    esp,0x1c
c000f879:	5b                   	pop    ebx
c000f87a:	5e                   	pop    esi
c000f87b:	5f                   	pop    edi
c000f87c:	5d                   	pop    ebp
c000f87d:	c3                   	ret    
c000f87e:	83 ec 08             	sub    esp,0x8
c000f881:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f888:	50                   	push   eax
c000f889:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f88d:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f894:	50                   	push   eax
c000f895:	e8 08 0c 00 00       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	88 07                	mov    BYTE PTR [edi],al
c000f89f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8a3:	eb c9                	jmp    c000f86e <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8a5:	45                   	inc    ebp
c000f8a6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8ae:	eb 8e                	jmp    c000f83e <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8b0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8b0:	57                   	push   edi
c000f8b1:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f8b8:	56                   	push   esi
c000f8b9:	53                   	push   ebx
c000f8ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8be:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8c2:	75 65                	jne    c000f929 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8c4:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f8c9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f8ce:	83 ec 08             	sub    esp,0x8
c000f8d1:	52                   	push   edx
c000f8d2:	50                   	push   eax
c000f8d3:	e8 ca 0b 00 00       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d8:	5a                   	pop    edx
c000f8d9:	0f b6 c0             	movzx  eax,al
c000f8dc:	59                   	pop    ecx
c000f8dd:	50                   	push   eax
c000f8de:	0f be c3             	movsx  eax,bl
c000f8e1:	50                   	push   eax
c000f8e2:	e8 61 0c 00 00       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c000f8e7:	83 c4 10             	add    esp,0x10
c000f8ea:	8b 35 00 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bc00
c000f8f0:	80 3d 60 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd60,0x0
c000f8f7:	74 07                	je     c000f900 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f8f9:	66 0f be c3          	movsx  ax,bl
c000f8fd:	80 cc 02             	or     ah,0x2
c000f900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f904:	ba 19 00 00 00       	mov    edx,0x19
c000f909:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f90f:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f912:	8d 14 92             	lea    edx,[edx+edx*4]
c000f915:	c1 e1 04             	shl    ecx,0x4
c000f918:	c1 e2 04             	shl    edx,0x4
c000f91b:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f91f:	01 ca                	add    edx,ecx
c000f921:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f925:	5b                   	pop    ebx
c000f926:	5e                   	pop    esi
c000f927:	5f                   	pop    edi
c000f928:	c3                   	ret    
c000f929:	b8 02 00 00 00       	mov    eax,0x2
c000f92e:	31 d2                	xor    edx,edx
c000f930:	eb 9c                	jmp    c000f8ce <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f932 <setupTextMode()>:
c000f932:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f937:	83 e0 30             	and    eax,0x30
c000f93a:	66 83 f8 30          	cmp    ax,0x30
c000f93e:	75 11                	jne    c000f951 <setupTextMode()+0x1f>
c000f940:	81 2d 00 bc 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002bc00,0x8000
c000f94a:	c6 05 60 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd60,0x1
c000f951:	c7 05 98 cd 02 c0 bd f7 00 c0 	mov    DWORD PTR ds:0xc002cd98,0xc000f7bd
c000f95b:	c7 05 84 cd 02 c0 44 f6 00 c0 	mov    DWORD PTR ds:0xc002cd84,0xc000f644
c000f965:	c7 05 80 cd 02 c0 8f f6 00 c0 	mov    DWORD PTR ds:0xc002cd80,0xc000f68f
c000f96f:	c7 05 8c cd 02 c0 03 f8 00 c0 	mov    DWORD PTR ds:0xc002cd8c,0xc000f803
c000f979:	c7 05 94 cd 02 c0 0d f7 00 c0 	mov    DWORD PTR ds:0xc002cd94,0xc000f70d
c000f983:	c7 05 88 cd 02 c0 6b f7 00 c0 	mov    DWORD PTR ds:0xc002cd88,0xc000f76b
c000f98d:	c7 05 90 cd 02 c0 6c f7 00 c0 	mov    DWORD PTR ds:0xc002cd90,0xc000f76c
c000f997:	c7 05 9c cd 02 c0 b0 f8 00 c0 	mov    DWORD PTR ds:0xc002cd9c,0xc000f8b0
c000f9a1:	c3                   	ret    

c000f9a2 <kernel_main>:
c000f9a2:	57                   	push   edi
c000f9a3:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9a8:	56                   	push   esi
c000f9a9:	31 f6                	xor    esi,esi
c000f9ab:	53                   	push   ebx
c000f9ac:	83 ec 10             	sub    esp,0x10
c000f9af:	e8 48 09 00 00       	call   c00102fc <installVgaTextImplementation()>
c000f9b4:	e8 79 ff ff ff       	call   c000f932 <setupTextMode()>
c000f9b9:	89 f0                	mov    eax,esi
c000f9bb:	89 fa                	mov    edx,edi
c000f9bd:	ee                   	out    dx,al
c000f9be:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9c3:	b0 80                	mov    al,0x80
c000f9c5:	89 da                	mov    edx,ebx
c000f9c7:	ee                   	out    dx,al
c000f9c8:	b1 03                	mov    cl,0x3
c000f9ca:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9cf:	88 c8                	mov    al,cl
c000f9d1:	ee                   	out    dx,al
c000f9d2:	89 f0                	mov    eax,esi
c000f9d4:	89 fa                	mov    edx,edi
c000f9d6:	ee                   	out    dx,al
c000f9d7:	88 c8                	mov    al,cl
c000f9d9:	89 da                	mov    edx,ebx
c000f9db:	ee                   	out    dx,al
c000f9dc:	b0 c7                	mov    al,0xc7
c000f9de:	ba fa 03 00 00       	mov    edx,0x3fa
c000f9e3:	ee                   	out    dx,al
c000f9e4:	b0 0b                	mov    al,0xb
c000f9e6:	ba fc 03 00 00       	mov    edx,0x3fc
c000f9eb:	ee                   	out    dx,al
c000f9ec:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	05 ff 0f 00 00       	add    eax,0xfff
c000f9f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9fe:	50                   	push   eax
c000f9ff:	e8 b3 03 00 00       	call   c000fdb7 <Phys::physicalMemorySetup(unsigned int)>
c000fa04:	e8 a7 1f 00 00       	call   c00119b0 <Virt::virtualMemorySetup()>
c000fa09:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa0f:	83 c4 10             	add    esp,0x10
c000fa12:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa18:	75 0e                	jne    c000fa28 <kernel_main+0x86>
c000fa1a:	89 d8                	mov    eax,ebx
c000fa1c:	25 48 03 00 00       	and    eax,0x348
c000fa21:	3d 00 03 00 00       	cmp    eax,0x300
c000fa26:	74 10                	je     c000fa38 <kernel_main+0x96>
c000fa28:	83 ec 0c             	sub    esp,0xc
c000fa2b:	68 3c a5 02 c0       	push   0xc002a53c
c000fa30:	e8 ac 9f 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000fa35:	83 c4 10             	add    esp,0x10
c000fa38:	83 ec 0c             	sub    esp,0xc
c000fa3b:	89 1d e0 cc 02 c0    	mov    DWORD PTR ds:0xc002cce0,ebx
c000fa41:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa45:	53                   	push   ebx
c000fa46:	e8 19 21 00 00       	call   c0011b64 <VAS::VAS()>
c000fa4b:	89 1d 44 ce 02 c0    	mov    DWORD PTR ds:0xc002ce44,ebx
c000fa51:	e8 ca 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa56:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fa5d:	e8 88 fb ff ff       	call   c000f5ea <malloc>
c000fa62:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa65:	89 c6                	mov    esi,eax
c000fa67:	e8 78 ea ff ff       	call   c000e4e4 <Computer::Computer()>
c000fa6c:	6a 00                	push   0x0
c000fa6e:	89 35 c8 cc 02 c0    	mov    DWORD PTR ds:0xc002ccc8,esi
c000fa74:	6a 00                	push   0x0
c000fa76:	6a 00                	push   0x0
c000fa78:	56                   	push   esi
c000fa79:	e8 b6 f1 ff ff       	call   c000ec34 <Computer::open(int, int, void*)>
c000fa7e:	83 c4 14             	add    esp,0x14
c000fa81:	53                   	push   ebx
c000fa82:	e8 77 23 00 00       	call   c0011dfe <VAS::~VAS()>
c000fa87:	c7 04 24 24 8e 02 c0 	mov    DWORD PTR [esp],0xc0028e24
c000fa8e:	e8 4e 9f 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000fa93:	83 c4 20             	add    esp,0x20
c000fa96:	5b                   	pop    ebx
c000fa97:	5e                   	pop    esi
c000fa98:	5f                   	pop    edi
c000fa99:	c3                   	ret    

c000fa9a <Phys::allocateDMA(unsigned long)>:
c000fa9a:	55                   	push   ebp
c000fa9b:	31 d2                	xor    edx,edx
c000fa9d:	57                   	push   edi
c000fa9e:	31 ed                	xor    ebp,ebp
c000faa0:	56                   	push   esi
c000faa1:	31 c9                	xor    ecx,ecx
c000faa3:	53                   	push   ebx
c000faa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faa8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000faae:	31 c0                	xor    eax,eax
c000fab0:	c1 ee 0c             	shr    esi,0xc
c000fab3:	eb 17                	jmp    c000facc <Phys::allocateDMA(unsigned long)+0x32>
c000fab5:	85 c9                	test   ecx,ecx
c000fab7:	75 04                	jne    c000fabd <Phys::allocateDMA(unsigned long)+0x23>
c000fab9:	89 d5                	mov    ebp,edx
c000fabb:	89 d0                	mov    eax,edx
c000fabd:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fac0:	39 de                	cmp    esi,ebx
c000fac2:	74 20                	je     c000fae4 <Phys::allocateDMA(unsigned long)+0x4a>
c000fac4:	42                   	inc    edx
c000fac5:	89 d9                	mov    ecx,ebx
c000fac7:	83 fa 2f             	cmp    edx,0x2f
c000faca:	7f 11                	jg     c000fadd <Phys::allocateDMA(unsigned long)+0x43>
c000facc:	80 ba 20 cd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd32e0],0x0
c000fad3:	74 e0                	je     c000fab5 <Phys::allocateDMA(unsigned long)+0x1b>
c000fad5:	31 c9                	xor    ecx,ecx
c000fad7:	42                   	inc    edx
c000fad8:	83 fa 2f             	cmp    edx,0x2f
c000fadb:	7e ef                	jle    c000facc <Phys::allocateDMA(unsigned long)+0x32>
c000fadd:	5b                   	pop    ebx
c000fade:	31 c0                	xor    eax,eax
c000fae0:	5e                   	pop    esi
c000fae1:	5f                   	pop    edi
c000fae2:	5d                   	pop    ebp
c000fae3:	c3                   	ret    
c000fae4:	8d 14 30             	lea    edx,[eax+esi*1]
c000fae7:	89 d7                	mov    edi,edx
c000fae9:	4f                   	dec    edi
c000faea:	79 03                	jns    c000faef <Phys::allocateDMA(unsigned long)+0x55>
c000faec:	8d 7a 0e             	lea    edi,[edx+0xe]
c000faef:	c1 ff 04             	sar    edi,0x4
c000faf2:	89 c2                	mov    edx,eax
c000faf4:	c1 fa 04             	sar    edx,0x4
c000faf7:	39 fa                	cmp    edx,edi
c000faf9:	75 2f                	jne    c000fb2a <Phys::allocateDMA(unsigned long)+0x90>
c000fafb:	85 db                	test   ebx,ebx
c000fafd:	74 1a                	je     c000fb19 <Phys::allocateDMA(unsigned long)+0x7f>
c000faff:	be 20 cd 02 c0       	mov    esi,0xc002cd20
c000fb04:	8d 90 20 cd 02 c0    	lea    edx,[eax-0x3ffd32e0]
c000fb0a:	f7 d6                	not    esi
c000fb0c:	29 c6                	sub    esi,eax
c000fb0e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb11:	42                   	inc    edx
c000fb12:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb15:	39 d9                	cmp    ecx,ebx
c000fb17:	7f f5                	jg     c000fb0e <Phys::allocateDMA(unsigned long)+0x74>
c000fb19:	85 ff                	test   edi,edi
c000fb1b:	74 13                	je     c000fb30 <Phys::allocateDMA(unsigned long)+0x96>
c000fb1d:	5b                   	pop    ebx
c000fb1e:	05 50 20 0c 00       	add    eax,0xc2050
c000fb23:	5e                   	pop    esi
c000fb24:	c1 e0 0c             	shl    eax,0xc
c000fb27:	5f                   	pop    edi
c000fb28:	5d                   	pop    ebp
c000fb29:	c3                   	ret    
c000fb2a:	89 ea                	mov    edx,ebp
c000fb2c:	31 c9                	xor    ecx,ecx
c000fb2e:	eb a7                	jmp    c000fad7 <Phys::allocateDMA(unsigned long)+0x3d>
c000fb30:	5b                   	pop    ebx
c000fb31:	c1 e0 0c             	shl    eax,0xc
c000fb34:	5e                   	pop    esi
c000fb35:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb3a:	5f                   	pop    edi
c000fb3b:	5d                   	pop    ebp
c000fb3c:	c3                   	ret    

c000fb3d <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb45:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fb4b:	c1 e9 0c             	shr    ecx,0xc
c000fb4e:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fb53:	76 25                	jbe    c000fb7a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fb55:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fb5a:	c1 e8 0c             	shr    eax,0xc
c000fb5d:	8d 50 10             	lea    edx,[eax+0x10]
c000fb60:	85 c9                	test   ecx,ecx
c000fb62:	74 15                	je     c000fb79 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fb64:	8d 82 20 cd 02 c0    	lea    eax,[edx-0x3ffd32e0]
c000fb6a:	8d 94 11 20 cd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd32e0]
c000fb71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb74:	40                   	inc    eax
c000fb75:	39 d0                	cmp    eax,edx
c000fb77:	75 f8                	jne    c000fb71 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fb79:	c3                   	ret    
c000fb7a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb80:	c1 ea 0c             	shr    edx,0xc
c000fb83:	eb db                	jmp    c000fb60 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fb85 <Phys::setPageState(unsigned long, bool)>:
c000fb85:	56                   	push   esi
c000fb86:	ba 01 00 00 00       	mov    edx,0x1
c000fb8b:	53                   	push   ebx
c000fb8c:	8b 35 e8 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bbe8
c000fb92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb9a:	89 c8                	mov    eax,ecx
c000fb9c:	83 e1 07             	and    ecx,0x7
c000fb9f:	c1 e8 03             	shr    eax,0x3
c000fba2:	d3 e3                	shl    ebx,cl
c000fba4:	01 c6                	add    esi,eax
c000fba6:	d3 e2                	shl    edx,cl
c000fba8:	f7 d2                	not    edx
c000fbaa:	20 16                	and    BYTE PTR [esi],dl
c000fbac:	03 05 e8 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bbe8
c000fbb2:	08 18                	or     BYTE PTR [eax],bl
c000fbb4:	5b                   	pop    ebx
c000fbb5:	5e                   	pop    esi
c000fbb6:	c3                   	ret    

c000fbb7 <Phys::getPageState(unsigned long)>:
c000fbb7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fbbb:	8b 15 e8 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbe8
c000fbc1:	89 c8                	mov    eax,ecx
c000fbc3:	83 e1 07             	and    ecx,0x7
c000fbc6:	c1 e8 03             	shr    eax,0x3
c000fbc9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fbcd:	d3 f8                	sar    eax,cl
c000fbcf:	83 e0 01             	and    eax,0x1
c000fbd2:	c3                   	ret    

c000fbd3 <Phys::freePage(unsigned long)>:
c000fbd3:	53                   	push   ebx
c000fbd4:	83 ec 08             	sub    esp,0x8
c000fbd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbdb:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fbe1:	76 57                	jbe    c000fc3a <Phys::freePage(unsigned long)+0x67>
c000fbe3:	c1 eb 0c             	shr    ebx,0xc
c000fbe6:	53                   	push   ebx
c000fbe7:	e8 cb ff ff ff       	call   c000fbb7 <Phys::getPageState(unsigned long)>
c000fbec:	5a                   	pop    edx
c000fbed:	84 c0                	test   al,al
c000fbef:	74 5b                	je     c000fc4c <Phys::freePage(unsigned long)+0x79>
c000fbf1:	a1 0c cd 02 c0       	mov    eax,ds:0xc002cd0c
c000fbf6:	48                   	dec    eax
c000fbf7:	a3 0c cd 02 c0       	mov    ds:0xc002cd0c,eax
c000fbfc:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbff:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc02:	c1 e0 02             	shl    eax,0x2
c000fc05:	99                   	cdq    
c000fc06:	f7 3d 10 cd 02 c0    	idiv   DWORD PTR ds:0xc002cd10
c000fc0c:	39 05 08 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd08,eax
c000fc12:	75 13                	jne    c000fc27 <Phys::freePage(unsigned long)+0x54>
c000fc14:	83 ec 08             	sub    esp,0x8
c000fc17:	6a 00                	push   0x0
c000fc19:	53                   	push   ebx
c000fc1a:	e8 66 ff ff ff       	call   c000fb85 <Phys::setPageState(unsigned long, bool)>
c000fc1f:	83 c4 10             	add    esp,0x10
c000fc22:	83 c4 08             	add    esp,0x8
c000fc25:	5b                   	pop    ebx
c000fc26:	c3                   	ret    
c000fc27:	83 ec 0c             	sub    esp,0xc
c000fc2a:	a3 08 cd 02 c0       	mov    ds:0xc002cd08,eax
c000fc2f:	50                   	push   eax
c000fc30:	e8 5b 0a 00 00       	call   c0010690 <VgaText::updateRAMUsageDisplay(int)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	eb da                	jmp    c000fc14 <Phys::freePage(unsigned long)+0x41>
c000fc3a:	68 00 10 00 00       	push   0x1000
c000fc3f:	53                   	push   ebx
c000fc40:	e8 f8 fe ff ff       	call   c000fb3d <Phys::freeDMA(unsigned long, unsigned long)>
c000fc45:	59                   	pop    ecx
c000fc46:	5b                   	pop    ebx
c000fc47:	83 c4 08             	add    esp,0x8
c000fc4a:	5b                   	pop    ebx
c000fc4b:	c3                   	ret    
c000fc4c:	c7 44 24 10 3f 8e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028e3f
c000fc54:	83 c4 08             	add    esp,0x8
c000fc57:	5b                   	pop    ebx
c000fc58:	e9 84 9d 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>

c000fc5d <Phys::allocatePage()>:
c000fc5d:	56                   	push   esi
c000fc5e:	53                   	push   ebx
c000fc5f:	51                   	push   ecx
c000fc60:	8b 35 00 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd00
c000fc66:	89 f3                	mov    ebx,esi
c000fc68:	eb 0a                	jmp    c000fc74 <Phys::allocatePage()+0x17>
c000fc6a:	89 1d 00 cd 02 c0    	mov    DWORD PTR ds:0xc002cd00,ebx
c000fc70:	39 de                	cmp    esi,ebx
c000fc72:	74 24                	je     c000fc98 <Phys::allocatePage()+0x3b>
c000fc74:	53                   	push   ebx
c000fc75:	e8 3d ff ff ff       	call   c000fbb7 <Phys::getPageState(unsigned long)>
c000fc7a:	5a                   	pop    edx
c000fc7b:	84 c0                	test   al,al
c000fc7d:	74 5a                	je     c000fcd9 <Phys::allocatePage()+0x7c>
c000fc7f:	43                   	inc    ebx
c000fc80:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc86:	75 e2                	jne    c000fc6a <Phys::allocatePage()+0xd>
c000fc88:	31 db                	xor    ebx,ebx
c000fc8a:	c7 05 00 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd00,0x0
c000fc94:	39 de                	cmp    esi,ebx
c000fc96:	75 dc                	jne    c000fc74 <Phys::allocatePage()+0x17>
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	68 55 8e 02 c0       	push   0xc0028e55
c000fca0:	e8 ea 2b 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000fca5:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fcac:	e8 e9 fd ff ff       	call   c000fa9a <Phys::allocateDMA(unsigned long)>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	85 c0                	test   eax,eax
c000fcb6:	75 56                	jne    c000fd0e <Phys::allocatePage()+0xb1>
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	68 66 8e 02 c0       	push   0xc0028e66
c000fcc0:	e8 1c 9d 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	8b 1d 00 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd00
c000fcce:	53                   	push   ebx
c000fccf:	e8 e3 fe ff ff       	call   c000fbb7 <Phys::getPageState(unsigned long)>
c000fcd4:	5a                   	pop    edx
c000fcd5:	84 c0                	test   al,al
c000fcd7:	75 a6                	jne    c000fc7f <Phys::allocatePage()+0x22>
c000fcd9:	6a 01                	push   0x1
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 a4 fe ff ff       	call   c000fb85 <Phys::setPageState(unsigned long, bool)>
c000fce1:	a1 0c cd 02 c0       	mov    eax,ds:0xc002cd0c
c000fce6:	59                   	pop    ecx
c000fce7:	40                   	inc    eax
c000fce8:	5b                   	pop    ebx
c000fce9:	a3 0c cd 02 c0       	mov    ds:0xc002cd0c,eax
c000fcee:	8d 04 80             	lea    eax,[eax+eax*4]
c000fcf1:	8d 04 80             	lea    eax,[eax+eax*4]
c000fcf4:	c1 e0 02             	shl    eax,0x2
c000fcf7:	99                   	cdq    
c000fcf8:	f7 3d 10 cd 02 c0    	idiv   DWORD PTR ds:0xc002cd10
c000fcfe:	39 05 08 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd08,eax
c000fd04:	75 0c                	jne    c000fd12 <Phys::allocatePage()+0xb5>
c000fd06:	a1 00 cd 02 c0       	mov    eax,ds:0xc002cd00
c000fd0b:	c1 e0 0c             	shl    eax,0xc
c000fd0e:	5a                   	pop    edx
c000fd0f:	5b                   	pop    ebx
c000fd10:	5e                   	pop    esi
c000fd11:	c3                   	ret    
c000fd12:	83 ec 0c             	sub    esp,0xc
c000fd15:	a3 08 cd 02 c0       	mov    ds:0xc002cd08,eax
c000fd1a:	50                   	push   eax
c000fd1b:	e8 70 09 00 00       	call   c0010690 <VgaText::updateRAMUsageDisplay(int)>
c000fd20:	83 c4 10             	add    esp,0x10
c000fd23:	eb e1                	jmp    c000fd06 <Phys::allocatePage()+0xa9>

c000fd25 <Phys::allocateContiguousPages(int)>:
c000fd25:	57                   	push   edi
c000fd26:	56                   	push   esi
c000fd27:	53                   	push   ebx
c000fd28:	31 db                	xor    ebx,ebx
c000fd2a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd2e:	e8 5d d2 00 00       	call   c001cf90 <lockScheduler()>
c000fd33:	85 db                	test   ebx,ebx
c000fd35:	75 11                	jne    c000fd48 <Phys::allocateContiguousPages(int)+0x23>
c000fd37:	e8 21 ff ff ff       	call   c000fc5d <Phys::allocatePage()>
c000fd3c:	83 ff 01             	cmp    edi,0x1
c000fd3f:	89 c6                	mov    esi,eax
c000fd41:	74 21                	je     c000fd64 <Phys::allocateContiguousPages(int)+0x3f>
c000fd43:	bb 01 00 00 00       	mov    ebx,0x1
c000fd48:	e8 10 ff ff ff       	call   c000fc5d <Phys::allocatePage()>
c000fd4d:	89 da                	mov    edx,ebx
c000fd4f:	c1 e2 0c             	shl    edx,0xc
c000fd52:	01 f2                	add    edx,esi
c000fd54:	39 c2                	cmp    edx,eax
c000fd56:	74 17                	je     c000fd6f <Phys::allocateContiguousPages(int)+0x4a>
c000fd58:	bb 01 00 00 00       	mov    ebx,0x1
c000fd5d:	89 c6                	mov    esi,eax
c000fd5f:	83 ff 01             	cmp    edi,0x1
c000fd62:	75 e4                	jne    c000fd48 <Phys::allocateContiguousPages(int)+0x23>
c000fd64:	e8 29 d2 00 00       	call   c001cf92 <unlockScheduler()>
c000fd69:	89 f0                	mov    eax,esi
c000fd6b:	5b                   	pop    ebx
c000fd6c:	5e                   	pop    esi
c000fd6d:	5f                   	pop    edi
c000fd6e:	c3                   	ret    
c000fd6f:	43                   	inc    ebx
c000fd70:	39 fb                	cmp    ebx,edi
c000fd72:	75 bf                	jne    c000fd33 <Phys::allocateContiguousPages(int)+0xe>
c000fd74:	e8 19 d2 00 00       	call   c001cf92 <unlockScheduler()>
c000fd79:	89 f0                	mov    eax,esi
c000fd7b:	5b                   	pop    ebx
c000fd7c:	5e                   	pop    esi
c000fd7d:	5f                   	pop    edi
c000fd7e:	c3                   	ret    

c000fd7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd7f:	56                   	push   esi
c000fd80:	53                   	push   ebx
c000fd81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd85:	39 1d 04 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd04,ebx
c000fd8b:	73 06                	jae    c000fd93 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd8d:	89 1d 04 cd 02 c0    	mov    DWORD PTR ds:0xc002cd04,ebx
c000fd93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd97:	c1 eb 0c             	shr    ebx,0xc
c000fd9a:	c1 e8 0c             	shr    eax,0xc
c000fd9d:	39 d8                	cmp    eax,ebx
c000fd9f:	73 13                	jae    c000fdb4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fda1:	6a 00                	push   0x0
c000fda3:	8d 70 01             	lea    esi,[eax+0x1]
c000fda6:	50                   	push   eax
c000fda7:	e8 d9 fd ff ff       	call   c000fb85 <Phys::setPageState(unsigned long, bool)>
c000fdac:	5a                   	pop    edx
c000fdad:	89 f0                	mov    eax,esi
c000fdaf:	59                   	pop    ecx
c000fdb0:	39 f3                	cmp    ebx,esi
c000fdb2:	75 ed                	jne    c000fda1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdb4:	5b                   	pop    ebx
c000fdb5:	5e                   	pop    esi
c000fdb6:	c3                   	ret    

c000fdb7 <Phys::physicalMemorySetup(unsigned int)>:
c000fdb7:	55                   	push   ebp
c000fdb8:	57                   	push   edi
c000fdb9:	56                   	push   esi
c000fdba:	53                   	push   ebx
c000fdbb:	31 db                	xor    ebx,ebx
c000fdbd:	83 ec 40             	sub    esp,0x40
c000fdc0:	6a 30                	push   0x30
c000fdc2:	6a 00                	push   0x0
c000fdc4:	68 20 cd 02 c0       	push   0xc002cd20
c000fdc9:	e8 bd 08 ff ff       	call   c000068b <memset>
c000fdce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fdd2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fdd7:	05 00 10 00 00       	add    eax,0x1000
c000fddc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	83 ec 08             	sub    esp,0x8
c000fde6:	6a 01                	push   0x1
c000fde8:	53                   	push   ebx
c000fde9:	43                   	inc    ebx
c000fdea:	e8 96 fd ff ff       	call   c000fb85 <Phys::setPageState(unsigned long, bool)>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fdf8:	75 e9                	jne    c000fde3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fdfa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe01:	66 85 c0             	test   ax,ax
c000fe04:	0f 84 8e 01 00 00    	je     c000ff98 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe0e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe23:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe2b:	eb 15                	jmp    c000fe42 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe2d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe31:	83 c3 18             	add    ebx,0x18
c000fe34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe38:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe3c:	0f 84 66 01 00 00    	je     c000ffa8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe42:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe48:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe53:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe55:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe58:	01 f0                	add    eax,esi
c000fe5a:	55                   	push   ebp
c000fe5b:	11 fa                	adc    edx,edi
c000fe5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe61:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe65:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe69:	56                   	push   esi
c000fe6a:	68 a0 8e 02 c0       	push   0xc0028ea0
c000fe6f:	e8 1b 2a 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000fe74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	09 f8                	or     eax,edi
c000fe7d:	0f 85 25 01 00 00    	jne    c000ffa8 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe83:	4d                   	dec    ebp
c000fe84:	75 a7                	jne    c000fe2d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe86:	ba 00 00 08 00       	mov    edx,0x80000
c000fe8b:	89 c1                	mov    ecx,eax
c000fe8d:	39 f2                	cmp    edx,esi
c000fe8f:	19 f9                	sbb    ecx,edi
c000fe91:	0f 82 a7 00 00 00    	jb     c000ff3e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe97:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe9b:	89 c1                	mov    ecx,eax
c000fe9d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fea1:	0f 83 97 00 00 00    	jae    c000ff3e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fea7:	ba 00 00 0a 00       	mov    edx,0xa0000
c000feac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000feb0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000feb4:	39 fa                	cmp    edx,edi
c000feb6:	19 e8                	sbb    eax,ebp
c000feb8:	0f 82 14 01 00 00    	jb     c000ffd2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000febe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fec2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fec6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fecc:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fed1:	83 d5 ff             	adc    ebp,0xffffffff
c000fed4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fed8:	31 c0                	xor    eax,eax
c000feda:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fede:	39 fa                	cmp    edx,edi
c000fee0:	89 c1                	mov    ecx,eax
c000fee2:	19 e9                	sbb    ecx,ebp
c000fee4:	0f 83 43 ff ff ff    	jae    c000fe2d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feea:	be 00 00 08 00       	mov    esi,0x80000
c000feef:	50                   	push   eax
c000fef0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fef4:	57                   	push   edi
c000fef5:	56                   	push   esi
c000fef6:	68 c4 8e 02 c0       	push   0xc0028ec4
c000fefb:	e8 8f 29 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ff00:	5a                   	pop    edx
c000ff01:	59                   	pop    ecx
c000ff02:	57                   	push   edi
c000ff03:	56                   	push   esi
c000ff04:	e8 76 fe ff ff       	call   c000fd7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff09:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff11:	83 c4 0c             	add    esp,0xc
c000ff14:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff18:	03 05 10 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cd10
c000ff1e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff25:	a3 10 cd 02 c0       	mov    ds:0xc002cd10,eax
c000ff2a:	52                   	push   edx
c000ff2b:	50                   	push   eax
c000ff2c:	68 82 8e 02 c0       	push   0xc0028e82
c000ff31:	e8 59 29 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	e9 ef fe ff ff       	jmp    c000fe2d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff3e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff4a:	39 ea                	cmp    edx,ebp
c000ff4c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff50:	0f 82 d7 fe ff ff    	jb     c000fe2d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff56:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff5b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff5f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff63:	0f 83 c4 fe ff ff    	jae    c000fe2d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff69:	39 ee                	cmp    esi,ebp
c000ff6b:	89 f8                	mov    eax,edi
c000ff6d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff71:	0f 83 78 ff ff ff    	jae    c000feef <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff7f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff83:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff87:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff93:	e9 57 ff ff ff       	jmp    c000feef <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	68 74 8e 02 c0       	push   0xc0028e74
c000ffa0:	e8 3c 9a 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c000ffa5:	83 c4 10             	add    esp,0x10
c000ffa8:	bb 40 01 00 00       	mov    ebx,0x140
c000ffad:	83 ec 08             	sub    esp,0x8
c000ffb0:	6a 00                	push   0x0
c000ffb2:	53                   	push   ebx
c000ffb3:	43                   	inc    ebx
c000ffb4:	e8 cc fb ff ff       	call   c000fb85 <Phys::setPageState(unsigned long, bool)>
c000ffb9:	ff 05 10 cd 02 c0    	inc    DWORD PTR ds:0xc002cd10
c000ffbf:	83 c4 10             	add    esp,0x10
c000ffc2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ffc8:	75 e3                	jne    c000ffad <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ffca:	83 c4 3c             	add    esp,0x3c
c000ffcd:	5b                   	pop    ebx
c000ffce:	5e                   	pop    esi
c000ffcf:	5f                   	pop    edi
c000ffd0:	5d                   	pop    ebp
c000ffd1:	c3                   	ret    
c000ffd2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ffda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ffe2:	e9 d7 fe ff ff       	jmp    c000febe <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ffe7:	90                   	nop

c000ffe8 <Pipe::isAtty()>:
c000ffe8:	31 c0                	xor    eax,eax
c000ffea:	c3                   	ret    
c000ffeb:	90                   	nop

c000ffec <Pipe::~Pipe()>:
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	ba 30 8f 02 c0       	mov    edx,0xc0028f30
c000fff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff8:	89 10                	mov    DWORD PTR [eax],edx
c000fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	50                   	push   eax
c0010002:	e8 37 16 00 00       	call   c001163e <UnixFile::~UnixFile()>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	90                   	nop
c001000b:	83 c4 0c             	add    esp,0xc
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <Pipe::~Pipe()>:
c0010010:	83 ec 0c             	sub    esp,0xc
c0010013:	83 ec 0c             	sub    esp,0xc
c0010016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001a:	e8 cd ff ff ff       	call   c000ffec <Pipe::~Pipe()>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	83 ec 08             	sub    esp,0x8
c0010025:	6a 20                	push   0x20
c0010027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001002b:	e8 7f 27 00 00       	call   c00127af <operator delete(void*, unsigned long)>
c0010030:	83 c4 10             	add    esp,0x10
c0010033:	83 c4 0c             	add    esp,0xc
c0010036:	c3                   	ret    
c0010037:	90                   	nop

c0010038 <Pipe::read(unsigned long long, void*, int*)>:
c0010038:	55                   	push   ebp
c0010039:	57                   	push   edi
c001003a:	56                   	push   esi
c001003b:	53                   	push   ebx
c001003c:	83 ec 1c             	sub    esp,0x1c
c001003f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010043:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010047:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001004b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001004e:	89 c8                	mov    eax,ecx
c0010050:	99                   	cdq    
c0010051:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010055:	74 19                	je     c0010070 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010057:	39 f9                	cmp    ecx,edi
c0010059:	89 d1                	mov    ecx,edx
c001005b:	19 f1                	sbb    ecx,esi
c001005d:	73 11                	jae    c0010070 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001005f:	e8 2c cf 00 00       	call   c001cf90 <lockScheduler()>
c0010064:	e8 63 d2 00 00       	call   c001d2cc <schedule()>
c0010069:	e8 24 cf 00 00       	call   c001cf92 <unlockScheduler()>
c001006e:	eb db                	jmp    c001004b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010070:	39 f8                	cmp    eax,edi
c0010072:	89 d1                	mov    ecx,edx
c0010074:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010078:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001007c:	19 f1                	sbb    ecx,esi
c001007e:	73 08                	jae    c0010088 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010084:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010088:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001008b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001008e:	29 c6                	sub    esi,eax
c0010090:	89 f1                	mov    ecx,esi
c0010092:	c1 f9 1f             	sar    ecx,0x1f
c0010095:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010099:	89 ca                	mov    edx,ecx
c001009b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001009f:	19 d1                	sbb    ecx,edx
c00100a1:	73 04                	jae    c00100a7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100a3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00100a7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00100ab:	89 fd                	mov    ebp,edi
c00100ad:	29 f5                	sub    ebp,esi
c00100af:	85 f6                	test   esi,esi
c00100b1:	74 12                	je     c00100c5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00100b3:	52                   	push   edx
c00100b4:	56                   	push   esi
c00100b5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00100b8:	50                   	push   eax
c00100b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00100bd:	e8 93 05 ff ff       	call   c0000655 <memcpy>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	85 ed                	test   ebp,ebp
c00100c7:	74 12                	je     c00100db <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00100c9:	50                   	push   eax
c00100ca:	55                   	push   ebp
c00100cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00100ce:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00100d2:	56                   	push   esi
c00100d3:	e8 7d 05 ff ff       	call   c0000655 <memcpy>
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00100de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100e1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100e4:	99                   	cdq    
c00100e5:	89 f7                	mov    edi,esi
c00100e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00100eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00100ef:	c1 ff 1f             	sar    edi,0x1f
c00100f2:	57                   	push   edi
c00100f3:	56                   	push   esi
c00100f4:	52                   	push   edx
c00100f5:	50                   	push   eax
c00100f6:	e8 01 56 01 00       	call   c00256fc <__umoddi3>
c00100fb:	83 c4 10             	add    esp,0x10
c00100fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010101:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010106:	75 10                	jne    c0010118 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c0010108:	83 ec 0c             	sub    esp,0xc
c001010b:	68 ed 8e 02 c0       	push   0xc0028eed
c0010110:	e8 cc 98 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0010115:	83 c4 10             	add    esp,0x10
c0010118:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001011c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010120:	89 10                	mov    DWORD PTR [eax],edx
c0010122:	83 c4 1c             	add    esp,0x1c
c0010125:	31 c0                	xor    eax,eax
c0010127:	5b                   	pop    ebx
c0010128:	5e                   	pop    esi
c0010129:	5f                   	pop    edi
c001012a:	5d                   	pop    ebp
c001012b:	c3                   	ret    

c001012c <Pipe::write(unsigned long long, void*, int*)>:
c001012c:	55                   	push   ebp
c001012d:	57                   	push   edi
c001012e:	56                   	push   esi
c001012f:	53                   	push   ebx
c0010130:	83 ec 1c             	sub    esp,0x1c
c0010133:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010137:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001013b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001013f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010142:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010145:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010148:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001014c:	89 de                	mov    esi,ebx
c001014e:	89 df                	mov    edi,ebx
c0010150:	c1 ff 1f             	sar    edi,0x1f
c0010153:	01 c6                	add    esi,eax
c0010155:	89 c8                	mov    eax,ecx
c0010157:	11 d7                	adc    edi,edx
c0010159:	99                   	cdq    
c001015a:	39 f1                	cmp    ecx,esi
c001015c:	89 d0                	mov    eax,edx
c001015e:	19 f8                	sbb    eax,edi
c0010160:	b8 01 00 00 00       	mov    eax,0x1
c0010165:	0f 82 80 00 00 00    	jb     c00101eb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001016b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001016e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010171:	01 d8                	add    eax,ebx
c0010173:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010177:	99                   	cdq    
c0010178:	f7 f9                	idiv   ecx
c001017a:	29 d1                	sub    ecx,edx
c001017c:	89 d7                	mov    edi,edx
c001017e:	89 c8                	mov    eax,ecx
c0010180:	99                   	cdq    
c0010181:	39 ce                	cmp    esi,ecx
c0010183:	19 d3                	sbb    ebx,edx
c0010185:	bb 00 00 00 00       	mov    ebx,0x0
c001018a:	72 04                	jb     c0010190 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001018c:	89 f3                	mov    ebx,esi
c001018e:	29 cb                	sub    ebx,ecx
c0010190:	89 f1                	mov    ecx,esi
c0010192:	29 d9                	sub    ecx,ebx
c0010194:	74 1a                	je     c00101b0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010196:	52                   	push   edx
c0010197:	51                   	push   ecx
c0010198:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001019c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101a0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101a3:	57                   	push   edi
c00101a4:	e8 ac 04 ff ff       	call   c0000655 <memcpy>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101b0:	85 db                	test   ebx,ebx
c00101b2:	74 12                	je     c00101c6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00101b4:	50                   	push   eax
c00101b5:	53                   	push   ebx
c00101b6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00101ba:	51                   	push   ecx
c00101bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00101be:	e8 92 04 ff ff       	call   c0000655 <memcpy>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00101c9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00101ce:	75 10                	jne    c00101e0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00101d0:	83 ec 0c             	sub    esp,0xc
c00101d3:	68 09 8f 02 c0       	push   0xc0028f09
c00101d8:	e8 04 98 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00101e7:	89 38                	mov    DWORD PTR [eax],edi
c00101e9:	31 c0                	xor    eax,eax
c00101eb:	83 c4 1c             	add    esp,0x1c
c00101ee:	5b                   	pop    ebx
c00101ef:	5e                   	pop    esi
c00101f0:	5f                   	pop    edi
c00101f1:	5d                   	pop    ebp
c00101f2:	c3                   	ret    
c00101f3:	90                   	nop

c00101f4 <Pipe::Pipe(int)>:
c00101f4:	83 ec 0c             	sub    esp,0xc
c00101f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fb:	83 ec 08             	sub    esp,0x8
c00101fe:	6a 00                	push   0x0
c0010200:	50                   	push   eax
c0010201:	e8 56 12 00 00       	call   c001145c <UnixFile::UnixFile(int)>
c0010206:	83 c4 10             	add    esp,0x10
c0010209:	ba 30 8f 02 c0       	mov    edx,0xc0028f30
c001020e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010212:	89 10                	mov    DWORD PTR [eax],edx
c0010214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010218:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001021c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001021f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010223:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001022a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001022e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010235:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010239:	83 ec 0c             	sub    esp,0xc
c001023c:	50                   	push   eax
c001023d:	e8 a8 f3 ff ff       	call   c000f5ea <malloc>
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	89 c2                	mov    edx,eax
c0010247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001024e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010252:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010256:	90                   	nop
c0010257:	83 c4 0c             	add    esp,0xc
c001025a:	c3                   	ret    
c001025b:	90                   	nop

c001025c <VgaText::isAtty()>:
c001025c:	b0 01                	mov    al,0x1
c001025e:	c3                   	ret    
c001025f:	90                   	nop

c0010260 <VgaText::~VgaText()>:
c0010260:	83 ec 0c             	sub    esp,0xc
c0010263:	ba ec 8f 02 c0       	mov    edx,0xc0028fec
c0010268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001026c:	89 10                	mov    DWORD PTR [eax],edx
c001026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010272:	83 ec 0c             	sub    esp,0xc
c0010275:	50                   	push   eax
c0010276:	e8 c3 13 00 00       	call   c001163e <UnixFile::~UnixFile()>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	90                   	nop
c001027f:	83 c4 0c             	add    esp,0xc
c0010282:	c3                   	ret    
c0010283:	90                   	nop

c0010284 <VgaText::~VgaText()>:
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	83 ec 0c             	sub    esp,0xc
c001028a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001028e:	e8 cd ff ff ff       	call   c0010260 <VgaText::~VgaText()>
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	83 ec 08             	sub    esp,0x8
c0010299:	68 60 12 00 00       	push   0x1260
c001029e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a2:	e8 08 25 00 00       	call   c00127af <operator delete(void*, unsigned long)>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	83 c4 0c             	add    esp,0xc
c00102ad:	c3                   	ret    

c00102ae <VgaText::read(unsigned long long, void*, int*)>:
c00102ae:	83 ec 10             	sub    esp,0x10
c00102b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102bd:	e8 39 58 00 00       	call   c0015afb <readKeyboard(VgaText*, char*, unsigned long)>
c00102c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102c6:	89 02                	mov    DWORD PTR [edx],eax
c00102c8:	31 c0                	xor    eax,eax
c00102ca:	83 c4 1c             	add    esp,0x1c
c00102cd:	c3                   	ret    

c00102ce <setTerminalScrollLock(bool)>:
c00102ce:	c3                   	ret    

c00102cf <addToTerminalCycle(VgaText*)>:
c00102cf:	8b 15 a0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda0
c00102d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d9:	85 d2                	test   edx,edx
c00102db:	75 0c                	jne    c00102e9 <addToTerminalCycle(VgaText*)+0x1a>
c00102dd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00102e3:	a3 a0 cd 02 c0       	mov    ds:0xc002cda0,eax
c00102e8:	c3                   	ret    
c00102e9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00102ef:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00102f5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00102fb:	c3                   	ret    

c00102fc <installVgaTextImplementation()>:
c00102fc:	83 ec 10             	sub    esp,0x10
c00102ff:	6a 20                	push   0x20
c0010301:	6a 00                	push   0x0
c0010303:	68 80 cd 02 c0       	push   0xc002cd80
c0010308:	e8 7e 03 ff ff       	call   c000068b <memset>
c001030d:	83 c4 1c             	add    esp,0x1c
c0010310:	c3                   	ret    

c0010311 <scrollTerminalScrollLock(int)>:
c0010311:	c3                   	ret    

c0010312 <VgaText::load()>:
c0010312:	53                   	push   ebx
c0010313:	31 c0                	xor    eax,eax
c0010315:	83 ec 58             	sub    esp,0x58
c0010318:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001031c:	89 e2                	mov    edx,esp
c001031e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010322:	40                   	inc    eax
c0010323:	83 f8 50             	cmp    eax,0x50
c0010326:	75 f6                	jne    c001031e <VgaText::load()+0xc>
c0010328:	31 c0                	xor    eax,eax
c001032a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010331:	84 c9                	test   cl,cl
c0010333:	74 06                	je     c001033b <VgaText::load()+0x29>
c0010335:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010338:	40                   	inc    eax
c0010339:	eb ef                	jmp    c001032a <VgaText::load()+0x18>
c001033b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010341:	85 c0                	test   eax,eax
c0010343:	74 09                	je     c001034e <VgaText::load()+0x3c>
c0010345:	51                   	push   ecx
c0010346:	51                   	push   ecx
c0010347:	52                   	push   edx
c0010348:	53                   	push   ebx
c0010349:	ff d0                	call   eax
c001034b:	83 c4 10             	add    esp,0x10
c001034e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010354:	85 c0                	test   eax,eax
c0010356:	74 09                	je     c0010361 <VgaText::load()+0x4f>
c0010358:	83 ec 0c             	sub    esp,0xc
c001035b:	53                   	push   ebx
c001035c:	ff d0                	call   eax
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	83 c4 58             	add    esp,0x58
c0010364:	5b                   	pop    ebx
c0010365:	c3                   	ret    

c0010366 <VgaText::updateCursor()>:
c0010366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001036a:	39 05 a4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda4,eax
c0010370:	75 0c                	jne    c001037e <VgaText::updateCursor()+0x18>
c0010372:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010378:	85 c0                	test   eax,eax
c001037a:	74 02                	je     c001037e <VgaText::updateCursor()+0x18>
c001037c:	ff e0                	jmp    eax
c001037e:	c3                   	ret    
c001037f:	90                   	nop

c0010380 <VgaText::showCursor(bool)>:
c0010380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010388:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001038e:	c3                   	ret    
c001038f:	90                   	nop

c0010390 <VgaText::disableBlink(bool)>:
c0010390:	56                   	push   esi
c0010391:	53                   	push   ebx
c0010392:	51                   	push   ecx
c0010393:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010397:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001039b:	39 1d a4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda4,ebx
c00103a1:	75 18                	jne    c00103bb <VgaText::disableBlink(bool)+0x2b>
c00103a3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00103a9:	85 c0                	test   eax,eax
c00103ab:	74 0e                	je     c00103bb <VgaText::disableBlink(bool)+0x2b>
c00103ad:	89 f1                	mov    ecx,esi
c00103af:	52                   	push   edx
c00103b0:	52                   	push   edx
c00103b1:	0f b6 d1             	movzx  edx,cl
c00103b4:	52                   	push   edx
c00103b5:	53                   	push   ebx
c00103b6:	ff d0                	call   eax
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	89 f0                	mov    eax,esi
c00103bd:	83 f0 01             	xor    eax,0x1
c00103c0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00103c6:	58                   	pop    eax
c00103c7:	5b                   	pop    ebx
c00103c8:	5e                   	pop    esi
c00103c9:	c3                   	ret    

c00103ca <VgaText::doANSI_SGR(int)>:
c00103ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d2:	85 d2                	test   edx,edx
c00103d4:	75 14                	jne    c00103ea <VgaText::doANSI_SGR(int)+0x20>
c00103d6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00103dc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00103e2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00103e8:	eb 65                	jmp    c001044f <VgaText::doANSI_SGR(int)+0x85>
c00103ea:	83 fa 07             	cmp    edx,0x7
c00103ed:	75 14                	jne    c0010403 <VgaText::doANSI_SGR(int)+0x39>
c00103ef:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00103f5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00103fb:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010401:	eb 4c                	jmp    c001044f <VgaText::doANSI_SGR(int)+0x85>
c0010403:	83 fa 1b             	cmp    edx,0x1b
c0010406:	74 ce                	je     c00103d6 <VgaText::doANSI_SGR(int)+0xc>
c0010408:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001040b:	83 f9 07             	cmp    ecx,0x7
c001040e:	77 09                	ja     c0010419 <VgaText::doANSI_SGR(int)+0x4f>
c0010410:	8b 14 8d 20 bc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd43e0]
c0010417:	eb 20                	jmp    c0010439 <VgaText::doANSI_SGR(int)+0x6f>
c0010419:	8d 4a d8             	lea    ecx,[edx-0x28]
c001041c:	83 f9 07             	cmp    ecx,0x7
c001041f:	77 09                	ja     c001042a <VgaText::doANSI_SGR(int)+0x60>
c0010421:	8b 14 8d 20 bc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd43e0]
c0010428:	eb 25                	jmp    c001044f <VgaText::doANSI_SGR(int)+0x85>
c001042a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001042d:	83 f9 07             	cmp    ecx,0x7
c0010430:	77 0e                	ja     c0010440 <VgaText::doANSI_SGR(int)+0x76>
c0010432:	8b 14 95 d8 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4528]
c0010439:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001043f:	c3                   	ret    
c0010440:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010443:	83 f9 07             	cmp    ecx,0x7
c0010446:	77 0d                	ja     c0010455 <VgaText::doANSI_SGR(int)+0x8b>
c0010448:	8b 14 95 b0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4550]
c001044f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010455:	c3                   	ret    

c0010456 <VgaText::setDefaultBgColour(VgaColour)>:
c0010456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010464:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001046a:	c3                   	ret    
c001046b:	90                   	nop

c001046c <VgaText::setDefaultFgColour(VgaColour)>:
c001046c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010474:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001047a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010480:	c3                   	ret    
c0010481:	90                   	nop

c0010482 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010482:	53                   	push   ebx
c0010483:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010487:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001048b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001048f:	51                   	push   ecx
c0010490:	e8 c1 ff ff ff       	call   c0010456 <VgaText::setDefaultBgColour(VgaColour)>
c0010495:	58                   	pop    eax
c0010496:	5a                   	pop    edx
c0010497:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001049b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001049f:	5b                   	pop    ebx
c00104a0:	eb ca                	jmp    c001046c <VgaText::setDefaultFgColour(VgaColour)>

c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104a6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104ab:	83 e0 0f             	and    eax,0xf
c00104ae:	c1 e2 04             	shl    edx,0x4
c00104b1:	09 d0                	or     eax,edx
c00104b3:	c3                   	ret    

c00104b4 <VgaText::scrollScreen()>:
c00104b4:	57                   	push   edi
c00104b5:	56                   	push   esi
c00104b6:	be 01 00 00 00       	mov    esi,0x1
c00104bb:	53                   	push   ebx
c00104bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104c0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00104c6:	31 ff                	xor    edi,edi
c00104c8:	01 d9                	add    ecx,ebx
c00104ca:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00104cd:	83 fe 17             	cmp    esi,0x17
c00104d0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00104d6:	75 28                	jne    c0010500 <VgaText::scrollScreen()+0x4c>
c00104d8:	f7 c7 01 00 00 00    	test   edi,0x1
c00104de:	74 1c                	je     c00104fc <VgaText::scrollScreen()+0x48>
c00104e0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00104e7:	50                   	push   eax
c00104e8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00104ef:	50                   	push   eax
c00104f0:	e8 ad ff ff ff       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104f5:	5a                   	pop    edx
c00104f6:	5a                   	pop    edx
c00104f7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00104fa:	eb 04                	jmp    c0010500 <VgaText::scrollScreen()+0x4c>
c00104fc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010500:	47                   	inc    edi
c0010501:	41                   	inc    ecx
c0010502:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010508:	75 c0                	jne    c00104ca <VgaText::scrollScreen()+0x16>
c001050a:	46                   	inc    esi
c001050b:	83 fe 18             	cmp    esi,0x18
c001050e:	75 b0                	jne    c00104c0 <VgaText::scrollScreen()+0xc>
c0010510:	39 1d a4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda4,ebx
c0010516:	75 24                	jne    c001053c <VgaText::scrollScreen()+0x88>
c0010518:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001051f:	74 08                	je     c0010529 <VgaText::scrollScreen()+0x75>
c0010521:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010527:	eb 13                	jmp    c001053c <VgaText::scrollScreen()+0x88>
c0010529:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001052f:	85 c0                	test   eax,eax
c0010531:	74 09                	je     c001053c <VgaText::scrollScreen()+0x88>
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	53                   	push   ebx
c0010537:	ff d0                	call   eax
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010540:	5b                   	pop    ebx
c0010541:	5e                   	pop    esi
c0010542:	5f                   	pop    edi
c0010543:	e9 1e fe ff ff       	jmp    c0010366 <VgaText::updateCursor()>

c0010548 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010548:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001054d:	c1 e0 08             	shl    eax,0x8
c0010550:	89 c2                	mov    edx,eax
c0010552:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010557:	09 d0                	or     eax,edx
c0010559:	c3                   	ret    

c001055a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001055a:	53                   	push   ebx
c001055b:	83 ec 08             	sub    esp,0x8
c001055e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010562:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010567:	50                   	push   eax
c0010568:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001056d:	50                   	push   eax
c001056e:	e8 2f ff ff ff       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010573:	5a                   	pop    edx
c0010574:	0f b6 c0             	movzx  eax,al
c0010577:	5b                   	pop    ebx
c0010578:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001057d:	50                   	push   eax
c001057e:	53                   	push   ebx
c001057f:	e8 c4 ff ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010584:	5a                   	pop    edx
c0010585:	5a                   	pop    edx
c0010586:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001058c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010590:	0f b7 d2             	movzx  edx,dx
c0010593:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010598:	39 0d a4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda4,ecx
c001059e:	75 14                	jne    c00105b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105a0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00105a6:	85 c0                	test   eax,eax
c00105a8:	74 0a                	je     c00105b4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105aa:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105ae:	83 c4 08             	add    esp,0x8
c00105b1:	5b                   	pop    ebx
c00105b2:	ff e0                	jmp    eax
c00105b4:	83 c4 08             	add    esp,0x8
c00105b7:	5b                   	pop    ebx
c00105b8:	c3                   	ret    
c00105b9:	90                   	nop

c00105ba <VgaText::getCursorX()>:
c00105ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105be:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00105c4:	c3                   	ret    
c00105c5:	90                   	nop

c00105c6 <VgaText::getCursorY()>:
c00105c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ca:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00105d0:	c3                   	ret    
c00105d1:	90                   	nop

c00105d2 <VgaText::setCursor(int, int)>:
c00105d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105da:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00105e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105e4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00105ea:	e9 77 fd ff ff       	jmp    c0010366 <VgaText::updateCursor()>
c00105ef:	90                   	nop

c00105f0 <VgaText::setCursorX(int)>:
c00105f0:	83 ec 10             	sub    esp,0x10
c00105f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105f7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00105fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010601:	50                   	push   eax
c0010602:	e8 cb ff ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010607:	83 c4 1c             	add    esp,0x1c
c001060a:	c3                   	ret    
c001060b:	90                   	nop

c001060c <VgaText::setCursorY(int)>:
c001060c:	83 ec 10             	sub    esp,0x10
c001060f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010613:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010617:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001061d:	50                   	push   eax
c001061e:	e8 af ff ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010623:	83 c4 1c             	add    esp,0x1c
c0010626:	c3                   	ret    
c0010627:	90                   	nop

c0010628 <VgaText::incrementCursor(bool)>:
c0010628:	56                   	push   esi
c0010629:	53                   	push   ebx
c001062a:	51                   	push   ecx
c001062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001062f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010633:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010639:	40                   	inc    eax
c001063a:	83 f8 50             	cmp    eax,0x50
c001063d:	74 08                	je     c0010647 <VgaText::incrementCursor(bool)+0x1f>
c001063f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010645:	eb 33                	jmp    c001067a <VgaText::incrementCursor(bool)+0x52>
c0010647:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001064d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010657:	8d 50 01             	lea    edx,[eax+0x1]
c001065a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010660:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010666:	75 12                	jne    c001067a <VgaText::incrementCursor(bool)+0x52>
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010671:	53                   	push   ebx
c0010672:	e8 3d fe ff ff       	call   c00104b4 <VgaText::scrollScreen()>
c0010677:	83 c4 10             	add    esp,0x10
c001067a:	89 f0                	mov    eax,esi
c001067c:	84 c0                	test   al,al
c001067e:	74 0c                	je     c001068c <VgaText::incrementCursor(bool)+0x64>
c0010680:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010684:	5a                   	pop    edx
c0010685:	5b                   	pop    ebx
c0010686:	5e                   	pop    esi
c0010687:	e9 da fc ff ff       	jmp    c0010366 <VgaText::updateCursor()>
c001068c:	58                   	pop    eax
c001068d:	5b                   	pop    ebx
c001068e:	5e                   	pop    esi
c001068f:	c3                   	ret    

c0010690 <VgaText::updateRAMUsageDisplay(int)>:
c0010690:	56                   	push   esi
c0010691:	8b 35 00 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bc00
c0010697:	53                   	push   ebx
c0010698:	bb 0a 00 00 00       	mov    ebx,0xa
c001069d:	6a 0f                	push   0xf
c001069f:	6a 00                	push   0x0
c00106a1:	e8 fc fd ff ff       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c00106a6:	5a                   	pop    edx
c00106a7:	59                   	pop    ecx
c00106a8:	0f b6 c8             	movzx  ecx,al
c00106ab:	51                   	push   ecx
c00106ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b0:	99                   	cdq    
c00106b1:	f7 fb                	idiv   ebx
c00106b3:	89 d3                	mov    ebx,edx
c00106b5:	83 c0 30             	add    eax,0x30
c00106b8:	83 c3 30             	add    ebx,0x30
c00106bb:	0f be c0             	movsx  eax,al
c00106be:	0f b6 db             	movzx  ebx,bl
c00106c1:	50                   	push   eax
c00106c2:	e8 81 fe ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00106c7:	5a                   	pop    edx
c00106c8:	5a                   	pop    edx
c00106c9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00106d0:	51                   	push   ecx
c00106d1:	53                   	push   ebx
c00106d2:	e8 71 fe ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00106d7:	5b                   	pop    ebx
c00106d8:	5a                   	pop    edx
c00106d9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00106e0:	51                   	push   ecx
c00106e1:	6a 25                	push   0x25
c00106e3:	e8 60 fe ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e8:	59                   	pop    ecx
c00106e9:	5b                   	pop    ebx
c00106ea:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00106f1:	5b                   	pop    ebx
c00106f2:	5e                   	pop    esi
c00106f3:	c3                   	ret    

c00106f4 <VgaText::updateDiskUsage()>:
c00106f4:	55                   	push   ebp
c00106f5:	bd 10 27 00 00       	mov    ebp,0x2710
c00106fa:	57                   	push   edi
c00106fb:	8b 3d 00 bc 02 c0    	mov    edi,DWORD PTR ds:0xc002bc00
c0010701:	56                   	push   esi
c0010702:	53                   	push   ebx
c0010703:	6a 0f                	push   0xf
c0010705:	6a 00                	push   0x0
c0010707:	e8 96 fd ff ff       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c001070c:	5a                   	pop    edx
c001070d:	0f b6 d8             	movzx  ebx,al
c0010710:	59                   	pop    ecx
c0010711:	8b 35 08 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f008
c0010717:	53                   	push   ebx
c0010718:	b9 0a 00 00 00       	mov    ecx,0xa
c001071d:	89 f0                	mov    eax,esi
c001071f:	99                   	cdq    
c0010720:	f7 fd                	idiv   ebp
c0010722:	99                   	cdq    
c0010723:	f7 f9                	idiv   ecx
c0010725:	8d 42 30             	lea    eax,[edx+0x30]
c0010728:	0f b6 c0             	movzx  eax,al
c001072b:	50                   	push   eax
c001072c:	e8 17 fe ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010731:	5d                   	pop    ebp
c0010732:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010737:	5a                   	pop    edx
c0010738:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001073c:	53                   	push   ebx
c001073d:	89 f0                	mov    eax,esi
c001073f:	99                   	cdq    
c0010740:	f7 fd                	idiv   ebp
c0010742:	99                   	cdq    
c0010743:	f7 f9                	idiv   ecx
c0010745:	8d 42 30             	lea    eax,[edx+0x30]
c0010748:	0f b6 c0             	movzx  eax,al
c001074b:	50                   	push   eax
c001074c:	e8 f7 fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010751:	5d                   	pop    ebp
c0010752:	bd 64 00 00 00       	mov    ebp,0x64
c0010757:	5a                   	pop    edx
c0010758:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001075f:	53                   	push   ebx
c0010760:	89 f0                	mov    eax,esi
c0010762:	99                   	cdq    
c0010763:	f7 fd                	idiv   ebp
c0010765:	99                   	cdq    
c0010766:	f7 f9                	idiv   ecx
c0010768:	8d 42 30             	lea    eax,[edx+0x30]
c001076b:	0f b6 c0             	movzx  eax,al
c001076e:	50                   	push   eax
c001076f:	e8 d4 fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010774:	5d                   	pop    ebp
c0010775:	5a                   	pop    edx
c0010776:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c001077d:	53                   	push   ebx
c001077e:	89 f0                	mov    eax,esi
c0010780:	99                   	cdq    
c0010781:	f7 f9                	idiv   ecx
c0010783:	89 d6                	mov    esi,edx
c0010785:	99                   	cdq    
c0010786:	f7 f9                	idiv   ecx
c0010788:	8d 42 30             	lea    eax,[edx+0x30]
c001078b:	0f b6 c0             	movzx  eax,al
c001078e:	50                   	push   eax
c001078f:	e8 b4 fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010794:	5d                   	pop    ebp
c0010795:	5a                   	pop    edx
c0010796:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c001079d:	53                   	push   ebx
c001079e:	8d 46 30             	lea    eax,[esi+0x30]
c00107a1:	0f b6 f0             	movzx  esi,al
c00107a4:	56                   	push   esi
c00107a5:	e8 9e fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00107aa:	5e                   	pop    esi
c00107ab:	8b 35 04 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f004
c00107b1:	5d                   	pop    ebp
c00107b2:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00107b9:	bd 10 27 00 00       	mov    ebp,0x2710
c00107be:	53                   	push   ebx
c00107bf:	89 f0                	mov    eax,esi
c00107c1:	99                   	cdq    
c00107c2:	f7 fd                	idiv   ebp
c00107c4:	99                   	cdq    
c00107c5:	f7 f9                	idiv   ecx
c00107c7:	8d 42 30             	lea    eax,[edx+0x30]
c00107ca:	0f b6 c0             	movzx  eax,al
c00107cd:	50                   	push   eax
c00107ce:	e8 75 fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00107d3:	5a                   	pop    edx
c00107d4:	5d                   	pop    ebp
c00107d5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00107dc:	bd e8 03 00 00       	mov    ebp,0x3e8
c00107e1:	53                   	push   ebx
c00107e2:	89 f0                	mov    eax,esi
c00107e4:	99                   	cdq    
c00107e5:	f7 fd                	idiv   ebp
c00107e7:	99                   	cdq    
c00107e8:	f7 f9                	idiv   ecx
c00107ea:	8d 42 30             	lea    eax,[edx+0x30]
c00107ed:	0f b6 c0             	movzx  eax,al
c00107f0:	50                   	push   eax
c00107f1:	e8 52 fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c00107f6:	5a                   	pop    edx
c00107f7:	5d                   	pop    ebp
c00107f8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00107ff:	bd 64 00 00 00       	mov    ebp,0x64
c0010804:	53                   	push   ebx
c0010805:	89 f0                	mov    eax,esi
c0010807:	99                   	cdq    
c0010808:	f7 fd                	idiv   ebp
c001080a:	99                   	cdq    
c001080b:	f7 f9                	idiv   ecx
c001080d:	83 c2 30             	add    edx,0x30
c0010810:	0f b6 d2             	movzx  edx,dl
c0010813:	52                   	push   edx
c0010814:	e8 2f fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010819:	5a                   	pop    edx
c001081a:	5d                   	pop    ebp
c001081b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010822:	53                   	push   ebx
c0010823:	89 f0                	mov    eax,esi
c0010825:	99                   	cdq    
c0010826:	f7 f9                	idiv   ecx
c0010828:	89 d6                	mov    esi,edx
c001082a:	99                   	cdq    
c001082b:	f7 f9                	idiv   ecx
c001082d:	8d 42 30             	lea    eax,[edx+0x30]
c0010830:	0f b6 c0             	movzx  eax,al
c0010833:	50                   	push   eax
c0010834:	e8 0f fd ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010839:	5a                   	pop    edx
c001083a:	59                   	pop    ecx
c001083b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010842:	53                   	push   ebx
c0010843:	8d 46 30             	lea    eax,[esi+0x30]
c0010846:	0f b6 f0             	movzx  esi,al
c0010849:	56                   	push   esi
c001084a:	e8 f9 fc ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c001084f:	5b                   	pop    ebx
c0010850:	5e                   	pop    esi
c0010851:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010858:	5b                   	pop    ebx
c0010859:	5e                   	pop    esi
c001085a:	5f                   	pop    edi
c001085b:	5d                   	pop    ebp
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <VgaText::updateTitle()>:
c001085e:	53                   	push   ebx
c001085f:	31 c0                	xor    eax,eax
c0010861:	83 ec 58             	sub    esp,0x58
c0010864:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010868:	89 e1                	mov    ecx,esp
c001086a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001086e:	40                   	inc    eax
c001086f:	83 f8 50             	cmp    eax,0x50
c0010872:	75 f6                	jne    c001086a <VgaText::updateTitle()+0xc>
c0010874:	31 c0                	xor    eax,eax
c0010876:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001087d:	84 db                	test   bl,bl
c001087f:	74 06                	je     c0010887 <VgaText::updateTitle()+0x29>
c0010881:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010884:	40                   	inc    eax
c0010885:	eb ef                	jmp    c0010876 <VgaText::updateTitle()+0x18>
c0010887:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001088d:	85 c0                	test   eax,eax
c001088f:	74 09                	je     c001089a <VgaText::updateTitle()+0x3c>
c0010891:	53                   	push   ebx
c0010892:	53                   	push   ebx
c0010893:	51                   	push   ecx
c0010894:	52                   	push   edx
c0010895:	ff d0                	call   eax
c0010897:	83 c4 10             	add    esp,0x10
c001089a:	e8 55 fe ff ff       	call   c00106f4 <VgaText::updateDiskUsage()>
c001089f:	83 c4 58             	add    esp,0x58
c00108a2:	5b                   	pop    ebx
c00108a3:	c3                   	ret    

c00108a4 <VgaText::setTitleTextColour(VgaColour)>:
c00108a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ac:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00108b2:	eb aa                	jmp    c001085e <VgaText::updateTitle()>

c00108b4 <VgaText::setTitleColour(VgaColour)>:
c00108b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108bc:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00108c2:	eb 9a                	jmp    c001085e <VgaText::updateTitle()>

c00108c4 <VgaText::setTitle(char*)>:
c00108c4:	53                   	push   ebx
c00108c5:	83 ec 10             	sub    esp,0x10
c00108c8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00108d6:	50                   	push   eax
c00108d7:	e8 4e fe fe ff       	call   c000072a <strcpy>
c00108dc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00108e0:	83 c4 18             	add    esp,0x18
c00108e3:	5b                   	pop    ebx
c00108e4:	e9 75 ff ff ff       	jmp    c001085e <VgaText::updateTitle()>
c00108e9:	90                   	nop

c00108ea <VgaText::decrementCursor(bool)>:
c00108ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00108ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00108f2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00108f8:	85 c0                	test   eax,eax
c00108fa:	74 07                	je     c0010903 <VgaText::decrementCursor(bool)+0x19>
c00108fc:	48                   	dec    eax
c00108fd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010903:	84 c9                	test   cl,cl
c0010905:	74 09                	je     c0010910 <VgaText::decrementCursor(bool)+0x26>
c0010907:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001090b:	e9 56 fa ff ff       	jmp    c0010366 <VgaText::updateCursor()>
c0010910:	c3                   	ret    
c0010911:	90                   	nop

c0010912 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010912:	53                   	push   ebx
c0010913:	83 ec 08             	sub    esp,0x8
c0010916:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001091a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010922:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010926:	3c 07                	cmp    al,0x7
c0010928:	75 2a                	jne    c0010954 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001092a:	a1 4c ce 02 c0       	mov    eax,ds:0xc002ce4c
c001092f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010937:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001093f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010947:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001094b:	83 c4 08             	add    esp,0x8
c001094e:	5b                   	pop    ebx
c001094f:	e9 3a 2d 00 00       	jmp    c001368e <Buzzer::beep(int, int, bool)>
c0010954:	3c 0d                	cmp    al,0xd
c0010956:	75 0c                	jne    c0010964 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010958:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010962:	eb 3b                	jmp    c001099f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010964:	3c 0a                	cmp    al,0xa
c0010966:	75 40                	jne    c00109a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010968:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001096e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010978:	8d 50 01             	lea    edx,[eax+0x1]
c001097b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010981:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010987:	75 12                	jne    c001099b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010989:	83 ec 0c             	sub    esp,0xc
c001098c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010992:	53                   	push   ebx
c0010993:	e8 1c fb ff ff       	call   c00104b4 <VgaText::scrollScreen()>
c0010998:	83 c4 10             	add    esp,0x10
c001099b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001099f:	83 c4 08             	add    esp,0x8
c00109a2:	5b                   	pop    ebx
c00109a3:	e9 be f9 ff ff       	jmp    c0010366 <VgaText::updateCursor()>
c00109a8:	3c 08                	cmp    al,0x8
c00109aa:	75 31                	jne    c00109dd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00109ac:	50                   	push   eax
c00109ad:	50                   	push   eax
c00109ae:	6a 01                	push   0x1
c00109b0:	53                   	push   ebx
c00109b1:	e8 34 ff ff ff       	call   c00108ea <VgaText::decrementCursor(bool)>
c00109b6:	5a                   	pop    edx
c00109b7:	59                   	pop    ecx
c00109b8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00109be:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00109c4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00109ca:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00109d0:	6a 20                	push   0x20
c00109d2:	53                   	push   ebx
c00109d3:	e8 82 fb ff ff       	call   c001055a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109d8:	83 c4 28             	add    esp,0x28
c00109db:	5b                   	pop    ebx
c00109dc:	c3                   	ret    
c00109dd:	83 ec 08             	sub    esp,0x8
c00109e0:	0f be c0             	movsx  eax,al
c00109e3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00109e9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00109ef:	51                   	push   ecx
c00109f0:	52                   	push   edx
c00109f1:	50                   	push   eax
c00109f2:	53                   	push   ebx
c00109f3:	e8 62 fb ff ff       	call   c001055a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109f8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00109fc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a04:	83 c4 28             	add    esp,0x28
c0010a07:	5b                   	pop    ebx
c0010a08:	e9 1b fc ff ff       	jmp    c0010628 <VgaText::incrementCursor(bool)>
c0010a0d:	90                   	nop

c0010a0e <VgaText::isShowingCursor()>:
c0010a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a12:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a18:	c3                   	ret    
c0010a19:	90                   	nop

c0010a1a <VgaText::isBlinkDisabled()>:
c0010a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a1e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a24:	83 f0 01             	xor    eax,0x1
c0010a27:	c3                   	ret    

c0010a28 <VgaText::setCursorHeight(int)>:
c0010a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a30:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a36:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a41:	e9 3a f9 ff ff       	jmp    c0010380 <VgaText::showCursor(bool)>

c0010a46 <VgaText::getCursorHeight()>:
c0010a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a4a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010a50:	c3                   	ret    

c0010a51 <setActiveTerminal(VgaText*)>:
c0010a51:	53                   	push   ebx
c0010a52:	83 ec 08             	sub    esp,0x8
c0010a55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a59:	85 db                	test   ebx,ebx
c0010a5b:	75 11                	jne    c0010a6e <setActiveTerminal(VgaText*)+0x1d>
c0010a5d:	c7 44 24 10 44 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f44
c0010a65:	83 c4 08             	add    esp,0x8
c0010a68:	5b                   	pop    ebx
c0010a69:	e9 73 8f 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c0010a6e:	50                   	push   eax
c0010a6f:	50                   	push   eax
c0010a70:	53                   	push   ebx
c0010a71:	68 52 8f 02 c0       	push   0xc0028f52
c0010a76:	e8 14 1e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0010a7b:	a1 a4 cd 02 c0       	mov    eax,ds:0xc002cda4
c0010a80:	83 c4 10             	add    esp,0x10
c0010a83:	85 c0                	test   eax,eax
c0010a85:	74 0c                	je     c0010a93 <setActiveTerminal(VgaText*)+0x42>
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	50                   	push   eax
c0010a8b:	e8 d6 f8 ff ff       	call   c0010366 <VgaText::updateCursor()>
c0010a90:	83 c4 10             	add    esp,0x10
c0010a93:	89 1d a4 cd 02 c0    	mov    DWORD PTR ds:0xc002cda4,ebx
c0010a99:	51                   	push   ecx
c0010a9a:	51                   	push   ecx
c0010a9b:	53                   	push   ebx
c0010a9c:	68 6a 8f 02 c0       	push   0xc0028f6a
c0010aa1:	e8 e9 1d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0010aa6:	83 c4 0c             	add    esp,0xc
c0010aa9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010aaf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ab5:	53                   	push   ebx
c0010ab6:	e8 17 fb ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010abe:	e8 57 ff ff ff       	call   c0010a1a <VgaText::isBlinkDisabled()>
c0010ac3:	5a                   	pop    edx
c0010ac4:	0f b6 c0             	movzx  eax,al
c0010ac7:	59                   	pop    ecx
c0010ac8:	50                   	push   eax
c0010ac9:	53                   	push   ebx
c0010aca:	e8 c1 f8 ff ff       	call   c0010390 <VgaText::disableBlink(bool)>
c0010acf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ad2:	e8 6f ff ff ff       	call   c0010a46 <VgaText::getCursorHeight()>
c0010ad7:	5a                   	pop    edx
c0010ad8:	59                   	pop    ecx
c0010ad9:	50                   	push   eax
c0010ada:	53                   	push   ebx
c0010adb:	e8 48 ff ff ff       	call   c0010a28 <VgaText::setCursorHeight(int)>
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010aea:	75 0a                	jne    c0010af6 <setActiveTerminal(VgaText*)+0xa5>
c0010aec:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010af6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010afa:	83 c4 08             	add    esp,0x8
c0010afd:	5b                   	pop    ebx
c0010afe:	e9 0f f8 ff ff       	jmp    c0010312 <VgaText::load()>

c0010b03 <doTerminalCycle()>:
c0010b03:	83 ec 18             	sub    esp,0x18
c0010b06:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c0010b0b:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b11:	50                   	push   eax
c0010b12:	a3 a0 cd 02 c0       	mov    ds:0xc002cda0,eax
c0010b17:	e8 35 ff ff ff       	call   c0010a51 <setActiveTerminal(VgaText*)>
c0010b1c:	83 c4 1c             	add    esp,0x1c
c0010b1f:	c3                   	ret    

c0010b20 <VgaText::doUpdate()>:
c0010b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b24:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b2a:	85 c0                	test   eax,eax
c0010b2c:	74 02                	je     c0010b30 <VgaText::doUpdate()+0x10>
c0010b2e:	ff e0                	jmp    eax
c0010b30:	c3                   	ret    
c0010b31:	90                   	nop

c0010b32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b32:	55                   	push   ebp
c0010b33:	57                   	push   edi
c0010b34:	56                   	push   esi
c0010b35:	53                   	push   ebx
c0010b36:	83 ec 1c             	sub    esp,0x1c
c0010b39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b3d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b42:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010b49:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010b4c:	50                   	push   eax
c0010b4d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b52:	50                   	push   eax
c0010b53:	e8 4a f9 ff ff       	call   c00104a2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010b58:	59                   	pop    ecx
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	5b                   	pop    ebx
c0010b5d:	31 c9                	xor    ecx,ecx
c0010b5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b67:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010b6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b75:	0f b7 db             	movzx  ebx,bx
c0010b78:	01 db                	add    ebx,ebx
c0010b7a:	01 fb                	add    ebx,edi
c0010b7c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010b7f:	84 c0                	test   al,al
c0010b81:	0f 84 38 01 00 00    	je     c0010cbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010b87:	3c 0d                	cmp    al,0xd
c0010b89:	75 0f                	jne    c0010b9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010b8b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010b95:	e9 1f 01 00 00       	jmp    c0010cb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b9a:	3c 0a                	cmp    al,0xa
c0010b9c:	75 5b                	jne    c0010bf9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010b9e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ba4:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bae:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bb1:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010bb7:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010bbd:	75 12                	jne    c0010bd1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010bbf:	83 ec 0c             	sub    esp,0xc
c0010bc2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010bc8:	55                   	push   ebp
c0010bc9:	e8 e6 f8 ff ff       	call   c00104b4 <VgaText::scrollScreen()>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	83 ec 0c             	sub    esp,0xc
c0010bd4:	55                   	push   ebp
c0010bd5:	e8 8c f7 ff ff       	call   c0010366 <VgaText::updateCursor()>
c0010bda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010beb:	31 c9                	xor    ecx,ecx
c0010bed:	0f b7 db             	movzx  ebx,bx
c0010bf0:	01 db                	add    ebx,ebx
c0010bf2:	01 fb                	add    ebx,edi
c0010bf4:	e9 c0 00 00 00       	jmp    c0010cb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010bf9:	3c 08                	cmp    al,0x8
c0010bfb:	75 4e                	jne    c0010c4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010bfd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c01:	53                   	push   ebx
c0010c02:	53                   	push   ebx
c0010c03:	6a 01                	push   0x1
c0010c05:	55                   	push   ebp
c0010c06:	e8 df fc ff ff       	call   c00108ea <VgaText::decrementCursor(bool)>
c0010c0b:	58                   	pop    eax
c0010c0c:	5a                   	pop    edx
c0010c0d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c13:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c19:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c1f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c25:	6a 20                	push   0x20
c0010c27:	55                   	push   ebp
c0010c28:	e8 2d f9 ff ff       	call   c001055a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c2d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c35:	83 c4 20             	add    esp,0x20
c0010c38:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c3e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c42:	0f b7 db             	movzx  ebx,bx
c0010c45:	01 db                	add    ebx,ebx
c0010c47:	01 fb                	add    ebx,edi
c0010c49:	eb 6e                	jmp    c0010cb9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c4b:	51                   	push   ecx
c0010c4c:	51                   	push   ecx
c0010c4d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c51:	50                   	push   eax
c0010c52:	e8 f1 f8 ff ff       	call   c0010548 <VgaText::combineCharAndColour(char, unsigned char)>
c0010c57:	83 c4 10             	add    esp,0x10
c0010c5a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010c5d:	39 2d a4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda4,ebp
c0010c63:	75 2a                	jne    c0010c8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010c65:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010c6b:	85 c0                	test   eax,eax
c0010c6d:	74 20                	je     c0010c8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010c6f:	52                   	push   edx
c0010c70:	52                   	push   edx
c0010c71:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c77:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010c81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010c85:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010c88:	51                   	push   ecx
c0010c89:	55                   	push   ebp
c0010c8a:	ff d0                	call   eax
c0010c8c:	83 c4 20             	add    esp,0x20
c0010c8f:	83 c3 02             	add    ebx,0x2
c0010c92:	50                   	push   eax
c0010c93:	50                   	push   eax
c0010c94:	6a 00                	push   0x0
c0010c96:	55                   	push   ebp
c0010c97:	e8 8c f9 ff ff       	call   c0010628 <VgaText::incrementCursor(bool)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010ca6:	75 0f                	jne    c0010cb7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010ca8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010cb0:	0f b7 db             	movzx  ebx,bx
c0010cb3:	01 db                	add    ebx,ebx
c0010cb5:	01 fb                	add    ebx,edi
c0010cb7:	b1 01                	mov    cl,0x1
c0010cb9:	46                   	inc    esi
c0010cba:	e9 bd fe ff ff       	jmp    c0010b7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010cbf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010cc3:	83 ec 0c             	sub    esp,0xc
c0010cc6:	55                   	push   ebp
c0010cc7:	e8 9a f6 ff ff       	call   c0010366 <VgaText::updateCursor()>
c0010ccc:	83 c4 10             	add    esp,0x10
c0010ccf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010cd3:	84 c9                	test   cl,cl
c0010cd5:	74 0c                	je     c0010ce3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010cd7:	83 ec 0c             	sub    esp,0xc
c0010cda:	55                   	push   ebp
c0010cdb:	e8 40 fe ff ff       	call   c0010b20 <VgaText::doUpdate()>
c0010ce0:	83 c4 10             	add    esp,0x10
c0010ce3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010cea:	83 c4 1c             	add    esp,0x1c
c0010ced:	5b                   	pop    ebx
c0010cee:	5e                   	pop    esi
c0010cef:	5f                   	pop    edi
c0010cf0:	5d                   	pop    ebp
c0010cf1:	c3                   	ret    

c0010cf2 <VgaText::clearScreen()>:
c0010cf2:	57                   	push   edi
c0010cf3:	56                   	push   esi
c0010cf4:	31 f6                	xor    esi,esi
c0010cf6:	53                   	push   ebx
c0010cf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cfb:	52                   	push   edx
c0010cfc:	6a 00                	push   0x0
c0010cfe:	6a 00                	push   0x0
c0010d00:	53                   	push   ebx
c0010d01:	e8 cc f8 ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010d06:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d0d:	83 c4 10             	add    esp,0x10
c0010d10:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d16:	7e 26                	jle    c0010d3e <VgaText::clearScreen()+0x4c>
c0010d18:	31 ff                	xor    edi,edi
c0010d1a:	50                   	push   eax
c0010d1b:	50                   	push   eax
c0010d1c:	56                   	push   esi
c0010d1d:	57                   	push   edi
c0010d1e:	47                   	inc    edi
c0010d1f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d25:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d2b:	6a 20                	push   0x20
c0010d2d:	53                   	push   ebx
c0010d2e:	e8 27 f8 ff ff       	call   c001055a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d33:	83 c4 20             	add    esp,0x20
c0010d36:	83 ff 50             	cmp    edi,0x50
c0010d39:	75 df                	jne    c0010d1a <VgaText::clearScreen()+0x28>
c0010d3b:	46                   	inc    esi
c0010d3c:	eb d2                	jmp    c0010d10 <VgaText::clearScreen()+0x1e>
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	53                   	push   ebx
c0010d42:	e8 d9 fd ff ff       	call   c0010b20 <VgaText::doUpdate()>
c0010d47:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	5b                   	pop    ebx
c0010d52:	5e                   	pop    esi
c0010d53:	5f                   	pop    edi
c0010d54:	c3                   	ret    
c0010d55:	90                   	nop

c0010d56 <VgaText::putchar(char)>:
c0010d56:	56                   	push   esi
c0010d57:	53                   	push   ebx
c0010d58:	83 ec 14             	sub    esp,0x14
c0010d5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d63:	3c 5b                	cmp    al,0x5b
c0010d65:	75 21                	jne    c0010d88 <VgaText::putchar(char)+0x32>
c0010d67:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010d6e:	74 28                	je     c0010d98 <VgaText::putchar(char)+0x42>
c0010d70:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010d79:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010d83:	e9 e2 00 00 00       	jmp    c0010e6a <VgaText::putchar(char)+0x114>
c0010d88:	3c 1b                	cmp    al,0x1b
c0010d8a:	75 0c                	jne    c0010d98 <VgaText::putchar(char)+0x42>
c0010d8c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010d93:	e9 d2 00 00 00       	jmp    c0010e6a <VgaText::putchar(char)+0x114>
c0010d98:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010d9e:	84 c9                	test   cl,cl
c0010da0:	0f 84 ab 00 00 00    	je     c0010e51 <VgaText::putchar(char)+0xfb>
c0010da6:	8d 50 c0             	lea    edx,[eax-0x40]
c0010da9:	80 fa 3e             	cmp    dl,0x3e
c0010dac:	0f 87 82 00 00 00    	ja     c0010e34 <VgaText::putchar(char)+0xde>
c0010db2:	3c 6d                	cmp    al,0x6d
c0010db4:	75 4d                	jne    c0010e03 <VgaText::putchar(char)+0xad>
c0010db6:	31 f6                	xor    esi,esi
c0010db8:	31 d2                	xor    edx,edx
c0010dba:	31 c0                	xor    eax,eax
c0010dbc:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010dc2:	7e 30                	jle    c0010df4 <VgaText::putchar(char)+0x9e>
c0010dc4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010dcc:	80 fa 3b             	cmp    dl,0x3b
c0010dcf:	75 17                	jne    c0010de8 <VgaText::putchar(char)+0x92>
c0010dd1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010dd5:	50                   	push   eax
c0010dd6:	53                   	push   ebx
c0010dd7:	e8 ee f5 ff ff       	call   c00103ca <VgaText::doANSI_SGR(int)>
c0010ddc:	59                   	pop    ecx
c0010ddd:	31 d2                	xor    edx,edx
c0010ddf:	58                   	pop    eax
c0010de0:	31 c0                	xor    eax,eax
c0010de2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010de6:	eb 09                	jmp    c0010df1 <VgaText::putchar(char)+0x9b>
c0010de8:	6b c0 0a             	imul   eax,eax,0xa
c0010deb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010def:	88 ca                	mov    dl,cl
c0010df1:	46                   	inc    esi
c0010df2:	eb c8                	jmp    c0010dbc <VgaText::putchar(char)+0x66>
c0010df4:	84 d2                	test   dl,dl
c0010df6:	74 31                	je     c0010e29 <VgaText::putchar(char)+0xd3>
c0010df8:	50                   	push   eax
c0010df9:	53                   	push   ebx
c0010dfa:	e8 cb f5 ff ff       	call   c00103ca <VgaText::doANSI_SGR(int)>
c0010dff:	58                   	pop    eax
c0010e00:	5a                   	pop    edx
c0010e01:	eb 26                	jmp    c0010e29 <VgaText::putchar(char)+0xd3>
c0010e03:	3c 4a                	cmp    al,0x4a
c0010e05:	75 22                	jne    c0010e29 <VgaText::putchar(char)+0xd3>
c0010e07:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e0e:	75 19                	jne    c0010e29 <VgaText::putchar(char)+0xd3>
c0010e10:	83 ec 0c             	sub    esp,0xc
c0010e13:	53                   	push   ebx
c0010e14:	e8 d9 fe ff ff       	call   c0010cf2 <VgaText::clearScreen()>
c0010e19:	83 c4 0c             	add    esp,0xc
c0010e1c:	6a 00                	push   0x0
c0010e1e:	6a 00                	push   0x0
c0010e20:	53                   	push   ebx
c0010e21:	e8 ac f7 ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010e26:	83 c4 10             	add    esp,0x10
c0010e29:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e32:	eb 36                	jmp    c0010e6a <VgaText::putchar(char)+0x114>
c0010e34:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e3a:	83 fa 0e             	cmp    edx,0xe
c0010e3d:	7f 2b                	jg     c0010e6a <VgaText::putchar(char)+0x114>
c0010e3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e42:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010e48:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010e4f:	eb 19                	jmp    c0010e6a <VgaText::putchar(char)+0x114>
c0010e51:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010e57:	0f be c0             	movsx  eax,al
c0010e5a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010e60:	50                   	push   eax
c0010e61:	53                   	push   ebx
c0010e62:	e8 ab fa ff ff       	call   c0010912 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	83 c4 14             	add    esp,0x14
c0010e6d:	5b                   	pop    ebx
c0010e6e:	5e                   	pop    esi
c0010e6f:	c3                   	ret    

c0010e70 <VgaText::puts(char const*)>:
c0010e70:	53                   	push   ebx
c0010e71:	83 ec 08             	sub    esp,0x8
c0010e74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010e78:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010e7b:	84 c0                	test   al,al
c0010e7d:	74 12                	je     c0010e91 <VgaText::puts(char const*)+0x21>
c0010e7f:	43                   	inc    ebx
c0010e80:	51                   	push   ecx
c0010e81:	51                   	push   ecx
c0010e82:	50                   	push   eax
c0010e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e87:	e8 ca fe ff ff       	call   c0010d56 <VgaText::putchar(char)>
c0010e8c:	83 c4 10             	add    esp,0x10
c0010e8f:	eb e7                	jmp    c0010e78 <VgaText::puts(char const*)+0x8>
c0010e91:	83 c4 08             	add    esp,0x8
c0010e94:	5b                   	pop    ebx
c0010e95:	c3                   	ret    

c0010e96 <VgaText::putx(unsigned int)>:
c0010e96:	57                   	push   edi
c0010e97:	b9 11 00 00 00       	mov    ecx,0x11
c0010e9c:	56                   	push   esi
c0010e9d:	be 86 8f 02 c0       	mov    esi,0xc0028f86
c0010ea2:	53                   	push   ebx
c0010ea3:	83 ec 20             	sub    esp,0x20
c0010ea6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010eaa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010eae:	fc                   	cld    
c0010eaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb1:	be 08 00 00 00       	mov    esi,0x8
c0010eb6:	50                   	push   eax
c0010eb7:	50                   	push   eax
c0010eb8:	89 d8                	mov    eax,ebx
c0010eba:	c1 e3 04             	shl    ebx,0x4
c0010ebd:	c1 e8 1c             	shr    eax,0x1c
c0010ec0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ec5:	50                   	push   eax
c0010ec6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010eca:	e8 87 fe ff ff       	call   c0010d56 <VgaText::putchar(char)>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	4e                   	dec    esi
c0010ed3:	75 e1                	jne    c0010eb6 <VgaText::putx(unsigned int)+0x20>
c0010ed5:	83 c4 20             	add    esp,0x20
c0010ed8:	5b                   	pop    ebx
c0010ed9:	5e                   	pop    esi
c0010eda:	5f                   	pop    edi
c0010edb:	c3                   	ret    

c0010edc <VgaText::VgaText(char const*)>:
c0010edc:	57                   	push   edi
c0010edd:	56                   	push   esi
c0010ede:	53                   	push   ebx
c0010edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ee3:	83 ec 08             	sub    esp,0x8
c0010ee6:	6a 00                	push   0x0
c0010ee8:	50                   	push   eax
c0010ee9:	e8 6e 05 00 00       	call   c001145c <UnixFile::UnixFile(int)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	ba ec 8f 02 c0       	mov    edx,0xc0028fec
c0010ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010efa:	89 10                	mov    DWORD PTR [eax],edx
c0010efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f00:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0e:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1c:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f27:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f32:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f40:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f59:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010f6a:	bb 80 cd 02 c0       	mov    ebx,0xc002cd80
c0010f6f:	b8 08 00 00 00       	mov    eax,0x8
c0010f74:	fc                   	cld    
c0010f75:	89 d7                	mov    edi,edx
c0010f77:	89 de                	mov    esi,ebx
c0010f79:	89 c1                	mov    ecx,eax
c0010f7b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f81:	05 1e 10 00 00       	add    eax,0x101e
c0010f86:	83 ec 08             	sub    esp,0x8
c0010f89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f8d:	50                   	push   eax
c0010f8e:	e8 97 f7 fe ff       	call   c000072a <strcpy>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa8:	83 c0 0c             	add    eax,0xc
c0010fab:	83 ec 04             	sub    esp,0x4
c0010fae:	68 00 0f 00 00       	push   0xf00
c0010fb3:	6a 00                	push   0x0
c0010fb5:	50                   	push   eax
c0010fb6:	e8 d0 f6 fe ff       	call   c000068b <memset>
c0010fbb:	83 c4 10             	add    esp,0x10
c0010fbe:	83 ec 04             	sub    esp,0x4
c0010fc1:	6a 00                	push   0x0
c0010fc3:	6a 07                	push   0x7
c0010fc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fc9:	e8 b4 f4 ff ff       	call   c0010482 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010fce:	83 c4 10             	add    esp,0x10
c0010fd1:	83 ec 08             	sub    esp,0x8
c0010fd4:	6a 02                	push   0x2
c0010fd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fda:	e8 49 fa ff ff       	call   c0010a28 <VgaText::setCursorHeight(int)>
c0010fdf:	83 c4 10             	add    esp,0x10
c0010fe2:	83 ec 04             	sub    esp,0x4
c0010fe5:	6a 00                	push   0x0
c0010fe7:	6a 00                	push   0x0
c0010fe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fed:	e8 e0 f5 ff ff       	call   c00105d2 <VgaText::setCursor(int, int)>
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	83 ec 08             	sub    esp,0x8
c0010ff8:	6a 01                	push   0x1
c0010ffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffe:	e8 7d f3 ff ff       	call   c0010380 <VgaText::showCursor(bool)>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	83 ec 08             	sub    esp,0x8
c0011009:	6a 01                	push   0x1
c001100b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100f:	e8 7c f3 ff ff       	call   c0010390 <VgaText::disableBlink(bool)>
c0011014:	83 c4 10             	add    esp,0x10
c0011017:	83 ec 0c             	sub    esp,0xc
c001101a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001101e:	e8 cf fc ff ff       	call   c0010cf2 <VgaText::clearScreen()>
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011035:	05 9e 10 00 00       	add    eax,0x109e
c001103a:	83 ec 04             	sub    esp,0x4
c001103d:	68 96 00 00 00       	push   0x96
c0011042:	6a 00                	push   0x0
c0011044:	50                   	push   eax
c0011045:	e8 41 f6 fe ff       	call   c000068b <memset>
c001104a:	83 c4 10             	add    esp,0x10
c001104d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011051:	05 34 11 00 00       	add    eax,0x1134
c0011056:	83 ec 04             	sub    esp,0x4
c0011059:	68 2c 01 00 00       	push   0x12c
c001105e:	6a 00                	push   0x0
c0011060:	50                   	push   eax
c0011061:	e8 25 f6 fe ff       	call   c000068b <memset>
c0011066:	83 c4 10             	add    esp,0x10
c0011069:	90                   	nop
c001106a:	5b                   	pop    ebx
c001106b:	5e                   	pop    esi
c001106c:	5f                   	pop    edi
c001106d:	c3                   	ret    

c001106e <VgaText::receiveKey(unsigned char)>:
c001106e:	55                   	push   ebp
c001106f:	57                   	push   edi
c0011070:	56                   	push   esi
c0011071:	53                   	push   ebx
c0011072:	83 ec 1c             	sub    esp,0x1c
c0011075:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011079:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001107d:	84 db                	test   bl,bl
c001107f:	0f 84 c9 00 00 00    	je     c001114e <VgaText::receiveKey(unsigned char)+0xe0>
c0011085:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001108b:	80 fb 08             	cmp    bl,0x8
c001108e:	75 2c                	jne    c00110bc <VgaText::receiveKey(unsigned char)+0x4e>
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	57                   	push   edi
c0011094:	e8 0f f6 fe ff       	call   c00006a8 <strlen>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	85 c0                	test   eax,eax
c001109e:	74 41                	je     c00110e1 <VgaText::receiveKey(unsigned char)+0x73>
c00110a0:	50                   	push   eax
c00110a1:	50                   	push   eax
c00110a2:	6a 08                	push   0x8
c00110a4:	56                   	push   esi
c00110a5:	e8 ac fc ff ff       	call   c0010d56 <VgaText::putchar(char)>
c00110aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110ad:	e8 f6 f5 fe ff       	call   c00006a8 <strlen>
c00110b2:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00110ba:	eb 22                	jmp    c00110de <VgaText::receiveKey(unsigned char)+0x70>
c00110bc:	0f be c3             	movsx  eax,bl
c00110bf:	52                   	push   edx
c00110c0:	52                   	push   edx
c00110c1:	50                   	push   eax
c00110c2:	56                   	push   esi
c00110c3:	e8 8e fc ff ff       	call   c0010d56 <VgaText::putchar(char)>
c00110c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00110cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00110d1:	59                   	pop    ecx
c00110d2:	5d                   	pop    ebp
c00110d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00110d7:	50                   	push   eax
c00110d8:	57                   	push   edi
c00110d9:	e8 03 f7 fe ff       	call   c00007e1 <strcat>
c00110de:	83 c4 10             	add    esp,0x10
c00110e1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00110e8:	75 05                	jne    c00110ef <VgaText::receiveKey(unsigned char)+0x81>
c00110ea:	80 fb 0a             	cmp    bl,0xa
c00110ed:	75 53                	jne    c0011142 <VgaText::receiveKey(unsigned char)+0xd4>
c00110ef:	83 ec 0c             	sub    esp,0xc
c00110f2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00110f8:	53                   	push   ebx
c00110f9:	e8 aa f5 fe ff       	call   c00006a8 <strlen>
c00110fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011101:	89 c5                	mov    ebp,eax
c0011103:	e8 a0 f5 fe ff       	call   c00006a8 <strlen>
c0011108:	83 c4 10             	add    esp,0x10
c001110b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001110f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011114:	76 10                	jbe    c0011126 <VgaText::receiveKey(unsigned char)+0xb8>
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	68 97 8f 02 c0       	push   0xc0028f97
c001111e:	e8 be 88 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	50                   	push   eax
c0011127:	50                   	push   eax
c0011128:	57                   	push   edi
c0011129:	53                   	push   ebx
c001112a:	e8 b2 f6 fe ff       	call   c00007e1 <strcat>
c001112f:	83 c4 0c             	add    esp,0xc
c0011132:	68 96 00 00 00       	push   0x96
c0011137:	6a 00                	push   0x0
c0011139:	57                   	push   edi
c001113a:	e8 4c f5 fe ff       	call   c000068b <memset>
c001113f:	83 c4 10             	add    esp,0x10
c0011142:	83 ec 0c             	sub    esp,0xc
c0011145:	56                   	push   esi
c0011146:	e8 d5 f9 ff ff       	call   c0010b20 <VgaText::doUpdate()>
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	83 c4 1c             	add    esp,0x1c
c0011151:	5b                   	pop    ebx
c0011152:	5e                   	pop    esi
c0011153:	5f                   	pop    edi
c0011154:	5d                   	pop    ebp
c0011155:	c3                   	ret    

c0011156 <VgaText::write(unsigned long long, void*, int*)>:
c0011156:	55                   	push   ebp
c0011157:	57                   	push   edi
c0011158:	56                   	push   esi
c0011159:	53                   	push   ebx
c001115a:	83 ec 0c             	sub    esp,0xc
c001115d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011161:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011165:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011169:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011170:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011173:	39 eb                	cmp    ebx,ebp
c0011175:	74 13                	je     c001118a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011177:	43                   	inc    ebx
c0011178:	50                   	push   eax
c0011179:	50                   	push   eax
c001117a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001117e:	50                   	push   eax
c001117f:	56                   	push   esi
c0011180:	e8 d1 fb ff ff       	call   c0010d56 <VgaText::putchar(char)>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	eb e9                	jmp    c0011173 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001118a:	83 ec 0c             	sub    esp,0xc
c001118d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011194:	56                   	push   esi
c0011195:	e8 86 f9 ff ff       	call   c0010b20 <VgaText::doUpdate()>
c001119a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001119e:	89 38                	mov    DWORD PTR [eax],edi
c00111a0:	83 c4 1c             	add    esp,0x1c
c00111a3:	31 c0                	xor    eax,eax
c00111a5:	5b                   	pop    ebx
c00111a6:	5e                   	pop    esi
c00111a7:	5f                   	pop    edi
c00111a8:	5d                   	pop    ebp
c00111a9:	c3                   	ret    

c00111aa <newTerminal(char*)>:
c00111aa:	83 ec 28             	sub    esp,0x28
c00111ad:	68 60 12 00 00       	push   0x1260
c00111b2:	e8 33 e4 ff ff       	call   c000f5ea <malloc>
c00111b7:	5a                   	pop    edx
c00111b8:	59                   	pop    ecx
c00111b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111bd:	50                   	push   eax
c00111be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111c2:	e8 15 fd ff ff       	call   c0010edc <VgaText::VgaText(char const*)>
c00111c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111cb:	83 c4 2c             	add    esp,0x2c
c00111ce:	c3                   	ret    
c00111cf:	90                   	nop

c00111d0 <TSS::TSS()>:
c00111d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111db:	90                   	nop
c00111dc:	c3                   	ret    
c00111dd:	90                   	nop

c00111de <TSS::setESP(unsigned long)>:
c00111de:	55                   	push   ebp
c00111df:	89 e5                	mov    ebp,esp
c00111e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00111ed:	90                   	nop
c00111ee:	5d                   	pop    ebp
c00111ef:	c3                   	ret    

c00111f0 <TSS::flush()>:
c00111f0:	55                   	push   ebp
c00111f1:	89 e5                	mov    ebp,esp
c00111f3:	83 ec 10             	sub    esp,0x10
c00111f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00111fb:	83 c8 03             	or     eax,0x3
c00111fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011202:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011206:	66 89 d0             	mov    ax,dx
c0011209:	0f 00 d8             	ltr    ax
c001120c:	90                   	nop
c001120d:	c9                   	leave  
c001120e:	c3                   	ret    
c001120f:	90                   	nop

c0011210 <TSS::setup(unsigned long, unsigned long)>:
c0011210:	55                   	push   ebp
c0011211:	89 e5                	mov    ebp,esp
c0011213:	83 ec 18             	sub    esp,0x18
c0011216:	83 ec 0c             	sub    esp,0xc
c0011219:	6a 68                	push   0x68
c001121b:	e8 ca e3 ff ff       	call   c000f5ea <malloc>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	89 c2                	mov    edx,eax
c0011225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011228:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001122b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001122e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011231:	83 ec 04             	sub    esp,0x4
c0011234:	6a 68                	push   0x68
c0011236:	6a 00                	push   0x0
c0011238:	50                   	push   eax
c0011239:	e8 4d f4 fe ff       	call   c000068b <memset>
c001123e:	83 c4 10             	add    esp,0x10
c0011241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011247:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001124d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011250:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011253:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001125f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011262:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011268:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001126b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011277:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001127d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011280:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011283:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001128f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001129b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00112ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00112b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00112b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00112c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cb:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00112d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d8:	0f 20 da             	mov    edx,cr3
c00112db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00112de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00112e1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00112e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	50                   	push   eax
c00112ee:	8d 45 ec             	lea    eax,[ebp-0x14]
c00112f1:	50                   	push   eax
c00112f2:	e8 d1 da ff ff       	call   c000edc8 <GDTEntry::setBase(unsigned int)>
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	83 ec 08             	sub    esp,0x8
c00112fd:	6a 68                	push   0x68
c00112ff:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011302:	50                   	push   eax
c0011303:	e8 dc da ff ff       	call   c000ede4 <GDTEntry::setLimit(unsigned int)>
c0011308:	83 c4 10             	add    esp,0x10
c001130b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001130f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011312:	83 e0 0f             	and    eax,0xf
c0011315:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011318:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001131b:	83 c8 40             	or     eax,0x40
c001131e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011321:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0011326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001132c:	05 78 01 00 00       	add    eax,0x178
c0011331:	83 ec 04             	sub    esp,0x4
c0011334:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011337:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001133a:	50                   	push   eax
c001133b:	e8 d8 da ff ff       	call   c000ee18 <GDT::addEntry(GDTEntry)>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	89 c2                	mov    edx,eax
c0011345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011348:	89 10                	mov    DWORD PTR [eax],edx
c001134a:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001134f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011355:	05 78 01 00 00       	add    eax,0x178
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	50                   	push   eax
c001135e:	e8 f9 da ff ff       	call   c000ee5c <GDT::flush()>
c0011363:	83 c4 10             	add    esp,0x10
c0011366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011369:	8b 00                	mov    eax,DWORD PTR [eax]
c001136b:	83 ec 08             	sub    esp,0x8
c001136e:	50                   	push   eax
c001136f:	68 00 90 02 c0       	push   0xc0029000
c0011374:	e8 16 15 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001137f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011381:	c9                   	leave  
c0011382:	c3                   	ret    
c0011383:	90                   	nop

c0011384 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011388:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001138c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001138f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011394:	75 08                	jne    c001139e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011396:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001139c:	eb 38                	jmp    c00113d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001139e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113a3:	75 17                	jne    c00113bc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00113a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00113b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113b9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00113bc:	89 c1                	mov    ecx,eax
c00113be:	83 e1 fd             	and    ecx,0xfffffffd
c00113c1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00113c7:	74 cd                	je     c0011396 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00113c9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00113ce:	83 e0 ef             	and    eax,0xffffffef
c00113d1:	83 f8 08             	cmp    eax,0x8
c00113d4:	76 c0                	jbe    c0011396 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00113d6:	31 c0                	xor    eax,eax
c00113d8:	c3                   	ret    
c00113d9:	90                   	nop

c00113da <ReservedFilename::isAtty()>:
c00113da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00113e1:	31 c0                	xor    eax,eax
c00113e3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00113e9:	74 09                	je     c00113f4 <ReservedFilename::isAtty()+0x1a>
c00113eb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00113f1:	0f 94 c0             	sete   al
c00113f4:	c3                   	ret    
c00113f5:	90                   	nop

c00113f6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00113f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011405:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001140a:	75 08                	jne    c0011414 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001140c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011412:	eb 3d                	jmp    c0011451 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011414:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011419:	75 17                	jne    c0011432 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001141b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011420:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011423:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011429:	8b 10                	mov    edx,DWORD PTR [eax]
c001142b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001142f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011432:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011437:	75 04                	jne    c001143d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011439:	89 0a                	mov    DWORD PTR [edx],ecx
c001143b:	eb 14                	jmp    c0011451 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001143d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011442:	74 c8                	je     c001140c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011444:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011449:	83 e0 ef             	and    eax,0xffffffef
c001144c:	83 f8 08             	cmp    eax,0x8
c001144f:	76 bb                	jbe    c001140c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011451:	31 c0                	xor    eax,eax
c0011453:	c3                   	ret    

c0011454 <UnixFile::getFileDescriptor()>:
c0011454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145b:	c3                   	ret    

c001145c <UnixFile::UnixFile(int)>:
c001145c:	53                   	push   ebx
c001145d:	83 ec 28             	sub    esp,0x28
c0011460:	ba ec 90 02 c0       	mov    edx,0xc00290ec
c0011465:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011469:	89 10                	mov    DWORD PTR [eax],edx
c001146b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011473:	0f 8f 8c 01 00 00    	jg     c0011605 <UnixFile::UnixFile(int)+0x1a9>
c0011479:	a1 60 bc 02 c0       	mov    eax,ds:0xc002bc60
c001147e:	8d 50 01             	lea    edx,[eax+0x1]
c0011481:	89 15 60 bc 02 c0    	mov    DWORD PTR ds:0xc002bc60,edx
c0011487:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001148b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011495:	68 38 ce 02 c0       	push   0xc002ce38
c001149a:	e8 d1 5e 01 00       	call   c0027370 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	a0 34 ce 02 c0       	mov    al,ds:0xc002ce34
c00114a7:	83 f0 01             	xor    eax,0x1
c00114aa:	84 c0                	test   al,al
c00114ac:	0f 84 54 01 00 00    	je     c0011606 <UnixFile::UnixFile(int)+0x1aa>
c00114b2:	c6 05 34 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce34,0x1
c00114b9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00114c1:	83 ec 0c             	sub    esp,0xc
c00114c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c8:	e8 1d e1 ff ff       	call   c000f5ea <malloc>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	89 c3                	mov    ebx,eax
c00114d2:	83 ec 08             	sub    esp,0x8
c00114d5:	68 03 ff ff 0f       	push   0xfffff03
c00114da:	53                   	push   ebx
c00114db:	e8 2c 01 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c00114e0:	83 c4 10             	add    esp,0x10
c00114e3:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c00114e9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f8:	e8 ed e0 ff ff       	call   c000f5ea <malloc>
c00114fd:	83 c4 10             	add    esp,0x10
c0011500:	89 c3                	mov    ebx,eax
c0011502:	83 ec 08             	sub    esp,0x8
c0011505:	68 01 ff ff 0f       	push   0xfffff01
c001150a:	53                   	push   ebx
c001150b:	e8 fc 00 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	89 1d 30 ce 02 c0    	mov    DWORD PTR ds:0xc002ce30,ebx
c0011519:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011521:	83 ec 0c             	sub    esp,0xc
c0011524:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011528:	e8 bd e0 ff ff       	call   c000f5ea <malloc>
c001152d:	83 c4 10             	add    esp,0x10
c0011530:	89 c3                	mov    ebx,eax
c0011532:	83 ec 08             	sub    esp,0x8
c0011535:	68 00 ff ff 0f       	push   0xfffff00
c001153a:	53                   	push   ebx
c001153b:	e8 cc 00 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	89 1d 24 ce 02 c0    	mov    DWORD PTR ds:0xc002ce24,ebx
c0011549:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011551:	83 ec 0c             	sub    esp,0xc
c0011554:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011558:	e8 8d e0 ff ff       	call   c000f5ea <malloc>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	89 c3                	mov    ebx,eax
c0011562:	83 ec 08             	sub    esp,0x8
c0011565:	68 02 ff ff 0f       	push   0xfffff02
c001156a:	53                   	push   ebx
c001156b:	e8 9c 00 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c0011570:	83 c4 10             	add    esp,0x10
c0011573:	89 1d 28 ce 02 c0    	mov    DWORD PTR ds:0xc002ce28,ebx
c0011579:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011581:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011586:	7f 7e                	jg     c0011606 <UnixFile::UnixFile(int)+0x1aa>
c0011588:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011597:	e8 4e e0 ff ff       	call   c000f5ea <malloc>
c001159c:	83 c4 10             	add    esp,0x10
c001159f:	89 c3                	mov    ebx,eax
c00115a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115a5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00115aa:	83 ec 08             	sub    esp,0x8
c00115ad:	50                   	push   eax
c00115ae:	53                   	push   ebx
c00115af:	e8 58 00 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115bb:	89 1c 85 00 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3200],ebx
c00115c2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00115ca:	83 ec 0c             	sub    esp,0xc
c00115cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00115d1:	e8 14 e0 ff ff       	call   c000f5ea <malloc>
c00115d6:	83 c4 10             	add    esp,0x10
c00115d9:	89 c3                	mov    ebx,eax
c00115db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115df:	05 20 ff ff 0f       	add    eax,0xfffff20
c00115e4:	83 ec 08             	sub    esp,0x8
c00115e7:	50                   	push   eax
c00115e8:	53                   	push   ebx
c00115e9:	e8 1e 00 00 00       	call   c001160c <ReservedFilename::ReservedFilename(int)>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115f5:	89 1c 85 c0 cd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3240],ebx
c00115fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011600:	e9 7c ff ff ff       	jmp    c0011581 <UnixFile::UnixFile(int)+0x125>
c0011605:	90                   	nop
c0011606:	83 c4 28             	add    esp,0x28
c0011609:	5b                   	pop    ebx
c001160a:	c3                   	ret    
c001160b:	90                   	nop

c001160c <ReservedFilename::ReservedFilename(int)>:
c001160c:	83 ec 0c             	sub    esp,0xc
c001160f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011613:	83 ec 08             	sub    esp,0x8
c0011616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001161a:	50                   	push   eax
c001161b:	e8 3c fe ff ff       	call   c001145c <UnixFile::UnixFile(int)>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	ba 08 91 02 c0       	mov    edx,0xc0029108
c0011628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162c:	89 10                	mov    DWORD PTR [eax],edx
c001162e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011632:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011636:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011639:	90                   	nop
c001163a:	83 c4 0c             	add    esp,0xc
c001163d:	c3                   	ret    

c001163e <UnixFile::~UnixFile()>:
c001163e:	83 ec 1c             	sub    esp,0x1c
c0011641:	ba ec 90 02 c0       	mov    edx,0xc00290ec
c0011646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001164a:	89 10                	mov    DWORD PTR [eax],edx
c001164c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011653:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011658:	7f 73                	jg     c00116cd <UnixFile::~UnixFile()+0x8f>
c001165a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	68 38 ce 02 c0       	push   0xc002ce38
c001166a:	e8 d5 5d 01 00       	call   c0027444 <LinkedList<UnixFile>::getFirstElement()>
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011676:	83 ec 0c             	sub    esp,0xc
c0011679:	68 38 ce 02 c0       	push   0xc002ce38
c001167e:	e8 c9 5d 01 00       	call   c002744c <LinkedList<UnixFile>::removeFirst()>
c0011683:	83 c4 10             	add    esp,0x10
c0011686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001168a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001168e:	74 40                	je     c00116d0 <UnixFile::~UnixFile()+0x92>
c0011690:	83 ec 08             	sub    esp,0x8
c0011693:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011697:	68 38 ce 02 c0       	push   0xc002ce38
c001169c:	e8 cf 5c 01 00       	call   c0027370 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116a8:	8d 50 01             	lea    edx,[eax+0x1]
c00116ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116af:	3d 88 13 00 00       	cmp    eax,0x1388
c00116b4:	0f 94 c0             	sete   al
c00116b7:	84 c0                	test   al,al
c00116b9:	74 a7                	je     c0011662 <UnixFile::~UnixFile()+0x24>
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	68 c4 90 02 c0       	push   0xc00290c4
c00116c3:	e8 19 83 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00116c8:	83 c4 10             	add    esp,0x10
c00116cb:	eb 95                	jmp    c0011662 <UnixFile::~UnixFile()+0x24>
c00116cd:	90                   	nop
c00116ce:	eb 01                	jmp    c00116d1 <UnixFile::~UnixFile()+0x93>
c00116d0:	90                   	nop
c00116d1:	90                   	nop
c00116d2:	83 c4 1c             	add    esp,0x1c
c00116d5:	c3                   	ret    

c00116d6 <UnixFile::~UnixFile()>:
c00116d6:	83 ec 0c             	sub    esp,0xc
c00116d9:	83 ec 0c             	sub    esp,0xc
c00116dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116e0:	e8 59 ff ff ff       	call   c001163e <UnixFile::~UnixFile()>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	83 ec 08             	sub    esp,0x8
c00116eb:	6a 0c                	push   0xc
c00116ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f1:	e8 b9 10 00 00       	call   c00127af <operator delete(void*, unsigned long)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	83 c4 0c             	add    esp,0xc
c00116fc:	c3                   	ret    
c00116fd:	90                   	nop

c00116fe <ReservedFilename::~ReservedFilename()>:
c00116fe:	83 ec 0c             	sub    esp,0xc
c0011701:	ba 08 91 02 c0       	mov    edx,0xc0029108
c0011706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001170a:	89 10                	mov    DWORD PTR [eax],edx
c001170c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011710:	83 ec 0c             	sub    esp,0xc
c0011713:	50                   	push   eax
c0011714:	e8 25 ff ff ff       	call   c001163e <UnixFile::~UnixFile()>
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	90                   	nop
c001171d:	83 c4 0c             	add    esp,0xc
c0011720:	c3                   	ret    
c0011721:	90                   	nop

c0011722 <ReservedFilename::~ReservedFilename()>:
c0011722:	83 ec 0c             	sub    esp,0xc
c0011725:	83 ec 0c             	sub    esp,0xc
c0011728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001172c:	e8 cd ff ff ff       	call   c00116fe <ReservedFilename::~ReservedFilename()>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	83 ec 08             	sub    esp,0x8
c0011737:	6a 0c                	push   0xc
c0011739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001173d:	e8 6d 10 00 00       	call   c00127af <operator delete(void*, unsigned long)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	83 c4 0c             	add    esp,0xc
c0011748:	c3                   	ret    

c0011749 <getFromFileDescriptor(int)>:
c0011749:	53                   	push   ebx
c001174a:	83 ec 08             	sub    esp,0x8
c001174d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011751:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011757:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001175d:	7f 2c                	jg     c001178b <getFromFileDescriptor(int)+0x42>
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	68 38 ce 02 c0       	push   0xc002ce38
c0011767:	e8 d8 5c 01 00       	call   c0027444 <LinkedList<UnixFile>::getFirstElement()>
c001176c:	83 c4 10             	add    esp,0x10
c001176f:	85 c0                	test   eax,eax
c0011771:	75 04                	jne    c0011777 <getFromFileDescriptor(int)+0x2e>
c0011773:	31 c0                	xor    eax,eax
c0011775:	eb 6e                	jmp    c00117e5 <getFromFileDescriptor(int)+0x9c>
c0011777:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001177a:	74 69                	je     c00117e5 <getFromFileDescriptor(int)+0x9c>
c001177c:	52                   	push   edx
c001177d:	52                   	push   edx
c001177e:	50                   	push   eax
c001177f:	68 38 ce 02 c0       	push   0xc002ce38
c0011784:	e8 65 5d 01 00       	call   c00274ee <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011789:	eb e1                	jmp    c001176c <getFromFileDescriptor(int)+0x23>
c001178b:	a1 2c ce 02 c0       	mov    eax,ds:0xc002ce2c
c0011790:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011796:	74 4d                	je     c00117e5 <getFromFileDescriptor(int)+0x9c>
c0011798:	a1 30 ce 02 c0       	mov    eax,ds:0xc002ce30
c001179d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117a3:	74 40                	je     c00117e5 <getFromFileDescriptor(int)+0x9c>
c00117a5:	a1 28 ce 02 c0       	mov    eax,ds:0xc002ce28
c00117aa:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00117b0:	74 33                	je     c00117e5 <getFromFileDescriptor(int)+0x9c>
c00117b2:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c00117b7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00117bd:	74 26                	je     c00117e5 <getFromFileDescriptor(int)+0x9c>
c00117bf:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00117c5:	83 f8 08             	cmp    eax,0x8
c00117c8:	77 09                	ja     c00117d3 <getFromFileDescriptor(int)+0x8a>
c00117ca:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c00117d1:	eb 12                	jmp    c00117e5 <getFromFileDescriptor(int)+0x9c>
c00117d3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00117d9:	83 fb 08             	cmp    ebx,0x8
c00117dc:	77 95                	ja     c0011773 <getFromFileDescriptor(int)+0x2a>
c00117de:	8b 04 9d c0 cd 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3240]
c00117e5:	83 c4 08             	add    esp,0x8
c00117e8:	5b                   	pop    ebx
c00117e9:	c3                   	ret    

c00117ea <__static_initialization_and_destruction_0(int, int)>:
c00117ea:	83 ec 0c             	sub    esp,0xc
c00117ed:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00117f2:	75 34                	jne    c0011828 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00117f4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00117fc:	75 2a                	jne    c0011828 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00117fe:	83 ec 0c             	sub    esp,0xc
c0011801:	68 38 ce 02 c0       	push   0xc002ce38
c0011806:	e8 0d 5b 01 00       	call   c0027318 <LinkedList<UnixFile>::LinkedList()>
c001180b:	83 c4 10             	add    esp,0x10
c001180e:	83 ec 04             	sub    esp,0x4
c0011811:	68 e0 bb 02 c0       	push   0xc002bbe0
c0011816:	68 38 ce 02 c0       	push   0xc002ce38
c001181b:	68 16 73 02 c0       	push   0xc0027316
c0011820:	e8 04 0f 00 00       	call   c0012729 <__cxa_atexit>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	90                   	nop
c0011829:	83 c4 0c             	add    esp,0xc
c001182c:	c3                   	ret    

c001182d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	68 ff ff 00 00       	push   0xffff
c0011838:	6a 01                	push   0x1
c001183a:	e8 ab ff ff ff       	call   c00117ea <__static_initialization_and_destruction_0(int, int)>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	83 c4 0c             	add    esp,0xc
c0011845:	c3                   	ret    

c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011846:	53                   	push   ebx
c0011847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001184b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001184f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011855:	89 c8                	mov    eax,ecx
c0011857:	d1 e8                	shr    eax,1
c0011859:	03 05 68 bc 02 c0    	add    eax,DWORD PTR ds:0xc002bc68
c001185f:	83 e1 01             	and    ecx,0x1
c0011862:	8a 10                	mov    dl,BYTE PTR [eax]
c0011864:	75 09                	jne    c001186f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011866:	83 e2 f0             	and    edx,0xfffffff0
c0011869:	09 da                	or     edx,ebx
c001186b:	88 10                	mov    BYTE PTR [eax],dl
c001186d:	5b                   	pop    ebx
c001186e:	c3                   	ret    
c001186f:	c1 e3 04             	shl    ebx,0x4
c0011872:	83 e2 0f             	and    edx,0xf
c0011875:	09 da                	or     edx,ebx
c0011877:	88 10                	mov    BYTE PTR [eax],dl
c0011879:	5b                   	pop    ebx
c001187a:	c3                   	ret    

c001187b <Virt::getPageState(unsigned long)>:
c001187b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001187f:	8b 0d 68 bc 02 c0    	mov    ecx,DWORD PTR ds:0xc002bc68
c0011885:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001188b:	89 d0                	mov    eax,edx
c001188d:	d1 e8                	shr    eax,1
c001188f:	83 e2 01             	and    edx,0x1
c0011892:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011895:	75 04                	jne    c001189b <Virt::getPageState(unsigned long)+0x20>
c0011897:	83 e0 0f             	and    eax,0xf
c001189a:	c3                   	ret    
c001189b:	c0 e8 04             	shr    al,0x4
c001189e:	c3                   	ret    

c001189f <Virt::allocateKernelVirtualPages(int)>:
c001189f:	55                   	push   ebp
c00118a0:	31 ed                	xor    ebp,ebp
c00118a2:	57                   	push   edi
c00118a3:	56                   	push   esi
c00118a4:	53                   	push   ebx
c00118a5:	31 db                	xor    ebx,ebx
c00118a7:	83 ec 1c             	sub    esp,0x1c
c00118aa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00118ae:	8b 3d 64 bc 02 c0    	mov    edi,DWORD PTR ds:0xc002bc64
c00118b4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118b9:	57                   	push   edi
c00118ba:	e8 bc ff ff ff       	call   c001187b <Virt::getPageState(unsigned long)>
c00118bf:	5a                   	pop    edx
c00118c0:	84 c0                	test   al,al
c00118c2:	75 3a                	jne    c00118fe <Virt::allocateKernelVirtualPages(int)+0x5f>
c00118c4:	85 db                	test   ebx,ebx
c00118c6:	75 02                	jne    c00118ca <Virt::allocateKernelVirtualPages(int)+0x2b>
c00118c8:	89 fd                	mov    ebp,edi
c00118ca:	43                   	inc    ebx
c00118cb:	39 f3                	cmp    ebx,esi
c00118cd:	74 5a                	je     c0011929 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00118cf:	47                   	inc    edi
c00118d0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00118d6:	76 31                	jbe    c0011909 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00118d8:	c7 05 64 bc 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002bc64,0xc8000
c00118e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118e7:	75 28                	jne    c0011911 <Virt::allocateKernelVirtualPages(int)+0x72>
c00118e9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00118ee:	bf 00 80 0c 00       	mov    edi,0xc8000
c00118f3:	57                   	push   edi
c00118f4:	e8 82 ff ff ff       	call   c001187b <Virt::getPageState(unsigned long)>
c00118f9:	5a                   	pop    edx
c00118fa:	84 c0                	test   al,al
c00118fc:	74 c6                	je     c00118c4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00118fe:	31 db                	xor    ebx,ebx
c0011900:	47                   	inc    edi
c0011901:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011907:	77 cf                	ja     c00118d8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011909:	89 3d 64 bc 02 c0    	mov    DWORD PTR ds:0xc002bc64,edi
c001190f:	eb a8                	jmp    c00118b9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011911:	83 ec 0c             	sub    esp,0xc
c0011914:	68 1c 91 02 c0       	push   0xc002911c
c0011919:	e8 c3 80 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001191e:	8b 3d 64 bc 02 c0    	mov    edi,DWORD PTR ds:0xc002bc64
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	eb 90                	jmp    c00118b9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011929:	89 2d 64 bc 02 c0    	mov    DWORD PTR ds:0xc002bc64,ebp
c001192f:	4b                   	dec    ebx
c0011930:	74 5f                	je     c0011991 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011932:	85 f6                	test   esi,esi
c0011934:	74 3d                	je     c0011973 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011936:	89 e8                	mov    eax,ebp
c0011938:	31 db                	xor    ebx,ebx
c001193a:	8d 7e ff             	lea    edi,[esi-0x1]
c001193d:	eb 14                	jmp    c0011953 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001193f:	6a 01                	push   0x1
c0011941:	43                   	inc    ebx
c0011942:	50                   	push   eax
c0011943:	e8 fe fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011948:	58                   	pop    eax
c0011949:	39 f3                	cmp    ebx,esi
c001194b:	5a                   	pop    edx
c001194c:	74 25                	je     c0011973 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001194e:	a1 64 bc 02 c0       	mov    eax,ds:0xc002bc64
c0011953:	8d 50 01             	lea    edx,[eax+0x1]
c0011956:	85 db                	test   ebx,ebx
c0011958:	89 15 64 bc 02 c0    	mov    DWORD PTR ds:0xc002bc64,edx
c001195e:	74 20                	je     c0011980 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011960:	39 df                	cmp    edi,ebx
c0011962:	75 db                	jne    c001193f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011964:	6a 03                	push   0x3
c0011966:	43                   	inc    ebx
c0011967:	50                   	push   eax
c0011968:	e8 d9 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001196d:	59                   	pop    ecx
c001196e:	39 f3                	cmp    ebx,esi
c0011970:	58                   	pop    eax
c0011971:	75 db                	jne    c001194e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011973:	83 c4 1c             	add    esp,0x1c
c0011976:	89 e8                	mov    eax,ebp
c0011978:	5b                   	pop    ebx
c0011979:	c1 e0 0c             	shl    eax,0xc
c001197c:	5e                   	pop    esi
c001197d:	5f                   	pop    edi
c001197e:	5d                   	pop    ebp
c001197f:	c3                   	ret    
c0011980:	6a 02                	push   0x2
c0011982:	bb 01 00 00 00       	mov    ebx,0x1
c0011987:	50                   	push   eax
c0011988:	e8 b9 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001198d:	58                   	pop    eax
c001198e:	5a                   	pop    edx
c001198f:	eb bd                	jmp    c001194e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011991:	6a 04                	push   0x4
c0011993:	8d 45 01             	lea    eax,[ebp+0x1]
c0011996:	55                   	push   ebp
c0011997:	a3 64 bc 02 c0       	mov    ds:0xc002bc64,eax
c001199c:	e8 a5 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119a1:	59                   	pop    ecx
c00119a2:	89 e8                	mov    eax,ebp
c00119a4:	5b                   	pop    ebx
c00119a5:	c1 e0 0c             	shl    eax,0xc
c00119a8:	83 c4 1c             	add    esp,0x1c
c00119ab:	5b                   	pop    ebx
c00119ac:	5e                   	pop    esi
c00119ad:	5f                   	pop    edi
c00119ae:	5d                   	pop    ebp
c00119af:	c3                   	ret    

c00119b0 <Virt::virtualMemorySetup()>:
c00119b0:	53                   	push   ebx
c00119b1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00119b6:	83 ec 08             	sub    esp,0x8
c00119b9:	6a 0f                	push   0xf
c00119bb:	53                   	push   ebx
c00119bc:	43                   	inc    ebx
c00119bd:	e8 84 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119c2:	59                   	pop    ecx
c00119c3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00119c9:	58                   	pop    eax
c00119ca:	75 ed                	jne    c00119b9 <Virt::virtualMemorySetup()+0x9>
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00119d4:	68 00 00 00 c8       	push   0xc8000000
c00119d9:	68 a3 92 02 c0       	push   0xc00292a3
c00119de:	e8 ac 0e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00119e3:	58                   	pop    eax
c00119e4:	5a                   	pop    edx
c00119e5:	68 00 f0 ff ef       	push   0xeffff000
c00119ea:	68 b7 92 02 c0       	push   0xc00292b7
c00119ef:	e8 9b 0e 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00119f4:	83 c4 10             	add    esp,0x10
c00119f7:	83 ec 08             	sub    esp,0x8
c00119fa:	6a 00                	push   0x0
c00119fc:	53                   	push   ebx
c00119fd:	43                   	inc    ebx
c00119fe:	e8 43 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a0c:	75 e9                	jne    c00119f7 <Virt::virtualMemorySetup()+0x47>
c0011a0e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a13:	83 ec 08             	sub    esp,0x8
c0011a16:	6a 0f                	push   0xf
c0011a18:	53                   	push   ebx
c0011a19:	43                   	inc    ebx
c0011a1a:	e8 27 fe ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a28:	75 e9                	jne    c0011a13 <Virt::virtualMemorySetup()+0x63>
c0011a2a:	83 c4 08             	add    esp,0x8
c0011a2d:	5b                   	pop    ebx
c0011a2e:	c3                   	ret    

c0011a2f <Virt::getAKernelVAS()>:
c0011a2f:	a1 44 ce 02 c0       	mov    eax,ds:0xc002ce44
c0011a34:	c3                   	ret    

c0011a35 <Virt::setupPageSwapping(int)>:
c0011a35:	57                   	push   edi
c0011a36:	56                   	push   esi
c0011a37:	53                   	push   ebx
c0011a38:	83 ec 1c             	sub    esp,0x1c
c0011a3b:	68 14 01 00 00       	push   0x114
c0011a40:	e8 a5 db ff ff       	call   c000f5ea <malloc>
c0011a45:	83 c4 0c             	add    esp,0xc
c0011a48:	89 c6                	mov    esi,eax
c0011a4a:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c0011a50:	68 cb 92 02 c0       	push   0xc00292cb
c0011a55:	50                   	push   eax
c0011a56:	e8 8d 13 00 00       	call   c0012de8 <File::File(char const*, Process*)>
c0011a5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0011a5e:	e8 61 15 00 00       	call   c0012fc4 <File::unlink()>
c0011a63:	58                   	pop    eax
c0011a64:	5a                   	pop    edx
c0011a65:	6a 12                	push   0x12
c0011a67:	56                   	push   esi
c0011a68:	e8 df 13 00 00       	call   c0012e4c <File::open(FileOpenMode)>
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	85 c0                	test   eax,eax
c0011a72:	0f 85 ca 00 00 00    	jne    c0011b42 <Virt::setupPageSwapping(int)+0x10d>
c0011a78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a84:	c1 e3 08             	shl    ebx,0x8
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	68 00 00 01 00       	push   0x10000
c0011a8f:	e8 56 db ff ff       	call   c000f5ea <malloc>
c0011a94:	83 c4 0c             	add    esp,0xc
c0011a97:	89 c7                	mov    edi,eax
c0011a99:	68 00 00 01 00       	push   0x10000
c0011a9e:	6a 00                	push   0x0
c0011aa0:	50                   	push   eax
c0011aa1:	e8 e5 eb fe ff       	call   c000068b <memset>
c0011aa6:	83 c4 10             	add    esp,0x10
c0011aa9:	85 db                	test   ebx,ebx
c0011aab:	79 03                	jns    c0011ab0 <Virt::setupPageSwapping(int)+0x7b>
c0011aad:	83 c3 0f             	add    ebx,0xf
c0011ab0:	c1 fb 04             	sar    ebx,0x4
c0011ab3:	4b                   	dec    ebx
c0011ab4:	83 fb ff             	cmp    ebx,0xffffffff
c0011ab7:	74 4b                	je     c0011b04 <Virt::setupPageSwapping(int)+0xcf>
c0011ab9:	83 ec 0c             	sub    esp,0xc
c0011abc:	8b 06                	mov    eax,DWORD PTR [esi]
c0011abe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ac2:	52                   	push   edx
c0011ac3:	57                   	push   edi
c0011ac4:	6a 00                	push   0x0
c0011ac6:	68 00 00 01 00       	push   0x10000
c0011acb:	56                   	push   esi
c0011acc:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011acf:	83 c4 20             	add    esp,0x20
c0011ad2:	85 c0                	test   eax,eax
c0011ad4:	75 59                	jne    c0011b2f <Virt::setupPageSwapping(int)+0xfa>
c0011ad6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ada:	3d 00 00 01 00       	cmp    eax,0x10000
c0011adf:	74 d2                	je     c0011ab3 <Virt::setupPageSwapping(int)+0x7e>
c0011ae1:	83 ec 08             	sub    esp,0x8
c0011ae4:	4b                   	dec    ebx
c0011ae5:	50                   	push   eax
c0011ae6:	68 1e 93 02 c0       	push   0xc002931e
c0011aeb:	e8 9f 0d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011af0:	c7 04 24 27 93 02 c0 	mov    DWORD PTR [esp],0xc0029327
c0011af7:	e8 e5 7e 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	83 fb ff             	cmp    ebx,0xffffffff
c0011b02:	75 b5                	jne    c0011ab9 <Virt::setupPageSwapping(int)+0x84>
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	56                   	push   esi
c0011b08:	e8 9d 13 00 00       	call   c0012eaa <File::close()>
c0011b0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b10:	e8 f5 da ff ff       	call   c000f60a <rfree>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	85 f6                	test   esi,esi
c0011b1a:	74 0c                	je     c0011b28 <Virt::setupPageSwapping(int)+0xf3>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b21:	56                   	push   esi
c0011b22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	83 c4 10             	add    esp,0x10
c0011b2b:	5b                   	pop    ebx
c0011b2c:	5e                   	pop    esi
c0011b2d:	5f                   	pop    edi
c0011b2e:	c3                   	ret    
c0011b2f:	83 ec 08             	sub    esp,0x8
c0011b32:	50                   	push   eax
c0011b33:	68 06 93 02 c0       	push   0xc0029306
c0011b38:	e8 52 0d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	eb 94                	jmp    c0011ad6 <Virt::setupPageSwapping(int)+0xa1>
c0011b42:	83 ec 08             	sub    esp,0x8
c0011b45:	50                   	push   eax
c0011b46:	68 e2 92 02 c0       	push   0xc00292e2
c0011b4b:	e8 3f 0d 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011b50:	c7 04 24 eb 92 02 c0 	mov    DWORD PTR [esp],0xc00292eb
c0011b57:	e8 85 7e 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	e9 14 ff ff ff       	jmp    c0011a78 <Virt::setupPageSwapping(int)+0x43>

c0011b64 <VAS::VAS()>:
c0011b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b73:	a3 44 ce 02 c0       	mov    ds:0xc002ce44,eax
c0011b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b84:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011b92:	90                   	nop
c0011b93:	c3                   	ret    

c0011b94 <VAS::VAS(VAS*)>:
c0011b94:	83 ec 0c             	sub    esp,0xc
c0011b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ba2:	83 ec 0c             	sub    esp,0xc
c0011ba5:	68 3c 91 02 c0       	push   0xc002913c
c0011baa:	e8 32 7e 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	90                   	nop
c0011bb3:	83 c4 0c             	add    esp,0xc
c0011bb6:	c3                   	ret    
c0011bb7:	90                   	nop

c0011bb8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bbc:	89 c2                	mov    edx,eax
c0011bbe:	c1 e8 0a             	shr    eax,0xa
c0011bc1:	c1 ea 16             	shr    edx,0x16
c0011bc4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bc9:	19 c9                	sbb    ecx,ecx
c0011bcb:	c1 e2 0c             	shl    edx,0xc
c0011bce:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011bd4:	25 fc 0f 00 00       	and    eax,0xffc
c0011bd9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011be0:	01 d0                	add    eax,edx
c0011be2:	c3                   	ret    
c0011be3:	90                   	nop

c0011be4 <VAS::getPageTableEntry(unsigned long)>:
c0011be4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011be8:	89 ca                	mov    edx,ecx
c0011bea:	c1 e9 0a             	shr    ecx,0xa
c0011bed:	c1 ea 16             	shr    edx,0x16
c0011bf0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011bf6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011bfc:	c1 e0 0c             	shl    eax,0xc
c0011bff:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c02:	c3                   	ret    

c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c03:	57                   	push   edi
c0011c04:	56                   	push   esi
c0011c05:	be 01 00 00 00       	mov    esi,0x1
c0011c0a:	53                   	push   ebx
c0011c0b:	83 ec 10             	sub    esp,0x10
c0011c0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c12:	c1 eb 0c             	shr    ebx,0xc
c0011c15:	eb 3f                	jmp    c0011c56 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c17:	e8 13 fe ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c0011c1c:	83 ec 08             	sub    esp,0x8
c0011c1f:	57                   	push   edi
c0011c20:	50                   	push   eax
c0011c21:	e8 be ff ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c2b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c2f:	f6 c4 04             	test   ah,0x4
c0011c32:	75 5f                	jne    c0011c93 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c34:	80 fa 04             	cmp    dl,0x4
c0011c37:	74 78                	je     c0011cb1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c39:	80 fa 02             	cmp    dl,0x2
c0011c3c:	0f 84 88 00 00 00    	je     c0011cca <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c42:	80 fa 03             	cmp    dl,0x3
c0011c45:	0f 84 ad 00 00 00    	je     c0011cf8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c4b:	fe ca                	dec    dl
c0011c4d:	0f 84 92 00 00 00    	je     c0011ce5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c53:	43                   	inc    ebx
c0011c54:	31 f6                	xor    esi,esi
c0011c56:	53                   	push   ebx
c0011c57:	e8 1f fc ff ff       	call   c001187b <Virt::getPageState(unsigned long)>
c0011c5c:	5f                   	pop    edi
c0011c5d:	89 df                	mov    edi,ebx
c0011c5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c63:	c1 e7 0c             	shl    edi,0xc
c0011c66:	84 c0                	test   al,al
c0011c68:	75 ad                	jne    c0011c17 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011c6a:	83 ec 0c             	sub    esp,0xc
c0011c6d:	68 2d 93 02 c0       	push   0xc002932d
c0011c72:	e8 6a 7d 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011c77:	e8 b3 fd ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c0011c7c:	5a                   	pop    edx
c0011c7d:	59                   	pop    ecx
c0011c7e:	57                   	push   edi
c0011c7f:	50                   	push   eax
c0011c80:	e8 5f ff ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c8e:	f6 c4 04             	test   ah,0x4
c0011c91:	74 c0                	je     c0011c53 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c93:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011c97:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c9c:	83 ec 0c             	sub    esp,0xc
c0011c9f:	50                   	push   eax
c0011ca0:	e8 2e df ff ff       	call   c000fbd3 <Phys::freePage(unsigned long)>
c0011ca5:	83 c4 10             	add    esp,0x10
c0011ca8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cac:	80 fa 04             	cmp    dl,0x4
c0011caf:	75 88                	jne    c0011c39 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011cb1:	89 f0                	mov    eax,esi
c0011cb3:	84 c0                	test   al,al
c0011cb5:	75 47                	jne    c0011cfe <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011cb7:	c7 44 24 20 60 91 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029160
c0011cbf:	83 c4 10             	add    esp,0x10
c0011cc2:	5b                   	pop    ebx
c0011cc3:	5e                   	pop    esi
c0011cc4:	5f                   	pop    edi
c0011cc5:	e9 17 7d 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c0011cca:	89 f0                	mov    eax,esi
c0011ccc:	84 c0                	test   al,al
c0011cce:	75 15                	jne    c0011ce5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cd0:	83 ec 0c             	sub    esp,0xc
c0011cd3:	68 49 93 02 c0       	push   0xc0029349
c0011cd8:	e8 04 7d 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	e9 6e ff ff ff       	jmp    c0011c53 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ce5:	83 ec 08             	sub    esp,0x8
c0011ce8:	6a 00                	push   0x0
c0011cea:	53                   	push   ebx
c0011ceb:	e8 56 fb ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	e9 5b ff ff ff       	jmp    c0011c53 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cf8:	89 f0                	mov    eax,esi
c0011cfa:	84 c0                	test   al,al
c0011cfc:	75 15                	jne    c0011d13 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011cfe:	83 ec 08             	sub    esp,0x8
c0011d01:	6a 00                	push   0x0
c0011d03:	53                   	push   ebx
c0011d04:	e8 3d fb ff ff       	call   c0011846 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	5b                   	pop    ebx
c0011d10:	5e                   	pop    esi
c0011d11:	5f                   	pop    edi
c0011d12:	c3                   	ret    
c0011d13:	c7 44 24 20 65 93 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029365
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	5b                   	pop    ebx
c0011d1f:	5e                   	pop    esi
c0011d20:	5f                   	pop    edi
c0011d21:	e9 bb 7c 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>

c0011d26 <VAS::freeAllocatedPages(unsigned long)>:
c0011d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d2e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d32:	74 09                	je     c0011d3d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d38:	e9 c6 fe ff ff       	jmp    c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d3d:	c7 44 24 04 84 91 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029184
c0011d45:	e9 45 0b 00 00       	jmp    c001288f <Dbg::kprintf(char const*, ...)>

c0011d4a <VAS::virtualToPhysical(unsigned long)>:
c0011d4a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d4e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d52:	e8 8d fe ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c0011d57:	5a                   	pop    edx
c0011d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5a:	59                   	pop    ecx
c0011d5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d60:	c3                   	ret    
c0011d61:	90                   	nop

c0011d62 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011d62:	55                   	push   ebp
c0011d63:	57                   	push   edi
c0011d64:	56                   	push   esi
c0011d65:	53                   	push   ebx
c0011d66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011d6a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011d6e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011d72:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d76:	85 db                	test   ebx,ebx
c0011d78:	7e 22                	jle    c0011d9c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011d7a:	c1 e3 0c             	shl    ebx,0xc
c0011d7d:	01 f3                	add    ebx,esi
c0011d7f:	56                   	push   esi
c0011d80:	81 c6 00 10 00 00    	add    esi,0x1000
c0011d86:	55                   	push   ebp
c0011d87:	e8 58 fe ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c0011d8c:	5a                   	pop    edx
c0011d8d:	59                   	pop    ecx
c0011d8e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d90:	21 f9                	and    ecx,edi
c0011d92:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011d96:	39 f3                	cmp    ebx,esi
c0011d98:	89 08                	mov    DWORD PTR [eax],ecx
c0011d9a:	75 e3                	jne    c0011d7f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011d9c:	5b                   	pop    ebx
c0011d9d:	5e                   	pop    esi
c0011d9e:	5f                   	pop    edi
c0011d9f:	5d                   	pop    ebp
c0011da0:	c3                   	ret    
c0011da1:	90                   	nop

c0011da2 <VAS::setToWriteCombining(unsigned long, int)>:
c0011da2:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0011da7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011dad:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011db4:	75 01                	jne    c0011db7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011db6:	c3                   	ret    
c0011db7:	68 80 00 00 00       	push   0x80
c0011dbc:	6a ff                	push   0xffffffff
c0011dbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dca:	e8 93 ff ff ff       	call   c0011d62 <VAS::reflagRange(unsigned long, int, int, int)>
c0011dcf:	83 c4 14             	add    esp,0x14
c0011dd2:	c3                   	ret    
c0011dd3:	90                   	nop

c0011dd4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011dd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011dd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ddd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011de4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011de7:	19 c0                	sbb    eax,eax
c0011de9:	83 ca 03             	or     edx,0x3
c0011dec:	83 e0 fc             	and    eax,0xfffffffc
c0011def:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011df6:	0f 20 d8             	mov    eax,cr3
c0011df9:	0f 22 d8             	mov    cr3,eax
c0011dfc:	c3                   	ret    
c0011dfd:	90                   	nop

c0011dfe <VAS::~VAS()>:
c0011dfe:	83 ec 2c             	sub    esp,0x2c
c0011e01:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e09:	e8 82 b1 00 00       	call   c001cf90 <lockScheduler()>
c0011e0e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e15:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e18:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e1e:	83 ec 04             	sub    esp,0x4
c0011e21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e25:	6a 01                	push   0x1
c0011e27:	50                   	push   eax
c0011e28:	e8 a7 ff ff ff       	call   c0011dd4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e38:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e40:	0f 8f d7 00 00 00    	jg     c0011f1d <VAS::~VAS()+0x11f>
c0011e46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e51:	c1 e2 02             	shl    edx,0x2
c0011e54:	01 d0                	add    eax,edx
c0011e56:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e60:	83 e0 01             	and    eax,0x1
c0011e63:	0f 84 ab 00 00 00    	je     c0011f14 <VAS::~VAS()+0x116>
c0011e69:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011e71:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011e79:	7f 75                	jg     c0011ef0 <VAS::~VAS()+0xf2>
c0011e7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e7f:	c1 e0 0a             	shl    eax,0xa
c0011e82:	89 c2                	mov    edx,eax
c0011e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e88:	01 d0                	add    eax,edx
c0011e8a:	c1 e0 0c             	shl    eax,0xc
c0011e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e9b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ea1:	83 ec 04             	sub    esp,0x4
c0011ea4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ea8:	6a 01                	push   0x1
c0011eaa:	50                   	push   eax
c0011eab:	e8 08 fd ff ff       	call   c0011bb8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011eb0:	83 c4 10             	add    esp,0x10
c0011eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ec5:	25 01 04 00 00       	and    eax,0x401
c0011eca:	3d 01 04 00 00       	cmp    eax,0x401
c0011ecf:	75 19                	jne    c0011eea <VAS::~VAS()+0xec>
c0011ed1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ed5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011eda:	83 ec 0c             	sub    esp,0xc
c0011edd:	50                   	push   eax
c0011ede:	e8 f0 dc ff ff       	call   c000fbd3 <Phys::freePage(unsigned long)>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eea:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011eee:	eb 81                	jmp    c0011e71 <VAS::~VAS()+0x73>
c0011ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef4:	25 00 04 00 00       	and    eax,0x400
c0011ef9:	74 19                	je     c0011f14 <VAS::~VAS()+0x116>
c0011efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f04:	83 ec 0c             	sub    esp,0xc
c0011f07:	50                   	push   eax
c0011f08:	e8 c6 dc ff ff       	call   c000fbd3 <Phys::freePage(unsigned long)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f14:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f18:	e9 1b ff ff ff       	jmp    c0011e38 <VAS::~VAS()+0x3a>
c0011f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f24:	83 ec 0c             	sub    esp,0xc
c0011f27:	50                   	push   eax
c0011f28:	e8 d6 fc ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f2d:	83 c4 10             	add    esp,0x10
c0011f30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f37:	83 ec 0c             	sub    esp,0xc
c0011f3a:	50                   	push   eax
c0011f3b:	e8 93 dc ff ff       	call   c000fbd3 <Phys::freePage(unsigned long)>
c0011f40:	83 c4 10             	add    esp,0x10
c0011f43:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f4b:	c1 e0 02             	shl    eax,0x2
c0011f4e:	83 ec 08             	sub    esp,0x8
c0011f51:	50                   	push   eax
c0011f52:	68 a8 91 02 c0       	push   0xc00291a8
c0011f57:	e8 33 09 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	e8 2e b0 00 00       	call   c001cf92 <unlockScheduler()>
c0011f64:	90                   	nop
c0011f65:	83 c4 2c             	add    esp,0x2c
c0011f68:	c3                   	ret    
c0011f69:	90                   	nop

c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011f6a:	55                   	push   ebp
c0011f6b:	57                   	push   edi
c0011f6c:	56                   	push   esi
c0011f6d:	53                   	push   ebx
c0011f6e:	83 ec 1c             	sub    esp,0x1c
c0011f71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011f75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f79:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011f7f:	77 08                	ja     c0011f89 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011f81:	0f 20 d8             	mov    eax,cr3
c0011f84:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011f87:	75 47                	jne    c0011fd0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011f89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f8d:	09 d8                	or     eax,ebx
c0011f8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f94:	75 57                	jne    c0011fed <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011f96:	89 de                	mov    esi,ebx
c0011f98:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f9b:	c1 ee 16             	shr    esi,0x16
c0011f9e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011fa5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011fa9:	74 54                	je     c0011fff <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011fab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011faf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011fb5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011fb9:	c1 e6 0c             	shl    esi,0xc
c0011fbc:	c1 eb 0a             	shr    ebx,0xa
c0011fbf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011fc5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011fc8:	83 c4 1c             	add    esp,0x1c
c0011fcb:	5b                   	pop    ebx
c0011fcc:	5e                   	pop    esi
c0011fcd:	5f                   	pop    edi
c0011fce:	5d                   	pop    ebp
c0011fcf:	c3                   	ret    
c0011fd0:	83 ec 0c             	sub    esp,0xc
c0011fd3:	68 c8 91 02 c0       	push   0xc00291c8
c0011fd8:	e8 b2 08 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe4:	09 d8                	or     eax,ebx
c0011fe6:	a9 ff 0f 00 00       	test   eax,0xfff
c0011feb:	74 a9                	je     c0011f96 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011fed:	83 ec 0c             	sub    esp,0xc
c0011ff0:	68 30 92 02 c0       	push   0xc0029230
c0011ff5:	e8 e7 79 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	eb 97                	jmp    c0011f96 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011fff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012003:	e8 55 dc ff ff       	call   c000fc5d <Phys::allocatePage()>
c0012008:	89 c5                	mov    ebp,eax
c001200a:	e8 20 fa ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c001200f:	83 ec 0c             	sub    esp,0xc
c0012012:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012016:	6a 01                	push   0x1
c0012018:	e8 82 f8 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c001201d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012024:	6a 01                	push   0x1
c0012026:	50                   	push   eax
c0012027:	55                   	push   ebp
c0012028:	81 cd 07 04 00 00    	or     ebp,0x407
c001202e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012032:	51                   	push   ecx
c0012033:	e8 26 02 00 00       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012038:	83 c4 1c             	add    esp,0x1c
c001203b:	68 00 10 00 00       	push   0x1000
c0012040:	6a 00                	push   0x0
c0012042:	50                   	push   eax
c0012043:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012047:	e8 3f e6 fe ff       	call   c000068b <memset>
c001204c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012050:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012053:	e8 ab fb ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c0012058:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001205c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012065:	e9 41 ff ff ff       	jmp    c0011fab <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001206a <VAS::allocatePages(int, int)>:
c001206a:	55                   	push   ebp
c001206b:	57                   	push   edi
c001206c:	56                   	push   esi
c001206d:	53                   	push   ebx
c001206e:	83 ec 1c             	sub    esp,0x1c
c0012071:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012075:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001207a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012080:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012086:	83 e0 01             	and    eax,0x1
c0012089:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001208d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012091:	0f 85 cc 00 00 00    	jne    c0012163 <VAS::allocatePages(int, int)+0xf9>
c0012097:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001209a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209e:	85 c0                	test   eax,eax
c00120a0:	0f 84 a1 00 00 00    	je     c0012147 <VAS::allocatePages(int, int)+0xdd>
c00120a6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ae:	c1 e6 0c             	shl    esi,0xc
c00120b1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00120b5:	85 c0                	test   eax,eax
c00120b7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00120ba:	7e 33                	jle    c00120ef <VAS::allocatePages(int, int)+0x85>
c00120bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00120c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120c4:	81 cd 00 04 00 00    	or     ebp,0x400
c00120ca:	e8 8e db ff ff       	call   c000fc5d <Phys::allocatePage()>
c00120cf:	55                   	push   ebp
c00120d0:	53                   	push   ebx
c00120d1:	50                   	push   eax
c00120d2:	57                   	push   edi
c00120d3:	e8 92 fe ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c00120d8:	83 c4 10             	add    esp,0x10
c00120db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120e0:	74 03                	je     c00120e5 <VAS::allocatePages(int, int)+0x7b>
c00120e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120eb:	39 de                	cmp    esi,ebx
c00120ed:	75 db                	jne    c00120ca <VAS::allocatePages(int, int)+0x60>
c00120ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120f4:	75 12                	jne    c0012108 <VAS::allocatePages(int, int)+0x9e>
c00120f6:	0f 20 d8             	mov    eax,cr3
c00120f9:	0f 22 d8             	mov    cr3,eax
c00120fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012100:	83 c4 1c             	add    esp,0x1c
c0012103:	5b                   	pop    ebx
c0012104:	5e                   	pop    esi
c0012105:	5f                   	pop    edi
c0012106:	5d                   	pop    ebp
c0012107:	c3                   	ret    
c0012108:	c1 ee 0a             	shr    esi,0xa
c001210b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001210f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012115:	c1 eb 0a             	shr    ebx,0xa
c0012118:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001211e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012124:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001212a:	39 c3                	cmp    ebx,eax
c001212c:	77 ce                	ja     c00120fc <VAS::allocatePages(int, int)+0x92>
c001212e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012131:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012137:	39 d8                	cmp    eax,ebx
c0012139:	73 f3                	jae    c001212e <VAS::allocatePages(int, int)+0xc4>
c001213b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001213f:	83 c4 1c             	add    esp,0x1c
c0012142:	5b                   	pop    ebx
c0012143:	5e                   	pop    esi
c0012144:	5f                   	pop    edi
c0012145:	5d                   	pop    ebp
c0012146:	c3                   	ret    
c0012147:	83 ec 0c             	sub    esp,0xc
c001214a:	68 54 92 02 c0       	push   0xc0029254
c001214f:	e8 8d 78 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0012154:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001215b:	83 c4 10             	add    esp,0x10
c001215e:	e9 43 ff ff ff       	jmp    c00120a6 <VAS::allocatePages(int, int)+0x3c>
c0012163:	83 ec 0c             	sub    esp,0xc
c0012166:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001216a:	e8 30 f7 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c001216f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012173:	83 c4 10             	add    esp,0x10
c0012176:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001217b:	0f 87 9b 00 00 00    	ja     c001221c <VAS::allocatePages(int, int)+0x1b2>
c0012181:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012185:	85 d2                	test   edx,edx
c0012187:	7e 3c                	jle    c00121c5 <VAS::allocatePages(int, int)+0x15b>
c0012189:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001218d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012191:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012195:	c1 e5 0c             	shl    ebp,0xc
c0012198:	81 ce 00 04 00 00    	or     esi,0x400
c001219e:	01 dd                	add    ebp,ebx
c00121a0:	e8 b8 da ff ff       	call   c000fc5d <Phys::allocatePage()>
c00121a5:	56                   	push   esi
c00121a6:	53                   	push   ebx
c00121a7:	50                   	push   eax
c00121a8:	57                   	push   edi
c00121a9:	e8 bc fd ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c00121ae:	83 c4 10             	add    esp,0x10
c00121b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121b6:	74 03                	je     c00121bb <VAS::allocatePages(int, int)+0x151>
c00121b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121c1:	39 dd                	cmp    ebp,ebx
c00121c3:	75 db                	jne    c00121a0 <VAS::allocatePages(int, int)+0x136>
c00121c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121ca:	0f 84 26 ff ff ff    	je     c00120f6 <VAS::allocatePages(int, int)+0x8c>
c00121d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121d8:	89 d3                	mov    ebx,edx
c00121da:	c1 e0 0c             	shl    eax,0xc
c00121dd:	c1 eb 0a             	shr    ebx,0xa
c00121e0:	01 d0                	add    eax,edx
c00121e2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121e8:	c1 e8 0a             	shr    eax,0xa
c00121eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f6:	2d 00 00 40 00       	sub    eax,0x400000
c00121fb:	39 c3                	cmp    ebx,eax
c00121fd:	0f 87 f9 fe ff ff    	ja     c00120fc <VAS::allocatePages(int, int)+0x92>
c0012203:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012206:	81 c3 00 10 00 00    	add    ebx,0x1000
c001220c:	39 d8                	cmp    eax,ebx
c001220e:	73 f3                	jae    c0012203 <VAS::allocatePages(int, int)+0x199>
c0012210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012214:	83 c4 1c             	add    esp,0x1c
c0012217:	5b                   	pop    ebx
c0012218:	5e                   	pop    esi
c0012219:	5f                   	pop    edi
c001221a:	5d                   	pop    ebp
c001221b:	c3                   	ret    
c001221c:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0012221:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012227:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001222e:	0f 84 4d ff ff ff    	je     c0012181 <VAS::allocatePages(int, int)+0x117>
c0012234:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001223c:	e9 40 ff ff ff       	jmp    c0012181 <VAS::allocatePages(int, int)+0x117>
c0012241:	90                   	nop

c0012242 <VAS::setCPUSpecific(unsigned long)>:
c0012242:	83 ec 0c             	sub    esp,0xc
c0012245:	6a 05                	push   0x5
c0012247:	68 00 00 40 c2       	push   0xc2400000
c001224c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012254:	e8 11 fd ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012259:	83 c4 1c             	add    esp,0x1c
c001225c:	c3                   	ret    
c001225d:	90                   	nop

c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001225e:	55                   	push   ebp
c001225f:	57                   	push   edi
c0012260:	56                   	push   esi
c0012261:	53                   	push   ebx
c0012262:	83 ec 1c             	sub    esp,0x1c
c0012265:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001226a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001226e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012274:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012278:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001227e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012282:	83 e0 01             	and    eax,0x1
c0012285:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012289:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001228d:	85 c0                	test   eax,eax
c001228f:	7e 39                	jle    c00122ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012291:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012295:	89 f3                	mov    ebx,esi
c0012297:	c1 e0 0c             	shl    eax,0xc
c001229a:	01 f0                	add    eax,esi
c001229c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a0:	55                   	push   ebp
c00122a1:	53                   	push   ebx
c00122a2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122a6:	29 f0                	sub    eax,esi
c00122a8:	01 d8                	add    eax,ebx
c00122aa:	50                   	push   eax
c00122ab:	57                   	push   edi
c00122ac:	e8 b9 fc ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122b9:	74 03                	je     c00122be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00122bb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00122be:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122c4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00122c8:	75 d6                	jne    c00122a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00122ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122cf:	75 10                	jne    c00122e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00122d1:	0f 20 d8             	mov    eax,cr3
c00122d4:	0f 22 d8             	mov    cr3,eax
c00122d7:	83 c4 1c             	add    esp,0x1c
c00122da:	89 f0                	mov    eax,esi
c00122dc:	5b                   	pop    ebx
c00122dd:	5e                   	pop    esi
c00122de:	5f                   	pop    edi
c00122df:	5d                   	pop    ebp
c00122e0:	c3                   	ret    
c00122e1:	89 f3                	mov    ebx,esi
c00122e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122e7:	c1 eb 0a             	shr    ebx,0xa
c00122ea:	c1 e0 0c             	shl    eax,0xc
c00122ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122f3:	01 f0                	add    eax,esi
c00122f5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00122fb:	c1 e8 0a             	shr    eax,0xa
c00122fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012303:	2d 00 00 40 00       	sub    eax,0x400000
c0012308:	39 c3                	cmp    ebx,eax
c001230a:	77 cb                	ja     c00122d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001230c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001230f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012315:	39 d8                	cmp    eax,ebx
c0012317:	73 f3                	jae    c001230c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012319:	83 c4 1c             	add    esp,0x1c
c001231c:	89 f0                	mov    eax,esi
c001231e:	5b                   	pop    ebx
c001231f:	5e                   	pop    esi
c0012320:	5f                   	pop    edi
c0012321:	5d                   	pop    ebp
c0012322:	c3                   	ret    
c0012323:	90                   	nop

c0012324 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012324:	55                   	push   ebp
c0012325:	57                   	push   edi
c0012326:	56                   	push   esi
c0012327:	53                   	push   ebx
c0012328:	83 ec 1c             	sub    esp,0x1c
c001232b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001232f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012333:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012337:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001233b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012340:	75 4a                	jne    c001238c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012342:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012346:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012349:	c1 eb 16             	shr    ebx,0x16
c001234c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012353:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012357:	74 4d                	je     c00123a6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012359:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001235d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012361:	c1 e8 0a             	shr    eax,0xa
c0012364:	80 fa 01             	cmp    dl,0x1
c0012367:	19 d2                	sbb    edx,edx
c0012369:	c1 e3 0c             	shl    ebx,0xc
c001236c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012370:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012376:	25 fc 0f 00 00       	and    eax,0xffc
c001237b:	01 d8                	add    eax,ebx
c001237d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012384:	83 c4 1c             	add    esp,0x1c
c0012387:	5b                   	pop    ebx
c0012388:	5e                   	pop    esi
c0012389:	5f                   	pop    edi
c001238a:	5d                   	pop    ebp
c001238b:	c3                   	ret    
c001238c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012390:	83 ec 0c             	sub    esp,0xc
c0012393:	68 80 92 02 c0       	push   0xc0029280
c0012398:	e8 44 76 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123a4:	eb 9c                	jmp    c0012342 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00123a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123aa:	e8 ae d8 ff ff       	call   c000fc5d <Phys::allocatePage()>
c00123af:	89 c5                	mov    ebp,eax
c00123b1:	e8 79 f6 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c00123b6:	83 ec 0c             	sub    esp,0xc
c00123b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123bd:	6a 01                	push   0x1
c00123bf:	e8 db f4 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c00123c4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123cb:	6a 01                	push   0x1
c00123cd:	50                   	push   eax
c00123ce:	55                   	push   ebp
c00123cf:	81 cd 07 04 00 00    	or     ebp,0x407
c00123d5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123d9:	51                   	push   ecx
c00123da:	e8 7f fe ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123df:	83 c4 1c             	add    esp,0x1c
c00123e2:	68 00 10 00 00       	push   0x1000
c00123e7:	6a 00                	push   0x0
c00123e9:	50                   	push   eax
c00123ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123ee:	e8 98 e2 fe ff       	call   c000068b <memset>
c00123f3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123f7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123fa:	e8 04 f8 ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c00123ff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012408:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001240c:	e9 48 ff ff ff       	jmp    c0012359 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012411:	90                   	nop

c0012412 <VAS::VAS(bool)>:
c0012412:	53                   	push   ebx
c0012413:	83 ec 28             	sub    esp,0x28
c0012416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001241a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001241e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001242d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012431:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012434:	e8 24 d8 ff ff       	call   c000fc5d <Phys::allocatePage()>
c0012439:	89 c2                	mov    edx,eax
c001243b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001243f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012442:	e8 e8 f5 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c0012447:	89 c3                	mov    ebx,eax
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	6a 01                	push   0x1
c001244e:	e8 4c f4 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c0012453:	83 c4 10             	add    esp,0x10
c0012456:	89 c2                	mov    edx,eax
c0012458:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001245c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001245f:	83 ec 0c             	sub    esp,0xc
c0012462:	6a 03                	push   0x3
c0012464:	6a 01                	push   0x1
c0012466:	52                   	push   edx
c0012467:	50                   	push   eax
c0012468:	53                   	push   ebx
c0012469:	e8 f0 fd ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001246e:	83 c4 20             	add    esp,0x20
c0012471:	89 c2                	mov    edx,eax
c0012473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012477:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001247a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012482:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001248a:	7f 1c                	jg     c00124a8 <VAS::VAS(bool)+0x96>
c001248c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012490:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012493:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012497:	c1 e2 02             	shl    edx,0x2
c001249a:	01 d0                	add    eax,edx
c001249c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124a6:	eb da                	jmp    c0012482 <VAS::VAS(bool)+0x70>
c00124a8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00124b0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00124b8:	7f 7a                	jg     c0012534 <VAS::VAS(bool)+0x122>
c00124ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124be:	2d 00 02 00 00       	sub    eax,0x200
c00124c3:	c1 e0 0c             	shl    eax,0xc
c00124c6:	83 c8 03             	or     eax,0x3
c00124c9:	89 c2                	mov    edx,eax
c00124cb:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00124d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124dc:	83 e0 10             	and    eax,0x10
c00124df:	84 c0                	test   al,al
c00124e1:	74 07                	je     c00124ea <VAS::VAS(bool)+0xd8>
c00124e3:	b8 00 01 00 00       	mov    eax,0x100
c00124e8:	eb 05                	jmp    c00124ef <VAS::VAS(bool)+0xdd>
c00124ea:	b8 00 00 00 00       	mov    eax,0x0
c00124ef:	09 d0                	or     eax,edx
c00124f1:	89 c1                	mov    ecx,eax
c00124f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124fe:	c1 e2 02             	shl    edx,0x2
c0012501:	01 d0                	add    eax,edx
c0012503:	89 ca                	mov    edx,ecx
c0012505:	89 10                	mov    DWORD PTR [eax],edx
c0012507:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001250b:	2d 40 03 00 00       	sub    eax,0x340
c0012510:	83 f8 7f             	cmp    eax,0x7f
c0012513:	77 16                	ja     c001252b <VAS::VAS(bool)+0x119>
c0012515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012519:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001251c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012520:	c1 e2 02             	shl    edx,0x2
c0012523:	01 d0                	add    eax,edx
c0012525:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001252b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001252f:	e9 7c ff ff ff       	jmp    c00124b0 <VAS::VAS(bool)+0x9e>
c0012534:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0012539:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012545:	83 e0 10             	and    eax,0x10
c0012548:	84 c0                	test   al,al
c001254a:	74 07                	je     c0012553 <VAS::VAS(bool)+0x141>
c001254c:	b8 03 41 00 00       	mov    eax,0x4103
c0012551:	eb 05                	jmp    c0012558 <VAS::VAS(bool)+0x146>
c0012553:	b8 03 40 00 00       	mov    eax,0x4003
c0012558:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001255c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001255f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012565:	89 02                	mov    DWORD PTR [edx],eax
c0012567:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001256c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012572:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012578:	83 ec 08             	sub    esp,0x8
c001257b:	50                   	push   eax
c001257c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012580:	e8 bd fc ff ff       	call   c0012242 <VAS::setCPUSpecific(unsigned long)>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001258c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001258f:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0012594:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001259a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a0:	83 e0 10             	and    eax,0x10
c00125a3:	84 c0                	test   al,al
c00125a5:	74 07                	je     c00125ae <VAS::VAS(bool)+0x19c>
c00125a7:	b8 00 01 00 00       	mov    eax,0x100
c00125ac:	eb 05                	jmp    c00125b3 <VAS::VAS(bool)+0x1a1>
c00125ae:	b8 00 00 00 00       	mov    eax,0x0
c00125b3:	09 c2                	or     edx,eax
c00125b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00125bc:	05 fc 0f 00 00       	add    eax,0xffc
c00125c1:	83 ca 03             	or     edx,0x3
c00125c4:	89 10                	mov    DWORD PTR [eax],edx
c00125c6:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00125cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	50                   	push   eax
c00125d5:	e8 c8 19 00 00       	call   c0013fa2 <Device::getName()>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	83 ec 08             	sub    esp,0x8
c00125e0:	68 7f 93 02 c0       	push   0xc002937f
c00125e5:	50                   	push   eax
c00125e6:	e8 90 e1 fe ff       	call   c000077b <strcmp>
c00125eb:	83 c4 10             	add    esp,0x10
c00125ee:	85 c0                	test   eax,eax
c00125f0:	0f 94 c0             	sete   al
c00125f3:	84 c0                	test   al,al
c00125f5:	74 70                	je     c0012667 <VAS::VAS(bool)+0x255>
c00125f7:	e8 77 a9 00 00       	call   c001cf73 <disableIRQs()>
c00125fc:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0012601:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012607:	05 7c 09 00 00       	add    eax,0x97c
c001260c:	83 ec 0c             	sub    esp,0xc
c001260f:	50                   	push   eax
c0012610:	e8 51 ca ff ff       	call   c000f066 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012615:	83 c4 10             	add    esp,0x10
c0012618:	25 00 f0 ff ff       	and    eax,0xfffff000
c001261d:	89 c3                	mov    ebx,eax
c001261f:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0012624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001262a:	05 7c 09 00 00       	add    eax,0x97c
c001262f:	83 ec 0c             	sub    esp,0xc
c0012632:	50                   	push   eax
c0012633:	e8 2e ca ff ff       	call   c000f066 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	83 ec 08             	sub    esp,0x8
c001263e:	50                   	push   eax
c001263f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012643:	e8 9c f5 ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	8b 00                	mov    eax,DWORD PTR [eax]
c001264d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012652:	6a 11                	push   0x11
c0012654:	53                   	push   ebx
c0012655:	50                   	push   eax
c0012656:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001265a:	e8 0b f9 ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c001265f:	83 c4 10             	add    esp,0x10
c0012662:	e8 1a a9 00 00       	call   c001cf81 <enableIRQs()>
c0012667:	90                   	nop
c0012668:	83 c4 28             	add    esp,0x28
c001266b:	5b                   	pop    ebx
c001266c:	c3                   	ret    

c001266d <mapVASFirstTime>:
c001266d:	55                   	push   ebp
c001266e:	57                   	push   edi
c001266f:	56                   	push   esi
c0012670:	53                   	push   ebx
c0012671:	83 ec 0c             	sub    esp,0xc
c0012674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012679:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001267c:	4a                   	dec    edx
c001267d:	0f 84 8e 00 00 00    	je     c0012711 <mapVASFirstTime+0xa4>
c0012683:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012686:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012689:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001268e:	c1 e5 15             	shl    ebp,0x15
c0012691:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012696:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001269c:	29 eb                	sub    ebx,ebp
c001269e:	29 ee                	sub    esi,ebp
c00126a0:	e8 b8 d5 ff ff       	call   c000fc5d <Phys::allocatePage()>
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	68 03 04 00 00       	push   0x403
c00126ad:	6a 01                	push   0x1
c00126af:	53                   	push   ebx
c00126b0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	e8 a1 fb ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126bd:	83 c4 20             	add    esp,0x20
c00126c0:	39 f3                	cmp    ebx,esi
c00126c2:	75 dc                	jne    c00126a0 <mapVASFirstTime+0x33>
c00126c4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00126c9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00126ce:	29 ee                	sub    esi,ebp
c00126d0:	29 e8                	sub    eax,ebp
c00126d2:	89 c5                	mov    ebp,eax
c00126d4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00126d8:	19 db                	sbb    ebx,ebx
c00126da:	e8 7e d5 ff ff       	call   c000fc5d <Phys::allocatePage()>
c00126df:	83 e3 04             	and    ebx,0x4
c00126e2:	83 ec 0c             	sub    esp,0xc
c00126e5:	81 c3 03 04 00 00    	add    ebx,0x403
c00126eb:	53                   	push   ebx
c00126ec:	6a 01                	push   0x1
c00126ee:	56                   	push   esi
c00126ef:	81 ee 00 10 00 00    	sub    esi,0x1000
c00126f5:	50                   	push   eax
c00126f6:	57                   	push   edi
c00126f7:	e8 62 fb ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126fc:	83 c4 20             	add    esp,0x20
c00126ff:	39 f5                	cmp    ebp,esi
c0012701:	75 d1                	jne    c00126d4 <mapVASFirstTime+0x67>
c0012703:	0f 20 d8             	mov    eax,cr3
c0012706:	0f 22 d8             	mov    cr3,eax
c0012709:	83 c4 0c             	add    esp,0xc
c001270c:	5b                   	pop    ebx
c001270d:	5e                   	pop    esi
c001270e:	5f                   	pop    edi
c001270f:	5d                   	pop    ebp
c0012710:	c3                   	ret    
c0012711:	83 ec 0c             	sub    esp,0xc
c0012714:	68 8d 93 02 c0       	push   0xc002938d
c0012719:	e8 71 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	83 c4 0c             	add    esp,0xc
c0012724:	5b                   	pop    ebx
c0012725:	5e                   	pop    esi
c0012726:	5f                   	pop    edi
c0012727:	5d                   	pop    ebp
c0012728:	c3                   	ret    

c0012729 <__cxa_atexit>:
c0012729:	31 c0                	xor    eax,eax
c001272b:	c3                   	ret    

c001272c <__cxa_finalize>:
c001272c:	c3                   	ret    

c001272d <__stack_chk_fail>:
c001272d:	55                   	push   ebp
c001272e:	89 e5                	mov    ebp,esp
c0012730:	83 ec 14             	sub    esp,0x14
c0012733:	68 a6 93 02 c0       	push   0xc00293a6
c0012738:	e8 52 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001273d:	58                   	pop    eax
c001273e:	5a                   	pop    edx
c001273f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012742:	68 f6 93 02 c0       	push   0xc00293f6
c0012747:	e8 43 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001274c:	59                   	pop    ecx
c001274d:	58                   	pop    eax
c001274e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012751:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012754:	68 f6 93 02 c0       	push   0xc00293f6
c0012759:	e8 31 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001275e:	5a                   	pop    edx
c001275f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012762:	59                   	pop    ecx
c0012763:	8b 00                	mov    eax,DWORD PTR [eax]
c0012765:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012768:	68 f6 93 02 c0       	push   0xc00293f6
c001276d:	e8 1d 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0012772:	5a                   	pop    edx
c0012773:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012776:	59                   	pop    ecx
c0012777:	8b 00                	mov    eax,DWORD PTR [eax]
c0012779:	8b 00                	mov    eax,DWORD PTR [eax]
c001277b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001277e:	68 f6 93 02 c0       	push   0xc00293f6
c0012783:	e8 07 01 00 00       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0012788:	c7 04 24 fe 93 02 c0 	mov    DWORD PTR [esp],0xc00293fe
c001278f:	e8 4d 72 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0012794:	83 c4 10             	add    esp,0x10
c0012797:	c9                   	leave  
c0012798:	c3                   	ret    

c0012799 <__cxa_pure_virtual>:
c0012799:	83 ec 18             	sub    esp,0x18
c001279c:	68 16 94 02 c0       	push   0xc0029416
c00127a1:	e8 3b 72 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00127a6:	83 c4 1c             	add    esp,0x1c
c00127a9:	c3                   	ret    

c00127aa <operator new[](unsigned long)>:
c00127aa:	e9 3b ce ff ff       	jmp    c000f5ea <malloc>

c00127af <operator delete(void*, unsigned long)>:
c00127af:	e9 56 ce ff ff       	jmp    c000f60a <rfree>

c00127b4 <operator delete[](void*)>:
c00127b4:	e9 51 ce ff ff       	jmp    c000f60a <rfree>

c00127b9 <operator delete[](void*, unsigned long)>:
c00127b9:	e9 4c ce ff ff       	jmp    c000f60a <rfree>

c00127be <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127be:	57                   	push   edi
c00127bf:	b9 3f 00 00 00       	mov    ecx,0x3f
c00127c4:	56                   	push   esi
c00127c5:	be 2c 94 02 c0       	mov    esi,0xc002942c
c00127ca:	53                   	push   ebx
c00127cb:	83 ec 40             	sub    esp,0x40
c00127ce:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00127d2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00127d6:	fc                   	cld    
c00127d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127d9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00127dd:	83 f9 3e             	cmp    ecx,0x3e
c00127e0:	7e 05                	jle    c00127e7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00127e2:	b9 3e 00 00 00       	mov    ecx,0x3e
c00127e7:	89 df                	mov    edi,ebx
c00127e9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00127ed:	eb 02                	jmp    c00127f1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00127ef:	89 c7                	mov    edi,eax
c00127f1:	31 d2                	xor    edx,edx
c00127f3:	46                   	inc    esi
c00127f4:	89 f8                	mov    eax,edi
c00127f6:	f7 f1                	div    ecx
c00127f8:	39 cf                	cmp    edi,ecx
c00127fa:	73 f3                	jae    c00127ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00127fc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127ff:	eb 02                	jmp    c0012803 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012801:	89 c3                	mov    ebx,eax
c0012803:	31 d2                	xor    edx,edx
c0012805:	4e                   	dec    esi
c0012806:	89 d8                	mov    eax,ebx
c0012808:	f7 f1                	div    ecx
c001280a:	39 cb                	cmp    ebx,ecx
c001280c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012810:	88 16                	mov    BYTE PTR [esi],dl
c0012812:	73 ed                	jae    c0012801 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012814:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012818:	83 c4 40             	add    esp,0x40
c001281b:	5b                   	pop    ebx
c001281c:	5e                   	pop    esi
c001281d:	5f                   	pop    edi
c001281e:	c3                   	ret    

c001281f <Dbg::logc(char)>:
c001281f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012823:	ba fd 03 00 00       	mov    edx,0x3fd
c0012828:	ec                   	in     al,dx
c0012829:	a8 20                	test   al,0x20
c001282b:	74 fb                	je     c0012828 <Dbg::logc(char)+0x9>
c001282d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012832:	88 c8                	mov    al,cl
c0012834:	ee                   	out    dx,al
c0012835:	c3                   	ret    

c0012836 <Dbg::logs(char*)>:
c0012836:	53                   	push   ebx
c0012837:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001283b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001283e:	84 c0                	test   al,al
c0012840:	74 0f                	je     c0012851 <Dbg::logs(char*)+0x1b>
c0012842:	50                   	push   eax
c0012843:	43                   	inc    ebx
c0012844:	e8 d6 ff ff ff       	call   c001281f <Dbg::logc(char)>
c0012849:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001284c:	5a                   	pop    edx
c001284d:	84 c0                	test   al,al
c001284f:	75 f1                	jne    c0012842 <Dbg::logs(char*)+0xc>
c0012851:	5b                   	pop    ebx
c0012852:	c3                   	ret    

c0012853 <Dbg::logWriteInt(unsigned int)>:
c0012853:	83 ec 10             	sub    esp,0x10
c0012856:	6a 0a                	push   0xa
c0012858:	8d 44 24 08          	lea    eax,[esp+0x8]
c001285c:	50                   	push   eax
c001285d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012861:	e8 58 ff ff ff       	call   c00127be <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012866:	50                   	push   eax
c0012867:	e8 ca ff ff ff       	call   c0012836 <Dbg::logs(char*)>
c001286c:	83 c4 20             	add    esp,0x20
c001286f:	c3                   	ret    

c0012870 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012870:	83 ec 10             	sub    esp,0x10
c0012873:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012877:	8d 44 24 08          	lea    eax,[esp+0x8]
c001287b:	50                   	push   eax
c001287c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012880:	e8 39 ff ff ff       	call   c00127be <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012885:	50                   	push   eax
c0012886:	e8 ab ff ff ff       	call   c0012836 <Dbg::logs(char*)>
c001288b:	83 c4 20             	add    esp,0x20
c001288e:	c3                   	ret    

c001288f <Dbg::kprintf(char const*, ...)>:
c001288f:	55                   	push   ebp
c0012890:	57                   	push   edi
c0012891:	56                   	push   esi
c0012892:	53                   	push   ebx
c0012893:	83 ec 0c             	sub    esp,0xc
c0012896:	8d 44 24 24          	lea    eax,[esp+0x24]
c001289a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001289e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128a5:	84 c0                	test   al,al
c00128a7:	74 4a                	je     c00128f3 <Dbg::kprintf(char const*, ...)+0x64>
c00128a9:	31 db                	xor    ebx,ebx
c00128ab:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128ae:	3c 25                	cmp    al,0x25
c00128b0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128b3:	0f 85 e4 00 00 00    	jne    c001299d <Dbg::kprintf(char const*, ...)+0x10e>
c00128b9:	83 c3 02             	add    ebx,0x2
c00128bc:	8a 07                	mov    al,BYTE PTR [edi]
c00128be:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128c1:	83 e8 25             	sub    eax,0x25
c00128c4:	3c 53                	cmp    al,0x53
c00128c6:	0f 87 ba 00 00 00    	ja     c0012986 <Dbg::kprintf(char const*, ...)+0xf7>
c00128cc:	0f b6 c0             	movzx  eax,al
c00128cf:	ff 24 85 6c 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6b94]
c00128d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128da:	89 c8                	mov    eax,ecx
c00128dc:	83 c1 04             	add    ecx,0x4
c00128df:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128e3:	ff 30                	push   DWORD PTR [eax]
c00128e5:	e8 4c ff ff ff       	call   c0012836 <Dbg::logs(char*)>
c00128ea:	58                   	pop    eax
c00128eb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00128ef:	84 c0                	test   al,al
c00128f1:	75 b8                	jne    c00128ab <Dbg::kprintf(char const*, ...)+0x1c>
c00128f3:	83 c4 0c             	add    esp,0xc
c00128f6:	5b                   	pop    ebx
c00128f7:	5e                   	pop    esi
c00128f8:	5f                   	pop    edi
c00128f9:	5d                   	pop    ebp
c00128fa:	c3                   	ret    
c00128fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128ff:	89 d0                	mov    eax,edx
c0012901:	83 c2 04             	add    edx,0x4
c0012904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012908:	ff 30                	push   DWORD PTR [eax]
c001290a:	e8 44 ff ff ff       	call   c0012853 <Dbg::logWriteInt(unsigned int)>
c001290f:	58                   	pop    eax
c0012910:	eb d9                	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012912:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012916:	89 d0                	mov    eax,edx
c0012918:	83 c2 04             	add    edx,0x4
c001291b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001291e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012922:	50                   	push   eax
c0012923:	e8 f7 fe ff ff       	call   c001281f <Dbg::logc(char)>
c0012928:	58                   	pop    eax
c0012929:	eb c0                	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c001292b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001292f:	89 c8                	mov    eax,ecx
c0012931:	83 c1 04             	add    ecx,0x4
c0012934:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012938:	ff 30                	push   DWORD PTR [eax]
c001293a:	e8 14 ff ff ff       	call   c0012853 <Dbg::logWriteInt(unsigned int)>
c001293f:	5f                   	pop    edi
c0012940:	eb a9                	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012942:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012946:	89 c8                	mov    eax,ecx
c0012948:	83 c1 04             	add    ecx,0x4
c001294b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001294f:	6a 10                	push   0x10
c0012951:	ff 30                	push   DWORD PTR [eax]
c0012953:	e8 18 ff ff ff       	call   c0012870 <Dbg::logWriteIntBase(unsigned int, int)>
c0012958:	59                   	pop    ecx
c0012959:	5f                   	pop    edi
c001295a:	eb 8f                	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c001295c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012960:	89 d0                	mov    eax,edx
c0012962:	83 c2 08             	add    edx,0x8
c0012965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012969:	6a 10                	push   0x10
c001296b:	ff 30                	push   DWORD PTR [eax]
c001296d:	e8 fe fe ff ff       	call   c0012870 <Dbg::logWriteIntBase(unsigned int, int)>
c0012972:	58                   	pop    eax
c0012973:	5a                   	pop    edx
c0012974:	e9 72 ff ff ff       	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012979:	6a 25                	push   0x25
c001297b:	e8 9f fe ff ff       	call   c001281f <Dbg::logc(char)>
c0012980:	58                   	pop    eax
c0012981:	e9 65 ff ff ff       	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c0012986:	6a 25                	push   0x25
c0012988:	e8 92 fe ff ff       	call   c001281f <Dbg::logc(char)>
c001298d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012990:	50                   	push   eax
c0012991:	e8 89 fe ff ff       	call   c001281f <Dbg::logc(char)>
c0012996:	5a                   	pop    edx
c0012997:	59                   	pop    ecx
c0012998:	e9 4e ff ff ff       	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c001299d:	50                   	push   eax
c001299e:	89 eb                	mov    ebx,ebp
c00129a0:	e8 7a fe ff ff       	call   c001281f <Dbg::logc(char)>
c00129a5:	89 fd                	mov    ebp,edi
c00129a7:	58                   	pop    eax
c00129a8:	e9 3e ff ff ff       	jmp    c00128eb <Dbg::kprintf(char const*, ...)+0x5c>
c00129ad:	90                   	nop

c00129ae <File::read(unsigned long long, void*, int*)>:
c00129ae:	53                   	push   ebx
c00129af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129be:	3c 19                	cmp    al,0x19
c00129c0:	77 35                	ja     c00129f7 <File::read(unsigned long long, void*, int*)+0x49>
c00129c2:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c00129c9:	85 c0                	test   eax,eax
c00129cb:	74 2a                	je     c00129f7 <File::read(unsigned long long, void*, int*)+0x49>
c00129cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129d3:	85 c0                	test   eax,eax
c00129d5:	74 20                	je     c00129f7 <File::read(unsigned long long, void*, int*)+0x49>
c00129d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129db:	74 21                	je     c00129fe <File::read(unsigned long long, void*, int*)+0x50>
c00129dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129f1:	5b                   	pop    ebx
c00129f2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00129f5:	ff e0                	jmp    eax
c00129f7:	b8 0b 00 00 00       	mov    eax,0xb
c00129fc:	eb 05                	jmp    c0012a03 <File::read(unsigned long long, void*, int*)+0x55>
c00129fe:	b8 05 00 00 00       	mov    eax,0x5
c0012a03:	5b                   	pop    ebx
c0012a04:	c3                   	ret    
c0012a05:	90                   	nop

c0012a06 <File::write(unsigned long long, void*, int*)>:
c0012a06:	53                   	push   ebx
c0012a07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a0f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a16:	3c 19                	cmp    al,0x19
c0012a18:	77 35                	ja     c0012a4f <File::write(unsigned long long, void*, int*)+0x49>
c0012a1a:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0012a21:	85 c0                	test   eax,eax
c0012a23:	74 2a                	je     c0012a4f <File::write(unsigned long long, void*, int*)+0x49>
c0012a25:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a2b:	85 c0                	test   eax,eax
c0012a2d:	74 20                	je     c0012a4f <File::write(unsigned long long, void*, int*)+0x49>
c0012a2f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a33:	74 21                	je     c0012a56 <File::write(unsigned long long, void*, int*)+0x50>
c0012a35:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a37:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a3b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a49:	5b                   	pop    ebx
c0012a4a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a4d:	ff e0                	jmp    eax
c0012a4f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a54:	eb 05                	jmp    c0012a5b <File::write(unsigned long long, void*, int*)+0x55>
c0012a56:	b8 05 00 00 00       	mov    eax,0x5
c0012a5b:	5b                   	pop    ebx
c0012a5c:	c3                   	ret    
c0012a5d:	90                   	nop

c0012a5e <Directory::read(unsigned long long, void*, int*)>:
c0012a5e:	53                   	push   ebx
c0012a5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a67:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a6e:	3c 19                	cmp    al,0x19
c0012a70:	77 35                	ja     c0012aa7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a72:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0012a79:	85 c0                	test   eax,eax
c0012a7b:	74 2a                	je     c0012aa7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a7d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a83:	85 c0                	test   eax,eax
c0012a85:	74 20                	je     c0012aa7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a87:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a8b:	74 21                	je     c0012aae <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a93:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012aa1:	5b                   	pop    ebx
c0012aa2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012aa5:	ff e0                	jmp    eax
c0012aa7:	b8 0b 00 00 00       	mov    eax,0xb
c0012aac:	eb 05                	jmp    c0012ab3 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012aae:	b8 05 00 00 00       	mov    eax,0x5
c0012ab3:	5b                   	pop    ebx
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <Directory::write(unsigned long long, void*, int*)>:
c0012ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aba:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012ac1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ac6:	80 fa 19             	cmp    dl,0x19
c0012ac9:	77 18                	ja     c0012ae3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012acb:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c0012ad2:	85 d2                	test   edx,edx
c0012ad4:	74 0d                	je     c0012ae3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ad6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012add:	19 c0                	sbb    eax,eax
c0012adf:	83 e0 0a             	and    eax,0xa
c0012ae2:	40                   	inc    eax
c0012ae3:	c3                   	ret    

c0012ae4 <File::isAtty()>:
c0012ae4:	31 c0                	xor    eax,eax
c0012ae6:	c3                   	ret    
c0012ae7:	90                   	nop

c0012ae8 <Directory::isAtty()>:
c0012ae8:	31 c0                	xor    eax,eax
c0012aea:	c3                   	ret    
c0012aeb:	90                   	nop

c0012aec <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012aec:	b8 0a 00 00 00       	mov    eax,0xa
c0012af1:	c3                   	ret    

c0012af2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012af2:	b8 0a 00 00 00       	mov    eax,0xa
c0012af7:	c3                   	ret    

c0012af8 <File::~File()>:
c0012af8:	83 ec 0c             	sub    esp,0xc
c0012afb:	ba 28 96 02 c0       	mov    edx,0xc0029628
c0012b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b04:	89 10                	mov    DWORD PTR [eax],edx
c0012b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b0a:	83 ec 0c             	sub    esp,0xc
c0012b0d:	50                   	push   eax
c0012b0e:	e8 2b eb ff ff       	call   c001163e <UnixFile::~UnixFile()>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	90                   	nop
c0012b17:	83 c4 0c             	add    esp,0xc
c0012b1a:	c3                   	ret    
c0012b1b:	90                   	nop

c0012b1c <File::~File()>:
c0012b1c:	83 ec 0c             	sub    esp,0xc
c0012b1f:	83 ec 0c             	sub    esp,0xc
c0012b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b26:	e8 cd ff ff ff       	call   c0012af8 <File::~File()>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	83 ec 08             	sub    esp,0x8
c0012b31:	68 14 01 00 00       	push   0x114
c0012b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b3a:	e8 70 fc ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0012b3f:	83 c4 10             	add    esp,0x10
c0012b42:	83 c4 0c             	add    esp,0xc
c0012b45:	c3                   	ret    

c0012b46 <Directory::~Directory()>:
c0012b46:	83 ec 0c             	sub    esp,0xc
c0012b49:	ba 44 96 02 c0       	mov    edx,0xc0029644
c0012b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b52:	89 10                	mov    DWORD PTR [eax],edx
c0012b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b58:	83 ec 0c             	sub    esp,0xc
c0012b5b:	50                   	push   eax
c0012b5c:	e8 dd ea ff ff       	call   c001163e <UnixFile::~UnixFile()>
c0012b61:	83 c4 10             	add    esp,0x10
c0012b64:	90                   	nop
c0012b65:	83 c4 0c             	add    esp,0xc
c0012b68:	c3                   	ret    
c0012b69:	90                   	nop

c0012b6a <Directory::~Directory()>:
c0012b6a:	83 ec 0c             	sub    esp,0xc
c0012b6d:	83 ec 0c             	sub    esp,0xc
c0012b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b74:	e8 cd ff ff ff       	call   c0012b46 <Directory::~Directory()>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	83 ec 08             	sub    esp,0x8
c0012b7f:	68 14 01 00 00       	push   0x114
c0012b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b88:	e8 22 fc ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0012b8d:	83 c4 10             	add    esp,0x10
c0012b90:	83 c4 0c             	add    esp,0xc
c0012b93:	c3                   	ret    

c0012b94 <Filesystem::Filesystem()>:
c0012b94:	ba c4 95 02 c0       	mov    edx,0xc00295c4
c0012b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9d:	89 10                	mov    DWORD PTR [eax],edx
c0012b9f:	8b 15 48 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ce48
c0012ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb0:	a3 48 ce 02 c0       	mov    ds:0xc002ce48,eax
c0012bb5:	90                   	nop
c0012bb6:	c3                   	ret    
c0012bb7:	90                   	nop

c0012bb8 <Filesystem::~Filesystem()>:
c0012bb8:	ba c4 95 02 c0       	mov    edx,0xc00295c4
c0012bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc1:	89 10                	mov    DWORD PTR [eax],edx
c0012bc3:	90                   	nop
c0012bc4:	c3                   	ret    
c0012bc5:	90                   	nop

c0012bc6 <Filesystem::~Filesystem()>:
c0012bc6:	83 ec 0c             	sub    esp,0xc
c0012bc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bcd:	e8 e6 ff ff ff       	call   c0012bb8 <Filesystem::~Filesystem()>
c0012bd2:	83 c4 04             	add    esp,0x4
c0012bd5:	83 ec 08             	sub    esp,0x8
c0012bd8:	6a 08                	push   0x8
c0012bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bde:	e8 cc fb ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	83 c4 0c             	add    esp,0xc
c0012be9:	c3                   	ret    

c0012bea <Fs::getcwd(Process*, char*, int)>:
c0012bea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bee:	31 c0                	xor    eax,eax
c0012bf0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bf3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bf7:	7d 15                	jge    c0012c0e <Fs::getcwd(Process*, char*, int)+0x24>
c0012bf9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bfd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c04:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c07:	84 c9                	test   cl,cl
c0012c09:	74 06                	je     c0012c11 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c0b:	40                   	inc    eax
c0012c0c:	eb e2                	jmp    c0012bf0 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c0e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c11:	31 c0                	xor    eax,eax
c0012c13:	c3                   	ret    

c0012c14 <Fs::initVFS()>:
c0012c14:	83 ec 18             	sub    esp,0x18
c0012c17:	6a 08                	push   0x8
c0012c19:	e8 cc c9 ff ff       	call   c000f5ea <malloc>
c0012c1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c21:	e8 de d4 00 00       	call   c0020104 <FAT::FAT()>
c0012c26:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c2d:	e8 b8 c9 ff ff       	call   c000f5ea <malloc>
c0012c32:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c35:	e8 22 e7 00 00       	call   c002135c <ISO9660::ISO9660()>
c0012c3a:	83 c4 1c             	add    esp,0x1c
c0012c3d:	c3                   	ret    

c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c3e:	55                   	push   ebp
c0012c3f:	57                   	push   edi
c0012c40:	56                   	push   esi
c0012c41:	53                   	push   ebx
c0012c42:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c48:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c4f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c56:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c5d:	68 00 04 00 00       	push   0x400
c0012c62:	6a 00                	push   0x0
c0012c64:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c68:	56                   	push   esi
c0012c69:	e8 1d da fe ff       	call   c000068b <memset>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c75:	75 0b                	jne    c0012c82 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c77:	50                   	push   eax
c0012c78:	50                   	push   eax
c0012c79:	57                   	push   edi
c0012c7a:	56                   	push   esi
c0012c7b:	e8 aa da fe ff       	call   c000072a <strcpy>
c0012c80:	eb 41                	jmp    c0012cc3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c82:	8a 07                	mov    al,BYTE PTR [edi]
c0012c84:	3c 5c                	cmp    al,0x5c
c0012c86:	74 04                	je     c0012c8c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c88:	3c 2f                	cmp    al,0x2f
c0012c8a:	75 18                	jne    c0012ca4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c8c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c8f:	3c 60                	cmp    al,0x60
c0012c91:	7e 03                	jle    c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c93:	83 e8 20             	sub    eax,0x20
c0012c96:	88 04 24             	mov    BYTE PTR [esp],al
c0012c99:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ca0:	50                   	push   eax
c0012ca1:	50                   	push   eax
c0012ca2:	eb 18                	jmp    c0012cbc <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ca4:	50                   	push   eax
c0012ca5:	50                   	push   eax
c0012ca6:	55                   	push   ebp
c0012ca7:	56                   	push   esi
c0012ca8:	e8 7d da fe ff       	call   c000072a <strcpy>
c0012cad:	5a                   	pop    edx
c0012cae:	59                   	pop    ecx
c0012caf:	68 ec aa 02 c0       	push   0xc002aaec
c0012cb4:	56                   	push   esi
c0012cb5:	e8 27 db fe ff       	call   c00007e1 <strcat>
c0012cba:	5d                   	pop    ebp
c0012cbb:	58                   	pop    eax
c0012cbc:	57                   	push   edi
c0012cbd:	56                   	push   esi
c0012cbe:	e8 1e db fe ff       	call   c00007e1 <strcat>
c0012cc3:	83 c4 10             	add    esp,0x10
c0012cc6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cc9:	3c 60                	cmp    al,0x60
c0012ccb:	7e 03                	jle    c0012cd0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ccd:	83 e8 20             	sub    eax,0x20
c0012cd0:	88 04 24             	mov    BYTE PTR [esp],al
c0012cd3:	88 03                	mov    BYTE PTR [ebx],al
c0012cd5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cdc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ce2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012ce6:	bf 03 00 00 00       	mov    edi,0x3
c0012ceb:	b8 03 00 00 00       	mov    eax,0x3
c0012cf0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012cf3:	84 d2                	test   dl,dl
c0012cf5:	0f 84 91 00 00 00    	je     c0012d8c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012cfb:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012cfe:	80 fa 5c             	cmp    dl,0x5c
c0012d01:	74 05                	je     c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d03:	80 fa 2f             	cmp    dl,0x2f
c0012d06:	75 12                	jne    c0012d1a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d08:	89 c5                	mov    ebp,eax
c0012d0a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d0f:	74 09                	je     c0012d1a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d11:	40                   	inc    eax
c0012d12:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d16:	89 cf                	mov    edi,ecx
c0012d18:	eb d6                	jmp    c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d1a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d1f:	75 5b                	jne    c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d21:	80 fa 2e             	cmp    dl,0x2e
c0012d24:	75 56                	jne    c0012d7c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d26:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d2a:	74 19                	je     c0012d45 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d2c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d31:	74 53                	je     c0012d86 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d33:	89 f9                	mov    ecx,edi
c0012d35:	41                   	inc    ecx
c0012d36:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d39:	80 fa 2f             	cmp    dl,0x2f
c0012d3c:	74 f7                	je     c0012d35 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d3e:	80 fa 5c             	cmp    dl,0x5c
c0012d41:	74 f2                	je     c0012d35 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d43:	eb d1                	jmp    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d45:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d4a:	74 3a                	je     c0012d86 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d4c:	83 f8 03             	cmp    eax,0x3
c0012d4f:	74 c5                	je     c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d51:	41                   	inc    ecx
c0012d52:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d55:	80 fa 2f             	cmp    dl,0x2f
c0012d58:	74 f7                	je     c0012d51 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d5a:	80 fa 5c             	cmp    dl,0x5c
c0012d5d:	74 f2                	je     c0012d51 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d5f:	48                   	dec    eax
c0012d60:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d64:	75 06                	jne    c0012d6c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d66:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d6a:	eb f3                	jmp    c0012d5f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d6c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d70:	74 07                	je     c0012d79 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d72:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d76:	48                   	dec    eax
c0012d77:	eb f3                	jmp    c0012d6c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d79:	40                   	inc    eax
c0012d7a:	eb 9a                	jmp    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d7c:	80 fa 2f             	cmp    dl,0x2f
c0012d7f:	74 95                	je     c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d81:	80 fa 5c             	cmp    dl,0x5c
c0012d84:	74 90                	je     c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d86:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d89:	40                   	inc    eax
c0012d8a:	eb 8a                	jmp    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d90:	83 ec 0c             	sub    esp,0xc
c0012d93:	53                   	push   ebx
c0012d94:	e8 0f d9 fe ff       	call   c00006a8 <strlen>
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012da1:	75 26                	jne    c0012dc9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012da3:	83 ec 0c             	sub    esp,0xc
c0012da6:	53                   	push   ebx
c0012da7:	e8 fc d8 fe ff       	call   c00006a8 <strlen>
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012db4:	74 26                	je     c0012ddc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012db6:	83 ec 0c             	sub    esp,0xc
c0012db9:	53                   	push   ebx
c0012dba:	e8 e9 d8 fe ff       	call   c00006a8 <strlen>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012dc7:	eb c7                	jmp    c0012d90 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012dc9:	83 ec 0c             	sub    esp,0xc
c0012dcc:	53                   	push   ebx
c0012dcd:	e8 d6 d8 fe ff       	call   c00006a8 <strlen>
c0012dd2:	83 c4 10             	add    esp,0x10
c0012dd5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012dda:	74 c7                	je     c0012da3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ddc:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012de2:	5b                   	pop    ebx
c0012de3:	5e                   	pop    esi
c0012de4:	5f                   	pop    edi
c0012de5:	5d                   	pop    ebp
c0012de6:	c3                   	ret    
c0012de7:	90                   	nop

c0012de8 <File::File(char const*, Process*)>:
c0012de8:	83 ec 0c             	sub    esp,0xc
c0012deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012def:	83 ec 08             	sub    esp,0x8
c0012df2:	6a 00                	push   0x0
c0012df4:	50                   	push   eax
c0012df5:	e8 62 e6 ff ff       	call   c001145c <UnixFile::UnixFile(int)>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	ba 28 96 02 c0       	mov    edx,0xc0029628
c0012e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e06:	89 10                	mov    DWORD PTR [eax],edx
c0012e08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e0c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e16:	83 c0 0d             	add    eax,0xd
c0012e19:	83 ec 04             	sub    esp,0x4
c0012e1c:	52                   	push   edx
c0012e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e21:	50                   	push   eax
c0012e22:	e8 17 fe ff ff       	call   c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e31:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e38:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e42:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e46:	90                   	nop
c0012e47:	83 c4 0c             	add    esp,0xc
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <File::open(FileOpenMode)>:
c0012e4c:	53                   	push   ebx
c0012e4d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e52:	83 ec 08             	sub    esp,0x8
c0012e55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e59:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e60:	80 fa 19             	cmp    dl,0x19
c0012e63:	77 40                	ja     c0012ea5 <File::open(FileOpenMode)+0x59>
c0012e65:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c0012e6c:	85 d2                	test   edx,edx
c0012e6e:	74 35                	je     c0012ea5 <File::open(FileOpenMode)+0x59>
c0012e70:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e76:	85 d2                	test   edx,edx
c0012e78:	74 2b                	je     c0012ea5 <File::open(FileOpenMode)+0x59>
c0012e7a:	b8 06 00 00 00       	mov    eax,0x6
c0012e7f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e83:	75 20                	jne    c0012ea5 <File::open(FileOpenMode)+0x59>
c0012e85:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e87:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e91:	51                   	push   ecx
c0012e92:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e95:	51                   	push   ecx
c0012e96:	52                   	push   edx
c0012e97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e9a:	83 c4 10             	add    esp,0x10
c0012e9d:	85 c0                	test   eax,eax
c0012e9f:	75 04                	jne    c0012ea5 <File::open(FileOpenMode)+0x59>
c0012ea1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ea5:	83 c4 08             	add    esp,0x8
c0012ea8:	5b                   	pop    ebx
c0012ea9:	c3                   	ret    

c0012eaa <File::close()>:
c0012eaa:	53                   	push   ebx
c0012eab:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb0:	83 ec 08             	sub    esp,0x8
c0012eb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012eb7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ebe:	80 fa 19             	cmp    dl,0x19
c0012ec1:	77 41                	ja     c0012f04 <File::close()+0x5a>
c0012ec3:	8b 1c 95 e0 d2 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2d20]
c0012eca:	85 db                	test   ebx,ebx
c0012ecc:	74 36                	je     c0012f04 <File::close()+0x5a>
c0012ece:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ed5:	74 2d                	je     c0012f04 <File::close()+0x5a>
c0012ed7:	b8 05 00 00 00       	mov    eax,0x5
c0012edc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ee0:	74 22                	je     c0012f04 <File::close()+0x5a>
c0012ee2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012ee6:	8b 04 95 e0 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2d20]
c0012eed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ef3:	53                   	push   ebx
c0012ef4:	53                   	push   ebx
c0012ef5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ef7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012efd:	50                   	push   eax
c0012efe:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	83 c4 08             	add    esp,0x8
c0012f07:	5b                   	pop    ebx
c0012f08:	c3                   	ret    
c0012f09:	90                   	nop

c0012f0a <File::seek(unsigned long long)>:
c0012f0a:	56                   	push   esi
c0012f0b:	53                   	push   ebx
c0012f0c:	b8 0b 00 00 00       	mov    eax,0xb
c0012f11:	51                   	push   ecx
c0012f12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f1a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f25:	80 fa 19             	cmp    dl,0x19
c0012f28:	77 31                	ja     c0012f5b <File::seek(unsigned long long)+0x51>
c0012f2a:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c0012f31:	85 d2                	test   edx,edx
c0012f33:	74 26                	je     c0012f5b <File::seek(unsigned long long)+0x51>
c0012f35:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f3b:	85 d2                	test   edx,edx
c0012f3d:	74 1c                	je     c0012f5b <File::seek(unsigned long long)+0x51>
c0012f3f:	b8 05 00 00 00       	mov    eax,0x5
c0012f44:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f48:	74 11                	je     c0012f5b <File::seek(unsigned long long)+0x51>
c0012f4a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f4c:	53                   	push   ebx
c0012f4d:	51                   	push   ecx
c0012f4e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f54:	52                   	push   edx
c0012f55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	5a                   	pop    edx
c0012f5c:	5b                   	pop    ebx
c0012f5d:	5e                   	pop    esi
c0012f5e:	c3                   	ret    
c0012f5f:	90                   	nop

c0012f60 <File::tell(unsigned long long*)>:
c0012f60:	83 ec 0c             	sub    esp,0xc
c0012f63:	b8 0b 00 00 00       	mov    eax,0xb
c0012f68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f6c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f73:	80 fa 19             	cmp    dl,0x19
c0012f76:	77 34                	ja     c0012fac <File::tell(unsigned long long*)+0x4c>
c0012f78:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c0012f7f:	85 d2                	test   edx,edx
c0012f81:	74 29                	je     c0012fac <File::tell(unsigned long long*)+0x4c>
c0012f83:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f89:	85 d2                	test   edx,edx
c0012f8b:	74 1f                	je     c0012fac <File::tell(unsigned long long*)+0x4c>
c0012f8d:	b8 05 00 00 00       	mov    eax,0x5
c0012f92:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f96:	74 14                	je     c0012fac <File::tell(unsigned long long*)+0x4c>
c0012f98:	50                   	push   eax
c0012f99:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f9f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012fa5:	52                   	push   edx
c0012fa6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	83 c4 0c             	add    esp,0xc
c0012faf:	c3                   	ret    

c0012fb0 <File::rewind()>:
c0012fb0:	83 ec 10             	sub    esp,0x10
c0012fb3:	6a 00                	push   0x0
c0012fb5:	6a 00                	push   0x0
c0012fb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fbb:	e8 4a ff ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c0012fc0:	83 c4 1c             	add    esp,0x1c
c0012fc3:	c3                   	ret    

c0012fc4 <File::unlink()>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd7:	80 f9 19             	cmp    cl,0x19
c0012fda:	77 2f                	ja     c001300b <File::unlink()+0x47>
c0012fdc:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c0012fe3:	85 c9                	test   ecx,ecx
c0012fe5:	74 24                	je     c001300b <File::unlink()+0x47>
c0012fe7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fed:	85 c9                	test   ecx,ecx
c0012fef:	74 1a                	je     c001300b <File::unlink()+0x47>
c0012ff1:	b8 06 00 00 00       	mov    eax,0x6
c0012ff6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ffa:	75 0f                	jne    c001300b <File::unlink()+0x47>
c0012ffc:	83 c2 0d             	add    edx,0xd
c0012fff:	50                   	push   eax
c0013000:	50                   	push   eax
c0013001:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013003:	52                   	push   edx
c0013004:	51                   	push   ecx
c0013005:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	83 c4 0c             	add    esp,0xc
c001300e:	c3                   	ret    
c001300f:	90                   	nop

c0013010 <File::rename(char const*)>:
c0013010:	83 ec 0c             	sub    esp,0xc
c0013013:	b8 0b 00 00 00       	mov    eax,0xb
c0013018:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001301c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013023:	80 f9 19             	cmp    cl,0x19
c0013026:	77 32                	ja     c001305a <File::rename(char const*)+0x4a>
c0013028:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c001302f:	85 c9                	test   ecx,ecx
c0013031:	74 27                	je     c001305a <File::rename(char const*)+0x4a>
c0013033:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013039:	85 c9                	test   ecx,ecx
c001303b:	74 1d                	je     c001305a <File::rename(char const*)+0x4a>
c001303d:	b8 06 00 00 00       	mov    eax,0x6
c0013042:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013046:	75 12                	jne    c001305a <File::rename(char const*)+0x4a>
c0013048:	83 c2 0d             	add    edx,0xd
c001304b:	50                   	push   eax
c001304c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001304e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013052:	52                   	push   edx
c0013053:	51                   	push   ecx
c0013054:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	83 c4 0c             	add    esp,0xc
c001305d:	c3                   	ret    

c001305e <File::chfatattr(unsigned char, unsigned char)>:
c001305e:	57                   	push   edi
c001305f:	b8 0b 00 00 00       	mov    eax,0xb
c0013064:	56                   	push   esi
c0013065:	53                   	push   ebx
c0013066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001306a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001306e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013075:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013079:	80 f9 19             	cmp    cl,0x19
c001307c:	77 37                	ja     c00130b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001307e:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c0013085:	85 c9                	test   ecx,ecx
c0013087:	74 2c                	je     c00130b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013089:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001308f:	85 c9                	test   ecx,ecx
c0013091:	74 22                	je     c00130b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013093:	b8 06 00 00 00       	mov    eax,0x6
c0013098:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001309c:	75 17                	jne    c00130b5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001309e:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130a0:	89 f0                	mov    eax,esi
c00130a2:	83 c2 0d             	add    edx,0xd
c00130a5:	0f b6 f0             	movzx  esi,al
c00130a8:	0f b6 db             	movzx  ebx,bl
c00130ab:	56                   	push   esi
c00130ac:	53                   	push   ebx
c00130ad:	52                   	push   edx
c00130ae:	51                   	push   ecx
c00130af:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130b2:	83 c4 10             	add    esp,0x10
c00130b5:	5b                   	pop    ebx
c00130b6:	5e                   	pop    esi
c00130b7:	5f                   	pop    edi
c00130b8:	c3                   	ret    
c00130b9:	90                   	nop

c00130ba <File::exists()>:
c00130ba:	83 ec 0c             	sub    esp,0xc
c00130bd:	31 c0                	xor    eax,eax
c00130bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130c3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130ca:	80 f9 19             	cmp    cl,0x19
c00130cd:	77 24                	ja     c00130f3 <File::exists()+0x39>
c00130cf:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c00130d6:	85 c9                	test   ecx,ecx
c00130d8:	74 19                	je     c00130f3 <File::exists()+0x39>
c00130da:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130e0:	85 c9                	test   ecx,ecx
c00130e2:	74 0f                	je     c00130f3 <File::exists()+0x39>
c00130e4:	83 c2 0d             	add    edx,0xd
c00130e7:	50                   	push   eax
c00130e8:	50                   	push   eax
c00130e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130eb:	52                   	push   edx
c00130ec:	51                   	push   ecx
c00130ed:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	83 c4 0c             	add    esp,0xc
c00130f6:	c3                   	ret    
c00130f7:	90                   	nop

c00130f8 <File::stat(unsigned long long*, bool*)>:
c00130f8:	56                   	push   esi
c00130f9:	53                   	push   ebx
c00130fa:	50                   	push   eax
c00130fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013100:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013104:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013108:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013113:	80 f9 19             	cmp    cl,0x19
c0013116:	77 3d                	ja     c0013155 <File::stat(unsigned long long*, bool*)+0x5d>
c0013118:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c001311f:	85 c9                	test   ecx,ecx
c0013121:	74 32                	je     c0013155 <File::stat(unsigned long long*, bool*)+0x5d>
c0013123:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013129:	85 c9                	test   ecx,ecx
c001312b:	74 28                	je     c0013155 <File::stat(unsigned long long*, bool*)+0x5d>
c001312d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013133:	74 13                	je     c0013148 <File::stat(unsigned long long*, bool*)+0x50>
c0013135:	83 ec 04             	sub    esp,0x4
c0013138:	56                   	push   esi
c0013139:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001313f:	51                   	push   ecx
c0013140:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013143:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013146:	eb 0a                	jmp    c0013152 <File::stat(unsigned long long*, bool*)+0x5a>
c0013148:	53                   	push   ebx
c0013149:	83 c2 0d             	add    edx,0xd
c001314c:	56                   	push   esi
c001314d:	52                   	push   edx
c001314e:	51                   	push   ecx
c001314f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	5a                   	pop    edx
c0013156:	5b                   	pop    ebx
c0013157:	5e                   	pop    esi
c0013158:	c3                   	ret    

c0013159 <Fs::setcwd(Process*, char*)>:
c0013159:	55                   	push   ebp
c001315a:	57                   	push   edi
c001315b:	56                   	push   esi
c001315c:	53                   	push   ebx
c001315d:	81 ec 20 02 00 00    	sub    esp,0x220
c0013163:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001316a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013170:	57                   	push   edi
c0013171:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013178:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001317c:	56                   	push   esi
c001317d:	e8 bc fa ff ff       	call   c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013182:	89 34 24             	mov    DWORD PTR [esp],esi
c0013185:	e8 1e d5 fe ff       	call   c00006a8 <strlen>
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	83 f8 02             	cmp    eax,0x2
c0013190:	77 17                	ja     c00131a9 <Fs::setcwd(Process*, char*)+0x50>
c0013192:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013197:	83 e8 41             	sub    eax,0x41
c001319a:	83 f8 19             	cmp    eax,0x19
c001319d:	76 24                	jbe    c00131c3 <Fs::setcwd(Process*, char*)+0x6a>
c001319f:	b8 03 00 00 00       	mov    eax,0x3
c00131a4:	e9 e0 00 00 00       	jmp    c0013289 <Fs::setcwd(Process*, char*)+0x130>
c00131a9:	83 ec 0c             	sub    esp,0xc
c00131ac:	56                   	push   esi
c00131ad:	e8 f6 d4 fe ff       	call   c00006a8 <strlen>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	83 f8 03             	cmp    eax,0x3
c00131b8:	75 34                	jne    c00131ee <Fs::setcwd(Process*, char*)+0x95>
c00131ba:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131bf:	75 2d                	jne    c00131ee <Fs::setcwd(Process*, char*)+0x95>
c00131c1:	eb cf                	jmp    c0013192 <Fs::setcwd(Process*, char*)+0x39>
c00131c3:	8b 14 85 e0 d2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d20]
c00131ca:	b8 05 00 00 00       	mov    eax,0x5
c00131cf:	85 d2                	test   edx,edx
c00131d1:	0f 84 b2 00 00 00    	je     c0013289 <Fs::setcwd(Process*, char*)+0x130>
c00131d7:	b8 06 00 00 00       	mov    eax,0x6
c00131dc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131e3:	0f 85 92 00 00 00    	jne    c001327b <Fs::setcwd(Process*, char*)+0x122>
c00131e9:	e9 9b 00 00 00       	jmp    c0013289 <Fs::setcwd(Process*, char*)+0x130>
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	68 14 01 00 00       	push   0x114
c00131f6:	e8 ef c3 ff ff       	call   c000f5ea <malloc>
c00131fb:	83 c4 0c             	add    esp,0xc
c00131fe:	89 c3                	mov    ebx,eax
c0013200:	55                   	push   ebp
c0013201:	56                   	push   esi
c0013202:	50                   	push   eax
c0013203:	e8 e0 fb ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c0013208:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001320d:	83 c4 0c             	add    esp,0xc
c0013210:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013214:	50                   	push   eax
c0013215:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013219:	50                   	push   eax
c001321a:	53                   	push   ebx
c001321b:	e8 d8 fe ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	83 f8 02             	cmp    eax,0x2
c0013226:	74 04                	je     c001322c <Fs::setcwd(Process*, char*)+0xd3>
c0013228:	85 c0                	test   eax,eax
c001322a:	74 1c                	je     c0013248 <Fs::setcwd(Process*, char*)+0xef>
c001322c:	b8 01 00 00 00       	mov    eax,0x1
c0013231:	85 db                	test   ebx,ebx
c0013233:	74 54                	je     c0013289 <Fs::setcwd(Process*, char*)+0x130>
c0013235:	83 ec 0c             	sub    esp,0xc
c0013238:	8b 03                	mov    eax,DWORD PTR [ebx]
c001323a:	53                   	push   ebx
c001323b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	b8 01 00 00 00       	mov    eax,0x1
c0013246:	eb 41                	jmp    c0013289 <Fs::setcwd(Process*, char*)+0x130>
c0013248:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001324d:	75 1c                	jne    c001326b <Fs::setcwd(Process*, char*)+0x112>
c001324f:	b8 02 00 00 00       	mov    eax,0x2
c0013254:	85 db                	test   ebx,ebx
c0013256:	74 31                	je     c0013289 <Fs::setcwd(Process*, char*)+0x130>
c0013258:	83 ec 0c             	sub    esp,0xc
c001325b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001325d:	53                   	push   ebx
c001325e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	b8 02 00 00 00       	mov    eax,0x2
c0013269:	eb 1e                	jmp    c0013289 <Fs::setcwd(Process*, char*)+0x130>
c001326b:	85 db                	test   ebx,ebx
c001326d:	74 0c                	je     c001327b <Fs::setcwd(Process*, char*)+0x122>
c001326f:	83 ec 0c             	sub    esp,0xc
c0013272:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013274:	53                   	push   ebx
c0013275:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	50                   	push   eax
c001327c:	50                   	push   eax
c001327d:	56                   	push   esi
c001327e:	57                   	push   edi
c001327f:	e8 a6 d4 fe ff       	call   c000072a <strcpy>
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	31 c0                	xor    eax,eax
c0013289:	81 c4 1c 02 00 00    	add    esp,0x21c
c001328f:	5b                   	pop    ebx
c0013290:	5e                   	pop    esi
c0013291:	5f                   	pop    edi
c0013292:	5d                   	pop    ebp
c0013293:	c3                   	ret    

c0013294 <Directory::Directory(char const*, Process*)>:
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329b:	83 ec 08             	sub    esp,0x8
c001329e:	6a 00                	push   0x0
c00132a0:	50                   	push   eax
c00132a1:	e8 b6 e1 ff ff       	call   c001145c <UnixFile::UnixFile(int)>
c00132a6:	83 c4 10             	add    esp,0x10
c00132a9:	ba 44 96 02 c0       	mov    edx,0xc0029644
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	89 10                	mov    DWORD PTR [eax],edx
c00132b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c2:	83 c0 0d             	add    eax,0xd
c00132c5:	83 ec 04             	sub    esp,0x4
c00132c8:	52                   	push   edx
c00132c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cd:	50                   	push   eax
c00132ce:	e8 6b f9 ff ff       	call   c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132da:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00132dd:	8d 50 bf             	lea    edx,[eax-0x41]
c00132e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00132ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132f2:	90                   	nop
c00132f3:	83 c4 0c             	add    esp,0xc
c00132f6:	c3                   	ret    
c00132f7:	90                   	nop

c00132f8 <Directory::open()>:
c00132f8:	53                   	push   ebx
c00132f9:	b8 0b 00 00 00       	mov    eax,0xb
c00132fe:	83 ec 08             	sub    esp,0x8
c0013301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013305:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001330c:	80 fa 19             	cmp    dl,0x19
c001330f:	77 3d                	ja     c001334e <Directory::open()+0x56>
c0013311:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c0013318:	85 d2                	test   edx,edx
c001331a:	74 32                	je     c001334e <Directory::open()+0x56>
c001331c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013322:	85 d2                	test   edx,edx
c0013324:	74 28                	je     c001334e <Directory::open()+0x56>
c0013326:	b8 06 00 00 00       	mov    eax,0x6
c001332b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001332f:	75 1d                	jne    c001334e <Directory::open()+0x56>
c0013331:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013337:	50                   	push   eax
c0013338:	8b 02                	mov    eax,DWORD PTR [edx]
c001333a:	51                   	push   ecx
c001333b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001333e:	51                   	push   ecx
c001333f:	52                   	push   edx
c0013340:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	85 c0                	test   eax,eax
c0013348:	75 04                	jne    c001334e <Directory::open()+0x56>
c001334a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001334e:	83 c4 08             	add    esp,0x8
c0013351:	5b                   	pop    ebx
c0013352:	c3                   	ret    
c0013353:	90                   	nop

c0013354 <Directory::close()>:
c0013354:	53                   	push   ebx
c0013355:	b8 0b 00 00 00       	mov    eax,0xb
c001335a:	83 ec 08             	sub    esp,0x8
c001335d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013361:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013368:	80 fa 19             	cmp    dl,0x19
c001336b:	77 41                	ja     c00133ae <Directory::close()+0x5a>
c001336d:	8b 1c 95 e0 d2 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2d20]
c0013374:	85 db                	test   ebx,ebx
c0013376:	74 36                	je     c00133ae <Directory::close()+0x5a>
c0013378:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001337f:	74 2d                	je     c00133ae <Directory::close()+0x5a>
c0013381:	b8 05 00 00 00       	mov    eax,0x5
c0013386:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001338a:	74 22                	je     c00133ae <Directory::close()+0x5a>
c001338c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013390:	8b 04 95 e0 d2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2d20]
c0013397:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001339d:	53                   	push   ebx
c001339e:	53                   	push   ebx
c001339f:	8b 10                	mov    edx,DWORD PTR [eax]
c00133a1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133a7:	50                   	push   eax
c00133a8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	83 c4 08             	add    esp,0x8
c00133b1:	5b                   	pop    ebx
c00133b2:	c3                   	ret    
c00133b3:	90                   	nop

c00133b4 <Directory::unlink()>:
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	b8 0b 00 00 00       	mov    eax,0xb
c00133bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133c7:	80 f9 19             	cmp    cl,0x19
c00133ca:	77 2f                	ja     c00133fb <Directory::unlink()+0x47>
c00133cc:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c00133d3:	85 c9                	test   ecx,ecx
c00133d5:	74 24                	je     c00133fb <Directory::unlink()+0x47>
c00133d7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133dd:	85 c9                	test   ecx,ecx
c00133df:	74 1a                	je     c00133fb <Directory::unlink()+0x47>
c00133e1:	b8 06 00 00 00       	mov    eax,0x6
c00133e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133ea:	75 0f                	jne    c00133fb <Directory::unlink()+0x47>
c00133ec:	83 c2 0d             	add    edx,0xd
c00133ef:	50                   	push   eax
c00133f0:	50                   	push   eax
c00133f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133f3:	52                   	push   edx
c00133f4:	51                   	push   ecx
c00133f5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133f8:	83 c4 10             	add    esp,0x10
c00133fb:	83 c4 0c             	add    esp,0xc
c00133fe:	c3                   	ret    
c00133ff:	90                   	nop

c0013400 <Directory::rename(char const*)>:
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	b8 0b 00 00 00       	mov    eax,0xb
c0013408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001340c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013413:	80 f9 19             	cmp    cl,0x19
c0013416:	77 32                	ja     c001344a <Directory::rename(char const*)+0x4a>
c0013418:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c001341f:	85 c9                	test   ecx,ecx
c0013421:	74 27                	je     c001344a <Directory::rename(char const*)+0x4a>
c0013423:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013429:	85 c9                	test   ecx,ecx
c001342b:	74 1d                	je     c001344a <Directory::rename(char const*)+0x4a>
c001342d:	b8 06 00 00 00       	mov    eax,0x6
c0013432:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013436:	75 12                	jne    c001344a <Directory::rename(char const*)+0x4a>
c0013438:	83 c2 0d             	add    edx,0xd
c001343b:	50                   	push   eax
c001343c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001343e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013442:	52                   	push   edx
c0013443:	51                   	push   ecx
c0013444:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013447:	83 c4 10             	add    esp,0x10
c001344a:	83 c4 0c             	add    esp,0xc
c001344d:	c3                   	ret    

c001344e <Directory::exists()>:
c001344e:	83 ec 0c             	sub    esp,0xc
c0013451:	31 c0                	xor    eax,eax
c0013453:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013457:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001345e:	80 f9 19             	cmp    cl,0x19
c0013461:	77 24                	ja     c0013487 <Directory::exists()+0x39>
c0013463:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c001346a:	85 c9                	test   ecx,ecx
c001346c:	74 19                	je     c0013487 <Directory::exists()+0x39>
c001346e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013474:	85 c9                	test   ecx,ecx
c0013476:	74 0f                	je     c0013487 <Directory::exists()+0x39>
c0013478:	83 c2 0d             	add    edx,0xd
c001347b:	50                   	push   eax
c001347c:	50                   	push   eax
c001347d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001347f:	52                   	push   edx
c0013480:	51                   	push   ecx
c0013481:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013484:	83 c4 10             	add    esp,0x10
c0013487:	83 c4 0c             	add    esp,0xc
c001348a:	c3                   	ret    
c001348b:	90                   	nop

c001348c <Directory::read(dirent*)>:
c001348c:	83 ec 1c             	sub    esp,0x1c
c001348f:	b8 0b 00 00 00       	mov    eax,0xb
c0013494:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013498:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001349f:	80 fa 19             	cmp    dl,0x19
c00134a2:	77 30                	ja     c00134d4 <Directory::read(dirent*)+0x48>
c00134a4:	8b 14 95 e0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d20]
c00134ab:	85 d2                	test   edx,edx
c00134ad:	74 25                	je     c00134d4 <Directory::read(dirent*)+0x48>
c00134af:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134b6:	74 1c                	je     c00134d4 <Directory::read(dirent*)+0x48>
c00134b8:	83 ec 0c             	sub    esp,0xc
c00134bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134bd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134c1:	52                   	push   edx
c00134c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134c6:	6a 00                	push   0x0
c00134c8:	68 10 01 00 00       	push   0x110
c00134cd:	51                   	push   ecx
c00134ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134d1:	83 c4 20             	add    esp,0x20
c00134d4:	83 c4 1c             	add    esp,0x1c
c00134d7:	c3                   	ret    

c00134d8 <Directory::create()>:
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	b8 0b 00 00 00       	mov    eax,0xb
c00134e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134eb:	80 f9 19             	cmp    cl,0x19
c00134ee:	77 2f                	ja     c001351f <Directory::create()+0x47>
c00134f0:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c00134f7:	85 c9                	test   ecx,ecx
c00134f9:	74 24                	je     c001351f <Directory::create()+0x47>
c00134fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013501:	85 c9                	test   ecx,ecx
c0013503:	74 1a                	je     c001351f <Directory::create()+0x47>
c0013505:	b8 06 00 00 00       	mov    eax,0x6
c001350a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001350e:	75 0f                	jne    c001351f <Directory::create()+0x47>
c0013510:	83 c2 0d             	add    edx,0xd
c0013513:	50                   	push   eax
c0013514:	50                   	push   eax
c0013515:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013517:	52                   	push   edx
c0013518:	51                   	push   ecx
c0013519:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	83 c4 0c             	add    esp,0xc
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013524:	b8 0a 00 00 00       	mov    eax,0xa
c0013529:	c3                   	ret    

c001352a <Bus::Bus(char const*)>:
c001352a:	83 ec 0c             	sub    esp,0xc
c001352d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013531:	83 ec 08             	sub    esp,0x8
c0013534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013538:	50                   	push   eax
c0013539:	e8 68 09 00 00       	call   c0013ea6 <Device::Device(char const*)>
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	ba 60 96 02 c0       	mov    edx,0xc0029660
c0013546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354a:	89 10                	mov    DWORD PTR [eax],edx
c001354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013550:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001355a:	90                   	nop
c001355b:	83 c4 0c             	add    esp,0xc
c001355e:	c3                   	ret    
c001355f:	90                   	nop

c0013560 <Bus::~Bus()>:
c0013560:	83 ec 0c             	sub    esp,0xc
c0013563:	ba 60 96 02 c0       	mov    edx,0xc0029660
c0013568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356c:	89 10                	mov    DWORD PTR [eax],edx
c001356e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	50                   	push   eax
c0013576:	e8 0d 06 00 00       	call   c0013b88 <Device::~Device()>
c001357b:	83 c4 10             	add    esp,0x10
c001357e:	90                   	nop
c001357f:	83 c4 0c             	add    esp,0xc
c0013582:	c3                   	ret    
c0013583:	90                   	nop

c0013584 <Bus::~Bus()>:
c0013584:	83 ec 0c             	sub    esp,0xc
c0013587:	83 ec 0c             	sub    esp,0xc
c001358a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358e:	e8 cd ff ff ff       	call   c0013560 <Bus::~Bus()>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	83 ec 08             	sub    esp,0x8
c0013599:	68 58 01 00 00       	push   0x158
c001359e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a2:	e8 08 f2 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00135a7:	83 c4 10             	add    esp,0x10
c00135aa:	83 c4 0c             	add    esp,0xc
c00135ad:	c3                   	ret    

c00135ae <Buzzer::Buzzer(char const*)>:
c00135ae:	83 ec 0c             	sub    esp,0xc
c00135b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b5:	83 ec 08             	sub    esp,0x8
c00135b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135bc:	50                   	push   eax
c00135bd:	e8 e4 08 00 00       	call   c0013ea6 <Device::Device(char const*)>
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	ba 8c 96 02 c0       	mov    edx,0xc002968c
c00135ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ce:	89 10                	mov    DWORD PTR [eax],edx
c00135d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00135de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00135ec:	90                   	nop
c00135ed:	83 c4 0c             	add    esp,0xc
c00135f0:	c3                   	ret    
c00135f1:	90                   	nop

c00135f2 <Buzzer::~Buzzer()>:
c00135f2:	83 ec 0c             	sub    esp,0xc
c00135f5:	ba 8c 96 02 c0       	mov    edx,0xc002968c
c00135fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fe:	89 10                	mov    DWORD PTR [eax],edx
c0013600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	50                   	push   eax
c0013608:	e8 7b 05 00 00       	call   c0013b88 <Device::~Device()>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	90                   	nop
c0013611:	83 c4 0c             	add    esp,0xc
c0013614:	c3                   	ret    
c0013615:	90                   	nop

c0013616 <Buzzer::~Buzzer()>:
c0013616:	83 ec 0c             	sub    esp,0xc
c0013619:	83 ec 0c             	sub    esp,0xc
c001361c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013620:	e8 cd ff ff ff       	call   c00135f2 <Buzzer::~Buzzer()>
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	83 ec 08             	sub    esp,0x8
c001362b:	68 5c 01 00 00       	push   0x15c
c0013630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013634:	e8 76 f1 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0013639:	83 c4 10             	add    esp,0x10
c001363c:	83 c4 0c             	add    esp,0xc
c001363f:	c3                   	ret    

c0013640 <Buzzer::stop()>:
c0013640:	83 ec 14             	sub    esp,0x14
c0013643:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013647:	8b 10                	mov    edx,DWORD PTR [eax]
c0013649:	6a 00                	push   0x0
c001364b:	50                   	push   eax
c001364c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001364f:	83 c4 1c             	add    esp,0x1c
c0013652:	c3                   	ret    

c0013653 <beepThread(void*)>:
c0013653:	53                   	push   ebx
c0013654:	83 ec 08             	sub    esp,0x8
c0013657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001365b:	e8 32 99 00 00       	call   c001cf92 <unlockScheduler()>
c0013660:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013665:	52                   	push   edx
c0013666:	52                   	push   edx
c0013667:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001366d:	52                   	push   edx
c001366e:	50                   	push   eax
c001366f:	e8 6c 9e 00 00       	call   c001d4e0 <nanoSleep(unsigned long long)>
c0013674:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013677:	e8 c4 ff ff ff       	call   c0013640 <Buzzer::stop()>
c001367c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013684:	83 c4 18             	add    esp,0x18
c0013687:	5b                   	pop    ebx
c0013688:	e9 99 9d 00 00       	jmp    c001d426 <blockTask(TaskState)>
c001368d:	90                   	nop

c001368e <Buzzer::beep(int, int, bool)>:
c001368e:	57                   	push   edi
c001368f:	56                   	push   esi
c0013690:	53                   	push   ebx
c0013691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013695:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001369d:	52                   	push   edx
c001369e:	52                   	push   edx
c001369f:	8b 06                	mov    eax,DWORD PTR [esi]
c00136a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a5:	56                   	push   esi
c00136a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	89 f8                	mov    eax,edi
c00136ae:	84 c0                	test   al,al
c00136b0:	74 1f                	je     c00136d1 <Buzzer::beep(int, int, bool)+0x43>
c00136b2:	50                   	push   eax
c00136b3:	50                   	push   eax
c00136b4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136ba:	99                   	cdq    
c00136bb:	52                   	push   edx
c00136bc:	50                   	push   eax
c00136bd:	e8 1e 9e 00 00       	call   c001d4e0 <nanoSleep(unsigned long long)>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136c9:	5b                   	pop    ebx
c00136ca:	5e                   	pop    esi
c00136cb:	5f                   	pop    edi
c00136cc:	e9 6f ff ff ff       	jmp    c0013640 <Buzzer::stop()>
c00136d1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00136d7:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00136dc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00136e4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136e8:	c7 44 24 14 53 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013653
c00136f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136f4:	5b                   	pop    ebx
c00136f5:	5e                   	pop    esi
c00136f6:	5f                   	pop    edi
c00136f7:	e9 c6 99 00 00       	jmp    c001d0c2 <Process::createThread(void (*)(void*), void*, int)>

c00136fc <User::loadClockSettings(int)>:
c00136fc:	53                   	push   ebx
c00136fd:	83 ec 14             	sub    esp,0x14
c0013700:	68 14 01 00 00       	push   0x114
c0013705:	e8 e0 be ff ff       	call   c000f5ea <malloc>
c001370a:	83 c4 0c             	add    esp,0xc
c001370d:	89 c3                	mov    ebx,eax
c001370f:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c0013715:	68 b4 96 02 c0       	push   0xc00296b4
c001371a:	50                   	push   eax
c001371b:	e8 c8 f6 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c0013720:	58                   	pop    eax
c0013721:	5a                   	pop    edx
c0013722:	6a 01                	push   0x1
c0013724:	53                   	push   ebx
c0013725:	e8 22 f7 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001372a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001372d:	e8 78 f7 ff ff       	call   c0012eaa <File::close()>
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	85 db                	test   ebx,ebx
c0013737:	74 0f                	je     c0013748 <User::loadClockSettings(int)+0x4c>
c0013739:	8b 03                	mov    eax,DWORD PTR [ebx]
c001373b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001373f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013742:	83 c4 08             	add    esp,0x8
c0013745:	5b                   	pop    ebx
c0013746:	ff e0                	jmp    eax
c0013748:	83 c4 08             	add    esp,0x8
c001374b:	5b                   	pop    ebx
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <Clock::Clock(char const*)>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013755:	83 ec 08             	sub    esp,0x8
c0013758:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001375c:	50                   	push   eax
c001375d:	e8 44 07 00 00       	call   c0013ea6 <Device::Device(char const*)>
c0013762:	83 c4 10             	add    esp,0x10
c0013765:	ba dc 96 02 c0       	mov    edx,0xc00296dc
c001376a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001376e:	89 10                	mov    DWORD PTR [eax],edx
c0013770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013774:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001377e:	90                   	nop
c001377f:	83 c4 0c             	add    esp,0xc
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <Clock::~Clock()>:
c0013784:	83 ec 0c             	sub    esp,0xc
c0013787:	ba dc 96 02 c0       	mov    edx,0xc00296dc
c001378c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013790:	89 10                	mov    DWORD PTR [eax],edx
c0013792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013796:	83 ec 0c             	sub    esp,0xc
c0013799:	50                   	push   eax
c001379a:	e8 e9 03 00 00       	call   c0013b88 <Device::~Device()>
c001379f:	83 c4 10             	add    esp,0x10
c00137a2:	90                   	nop
c00137a3:	83 c4 0c             	add    esp,0xc
c00137a6:	c3                   	ret    
c00137a7:	90                   	nop

c00137a8 <Clock::~Clock()>:
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	83 ec 0c             	sub    esp,0xc
c00137ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b2:	e8 cd ff ff ff       	call   c0013784 <Clock::~Clock()>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	83 ec 08             	sub    esp,0x8
c00137bd:	68 58 01 00 00       	push   0x158
c00137c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c6:	e8 e4 ef ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	83 c4 0c             	add    esp,0xc
c00137d1:	c3                   	ret    

c00137d2 <Clock::timeInSecondsLocal()>:
c00137d2:	53                   	push   ebx
c00137d3:	83 ec 14             	sub    esp,0x14
c00137d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137da:	8b 10                	mov    edx,DWORD PTR [eax]
c00137dc:	50                   	push   eax
c00137dd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137e0:	0f b6 0d 50 ce 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ce50
c00137e7:	03 0d 54 ce 02 c0    	add    ecx,DWORD PTR ds:0xc002ce54
c00137ed:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137f3:	89 cb                	mov    ebx,ecx
c00137f5:	c1 fb 1f             	sar    ebx,0x1f
c00137f8:	01 c8                	add    eax,ecx
c00137fa:	11 da                	adc    edx,ebx
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	31 c9                	xor    ecx,ecx
c0013801:	80 3d 51 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce51,0x0
c0013808:	74 05                	je     c001380f <Clock::timeInSecondsLocal()+0x3d>
c001380a:	b9 08 07 00 00       	mov    ecx,0x708
c001380f:	31 db                	xor    ebx,ebx
c0013811:	01 c8                	add    eax,ecx
c0013813:	11 da                	adc    edx,ebx
c0013815:	83 c4 08             	add    esp,0x8
c0013818:	5b                   	pop    ebx
c0013819:	c3                   	ret    

c001381a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001381a:	57                   	push   edi
c001381b:	56                   	push   esi
c001381c:	53                   	push   ebx
c001381d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013821:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013825:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001382b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001382e:	0f b6 05 50 ce 02 c0 	movzx  eax,BYTE PTR ds:0xc002ce50
c0013835:	03 05 54 ce 02 c0    	add    eax,DWORD PTR ds:0xc002ce54
c001383b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013841:	99                   	cdq    
c0013842:	29 c6                	sub    esi,eax
c0013844:	19 d7                	sbb    edi,edx
c0013846:	89 f0                	mov    eax,esi
c0013848:	89 fa                	mov    edx,edi
c001384a:	31 f6                	xor    esi,esi
c001384c:	80 3d 51 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce51,0x0
c0013853:	74 05                	je     c001385a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013855:	be 08 07 00 00       	mov    esi,0x708
c001385a:	31 ff                	xor    edi,edi
c001385c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013860:	29 f0                	sub    eax,esi
c0013862:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013866:	19 fa                	sbb    edx,edi
c0013868:	89 d8                	mov    eax,ebx
c001386a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001386e:	5b                   	pop    ebx
c001386f:	5e                   	pop    esi
c0013870:	5f                   	pop    edi
c0013871:	ff e0                	jmp    eax

c0013873 <datetimeToSeconds(datetime_t)>:
c0013873:	55                   	push   ebp
c0013874:	57                   	push   edi
c0013875:	56                   	push   esi
c0013876:	53                   	push   ebx
c0013877:	83 ec 14             	sub    esp,0x14
c001387a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001387e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013882:	89 d3                	mov    ebx,edx
c0013884:	0f b6 c6             	movzx  eax,dh
c0013887:	c1 eb 10             	shr    ebx,0x10
c001388a:	48                   	dec    eax
c001388b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013890:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013894:	0f b6 f5             	movzx  esi,ch
c0013897:	89 cf                	mov    edi,ecx
c0013899:	6b f6 3c             	imul   esi,esi,0x3c
c001389c:	c1 ef 10             	shr    edi,0x10
c001389f:	0f b6 c9             	movzx  ecx,cl
c00138a2:	89 f8                	mov    eax,edi
c00138a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138aa:	0f b6 f8             	movzx  edi,al
c00138ad:	0f b6 d2             	movzx  edx,dl
c00138b0:	01 fe                	add    esi,edi
c00138b2:	01 f1                	add    ecx,esi
c00138b4:	0f b7 f3             	movzx  esi,bx
c00138b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138bb:	c1 f9 1f             	sar    ecx,0x1f
c00138be:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138c7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138cc:	8b 0c 8d 20 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd68e0]
c00138d3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00138d7:	76 29                	jbe    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c00138d9:	f6 c3 03             	test   bl,0x3
c00138dc:	75 24                	jne    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c00138de:	31 d2                	xor    edx,edx
c00138e0:	bf 64 00 00 00       	mov    edi,0x64
c00138e5:	89 d8                	mov    eax,ebx
c00138e7:	66 f7 f7             	div    di
c00138ea:	66 85 d2             	test   dx,dx
c00138ed:	75 12                	jne    c0013901 <datetimeToSeconds(datetime_t)+0x8e>
c00138ef:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138f5:	bf 90 01 00 00       	mov    edi,0x190
c00138fa:	99                   	cdq    
c00138fb:	f7 ff                	idiv   edi
c00138fd:	85 d2                	test   edx,edx
c00138ff:	75 01                	jne    c0013902 <datetimeToSeconds(datetime_t)+0x8f>
c0013901:	41                   	inc    ecx
c0013902:	66 83 fb 46          	cmp    bx,0x46
c0013906:	76 45                	jbe    c001394d <datetimeToSeconds(datetime_t)+0xda>
c0013908:	bb 46 00 00 00       	mov    ebx,0x46
c001390d:	bf 64 00 00 00       	mov    edi,0x64
c0013912:	bd 90 01 00 00       	mov    ebp,0x190
c0013917:	b8 6d 01 00 00       	mov    eax,0x16d
c001391c:	f6 c3 03             	test   bl,0x3
c001391f:	75 23                	jne    c0013944 <datetimeToSeconds(datetime_t)+0xd1>
c0013921:	89 d8                	mov    eax,ebx
c0013923:	99                   	cdq    
c0013924:	f7 ff                	idiv   edi
c0013926:	b8 6e 01 00 00       	mov    eax,0x16e
c001392b:	85 d2                	test   edx,edx
c001392d:	75 15                	jne    c0013944 <datetimeToSeconds(datetime_t)+0xd1>
c001392f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013935:	99                   	cdq    
c0013936:	f7 fd                	idiv   ebp
c0013938:	83 fa 01             	cmp    edx,0x1
c001393b:	19 c0                	sbb    eax,eax
c001393d:	f7 d0                	not    eax
c001393f:	05 6e 01 00 00       	add    eax,0x16e
c0013944:	01 c1                	add    ecx,eax
c0013946:	43                   	inc    ebx
c0013947:	39 f3                	cmp    ebx,esi
c0013949:	7c cc                	jl     c0013917 <datetimeToSeconds(datetime_t)+0xa4>
c001394b:	eb 35                	jmp    c0013982 <datetimeToSeconds(datetime_t)+0x10f>
c001394d:	74 33                	je     c0013982 <datetimeToSeconds(datetime_t)+0x10f>
c001394f:	b8 45 00 00 00       	mov    eax,0x45
c0013954:	89 c2                	mov    edx,eax
c0013956:	83 e2 03             	and    edx,0x3
c0013959:	39 f0                	cmp    eax,esi
c001395b:	7e 0f                	jle    c001396c <datetimeToSeconds(datetime_t)+0xf9>
c001395d:	83 fa 01             	cmp    edx,0x1
c0013960:	19 d2                	sbb    edx,edx
c0013962:	48                   	dec    eax
c0013963:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001396a:	eb e8                	jmp    c0013954 <datetimeToSeconds(datetime_t)+0xe1>
c001396c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013971:	85 d2                	test   edx,edx
c0013973:	75 0b                	jne    c0013980 <datetimeToSeconds(datetime_t)+0x10d>
c0013975:	66 83 fb 01          	cmp    bx,0x1
c0013979:	19 c0                	sbb    eax,eax
c001397b:	05 6e 01 00 00       	add    eax,0x16e
c0013980:	29 c1                	sub    ecx,eax
c0013982:	b8 80 51 01 00       	mov    eax,0x15180
c0013987:	f7 e9                	imul   ecx
c0013989:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001398d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013991:	83 c4 14             	add    esp,0x14
c0013994:	5b                   	pop    ebx
c0013995:	5e                   	pop    esi
c0013996:	5f                   	pop    edi
c0013997:	5d                   	pop    ebp
c0013998:	c3                   	ret    
c0013999:	90                   	nop

c001399a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001399a:	57                   	push   edi
c001399b:	56                   	push   esi
c001399c:	53                   	push   ebx
c001399d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00139a3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139ae:	e8 c0 fe ff ff       	call   c0013873 <datetimeToSeconds(datetime_t)>
c00139b3:	59                   	pop    ecx
c00139b4:	0f b6 0d 50 ce 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ce50
c00139bb:	5b                   	pop    ebx
c00139bc:	03 0d 54 ce 02 c0    	add    ecx,DWORD PTR ds:0xc002ce54
c00139c2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139c8:	89 cb                	mov    ebx,ecx
c00139ca:	c1 fb 1f             	sar    ebx,0x1f
c00139cd:	29 c8                	sub    eax,ecx
c00139cf:	19 da                	sbb    edx,ebx
c00139d1:	31 c9                	xor    ecx,ecx
c00139d3:	80 3d 51 ce 02 c0 00 	cmp    BYTE PTR ds:0xc002ce51,0x0
c00139da:	74 05                	je     c00139e1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00139dc:	b9 08 07 00 00       	mov    ecx,0x708
c00139e1:	31 db                	xor    ebx,ebx
c00139e3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139e7:	29 c8                	sub    eax,ecx
c00139e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139ed:	19 da                	sbb    edx,ebx
c00139ef:	89 f8                	mov    eax,edi
c00139f1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139f5:	5b                   	pop    ebx
c00139f6:	5e                   	pop    esi
c00139f7:	5f                   	pop    edi
c00139f8:	ff e0                	jmp    eax

c00139fa <secondsToDatetime(unsigned long long)>:
c00139fa:	55                   	push   ebp
c00139fb:	57                   	push   edi
c00139fc:	56                   	push   esi
c00139fd:	53                   	push   ebx
c00139fe:	83 ec 1c             	sub    esp,0x1c
c0013a01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a05:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a09:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a0d:	6a 00                	push   0x0
c0013a0f:	68 80 51 01 00       	push   0x15180
c0013a14:	55                   	push   ebp
c0013a15:	57                   	push   edi
c0013a16:	e8 e1 1b 01 00       	call   c00255fc <__udivdi3>
c0013a1b:	83 c4 10             	add    esp,0x10
c0013a1e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a28:	6a 00                	push   0x0
c0013a2a:	68 80 51 01 00       	push   0x15180
c0013a2f:	55                   	push   ebp
c0013a30:	57                   	push   edi
c0013a31:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a36:	e8 c1 1c 01 00       	call   c00256fc <__umoddi3>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	99                   	cdq    
c0013a3f:	f7 ff                	idiv   edi
c0013a41:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a46:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a49:	89 d0                	mov    eax,edx
c0013a4b:	99                   	cdq    
c0013a4c:	f7 ff                	idiv   edi
c0013a4e:	85 db                	test   ebx,ebx
c0013a50:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a53:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a56:	79 11                	jns    c0013a69 <secondsToDatetime(unsigned long long)+0x6f>
c0013a58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a5c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a62:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a67:	eb 07                	jmp    c0013a70 <secondsToDatetime(unsigned long long)+0x76>
c0013a69:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a6e:	89 d8                	mov    eax,ebx
c0013a70:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a75:	99                   	cdq    
c0013a76:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a7b:	f7 f9                	idiv   ecx
c0013a7d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a86:	31 d2                	xor    edx,edx
c0013a88:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a90:	01 c3                	add    ebx,eax
c0013a92:	89 d8                	mov    eax,ebx
c0013a94:	f7 f1                	div    ecx
c0013a96:	31 d2                	xor    edx,edx
c0013a98:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a9b:	89 d8                	mov    eax,ebx
c0013a9d:	f7 f7                	div    edi
c0013a9f:	31 d2                	xor    edx,edx
c0013aa1:	29 c1                	sub    ecx,eax
c0013aa3:	89 d8                	mov    eax,ebx
c0013aa5:	f7 f5                	div    ebp
c0013aa7:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013aac:	29 c1                	sub    ecx,eax
c0013aae:	31 d2                	xor    edx,edx
c0013ab0:	89 c8                	mov    eax,ecx
c0013ab2:	f7 f5                	div    ebp
c0013ab4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013abd:	31 d2                	xor    edx,edx
c0013abf:	89 c8                	mov    eax,ecx
c0013ac1:	f7 f5                	div    ebp
c0013ac3:	31 d2                	xor    edx,edx
c0013ac5:	01 c3                	add    ebx,eax
c0013ac7:	89 c8                	mov    eax,ecx
c0013ac9:	f7 f7                	div    edi
c0013acb:	bf 99 00 00 00       	mov    edi,0x99
c0013ad0:	29 c3                	sub    ebx,eax
c0013ad2:	31 d2                	xor    edx,edx
c0013ad4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013adc:	29 c3                	sub    ebx,eax
c0013ade:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ae1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ae4:	bb 05 00 00 00       	mov    ebx,0x5
c0013ae9:	83 c1 02             	add    ecx,0x2
c0013aec:	89 c8                	mov    eax,ecx
c0013aee:	f7 f7                	div    edi
c0013af0:	31 d2                	xor    edx,edx
c0013af2:	89 c7                	mov    edi,eax
c0013af4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013afa:	83 c0 02             	add    eax,0x2
c0013afd:	f7 f3                	div    ebx
c0013aff:	89 eb                	mov    ebx,ebp
c0013b01:	29 c3                	sub    ebx,eax
c0013b03:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b09:	88 1e                	mov    BYTE PTR [esi],bl
c0013b0b:	19 c0                	sbb    eax,eax
c0013b0d:	31 d2                	xor    edx,edx
c0013b0f:	83 e0 0c             	and    eax,0xc
c0013b12:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b16:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b22:	83 f9 01             	cmp    ecx,0x1
c0013b25:	0f 96 c2             	setbe  dl
c0013b28:	41                   	inc    ecx
c0013b29:	01 d0                	add    eax,edx
c0013b2b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b2e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b32:	83 c4 1c             	add    esp,0x1c
c0013b35:	89 f0                	mov    eax,esi
c0013b37:	5b                   	pop    ebx
c0013b38:	5e                   	pop    esi
c0013b39:	5f                   	pop    edi
c0013b3a:	5d                   	pop    ebp
c0013b3b:	c2 04 00             	ret    0x4

c0013b3e <Clock::timeInDatetimeLocal()>:
c0013b3e:	53                   	push   ebx
c0013b3f:	83 ec 14             	sub    esp,0x14
c0013b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b4a:	e8 83 fc ff ff       	call   c00137d2 <Clock::timeInSecondsLocal()>
c0013b4f:	83 c4 0c             	add    esp,0xc
c0013b52:	52                   	push   edx
c0013b53:	50                   	push   eax
c0013b54:	53                   	push   ebx
c0013b55:	e8 a0 fe ff ff       	call   c00139fa <secondsToDatetime(unsigned long long)>
c0013b5a:	89 d8                	mov    eax,ebx
c0013b5c:	83 c4 14             	add    esp,0x14
c0013b5f:	5b                   	pop    ebx
c0013b60:	c2 04 00             	ret    0x4
c0013b63:	90                   	nop

c0013b64 <Device::hibernate()>:
c0013b64:	c3                   	ret    
c0013b65:	90                   	nop

c0013b66 <Device::wake()>:
c0013b66:	c3                   	ret    
c0013b67:	90                   	nop

c0013b68 <Device::detect()>:
c0013b68:	c3                   	ret    
c0013b69:	90                   	nop

c0013b6a <Device::disableLegacy()>:
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <Device::powerSaving(PowerSavingLevel)>:
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <DriverlessDevice::close(int, int, void*)>:
c0013b6e:	31 c0                	xor    eax,eax
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <DriverlessDevice::detect()>:
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <DriverlessDevice::open(int, int, void*)>:
c0013b74:	83 ec 18             	sub    esp,0x18
c0013b77:	68 50 97 02 c0       	push   0xc0029750
c0013b7c:	e8 60 5e 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0013b81:	83 c8 ff             	or     eax,0xffffffff
c0013b84:	83 c4 1c             	add    esp,0x1c
c0013b87:	c3                   	ret    

c0013b88 <Device::~Device()>:
c0013b88:	ba 78 97 02 c0       	mov    edx,0xc0029778
c0013b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b91:	89 10                	mov    DWORD PTR [eax],edx
c0013b93:	90                   	nop
c0013b94:	c3                   	ret    
c0013b95:	90                   	nop

c0013b96 <Device::~Device()>:
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b9d:	e8 e6 ff ff ff       	call   c0013b88 <Device::~Device()>
c0013ba2:	83 c4 04             	add    esp,0x4
c0013ba5:	83 ec 08             	sub    esp,0x8
c0013ba8:	68 58 01 00 00       	push   0x158
c0013bad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb1:	e8 f9 eb ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	83 c4 0c             	add    esp,0xc
c0013bbc:	c3                   	ret    
c0013bbd:	90                   	nop

c0013bbe <Device::findAndLoadDriver()>:
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bc0:	57                   	push   edi
c0013bc1:	b9 09 00 00 00       	mov    ecx,0x9
c0013bc6:	56                   	push   esi
c0013bc7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013bcb:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013bcf:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013bd9:	81 c7 18 01 00 00    	add    edi,0x118
c0013bdf:	fc                   	cld    
c0013be0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013be2:	5e                   	pop    esi
c0013be3:	5f                   	pop    edi
c0013be4:	c3                   	ret    
c0013be5:	90                   	nop

c0013be6 <Device::preOpenACPI(void*, char*, char*)>:
c0013be6:	56                   	push   esi
c0013be7:	53                   	push   ebx
c0013be8:	83 ec 08             	sub    esp,0x8
c0013beb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013bef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013bf3:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c01:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c07:	6a 1e                	push   0x1e
c0013c09:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c13:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c19:	50                   	push   eax
c0013c1a:	e8 36 ca fe ff       	call   c0000655 <memcpy>
c0013c1f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c23:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c27:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c2f:	83 c4 14             	add    esp,0x14
c0013c32:	5b                   	pop    ebx
c0013c33:	5e                   	pop    esi
c0013c34:	e9 1c ca fe ff       	jmp    c0000655 <memcpy>
c0013c39:	90                   	nop

c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c3e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c43:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c4a:	75 0b                	jne    c0013c57 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c52:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c55:	eb 1e                	jmp    c0013c75 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c57:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0013c5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c62:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c68:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c6a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c72:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c75:	ff e0                	jmp    eax
c0013c77:	90                   	nop

c0013c78 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c81:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c88:	75 0b                	jne    c0013c95 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c8c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c90:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c93:	eb 1e                	jmp    c0013cb3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c95:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0013c9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ca8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cb3:	ff e0                	jmp    eax
c0013cb5:	90                   	nop

c0013cb6 <Device::addChild(Device*)>:
c0013cb6:	53                   	push   ebx
c0013cb7:	83 ec 08             	sub    esp,0x8
c0013cba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013cc8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013cce:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013cd0:	85 d2                	test   edx,edx
c0013cd2:	74 04                	je     c0013cd8 <Device::addChild(Device*)+0x22>
c0013cd4:	89 d3                	mov    ebx,edx
c0013cd6:	eb f6                	jmp    c0013cce <Device::addChild(Device*)+0x18>
c0013cd8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013cdb:	83 ec 0c             	sub    esp,0xc
c0013cde:	6a 08                	push   0x8
c0013ce0:	e8 05 b9 ff ff       	call   c000f5ea <malloc>
c0013ce5:	89 03                	mov    DWORD PTR [ebx],eax
c0013ce7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ced:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf4:	83 c4 18             	add    esp,0x18
c0013cf7:	5b                   	pop    ebx
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <Device::removeAllChildren()>:
c0013cfa:	56                   	push   esi
c0013cfb:	53                   	push   ebx
c0013cfc:	52                   	push   edx
c0013cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d01:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d0a:	74 17                	je     c0013d23 <Device::removeAllChildren()+0x29>
c0013d0c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d0f:	85 c0                	test   eax,eax
c0013d11:	74 0c                	je     c0013d1f <Device::removeAllChildren()+0x25>
c0013d13:	83 ec 0c             	sub    esp,0xc
c0013d16:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d18:	50                   	push   eax
c0013d19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d21:	eb e4                	jmp    c0013d07 <Device::removeAllChildren()+0xd>
c0013d23:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d2f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d3c:	58                   	pop    eax
c0013d3d:	5b                   	pop    ebx
c0013d3e:	5e                   	pop    esi
c0013d3f:	c3                   	ret    

c0013d40 <Device::hibernateAll()>:
c0013d40:	53                   	push   ebx
c0013d41:	83 ec 14             	sub    esp,0x14
c0013d44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d4a:	53                   	push   ebx
c0013d4b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d54:	83 c4 10             	add    esp,0x10
c0013d57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d5a:	74 0f                	je     c0013d6b <Device::hibernateAll()+0x2b>
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d62:	e8 d9 ff ff ff       	call   c0013d40 <Device::hibernateAll()>
c0013d67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d69:	eb e9                	jmp    c0013d54 <Device::hibernateAll()+0x14>
c0013d6b:	83 c4 08             	add    esp,0x8
c0013d6e:	5b                   	pop    ebx
c0013d6f:	c3                   	ret    

c0013d70 <Device::wakeAll()>:
c0013d70:	53                   	push   ebx
c0013d71:	83 ec 14             	sub    esp,0x14
c0013d74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7a:	53                   	push   ebx
c0013d7b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d84:	83 c4 10             	add    esp,0x10
c0013d87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d8a:	74 0f                	je     c0013d9b <Device::wakeAll()+0x2b>
c0013d8c:	83 ec 0c             	sub    esp,0xc
c0013d8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d92:	e8 d9 ff ff ff       	call   c0013d70 <Device::wakeAll()>
c0013d97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d99:	eb e9                	jmp    c0013d84 <Device::wakeAll()+0x14>
c0013d9b:	83 c4 08             	add    esp,0x8
c0013d9e:	5b                   	pop    ebx
c0013d9f:	c3                   	ret    

c0013da0 <Device::detectAll()>:
c0013da0:	53                   	push   ebx
c0013da1:	83 ec 14             	sub    esp,0x14
c0013da4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013da8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013daa:	53                   	push   ebx
c0013dab:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013dae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db4:	83 c4 10             	add    esp,0x10
c0013db7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dba:	74 0f                	je     c0013dcb <Device::detectAll()+0x2b>
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc2:	e8 d9 ff ff ff       	call   c0013da0 <Device::detectAll()>
c0013dc7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc9:	eb e9                	jmp    c0013db4 <Device::detectAll()+0x14>
c0013dcb:	83 c4 08             	add    esp,0x8
c0013dce:	5b                   	pop    ebx
c0013dcf:	c3                   	ret    

c0013dd0 <Device::disableLegacyAll()>:
c0013dd0:	53                   	push   ebx
c0013dd1:	83 ec 14             	sub    esp,0x14
c0013dd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dda:	53                   	push   ebx
c0013ddb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013dde:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de4:	83 c4 10             	add    esp,0x10
c0013de7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dea:	74 0f                	je     c0013dfb <Device::disableLegacyAll()+0x2b>
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df2:	e8 d9 ff ff ff       	call   c0013dd0 <Device::disableLegacyAll()>
c0013df7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df9:	eb e9                	jmp    c0013de4 <Device::disableLegacyAll()+0x14>
c0013dfb:	83 c4 08             	add    esp,0x8
c0013dfe:	5b                   	pop    ebx
c0013dff:	c3                   	ret    

c0013e00 <Device::loadDriversForAll()>:
c0013e00:	53                   	push   ebx
c0013e01:	83 ec 08             	sub    esp,0x8
c0013e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e08:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e0e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e10:	85 db                	test   ebx,ebx
c0013e12:	74 12                	je     c0013e26 <Device::loadDriversForAll()+0x26>
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e1a:	e8 e1 ff ff ff       	call   c0013e00 <Device::loadDriversForAll()>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	89 d8                	mov    eax,ebx
c0013e24:	eb e8                	jmp    c0013e0e <Device::loadDriversForAll()+0xe>
c0013e26:	83 c4 08             	add    esp,0x8
c0013e29:	5b                   	pop    ebx
c0013e2a:	c3                   	ret    
c0013e2b:	90                   	nop

c0013e2c <Device::closeAll()>:
c0013e2c:	53                   	push   ebx
c0013e2d:	83 ec 08             	sub    esp,0x8
c0013e30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e36:	6a 00                	push   0x0
c0013e38:	6a 00                	push   0x0
c0013e3a:	6a 00                	push   0x0
c0013e3c:	53                   	push   ebx
c0013e3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e4c:	74 0f                	je     c0013e5d <Device::closeAll()+0x31>
c0013e4e:	83 ec 0c             	sub    esp,0xc
c0013e51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e54:	e8 d3 ff ff ff       	call   c0013e2c <Device::closeAll()>
c0013e59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e5b:	eb e9                	jmp    c0013e46 <Device::closeAll()+0x1a>
c0013e5d:	83 c4 08             	add    esp,0x8
c0013e60:	5b                   	pop    ebx
c0013e61:	c3                   	ret    

c0013e62 <Device::powerSavingAll(PowerSavingLevel)>:
c0013e62:	56                   	push   esi
c0013e63:	53                   	push   ebx
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e71:	56                   	push   esi
c0013e72:	53                   	push   ebx
c0013e73:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e76:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e82:	74 0f                	je     c0013e93 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e84:	52                   	push   edx
c0013e85:	52                   	push   edx
c0013e86:	56                   	push   esi
c0013e87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e8a:	e8 d3 ff ff ff       	call   c0013e62 <Device::powerSavingAll(PowerSavingLevel)>
c0013e8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e91:	eb e9                	jmp    c0013e7c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013e93:	58                   	pop    eax
c0013e94:	5b                   	pop    ebx
c0013e95:	5e                   	pop    esi
c0013e96:	c3                   	ret    
c0013e97:	90                   	nop

c0013e98 <Device::setName(char const*)>:
c0013e98:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ea0:	e9 85 c8 fe ff       	jmp    c000072a <strcpy>
c0013ea5:	90                   	nop

c0013ea6 <Device::Device(char const*)>:
c0013ea6:	83 ec 1c             	sub    esp,0x1c
c0013ea9:	ba 78 97 02 c0       	mov    edx,0xc0029778
c0013eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb2:	89 10                	mov    DWORD PTR [eax],edx
c0013eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013eec:	83 ec 08             	sub    esp,0x8
c0013eef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef7:	e8 9c ff ff ff       	call   c0013e98 <Device::setName(char const*)>
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f0e:	e8 d7 b6 ff ff       	call   c000f5ea <malloc>
c0013f13:	83 c4 10             	add    esp,0x10
c0013f16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f27:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f31:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f52:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f5d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f68:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f76:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f84:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f92:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f9c:	90                   	nop
c0013f9d:	83 c4 1c             	add    esp,0x1c
c0013fa0:	c3                   	ret    
c0013fa1:	90                   	nop

c0013fa2 <Device::getName()>:
c0013fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fa6:	05 d0 00 00 00       	add    eax,0xd0
c0013fab:	c3                   	ret    

c0013fac <DriverlessDevice::DriverlessDevice(char const*)>:
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb3:	83 ec 08             	sub    esp,0x8
c0013fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fba:	50                   	push   eax
c0013fbb:	e8 e6 fe ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0013fc0:	83 c4 10             	add    esp,0x10
c0013fc3:	ba a4 97 02 c0       	mov    edx,0xc00297a4
c0013fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fcc:	89 10                	mov    DWORD PTR [eax],edx
c0013fce:	90                   	nop
c0013fcf:	83 c4 0c             	add    esp,0xc
c0013fd2:	c3                   	ret    
c0013fd3:	90                   	nop

c0013fd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013fd4:	57                   	push   edi
c0013fd5:	56                   	push   esi
c0013fd6:	53                   	push   ebx
c0013fd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fdb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fdf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fe3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013fe9:	75 0c                	jne    c0013ff7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013feb:	52                   	push   edx
c0013fec:	52                   	push   edx
c0013fed:	53                   	push   ebx
c0013fee:	56                   	push   esi
c0013fef:	e8 46 35 01 00       	call   c002753a <LinkedList<Device>::addElement(Device*)>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ffd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014000:	74 12                	je     c0014014 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014002:	50                   	push   eax
c0014003:	57                   	push   edi
c0014004:	56                   	push   esi
c0014005:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014008:	e8 c7 ff ff ff       	call   c0013fd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001400d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001400f:	83 c4 10             	add    esp,0x10
c0014012:	eb e9                	jmp    c0013ffd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014014:	5b                   	pop    ebx
c0014015:	5e                   	pop    esi
c0014016:	5f                   	pop    edi
c0014017:	c3                   	ret    

c0014018 <getDevicesOfType(DeviceType)>:
c0014018:	53                   	push   ebx
c0014019:	83 ec 14             	sub    esp,0x14
c001401c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014020:	53                   	push   ebx
c0014021:	e8 f0 35 01 00       	call   c0027616 <LinkedList<Device>::LinkedList()>
c0014026:	83 c4 0c             	add    esp,0xc
c0014029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001402d:	53                   	push   ebx
c001402e:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c0014034:	e8 9b ff ff ff       	call   c0013fd4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014039:	89 d8                	mov    eax,ebx
c001403b:	83 c4 18             	add    esp,0x18
c001403e:	5b                   	pop    ebx
c001403f:	c2 04 00             	ret    0x4

c0014042 <HardDiskController::HardDiskController(char const*)>:
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014049:	83 ec 08             	sub    esp,0x8
c001404c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014050:	50                   	push   eax
c0014051:	e8 50 fe ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	ba d0 97 02 c0       	mov    edx,0xc00297d0
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	89 10                	mov    DWORD PTR [eax],edx
c0014064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014068:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014072:	90                   	nop
c0014073:	83 c4 0c             	add    esp,0xc
c0014076:	c3                   	ret    
c0014077:	90                   	nop

c0014078 <HardDiskController::~HardDiskController()>:
c0014078:	83 ec 0c             	sub    esp,0xc
c001407b:	ba d0 97 02 c0       	mov    edx,0xc00297d0
c0014080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014084:	89 10                	mov    DWORD PTR [eax],edx
c0014086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408a:	83 ec 0c             	sub    esp,0xc
c001408d:	50                   	push   eax
c001408e:	e8 f5 fa ff ff       	call   c0013b88 <Device::~Device()>
c0014093:	83 c4 10             	add    esp,0x10
c0014096:	90                   	nop
c0014097:	83 c4 0c             	add    esp,0xc
c001409a:	c3                   	ret    
c001409b:	90                   	nop

c001409c <HardDiskController::~HardDiskController()>:
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	83 ec 0c             	sub    esp,0xc
c00140a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a6:	e8 cd ff ff ff       	call   c0014078 <HardDiskController::~HardDiskController()>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	83 ec 08             	sub    esp,0x8
c00140b1:	68 58 01 00 00       	push   0x158
c00140b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ba:	e8 f0 e6 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	83 c4 0c             	add    esp,0xc
c00140c5:	c3                   	ret    

c00140c6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140c6:	83 ec 0c             	sub    esp,0xc
c00140c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cd:	83 ec 08             	sub    esp,0x8
c00140d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d4:	50                   	push   eax
c00140d5:	e8 cc fd ff ff       	call   c0013ea6 <Device::Device(char const*)>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	ba fc 97 02 c0       	mov    edx,0xc00297fc
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	89 10                	mov    DWORD PTR [eax],edx
c00140e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ec:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00140f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001410c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014110:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014114:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014128:	90                   	nop
c0014129:	83 c4 0c             	add    esp,0xc
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <PhysicalDisk::startCache()>:
c001412e:	56                   	push   esi
c001412f:	53                   	push   ebx
c0014130:	83 ec 10             	sub    esp,0x10
c0014133:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014137:	6a 30                	push   0x30
c0014139:	e8 ac b4 ff ff       	call   c000f5ea <malloc>
c001413e:	89 c6                	mov    esi,eax
c0014140:	58                   	pop    eax
c0014141:	5a                   	pop    edx
c0014142:	53                   	push   ebx
c0014143:	56                   	push   esi
c0014144:	e8 dd 25 00 00       	call   c0016726 <VCache::VCache(PhysicalDisk*)>
c0014149:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001414f:	83 c4 14             	add    esp,0x14
c0014152:	5b                   	pop    ebx
c0014153:	5e                   	pop    esi
c0014154:	c3                   	ret    
c0014155:	90                   	nop

c0014156 <PhysicalDisk::~PhysicalDisk()>:
c0014156:	83 ec 0c             	sub    esp,0xc
c0014159:	ba fc 97 02 c0       	mov    edx,0xc00297fc
c001415e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014162:	89 10                	mov    DWORD PTR [eax],edx
c0014164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	50                   	push   eax
c001416c:	e8 17 fa ff ff       	call   c0013b88 <Device::~Device()>
c0014171:	83 c4 10             	add    esp,0x10
c0014174:	90                   	nop
c0014175:	83 c4 0c             	add    esp,0xc
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <PhysicalDisk::~PhysicalDisk()>:
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	83 ec 0c             	sub    esp,0xc
c0014180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014184:	e8 cd ff ff ff       	call   c0014156 <PhysicalDisk::~PhysicalDisk()>
c0014189:	83 c4 10             	add    esp,0x10
c001418c:	83 ec 08             	sub    esp,0x8
c001418f:	68 6c 01 00 00       	push   0x16c
c0014194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014198:	e8 12 e6 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	83 c4 0c             	add    esp,0xc
c00141a3:	c3                   	ret    

c00141a4 <FPU::FPU(char const*)>:
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ab:	83 ec 08             	sub    esp,0x8
c00141ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b2:	50                   	push   eax
c00141b3:	e8 ee fc ff ff       	call   c0013ea6 <Device::Device(char const*)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	ba 3c 98 02 c0       	mov    edx,0xc002983c
c00141c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c4:	89 10                	mov    DWORD PTR [eax],edx
c00141c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00141d4:	90                   	nop
c00141d5:	83 c4 0c             	add    esp,0xc
c00141d8:	c3                   	ret    
c00141d9:	90                   	nop

c00141da <FPU::~FPU()>:
c00141da:	83 ec 0c             	sub    esp,0xc
c00141dd:	ba 3c 98 02 c0       	mov    edx,0xc002983c
c00141e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141e6:	89 10                	mov    DWORD PTR [eax],edx
c00141e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ec:	83 ec 0c             	sub    esp,0xc
c00141ef:	50                   	push   eax
c00141f0:	e8 93 f9 ff ff       	call   c0013b88 <Device::~Device()>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	90                   	nop
c00141f9:	83 c4 0c             	add    esp,0xc
c00141fc:	c3                   	ret    
c00141fd:	90                   	nop

c00141fe <FPU::~FPU()>:
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	83 ec 0c             	sub    esp,0xc
c0014204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014208:	e8 cd ff ff ff       	call   c00141da <FPU::~FPU()>
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	83 ec 08             	sub    esp,0x8
c0014213:	68 58 01 00 00       	push   0x158
c0014218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001421c:	e8 8e e5 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0014221:	83 c4 10             	add    esp,0x10
c0014224:	83 c4 0c             	add    esp,0xc
c0014227:	c3                   	ret    

c0014228 <setupFPU()>:
c0014228:	53                   	push   ebx
c0014229:	83 ec 08             	sub    esp,0x8
c001422c:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c0014232:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014239:	74 19                	je     c0014254 <setupFPU()+0x2c>
c001423b:	83 ec 0c             	sub    esp,0xc
c001423e:	68 58 01 00 00       	push   0x158
c0014243:	e8 a2 b3 ff ff       	call   c000f5ea <malloc>
c0014248:	89 c3                	mov    ebx,eax
c001424a:	89 04 24             	mov    DWORD PTR [esp],eax
c001424d:	e8 32 ff 00 00       	call   c0024184 <AVX::AVX()>
c0014252:	eb 5b                	jmp    c00142af <setupFPU()+0x87>
c0014254:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001425a:	84 c0                	test   al,al
c001425c:	79 19                	jns    c0014277 <setupFPU()+0x4f>
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	68 58 01 00 00       	push   0x158
c0014266:	e8 7f b3 ff ff       	call   c000f5ea <malloc>
c001426b:	89 c3                	mov    ebx,eax
c001426d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014270:	e8 35 00 01 00       	call   c00242aa <SSE::SSE()>
c0014275:	eb 38                	jmp    c00142af <setupFPU()+0x87>
c0014277:	a8 20                	test   al,0x20
c0014279:	74 19                	je     c0014294 <setupFPU()+0x6c>
c001427b:	83 ec 0c             	sub    esp,0xc
c001427e:	68 58 01 00 00       	push   0x158
c0014283:	e8 62 b3 ff ff       	call   c000f5ea <malloc>
c0014288:	89 c3                	mov    ebx,eax
c001428a:	89 04 24             	mov    DWORD PTR [esp],eax
c001428d:	e8 82 ff 00 00       	call   c0024214 <MMX::MMX()>
c0014292:	eb 1b                	jmp    c00142af <setupFPU()+0x87>
c0014294:	a8 10                	test   al,0x10
c0014296:	74 1c                	je     c00142b4 <setupFPU()+0x8c>
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	68 58 01 00 00       	push   0x158
c00142a0:	e8 45 b3 ff ff       	call   c000f5ea <malloc>
c00142a5:	89 c3                	mov    ebx,eax
c00142a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00142aa:	e8 89 00 01 00       	call   c0024338 <x87::x87()>
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	eb 24                	jmp    c00142d8 <setupFPU()+0xb0>
c00142b4:	83 e0 ef             	and    eax,0xffffffef
c00142b7:	83 ec 0c             	sub    esp,0xc
c00142ba:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142c0:	68 28 98 02 c0       	push   0xc0029828
c00142c5:	e8 c5 e5 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00142ca:	0f 20 c0             	mov    eax,cr0
c00142cd:	83 c8 04             	or     eax,0x4
c00142d0:	0f 22 c0             	mov    cr0,eax
c00142d3:	31 db                	xor    ebx,ebx
c00142d5:	83 c4 10             	add    esp,0x10
c00142d8:	89 d8                	mov    eax,ebx
c00142da:	83 c4 08             	add    esp,0x8
c00142dd:	5b                   	pop    ebx
c00142de:	c3                   	ret    
c00142df:	90                   	nop

c00142e0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00142e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142e8:	c1 e0 04             	shl    eax,0x4
c00142eb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00142ef:	8d 50 10             	lea    edx,[eax+0x10]
c00142f2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00142f8:	74 08                	je     c0014302 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00142fa:	83 c0 04             	add    eax,0x4
c00142fd:	39 d0                	cmp    eax,edx
c00142ff:	75 f1                	jne    c00142f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014301:	c3                   	ret    
c0014302:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001430c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014316:	eb e2                	jmp    c00142fa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014318 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014318:	57                   	push   edi
c0014319:	31 c0                	xor    eax,eax
c001431b:	56                   	push   esi
c001431c:	53                   	push   ebx
c001431d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014321:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014325:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014329:	89 da                	mov    edx,ebx
c001432b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001432f:	c1 e2 04             	shl    edx,0x4
c0014332:	01 ca                	add    edx,ecx
c0014334:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001433c:	74 16                	je     c0014354 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001433e:	40                   	inc    eax
c001433f:	83 f8 04             	cmp    eax,0x4
c0014342:	75 f0                	jne    c0014334 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014344:	c7 44 24 10 6c 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc002986c
c001434c:	5b                   	pop    ebx
c001434d:	5e                   	pop    esi
c001434e:	5f                   	pop    edi
c001434f:	e9 8d 56 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c0014354:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014357:	8d 04 81             	lea    eax,[ecx+eax*4]
c001435a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014360:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014366:	5b                   	pop    ebx
c0014367:	5e                   	pop    esi
c0014368:	5f                   	pop    edi
c0014369:	c3                   	ret    

c001436a <doubleFault(regs*, void*)>:
c001436a:	55                   	push   ebp
c001436b:	89 e5                	mov    ebp,esp
c001436d:	83 ec 08             	sub    esp,0x8
c0014370:	83 ec 0c             	sub    esp,0xc
c0014373:	68 a7 98 02 c0       	push   0xc00298a7
c0014378:	e8 64 56 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001437d:	83 c4 10             	add    esp,0x10
c0014380:	90                   	nop
c0014381:	c9                   	leave  
c0014382:	c3                   	ret    
c0014383:	90                   	nop

c0014384 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014384:	56                   	push   esi
c0014385:	53                   	push   ebx
c0014386:	50                   	push   eax
c0014387:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001438b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001438f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014394:	75 35                	jne    c00143cb <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014396:	8d 43 20             	lea    eax,[ebx+0x20]
c0014399:	31 d2                	xor    edx,edx
c001439b:	89 c1                	mov    ecx,eax
c001439d:	c1 e1 04             	shl    ecx,0x4
c00143a0:	01 f1                	add    ecx,esi
c00143a2:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143aa:	74 3e                	je     c00143ea <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143ac:	42                   	inc    edx
c00143ad:	83 fa 04             	cmp    edx,0x4
c00143b0:	75 f0                	jne    c00143a2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143b2:	83 ec 0c             	sub    esp,0xc
c00143b5:	68 ec 98 02 c0       	push   0xc00298ec
c00143ba:	e8 22 56 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143c7:	5a                   	pop    edx
c00143c8:	5b                   	pop    ebx
c00143c9:	5e                   	pop    esi
c00143ca:	c3                   	ret    
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	56                   	push   esi
c00143cf:	e8 ce fb ff ff       	call   c0013fa2 <Device::getName()>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143da:	75 ba                	jne    c0014396 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143dc:	83 fb 0f             	cmp    ebx,0xf
c00143df:	7f 29                	jg     c001440a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00143e1:	0f b6 9b 20 bf 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd40e0]
c00143e8:	eb ac                	jmp    c0014396 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00143ea:	8d 04 82             	lea    eax,[edx+eax*4]
c00143ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143f1:	8d 04 86             	lea    eax,[esi+eax*4]
c00143f4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00143fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00143fe:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014404:	89 d8                	mov    eax,ebx
c0014406:	5a                   	pop    edx
c0014407:	5b                   	pop    ebx
c0014408:	5e                   	pop    esi
c0014409:	c3                   	ret    
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	68 b4 98 02 c0       	push   0xc00298b4
c0014412:	e8 ca 55 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	e9 77 ff ff ff       	jmp    c0014396 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001441f:	90                   	nop

c0014420 <InterruptController::clearAllHandlers(int, bool)>:
c0014420:	56                   	push   esi
c0014421:	53                   	push   ebx
c0014422:	52                   	push   edx
c0014423:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014427:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001442b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014430:	75 61                	jne    c0014493 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014432:	8d 46 20             	lea    eax,[esi+0x20]
c0014435:	c1 e6 04             	shl    esi,0x4
c0014438:	c1 e0 04             	shl    eax,0x4
c001443b:	01 de                	add    esi,ebx
c001443d:	01 d8                	add    eax,ebx
c001443f:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014449:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014453:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001445d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014467:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014471:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001447b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014485:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001448f:	58                   	pop    eax
c0014490:	5b                   	pop    ebx
c0014491:	5e                   	pop    esi
c0014492:	c3                   	ret    
c0014493:	83 ec 0c             	sub    esp,0xc
c0014496:	53                   	push   ebx
c0014497:	e8 06 fb ff ff       	call   c0013fa2 <Device::getName()>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144a2:	75 8e                	jne    c0014432 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144a4:	83 fe 0f             	cmp    esi,0xf
c00144a7:	7f 09                	jg     c00144b2 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144a9:	0f b6 b6 20 bf 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd40e0]
c00144b0:	eb 80                	jmp    c0014432 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144b2:	83 ec 0c             	sub    esp,0xc
c00144b5:	68 28 99 02 c0       	push   0xc0029928
c00144ba:	e8 22 55 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00144bf:	83 c4 10             	add    esp,0x10
c00144c2:	e9 6b ff ff ff       	jmp    c0014432 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144c7:	90                   	nop

c00144c8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144c8:	56                   	push   esi
c00144c9:	53                   	push   ebx
c00144ca:	52                   	push   edx
c00144cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144d3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00144d8:	75 3a                	jne    c0014514 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00144da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144de:	8d 50 20             	lea    edx,[eax+0x20]
c00144e1:	c1 e2 04             	shl    edx,0x4
c00144e4:	8d 04 16             	lea    eax,[esi+edx*1]
c00144e7:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00144eb:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00144f1:	74 0b                	je     c00144fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00144f3:	83 c0 04             	add    eax,0x4
c00144f6:	39 d0                	cmp    eax,edx
c00144f8:	75 f1                	jne    c00144eb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00144fa:	58                   	pop    eax
c00144fb:	5b                   	pop    ebx
c00144fc:	5e                   	pop    esi
c00144fd:	c3                   	ret    
c00144fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014508:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014512:	eb df                	jmp    c00144f3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014514:	83 ec 0c             	sub    esp,0xc
c0014517:	56                   	push   esi
c0014518:	e8 85 fa ff ff       	call   c0013fa2 <Device::getName()>
c001451d:	83 c4 10             	add    esp,0x10
c0014520:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014523:	75 b5                	jne    c00144da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014525:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001452a:	7f 11                	jg     c001453d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001452c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014530:	0f b6 80 20 bf 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd40e0]
c0014537:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001453b:	eb 9d                	jmp    c00144da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001453d:	83 ec 0c             	sub    esp,0xc
c0014540:	68 28 99 02 c0       	push   0xc0029928
c0014545:	e8 97 54 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001454a:	83 c4 10             	add    esp,0x10
c001454d:	eb 8b                	jmp    c00144da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001454f <nmiHandler(regs*, void*)>:
c001454f:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0014554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014558:	e9 d9 a7 ff ff       	jmp    c000ed36 <Computer::handleNMI()>

c001455d <int_handler>:
c001455d:	55                   	push   ebp
c001455e:	57                   	push   edi
c001455f:	56                   	push   esi
c0014560:	53                   	push   ebx
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014568:	80 3d 00 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d800,0x0
c001456f:	74 0b                	je     c001457c <int_handler+0x1f>
c0014571:	fa                   	cli    
c0014572:	f4                   	hlt    
c0014573:	80 3d 00 d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d800,0x0
c001457a:	75 f5                	jne    c0014571 <int_handler+0x14>
c001457c:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0014581:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014584:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001458a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014590:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014593:	83 f8 17             	cmp    eax,0x17
c0014596:	77 13                	ja     c00145ab <int_handler+0x4e>
c0014598:	83 ec 08             	sub    esp,0x8
c001459b:	8b 17                	mov    edx,DWORD PTR [edi]
c001459d:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145a0:	0f b6 c0             	movzx  eax,al
c00145a3:	50                   	push   eax
c00145a4:	57                   	push   edi
c00145a5:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145a8:	83 c4 10             	add    esp,0x10
c00145ab:	83 c3 15             	add    ebx,0x15
c00145ae:	c1 e3 04             	shl    ebx,0x4
c00145b1:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145b5:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00145bc:	31 db                	xor    ebx,ebx
c00145be:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145c2:	85 c0                	test   eax,eax
c00145c4:	74 13                	je     c00145d9 <int_handler+0x7c>
c00145c6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145c9:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00145cd:	74 1c                	je     c00145eb <int_handler+0x8e>
c00145cf:	83 ec 08             	sub    esp,0x8
c00145d2:	52                   	push   edx
c00145d3:	56                   	push   esi
c00145d4:	ff d0                	call   eax
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	43                   	inc    ebx
c00145da:	83 fb 04             	cmp    ebx,0x4
c00145dd:	75 df                	jne    c00145be <int_handler+0x61>
c00145df:	83 c4 0c             	add    esp,0xc
c00145e2:	31 c0                	xor    eax,eax
c00145e4:	5b                   	pop    ebx
c00145e5:	31 d2                	xor    edx,edx
c00145e7:	5e                   	pop    esi
c00145e8:	5f                   	pop    edi
c00145e9:	5d                   	pop    ebp
c00145ea:	c3                   	ret    
c00145eb:	83 ec 08             	sub    esp,0x8
c00145ee:	52                   	push   edx
c00145ef:	56                   	push   esi
c00145f0:	ff d0                	call   eax
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	83 c4 0c             	add    esp,0xc
c00145f8:	5b                   	pop    ebx
c00145f9:	5e                   	pop    esi
c00145fa:	5f                   	pop    edi
c00145fb:	5d                   	pop    ebp
c00145fc:	c3                   	ret    
c00145fd:	90                   	nop

c00145fe <InterruptController::InterruptController(char const*)>:
c00145fe:	83 ec 1c             	sub    esp,0x1c
c0014601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014605:	83 ec 08             	sub    esp,0x8
c0014608:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001460c:	50                   	push   eax
c001460d:	e8 94 f8 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c001461a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461e:	89 10                	mov    DWORD PTR [eax],edx
c0014620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014624:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001462e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014636:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001463e:	7f 5e                	jg     c001469e <InterruptController::InterruptController(char const*)+0xa0>
c0014640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014648:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001464d:	7f 49                	jg     c0014698 <InterruptController::InterruptController(char const*)+0x9a>
c001464f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014653:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014657:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001465e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014662:	01 ca                	add    edx,ecx
c0014664:	83 c2 54             	add    edx,0x54
c0014667:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001466f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014673:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014677:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001467e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014682:	01 ca                	add    edx,ecx
c0014684:	81 c2 54 04 00 00    	add    edx,0x454
c001468a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014692:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014696:	eb b0                	jmp    c0014648 <InterruptController::InterruptController(char const*)+0x4a>
c0014698:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001469c:	eb 98                	jmp    c0014636 <InterruptController::InterruptController(char const*)+0x38>
c001469e:	90                   	nop
c001469f:	83 c4 1c             	add    esp,0x1c
c00146a2:	c3                   	ret    
c00146a3:	90                   	nop

c00146a4 <InterruptController::~InterruptController()>:
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	89 10                	mov    DWORD PTR [eax],edx
c00146b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	50                   	push   eax
c00146ba:	e8 c9 f4 ff ff       	call   c0013b88 <Device::~Device()>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	90                   	nop
c00146c3:	83 c4 0c             	add    esp,0xc
c00146c6:	c3                   	ret    
c00146c7:	90                   	nop

c00146c8 <InterruptController::~InterruptController()>:
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	83 ec 0c             	sub    esp,0xc
c00146ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d2:	e8 cd ff ff ff       	call   c00146a4 <InterruptController::~InterruptController()>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	83 ec 08             	sub    esp,0x8
c00146dd:	68 58 21 00 00       	push   0x2158
c00146e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e6:	e8 c4 e0 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	83 c4 0c             	add    esp,0xc
c00146f1:	c3                   	ret    

c00146f2 <displayDebugInfo(regs*)>:
c00146f2:	55                   	push   ebp
c00146f3:	57                   	push   edi
c00146f4:	56                   	push   esi
c00146f5:	53                   	push   ebx
c00146f6:	83 ec 24             	sub    esp,0x24
c00146f9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00146fd:	0f 20 c2             	mov    edx,cr0
c0014700:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014704:	0f 20 d7             	mov    edi,cr2
c0014707:	0f 20 de             	mov    esi,cr3
c001470a:	0f 20 e5             	mov    ebp,cr4
c001470d:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014710:	68 62 99 02 c0       	push   0xc0029962
c0014715:	e8 75 e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001471a:	58                   	pop    eax
c001471b:	5a                   	pop    edx
c001471c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001471f:	68 6d 99 02 c0       	push   0xc002996d
c0014724:	e8 66 e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014729:	59                   	pop    ecx
c001472a:	58                   	pop    eax
c001472b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001472e:	68 78 99 02 c0       	push   0xc0029978
c0014733:	e8 57 e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014738:	58                   	pop    eax
c0014739:	5a                   	pop    edx
c001473a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001473d:	68 83 99 02 c0       	push   0xc0029983
c0014742:	e8 48 e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014747:	59                   	pop    ecx
c0014748:	58                   	pop    eax
c0014749:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001474c:	68 8e 99 02 c0       	push   0xc002998e
c0014751:	e8 39 e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014756:	58                   	pop    eax
c0014757:	5a                   	pop    edx
c0014758:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001475b:	68 99 99 02 c0       	push   0xc0029999
c0014760:	e8 2a e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014765:	59                   	pop    ecx
c0014766:	58                   	pop    eax
c0014767:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001476a:	68 a4 99 02 c0       	push   0xc00299a4
c001476f:	e8 1b e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014774:	58                   	pop    eax
c0014775:	5a                   	pop    edx
c0014776:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014779:	68 af 99 02 c0       	push   0xc00299af
c001477e:	e8 0c e1 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014783:	59                   	pop    ecx
c0014784:	58                   	pop    eax
c0014785:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014788:	68 ba 99 02 c0       	push   0xc00299ba
c001478d:	e8 fd e0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014792:	58                   	pop    eax
c0014793:	5a                   	pop    edx
c0014794:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014797:	68 c9 99 02 c0       	push   0xc00299c9
c001479c:	e8 ee e0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00147a1:	59                   	pop    ecx
c00147a2:	58                   	pop    eax
c00147a3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147a6:	68 d4 99 02 c0       	push   0xc00299d4
c00147ab:	e8 df e0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00147b0:	58                   	pop    eax
c00147b1:	5a                   	pop    edx
c00147b2:	57                   	push   edi
c00147b3:	68 df 99 02 c0       	push   0xc00299df
c00147b8:	e8 d2 e0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00147bd:	59                   	pop    ecx
c00147be:	58                   	pop    eax
c00147bf:	56                   	push   esi
c00147c0:	68 ea 99 02 c0       	push   0xc00299ea
c00147c5:	e8 c5 e0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00147ca:	58                   	pop    eax
c00147cb:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00147d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d6:	e8 76 c2 ff ff       	call   c0010a51 <setActiveTerminal(VgaText*)>
c00147db:	58                   	pop    eax
c00147dc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00147df:	5a                   	pop    edx
c00147e0:	c1 e0 05             	shl    eax,0x5
c00147e3:	05 80 bc 02 c0       	add    eax,0xc002bc80
c00147e8:	50                   	push   eax
c00147e9:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00147ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f4:	e8 77 c6 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00147f9:	59                   	pop    ecx
c00147fa:	58                   	pop    eax
c00147fb:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014800:	68 f5 99 02 c0       	push   0xc00299f5
c0014805:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480b:	e8 60 c6 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014810:	58                   	pop    eax
c0014811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014816:	5a                   	pop    edx
c0014817:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001481a:	83 c0 0c             	add    eax,0xc
c001481d:	50                   	push   eax
c001481e:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014823:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014829:	e8 42 c6 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c001482e:	59                   	pop    ecx
c001482f:	58                   	pop    eax
c0014830:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014835:	68 fe 99 02 c0       	push   0xc00299fe
c001483a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014840:	e8 2b c6 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014845:	58                   	pop    eax
c0014846:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001484b:	5a                   	pop    edx
c001484c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001484f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014855:	e8 3c c6 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c001485a:	59                   	pop    ecx
c001485b:	58                   	pop    eax
c001485c:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014861:	68 06 9a 02 c0       	push   0xc0029a06
c0014866:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486c:	e8 ff c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014871:	58                   	pop    eax
c0014872:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014877:	5a                   	pop    edx
c0014878:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001487b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014881:	e8 10 c6 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014886:	59                   	pop    ecx
c0014887:	58                   	pop    eax
c0014888:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001488d:	68 0e 9a 02 c0       	push   0xc0029a0e
c0014892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014898:	e8 d3 c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c001489d:	58                   	pop    eax
c001489e:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00148a3:	5a                   	pop    edx
c00148a4:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ad:	e8 e4 c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c00148b2:	59                   	pop    ecx
c00148b3:	58                   	pop    eax
c00148b4:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00148b9:	68 16 9a 02 c0       	push   0xc0029a16
c00148be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c4:	e8 a7 c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00148c9:	58                   	pop    eax
c00148ca:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00148cf:	5a                   	pop    edx
c00148d0:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00148d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d9:	e8 b8 c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c00148de:	59                   	pop    ecx
c00148df:	58                   	pop    eax
c00148e0:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00148e5:	68 1e 9a 02 c0       	push   0xc0029a1e
c00148ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f0:	e8 7b c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00148f5:	58                   	pop    eax
c00148f6:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00148fb:	5a                   	pop    edx
c00148fc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00148ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014905:	e8 8c c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c001490a:	59                   	pop    ecx
c001490b:	58                   	pop    eax
c001490c:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014911:	68 26 9a 02 c0       	push   0xc0029a26
c0014916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491c:	e8 4f c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014921:	58                   	pop    eax
c0014922:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014927:	5a                   	pop    edx
c0014928:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001492b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014931:	e8 60 c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014936:	59                   	pop    ecx
c0014937:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001493c:	5b                   	pop    ebx
c001493d:	68 2e 9a 02 c0       	push   0xc0029a2e
c0014942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014948:	e8 23 c5 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c001494d:	58                   	pop    eax
c001494e:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014953:	5a                   	pop    edx
c0014954:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014958:	52                   	push   edx
c0014959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495f:	e8 32 c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014964:	59                   	pop    ecx
c0014965:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001496a:	5b                   	pop    ebx
c001496b:	68 37 9a 02 c0       	push   0xc0029a37
c0014970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014976:	e8 f5 c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c001497b:	58                   	pop    eax
c001497c:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014981:	5a                   	pop    edx
c0014982:	57                   	push   edi
c0014983:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014989:	e8 08 c5 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c001498e:	59                   	pop    ecx
c001498f:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014994:	5b                   	pop    ebx
c0014995:	68 3f 9a 02 c0       	push   0xc0029a3f
c001499a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a0:	e8 cb c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00149a5:	5f                   	pop    edi
c00149a6:	58                   	pop    eax
c00149a7:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00149ac:	56                   	push   esi
c00149ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b3:	e8 de c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c00149b8:	58                   	pop    eax
c00149b9:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00149be:	5a                   	pop    edx
c00149bf:	68 47 9a 02 c0       	push   0xc0029a47
c00149c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ca:	e8 a1 c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00149cf:	59                   	pop    ecx
c00149d0:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00149d5:	5b                   	pop    ebx
c00149d6:	55                   	push   ebp
c00149d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149dd:	e8 b4 c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c00149e2:	5e                   	pop    esi
c00149e3:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00149e8:	5f                   	pop    edi
c00149e9:	68 4f 9a 02 c0       	push   0xc0029a4f
c00149ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f4:	e8 77 c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c00149f9:	0f 21 c0             	mov    eax,db0
c00149fc:	5d                   	pop    ebp
c00149fd:	5a                   	pop    edx
c00149fe:	50                   	push   eax
c00149ff:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0a:	e8 87 c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014a0f:	59                   	pop    ecx
c0014a10:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a15:	5b                   	pop    ebx
c0014a16:	68 58 9a 02 c0       	push   0xc0029a58
c0014a1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a21:	e8 4a c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014a26:	0f 21 c8             	mov    eax,db1
c0014a29:	5e                   	pop    esi
c0014a2a:	5f                   	pop    edi
c0014a2b:	50                   	push   eax
c0014a2c:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a37:	e8 5a c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014a3c:	5d                   	pop    ebp
c0014a3d:	58                   	pop    eax
c0014a3e:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a43:	68 60 9a 02 c0       	push   0xc0029a60
c0014a48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4e:	e8 1d c4 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014a53:	0f 21 d0             	mov    eax,db2
c0014a56:	5a                   	pop    edx
c0014a57:	59                   	pop    ecx
c0014a58:	50                   	push   eax
c0014a59:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a64:	e8 2d c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014a69:	5b                   	pop    ebx
c0014a6a:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a6f:	5e                   	pop    esi
c0014a70:	68 68 9a 02 c0       	push   0xc0029a68
c0014a75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7b:	e8 f0 c3 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014a80:	0f 21 d8             	mov    eax,db3
c0014a83:	5f                   	pop    edi
c0014a84:	5d                   	pop    ebp
c0014a85:	50                   	push   eax
c0014a86:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a91:	e8 00 c4 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014a96:	58                   	pop    eax
c0014a97:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014a9c:	5a                   	pop    edx
c0014a9d:	68 70 9a 02 c0       	push   0xc0029a70
c0014aa2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa8:	e8 c3 c3 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014aad:	0f 21 f0             	mov    eax,db6
c0014ab0:	59                   	pop    ecx
c0014ab1:	5b                   	pop    ebx
c0014ab2:	50                   	push   eax
c0014ab3:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014ab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abe:	e8 d3 c3 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014ac3:	5e                   	pop    esi
c0014ac4:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014ac9:	5f                   	pop    edi
c0014aca:	68 78 9a 02 c0       	push   0xc0029a78
c0014acf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad5:	e8 96 c3 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0014ada:	0f 21 f8             	mov    eax,db7
c0014add:	5d                   	pop    ebp
c0014ade:	5a                   	pop    edx
c0014adf:	50                   	push   eax
c0014ae0:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0014ae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aeb:	e8 a6 c3 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0014af0:	fa                   	cli    
c0014af1:	f4                   	hlt    
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	eb fe                	jmp    c0014af5 <displayDebugInfo(regs*)+0x403>

c0014af7 <x87EmulHandler(regs*, void*)>:
c0014af7:	53                   	push   ebx
c0014af8:	83 ec 14             	sub    esp,0x14
c0014afb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014aff:	53                   	push   ebx
c0014b00:	e8 1f a1 00 00       	call   c001ec24 <Vm::x87Handler(regs*)>
c0014b05:	83 c4 10             	add    esp,0x10
c0014b08:	84 c0                	test   al,al
c0014b0a:	74 05                	je     c0014b11 <x87EmulHandler(regs*, void*)+0x1a>
c0014b0c:	83 c4 08             	add    esp,0x8
c0014b0f:	5b                   	pop    ebx
c0014b10:	c3                   	ret    
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	68 80 9a 02 c0       	push   0xc0029a80
c0014b19:	e8 71 dd ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b21:	e8 cc fb ff ff       	call   c00146f2 <displayDebugInfo(regs*)>

c0014b26 <gpFault(regs*, void*)>:
c0014b26:	53                   	push   ebx
c0014b27:	83 ec 14             	sub    esp,0x14
c0014b2a:	c7 05 70 ce 02 c0 a1 df 01 c0 	mov    DWORD PTR ds:0xc002ce70,0xc001dfa1
c0014b34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b38:	53                   	push   ebx
c0014b39:	e8 63 94 00 00       	call   c001dfa1 <Vm::faultHandler(regs*)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	84 c0                	test   al,al
c0014b43:	74 05                	je     c0014b4a <gpFault(regs*, void*)+0x24>
c0014b45:	83 c4 08             	add    esp,0x8
c0014b48:	5b                   	pop    ebx
c0014b49:	c3                   	ret    
c0014b4a:	83 ec 0c             	sub    esp,0xc
c0014b4d:	68 96 9a 02 c0       	push   0xc0029a96
c0014b52:	e8 38 dd ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014b57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b5a:	e8 93 fb ff ff       	call   c00146f2 <displayDebugInfo(regs*)>

c0014b5f <pgFault(regs*, void*)>:
c0014b5f:	83 ec 18             	sub    esp,0x18
c0014b62:	68 b1 9a 02 c0       	push   0xc0029ab1
c0014b67:	e8 23 dd ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014b6c:	58                   	pop    eax
c0014b6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b71:	e8 7c fb ff ff       	call   c00146f2 <displayDebugInfo(regs*)>

c0014b76 <otherISRHandler(regs*, void*)>:
c0014b76:	53                   	push   ebx
c0014b77:	83 ec 0c             	sub    esp,0xc
c0014b7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b7e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b81:	50                   	push   eax
c0014b82:	50                   	push   eax
c0014b83:	68 be 9a 02 c0       	push   0xc0029abe
c0014b88:	e8 02 dd ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014b8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b90:	e8 5d fb ff ff       	call   c00146f2 <displayDebugInfo(regs*)>

c0014b95 <opcodeFault(regs*, void*)>:
c0014b95:	55                   	push   ebp
c0014b96:	89 e5                	mov    ebp,esp
c0014b98:	56                   	push   esi
c0014b99:	53                   	push   ebx
c0014b9a:	83 ec 40             	sub    esp,0x40
c0014b9d:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0014ba2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ba8:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bae:	84 c0                	test   al,al
c0014bb0:	74 24                	je     c0014bd6 <opcodeFault(regs*, void*)+0x41>
c0014bb2:	83 ec 0c             	sub    esp,0xc
c0014bb5:	68 dc 9a 02 c0       	push   0xc0029adc
c0014bba:	e8 d0 dc ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bc8:	8d 50 19             	lea    edx,[eax+0x19]
c0014bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd1:	e9 77 05 00 00       	jmp    c001514d <opcodeFault(regs*, void*)+0x5b8>
c0014bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bdc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014bdf:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014be3:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf5:	3c f0                	cmp    al,0xf0
c0014bf7:	75 17                	jne    c0014c10 <opcodeFault(regs*, void*)+0x7b>
c0014bf9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c02:	8d 50 01             	lea    edx,[eax+0x1]
c0014c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c08:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c0b:	e9 da 00 00 00       	jmp    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014c10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c13:	8a 00                	mov    al,BYTE PTR [eax]
c0014c15:	3c f2                	cmp    al,0xf2
c0014c17:	74 09                	je     c0014c22 <opcodeFault(regs*, void*)+0x8d>
c0014c19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1e:	3c f3                	cmp    al,0xf3
c0014c20:	75 1b                	jne    c0014c3d <opcodeFault(regs*, void*)+0xa8>
c0014c22:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c26:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c35:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c38:	e9 ad 00 00 00       	jmp    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c40:	8a 00                	mov    al,BYTE PTR [eax]
c0014c42:	3c 66                	cmp    al,0x66
c0014c44:	75 1f                	jne    c0014c65 <opcodeFault(regs*, void*)+0xd0>
c0014c46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c4a:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c57:	8d 50 01             	lea    edx,[eax+0x1]
c0014c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c60:	e9 85 00 00 00       	jmp    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c68:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6a:	3c 67                	cmp    al,0x67
c0014c6c:	75 18                	jne    c0014c86 <opcodeFault(regs*, void*)+0xf1>
c0014c6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c84:	eb 64                	jmp    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c89:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8b:	3c 2e                	cmp    al,0x2e
c0014c8d:	74 09                	je     c0014c98 <opcodeFault(regs*, void*)+0x103>
c0014c8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c92:	8a 00                	mov    al,BYTE PTR [eax]
c0014c94:	3c 3e                	cmp    al,0x3e
c0014c96:	75 18                	jne    c0014cb0 <opcodeFault(regs*, void*)+0x11b>
c0014c98:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c9c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ca5:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cae:	eb 3a                	jmp    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb3:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb5:	3c 36                	cmp    al,0x36
c0014cb7:	74 1b                	je     c0014cd4 <opcodeFault(regs*, void*)+0x13f>
c0014cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbe:	3c 26                	cmp    al,0x26
c0014cc0:	74 12                	je     c0014cd4 <opcodeFault(regs*, void*)+0x13f>
c0014cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc7:	3c 64                	cmp    al,0x64
c0014cc9:	74 09                	je     c0014cd4 <opcodeFault(regs*, void*)+0x13f>
c0014ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cce:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd0:	3c 65                	cmp    al,0x65
c0014cd2:	75 16                	jne    c0014cea <opcodeFault(regs*, void*)+0x155>
c0014cd4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cd8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ced:	8a 00                	mov    al,BYTE PTR [eax]
c0014cef:	3c 0f                	cmp    al,0xf
c0014cf1:	0f 85 ad 00 00 00    	jne    c0014da4 <opcodeFault(regs*, void*)+0x20f>
c0014cf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cfa:	40                   	inc    eax
c0014cfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfd:	3c c2                	cmp    al,0xc2
c0014cff:	74 0e                	je     c0014d0f <opcodeFault(regs*, void*)+0x17a>
c0014d01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d04:	40                   	inc    eax
c0014d05:	8a 00                	mov    al,BYTE PTR [eax]
c0014d07:	3c c3                	cmp    al,0xc3
c0014d09:	0f 85 95 00 00 00    	jne    c0014da4 <opcodeFault(regs*, void*)+0x20f>
c0014d0f:	83 ec 0c             	sub    esp,0xc
c0014d12:	68 ff 9a 02 c0       	push   0xc0029aff
c0014d17:	e8 73 db ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d25:	8d 50 01             	lea    edx,[eax+0x1]
c0014d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d34:	8a 00                	mov    al,BYTE PTR [eax]
c0014d36:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3c:	88 10                	mov    BYTE PTR [eax],dl
c0014d3e:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d41:	50                   	push   eax
c0014d42:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d45:	50                   	push   eax
c0014d46:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d49:	50                   	push   eax
c0014d4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d4d:	e8 c0 44 00 00       	call   c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d5e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d61:	01 d0                	add    eax,edx
c0014d63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d6f:	48                   	dec    eax
c0014d70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d79:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7f:	83 ec 04             	sub    esp,0x4
c0014d82:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d85:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d88:	50                   	push   eax
c0014d89:	e8 db b3 fe ff       	call   c0000169 <voodooXADD>
c0014d8e:	83 c4 10             	add    esp,0x10
c0014d91:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d97:	01 c2                	add    edx,eax
c0014d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d9f:	e9 a9 03 00 00       	jmp    c001514d <opcodeFault(regs*, void*)+0x5b8>
c0014da4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da7:	8a 00                	mov    al,BYTE PTR [eax]
c0014da9:	3c 0f                	cmp    al,0xf
c0014dab:	0f 85 8b 01 00 00    	jne    c0014f3c <opcodeFault(regs*, void*)+0x3a7>
c0014db1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db4:	40                   	inc    eax
c0014db5:	8a 00                	mov    al,BYTE PTR [eax]
c0014db7:	3c c7                	cmp    al,0xc7
c0014db9:	0f 86 7d 01 00 00    	jbe    c0014f3c <opcodeFault(regs*, void*)+0x3a7>
c0014dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc2:	40                   	inc    eax
c0014dc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc5:	3c cf                	cmp    al,0xcf
c0014dc7:	0f 87 6f 01 00 00    	ja     c0014f3c <opcodeFault(regs*, void*)+0x3a7>
c0014dcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd0:	40                   	inc    eax
c0014dd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd3:	83 c0 38             	add    eax,0x38
c0014dd6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014dd9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ddd:	75 0b                	jne    c0014dea <opcodeFault(regs*, void*)+0x255>
c0014ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014de5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014de8:	eb 75                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014dea:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014dee:	75 0b                	jne    c0014dfb <opcodeFault(regs*, void*)+0x266>
c0014df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014df6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014df9:	eb 64                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014dfb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014dff:	75 0b                	jne    c0014e0c <opcodeFault(regs*, void*)+0x277>
c0014e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e04:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e07:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e0a:	eb 53                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e0c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e10:	75 0b                	jne    c0014e1d <opcodeFault(regs*, void*)+0x288>
c0014e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e18:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e1b:	eb 42                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e1d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e21:	75 0b                	jne    c0014e2e <opcodeFault(regs*, void*)+0x299>
c0014e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e26:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e2c:	eb 31                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e2e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e32:	75 0b                	jne    c0014e3f <opcodeFault(regs*, void*)+0x2aa>
c0014e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e37:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e3d:	eb 20                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e3f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e43:	75 0b                	jne    c0014e50 <opcodeFault(regs*, void*)+0x2bb>
c0014e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e4e:	eb 0f                	jmp    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e50:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e54:	75 09                	jne    c0014e5f <opcodeFault(regs*, void*)+0x2ca>
c0014e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e5c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e5f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e63:	74 10                	je     c0014e75 <opcodeFault(regs*, void*)+0x2e0>
c0014e65:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014e6c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014e73:	eb 2d                	jmp    c0014ea2 <opcodeFault(regs*, void*)+0x30d>
c0014e75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e78:	c1 e0 18             	shl    eax,0x18
c0014e7b:	89 c2                	mov    edx,eax
c0014e7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e80:	c1 e0 08             	shl    eax,0x8
c0014e83:	25 00 00 ff 00       	and    eax,0xff0000
c0014e88:	09 c2                	or     edx,eax
c0014e8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e8d:	c1 e8 08             	shr    eax,0x8
c0014e90:	25 00 ff 00 00       	and    eax,0xff00
c0014e95:	09 c2                	or     edx,eax
c0014e97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e9a:	c1 e8 18             	shr    eax,0x18
c0014e9d:	09 d0                	or     eax,edx
c0014e9f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ea6:	75 0b                	jne    c0014eb3 <opcodeFault(regs*, void*)+0x31e>
c0014ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eae:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014eb1:	eb 75                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014eb3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014eb7:	75 0b                	jne    c0014ec4 <opcodeFault(regs*, void*)+0x32f>
c0014eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ebf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ec2:	eb 64                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014ec4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ec8:	75 0b                	jne    c0014ed5 <opcodeFault(regs*, void*)+0x340>
c0014eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ed0:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ed3:	eb 53                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014ed5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ed9:	75 0b                	jne    c0014ee6 <opcodeFault(regs*, void*)+0x351>
c0014edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ede:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ee1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014ee4:	eb 42                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014ee6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014eea:	75 0b                	jne    c0014ef7 <opcodeFault(regs*, void*)+0x362>
c0014eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ef5:	eb 31                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014ef7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014efb:	75 0b                	jne    c0014f08 <opcodeFault(regs*, void*)+0x373>
c0014efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f03:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f06:	eb 20                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014f08:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f0c:	75 0b                	jne    c0014f19 <opcodeFault(regs*, void*)+0x384>
c0014f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f14:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f17:	eb 0f                	jmp    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014f19:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f1d:	75 09                	jne    c0014f28 <opcodeFault(regs*, void*)+0x393>
c0014f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f2e:	8d 50 02             	lea    edx,[eax+0x2]
c0014f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f34:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f37:	e9 11 02 00 00       	jmp    c001514d <opcodeFault(regs*, void*)+0x5b8>
c0014f3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f3f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f41:	3c 0f                	cmp    al,0xf
c0014f43:	0f 85 76 01 00 00    	jne    c00150bf <opcodeFault(regs*, void*)+0x52a>
c0014f49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f4c:	40                   	inc    eax
c0014f4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f4f:	3c c7                	cmp    al,0xc7
c0014f51:	0f 85 68 01 00 00    	jne    c00150bf <opcodeFault(regs*, void*)+0x52a>
c0014f57:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f60:	8d 50 01             	lea    edx,[eax+0x1]
c0014f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f66:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f69:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014f6c:	50                   	push   eax
c0014f6d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014f70:	50                   	push   eax
c0014f71:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014f74:	50                   	push   eax
c0014f75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f78:	e8 95 42 00 00       	call   c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f7d:	83 c4 10             	add    esp,0x10
c0014f80:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f83:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f86:	83 f0 01             	xor    eax,0x1
c0014f89:	84 c0                	test   al,al
c0014f8b:	0f 84 2e 01 00 00    	je     c00150bf <opcodeFault(regs*, void*)+0x52a>
c0014f91:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f94:	3c 01                	cmp    al,0x1
c0014f96:	0f 85 23 01 00 00    	jne    c00150bf <opcodeFault(regs*, void*)+0x52a>
c0014f9c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014f9f:	83 f0 01             	xor    eax,0x1
c0014fa2:	84 c0                	test   al,al
c0014fa4:	0f 84 15 01 00 00    	je     c00150bf <opcodeFault(regs*, void*)+0x52a>
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014fb0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fb3:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014fba:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fbd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fc0:	89 c2                	mov    edx,eax
c0014fc2:	b8 00 00 00 00       	mov    eax,0x0
c0014fc7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fca:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014fd3:	ba 00 00 00 00       	mov    edx,0x0
c0014fd8:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014fdb:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014fe4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014fe7:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014fee:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ff1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ff4:	89 c2                	mov    edx,eax
c0014ff6:	b8 00 00 00 00       	mov    eax,0x0
c0014ffb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ffe:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015004:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015007:	ba 00 00 00 00       	mov    edx,0x0
c001500c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001500f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015012:	e8 79 7f 00 00       	call   c001cf90 <lockScheduler()>
c0015017:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001501a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001501d:	8b 00                	mov    eax,DWORD PTR [eax]
c001501f:	89 c1                	mov    ecx,eax
c0015021:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015024:	89 cb                	mov    ebx,ecx
c0015026:	89 d0                	mov    eax,edx
c0015028:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001502b:	89 c6                	mov    esi,eax
c001502d:	89 f0                	mov    eax,esi
c001502f:	09 d8                	or     eax,ebx
c0015031:	85 c0                	test   eax,eax
c0015033:	75 21                	jne    c0015056 <opcodeFault(regs*, void*)+0x4c1>
c0015035:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015038:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001503b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001503e:	89 01                	mov    DWORD PTR [ecx],eax
c0015040:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015046:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015049:	83 c8 40             	or     eax,0x40
c001504c:	89 c2                	mov    edx,eax
c001504e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015051:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015054:	eb 3e                	jmp    c0015094 <opcodeFault(regs*, void*)+0x4ff>
c0015056:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015059:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001505c:	8b 00                	mov    eax,DWORD PTR [eax]
c001505e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015061:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015064:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001506d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015070:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015073:	89 d0                	mov    eax,edx
c0015075:	31 d2                	xor    edx,edx
c0015077:	89 c3                	mov    ebx,eax
c0015079:	89 d6                	mov    esi,edx
c001507b:	89 da                	mov    edx,ebx
c001507d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015080:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015086:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015089:	83 e0 bf             	and    eax,0xffffffbf
c001508c:	89 c2                	mov    edx,eax
c001508e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015091:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015094:	e8 f9 7e 00 00       	call   c001cf92 <unlockScheduler()>
c0015099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001509f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150a2:	01 c2                	add    edx,eax
c00150a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150aa:	83 ec 0c             	sub    esp,0xc
c00150ad:	68 0e 9b 02 c0       	push   0xc0029b0e
c00150b2:	e8 d8 d7 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	e9 8e 00 00 00       	jmp    c001514d <opcodeFault(regs*, void*)+0x5b8>
c00150bf:	83 ec 0c             	sub    esp,0xc
c00150c2:	68 21 9b 02 c0       	push   0xc0029b21
c00150c7:	e8 c3 d7 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00150cc:	83 c4 10             	add    esp,0x10
c00150cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150db:	c1 e0 04             	shl    eax,0x4
c00150de:	01 d0                	add    eax,edx
c00150e0:	83 c0 03             	add    eax,0x3
c00150e3:	8a 00                	mov    al,BYTE PTR [eax]
c00150e5:	0f b6 d8             	movzx  ebx,al
c00150e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150eb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150f4:	c1 e0 04             	shl    eax,0x4
c00150f7:	01 d0                	add    eax,edx
c00150f9:	83 c0 02             	add    eax,0x2
c00150fc:	8a 00                	mov    al,BYTE PTR [eax]
c00150fe:	0f b6 c8             	movzx  ecx,al
c0015101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015104:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001510d:	c1 e0 04             	shl    eax,0x4
c0015110:	01 d0                	add    eax,edx
c0015112:	40                   	inc    eax
c0015113:	8a 00                	mov    al,BYTE PTR [eax]
c0015115:	0f b6 d0             	movzx  edx,al
c0015118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001511e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015121:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015124:	c1 e0 04             	shl    eax,0x4
c0015127:	01 f0                	add    eax,esi
c0015129:	8a 00                	mov    al,BYTE PTR [eax]
c001512b:	0f b6 c0             	movzx  eax,al
c001512e:	83 ec 0c             	sub    esp,0xc
c0015131:	53                   	push   ebx
c0015132:	51                   	push   ecx
c0015133:	52                   	push   edx
c0015134:	50                   	push   eax
c0015135:	68 34 9b 02 c0       	push   0xc0029b34
c001513a:	e8 50 d7 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001513f:	83 c4 20             	add    esp,0x20
c0015142:	83 ec 0c             	sub    esp,0xc
c0015145:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015148:	e8 a5 f5 ff ff       	call   c00146f2 <displayDebugInfo(regs*)>
c001514d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015150:	5b                   	pop    ebx
c0015151:	5e                   	pop    esi
c0015152:	5d                   	pop    ebp
c0015153:	c3                   	ret    

c0015154 <displayProgramFault(char const*)>:
c0015154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015159:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001515c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015162:	85 c0                	test   eax,eax
c0015164:	74 15                	je     c001517b <displayProgramFault(char const*)+0x27>
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	6a 04                	push   0x4
c001516b:	6a 0f                	push   0xf
c001516d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015171:	50                   	push   eax
c0015172:	e8 bb b9 ff ff       	call   c0010b32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015177:	83 c4 1c             	add    esp,0x1c
c001517a:	c3                   	ret    
c001517b:	c3                   	ret    

c001517c <setupInterruptController()>:
c001517c:	55                   	push   ebp
c001517d:	89 e5                	mov    ebp,esp
c001517f:	53                   	push   ebx
c0015180:	83 ec 24             	sub    esp,0x24
c0015183:	b8 00 00 00 00       	mov    eax,0x0
c0015188:	85 c0                	test   eax,eax
c001518a:	0f 95 c0             	setne  al
c001518d:	84 c0                	test   al,al
c001518f:	74 5b                	je     c00151ec <setupInterruptController()+0x70>
c0015191:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015198:	83 ec 0c             	sub    esp,0xc
c001519b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001519e:	e8 47 a4 ff ff       	call   c000f5ea <malloc>
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	89 c3                	mov    ebx,eax
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	53                   	push   ebx
c00151ac:	e8 c5 f3 00 00       	call   c0024576 <APIC::APIC()>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00151ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bf:	83 c0 08             	add    eax,0x8
c00151c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c4:	6a 00                	push   0x0
c00151c6:	6a 00                	push   0x0
c00151c8:	6a 00                	push   0x0
c00151ca:	52                   	push   edx
c00151cb:	ff d0                	call   eax
c00151cd:	83 c4 10             	add    esp,0x10
c00151d0:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00151d5:	83 ec 08             	sub    esp,0x8
c00151d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00151db:	50                   	push   eax
c00151dc:	e8 d5 ea ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151e7:	e9 52 03 00 00       	jmp    c001553e <setupInterruptController()+0x3c2>
c00151ec:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00151f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151f7:	83 e0 01             	and    eax,0x1
c00151fa:	84 c0                	test   al,al
c00151fc:	0f 95 c0             	setne  al
c00151ff:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015202:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015209:	83 ec 0c             	sub    esp,0xc
c001520c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001520f:	e8 d6 a3 ff ff       	call   c000f5ea <malloc>
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	89 c3                	mov    ebx,eax
c0015219:	83 ec 0c             	sub    esp,0xc
c001521c:	53                   	push   ebx
c001521d:	e8 ac f8 00 00       	call   c0024ace <PIC::PIC()>
c0015222:	83 c4 10             	add    esp,0x10
c0015225:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015228:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001522b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015230:	83 c0 08             	add    eax,0x8
c0015233:	8b 00                	mov    eax,DWORD PTR [eax]
c0015235:	6a 00                	push   0x0
c0015237:	6a 00                	push   0x0
c0015239:	6a 00                	push   0x0
c001523b:	52                   	push   edx
c001523c:	ff d0                	call   eax
c001523e:	83 c4 10             	add    esp,0x10
c0015241:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015245:	74 73                	je     c00152ba <setupInterruptController()+0x13e>
c0015247:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001524a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001524d:	8b 00                	mov    eax,DWORD PTR [eax]
c001524f:	83 c0 0c             	add    eax,0xc
c0015252:	8b 00                	mov    eax,DWORD PTR [eax]
c0015254:	6a 00                	push   0x0
c0015256:	6a 00                	push   0x0
c0015258:	6a 00                	push   0x0
c001525a:	52                   	push   edx
c001525b:	ff d0                	call   eax
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015264:	74 15                	je     c001527b <setupInterruptController()+0xff>
c0015266:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015269:	8b 00                	mov    eax,DWORD PTR [eax]
c001526b:	83 c0 04             	add    eax,0x4
c001526e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015270:	83 ec 0c             	sub    esp,0xc
c0015273:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015276:	ff d0                	call   eax
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015282:	83 ec 0c             	sub    esp,0xc
c0015285:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015288:	e8 5d a3 ff ff       	call   c000f5ea <malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	89 c3                	mov    ebx,eax
c0015292:	83 ec 0c             	sub    esp,0xc
c0015295:	53                   	push   ebx
c0015296:	e8 db f2 00 00       	call   c0024576 <APIC::APIC()>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a9:	83 c0 08             	add    eax,0x8
c00152ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ae:	6a 00                	push   0x0
c00152b0:	6a 00                	push   0x0
c00152b2:	6a 00                	push   0x0
c00152b4:	52                   	push   edx
c00152b5:	ff d0                	call   eax
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00152bf:	83 ec 08             	sub    esp,0x8
c00152c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c5:	50                   	push   eax
c00152c6:	e8 eb e9 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c00152cb:	83 c4 10             	add    esp,0x10
c00152ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d3:	83 c0 24             	add    eax,0x24
c00152d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d8:	6a 00                	push   0x0
c00152da:	68 76 4b 01 c0       	push   0xc0014b76
c00152df:	6a 00                	push   0x0
c00152e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e4:	ff d0                	call   eax
c00152e6:	83 c4 10             	add    esp,0x10
c00152e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ee:	83 c0 24             	add    eax,0x24
c00152f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f3:	6a 00                	push   0x0
c00152f5:	68 76 4b 01 c0       	push   0xc0014b76
c00152fa:	6a 01                	push   0x1
c00152fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ff:	ff d0                	call   eax
c0015301:	83 c4 10             	add    esp,0x10
c0015304:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015307:	8b 00                	mov    eax,DWORD PTR [eax]
c0015309:	83 c0 24             	add    eax,0x24
c001530c:	8b 00                	mov    eax,DWORD PTR [eax]
c001530e:	6a 00                	push   0x0
c0015310:	68 4f 45 01 c0       	push   0xc001454f
c0015315:	6a 02                	push   0x2
c0015317:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531a:	ff d0                	call   eax
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015322:	8b 00                	mov    eax,DWORD PTR [eax]
c0015324:	83 c0 24             	add    eax,0x24
c0015327:	8b 00                	mov    eax,DWORD PTR [eax]
c0015329:	6a 00                	push   0x0
c001532b:	68 76 4b 01 c0       	push   0xc0014b76
c0015330:	6a 03                	push   0x3
c0015332:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015335:	ff d0                	call   eax
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533d:	8b 00                	mov    eax,DWORD PTR [eax]
c001533f:	83 c0 24             	add    eax,0x24
c0015342:	8b 00                	mov    eax,DWORD PTR [eax]
c0015344:	6a 00                	push   0x0
c0015346:	68 76 4b 01 c0       	push   0xc0014b76
c001534b:	6a 04                	push   0x4
c001534d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015350:	ff d0                	call   eax
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015358:	8b 00                	mov    eax,DWORD PTR [eax]
c001535a:	83 c0 24             	add    eax,0x24
c001535d:	8b 00                	mov    eax,DWORD PTR [eax]
c001535f:	6a 00                	push   0x0
c0015361:	68 76 4b 01 c0       	push   0xc0014b76
c0015366:	6a 05                	push   0x5
c0015368:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536b:	ff d0                	call   eax
c001536d:	83 c4 10             	add    esp,0x10
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	83 c0 24             	add    eax,0x24
c0015378:	8b 00                	mov    eax,DWORD PTR [eax]
c001537a:	6a 00                	push   0x0
c001537c:	68 95 4b 01 c0       	push   0xc0014b95
c0015381:	6a 06                	push   0x6
c0015383:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015386:	ff d0                	call   eax
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015390:	83 c0 24             	add    eax,0x24
c0015393:	8b 00                	mov    eax,DWORD PTR [eax]
c0015395:	6a 00                	push   0x0
c0015397:	68 f7 4a 01 c0       	push   0xc0014af7
c001539c:	6a 07                	push   0x7
c001539e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a1:	ff d0                	call   eax
c00153a3:	83 c4 10             	add    esp,0x10
c00153a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	83 c0 24             	add    eax,0x24
c00153ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b0:	6a 00                	push   0x0
c00153b2:	68 6a 43 01 c0       	push   0xc001436a
c00153b7:	6a 08                	push   0x8
c00153b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bc:	ff d0                	call   eax
c00153be:	83 c4 10             	add    esp,0x10
c00153c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c6:	83 c0 24             	add    eax,0x24
c00153c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cb:	6a 00                	push   0x0
c00153cd:	68 76 4b 01 c0       	push   0xc0014b76
c00153d2:	6a 09                	push   0x9
c00153d4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d7:	ff d0                	call   eax
c00153d9:	83 c4 10             	add    esp,0x10
c00153dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153df:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e1:	83 c0 24             	add    eax,0x24
c00153e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e6:	6a 00                	push   0x0
c00153e8:	68 76 4b 01 c0       	push   0xc0014b76
c00153ed:	6a 0a                	push   0xa
c00153ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f2:	ff d0                	call   eax
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fc:	83 c0 24             	add    eax,0x24
c00153ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015401:	6a 00                	push   0x0
c0015403:	68 76 4b 01 c0       	push   0xc0014b76
c0015408:	6a 0b                	push   0xb
c001540a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540d:	ff d0                	call   eax
c001540f:	83 c4 10             	add    esp,0x10
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	8b 00                	mov    eax,DWORD PTR [eax]
c0015417:	83 c0 24             	add    eax,0x24
c001541a:	8b 00                	mov    eax,DWORD PTR [eax]
c001541c:	6a 00                	push   0x0
c001541e:	68 76 4b 01 c0       	push   0xc0014b76
c0015423:	6a 0c                	push   0xc
c0015425:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015428:	ff d0                	call   eax
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015430:	8b 00                	mov    eax,DWORD PTR [eax]
c0015432:	83 c0 24             	add    eax,0x24
c0015435:	8b 00                	mov    eax,DWORD PTR [eax]
c0015437:	6a 00                	push   0x0
c0015439:	68 26 4b 01 c0       	push   0xc0014b26
c001543e:	6a 0d                	push   0xd
c0015440:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015443:	ff d0                	call   eax
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544b:	8b 00                	mov    eax,DWORD PTR [eax]
c001544d:	83 c0 24             	add    eax,0x24
c0015450:	8b 00                	mov    eax,DWORD PTR [eax]
c0015452:	6a 00                	push   0x0
c0015454:	68 5f 4b 01 c0       	push   0xc0014b5f
c0015459:	6a 0e                	push   0xe
c001545b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001545e:	ff d0                	call   eax
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015466:	8b 00                	mov    eax,DWORD PTR [eax]
c0015468:	83 c0 24             	add    eax,0x24
c001546b:	8b 00                	mov    eax,DWORD PTR [eax]
c001546d:	6a 00                	push   0x0
c001546f:	68 76 4b 01 c0       	push   0xc0014b76
c0015474:	6a 0f                	push   0xf
c0015476:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015479:	ff d0                	call   eax
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015481:	8b 00                	mov    eax,DWORD PTR [eax]
c0015483:	83 c0 24             	add    eax,0x24
c0015486:	8b 00                	mov    eax,DWORD PTR [eax]
c0015488:	6a 00                	push   0x0
c001548a:	68 76 4b 01 c0       	push   0xc0014b76
c001548f:	6a 10                	push   0x10
c0015491:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015494:	ff d0                	call   eax
c0015496:	83 c4 10             	add    esp,0x10
c0015499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549c:	8b 00                	mov    eax,DWORD PTR [eax]
c001549e:	83 c0 24             	add    eax,0x24
c00154a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a3:	6a 00                	push   0x0
c00154a5:	68 76 4b 01 c0       	push   0xc0014b76
c00154aa:	6a 11                	push   0x11
c00154ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154af:	ff d0                	call   eax
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b9:	83 c0 24             	add    eax,0x24
c00154bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154be:	6a 00                	push   0x0
c00154c0:	68 76 4b 01 c0       	push   0xc0014b76
c00154c5:	6a 12                	push   0x12
c00154c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ca:	ff d0                	call   eax
c00154cc:	83 c4 10             	add    esp,0x10
c00154cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d4:	83 c0 24             	add    eax,0x24
c00154d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d9:	6a 00                	push   0x0
c00154db:	68 76 4b 01 c0       	push   0xc0014b76
c00154e0:	6a 13                	push   0x13
c00154e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e5:	ff d0                	call   eax
c00154e7:	83 c4 10             	add    esp,0x10
c00154ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ef:	83 c0 24             	add    eax,0x24
c00154f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f4:	6a 00                	push   0x0
c00154f6:	68 76 4b 01 c0       	push   0xc0014b76
c00154fb:	6a 14                	push   0x14
c00154fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015500:	ff d0                	call   eax
c0015502:	83 c4 10             	add    esp,0x10
c0015505:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015508:	8b 00                	mov    eax,DWORD PTR [eax]
c001550a:	83 c0 24             	add    eax,0x24
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	6a 00                	push   0x0
c0015511:	68 76 4b 01 c0       	push   0xc0014b76
c0015516:	6a 1e                	push   0x1e
c0015518:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551b:	ff d0                	call   eax
c001551d:	83 c4 10             	add    esp,0x10
c0015520:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015523:	8b 00                	mov    eax,DWORD PTR [eax]
c0015525:	83 c0 24             	add    eax,0x24
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	6a 00                	push   0x0
c001552c:	68 8b b9 01 c0       	push   0xc001b98b
c0015531:	6a 60                	push   0x60
c0015533:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015536:	ff d0                	call   eax
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015541:	c9                   	leave  
c0015542:	c3                   	ret    
c0015543:	90                   	nop

c0015544 <InterruptController::convertLegacyIRQNumber(int)>:
c0015544:	55                   	push   ebp
c0015545:	89 e5                	mov    ebp,esp
c0015547:	83 ec 08             	sub    esp,0x8
c001554a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	50                   	push   eax
c0015551:	e8 4c ea ff ff       	call   c0013fa2 <Device::getName()>
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	8a 00                	mov    al,BYTE PTR [eax]
c001555b:	3c 41                	cmp    al,0x41
c001555d:	0f 94 c0             	sete   al
c0015560:	84 c0                	test   al,al
c0015562:	74 28                	je     c001558c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015564:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015568:	7f 12                	jg     c001557c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001556a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001556d:	05 20 bf 02 c0       	add    eax,0xc002bf20
c0015572:	8a 00                	mov    al,BYTE PTR [eax]
c0015574:	0f b6 c0             	movzx  eax,al
c0015577:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001557a:	eb 10                	jmp    c001558c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001557c:	83 ec 0c             	sub    esp,0xc
c001557f:	68 b4 98 02 c0       	push   0xc00298b4
c0015584:	e8 58 44 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0015589:	83 c4 10             	add    esp,0x10
c001558c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001558f:	c9                   	leave  
c0015590:	c3                   	ret    
c0015591:	90                   	nop

c0015592 <startGUI(void*)>:
c0015592:	55                   	push   ebp
c0015593:	89 e5                	mov    ebp,esp
c0015595:	53                   	push   ebx
c0015596:	83 ec 04             	sub    esp,0x4
c0015599:	e8 f4 79 00 00       	call   c001cf92 <unlockScheduler()>
c001559e:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c00155a4:	83 ec 08             	sub    esp,0x8
c00155a7:	6a 01                	push   0x1
c00155a9:	68 9c 9b 02 c0       	push   0xc0029b9c
c00155ae:	e8 6a 73 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	83 ec 08             	sub    esp,0x8
c00155b9:	53                   	push   ebx
c00155ba:	50                   	push   eax
c00155bb:	e8 6c 75 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c00155c9:	83 ec 08             	sub    esp,0x8
c00155cc:	6a 01                	push   0x1
c00155ce:	68 b6 9b 02 c0       	push   0xc0029bb6
c00155d3:	e8 45 73 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	83 ec 08             	sub    esp,0x8
c00155de:	53                   	push   ebx
c00155df:	50                   	push   eax
c00155e0:	e8 47 75 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	90                   	nop
c00155e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155ec:	c9                   	leave  
c00155ed:	c3                   	ret    

c00155ee <startGUIVESA(void*)>:
c00155ee:	55                   	push   ebp
c00155ef:	89 e5                	mov    ebp,esp
c00155f1:	53                   	push   ebx
c00155f2:	83 ec 04             	sub    esp,0x4
c00155f5:	e8 98 79 00 00       	call   c001cf92 <unlockScheduler()>
c00155fa:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0015600:	83 ec 08             	sub    esp,0x8
c0015603:	6a 01                	push   0x1
c0015605:	68 d0 9b 02 c0       	push   0xc0029bd0
c001560a:	e8 0e 73 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	83 ec 08             	sub    esp,0x8
c0015615:	53                   	push   ebx
c0015616:	50                   	push   eax
c0015617:	e8 10 75 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0015625:	83 ec 08             	sub    esp,0x8
c0015628:	6a 01                	push   0x1
c001562a:	68 b6 9b 02 c0       	push   0xc0029bb6
c001562f:	e8 e9 72 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	83 ec 08             	sub    esp,0x8
c001563a:	53                   	push   ebx
c001563b:	50                   	push   eax
c001563c:	e8 eb 74 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	90                   	nop
c0015645:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015648:	c9                   	leave  
c0015649:	c3                   	ret    

c001564a <sendKeyToTerminal(unsigned char)>:
c001564a:	55                   	push   ebp
c001564b:	89 e5                	mov    ebp,esp
c001564d:	83 ec 28             	sub    esp,0x28
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015656:	a1 a4 cd 02 c0       	mov    eax,ds:0xc002cda4
c001565b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001565f:	83 ec 08             	sub    esp,0x8
c0015662:	52                   	push   edx
c0015663:	50                   	push   eax
c0015664:	e8 05 ba ff ff       	call   c001106e <VgaText::receiveKey(unsigned char)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015670:	75 41                	jne    c00156b3 <sendKeyToTerminal(unsigned char)+0x69>
c0015672:	e8 40 79 00 00       	call   c001cfb7 <lockStuff()>
c0015677:	a1 80 ce 02 c0       	mov    eax,ds:0xc002ce80
c001567c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001567f:	c7 05 80 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce80,0x0
c0015689:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001568d:	74 1f                	je     c00156ae <sendKeyToTerminal(unsigned char)+0x64>
c001568f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015695:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015698:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001569b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001569e:	83 ec 0c             	sub    esp,0xc
c00156a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156a4:	e8 ff 7e 00 00       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	eb db                	jmp    c0015689 <sendKeyToTerminal(unsigned char)+0x3f>
c00156ae:	e8 9e 7c 00 00       	call   c001d351 <unlockStuff()>
c00156b3:	90                   	nop
c00156b4:	c9                   	leave  
c00156b5:	c3                   	ret    

c00156b6 <sendKeyboardToken(KeyboardToken)>:
c00156b6:	55                   	push   ebp
c00156b7:	89 e5                	mov    ebp,esp
c00156b9:	83 ec 18             	sub    esp,0x18
c00156bc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00156bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c2:	0f b7 c0             	movzx  eax,ax
c00156c5:	83 f2 01             	xor    edx,0x1
c00156c8:	88 90 a0 ce 02 c0    	mov    BYTE PTR [eax-0x3ffd3160],dl
c00156ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d1:	66 3d 03 02          	cmp    ax,0x203
c00156d5:	75 07                	jne    c00156de <sendKeyboardToken(KeyboardToken)+0x28>
c00156d7:	a0 a0 cf 02 c0       	mov    al,ds:0xc002cfa0
c00156dc:	84 c0                	test   al,al
c00156de:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00156e2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00156e5:	a0 a8 d2 02 c0       	mov    al,ds:0xc002d2a8
c00156ea:	38 c2                	cmp    dl,al
c00156ec:	74 1c                	je     c001570a <sendKeyboardToken(KeyboardToken)+0x54>
c00156ee:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00156f1:	a2 a8 d2 02 c0       	mov    ds:0xc002d2a8,al
c00156f6:	a0 a8 d2 02 c0       	mov    al,ds:0xc002d2a8
c00156fb:	0f b6 c0             	movzx  eax,al
c00156fe:	83 ec 0c             	sub    esp,0xc
c0015701:	50                   	push   eax
c0015702:	e8 c7 ab ff ff       	call   c00102ce <setTerminalScrollLock(bool)>
c0015707:	83 c4 10             	add    esp,0x10
c001570a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001570d:	84 c0                	test   al,al
c001570f:	0f 84 ae 00 00 00    	je     c00157c3 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015718:	66 3d 10 03          	cmp    ax,0x310
c001571c:	75 06                	jne    c0015724 <sendKeyboardToken(KeyboardToken)+0x6e>
c001571e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	66 3d 11 03          	cmp    ax,0x311
c001572b:	75 06                	jne    c0015733 <sendKeyboardToken(KeyboardToken)+0x7d>
c001572d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015736:	66 3d 12 03          	cmp    ax,0x312
c001573a:	75 06                	jne    c0015742 <sendKeyboardToken(KeyboardToken)+0x8c>
c001573c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	66 3d 13 03          	cmp    ax,0x313
c0015749:	75 06                	jne    c0015751 <sendKeyboardToken(KeyboardToken)+0x9b>
c001574b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015754:	66 3d 14 03          	cmp    ax,0x314
c0015758:	75 06                	jne    c0015760 <sendKeyboardToken(KeyboardToken)+0xaa>
c001575a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	66 3d 15 03          	cmp    ax,0x315
c0015767:	75 06                	jne    c001576f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015769:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001576f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015772:	66 3d 16 03          	cmp    ax,0x316
c0015776:	75 06                	jne    c001577e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015778:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	66 3d 17 03          	cmp    ax,0x317
c0015785:	75 06                	jne    c001578d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015787:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001578d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015790:	66 3d 18 03          	cmp    ax,0x318
c0015794:	75 06                	jne    c001579c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015796:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001579c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579f:	66 3d 19 03          	cmp    ax,0x319
c00157a3:	75 06                	jne    c00157ab <sendKeyboardToken(KeyboardToken)+0xf5>
c00157a5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	66 3d 1a 03          	cmp    ax,0x31a
c00157b2:	0f 85 c9 00 00 00    	jne    c0015881 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00157b8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00157be:	e9 be 00 00 00       	jmp    c0015881 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	66 3d 10 03          	cmp    ax,0x310
c00157ca:	75 0a                	jne    c00157d6 <sendKeyboardToken(KeyboardToken)+0x120>
c00157cc:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00157d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d9:	66 3d 11 03          	cmp    ax,0x311
c00157dd:	75 0a                	jne    c00157e9 <sendKeyboardToken(KeyboardToken)+0x133>
c00157df:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00157e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ec:	66 3d 12 03          	cmp    ax,0x312
c00157f0:	75 0a                	jne    c00157fc <sendKeyboardToken(KeyboardToken)+0x146>
c00157f2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00157f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ff:	66 3d 13 03          	cmp    ax,0x313
c0015803:	75 0a                	jne    c001580f <sendKeyboardToken(KeyboardToken)+0x159>
c0015805:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001580b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001580f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015812:	66 3d 14 03          	cmp    ax,0x314
c0015816:	75 0a                	jne    c0015822 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015818:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001581e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	66 3d 15 03          	cmp    ax,0x315
c0015829:	75 0a                	jne    c0015835 <sendKeyboardToken(KeyboardToken)+0x17f>
c001582b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015831:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015838:	66 3d 16 03          	cmp    ax,0x316
c001583c:	75 0a                	jne    c0015848 <sendKeyboardToken(KeyboardToken)+0x192>
c001583e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015844:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584b:	66 3d 17 03          	cmp    ax,0x317
c001584f:	75 0a                	jne    c001585b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015851:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015857:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	66 3d 18 03          	cmp    ax,0x318
c0015862:	75 0a                	jne    c001586e <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015864:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001586a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001586e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015871:	66 3d 19 03          	cmp    ax,0x319
c0015875:	75 0a                	jne    c0015881 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015877:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001587d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015884:	66 3d 00 02          	cmp    ax,0x200
c0015888:	75 2c                	jne    c00158b6 <sendKeyboardToken(KeyboardToken)+0x200>
c001588a:	a0 a0 d2 02 c0       	mov    al,ds:0xc002d2a0
c001588f:	83 f0 01             	xor    eax,0x1
c0015892:	84 c0                	test   al,al
c0015894:	74 20                	je     c00158b6 <sendKeyboardToken(KeyboardToken)+0x200>
c0015896:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001589b:	6a 01                	push   0x1
c001589d:	6a 00                	push   0x0
c001589f:	68 92 55 01 c0       	push   0xc0015592
c00158a4:	50                   	push   eax
c00158a5:	e8 18 78 00 00       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	c6 05 a0 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2a0,0x1
c00158b4:	eb 33                	jmp    c00158e9 <sendKeyboardToken(KeyboardToken)+0x233>
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	66 3d 01 02          	cmp    ax,0x201
c00158bd:	75 2a                	jne    c00158e9 <sendKeyboardToken(KeyboardToken)+0x233>
c00158bf:	a0 a0 d2 02 c0       	mov    al,ds:0xc002d2a0
c00158c4:	83 f0 01             	xor    eax,0x1
c00158c7:	84 c0                	test   al,al
c00158c9:	74 1e                	je     c00158e9 <sendKeyboardToken(KeyboardToken)+0x233>
c00158cb:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c00158d0:	6a 01                	push   0x1
c00158d2:	6a 00                	push   0x0
c00158d4:	68 ee 55 01 c0       	push   0xc00155ee
c00158d9:	50                   	push   eax
c00158da:	e8 e3 77 00 00       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	c6 05 a0 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2a0,0x1
c00158e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ec:	66 3d 1d 03          	cmp    ax,0x31d
c00158f0:	75 06                	jne    c00158f8 <sendKeyboardToken(KeyboardToken)+0x242>
c00158f2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00158f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fb:	66 3d 1c 03          	cmp    ax,0x31c
c00158ff:	75 06                	jne    c0015907 <sendKeyboardToken(KeyboardToken)+0x251>
c0015901:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590a:	66 3d 1b 03          	cmp    ax,0x31b
c001590e:	75 06                	jne    c0015916 <sendKeyboardToken(KeyboardToken)+0x260>
c0015910:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	66 3d 1e 03          	cmp    ax,0x31e
c001591d:	75 06                	jne    c0015925 <sendKeyboardToken(KeyboardToken)+0x26f>
c001591f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015928:	66 3d 1f 03          	cmp    ax,0x31f
c001592c:	75 06                	jne    c0015934 <sendKeyboardToken(KeyboardToken)+0x27e>
c001592e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015937:	66 3d 1a 03          	cmp    ax,0x31a
c001593b:	75 06                	jne    c0015943 <sendKeyboardToken(KeyboardToken)+0x28d>
c001593d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015943:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015947:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001594a:	83 f0 01             	xor    eax,0x1
c001594d:	84 c0                	test   al,al
c001594f:	74 77                	je     c00159c8 <sendKeyboardToken(KeyboardToken)+0x312>
c0015951:	a0 a1 cf 02 c0       	mov    al,ds:0xc002cfa1
c0015956:	84 c0                	test   al,al
c0015958:	74 41                	je     c001599b <sendKeyboardToken(KeyboardToken)+0x2e5>
c001595a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001595e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015962:	74 2b                	je     c001598f <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015964:	8b 15 a4 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a4
c001596a:	89 d0                	mov    eax,edx
c001596c:	c1 e0 02             	shl    eax,0x2
c001596f:	01 d0                	add    eax,edx
c0015971:	01 c0                	add    eax,eax
c0015973:	a3 a4 d2 02 c0       	mov    ds:0xc002d2a4,eax
c0015978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597b:	0f b7 c0             	movzx  eax,ax
c001597e:	8d 50 d0             	lea    edx,[eax-0x30]
c0015981:	a1 a4 d2 02 c0       	mov    eax,ds:0xc002d2a4
c0015986:	01 d0                	add    eax,edx
c0015988:	a3 a4 d2 02 c0       	mov    ds:0xc002d2a4,eax
c001598d:	eb 6d                	jmp    c00159fc <sendKeyboardToken(KeyboardToken)+0x346>
c001598f:	c7 05 a4 d2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d2a4,0x0
c0015999:	eb 61                	jmp    c00159fc <sendKeyboardToken(KeyboardToken)+0x346>
c001599b:	a1 a4 d2 02 c0       	mov    eax,ds:0xc002d2a4
c00159a0:	85 c0                	test   eax,eax
c00159a2:	74 18                	je     c00159bc <sendKeyboardToken(KeyboardToken)+0x306>
c00159a4:	a1 a4 d2 02 c0       	mov    eax,ds:0xc002d2a4
c00159a9:	0f b6 c0             	movzx  eax,al
c00159ac:	83 ec 0c             	sub    esp,0xc
c00159af:	50                   	push   eax
c00159b0:	e8 95 fc ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159bc:	c7 05 a4 d2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d2a4,0x0
c00159c6:	eb 34                	jmp    c00159fc <sendKeyboardToken(KeyboardToken)+0x346>
c00159c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cb:	66 3d 01 01          	cmp    ax,0x101
c00159cf:	75 2b                	jne    c00159fc <sendKeyboardToken(KeyboardToken)+0x346>
c00159d1:	a1 a4 d2 02 c0       	mov    eax,ds:0xc002d2a4
c00159d6:	85 c0                	test   eax,eax
c00159d8:	74 18                	je     c00159f2 <sendKeyboardToken(KeyboardToken)+0x33c>
c00159da:	a1 a4 d2 02 c0       	mov    eax,ds:0xc002d2a4
c00159df:	0f b6 c0             	movzx  eax,al
c00159e2:	83 ec 0c             	sub    esp,0xc
c00159e5:	50                   	push   eax
c00159e6:	e8 5f fc ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f2:	c7 05 a4 d2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d2a4,0x0
c00159fc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159ff:	83 f0 01             	xor    eax,0x1
c0015a02:	84 c0                	test   al,al
c0015a04:	74 4c                	je     c0015a52 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a06:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a09:	83 f0 01             	xor    eax,0x1
c0015a0c:	84 c0                	test   al,al
c0015a0e:	74 42                	je     c0015a52 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a10:	a0 a0 cf 02 c0       	mov    al,ds:0xc002cfa0
c0015a15:	83 f0 01             	xor    eax,0x1
c0015a18:	84 c0                	test   al,al
c0015a1a:	74 36                	je     c0015a52 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a1f:	66 83 f8 1f          	cmp    ax,0x1f
c0015a23:	76 09                	jbe    c0015a2e <sendKeyboardToken(KeyboardToken)+0x378>
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	66 83 f8 7e          	cmp    ax,0x7e
c0015a2c:	76 12                	jbe    c0015a40 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a31:	66 83 f8 0a          	cmp    ax,0xa
c0015a35:	74 09                	je     c0015a40 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3a:	66 83 f8 08          	cmp    ax,0x8
c0015a3e:	75 12                	jne    c0015a52 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a43:	0f b6 c0             	movzx  eax,al
c0015a46:	83 ec 0c             	sub    esp,0xc
c0015a49:	50                   	push   eax
c0015a4a:	e8 fb fb ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a55:	83 f0 01             	xor    eax,0x1
c0015a58:	84 c0                	test   al,al
c0015a5a:	74 4f                	je     c0015aab <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015a5c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a5f:	83 f0 01             	xor    eax,0x1
c0015a62:	84 c0                	test   al,al
c0015a64:	74 45                	je     c0015aab <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015a66:	a0 a0 cf 02 c0       	mov    al,ds:0xc002cfa0
c0015a6b:	84 c0                	test   al,al
c0015a6d:	74 3c                	je     c0015aab <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a72:	66 83 f8 3f          	cmp    ax,0x3f
c0015a76:	76 33                	jbe    c0015aab <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a7b:	66 83 f8 7f          	cmp    ax,0x7f
c0015a7f:	77 2a                	ja     c0015aab <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a84:	88 c2                	mov    dl,al
c0015a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a89:	66 83 f8 5f          	cmp    ax,0x5f
c0015a8d:	76 04                	jbe    c0015a93 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015a8f:	b0 20                	mov    al,0x20
c0015a91:	eb 02                	jmp    c0015a95 <sendKeyboardToken(KeyboardToken)+0x3df>
c0015a93:	b0 00                	mov    al,0x0
c0015a95:	29 c2                	sub    edx,eax
c0015a97:	88 d0                	mov    al,dl
c0015a99:	83 e8 40             	sub    eax,0x40
c0015a9c:	0f b6 c0             	movzx  eax,al
c0015a9f:	83 ec 0c             	sub    esp,0xc
c0015aa2:	50                   	push   eax
c0015aa3:	e8 a2 fb ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aae:	66 3d 00 03          	cmp    ax,0x300
c0015ab2:	75 0f                	jne    c0015ac3 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015ab4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ab7:	83 f0 01             	xor    eax,0x1
c0015aba:	84 c0                	test   al,al
c0015abc:	74 05                	je     c0015ac3 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015abe:	e8 40 b0 ff ff       	call   c0010b03 <doTerminalCycle()>
c0015ac3:	90                   	nop
c0015ac4:	c9                   	leave  
c0015ac5:	c3                   	ret    

c0015ac6 <clearInternalKeybuffer(VgaText*)>:
c0015ac6:	55                   	push   ebp
c0015ac7:	89 e5                	mov    ebp,esp
c0015ac9:	83 ec 08             	sub    esp,0x8
c0015acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acf:	05 34 11 00 00       	add    eax,0x1134
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	50                   	push   eax
c0015ad8:	e8 cb ab fe ff       	call   c00006a8 <strlen>
c0015add:	83 c4 10             	add    esp,0x10
c0015ae0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ae3:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ae9:	83 ec 04             	sub    esp,0x4
c0015aec:	50                   	push   eax
c0015aed:	6a 00                	push   0x0
c0015aef:	52                   	push   edx
c0015af0:	e8 96 ab fe ff       	call   c000068b <memset>
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	90                   	nop
c0015af9:	c9                   	leave  
c0015afa:	c3                   	ret    

c0015afb <readKeyboard(VgaText*, char*, unsigned long)>:
c0015afb:	55                   	push   ebp
c0015afc:	89 e5                	mov    ebp,esp
c0015afe:	83 ec 18             	sub    esp,0x18
c0015b01:	fb                   	sti    
c0015b02:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b09:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b0d:	0f 84 8a 00 00 00    	je     c0015b9d <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b16:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b1c:	84 c0                	test   al,al
c0015b1e:	75 11                	jne    c0015b31 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015b20:	e8 6b 74 00 00       	call   c001cf90 <lockScheduler()>
c0015b25:	e8 a2 77 00 00       	call   c001d2cc <schedule()>
c0015b2a:	e8 63 74 00 00       	call   c001cf92 <unlockScheduler()>
c0015b2f:	eb e2                	jmp    c0015b13 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b34:	8d 50 01             	lea    edx,[eax+0x1]
c0015b37:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b3d:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015b43:	88 10                	mov    BYTE PTR [eax],dl
c0015b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b48:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b4e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b54:	05 34 11 00 00       	add    eax,0x1134
c0015b59:	83 ec 0c             	sub    esp,0xc
c0015b5c:	50                   	push   eax
c0015b5d:	e8 46 ab fe ff       	call   c00006a8 <strlen>
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b68:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b6e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b71:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b74:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b7a:	83 ec 04             	sub    esp,0x4
c0015b7d:	50                   	push   eax
c0015b7e:	51                   	push   ecx
c0015b7f:	52                   	push   edx
c0015b80:	e8 98 aa fe ff       	call   c000061d <memmove>
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b8b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b8e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b92:	0f 85 71 ff ff ff    	jne    c0015b09 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015b98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9b:	eb 03                	jmp    c0015ba0 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015b9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba0:	c9                   	leave  
c0015ba1:	c3                   	ret    

c0015ba2 <Keyboard::Keyboard(char const*)>:
c0015ba2:	83 ec 0c             	sub    esp,0xc
c0015ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ba9:	83 ec 08             	sub    esp,0x8
c0015bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bb0:	50                   	push   eax
c0015bb1:	e8 f0 e2 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	ba f4 9b 02 c0       	mov    edx,0xc0029bf4
c0015bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc2:	89 10                	mov    DWORD PTR [eax],edx
c0015bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015bd2:	c6 05 84 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ce84,0x1
c0015bd9:	90                   	nop
c0015bda:	83 c4 0c             	add    esp,0xc
c0015bdd:	c3                   	ret    

c0015bde <Keyboard::~Keyboard()>:
c0015bde:	83 ec 0c             	sub    esp,0xc
c0015be1:	ba f4 9b 02 c0       	mov    edx,0xc0029bf4
c0015be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bea:	89 10                	mov    DWORD PTR [eax],edx
c0015bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bf0:	83 ec 0c             	sub    esp,0xc
c0015bf3:	50                   	push   eax
c0015bf4:	e8 8f df ff ff       	call   c0013b88 <Device::~Device()>
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	90                   	nop
c0015bfd:	83 c4 0c             	add    esp,0xc
c0015c00:	c3                   	ret    
c0015c01:	90                   	nop

c0015c02 <Keyboard::~Keyboard()>:
c0015c02:	83 ec 0c             	sub    esp,0xc
c0015c05:	83 ec 0c             	sub    esp,0xc
c0015c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c0c:	e8 cd ff ff ff       	call   c0015bde <Keyboard::~Keyboard()>
c0015c11:	83 c4 10             	add    esp,0x10
c0015c14:	83 ec 08             	sub    esp,0x8
c0015c17:	68 5c 01 00 00       	push   0x15c
c0015c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c20:	e8 8a cb ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	83 c4 0c             	add    esp,0xc
c0015c2b:	c3                   	ret    

c0015c2c <LogicalDisk::close(int, int, void*)>:
c0015c2c:	83 c8 ff             	or     eax,0xffffffff
c0015c2f:	c3                   	ret    

c0015c30 <LogicalDisk::~LogicalDisk()>:
c0015c30:	83 ec 0c             	sub    esp,0xc
c0015c33:	ba a4 9c 02 c0       	mov    edx,0xc0029ca4
c0015c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3c:	89 10                	mov    DWORD PTR [eax],edx
c0015c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c42:	83 ec 0c             	sub    esp,0xc
c0015c45:	50                   	push   eax
c0015c46:	e8 3d df ff ff       	call   c0013b88 <Device::~Device()>
c0015c4b:	83 c4 10             	add    esp,0x10
c0015c4e:	90                   	nop
c0015c4f:	83 c4 0c             	add    esp,0xc
c0015c52:	c3                   	ret    
c0015c53:	90                   	nop

c0015c54 <LogicalDisk::~LogicalDisk()>:
c0015c54:	83 ec 0c             	sub    esp,0xc
c0015c57:	83 ec 0c             	sub    esp,0xc
c0015c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c5e:	e8 cd ff ff ff       	call   c0015c30 <LogicalDisk::~LogicalDisk()>
c0015c63:	83 c4 10             	add    esp,0x10
c0015c66:	83 ec 08             	sub    esp,0x8
c0015c69:	68 74 01 00 00       	push   0x174
c0015c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c72:	e8 38 cb ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	83 c4 0c             	add    esp,0xc
c0015c7d:	c3                   	ret    

c0015c7e <LogicalDisk::open(int, int, void*)>:
c0015c7e:	83 ec 18             	sub    esp,0x18
c0015c81:	68 20 9c 02 c0       	push   0xc0029c20
c0015c86:	e8 56 3d 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0015c8b:	83 c8 ff             	or     eax,0xffffffff
c0015c8e:	83 c4 1c             	add    esp,0x1c
c0015c91:	c3                   	ret    

c0015c92 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c92:	53                   	push   ebx
c0015c93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c9f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ca5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015cab:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015cb1:	77 10                	ja     c0015cc3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015cb3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015cb9:	89 d3                	mov    ebx,edx
c0015cbb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015cc1:	72 05                	jb     c0015cc8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015cc3:	83 c8 ff             	or     eax,0xffffffff
c0015cc6:	89 c2                	mov    edx,eax
c0015cc8:	5b                   	pop    ebx
c0015cc9:	c3                   	ret    

c0015cca <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015cca:	56                   	push   esi
c0015ccb:	83 c8 ff             	or     eax,0xffffffff
c0015cce:	53                   	push   ebx
c0015ccf:	89 c2                	mov    edx,eax
c0015cd1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015cd5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015cd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cdd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ce3:	77 27                	ja     c0015d0c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ce5:	89 d8                	mov    eax,ebx
c0015ce7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ced:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015cf3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cf8:	89 c2                	mov    edx,eax
c0015cfa:	73 10                	jae    c0015d0c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cfc:	89 c8                	mov    eax,ecx
c0015cfe:	89 da                	mov    edx,ebx
c0015d00:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d06:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d0c:	5b                   	pop    ebx
c0015d0d:	5e                   	pop    esi
c0015d0e:	c3                   	ret    
c0015d0f:	90                   	nop

c0015d10 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d10:	83 ec 1c             	sub    esp,0x1c
c0015d13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d36:	83 ec 08             	sub    esp,0x8
c0015d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d3d:	50                   	push   eax
c0015d3e:	e8 63 e1 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0015d43:	83 c4 10             	add    esp,0x10
c0015d46:	ba a4 9c 02 c0       	mov    edx,0xc0029ca4
c0015d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4f:	89 10                	mov    DWORD PTR [eax],edx
c0015d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d55:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d60:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d6b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d75:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d81:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d87:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d91:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d98:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d9e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015dac:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dc0:	90                   	nop
c0015dc1:	83 c4 1c             	add    esp,0x1c
c0015dc4:	c3                   	ret    
c0015dc5:	90                   	nop

c0015dc6 <LogicalDisk::assignDriveLetter()>:
c0015dc6:	55                   	push   ebp
c0015dc7:	57                   	push   edi
c0015dc8:	56                   	push   esi
c0015dc9:	53                   	push   ebx
c0015dca:	83 ec 14             	sub    esp,0x14
c0015dcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dd1:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c0015dd7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ddd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015de1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015de7:	8b 3d c4 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c4
c0015ded:	3c 01                	cmp    al,0x1
c0015def:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015df3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015df7:	19 c0                	sbb    eax,eax
c0015df9:	83 e0 02             	and    eax,0x2
c0015dfc:	83 c0 41             	add    eax,0x41
c0015dff:	0f be e8             	movsx  ebp,al
c0015e02:	3c 43                	cmp    al,0x43
c0015e04:	75 10                	jne    c0015e16 <LogicalDisk::assignDriveLetter()+0x50>
c0015e06:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e0d:	75 5d                	jne    c0015e6c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e0f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e14:	75 56                	jne    c0015e6c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e16:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e19:	ba 01 00 00 00       	mov    edx,0x1
c0015e1e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e22:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e26:	d3 e2                	shl    edx,cl
c0015e28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e2c:	89 d7                	mov    edi,edx
c0015e2e:	89 d6                	mov    esi,edx
c0015e30:	c1 ff 1f             	sar    edi,0x1f
c0015e33:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e37:	21 f9                	and    ecx,edi
c0015e39:	09 d1                	or     ecx,edx
c0015e3b:	75 2f                	jne    c0015e6c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e45:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e4b:	09 f2                	or     edx,esi
c0015e4d:	89 15 c0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2c0,edx
c0015e53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e57:	09 fa                	or     edx,edi
c0015e59:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e5d:	89 15 c4 d2 02 c0    	mov    DWORD PTR ds:0xc002d2c4,edx
c0015e63:	89 1c bd e0 d2 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2d20],ebx
c0015e6a:	eb 08                	jmp    c0015e74 <LogicalDisk::assignDriveLetter()+0xae>
c0015e6c:	45                   	inc    ebp
c0015e6d:	40                   	inc    eax
c0015e6e:	3c 5b                	cmp    al,0x5b
c0015e70:	75 90                	jne    c0015e02 <LogicalDisk::assignDriveLetter()+0x3c>
c0015e72:	31 c0                	xor    eax,eax
c0015e74:	83 c4 14             	add    esp,0x14
c0015e77:	5b                   	pop    ebx
c0015e78:	5e                   	pop    esi
c0015e79:	5f                   	pop    edi
c0015e7a:	5d                   	pop    ebp
c0015e7b:	c3                   	ret    

c0015e7c <LogicalDisk::mount()>:
c0015e7c:	56                   	push   esi
c0015e7d:	53                   	push   ebx
c0015e7e:	51                   	push   ecx
c0015e7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e83:	8b 1d 48 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ce48
c0015e89:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e93:	85 db                	test   ebx,ebx
c0015e95:	74 50                	je     c0015ee7 <LogicalDisk::mount()+0x6b>
c0015e97:	e8 df 70 00 00       	call   c001cf7b <getIRQNestingLevel()>
c0015e9c:	52                   	push   edx
c0015e9d:	52                   	push   edx
c0015e9e:	50                   	push   eax
c0015e9f:	68 44 9c 02 c0       	push   0xc0029c44
c0015ea4:	e8 e6 c9 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0015ea9:	83 c4 0c             	add    esp,0xc
c0015eac:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015eb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015eb5:	83 e8 41             	sub    eax,0x41
c0015eb8:	50                   	push   eax
c0015eb9:	56                   	push   esi
c0015eba:	53                   	push   ebx
c0015ebb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ebe:	83 c4 10             	add    esp,0x10
c0015ec1:	84 c0                	test   al,al
c0015ec3:	74 08                	je     c0015ecd <LogicalDisk::mount()+0x51>
c0015ec5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ecb:	eb 1c                	jmp    c0015ee9 <LogicalDisk::mount()+0x6d>
c0015ecd:	e8 a9 70 00 00       	call   c001cf7b <getIRQNestingLevel()>
c0015ed2:	51                   	push   ecx
c0015ed3:	51                   	push   ecx
c0015ed4:	50                   	push   eax
c0015ed5:	68 5f 9c 02 c0       	push   0xc0029c5f
c0015eda:	e8 b0 c9 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0015edf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	eb ac                	jmp    c0015e93 <LogicalDisk::mount()+0x17>
c0015ee7:	31 c0                	xor    eax,eax
c0015ee9:	5a                   	pop    edx
c0015eea:	5b                   	pop    ebx
c0015eeb:	5e                   	pop    esi
c0015eec:	c3                   	ret    
c0015eed:	90                   	nop

c0015eee <LogicalDisk::unmount()>:
c0015eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015efc:	c3                   	ret    
c0015efd:	90                   	nop

c0015efe <LogicalDisk::unassignDriveLetter()>:
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f04:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f0b:	84 c9                	test   cl,cl
c0015f0d:	75 0f                	jne    c0015f1e <LogicalDisk::unassignDriveLetter()+0x20>
c0015f0f:	c7 44 24 0c 7a 9c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029c7a
c0015f17:	5e                   	pop    esi
c0015f18:	5f                   	pop    edi
c0015f19:	e9 c3 3a 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c0015f1e:	83 e9 41             	sub    ecx,0x41
c0015f21:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f28:	b8 01 00 00 00       	mov    eax,0x1
c0015f2d:	c7 04 8d e0 d2 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2d20],0x0
c0015f38:	d3 e0                	shl    eax,cl
c0015f3a:	89 c7                	mov    edi,eax
c0015f3c:	f7 d0                	not    eax
c0015f3e:	c1 ff 1f             	sar    edi,0x1f
c0015f41:	21 05 c0 d2 02 c0    	and    DWORD PTR ds:0xc002d2c0,eax
c0015f47:	89 fe                	mov    esi,edi
c0015f49:	f7 d6                	not    esi
c0015f4b:	21 35 c4 d2 02 c0    	and    DWORD PTR ds:0xc002d2c4,esi
c0015f51:	5e                   	pop    esi
c0015f52:	5f                   	pop    edi
c0015f53:	c3                   	ret    

c0015f54 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f54:	57                   	push   edi
c0015f55:	56                   	push   esi
c0015f56:	53                   	push   ebx
c0015f57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f6d:	77 41                	ja     c0015fb0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f6f:	99                   	cdq    
c0015f70:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f76:	01 c8                	add    eax,ecx
c0015f78:	11 da                	adc    edx,ebx
c0015f7a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f80:	19 d7                	sbb    edi,edx
c0015f82:	72 33                	jb     c0015fb7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f84:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f8a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f94:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f98:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fa4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fa8:	5b                   	pop    ebx
c0015fa9:	5e                   	pop    esi
c0015faa:	5f                   	pop    edi
c0015fab:	e9 f8 09 00 00       	jmp    c00169a8 <VCache::read(unsigned long long, int, void*)>
c0015fb0:	b8 05 00 00 00       	mov    eax,0x5
c0015fb5:	eb 05                	jmp    c0015fbc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015fb7:	b8 07 00 00 00       	mov    eax,0x7
c0015fbc:	5b                   	pop    ebx
c0015fbd:	5e                   	pop    esi
c0015fbe:	5f                   	pop    edi
c0015fbf:	c3                   	ret    

c0015fc0 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015fc0:	57                   	push   edi
c0015fc1:	56                   	push   esi
c0015fc2:	53                   	push   ebx
c0015fc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fcb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fd3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fd9:	77 41                	ja     c001601c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015fdb:	99                   	cdq    
c0015fdc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fe2:	01 c8                	add    eax,ecx
c0015fe4:	11 da                	adc    edx,ebx
c0015fe6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fec:	19 d7                	sbb    edi,edx
c0015fee:	72 33                	jb     c0016023 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ff0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ff6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ffc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016000:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016004:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001600a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016010:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016014:	5b                   	pop    ebx
c0016015:	5e                   	pop    esi
c0016016:	5f                   	pop    edi
c0016017:	e9 a8 08 00 00       	jmp    c00168c4 <VCache::write(unsigned long long, int, void*)>
c001601c:	b8 05 00 00 00       	mov    eax,0x5
c0016021:	eb 05                	jmp    c0016028 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016023:	b8 07 00 00 00       	mov    eax,0x7
c0016028:	5b                   	pop    ebx
c0016029:	5e                   	pop    esi
c001602a:	5f                   	pop    edi
c001602b:	c3                   	ret    

c001602c <Mouse::Mouse(char const*)>:
c001602c:	83 ec 0c             	sub    esp,0xc
c001602f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016033:	83 ec 08             	sub    esp,0x8
c0016036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001603a:	50                   	push   eax
c001603b:	e8 66 de ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0016040:	83 c4 10             	add    esp,0x10
c0016043:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c0016048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604c:	89 10                	mov    DWORD PTR [eax],edx
c001604e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016052:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001605c:	90                   	nop
c001605d:	83 c4 0c             	add    esp,0xc
c0016060:	c3                   	ret    
c0016061:	90                   	nop

c0016062 <Mouse::~Mouse()>:
c0016062:	83 ec 0c             	sub    esp,0xc
c0016065:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c001606a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606e:	89 10                	mov    DWORD PTR [eax],edx
c0016070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016074:	83 ec 0c             	sub    esp,0xc
c0016077:	50                   	push   eax
c0016078:	e8 0b db ff ff       	call   c0013b88 <Device::~Device()>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	90                   	nop
c0016081:	83 c4 0c             	add    esp,0xc
c0016084:	c3                   	ret    
c0016085:	90                   	nop

c0016086 <Mouse::~Mouse()>:
c0016086:	83 ec 0c             	sub    esp,0xc
c0016089:	83 ec 0c             	sub    esp,0xc
c001608c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016090:	e8 cd ff ff ff       	call   c0016062 <Mouse::~Mouse()>
c0016095:	83 c4 10             	add    esp,0x10
c0016098:	83 ec 08             	sub    esp,0x8
c001609b:	68 58 01 00 00       	push   0x158
c00160a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160a4:	e8 06 c7 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00160a9:	83 c4 10             	add    esp,0x10
c00160ac:	83 c4 0c             	add    esp,0xc
c00160af:	c3                   	ret    

c00160b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160b0:	55                   	push   ebp
c00160b1:	57                   	push   edi
c00160b2:	56                   	push   esi
c00160b3:	53                   	push   ebx
c00160b4:	81 ec 28 01 00 00    	sub    esp,0x128
c00160ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00160c1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00160c8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00160cf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00160d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160de:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160e5:	e8 b8 de ff ff       	call   c0013fa2 <Device::getName()>
c00160ea:	5a                   	pop    edx
c00160eb:	59                   	pop    ecx
c00160ec:	50                   	push   eax
c00160ed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160f1:	55                   	push   ebp
c00160f2:	e8 33 a6 fe ff       	call   c000072a <strcpy>
c00160f7:	5b                   	pop    ebx
c00160f8:	58                   	pop    eax
c00160f9:	68 f4 9c 02 c0       	push   0xc0029cf4
c00160fe:	55                   	push   ebp
c00160ff:	e8 dd a6 fe ff       	call   c00007e1 <strcat>
c0016104:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001610b:	e8 da 94 ff ff       	call   c000f5ea <malloc>
c0016110:	83 c4 0c             	add    esp,0xc
c0016113:	89 c3                	mov    ebx,eax
c0016115:	57                   	push   edi
c0016116:	56                   	push   esi
c0016117:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001611b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001611f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016126:	55                   	push   ebp
c0016127:	50                   	push   eax
c0016128:	e8 e3 fb ff ff       	call   c0015d10 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001612d:	83 c4 14             	add    esp,0x14
c0016130:	53                   	push   ebx
c0016131:	e8 90 fc ff ff       	call   c0015dc6 <LogicalDisk::assignDriveLetter()>
c0016136:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016139:	e8 3e fd ff ff       	call   c0015e7c <LogicalDisk::mount()>
c001613e:	58                   	pop    eax
c001613f:	5a                   	pop    edx
c0016140:	53                   	push   ebx
c0016141:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016148:	e8 69 db ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c001614d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016153:	5b                   	pop    ebx
c0016154:	5e                   	pop    esi
c0016155:	5f                   	pop    edi
c0016156:	5d                   	pop    ebp
c0016157:	c3                   	ret    

c0016158 <createPartitionsForDisk(PhysicalDisk*)>:
c0016158:	55                   	push   ebp
c0016159:	57                   	push   edi
c001615a:	56                   	push   esi
c001615b:	53                   	push   ebx
c001615c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016162:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016169:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001616f:	3d 00 02 00 00       	cmp    eax,0x200
c0016174:	74 27                	je     c001619d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016176:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001617c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016182:	83 ec 10             	sub    esp,0x10
c0016185:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016189:	99                   	cdq    
c001618a:	c1 e6 0a             	shl    esi,0xa
c001618d:	52                   	push   edx
c001618e:	89 fd                	mov    ebp,edi
c0016190:	50                   	push   eax
c0016191:	55                   	push   ebp
c0016192:	56                   	push   esi
c0016193:	e8 64 f4 00 00       	call   c00255fc <__udivdi3>
c0016198:	e9 b1 00 00 00       	jmp    c001624e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001619d:	83 ec 0c             	sub    esp,0xc
c00161a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161a2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00161a6:	56                   	push   esi
c00161a7:	6a 01                	push   0x1
c00161a9:	6a 00                	push   0x0
c00161ab:	6a 00                	push   0x0
c00161ad:	53                   	push   ebx
c00161ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00161b1:	83 c4 20             	add    esp,0x20
c00161b4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00161bc:	75 0a                	jne    c00161c8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00161be:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00161c6:	74 2c                	je     c00161f4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00161c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161da:	83 ec 10             	sub    esp,0x10
c00161dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161e1:	89 f7                	mov    edi,esi
c00161e3:	c1 e0 0a             	shl    eax,0xa
c00161e6:	c1 ff 1f             	sar    edi,0x1f
c00161e9:	57                   	push   edi
c00161ea:	56                   	push   esi
c00161eb:	52                   	push   edx
c00161ec:	50                   	push   eax
c00161ed:	e8 0a f4 00 00       	call   c00255fc <__udivdi3>
c00161f2:	eb 5a                	jmp    c001624e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161f4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161fb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016202:	83 e1 7f             	and    ecx,0x7f
c0016205:	83 e0 7f             	and    eax,0x7f
c0016208:	01 c1                	add    ecx,eax
c001620a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016211:	83 e0 7f             	and    eax,0x7f
c0016214:	01 c1                	add    ecx,eax
c0016216:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001621d:	83 e0 7f             	and    eax,0x7f
c0016220:	00 c1                	add    cl,al
c0016222:	74 41                	je     c0016265 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016224:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001622a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016230:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016236:	83 ec 10             	sub    esp,0x10
c0016239:	0f a4 c2 0a          	shld   edx,eax,0xa
c001623d:	89 f7                	mov    edi,esi
c001623f:	c1 e0 0a             	shl    eax,0xa
c0016242:	c1 ff 1f             	sar    edi,0x1f
c0016245:	57                   	push   edi
c0016246:	56                   	push   esi
c0016247:	52                   	push   edx
c0016248:	50                   	push   eax
c0016249:	e8 ae f3 00 00       	call   c00255fc <__udivdi3>
c001624e:	83 c4 14             	add    esp,0x14
c0016251:	52                   	push   edx
c0016252:	50                   	push   eax
c0016253:	6a 00                	push   0x0
c0016255:	6a 00                	push   0x0
c0016257:	53                   	push   ebx
c0016258:	e8 53 fe ff ff       	call   c00160b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001625d:	83 c4 20             	add    esp,0x20
c0016260:	e9 79 01 00 00       	jmp    c00163de <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016265:	89 f0                	mov    eax,esi
c0016267:	31 f6                	xor    esi,esi
c0016269:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016270:	75 02                	jne    c0016274 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016272:	89 f1                	mov    ecx,esi
c0016274:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001627b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016282:	c1 e2 08             	shl    edx,0x8
c0016285:	c1 e7 10             	shl    edi,0x10
c0016288:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016290:	09 fa                	or     edx,edi
c0016292:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001629a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00162a1:	83 c0 10             	add    eax,0x10
c00162a4:	09 fa                	or     edx,edi
c00162a6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00162ad:	c1 e7 18             	shl    edi,0x18
c00162b0:	09 fa                	or     edx,edi
c00162b2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00162b9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00162bd:	c1 e7 10             	shl    edi,0x10
c00162c0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00162c7:	c1 e2 08             	shl    edx,0x8
c00162ca:	09 fa                	or     edx,edi
c00162cc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00162d3:	09 fa                	or     edx,edi
c00162d5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162dc:	c1 e7 18             	shl    edi,0x18
c00162df:	09 fa                	or     edx,edi
c00162e1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162e5:	46                   	inc    esi
c00162e6:	83 fe 04             	cmp    esi,0x4
c00162e9:	0f 85 7a ff ff ff    	jne    c0016269 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f3:	83 f0 01             	xor    eax,0x1
c00162f6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162fa:	75 57                	jne    c0016353 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016300:	83 f0 01             	xor    eax,0x1
c0016303:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016307:	75 4a                	jne    c0016353 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016309:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001630d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016315:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001631d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016323:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016329:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001632f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016333:	89 f7                	mov    edi,esi
c0016335:	c1 e0 0a             	shl    eax,0xa
c0016338:	c1 ff 1f             	sar    edi,0x1f
c001633b:	57                   	push   edi
c001633c:	56                   	push   esi
c001633d:	52                   	push   edx
c001633e:	50                   	push   eax
c001633f:	e8 b8 f2 00 00       	call   c00255fc <__udivdi3>
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001634b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001634f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016353:	84 c9                	test   cl,cl
c0016355:	74 53                	je     c00163aa <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016357:	0f b6 c9             	movzx  ecx,cl
c001635a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016362:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016366:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001636a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001636e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016372:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016376:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001637a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001637e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016386:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001638a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001638e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016392:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016396:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001639a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001639e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163a2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00163a6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00163aa:	31 ed                	xor    ebp,ebp
c00163ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00163b0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00163b4:	89 f8                	mov    eax,edi
c00163b6:	09 f0                	or     eax,esi
c00163b8:	74 1e                	je     c00163d8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00163be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00163c2:	89 d1                	mov    ecx,edx
c00163c4:	09 c1                	or     ecx,eax
c00163c6:	74 10                	je     c00163d8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	57                   	push   edi
c00163cc:	56                   	push   esi
c00163cd:	52                   	push   edx
c00163ce:	50                   	push   eax
c00163cf:	53                   	push   ebx
c00163d0:	e8 db fc ff ff       	call   c00160b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163d5:	83 c4 20             	add    esp,0x20
c00163d8:	45                   	inc    ebp
c00163d9:	83 fd 04             	cmp    ebp,0x4
c00163dc:	75 ce                	jne    c00163ac <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163de:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163e4:	5b                   	pop    ebx
c00163e5:	5e                   	pop    esi
c00163e6:	5f                   	pop    edi
c00163e7:	5d                   	pop    ebp
c00163e8:	c3                   	ret    
c00163e9:	90                   	nop

c00163ea <Serial::Serial(char const*)>:
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f1:	83 ec 08             	sub    esp,0x8
c00163f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f8:	50                   	push   eax
c00163f9:	e8 a8 da ff ff       	call   c0013ea6 <Device::Device(char const*)>
c00163fe:	83 c4 10             	add    esp,0x10
c0016401:	ba 08 9d 02 c0       	mov    edx,0xc0029d08
c0016406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640a:	89 10                	mov    DWORD PTR [eax],edx
c001640c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016410:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001641a:	90                   	nop
c001641b:	83 c4 0c             	add    esp,0xc
c001641e:	c3                   	ret    
c001641f:	90                   	nop

c0016420 <Serial::~Serial()>:
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	ba 08 9d 02 c0       	mov    edx,0xc0029d08
c0016428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642c:	89 10                	mov    DWORD PTR [eax],edx
c001642e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	50                   	push   eax
c0016436:	e8 4d d7 ff ff       	call   c0013b88 <Device::~Device()>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	90                   	nop
c001643f:	83 c4 0c             	add    esp,0xc
c0016442:	c3                   	ret    
c0016443:	90                   	nop

c0016444 <Serial::~Serial()>:
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	83 ec 0c             	sub    esp,0xc
c001644a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644e:	e8 cd ff ff ff       	call   c0016420 <Serial::~Serial()>
c0016453:	83 c4 10             	add    esp,0x10
c0016456:	83 ec 08             	sub    esp,0x8
c0016459:	68 58 01 00 00       	push   0x158
c001645e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016462:	e8 48 c3 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	83 c4 0c             	add    esp,0xc
c001646d:	c3                   	ret    

c001646e <Timer::Timer(char const*)>:
c001646e:	83 ec 0c             	sub    esp,0xc
c0016471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016475:	83 ec 08             	sub    esp,0x8
c0016478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647c:	50                   	push   eax
c001647d:	e8 24 da ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0016482:	83 c4 10             	add    esp,0x10
c0016485:	ba 4c 9d 02 c0       	mov    edx,0xc0029d4c
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	89 10                	mov    DWORD PTR [eax],edx
c0016490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016494:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <Timer::~Timer()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	ba 4c 9d 02 c0       	mov    edx,0xc0029d4c
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	89 10                	mov    DWORD PTR [eax],edx
c00164b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b6:	83 ec 0c             	sub    esp,0xc
c00164b9:	50                   	push   eax
c00164ba:	e8 c9 d6 ff ff       	call   c0013b88 <Device::~Device()>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	90                   	nop
c00164c3:	83 c4 0c             	add    esp,0xc
c00164c6:	c3                   	ret    
c00164c7:	90                   	nop

c00164c8 <Timer::~Timer()>:
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	83 ec 0c             	sub    esp,0xc
c00164ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d2:	e8 cd ff ff ff       	call   c00164a4 <Timer::~Timer()>
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	83 ec 08             	sub    esp,0x8
c00164dd:	68 5c 01 00 00       	push   0x15c
c00164e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e6:	e8 c4 c2 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	83 c4 0c             	add    esp,0xc
c00164f1:	c3                   	ret    

c00164f2 <Timer::read()>:
c00164f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164fc:	c3                   	ret    

c00164fd <timerHandler(unsigned long long)>:
c00164fd:	55                   	push   ebp
c00164fe:	57                   	push   edi
c00164ff:	56                   	push   esi
c0016500:	53                   	push   ebx
c0016501:	83 ec 0c             	sub    esp,0xc
c0016504:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016508:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001650c:	01 35 50 d3 02 c0    	add    DWORD PTR ds:0xc002d350,esi
c0016512:	11 3d 54 d3 02 c0    	adc    DWORD PTR ds:0xc002d354,edi
c0016518:	80 3d cd cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cccd,0x0
c001651f:	0f 84 07 01 00 00    	je     c001662c <timerHandler(unsigned long long)+0x12f>
c0016525:	e8 8d 6a 00 00       	call   c001cfb7 <lockStuff()>
c001652a:	83 ec 0c             	sub    esp,0xc
c001652d:	68 fc e1 02 c0       	push   0xc002e1fc
c0016532:	e8 37 11 01 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016537:	c7 04 24 fc e1 02 c0 	mov    DWORD PTR [esp],0xc002e1fc
c001653e:	89 c3                	mov    ebx,eax
c0016540:	e8 31 11 01 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	84 c0                	test   al,al
c001654a:	74 60                	je     c00165ac <timerHandler(unsigned long long)+0xaf>
c001654c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016552:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016555:	85 c0                	test   eax,eax
c0016557:	0f 85 91 00 00 00    	jne    c00165ee <timerHandler(unsigned long long)+0xf1>
c001655d:	e9 be 00 00 00       	jmp    c0016620 <timerHandler(unsigned long long)+0x123>
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	55                   	push   ebp
c0016566:	e8 3d 70 00 00       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	39 eb                	cmp    ebx,ebp
c0016570:	75 12                	jne    c0016584 <timerHandler(unsigned long long)+0x87>
c0016572:	83 ec 0c             	sub    esp,0xc
c0016575:	68 fc e1 02 c0       	push   0xc002e1fc
c001657a:	e8 ef 10 01 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001657f:	89 c3                	mov    ebx,eax
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	83 ec 0c             	sub    esp,0xc
c0016587:	68 fc e1 02 c0       	push   0xc002e1fc
c001658c:	e8 e5 10 01 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016591:	83 c4 10             	add    esp,0x10
c0016594:	84 c0                	test   al,al
c0016596:	75 b4                	jne    c001654c <timerHandler(unsigned long long)+0x4f>
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 fc e1 02 c0       	push   0xc002e1fc
c00165a0:	e8 c9 10 01 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	39 d8                	cmp    eax,ebx
c00165aa:	74 a0                	je     c001654c <timerHandler(unsigned long long)+0x4f>
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	68 fc e1 02 c0       	push   0xc002e1fc
c00165b4:	e8 b5 10 01 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165b9:	c7 04 24 fc e1 02 c0 	mov    DWORD PTR [esp],0xc002e1fc
c00165c0:	89 c5                	mov    ebp,eax
c00165c2:	e8 cb 10 01 00       	call   c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00165c7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00165ca:	83 c4 10             	add    esp,0x10
c00165cd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00165d0:	39 15 50 d3 02 c0    	cmp    DWORD PTR ds:0xc002d350,edx
c00165d6:	a1 54 d3 02 c0       	mov    eax,ds:0xc002d354
c00165db:	19 c8                	sbb    eax,ecx
c00165dd:	73 83                	jae    c0016562 <timerHandler(unsigned long long)+0x65>
c00165df:	50                   	push   eax
c00165e0:	50                   	push   eax
c00165e1:	55                   	push   ebp
c00165e2:	68 fc e1 02 c0       	push   0xc002e1fc
c00165e7:	e8 54 11 01 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165ec:	eb 93                	jmp    c0016581 <timerHandler(unsigned long long)+0x84>
c00165ee:	80 3d cc cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cccc,0x0
c00165f5:	74 29                	je     c0016620 <timerHandler(unsigned long long)+0x123>
c00165f7:	39 c6                	cmp    esi,eax
c00165f9:	bb 00 00 00 00       	mov    ebx,0x0
c00165fe:	19 df                	sbb    edi,ebx
c0016600:	72 19                	jb     c001661b <timerHandler(unsigned long long)+0x11e>
c0016602:	e8 89 69 00 00       	call   c001cf90 <lockScheduler()>
c0016607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001660c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001660f:	e8 b8 6c 00 00       	call   c001d2cc <schedule()>
c0016614:	e8 79 69 00 00       	call   c001cf92 <unlockScheduler()>
c0016619:	eb 05                	jmp    c0016620 <timerHandler(unsigned long long)+0x123>
c001661b:	29 f0                	sub    eax,esi
c001661d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016620:	83 c4 0c             	add    esp,0xc
c0016623:	5b                   	pop    ebx
c0016624:	5e                   	pop    esi
c0016625:	5f                   	pop    edi
c0016626:	5d                   	pop    ebp
c0016627:	e9 25 6d 00 00       	jmp    c001d351 <unlockStuff()>
c001662c:	83 c4 0c             	add    esp,0xc
c001662f:	5b                   	pop    ebx
c0016630:	5e                   	pop    esi
c0016631:	5f                   	pop    edi
c0016632:	5d                   	pop    ebp
c0016633:	c3                   	ret    

c0016634 <setupTimer(int)>:
c0016634:	57                   	push   edi
c0016635:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001663a:	56                   	push   esi
c001663b:	53                   	push   ebx
c001663c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016640:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016646:	83 ec 0c             	sub    esp,0xc
c0016649:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001664f:	e8 4e d9 ff ff       	call   c0013fa2 <Device::getName()>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001665a:	0f 85 8d 00 00 00    	jne    c00166ed <setupTimer(int)+0xb9>
c0016660:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0016665:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001666c:	74 7f                	je     c00166ed <setupTimer(int)+0xb9>
c001666e:	83 ec 0c             	sub    esp,0xc
c0016671:	68 5c 01 00 00       	push   0x15c
c0016676:	e8 6f 8f ff ff       	call   c000f5ea <malloc>
c001667b:	89 04 24             	mov    DWORD PTR [esp],eax
c001667e:	89 c3                	mov    ebx,eax
c0016680:	e8 53 eb 00 00       	call   c00251d8 <PIT::PIT()>
c0016685:	59                   	pop    ecx
c0016686:	5f                   	pop    edi
c0016687:	53                   	push   ebx
c0016688:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c001668e:	e8 23 d6 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0016693:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016695:	6a 00                	push   0x0
c0016697:	6a 00                	push   0x0
c0016699:	56                   	push   esi
c001669a:	53                   	push   ebx
c001669b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001669e:	83 c4 14             	add    esp,0x14
c00166a1:	68 60 01 00 00       	push   0x160
c00166a6:	e8 3f 8f ff ff       	call   c000f5ea <malloc>
c00166ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00166ae:	89 c7                	mov    edi,eax
c00166b0:	e8 d3 e9 00 00       	call   c0025088 <APICTimer::APICTimer()>
c00166b5:	6a 00                	push   0x0
c00166b7:	6a 00                	push   0x0
c00166b9:	56                   	push   esi
c00166ba:	57                   	push   edi
c00166bb:	e8 ca e8 00 00       	call   c0024f8a <APICTimer::open(int, int, void*)>
c00166c0:	83 c4 20             	add    esp,0x20
c00166c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166c5:	6a 00                	push   0x0
c00166c7:	6a 00                	push   0x0
c00166c9:	6a 00                	push   0x0
c00166cb:	53                   	push   ebx
c00166cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166cf:	58                   	pop    eax
c00166d0:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00166d5:	5a                   	pop    edx
c00166d6:	57                   	push   edi
c00166d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166dd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166e3:	e8 ce d5 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c00166e8:	83 c4 10             	add    esp,0x10
c00166eb:	eb 33                	jmp    c0016720 <setupTimer(int)+0xec>
c00166ed:	83 ec 0c             	sub    esp,0xc
c00166f0:	68 5c 01 00 00       	push   0x15c
c00166f5:	e8 f0 8e ff ff       	call   c000f5ea <malloc>
c00166fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00166fd:	89 c3                	mov    ebx,eax
c00166ff:	e8 d4 ea 00 00       	call   c00251d8 <PIT::PIT()>
c0016704:	58                   	pop    eax
c0016705:	5a                   	pop    edx
c0016706:	53                   	push   ebx
c0016707:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c001670d:	e8 a4 d5 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0016712:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016714:	6a 00                	push   0x0
c0016716:	6a 00                	push   0x0
c0016718:	56                   	push   esi
c0016719:	53                   	push   ebx
c001671a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001671d:	83 c4 20             	add    esp,0x20
c0016720:	89 d8                	mov    eax,ebx
c0016722:	5b                   	pop    ebx
c0016723:	5e                   	pop    esi
c0016724:	5f                   	pop    edi
c0016725:	c3                   	ret    

c0016726 <VCache::VCache(PhysicalDisk*)>:
c0016726:	53                   	push   ebx
c0016727:	83 ec 18             	sub    esp,0x18
c001672a:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c001672f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016733:	89 10                	mov    DWORD PTR [eax],edx
c0016735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016739:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016744:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001674b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016756:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001675d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016761:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016768:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001676f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016773:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001677a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016782:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016791:	e8 54 8e ff ff       	call   c000f5ea <malloc>
c0016796:	83 c4 10             	add    esp,0x10
c0016799:	89 c3                	mov    ebx,eax
c001679b:	83 ec 0c             	sub    esp,0xc
c001679e:	53                   	push   ebx
c001679f:	e8 0c 69 00 00       	call   c001d0b0 <Mutex::Mutex()>
c00167a4:	83 c4 10             	add    esp,0x10
c00167a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00167b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167bd:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00167c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00167ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00167d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167d9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00167df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00167e9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00167ec:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00167ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016801:	c1 e0 06             	shl    eax,0x6
c0016804:	83 ec 0c             	sub    esp,0xc
c0016807:	50                   	push   eax
c0016808:	e8 dd 8d ff ff       	call   c000f5ea <malloc>
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	89 c2                	mov    edx,eax
c0016812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016816:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016819:	90                   	nop
c001681a:	83 c4 18             	add    esp,0x18
c001681d:	5b                   	pop    ebx
c001681e:	c3                   	ret    
c001681f:	90                   	nop

c0016820 <VCache::writeWriteBuffer()>:
c0016820:	53                   	push   ebx
c0016821:	83 ec 14             	sub    esp,0x14
c0016824:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016828:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001682b:	8b 10                	mov    edx,DWORD PTR [eax]
c001682d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016830:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016833:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016839:	50                   	push   eax
c001683a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001683d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016844:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001684b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001684f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016856:	83 c4 28             	add    esp,0x28
c0016859:	5b                   	pop    ebx
c001685a:	c3                   	ret    
c001685b:	90                   	nop

c001685c <VCache::~VCache()>:
c001685c:	83 ec 0c             	sub    esp,0xc
c001685f:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c0016864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016868:	89 10                	mov    DWORD PTR [eax],edx
c001686a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016871:	84 c0                	test   al,al
c0016873:	74 0f                	je     c0016884 <VCache::~VCache()+0x28>
c0016875:	83 ec 0c             	sub    esp,0xc
c0016878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687c:	e8 9f ff ff ff       	call   c0016820 <VCache::writeWriteBuffer()>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016888:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001688b:	83 ec 0c             	sub    esp,0xc
c001688e:	50                   	push   eax
c001688f:	e8 66 8d ff ff       	call   c000f5fa <free>
c0016894:	83 c4 10             	add    esp,0x10
c0016897:	90                   	nop
c0016898:	83 c4 0c             	add    esp,0xc
c001689b:	c3                   	ret    

c001689c <VCache::~VCache()>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 b1 ff ff ff       	call   c001685c <VCache::~VCache()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	6a 30                	push   0x30
c00168b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b7:	e8 f3 be ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00168bc:	83 c4 10             	add    esp,0x10
c00168bf:	83 c4 0c             	add    esp,0xc
c00168c2:	c3                   	ret    
c00168c3:	90                   	nop

c00168c4 <VCache::write(unsigned long long, int, void*)>:
c00168c4:	55                   	push   ebp
c00168c5:	57                   	push   edi
c00168c6:	56                   	push   esi
c00168c7:	53                   	push   ebx
c00168c8:	83 ec 28             	sub    esp,0x28
c00168cb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00168cf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00168d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00168d7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00168db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168de:	e8 2f 6c 00 00       	call   c001d512 <Semaphore::acquire()>
c00168e3:	83 c4 10             	add    esp,0x10
c00168e6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168ea:	74 66                	je     c0016952 <VCache::write(unsigned long long, int, void*)+0x8e>
c00168ec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00168ef:	99                   	cdq    
c00168f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168f4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00168f7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00168fa:	89 c1                	mov    ecx,eax
c00168fc:	89 d0                	mov    eax,edx
c00168fe:	31 f1                	xor    ecx,esi
c0016900:	31 f8                	xor    eax,edi
c0016902:	89 ca                	mov    edx,ecx
c0016904:	09 c2                	or     edx,eax
c0016906:	75 3e                	jne    c0016946 <VCache::write(unsigned long long, int, void*)+0x82>
c0016908:	83 fd 01             	cmp    ebp,0x1
c001690b:	75 39                	jne    c0016946 <VCache::write(unsigned long long, int, void*)+0x82>
c001690d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016910:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016916:	51                   	push   ecx
c0016917:	50                   	push   eax
c0016918:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001691c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016920:	0f af c8             	imul   ecx,eax
c0016923:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016926:	51                   	push   ecx
c0016927:	e8 29 9d fe ff       	call   c0000655 <memcpy>
c001692c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001692f:	83 c4 10             	add    esp,0x10
c0016932:	40                   	inc    eax
c0016933:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016936:	83 f8 40             	cmp    eax,0x40
c0016939:	75 57                	jne    c0016992 <VCache::write(unsigned long long, int, void*)+0xce>
c001693b:	83 ec 0c             	sub    esp,0xc
c001693e:	53                   	push   ebx
c001693f:	e8 dc fe ff ff       	call   c0016820 <VCache::writeWriteBuffer()>
c0016944:	eb 34                	jmp    c001697a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016946:	83 ec 0c             	sub    esp,0xc
c0016949:	53                   	push   ebx
c001694a:	e8 d1 fe ff ff       	call   c0016820 <VCache::writeWriteBuffer()>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016955:	83 fd 3f             	cmp    ebp,0x3f
c0016958:	7f 25                	jg     c001697f <VCache::write(unsigned long long, int, void*)+0xbb>
c001695a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001695d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016960:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016963:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016967:	52                   	push   edx
c0016968:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001696e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016972:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016975:	e8 db 9c fe ff       	call   c0000655 <memcpy>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	eb 13                	jmp    c0016992 <VCache::write(unsigned long long, int, void*)+0xce>
c001697f:	83 ec 0c             	sub    esp,0xc
c0016982:	8b 10                	mov    edx,DWORD PTR [eax]
c0016984:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016988:	55                   	push   ebp
c0016989:	57                   	push   edi
c001698a:	56                   	push   esi
c001698b:	50                   	push   eax
c001698c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001698f:	83 c4 20             	add    esp,0x20
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016998:	e8 23 71 00 00       	call   c001dac0 <Semaphore::release()>
c001699d:	83 c4 2c             	add    esp,0x2c
c00169a0:	31 c0                	xor    eax,eax
c00169a2:	5b                   	pop    ebx
c00169a3:	5e                   	pop    esi
c00169a4:	5f                   	pop    edi
c00169a5:	5d                   	pop    ebp
c00169a6:	c3                   	ret    
c00169a7:	90                   	nop

c00169a8 <VCache::read(unsigned long long, int, void*)>:
c00169a8:	57                   	push   edi
c00169a9:	56                   	push   esi
c00169aa:	53                   	push   ebx
c00169ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00169b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00169b7:	83 ec 0c             	sub    esp,0xc
c00169ba:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169bd:	e8 50 6b 00 00       	call   c001d512 <Semaphore::acquire()>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169c9:	74 0c                	je     c00169d7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	53                   	push   ebx
c00169cf:	e8 4c fe ff ff       	call   c0016820 <VCache::writeWriteBuffer()>
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169da:	83 ec 0c             	sub    esp,0xc
c00169dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00169df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e7:	57                   	push   edi
c00169e8:	56                   	push   esi
c00169e9:	50                   	push   eax
c00169ea:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00169ed:	83 c4 14             	add    esp,0x14
c00169f0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169f3:	e8 c8 70 00 00       	call   c001dac0 <Semaphore::release()>
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	31 c0                	xor    eax,eax
c00169fd:	5b                   	pop    ebx
c00169fe:	5e                   	pop    esi
c00169ff:	5f                   	pop    edi
c0016a00:	c3                   	ret    
c0016a01:	90                   	nop

c0016a02 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a02:	55                   	push   ebp
c0016a03:	57                   	push   edi
c0016a04:	56                   	push   esi
c0016a05:	53                   	push   ebx
c0016a06:	83 ec 1c             	sub    esp,0x1c
c0016a09:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a11:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a15:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a21:	01 df                	add    edi,ebx
c0016a23:	39 fb                	cmp    ebx,edi
c0016a25:	7d 1f                	jge    c0016a46 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a27:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a2b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a2f:	7d 12                	jge    c0016a43 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a31:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a37:	53                   	push   ebx
c0016a38:	55                   	push   ebp
c0016a39:	45                   	inc    ebp
c0016a3a:	56                   	push   esi
c0016a3b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	eb e8                	jmp    c0016a2b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016a43:	43                   	inc    ebx
c0016a44:	eb dd                	jmp    c0016a23 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016a46:	83 c4 1c             	add    esp,0x1c
c0016a49:	5b                   	pop    ebx
c0016a4a:	5e                   	pop    esi
c0016a4b:	5f                   	pop    edi
c0016a4c:	5d                   	pop    ebp
c0016a4d:	c3                   	ret    

c0016a4e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016a4e:	55                   	push   ebp
c0016a4f:	57                   	push   edi
c0016a50:	31 ff                	xor    edi,edi
c0016a52:	56                   	push   esi
c0016a53:	53                   	push   ebx
c0016a54:	83 ec 1c             	sub    esp,0x1c
c0016a57:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016a5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016a5f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016a66:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016a6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a6f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016a73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016a77:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016a7a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016a7e:	01 f9                	add    ecx,edi
c0016a80:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016a84:	7d 2f                	jge    c0016ab5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016a86:	31 f6                	xor    esi,esi
c0016a88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016a8c:	01 f2                	add    edx,esi
c0016a8e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016a92:	7d 1a                	jge    c0016aae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016a94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016a97:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016a9a:	46                   	inc    esi
c0016a9b:	51                   	push   ecx
c0016a9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016aa0:	52                   	push   edx
c0016aa1:	55                   	push   ebp
c0016aa2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016aac:	eb da                	jmp    c0016a88 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016aae:	47                   	inc    edi
c0016aaf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ab3:	eb c5                	jmp    c0016a7a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ab5:	83 c4 1c             	add    esp,0x1c
c0016ab8:	5b                   	pop    ebx
c0016ab9:	5e                   	pop    esi
c0016aba:	5f                   	pop    edi
c0016abb:	5d                   	pop    ebp
c0016abc:	c3                   	ret    
c0016abd:	90                   	nop

c0016abe <Video::blit(unsigned int*, int, int, int, int)>:
c0016abe:	55                   	push   ebp
c0016abf:	57                   	push   edi
c0016ac0:	56                   	push   esi
c0016ac1:	53                   	push   ebx
c0016ac2:	83 ec 1c             	sub    esp,0x1c
c0016ac5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ac9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016acd:	85 c0                	test   eax,eax
c0016acf:	79 02                	jns    c0016ad3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016ad1:	31 c0                	xor    eax,eax
c0016ad3:	c1 e0 02             	shl    eax,0x2
c0016ad6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ada:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ade:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ae2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016ae6:	39 d8                	cmp    eax,ebx
c0016ae8:	7e 49                	jle    c0016b33 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016aea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016af0:	7c 41                	jl     c0016b33 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016af2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016af6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016afa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016afe:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b02:	39 f9                	cmp    ecx,edi
c0016b04:	7e 22                	jle    c0016b28 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b06:	83 c5 04             	add    ebp,0x4
c0016b09:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b0f:	7c 14                	jl     c0016b25 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b11:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b13:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b1a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b1e:	56                   	push   esi
c0016b1f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b22:	83 c4 10             	add    esp,0x10
c0016b25:	47                   	inc    edi
c0016b26:	eb d2                	jmp    c0016afa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b2c:	43                   	inc    ebx
c0016b2d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b31:	eb ab                	jmp    c0016ade <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b33:	83 c4 1c             	add    esp,0x1c
c0016b36:	5b                   	pop    ebx
c0016b37:	5e                   	pop    esi
c0016b38:	5f                   	pop    edi
c0016b39:	5d                   	pop    ebp
c0016b3a:	c3                   	ret    
c0016b3b:	90                   	nop

c0016b3c <Video::clearScreen(unsigned int)>:
c0016b3c:	57                   	push   edi
c0016b3d:	56                   	push   esi
c0016b3e:	53                   	push   ebx
c0016b3f:	31 db                	xor    ebx,ebx
c0016b41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b45:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b4b:	7e 1f                	jle    c0016b6c <Video::clearScreen(unsigned int)+0x30>
c0016b4d:	31 ff                	xor    edi,edi
c0016b4f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b55:	7e 12                	jle    c0016b69 <Video::clearScreen(unsigned int)+0x2d>
c0016b57:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b5d:	53                   	push   ebx
c0016b5e:	57                   	push   edi
c0016b5f:	47                   	inc    edi
c0016b60:	56                   	push   esi
c0016b61:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b64:	83 c4 10             	add    esp,0x10
c0016b67:	eb e6                	jmp    c0016b4f <Video::clearScreen(unsigned int)+0x13>
c0016b69:	43                   	inc    ebx
c0016b6a:	eb d9                	jmp    c0016b45 <Video::clearScreen(unsigned int)+0x9>
c0016b6c:	5b                   	pop    ebx
c0016b6d:	5e                   	pop    esi
c0016b6e:	5f                   	pop    edi
c0016b6f:	c3                   	ret    

c0016b70 <Video::putpixel(int, int, unsigned int)>:
c0016b70:	c7 44 24 04 84 9d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029d84
c0016b78:	e9 64 2e 00 00       	jmp    c00199e1 <Krnl::panic(char const*)>
c0016b7d:	90                   	nop

c0016b7e <Video::Video(char const*)>:
c0016b7e:	83 ec 0c             	sub    esp,0xc
c0016b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b85:	83 ec 08             	sub    esp,0x8
c0016b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b8c:	50                   	push   eax
c0016b8d:	e8 14 d3 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	ba 08 9e 02 c0       	mov    edx,0xc0029e08
c0016b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b9e:	89 10                	mov    DWORD PTR [eax],edx
c0016ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016bae:	90                   	nop
c0016baf:	83 c4 0c             	add    esp,0xc
c0016bb2:	c3                   	ret    
c0016bb3:	90                   	nop

c0016bb4 <Video::~Video()>:
c0016bb4:	83 ec 0c             	sub    esp,0xc
c0016bb7:	ba 08 9e 02 c0       	mov    edx,0xc0029e08
c0016bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc0:	89 10                	mov    DWORD PTR [eax],edx
c0016bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc6:	83 ec 0c             	sub    esp,0xc
c0016bc9:	50                   	push   eax
c0016bca:	e8 b9 cf ff ff       	call   c0013b88 <Device::~Device()>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	90                   	nop
c0016bd3:	83 c4 0c             	add    esp,0xc
c0016bd6:	c3                   	ret    
c0016bd7:	90                   	nop

c0016bd8 <Video::~Video()>:
c0016bd8:	83 ec 0c             	sub    esp,0xc
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be2:	e8 cd ff ff ff       	call   c0016bb4 <Video::~Video()>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	83 ec 08             	sub    esp,0x8
c0016bed:	68 64 01 00 00       	push   0x164
c0016bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf6:	e8 b4 bb ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	83 c4 0c             	add    esp,0xc
c0016c01:	c3                   	ret    

c0016c02 <Video::isMonochrome()>:
c0016c02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c06:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c0c:	c3                   	ret    
c0016c0d:	90                   	nop

c0016c0e <Video::getWidth()>:
c0016c0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <Video::getHeight()>:
c0016c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c1e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c24:	c3                   	ret    
c0016c25:	90                   	nop

c0016c26 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c26:	55                   	push   ebp
c0016c27:	57                   	push   edi
c0016c28:	56                   	push   esi
c0016c29:	53                   	push   ebx
c0016c2a:	83 ec 2c             	sub    esp,0x2c
c0016c2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c31:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c35:	83 f8 01             	cmp    eax,0x1
c0016c38:	19 c9                	sbb    ecx,ecx
c0016c3a:	31 db                	xor    ebx,ebx
c0016c3c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c40:	89 cd                	mov    ebp,ecx
c0016c42:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016c4a:	f7 d5                	not    ebp
c0016c4c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016c52:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016c56:	01 d8                	add    eax,ebx
c0016c58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c5c:	56                   	push   esi
c0016c5d:	e8 b8 ff ff ff       	call   c0016c1a <Video::getHeight()>
c0016c62:	59                   	pop    ecx
c0016c63:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016c67:	7e 70                	jle    c0016cd9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016c69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016c6d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016c71:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016c74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c78:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016c7c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016c83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c87:	89 f8                	mov    eax,edi
c0016c89:	83 c0 20             	add    eax,0x20
c0016c8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c90:	56                   	push   esi
c0016c91:	e8 78 ff ff ff       	call   c0016c0e <Video::getWidth()>
c0016c96:	5a                   	pop    edx
c0016c97:	39 c7                	cmp    edi,eax
c0016c99:	7d 34                	jge    c0016ccf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016c9b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ca0:	74 05                	je     c0016ca7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ca2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ca4:	55                   	push   ebp
c0016ca5:	eb 0d                	jmp    c0016cb4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ca7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016cac:	74 12                	je     c0016cc0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016cae:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cb4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cb8:	57                   	push   edi
c0016cb9:	56                   	push   esi
c0016cba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016cc4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016cc8:	47                   	inc    edi
c0016cc9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ccd:	75 c1                	jne    c0016c90 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016ccf:	43                   	inc    ebx
c0016cd0:	83 fb 20             	cmp    ebx,0x20
c0016cd3:	0f 85 79 ff ff ff    	jne    c0016c52 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016cd9:	83 c4 2c             	add    esp,0x2c
c0016cdc:	5b                   	pop    ebx
c0016cdd:	5e                   	pop    esi
c0016cde:	5f                   	pop    edi
c0016cdf:	5d                   	pop    ebp
c0016ce0:	c3                   	ret    
c0016ce1:	90                   	nop

c0016ce2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016ce2:	55                   	push   ebp
c0016ce3:	57                   	push   edi
c0016ce4:	56                   	push   esi
c0016ce5:	53                   	push   ebx
c0016ce6:	83 ec 28             	sub    esp,0x28
c0016ce9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ced:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016cf1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016cf5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016cf9:	c1 e7 08             	shl    edi,0x8
c0016cfc:	01 c7                	add    edi,eax
c0016cfe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d02:	c1 e0 08             	shl    eax,0x8
c0016d05:	01 d0                	add    eax,edx
c0016d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d0f:	0f af c7             	imul   eax,edi
c0016d12:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d19:	50                   	push   eax
c0016d1a:	e8 cb 88 ff ff       	call   c000f5ea <malloc>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	89 c5                	mov    ebp,eax
c0016d24:	85 c0                	test   eax,eax
c0016d26:	75 15                	jne    c0016d3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	68 a5 9d 02 c0       	push   0xc0029da5
c0016d30:	e8 5a bb ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	e9 1c 01 00 00       	jmp    c0016e59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d3d:	be 12 00 00 00       	mov    esi,0x12
c0016d42:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016d46:	74 11                	je     c0016d59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016d48:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016d4c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016d50:	c1 fe 03             	sar    esi,0x3
c0016d53:	0f af f0             	imul   esi,eax
c0016d56:	83 c6 12             	add    esi,0x12
c0016d59:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016d5d:	74 04                	je     c0016d63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016d5f:	85 ff                	test   edi,edi
c0016d61:	75 12                	jne    c0016d75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016d63:	83 ec 0c             	sub    esp,0xc
c0016d66:	68 bc 9d 02 c0       	push   0xc0029dbc
c0016d6b:	e8 1f bb ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0016d70:	e9 ce 00 00 00       	jmp    c0016e43 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016d75:	52                   	push   edx
c0016d76:	52                   	push   edx
c0016d77:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016d7b:	50                   	push   eax
c0016d7c:	68 d1 9d 02 c0       	push   0xc0029dd1
c0016d81:	e8 09 bb ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0016d86:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	80 fa 02             	cmp    dl,0x2
c0016d90:	0f 85 98 00 00 00    	jne    c0016e2e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016d96:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016d9b:	75 10                	jne    c0016dad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016d9d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016da1:	75 0a                	jne    c0016dad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016da3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016da6:	83 e8 18             	sub    eax,0x18
c0016da9:	a8 f7                	test   al,0xf7
c0016dab:	74 0a                	je     c0016db7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016dad:	83 ec 0c             	sub    esp,0xc
c0016db0:	68 de 9d 02 c0       	push   0xc0029dde
c0016db5:	eb 7f                	jmp    c0016e36 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016db7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016dbf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016dc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016dcb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016dd3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016dd7:	75 0c                	jne    c0016de5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016dd9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016dde:	c1 e0 18             	shl    eax,0x18
c0016de1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016de5:	41                   	inc    ecx
c0016de6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016deb:	c1 e2 10             	shl    edx,0x10
c0016dee:	89 d0                	mov    eax,edx
c0016df0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016df5:	c1 e2 08             	shl    edx,0x8
c0016df8:	09 c2                	or     edx,eax
c0016dfa:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016dfe:	09 c2                	or     edx,eax
c0016e00:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016e04:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016e08:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e0c:	c1 f8 03             	sar    eax,0x3
c0016e0f:	01 c6                	add    esi,eax
c0016e11:	89 c8                	mov    eax,ecx
c0016e13:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e17:	39 c7                	cmp    edi,eax
c0016e19:	7f b0                	jg     c0016dcb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e1b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e23:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016e26:	7e 22                	jle    c0016e4a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016e28:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016e2c:	eb 99                	jmp    c0016dc7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016e2e:	50                   	push   eax
c0016e2f:	50                   	push   eax
c0016e30:	52                   	push   edx
c0016e31:	68 ec 9d 02 c0       	push   0xc0029dec
c0016e36:	e8 54 ba ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0016e3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e3e:	e8 b7 87 ff ff       	call   c000f5fa <free>
c0016e43:	83 c4 10             	add    esp,0x10
c0016e46:	31 ed                	xor    ebp,ebp
c0016e48:	eb 0f                	jmp    c0016e59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e51:	89 38                	mov    DWORD PTR [eax],edi
c0016e53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e57:	89 08                	mov    DWORD PTR [eax],ecx
c0016e59:	83 c4 1c             	add    esp,0x1c
c0016e5c:	89 e8                	mov    eax,ebp
c0016e5e:	5b                   	pop    ebx
c0016e5f:	5e                   	pop    esi
c0016e60:	5f                   	pop    edi
c0016e61:	5d                   	pop    ebp
c0016e62:	c3                   	ret    
c0016e63:	90                   	nop

c0016e64 <Video::putTGA(int, int, unsigned char*, int)>:
c0016e64:	55                   	push   ebp
c0016e65:	57                   	push   edi
c0016e66:	56                   	push   esi
c0016e67:	53                   	push   ebx
c0016e68:	83 ec 28             	sub    esp,0x28
c0016e6b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e73:	50                   	push   eax
c0016e74:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e78:	50                   	push   eax
c0016e79:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016e7d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016e81:	56                   	push   esi
c0016e82:	e8 5b fe ff ff       	call   c0016ce2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016e87:	83 c4 20             	add    esp,0x20
c0016e8a:	85 c0                	test   eax,eax
c0016e8c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e90:	74 35                	je     c0016ec7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016e92:	89 c7                	mov    edi,eax
c0016e94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e98:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016e9c:	39 d8                	cmp    eax,ebx
c0016e9e:	7e 27                	jle    c0016ec7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ea0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ea4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ea8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016eac:	39 e8                	cmp    eax,ebp
c0016eae:	7e 14                	jle    c0016ec4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016eb0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016eb2:	83 c7 04             	add    edi,0x4
c0016eb5:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016eb8:	53                   	push   ebx
c0016eb9:	55                   	push   ebp
c0016eba:	45                   	inc    ebp
c0016ebb:	56                   	push   esi
c0016ebc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ebf:	83 c4 10             	add    esp,0x10
c0016ec2:	eb e0                	jmp    c0016ea4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016ec4:	43                   	inc    ebx
c0016ec5:	eb cd                	jmp    c0016e94 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016ec7:	83 c4 1c             	add    esp,0x1c
c0016eca:	5b                   	pop    ebx
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	5d                   	pop    ebp
c0016ece:	c3                   	ret    
c0016ecf:	90                   	nop

c0016ed0 <ACPI::close(int, int, void*)>:
c0016ed0:	83 ec 1c             	sub    esp,0x1c
c0016ed3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016edb:	74 0a                	je     c0016ee7 <ACPI::close(int, int, void*)+0x17>
c0016edd:	b8 00 00 00 00       	mov    eax,0x0
c0016ee2:	e9 9a 00 00 00       	jmp    c0016f81 <ACPI::close(int, int, void*)+0xb1>
c0016ee7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eec:	75 37                	jne    c0016f25 <ACPI::close(int, int, void*)+0x55>
c0016eee:	83 ec 0c             	sub    esp,0xc
c0016ef1:	68 48 9e 02 c0       	push   0xc0029e48
c0016ef6:	e8 94 b9 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0016efb:	83 c4 10             	add    esp,0x10
c0016efe:	a1 68 d3 02 c0       	mov    eax,ds:0xc002d368
c0016f03:	85 c0                	test   eax,eax
c0016f05:	74 07                	je     c0016f0e <ACPI::close(int, int, void*)+0x3e>
c0016f07:	a1 68 d3 02 c0       	mov    eax,ds:0xc002d368
c0016f0c:	ff d0                	call   eax
c0016f0e:	83 ec 0c             	sub    esp,0xc
c0016f11:	68 1c 9f 02 c0       	push   0xc0029f1c
c0016f16:	e8 c6 2a 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f23:	eb 5c                	jmp    c0016f81 <ACPI::close(int, int, void*)+0xb1>
c0016f25:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f2a:	75 50                	jne    c0016f7c <ACPI::close(int, int, void*)+0xac>
c0016f2c:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0016f31:	85 c0                	test   eax,eax
c0016f33:	74 07                	je     c0016f3c <ACPI::close(int, int, void*)+0x6c>
c0016f35:	a1 64 d3 02 c0       	mov    eax,ds:0xc002d364
c0016f3a:	ff d0                	call   eax
c0016f3c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f41:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f46:	83 e0 02             	and    eax,0x2
c0016f49:	74 1c                	je     c0016f67 <ACPI::close(int, int, void*)+0x97>
c0016f4b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f56:	89 c2                	mov    edx,eax
c0016f58:	ec                   	in     al,dx
c0016f59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016f5d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016f61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016f65:	eb da                	jmp    c0016f41 <ACPI::close(int, int, void*)+0x71>
c0016f67:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016f6e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016f73:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016f77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f7b:	ee                   	out    dx,al
c0016f7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f81:	83 c4 1c             	add    esp,0x1c
c0016f84:	c3                   	ret    

c0016f85 <findRSDP()>:
c0016f85:	83 ec 1c             	sub    esp,0x1c
c0016f88:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0016f8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f93:	83 e0 04             	and    eax,0x4
c0016f96:	84 c0                	test   al,al
c0016f98:	75 07                	jne    c0016fa1 <findRSDP()+0x1c>
c0016f9a:	b8 00 00 00 00       	mov    eax,0x0
c0016f9f:	eb 6a                	jmp    c001700b <findRSDP()+0x86>
c0016fa1:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c0016fa6:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016fab:	7f 1b                	jg     c0016fc8 <findRSDP()+0x43>
c0016fad:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0016fb2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016fb8:	83 e2 fb             	and    edx,0xfffffffb
c0016fbb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016fc1:	b8 00 00 00 00       	mov    eax,0x0
c0016fc6:	eb 43                	jmp    c001700b <findRSDP()+0x86>
c0016fc8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016fd0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016fd8:	77 2c                	ja     c0017006 <findRSDP()+0x81>
c0016fda:	83 ec 04             	sub    esp,0x4
c0016fdd:	6a 08                	push   0x8
c0016fdf:	68 55 9e 02 c0       	push   0xc0029e55
c0016fe4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fe8:	e8 05 96 fe ff       	call   c00005f2 <memcmp>
c0016fed:	83 c4 10             	add    esp,0x10
c0016ff0:	85 c0                	test   eax,eax
c0016ff2:	0f 94 c0             	sete   al
c0016ff5:	84 c0                	test   al,al
c0016ff7:	74 06                	je     c0016fff <findRSDP()+0x7a>
c0016ff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ffd:	eb 0c                	jmp    c001700b <findRSDP()+0x86>
c0016fff:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017004:	eb ca                	jmp    c0016fd0 <findRSDP()+0x4b>
c0017006:	b8 00 00 00 00       	mov    eax,0x0
c001700b:	83 c4 1c             	add    esp,0x1c
c001700e:	c3                   	ret    

c001700f <loadACPITables(unsigned char*)>:
c001700f:	56                   	push   esi
c0017010:	53                   	push   ebx
c0017011:	83 ec 44             	sub    esp,0x44
c0017014:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017019:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001701f:	83 e0 04             	and    eax,0x4
c0017022:	84 c0                	test   al,al
c0017024:	0f 84 05 02 00 00    	je     c001722f <loadACPITables(unsigned char*)+0x220>
c001702a:	a0 80 d5 02 c0       	mov    al,ds:0xc002d580
c001702f:	84 c0                	test   al,al
c0017031:	74 75                	je     c00170a8 <loadACPITables(unsigned char*)+0x99>
c0017033:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017037:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001703b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001703f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017042:	83 e8 24             	sub    eax,0x24
c0017045:	c1 e8 03             	shr    eax,0x3
c0017048:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001704c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017054:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017058:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001705c:	0f 8d b2 00 00 00    	jge    c0017114 <loadACPITables(unsigned char*)+0x105>
c0017062:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017066:	83 c0 24             	add    eax,0x24
c0017069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001706d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017071:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017075:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017079:	c1 e0 03             	shl    eax,0x3
c001707c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017080:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017084:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017087:	8b 00                	mov    eax,DWORD PTR [eax]
c0017089:	89 c1                	mov    ecx,eax
c001708b:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0017090:	8d 50 01             	lea    edx,[eax+0x1]
c0017093:	89 15 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edx
c0017099:	89 ca                	mov    edx,ecx
c001709b:	89 14 c5 84 d3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2c7c],edx
c00170a2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00170a6:	eb ac                	jmp    c0017054 <loadACPITables(unsigned char*)+0x45>
c00170a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170b7:	83 e8 24             	sub    eax,0x24
c00170ba:	c1 e8 02             	shr    eax,0x2
c00170bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170c1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00170c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170cd:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00170d1:	7d 41                	jge    c0017114 <loadACPITables(unsigned char*)+0x105>
c00170d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170d7:	83 c0 24             	add    eax,0x24
c00170da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170ea:	c1 e0 02             	shl    eax,0x2
c00170ed:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00170f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00170f7:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c00170fc:	8d 50 01             	lea    edx,[eax+0x1]
c00170ff:	89 15 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edx
c0017105:	89 ca                	mov    edx,ecx
c0017107:	89 14 c5 84 d3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2c7c],edx
c001710e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017112:	eb b5                	jmp    c00170c9 <loadACPITables(unsigned char*)+0xba>
c0017114:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001711c:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0017121:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017125:	0f 8d 05 01 00 00    	jge    c0017230 <loadACPITables(unsigned char*)+0x221>
c001712b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001712f:	8b 04 c5 84 d3 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2c7c]
c0017136:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001713a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017146:	25 ff 0f 00 00       	and    eax,0xfff
c001714b:	89 c6                	mov    esi,eax
c001714d:	e8 dd a8 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c0017152:	89 c3                	mov    ebx,eax
c0017154:	83 ec 0c             	sub    esp,0xc
c0017157:	6a 01                	push   0x1
c0017159:	e8 41 a7 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c001715e:	83 c4 10             	add    esp,0x10
c0017161:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017165:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001716b:	83 ec 0c             	sub    esp,0xc
c001716e:	6a 01                	push   0x1
c0017170:	6a 01                	push   0x1
c0017172:	50                   	push   eax
c0017173:	52                   	push   edx
c0017174:	53                   	push   ebx
c0017175:	e8 e4 b0 ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001717a:	83 c4 20             	add    esp,0x20
c001717d:	09 f0                	or     eax,esi
c001717f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017183:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017187:	c1 e0 03             	shl    eax,0x3
c001718a:	05 80 d3 02 c0       	add    eax,0xc002d380
c001718f:	83 ec 04             	sub    esp,0x4
c0017192:	6a 04                	push   0x4
c0017194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017198:	50                   	push   eax
c0017199:	e8 b7 94 fe ff       	call   c0000655 <memcpy>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b0:	05 00 10 00 00       	add    eax,0x1000
c00171b5:	c1 e8 0c             	shr    eax,0xc
c00171b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00171c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c7:	25 ff 0f 00 00       	and    eax,0xfff
c00171cc:	89 c6                	mov    esi,eax
c00171ce:	e8 5c a8 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c00171d3:	89 c3                	mov    ebx,eax
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00171dc:	e8 be a6 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	6a 01                	push   0x1
c00171f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171f7:	50                   	push   eax
c00171f8:	52                   	push   edx
c00171f9:	53                   	push   ebx
c00171fa:	e8 5f b0 ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171ff:	83 c4 20             	add    esp,0x20
c0017202:	09 f0                	or     eax,esi
c0017204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017208:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001720b:	83 ec 0c             	sub    esp,0xc
c001720e:	50                   	push   eax
c001720f:	e8 ef a9 ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c0017214:	83 c4 10             	add    esp,0x10
c0017217:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001721b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001721f:	89 14 c5 84 d3 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2c7c],edx
c0017226:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001722a:	e9 ed fe ff ff       	jmp    c001711c <loadACPITables(unsigned char*)+0x10d>
c001722f:	90                   	nop
c0017230:	83 c4 44             	add    esp,0x44
c0017233:	5b                   	pop    ebx
c0017234:	5e                   	pop    esi
c0017235:	c3                   	ret    

c0017236 <findRSDT(unsigned char*)>:
c0017236:	56                   	push   esi
c0017237:	53                   	push   ebx
c0017238:	83 ec 44             	sub    esp,0x44
c001723b:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017240:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017246:	83 e0 04             	and    eax,0x4
c0017249:	84 c0                	test   al,al
c001724b:	75 0a                	jne    c0017257 <findRSDT(unsigned char*)+0x21>
c001724d:	b8 00 00 00 00       	mov    eax,0x0
c0017252:	e9 f7 00 00 00       	jmp    c001734e <findRSDT(unsigned char*)+0x118>
c0017257:	83 ec 04             	sub    esp,0x4
c001725a:	6a 24                	push   0x24
c001725c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017260:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017264:	50                   	push   eax
c0017265:	e8 eb 93 fe ff       	call   c0000655 <memcpy>
c001726a:	83 c4 10             	add    esp,0x10
c001726d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017271:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017275:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001727d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017281:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017285:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017289:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001728d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017295:	25 ff 0f 00 00       	and    eax,0xfff
c001729a:	89 c6                	mov    esi,eax
c001729c:	e8 8e a7 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c00172a1:	89 c3                	mov    ebx,eax
c00172a3:	83 ec 0c             	sub    esp,0xc
c00172a6:	6a 02                	push   0x2
c00172a8:	e8 f2 a5 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c00172ad:	83 c4 10             	add    esp,0x10
c00172b0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172b4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172ba:	83 ec 0c             	sub    esp,0xc
c00172bd:	6a 01                	push   0x1
c00172bf:	6a 02                	push   0x2
c00172c1:	50                   	push   eax
c00172c2:	52                   	push   edx
c00172c3:	53                   	push   ebx
c00172c4:	e8 95 af ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172c9:	83 c4 20             	add    esp,0x20
c00172cc:	09 f0                	or     eax,esi
c00172ce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172d6:	25 ff 0f 00 00       	and    eax,0xfff
c00172db:	89 c6                	mov    esi,eax
c00172dd:	e8 4d a7 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c00172e2:	89 c3                	mov    ebx,eax
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	6a 02                	push   0x2
c00172e9:	e8 b1 a5 ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c00172ee:	83 c4 10             	add    esp,0x10
c00172f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00172f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172fb:	83 ec 0c             	sub    esp,0xc
c00172fe:	6a 01                	push   0x1
c0017300:	6a 02                	push   0x2
c0017302:	50                   	push   eax
c0017303:	52                   	push   edx
c0017304:	53                   	push   ebx
c0017305:	e8 54 af ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001730a:	83 c4 20             	add    esp,0x20
c001730d:	09 f0                	or     eax,esi
c001730f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017313:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017318:	75 11                	jne    c001732b <findRSDT(unsigned char*)+0xf5>
c001731a:	c6 05 80 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d580,0x0
c0017321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017325:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017329:	eb 1f                	jmp    c001734a <findRSDT(unsigned char*)+0x114>
c001732b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017330:	75 11                	jne    c0017343 <findRSDT(unsigned char*)+0x10d>
c0017332:	c6 05 80 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d580,0x1
c0017339:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001733d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017341:	eb 07                	jmp    c001734a <findRSDT(unsigned char*)+0x114>
c0017343:	b8 00 00 00 00       	mov    eax,0x0
c0017348:	eb 04                	jmp    c001734e <findRSDT(unsigned char*)+0x118>
c001734a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001734e:	83 c4 44             	add    esp,0x44
c0017351:	5b                   	pop    ebx
c0017352:	5e                   	pop    esi
c0017353:	c3                   	ret    

c0017354 <findDataTable(unsigned char*, char*)>:
c0017354:	83 ec 1c             	sub    esp,0x1c
c0017357:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001735c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017362:	83 e0 04             	and    eax,0x4
c0017365:	84 c0                	test   al,al
c0017367:	75 07                	jne    c0017370 <findDataTable(unsigned char*, char*)+0x1c>
c0017369:	b8 00 00 00 00       	mov    eax,0x0
c001736e:	eb 7c                	jmp    c00173ec <findDataTable(unsigned char*, char*)+0x98>
c0017370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017378:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c001737d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017381:	7d 3a                	jge    c00173bd <findDataTable(unsigned char*, char*)+0x69>
c0017383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017387:	c1 e0 03             	shl    eax,0x3
c001738a:	05 80 d3 02 c0       	add    eax,0xc002d380
c001738f:	83 ec 04             	sub    esp,0x4
c0017392:	6a 04                	push   0x4
c0017394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017398:	50                   	push   eax
c0017399:	e8 54 92 fe ff       	call   c00005f2 <memcmp>
c001739e:	83 c4 10             	add    esp,0x10
c00173a1:	85 c0                	test   eax,eax
c00173a3:	0f 94 c0             	sete   al
c00173a6:	84 c0                	test   al,al
c00173a8:	74 0d                	je     c00173b7 <findDataTable(unsigned char*, char*)+0x63>
c00173aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173ae:	8b 04 c5 84 d3 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2c7c]
c00173b5:	eb 35                	jmp    c00173ec <findDataTable(unsigned char*, char*)+0x98>
c00173b7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173bb:	eb bb                	jmp    c0017378 <findDataTable(unsigned char*, char*)+0x24>
c00173bd:	a0 80 d5 02 c0       	mov    al,ds:0xc002d580
c00173c2:	84 c0                	test   al,al
c00173c4:	74 07                	je     c00173cd <findDataTable(unsigned char*, char*)+0x79>
c00173c6:	b8 58 00 00 00       	mov    eax,0x58
c00173cb:	eb 05                	jmp    c00173d2 <findDataTable(unsigned char*, char*)+0x7e>
c00173cd:	b8 52 00 00 00       	mov    eax,0x52
c00173d2:	83 ec 04             	sub    esp,0x4
c00173d5:	50                   	push   eax
c00173d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173da:	68 40 9f 02 c0       	push   0xc0029f40
c00173df:	e8 ab b4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00173e4:	83 c4 10             	add    esp,0x10
c00173e7:	b8 00 00 00 00       	mov    eax,0x0
c00173ec:	83 c4 1c             	add    esp,0x1c
c00173ef:	c3                   	ret    

c00173f0 <scanMADT()>:
c00173f0:	53                   	push   ebx
c00173f1:	83 ec 38             	sub    esp,0x38
c00173f4:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00173f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173ff:	83 e0 04             	and    eax,0x4
c0017402:	84 c0                	test   al,al
c0017404:	0f 84 63 04 00 00    	je     c001786d <scanMADT()+0x47d>
c001740a:	e8 76 fb ff ff       	call   c0016f85 <findRSDP()>
c001740f:	a3 8c d5 02 c0       	mov    ds:0xc002d58c,eax
c0017414:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c0017419:	85 c0                	test   eax,eax
c001741b:	75 19                	jne    c0017436 <scanMADT()+0x46>
c001741d:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017422:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017428:	83 e2 fb             	and    edx,0xfffffffb
c001742b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017431:	e9 3b 04 00 00       	jmp    c0017871 <scanMADT()+0x481>
c0017436:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c001743b:	83 ec 0c             	sub    esp,0xc
c001743e:	50                   	push   eax
c001743f:	e8 f2 fd ff ff       	call   c0017236 <findRSDT(unsigned char*)>
c0017444:	83 c4 10             	add    esp,0x10
c0017447:	a3 88 d5 02 c0       	mov    ds:0xc002d588,eax
c001744c:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017451:	85 c0                	test   eax,eax
c0017453:	75 19                	jne    c001746e <scanMADT()+0x7e>
c0017455:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001745a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017460:	83 e2 fb             	and    edx,0xfffffffb
c0017463:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017469:	e9 03 04 00 00       	jmp    c0017871 <scanMADT()+0x481>
c001746e:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017473:	83 ec 0c             	sub    esp,0xc
c0017476:	50                   	push   eax
c0017477:	e8 93 fb ff ff       	call   c001700f <loadACPITables(unsigned char*)>
c001747c:	83 c4 10             	add    esp,0x10
c001747f:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	68 5e 9e 02 c0       	push   0xc0029e5e
c001748c:	50                   	push   eax
c001748d:	e8 c2 fe ff ff       	call   c0017354 <findDataTable(unsigned char*, char*)>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017499:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001749e:	75 19                	jne    c00174b9 <scanMADT()+0xc9>
c00174a0:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00174a5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174ab:	83 e2 fe             	and    edx,0xfffffffe
c00174ae:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174b4:	e9 b8 03 00 00       	jmp    c0017871 <scanMADT()+0x481>
c00174b9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00174c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174c8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00174cc:	0f 87 9f 03 00 00    	ja     c0017871 <scanMADT()+0x481>
c00174d2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00174da:	0f 87 91 03 00 00    	ja     c0017871 <scanMADT()+0x481>
c00174e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ec:	8d 50 01             	lea    edx,[eax+0x1]
c00174ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174f7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174fb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00174ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017503:	8d 50 01             	lea    edx,[eax+0x1]
c0017506:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001750a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001750e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017512:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017516:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001751b:	0f 86 4f 03 00 00    	jbe    c0017870 <scanMADT()+0x480>
c0017521:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017526:	75 57                	jne    c001757f <scanMADT()+0x18f>
c0017528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752c:	8d 50 01             	lea    edx,[eax+0x1]
c001752f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017533:	8a 15 80 d7 02 c0    	mov    dl,BYTE PTR ds:0xc002d780
c0017539:	0f b6 d2             	movzx  edx,dl
c001753c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017540:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017544:	88 82 c0 d7 02 c0    	mov    BYTE PTR [edx-0x3ffd2840],al
c001754a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001754e:	8d 50 01             	lea    edx,[eax+0x1]
c0017551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017555:	8a 15 80 d7 02 c0    	mov    dl,BYTE PTR ds:0xc002d780
c001755b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001755e:	88 0d 80 d7 02 c0    	mov    BYTE PTR ds:0xc002d780,cl
c0017564:	0f b6 d2             	movzx  edx,dl
c0017567:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001756b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001756f:	88 82 a0 d7 02 c0    	mov    BYTE PTR [edx-0x3ffd2860],al
c0017575:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001757a:	e9 da 02 00 00       	jmp    c0017859 <scanMADT()+0x469>
c001757f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017584:	0f 85 14 01 00 00    	jne    c001769e <scanMADT()+0x2ae>
c001758a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001758e:	8d 50 01             	lea    edx,[eax+0x1]
c0017591:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017595:	8a 15 40 d6 02 c0    	mov    dl,BYTE PTR ds:0xc002d640
c001759b:	0f b6 d2             	movzx  edx,dl
c001759e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175a2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175a6:	88 82 60 d6 02 c0    	mov    BYTE PTR [edx-0x3ffd29a0],al
c00175ac:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00175b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175b8:	01 d0                	add    eax,edx
c00175ba:	83 c0 2c             	add    eax,0x2c
c00175bd:	8a 00                	mov    al,BYTE PTR [eax]
c00175bf:	0f b6 d0             	movzx  edx,al
c00175c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00175c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175cd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175d1:	0f b6 c0             	movzx  eax,al
c00175d4:	c1 e0 08             	shl    eax,0x8
c00175d7:	89 d1                	mov    ecx,edx
c00175d9:	09 c1                	or     ecx,eax
c00175db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175df:	8d 50 02             	lea    edx,[eax+0x2]
c00175e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175ea:	0f b6 c0             	movzx  eax,al
c00175ed:	c1 e0 10             	shl    eax,0x10
c00175f0:	09 c1                	or     ecx,eax
c00175f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175f6:	8d 50 03             	lea    edx,[eax+0x3]
c00175f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175fd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017601:	0f b6 c0             	movzx  eax,al
c0017604:	c1 e0 18             	shl    eax,0x18
c0017607:	09 c1                	or     ecx,eax
c0017609:	89 ca                	mov    edx,ecx
c001760b:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c0017610:	0f b6 c0             	movzx  eax,al
c0017613:	89 14 85 80 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2980],edx
c001761a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001761f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017627:	01 d0                	add    eax,edx
c0017629:	83 c0 2c             	add    eax,0x2c
c001762c:	8a 00                	mov    al,BYTE PTR [eax]
c001762e:	0f b6 d0             	movzx  edx,al
c0017631:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017635:	8d 48 01             	lea    ecx,[eax+0x1]
c0017638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001763c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017640:	0f b6 c0             	movzx  eax,al
c0017643:	c1 e0 08             	shl    eax,0x8
c0017646:	89 d1                	mov    ecx,edx
c0017648:	09 c1                	or     ecx,eax
c001764a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001764e:	8d 50 02             	lea    edx,[eax+0x2]
c0017651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017655:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017659:	0f b6 c0             	movzx  eax,al
c001765c:	c1 e0 10             	shl    eax,0x10
c001765f:	09 c1                	or     ecx,eax
c0017661:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017665:	8d 50 03             	lea    edx,[eax+0x3]
c0017668:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001766c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017670:	0f b6 c0             	movzx  eax,al
c0017673:	c1 e0 18             	shl    eax,0x18
c0017676:	09 c1                	or     ecx,eax
c0017678:	89 ca                	mov    edx,ecx
c001767a:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c001767f:	0f b6 c0             	movzx  eax,al
c0017682:	89 14 85 00 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2900],edx
c0017689:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001768e:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c0017693:	40                   	inc    eax
c0017694:	a2 40 d6 02 c0       	mov    ds:0xc002d640,al
c0017699:	e9 bb 01 00 00       	jmp    c0017859 <scanMADT()+0x469>
c001769e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00176a3:	0f 85 e9 00 00 00    	jne    c0017792 <scanMADT()+0x3a2>
c00176a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ad:	8d 50 01             	lea    edx,[eax+0x1]
c00176b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176b8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176bc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00176c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c4:	8d 50 01             	lea    edx,[eax+0x1]
c00176c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176cf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176d3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00176d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176df:	01 d0                	add    eax,edx
c00176e1:	83 c0 2c             	add    eax,0x2c
c00176e4:	8a 00                	mov    al,BYTE PTR [eax]
c00176e6:	0f b6 d0             	movzx  edx,al
c00176e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00176f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176f4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176f8:	0f b6 c0             	movzx  eax,al
c00176fb:	c1 e0 08             	shl    eax,0x8
c00176fe:	89 d1                	mov    ecx,edx
c0017700:	09 c1                	or     ecx,eax
c0017702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017706:	8d 50 02             	lea    edx,[eax+0x2]
c0017709:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001770d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017711:	0f b6 c0             	movzx  eax,al
c0017714:	c1 e0 10             	shl    eax,0x10
c0017717:	09 c1                	or     ecx,eax
c0017719:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001771d:	8d 50 03             	lea    edx,[eax+0x3]
c0017720:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017724:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017728:	0f b6 c0             	movzx  eax,al
c001772b:	c1 e0 18             	shl    eax,0x18
c001772e:	09 c8                	or     eax,ecx
c0017730:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017734:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017739:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001773d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017741:	01 d0                	add    eax,edx
c0017743:	83 c0 2c             	add    eax,0x2c
c0017746:	8a 00                	mov    al,BYTE PTR [eax]
c0017748:	0f b6 c0             	movzx  eax,al
c001774b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001774f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017752:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017756:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001775a:	0f b6 d2             	movzx  edx,dl
c001775d:	c1 e2 08             	shl    edx,0x8
c0017760:	09 d0                	or     eax,edx
c0017762:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017767:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001776c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017771:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017775:	88 90 20 bf 02 c0    	mov    BYTE PTR [eax-0x3ffd40e0],dl
c001777b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017780:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017785:	66 89 84 12 20 d6 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd29e0],ax
c001778d:	e9 c7 00 00 00       	jmp    c0017859 <scanMADT()+0x469>
c0017792:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017797:	0f 85 b0 00 00 00    	jne    c001784d <scanMADT()+0x45d>
c001779d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a1:	8d 50 01             	lea    edx,[eax+0x1]
c00177a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177b0:	0f b6 c0             	movzx  eax,al
c00177b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177bf:	01 d0                	add    eax,edx
c00177c1:	83 c0 2c             	add    eax,0x2c
c00177c4:	8a 00                	mov    al,BYTE PTR [eax]
c00177c6:	0f b6 d0             	movzx  edx,al
c00177c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177cd:	8d 48 01             	lea    ecx,[eax+0x1]
c00177d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177d8:	0f b6 c0             	movzx  eax,al
c00177db:	c1 e0 08             	shl    eax,0x8
c00177de:	09 d0                	or     eax,edx
c00177e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177e4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ed:	8d 50 01             	lea    edx,[eax+0x1]
c00177f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177fc:	0f b6 c0             	movzx  eax,al
c00177ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017807:	c1 e0 08             	shl    eax,0x8
c001780a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001780e:	89 c1                	mov    ecx,eax
c0017810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017814:	c1 e0 18             	shl    eax,0x18
c0017817:	89 c3                	mov    ebx,eax
c0017819:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c001781e:	8d 50 01             	lea    edx,[eax+0x1]
c0017821:	89 15 90 d5 02 c0    	mov    DWORD PTR ds:0xc002d590,edx
c0017827:	09 d9                	or     ecx,ebx
c0017829:	89 ca                	mov    edx,ecx
c001782b:	89 14 85 a0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a60],edx
c0017832:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001783a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001783e:	68 70 9f 02 c0       	push   0xc0029f70
c0017843:	e8 47 b0 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	eb 0c                	jmp    c0017859 <scanMADT()+0x469>
c001784d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017852:	75 05                	jne    c0017859 <scanMADT()+0x469>
c0017854:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017859:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001785e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017862:	01 d0                	add    eax,edx
c0017864:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017868:	e9 54 fc ff ff       	jmp    c00174c1 <scanMADT()+0xd1>
c001786d:	90                   	nop
c001786e:	eb 01                	jmp    c0017871 <scanMADT()+0x481>
c0017870:	90                   	nop
c0017871:	83 c4 38             	add    esp,0x38
c0017874:	5b                   	pop    ebx
c0017875:	c3                   	ret    

c0017876 <ACPI::ACPI()>:
c0017876:	83 ec 0c             	sub    esp,0xc
c0017879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001787d:	83 ec 08             	sub    esp,0x8
c0017880:	68 63 9e 02 c0       	push   0xc0029e63
c0017885:	50                   	push   eax
c0017886:	e8 1b c6 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c001788b:	83 c4 10             	add    esp,0x10
c001788e:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c0017893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017897:	89 10                	mov    DWORD PTR [eax],edx
c0017899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001789d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a8:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00178b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00178c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c4:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00178cb:	e8 20 fb ff ff       	call   c00173f0 <scanMADT()>
c00178d0:	90                   	nop
c00178d1:	83 c4 0c             	add    esp,0xc
c00178d4:	c3                   	ret    
c00178d5:	90                   	nop

c00178d6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00178d6:	83 ec 2c             	sub    esp,0x2c
c00178d9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00178dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00178e5:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00178e9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00178ee:	88 d0                	mov    al,dl
c00178f0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00178f4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00178f9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017901:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017905:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001790b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001790f:	0f 8d 97 00 00 00    	jge    c00179ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017915:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017919:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001791d:	83 c2 2a             	add    edx,0x2a
c0017920:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017924:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017929:	75 78                	jne    c00179a3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001792b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001792f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017933:	83 c2 2a             	add    edx,0x2a
c0017936:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001793a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001793e:	75 63                	jne    c00179a3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017940:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017945:	74 3a                	je     c0017981 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017947:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001794b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001794f:	83 c2 2a             	add    edx,0x2a
c0017952:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001795a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001795d:	39 c2                	cmp    edx,eax
c001795f:	74 10                	je     c0017971 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	68 ac 9f 02 c0       	push   0xc0029fac
c0017969:	e8 73 20 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	83 ec 0c             	sub    esp,0xc
c0017974:	68 68 9e 02 c0       	push   0xc0029e68
c0017979:	e8 63 20 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017985:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017989:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001798d:	83 c2 2a             	add    edx,0x2a
c0017990:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017994:	8b 02                	mov    eax,DWORD PTR [edx]
c0017996:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017999:	89 01                	mov    DWORD PTR [ecx],eax
c001799b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001799e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179a3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179a7:	e9 55 ff ff ff       	jmp    c0017901 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179ac:	90                   	nop
c00179ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179b1:	83 c4 2c             	add    esp,0x2c
c00179b4:	c2 04 00             	ret    0x4
c00179b7:	90                   	nop

c00179b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00179b8:	56                   	push   esi
c00179b9:	53                   	push   ebx
c00179ba:	83 ec 14             	sub    esp,0x14
c00179bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00179c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00179c9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00179ce:	88 c8                	mov    al,cl
c00179d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00179d4:	88 d0                	mov    al,dl
c00179d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00179da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179de:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00179e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e8:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00179ee:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00179f3:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00179f8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00179fd:	83 ec 04             	sub    esp,0x4
c0017a00:	56                   	push   esi
c0017a01:	53                   	push   ebx
c0017a02:	51                   	push   ecx
c0017a03:	52                   	push   edx
c0017a04:	50                   	push   eax
c0017a05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a09:	68 dc 9f 02 c0       	push   0xc0029fdc
c0017a0e:	e8 7c ae ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0017a13:	83 c4 20             	add    esp,0x20
c0017a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a24:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a27:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a2b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a33:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a3d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a44:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017a53:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017a57:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5e:	83 c2 2a             	add    edx,0x2a
c0017a61:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a69:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a73:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017a7a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a82:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a88:	8d 50 01             	lea    edx,[eax+0x1]
c0017a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a99:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a9f:	3d 00 08 00 00       	cmp    eax,0x800
c0017aa4:	75 10                	jne    c0017ab6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	68 77 9e 02 c0       	push   0xc0029e77
c0017aae:	e8 2e 1f 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	90                   	nop
c0017ab7:	83 c4 14             	add    esp,0x14
c0017aba:	5b                   	pop    ebx
c0017abb:	5e                   	pop    esi
c0017abc:	c3                   	ret    
c0017abd:	90                   	nop

c0017abe <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017abe:	b8 00 00 00 00       	mov    eax,0x0
c0017ac3:	c3                   	ret    

c0017ac4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ac4:	83 ec 1c             	sub    esp,0x1c
c0017ac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017acb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ace:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ad2:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017ad7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017adc:	83 ec 08             	sub    esp,0x8
c0017adf:	52                   	push   edx
c0017ae0:	50                   	push   eax
c0017ae1:	e8 1c 71 ff ff       	call   c000ec02 <Computer::readCMOS(unsigned char)>
c0017ae6:	83 c4 10             	add    esp,0x10
c0017ae9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017aed:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017af2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017af7:	83 ec 04             	sub    esp,0x4
c0017afa:	6a 01                	push   0x1
c0017afc:	52                   	push   edx
c0017afd:	50                   	push   eax
c0017afe:	e8 15 72 ff ff       	call   c000ed18 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	90                   	nop
c0017b07:	83 c4 1c             	add    esp,0x1c
c0017b0a:	c3                   	ret    
c0017b0b:	90                   	nop

c0017b0c <ACPI::open(int, int, void*)>:
c0017b0c:	53                   	push   ebx
c0017b0d:	83 ec 28             	sub    esp,0x28
c0017b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b14:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b1f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017b25:	84 c0                	test   al,al
c0017b27:	74 67                	je     c0017b90 <ACPI::open(int, int, void*)+0x84>
c0017b29:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017b31:	83 ec 0c             	sub    esp,0xc
c0017b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b38:	e8 ad 7a ff ff       	call   c000f5ea <malloc>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	89 c3                	mov    ebx,eax
c0017b42:	83 ec 0c             	sub    esp,0xc
c0017b45:	53                   	push   ebx
c0017b46:	e8 49 9f 00 00       	call   c0021a94 <PCI::PCI()>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b56:	83 ec 08             	sub    esp,0x8
c0017b59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b5d:	50                   	push   eax
c0017b5e:	e8 53 c1 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6c:	83 c0 08             	add    eax,0x8
c0017b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b71:	6a 00                	push   0x0
c0017b73:	6a 00                	push   0x0
c0017b75:	6a 00                	push   0x0
c0017b77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b7b:	ff d0                	call   eax
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	83 ec 0c             	sub    esp,0xc
c0017b83:	68 94 9e 02 c0       	push   0xc0029e94
c0017b88:	e8 02 ad ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	68 9f 9e 02 c0       	push   0xc0029e9f
c0017b98:	e8 25 43 00 00       	call   c001bec2 <Thr::loadKernelSymbolTable(char const*)>
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0017ba6:	83 ec 08             	sub    esp,0x8
c0017ba9:	6a 01                	push   0x1
c0017bab:	68 bd 9e 02 c0       	push   0xc0029ebd
c0017bb0:	e8 68 4d 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	83 ec 08             	sub    esp,0x8
c0017bbb:	53                   	push   ebx
c0017bbc:	50                   	push   eax
c0017bbd:	e8 6a 4f 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c0017bc2:	83 c4 10             	add    esp,0x10
c0017bc5:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0017bcb:	83 ec 08             	sub    esp,0x8
c0017bce:	6a 01                	push   0x1
c0017bd0:	68 da 9e 02 c0       	push   0xc0029eda
c0017bd5:	e8 43 4d 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c0017bda:	83 c4 10             	add    esp,0x10
c0017bdd:	83 ec 08             	sub    esp,0x8
c0017be0:	53                   	push   ebx
c0017be1:	50                   	push   eax
c0017be2:	e8 45 4f 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c0017be7:	83 c4 10             	add    esp,0x10
c0017bea:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0017bef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bf5:	83 e0 04             	and    eax,0x4
c0017bf8:	84 c0                	test   al,al
c0017bfa:	0f 84 d6 00 00 00    	je     c0017cd6 <ACPI::open(int, int, void*)+0x1ca>
c0017c00:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c0f:	e8 d6 79 ff ff       	call   c000f5ea <malloc>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	89 c3                	mov    ebx,eax
c0017c19:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0017c1e:	83 ec 04             	sub    esp,0x4
c0017c21:	50                   	push   eax
c0017c22:	68 f7 9e 02 c0       	push   0xc0029ef7
c0017c27:	53                   	push   ebx
c0017c28:	e8 bb b1 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c0017c2d:	83 c4 10             	add    esp,0x10
c0017c30:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017c34:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c39:	74 17                	je     c0017c52 <ACPI::open(int, int, void*)+0x146>
c0017c3b:	83 ec 0c             	sub    esp,0xc
c0017c3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c42:	e8 73 b4 ff ff       	call   c00130ba <File::exists()>
c0017c47:	83 c4 10             	add    esp,0x10
c0017c4a:	84 c0                	test   al,al
c0017c4c:	74 04                	je     c0017c52 <ACPI::open(int, int, void*)+0x146>
c0017c4e:	b0 01                	mov    al,0x1
c0017c50:	eb 02                	jmp    c0017c54 <ACPI::open(int, int, void*)+0x148>
c0017c52:	b0 00                	mov    al,0x0
c0017c54:	84 c0                	test   al,al
c0017c56:	74 25                	je     c0017c7d <ACPI::open(int, int, void*)+0x171>
c0017c58:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0017c5e:	83 ec 08             	sub    esp,0x8
c0017c61:	6a 01                	push   0x1
c0017c63:	68 f7 9e 02 c0       	push   0xc0029ef7
c0017c68:	e8 b0 4c 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	83 ec 08             	sub    esp,0x8
c0017c73:	53                   	push   ebx
c0017c74:	50                   	push   eax
c0017c75:	e8 b2 4e 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c0017c7a:	83 c4 10             	add    esp,0x10
c0017c7d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c82:	74 1e                	je     c0017ca2 <ACPI::open(int, int, void*)+0x196>
c0017c84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c89:	74 17                	je     c0017ca2 <ACPI::open(int, int, void*)+0x196>
c0017c8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c91:	83 c0 08             	add    eax,0x8
c0017c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c96:	83 ec 0c             	sub    esp,0xc
c0017c99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c9d:	ff d0                	call   eax
c0017c9f:	83 c4 10             	add    esp,0x10
c0017ca2:	a1 88 d5 02 c0       	mov    eax,ds:0xc002d588
c0017ca7:	83 ec 08             	sub    esp,0x8
c0017caa:	68 14 9f 02 c0       	push   0xc0029f14
c0017caf:	50                   	push   eax
c0017cb0:	e8 9f f6 ff ff       	call   c0017354 <findDataTable(unsigned char*, char*)>
c0017cb5:	83 c4 10             	add    esp,0x10
c0017cb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cbc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017cc1:	74 13                	je     c0017cd6 <ACPI::open(int, int, void*)+0x1ca>
c0017cc3:	83 ec 08             	sub    esp,0x8
c0017cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017cce:	e8 f1 fd ff ff       	call   c0017ac4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017cd3:	83 c4 10             	add    esp,0x10
c0017cd6:	b8 00 00 00 00       	mov    eax,0x0
c0017cdb:	83 c4 28             	add    esp,0x28
c0017cde:	5b                   	pop    ebx
c0017cdf:	c3                   	ret    

c0017ce0 <ACPI::sleep()>:
c0017ce0:	83 ec 0c             	sub    esp,0xc
c0017ce3:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c0017ce8:	85 c0                	test   eax,eax
c0017cea:	74 07                	je     c0017cf3 <ACPI::sleep()+0x13>
c0017cec:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c0017cf1:	ff d0                	call   eax
c0017cf3:	90                   	nop
c0017cf4:	83 c4 0c             	add    esp,0xc
c0017cf7:	c3                   	ret    

c0017cf8 <CPU::close(int, int, void*)>:
c0017cf8:	31 c0                	xor    eax,eax
c0017cfa:	c3                   	ret    
c0017cfb:	90                   	nop

c0017cfc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017cfc:	55                   	push   ebp
c0017cfd:	57                   	push   edi
c0017cfe:	56                   	push   esi
c0017cff:	53                   	push   ebx
c0017d00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017d04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d08:	89 ce                	mov    esi,ecx
c0017d0a:	89 d5                	mov    ebp,edx
c0017d0c:	80 f9 04             	cmp    cl,0x4
c0017d0f:	75 28                	jne    c0017d39 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017d11:	8d 42 f9             	lea    eax,[edx-0x7]
c0017d14:	3c 03                	cmp    al,0x3
c0017d16:	0f 86 63 01 00 00    	jbe    c0017e7f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017d1c:	80 fa 03             	cmp    dl,0x3
c0017d1f:	0f 84 5a 01 00 00    	je     c0017e7f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017d25:	8d 7a f2             	lea    edi,[edx-0xe]
c0017d28:	b8 f0 c0 02 c0       	mov    eax,0xc002c0f0
c0017d2d:	89 fb                	mov    ebx,edi
c0017d2f:	80 fb 01             	cmp    bl,0x1
c0017d32:	77 4e                	ja     c0017d82 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017d34:	e9 52 01 00 00       	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d39:	80 f9 05             	cmp    cl,0x5
c0017d3c:	75 4d                	jne    c0017d8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017d3e:	b8 00 c1 02 c0       	mov    eax,0xc002c100
c0017d43:	80 fa 03             	cmp    dl,0x3
c0017d46:	0f 86 3f 01 00 00    	jbe    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d4c:	8d 7a fa             	lea    edi,[edx-0x6]
c0017d4f:	b8 10 c1 02 c0       	mov    eax,0xc002c110
c0017d54:	89 fb                	mov    ebx,edi
c0017d56:	80 fb 01             	cmp    bl,0x1
c0017d59:	0f 86 2c 01 00 00    	jbe    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d5f:	b8 20 c1 02 c0       	mov    eax,0xc002c120
c0017d64:	80 fa 08             	cmp    dl,0x8
c0017d67:	0f 84 1e 01 00 00    	je     c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d6d:	89 d7                	mov    edi,edx
c0017d6f:	b8 30 c1 02 c0       	mov    eax,0xc002c130
c0017d74:	83 e7 fb             	and    edi,0xfffffffb
c0017d77:	89 fb                	mov    ebx,edi
c0017d79:	80 fb 09             	cmp    bl,0x9
c0017d7c:	0f 84 09 01 00 00    	je     c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d82:	31 c0                	xor    eax,eax
c0017d84:	89 eb                	mov    ebx,ebp
c0017d86:	0f b6 fb             	movzx  edi,bl
c0017d89:	eb 30                	jmp    c0017dbb <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017d8b:	31 c0                	xor    eax,eax
c0017d8d:	80 f9 06             	cmp    cl,0x6
c0017d90:	75 f2                	jne    c0017d84 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017d92:	80 fa 0a             	cmp    dl,0xa
c0017d95:	77 ed                	ja     c0017d84 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017d97:	bf de 05 00 00       	mov    edi,0x5de
c0017d9c:	0f a3 d7             	bt     edi,edx
c0017d9f:	73 e3                	jae    c0017d84 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017da1:	b8 40 c1 02 c0       	mov    eax,0xc002c140
c0017da6:	e9 e0 00 00 00       	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017dab:	39 c7                	cmp    edi,eax
c0017dad:	0f 84 d3 00 00 00    	je     c0017e86 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017db3:	40                   	inc    eax
c0017db4:	3d d0 00 00 00       	cmp    eax,0xd0
c0017db9:	74 09                	je     c0017dc4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017dbb:	89 f3                	mov    ebx,esi
c0017dbd:	80 fb 0f             	cmp    bl,0xf
c0017dc0:	75 f1                	jne    c0017db3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017dc2:	eb e7                	jmp    c0017dab <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017dc4:	80 f9 10             	cmp    cl,0x10
c0017dc7:	75 14                	jne    c0017ddd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017dc9:	8d 42 fc             	lea    eax,[edx-0x4]
c0017dcc:	83 e0 fb             	and    eax,0xfffffffb
c0017dcf:	3c 02                	cmp    al,0x2
c0017dd1:	76 34                	jbe    c0017e07 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017dd3:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017dd8:	80 fa 02             	cmp    dl,0x2
c0017ddb:	eb 24                	jmp    c0017e01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017ddd:	80 f9 11             	cmp    cl,0x11
c0017de0:	75 13                	jne    c0017df5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017de2:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017de7:	80 fa 03             	cmp    dl,0x3
c0017dea:	0f 85 9b 00 00 00    	jne    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017df0:	e9 91 00 00 00       	jmp    c0017e86 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017df5:	80 f9 12             	cmp    cl,0x12
c0017df8:	75 14                	jne    c0017e0e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017dfa:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017dff:	fe ca                	dec    dl
c0017e01:	0f 85 84 00 00 00    	jne    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e07:	b8 60 c1 02 c0       	mov    eax,0xc002c160
c0017e0c:	eb 7d                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e0e:	80 f9 14             	cmp    cl,0x14
c0017e11:	75 12                	jne    c0017e25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017e13:	4a                   	dec    edx
c0017e14:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017e19:	80 fa 01             	cmp    dl,0x1
c0017e1c:	77 6d                	ja     c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e1e:	b8 70 c1 02 c0       	mov    eax,0xc002c170
c0017e23:	eb 66                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e25:	80 f9 15             	cmp    cl,0x15
c0017e28:	75 31                	jne    c0017e5b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017e2a:	b8 80 c1 02 c0       	mov    eax,0xc002c180
c0017e2f:	80 fa 01             	cmp    dl,0x1
c0017e32:	74 57                	je     c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e34:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017e39:	80 fa 13             	cmp    dl,0x13
c0017e3c:	76 0c                	jbe    c0017e4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017e3e:	80 fa 30             	cmp    dl,0x30
c0017e41:	75 48                	jne    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e43:	b8 a0 c1 02 c0       	mov    eax,0xc002c1a0
c0017e48:	eb 41                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e4a:	b9 04 00 09 00       	mov    ecx,0x90004
c0017e4f:	0f a3 d1             	bt     ecx,edx
c0017e52:	73 37                	jae    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e54:	b8 90 c1 02 c0       	mov    eax,0xc002c190
c0017e59:	eb 30                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e5b:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017e60:	80 f9 16             	cmp    cl,0x16
c0017e63:	75 26                	jne    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e65:	b8 b0 c1 02 c0       	mov    eax,0xc002c1b0
c0017e6a:	84 d2                	test   dl,dl
c0017e6c:	74 1d                	je     c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e6e:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017e73:	80 fa 30             	cmp    dl,0x30
c0017e76:	75 13                	jne    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e78:	b8 c0 c1 02 c0       	mov    eax,0xc002c1c0
c0017e7d:	eb 0c                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e7f:	b8 e0 c0 02 c0       	mov    eax,0xc002c0e0
c0017e84:	eb 05                	jmp    c0017e8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017e86:	b8 50 c1 02 c0       	mov    eax,0xc002c150
c0017e8b:	5b                   	pop    ebx
c0017e8c:	5e                   	pop    esi
c0017e8d:	5f                   	pop    edi
c0017e8e:	5d                   	pop    ebp
c0017e8f:	c3                   	ret    

c0017e90 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017e90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e98:	80 f9 04             	cmp    cl,0x4
c0017e9b:	75 6b                	jne    c0017f08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017e9d:	b8 40 bf 02 c0       	mov    eax,0xc002bf40
c0017ea2:	80 fa 01             	cmp    dl,0x1
c0017ea5:	0f 86 92 02 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eab:	b8 50 bf 02 c0       	mov    eax,0xc002bf50
c0017eb0:	80 fa 02             	cmp    dl,0x2
c0017eb3:	0f 84 84 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb9:	b8 60 bf 02 c0       	mov    eax,0xc002bf60
c0017ebe:	80 fa 03             	cmp    dl,0x3
c0017ec1:	0f 84 76 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec7:	b8 70 bf 02 c0       	mov    eax,0xc002bf70
c0017ecc:	80 fa 04             	cmp    dl,0x4
c0017ecf:	0f 84 68 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed5:	b8 80 bf 02 c0       	mov    eax,0xc002bf80
c0017eda:	80 fa 05             	cmp    dl,0x5
c0017edd:	0f 84 5a 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee3:	b8 60 bf 02 c0       	mov    eax,0xc002bf60
c0017ee8:	80 fa 07             	cmp    dl,0x7
c0017eeb:	0f 84 4c 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef1:	83 ea 08             	sub    edx,0x8
c0017ef4:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017ef9:	80 fa 01             	cmp    dl,0x1
c0017efc:	0f 87 3b 02 00 00    	ja     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f02:	b8 90 bf 02 c0       	mov    eax,0xc002bf90
c0017f07:	c3                   	ret    
c0017f08:	80 f9 05             	cmp    cl,0x5
c0017f0b:	75 45                	jne    c0017f52 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017f0d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017f10:	b8 a0 bf 02 c0       	mov    eax,0xc002bfa0
c0017f15:	80 f9 02             	cmp    cl,0x2
c0017f18:	0f 86 1f 02 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f1e:	80 fa 04             	cmp    dl,0x4
c0017f21:	0f 84 f3 01 00 00    	je     c001811a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017f27:	80 fa 07             	cmp    dl,0x7
c0017f2a:	0f 84 0d 02 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f30:	b8 b0 bf 02 c0       	mov    eax,0xc002bfb0
c0017f35:	80 fa 08             	cmp    dl,0x8
c0017f38:	0f 84 ff 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3e:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c0017f43:	80 fa 09             	cmp    dl,0x9
c0017f46:	0f 85 f1 01 00 00    	jne    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4c:	b8 c0 bf 02 c0       	mov    eax,0xc002bfc0
c0017f51:	c3                   	ret    
c0017f52:	80 f9 06             	cmp    cl,0x6
c0017f55:	0f 85 85 01 00 00    	jne    c00180e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017f5b:	b8 d0 bf 02 c0       	mov    eax,0xc002bfd0
c0017f60:	80 fa 01             	cmp    dl,0x1
c0017f63:	0f 84 d4 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f69:	8d 42 fb             	lea    eax,[edx-0x5]
c0017f6c:	3c 01                	cmp    al,0x1
c0017f6e:	0f 86 ac 01 00 00    	jbe    c0018120 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017f74:	80 fa 03             	cmp    dl,0x3
c0017f77:	0f 84 a3 01 00 00    	je     c0018120 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017f7d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017f80:	b8 f0 bf 02 c0       	mov    eax,0xc002bff0
c0017f85:	80 f9 01             	cmp    cl,0x1
c0017f88:	0f 86 af 01 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f8e:	80 fa 09             	cmp    dl,0x9
c0017f91:	0f 84 8f 01 00 00    	je     c0018126 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017f97:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017f9a:	80 f9 01             	cmp    cl,0x1
c0017f9d:	0f 86 9a 01 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa3:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0017fa8:	80 fa 0d             	cmp    dl,0xd
c0017fab:	0f 84 8c 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb1:	b8 10 c0 02 c0       	mov    eax,0xc002c010
c0017fb6:	80 fa 0e             	cmp    dl,0xe
c0017fb9:	0f 84 7e 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fbf:	b8 20 c0 02 c0       	mov    eax,0xc002c020
c0017fc4:	80 fa 0f             	cmp    dl,0xf
c0017fc7:	0f 84 70 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fcd:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0017fd2:	80 fa 15             	cmp    dl,0x15
c0017fd5:	0f 84 62 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fdb:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017fde:	b8 20 c0 02 c0       	mov    eax,0xc002c020
c0017fe3:	80 f9 01             	cmp    cl,0x1
c0017fe6:	0f 86 51 01 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fec:	80 fa 1a             	cmp    dl,0x1a
c0017fef:	0f 84 37 01 00 00    	je     c001812c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017ff5:	80 fa 1c             	cmp    dl,0x1c
c0017ff8:	0f 84 34 01 00 00    	je     c0018132 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017ffe:	80 fa 1d             	cmp    dl,0x1d
c0018001:	0f 84 36 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018007:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c001800c:	80 fa 25             	cmp    dl,0x25
c001800f:	0f 84 28 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018015:	8d 4a da             	lea    ecx,[edx-0x26]
c0018018:	b8 40 c0 02 c0       	mov    eax,0xc002c040
c001801d:	80 f9 01             	cmp    cl,0x1
c0018020:	0f 86 17 01 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018026:	b8 60 c0 02 c0       	mov    eax,0xc002c060
c001802b:	80 fa 2a             	cmp    dl,0x2a
c001802e:	0f 84 09 01 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018034:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c0018039:	80 fa 2c             	cmp    dl,0x2c
c001803c:	0f 84 fb 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018042:	b8 60 c0 02 c0       	mov    eax,0xc002c060
c0018047:	80 fa 2d             	cmp    dl,0x2d
c001804a:	0f 84 ed 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018050:	b8 30 c0 02 c0       	mov    eax,0xc002c030
c0018055:	80 fa 2e             	cmp    dl,0x2e
c0018058:	0f 84 df 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001805e:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c0018063:	80 fa 2f             	cmp    dl,0x2f
c0018066:	0f 84 d1 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001806c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001806f:	b8 40 c0 02 c0       	mov    eax,0xc002c040
c0018074:	80 f9 01             	cmp    cl,0x1
c0018077:	0f 86 c0 00 00 00    	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001807d:	b8 70 c0 02 c0       	mov    eax,0xc002c070
c0018082:	80 fa 37             	cmp    dl,0x37
c0018085:	0f 84 b2 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001808b:	b8 80 c0 02 c0       	mov    eax,0xc002c080
c0018090:	80 fa 3a             	cmp    dl,0x3a
c0018093:	0f 84 a4 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018099:	b8 90 c0 02 c0       	mov    eax,0xc002c090
c001809e:	80 fa 3c             	cmp    dl,0x3c
c00180a1:	0f 84 96 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180a7:	b8 a0 c0 02 c0       	mov    eax,0xc002c0a0
c00180ac:	80 fa 3d             	cmp    dl,0x3d
c00180af:	0f 84 88 00 00 00    	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180b5:	b8 80 c0 02 c0       	mov    eax,0xc002c080
c00180ba:	80 fa 3e             	cmp    dl,0x3e
c00180bd:	74 7e                	je     c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180bf:	8d 42 bb             	lea    eax,[edx-0x45]
c00180c2:	3c 01                	cmp    al,0x1
c00180c4:	76 72                	jbe    c0018138 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00180c6:	80 fa 3f             	cmp    dl,0x3f
c00180c9:	74 6d                	je     c0018138 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00180cb:	80 fa 4a             	cmp    dl,0x4a
c00180ce:	74 0a                	je     c00180da <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00180d0:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c00180d5:	80 fa 4d             	cmp    dl,0x4d
c00180d8:	75 63                	jne    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180da:	b8 70 c0 02 c0       	mov    eax,0xc002c070
c00180df:	c3                   	ret    
c00180e0:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c00180e5:	80 f9 0b             	cmp    cl,0xb
c00180e8:	75 0a                	jne    c00180f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00180ea:	fe ca                	dec    dl
c00180ec:	75 4f                	jne    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180ee:	b8 b0 c0 02 c0       	mov    eax,0xc002c0b0
c00180f3:	c3                   	ret    
c00180f4:	80 f9 0f             	cmp    cl,0xf
c00180f7:	75 44                	jne    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180f9:	b8 c0 c0 02 c0       	mov    eax,0xc002c0c0
c00180fe:	80 fa 02             	cmp    dl,0x2
c0018101:	76 3a                	jbe    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018103:	8d 42 fd             	lea    eax,[edx-0x3]
c0018106:	3c 01                	cmp    al,0x1
c0018108:	76 0a                	jbe    c0018114 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001810a:	b8 5e a3 02 c0       	mov    eax,0xc002a35e
c001810f:	80 fa 06             	cmp    dl,0x6
c0018112:	75 29                	jne    c001813d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018114:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0018119:	c3                   	ret    
c001811a:	b8 b0 bf 02 c0       	mov    eax,0xc002bfb0
c001811f:	c3                   	ret    
c0018120:	b8 e0 bf 02 c0       	mov    eax,0xc002bfe0
c0018125:	c3                   	ret    
c0018126:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c001812b:	c3                   	ret    
c001812c:	b8 30 c0 02 c0       	mov    eax,0xc002c030
c0018131:	c3                   	ret    
c0018132:	b8 40 c0 02 c0       	mov    eax,0xc002c040
c0018137:	c3                   	ret    
c0018138:	b8 90 c0 02 c0       	mov    eax,0xc002c090
c001813d:	c3                   	ret    

c001813e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001813e:	60                   	pusha  
c001813f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018147:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001814b:	9c                   	pushf  
c001814c:	fa                   	cli    
c001814d:	0f 09                	wbinvd 
c001814f:	0f 30                	wrmsr  
c0018151:	9d                   	popf   
c0018152:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018156:	89 02                	mov    DWORD PTR [edx],eax
c0018158:	61                   	popa   
c0018159:	c3                   	ret    

c001815a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001815a:	60                   	pusha  
c001815b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001815f:	9c                   	pushf  
c0018160:	fa                   	cli    
c0018161:	0f 09                	wbinvd 
c0018163:	31 c0                	xor    eax,eax
c0018165:	31 d2                	xor    edx,edx
c0018167:	0f 32                	rdmsr  
c0018169:	9d                   	popf   
c001816a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001816e:	89 02                	mov    DWORD PTR [edx],eax
c0018170:	61                   	popa   
c0018171:	c3                   	ret    

c0018172 <CPU::AMD_K6_writeback(int, int, int)>:
c0018172:	56                   	push   esi
c0018173:	53                   	push   ebx
c0018174:	83 ec 10             	sub    esp,0x10
c0018177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001817b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018180:	75 5d                	jne    c00181df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018182:	83 f8 08             	cmp    eax,0x8
c0018185:	75 09                	jne    c0018190 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018187:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001818c:	7e 13                	jle    c00181a1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001818e:	eb 30                	jmp    c00181c0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018190:	83 f8 06             	cmp    eax,0x6
c0018193:	7c 4a                	jl     c00181df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018195:	83 f8 07             	cmp    eax,0x7
c0018198:	7e 07                	jle    c00181a1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001819a:	83 f8 09             	cmp    eax,0x9
c001819d:	74 21                	je     c00181c0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001819f:	eb 3e                	jmp    c00181df <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00181a1:	89 e6                	mov    esi,esp
c00181a3:	8b 1d 04 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd04
c00181a9:	56                   	push   esi
c00181aa:	c1 eb 15             	shr    ebx,0x15
c00181ad:	68 82 00 00 c0       	push   0xc0000082
c00181b2:	83 e3 7e             	and    ebx,0x7e
c00181b5:	e8 a0 ff ff ff       	call   c001815a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00181ba:	56                   	push   esi
c00181bb:	6a 00                	push   0x0
c00181bd:	53                   	push   ebx
c00181be:	eb 12                	jmp    c00181d2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00181c0:	89 e3                	mov    ebx,esp
c00181c2:	53                   	push   ebx
c00181c3:	68 82 00 00 c0       	push   0xc0000082
c00181c8:	e8 8d ff ff ff       	call   c001815a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00181cd:	53                   	push   ebx
c00181ce:	6a 00                	push   0x0
c00181d0:	6a 00                	push   0x0
c00181d2:	68 82 00 00 c0       	push   0xc0000082
c00181d7:	e8 62 ff ff ff       	call   c001813e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00181dc:	83 c4 18             	add    esp,0x18
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	5b                   	pop    ebx
c00181e3:	5e                   	pop    esi
c00181e4:	c3                   	ret    
c00181e5:	90                   	nop

c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00181e6:	55                   	push   ebp
c00181e7:	57                   	push   edi
c00181e8:	56                   	push   esi
c00181e9:	53                   	push   ebx
c00181ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00181f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00181f6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00181fa:	39 05 e0 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1e0,eax
c0018200:	75 23                	jne    c0018225 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018202:	a1 ec d7 02 c0       	mov    eax,ds:0xc002d7ec
c0018207:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001820b:	89 06                	mov    DWORD PTR [esi],eax
c001820d:	a1 e8 d7 02 c0       	mov    eax,ds:0xc002d7e8
c0018212:	89 07                	mov    DWORD PTR [edi],eax
c0018214:	a1 e4 d7 02 c0       	mov    eax,ds:0xc002d7e4
c0018219:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001821c:	a1 e0 d7 02 c0       	mov    eax,ds:0xc002d7e0
c0018221:	89 02                	mov    DWORD PTR [edx],eax
c0018223:	eb 3f                	jmp    c0018264 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018225:	31 c9                	xor    ecx,ecx
c0018227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001822b:	0f a2                	cpuid  
c001822d:	89 06                	mov    DWORD PTR [esi],eax
c001822f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018231:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018235:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018238:	89 10                	mov    DWORD PTR [eax],edx
c001823a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001823e:	a3 e0 c1 02 c0       	mov    ds:0xc002c1e0,eax
c0018243:	8b 06                	mov    eax,DWORD PTR [esi]
c0018245:	a3 ec d7 02 c0       	mov    ds:0xc002d7ec,eax
c001824a:	8b 07                	mov    eax,DWORD PTR [edi]
c001824c:	a3 e8 d7 02 c0       	mov    ds:0xc002d7e8,eax
c0018251:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018254:	a3 e4 d7 02 c0       	mov    ds:0xc002d7e4,eax
c0018259:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001825d:	8b 00                	mov    eax,DWORD PTR [eax]
c001825f:	a3 e0 d7 02 c0       	mov    ds:0xc002d7e0,eax
c0018264:	5b                   	pop    ebx
c0018265:	5e                   	pop    esi
c0018266:	5f                   	pop    edi
c0018267:	5d                   	pop    ebp
c0018268:	c3                   	ret    
c0018269:	90                   	nop

c001826a <CPU::cpuidCheckEDX(unsigned int)>:
c001826a:	83 ec 10             	sub    esp,0x10
c001826d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018271:	50                   	push   eax
c0018272:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018276:	50                   	push   eax
c0018277:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001827b:	50                   	push   eax
c001827c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018280:	50                   	push   eax
c0018281:	6a 01                	push   0x1
c0018283:	e8 5e ff ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018288:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001828c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018290:	0f 95 c0             	setne  al
c0018293:	83 c4 24             	add    esp,0x24
c0018296:	c3                   	ret    
c0018297:	90                   	nop

c0018298 <CPU::cpuidCheckECX(unsigned int)>:
c0018298:	83 ec 10             	sub    esp,0x10
c001829b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001829f:	50                   	push   eax
c00182a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182a4:	50                   	push   eax
c00182a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182a9:	50                   	push   eax
c00182aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182ae:	50                   	push   eax
c00182af:	6a 01                	push   0x1
c00182b1:	e8 30 ff ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00182b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182ba:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00182be:	0f 95 c0             	setne  al
c00182c1:	83 c4 24             	add    esp,0x24
c00182c4:	c3                   	ret    
c00182c5:	90                   	nop

c00182c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00182c6:	83 ec 10             	sub    esp,0x10
c00182c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182cd:	50                   	push   eax
c00182ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182d2:	50                   	push   eax
c00182d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182d7:	50                   	push   eax
c00182d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182dc:	50                   	push   eax
c00182dd:	6a 07                	push   0x7
c00182df:	e8 02 ff ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00182e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182e8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00182ec:	0f 95 c0             	setne  al
c00182ef:	83 c4 24             	add    esp,0x24
c00182f2:	c3                   	ret    
c00182f3:	90                   	nop

c00182f4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00182f4:	83 ec 10             	sub    esp,0x10
c00182f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00182fb:	50                   	push   eax
c00182fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018300:	50                   	push   eax
c0018301:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018305:	50                   	push   eax
c0018306:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001830a:	50                   	push   eax
c001830b:	6a 07                	push   0x7
c001830d:	e8 d4 fe ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018312:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018316:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001831a:	0f 95 c0             	setne  al
c001831d:	83 c4 24             	add    esp,0x24
c0018320:	c3                   	ret    
c0018321:	90                   	nop

c0018322 <CPU::CPU()>:
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018329:	83 ec 08             	sub    esp,0x8
c001832c:	68 5e a3 02 c0       	push   0xc002a35e
c0018331:	50                   	push   eax
c0018332:	e8 6f bb ff ff       	call   c0013ea6 <Device::Device(char const*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	ba 38 a4 02 c0       	mov    edx,0xc002a438
c001833f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018343:	89 10                	mov    DWORD PTR [eax],edx
c0018345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018349:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018357:	05 78 01 00 00       	add    eax,0x178
c001835c:	83 ec 0c             	sub    esp,0xc
c001835f:	50                   	push   eax
c0018360:	e8 9d 6a ff ff       	call   c000ee02 <GDT::GDT()>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001836c:	05 7c 09 00 00       	add    eax,0x97c
c0018371:	83 ec 0c             	sub    esp,0xc
c0018374:	50                   	push   eax
c0018375:	e8 ea 6c ff ff       	call   c000f064 <IDT::IDT()>
c001837a:	83 c4 10             	add    esp,0x10
c001837d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018381:	05 7c 11 00 00       	add    eax,0x117c
c0018386:	83 ec 0c             	sub    esp,0xc
c0018389:	50                   	push   eax
c001838a:	e8 41 8e ff ff       	call   c00111d0 <TSS::TSS()>
c001838f:	83 c4 10             	add    esp,0x10
c0018392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018396:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001839d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183a1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00183ab:	90                   	nop
c00183ac:	83 c4 0c             	add    esp,0xc
c00183af:	c3                   	ret    

c00183b0 <CPU::displayFeatures()>:
c00183b0:	53                   	push   ebx
c00183b1:	83 ec 10             	sub    esp,0x10
c00183b4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183b8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00183be:	68 6c a0 02 c0       	push   0xc002a06c
c00183c3:	e8 c7 a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00183c8:	59                   	pop    ecx
c00183c9:	58                   	pop    eax
c00183ca:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00183d0:	50                   	push   eax
c00183d1:	68 7d a0 02 c0       	push   0xc002a07d
c00183d6:	e8 b4 a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00183db:	58                   	pop    eax
c00183dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00183e2:	5a                   	pop    edx
c00183e3:	c1 e8 0e             	shr    eax,0xe
c00183e6:	0f b6 c0             	movzx  eax,al
c00183e9:	50                   	push   eax
c00183ea:	68 8e a0 02 c0       	push   0xc002a08e
c00183ef:	e8 9b a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00183f4:	59                   	pop    ecx
c00183f5:	58                   	pop    eax
c00183f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00183fc:	66 c1 e8 06          	shr    ax,0x6
c0018400:	0f b6 c0             	movzx  eax,al
c0018403:	50                   	push   eax
c0018404:	68 9f a0 02 c0       	push   0xc002a09f
c0018409:	e8 81 a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001840e:	c7 04 24 3b a5 02 c0 	mov    DWORD PTR [esp],0xc002a53b
c0018415:	e8 75 a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018422:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018429:	74 05                	je     c0018430 <CPU::displayFeatures()+0x80>
c001842b:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0018430:	52                   	push   edx
c0018431:	52                   	push   edx
c0018432:	50                   	push   eax
c0018433:	68 b0 a0 02 c0       	push   0xc002a0b0
c0018438:	e8 52 a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0018445:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001844c:	78 05                	js     c0018453 <CPU::displayFeatures()+0xa3>
c001844e:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018453:	51                   	push   ecx
c0018454:	51                   	push   ecx
c0018455:	50                   	push   eax
c0018456:	68 c7 a0 02 c0       	push   0xc002a0c7
c001845b:	e8 2f a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0018468:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001846f:	75 05                	jne    c0018476 <CPU::displayFeatures()+0xc6>
c0018471:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018476:	52                   	push   edx
c0018477:	52                   	push   edx
c0018478:	50                   	push   eax
c0018479:	68 de a0 02 c0       	push   0xc002a0de
c001847e:	e8 0c a4 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018483:	83 c4 10             	add    esp,0x10
c0018486:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c001848b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018492:	75 05                	jne    c0018499 <CPU::displayFeatures()+0xe9>
c0018494:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018499:	51                   	push   ecx
c001849a:	51                   	push   ecx
c001849b:	50                   	push   eax
c001849c:	68 f5 a0 02 c0       	push   0xc002a0f5
c00184a1:	e8 e9 a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00184ae:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00184b5:	75 05                	jne    c00184bc <CPU::displayFeatures()+0x10c>
c00184b7:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c00184bc:	52                   	push   edx
c00184bd:	52                   	push   edx
c00184be:	50                   	push   eax
c00184bf:	68 0c a1 02 c0       	push   0xc002a10c
c00184c4:	e8 c6 a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00184d1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00184d8:	75 05                	jne    c00184df <CPU::displayFeatures()+0x12f>
c00184da:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c00184df:	51                   	push   ecx
c00184e0:	51                   	push   ecx
c00184e1:	50                   	push   eax
c00184e2:	68 23 a1 02 c0       	push   0xc002a123
c00184e7:	e8 a3 a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00184ec:	83 c4 10             	add    esp,0x10
c00184ef:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00184f4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00184fb:	75 05                	jne    c0018502 <CPU::displayFeatures()+0x152>
c00184fd:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018502:	52                   	push   edx
c0018503:	52                   	push   edx
c0018504:	50                   	push   eax
c0018505:	68 3a a1 02 c0       	push   0xc002a13a
c001850a:	e8 80 a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001850f:	83 c4 10             	add    esp,0x10
c0018512:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0018517:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001851e:	75 05                	jne    c0018525 <CPU::displayFeatures()+0x175>
c0018520:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018525:	51                   	push   ecx
c0018526:	51                   	push   ecx
c0018527:	50                   	push   eax
c0018528:	68 51 a1 02 c0       	push   0xc002a151
c001852d:	e8 5d a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c001853a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018541:	75 05                	jne    c0018548 <CPU::displayFeatures()+0x198>
c0018543:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c0018548:	52                   	push   edx
c0018549:	52                   	push   edx
c001854a:	50                   	push   eax
c001854b:	68 68 a1 02 c0       	push   0xc002a168
c0018550:	e8 3a a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018555:	83 c4 10             	add    esp,0x10
c0018558:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c001855d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018564:	75 05                	jne    c001856b <CPU::displayFeatures()+0x1bb>
c0018566:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c001856b:	51                   	push   ecx
c001856c:	51                   	push   ecx
c001856d:	50                   	push   eax
c001856e:	68 7f a1 02 c0       	push   0xc002a17f
c0018573:	e8 17 a3 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018578:	83 c4 10             	add    esp,0x10
c001857b:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c0018580:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018587:	75 05                	jne    c001858e <CPU::displayFeatures()+0x1de>
c0018589:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c001858e:	52                   	push   edx
c001858f:	52                   	push   edx
c0018590:	50                   	push   eax
c0018591:	68 96 a1 02 c0       	push   0xc002a196
c0018596:	e8 f4 a2 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00185a3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00185aa:	75 05                	jne    c00185b1 <CPU::displayFeatures()+0x201>
c00185ac:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c00185b1:	51                   	push   ecx
c00185b2:	51                   	push   ecx
c00185b3:	50                   	push   eax
c00185b4:	68 ad a1 02 c0       	push   0xc002a1ad
c00185b9:	e8 d1 a2 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00185c6:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00185cd:	75 05                	jne    c00185d4 <CPU::displayFeatures()+0x224>
c00185cf:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c00185d4:	52                   	push   edx
c00185d5:	52                   	push   edx
c00185d6:	50                   	push   eax
c00185d7:	68 c4 a1 02 c0       	push   0xc002a1c4
c00185dc:	e8 ae a2 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00185e1:	83 c4 10             	add    esp,0x10
c00185e4:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c00185e9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00185f0:	78 05                	js     c00185f7 <CPU::displayFeatures()+0x247>
c00185f2:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c00185f7:	51                   	push   ecx
c00185f8:	51                   	push   ecx
c00185f9:	50                   	push   eax
c00185fa:	68 db a1 02 c0       	push   0xc002a1db
c00185ff:	e8 8b a2 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018604:	83 c4 10             	add    esp,0x10
c0018607:	b8 12 8c 02 c0       	mov    eax,0xc0028c12
c001860c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018613:	75 05                	jne    c001861a <CPU::displayFeatures()+0x26a>
c0018615:	b8 16 8c 02 c0       	mov    eax,0xc0028c16
c001861a:	52                   	push   edx
c001861b:	52                   	push   edx
c001861c:	50                   	push   eax
c001861d:	68 f2 a1 02 c0       	push   0xc002a1f2
c0018622:	e8 68 a2 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0018627:	83 c4 18             	add    esp,0x18
c001862a:	5b                   	pop    ebx
c001862b:	c3                   	ret    

c001862c <CPU::detectFeatures()>:
c001862c:	55                   	push   ebp
c001862d:	57                   	push   edi
c001862e:	56                   	push   esi
c001862f:	53                   	push   ebx
c0018630:	83 ec 50             	sub    esp,0x50
c0018633:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018637:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018641:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018648:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001864e:	6a 0d                	push   0xd
c0018650:	6a 00                	push   0x0
c0018652:	57                   	push   edi
c0018653:	e8 33 80 fe ff       	call   c000068b <memset>
c0018658:	83 c4 10             	add    esp,0x10
c001865b:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0018660:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018667:	0f 84 20 09 00 00    	je     c0018f8d <CPU::detectFeatures()+0x961>
c001866d:	83 ec 0c             	sub    esp,0xc
c0018670:	6a 10                	push   0x10
c0018672:	e8 f3 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c0018677:	83 e0 01             	and    eax,0x1
c001867a:	8d 14 00             	lea    edx,[eax+eax*1]
c001867d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018683:	83 e0 fd             	and    eax,0xfffffffd
c0018686:	09 d0                	or     eax,edx
c0018688:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001868e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018695:	e8 d0 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c001869a:	83 e0 01             	and    eax,0x1
c001869d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00186a4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00186aa:	83 e0 fb             	and    eax,0xfffffffb
c00186ad:	09 d0                	or     eax,edx
c00186af:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00186b5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00186bc:	e8 a9 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c00186c1:	83 e0 01             	and    eax,0x1
c00186c4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00186cb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00186d1:	83 e0 f7             	and    eax,0xfffffff7
c00186d4:	09 d0                	or     eax,edx
c00186d6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00186dc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00186e3:	e8 82 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c00186e8:	83 e0 01             	and    eax,0x1
c00186eb:	c1 e0 04             	shl    eax,0x4
c00186ee:	88 c2                	mov    dl,al
c00186f0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00186f6:	83 e0 ef             	and    eax,0xffffffef
c00186f9:	09 d0                	or     eax,edx
c00186fb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018701:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018708:	e8 5d fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c001870d:	83 e0 01             	and    eax,0x1
c0018710:	c1 e0 05             	shl    eax,0x5
c0018713:	88 c2                	mov    dl,al
c0018715:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001871b:	83 e0 df             	and    eax,0xffffffdf
c001871e:	09 d0                	or     eax,edx
c0018720:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018726:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001872d:	e8 38 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c0018732:	83 e0 01             	and    eax,0x1
c0018735:	8d 14 00             	lea    edx,[eax+eax*1]
c0018738:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001873e:	83 e0 fd             	and    eax,0xfffffffd
c0018741:	09 d0                	or     eax,edx
c0018743:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018749:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018750:	e8 15 fb ff ff       	call   c001826a <CPU::cpuidCheckEDX(unsigned int)>
c0018755:	83 e0 01             	and    eax,0x1
c0018758:	c1 e0 06             	shl    eax,0x6
c001875b:	88 c2                	mov    dl,al
c001875d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018763:	83 e0 bf             	and    eax,0xffffffbf
c0018766:	09 d0                	or     eax,edx
c0018768:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001876e:	58                   	pop    eax
c001876f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018773:	56                   	push   esi
c0018774:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018778:	55                   	push   ebp
c0018779:	8d 44 24 28          	lea    eax,[esp+0x28]
c001877d:	50                   	push   eax
c001877e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018782:	52                   	push   edx
c0018783:	6a 00                	push   0x0
c0018785:	e8 5c fa ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001878a:	83 c4 1c             	add    esp,0x1c
c001878d:	6a 04                	push   0x4
c001878f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018793:	50                   	push   eax
c0018794:	57                   	push   edi
c0018795:	e8 bb 7e fe ff       	call   c0000655 <memcpy>
c001879a:	83 c4 0c             	add    esp,0xc
c001879d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00187a3:	6a 04                	push   0x4
c00187a5:	56                   	push   esi
c00187a6:	50                   	push   eax
c00187a7:	e8 a9 7e fe ff       	call   c0000655 <memcpy>
c00187ac:	83 c4 0c             	add    esp,0xc
c00187af:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00187b5:	6a 04                	push   0x4
c00187b7:	55                   	push   ebp
c00187b8:	50                   	push   eax
c00187b9:	e8 97 7e fe ff       	call   c0000655 <memcpy>
c00187be:	58                   	pop    eax
c00187bf:	5a                   	pop    edx
c00187c0:	68 09 a2 02 c0       	push   0xc002a209
c00187c5:	57                   	push   edi
c00187c6:	e8 b0 7f fe ff       	call   c000077b <strcmp>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	85 c0                	test   eax,eax
c00187d0:	75 0f                	jne    c00187e1 <CPU::detectFeatures()+0x1b5>
c00187d2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00187dc:	e9 22 02 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c00187e1:	50                   	push   eax
c00187e2:	50                   	push   eax
c00187e3:	68 16 a2 02 c0       	push   0xc002a216
c00187e8:	57                   	push   edi
c00187e9:	e8 8d 7f fe ff       	call   c000077b <strcmp>
c00187ee:	83 c4 10             	add    esp,0x10
c00187f1:	85 c0                	test   eax,eax
c00187f3:	74 dd                	je     c00187d2 <CPU::detectFeatures()+0x1a6>
c00187f5:	51                   	push   ecx
c00187f6:	51                   	push   ecx
c00187f7:	68 23 a2 02 c0       	push   0xc002a223
c00187fc:	57                   	push   edi
c00187fd:	e8 79 7f fe ff       	call   c000077b <strcmp>
c0018802:	83 c4 10             	add    esp,0x10
c0018805:	85 c0                	test   eax,eax
c0018807:	74 2a                	je     c0018833 <CPU::detectFeatures()+0x207>
c0018809:	52                   	push   edx
c001880a:	52                   	push   edx
c001880b:	68 30 a2 02 c0       	push   0xc002a230
c0018810:	57                   	push   edi
c0018811:	e8 65 7f fe ff       	call   c000077b <strcmp>
c0018816:	83 c4 10             	add    esp,0x10
c0018819:	85 c0                	test   eax,eax
c001881b:	74 16                	je     c0018833 <CPU::detectFeatures()+0x207>
c001881d:	50                   	push   eax
c001881e:	50                   	push   eax
c001881f:	68 3d a2 02 c0       	push   0xc002a23d
c0018824:	57                   	push   edi
c0018825:	e8 51 7f fe ff       	call   c000077b <strcmp>
c001882a:	83 c4 10             	add    esp,0x10
c001882d:	85 c0                	test   eax,eax
c001882f:	74 48                	je     c0018879 <CPU::detectFeatures()+0x24d>
c0018831:	eb 0f                	jmp    c0018842 <CPU::detectFeatures()+0x216>
c0018833:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001883d:	e9 c1 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c0018842:	50                   	push   eax
c0018843:	50                   	push   eax
c0018844:	68 4a a2 02 c0       	push   0xc002a24a
c0018849:	57                   	push   edi
c001884a:	e8 2c 7f fe ff       	call   c000077b <strcmp>
c001884f:	83 c4 10             	add    esp,0x10
c0018852:	85 c0                	test   eax,eax
c0018854:	74 23                	je     c0018879 <CPU::detectFeatures()+0x24d>
c0018856:	50                   	push   eax
c0018857:	50                   	push   eax
c0018858:	68 57 a2 02 c0       	push   0xc002a257
c001885d:	57                   	push   edi
c001885e:	e8 18 7f fe ff       	call   c000077b <strcmp>
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	85 c0                	test   eax,eax
c0018868:	75 1e                	jne    c0018888 <CPU::detectFeatures()+0x25c>
c001886a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018874:	e9 8a 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c0018879:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018883:	e9 7b 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c0018888:	50                   	push   eax
c0018889:	50                   	push   eax
c001888a:	68 64 a2 02 c0       	push   0xc002a264
c001888f:	57                   	push   edi
c0018890:	e8 e6 7e fe ff       	call   c000077b <strcmp>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	85 c0                	test   eax,eax
c001889a:	75 0f                	jne    c00188ab <CPU::detectFeatures()+0x27f>
c001889c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00188a6:	e9 58 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c00188ab:	50                   	push   eax
c00188ac:	50                   	push   eax
c00188ad:	68 23 a2 02 c0       	push   0xc002a223
c00188b2:	57                   	push   edi
c00188b3:	e8 c3 7e fe ff       	call   c000077b <strcmp>
c00188b8:	83 c4 10             	add    esp,0x10
c00188bb:	85 c0                	test   eax,eax
c00188bd:	75 0f                	jne    c00188ce <CPU::detectFeatures()+0x2a2>
c00188bf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00188c9:	e9 35 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c00188ce:	50                   	push   eax
c00188cf:	50                   	push   eax
c00188d0:	68 71 a2 02 c0       	push   0xc002a271
c00188d5:	57                   	push   edi
c00188d6:	e8 a0 7e fe ff       	call   c000077b <strcmp>
c00188db:	83 c4 10             	add    esp,0x10
c00188de:	85 c0                	test   eax,eax
c00188e0:	75 0f                	jne    c00188f1 <CPU::detectFeatures()+0x2c5>
c00188e2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00188ec:	e9 12 01 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c00188f1:	51                   	push   ecx
c00188f2:	51                   	push   ecx
c00188f3:	68 7e a2 02 c0       	push   0xc002a27e
c00188f8:	57                   	push   edi
c00188f9:	e8 7d 7e fe ff       	call   c000077b <strcmp>
c00188fe:	83 c4 10             	add    esp,0x10
c0018901:	85 c0                	test   eax,eax
c0018903:	75 0f                	jne    c0018914 <CPU::detectFeatures()+0x2e8>
c0018905:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001890f:	e9 ef 00 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c0018914:	52                   	push   edx
c0018915:	52                   	push   edx
c0018916:	68 8b a2 02 c0       	push   0xc002a28b
c001891b:	57                   	push   edi
c001891c:	e8 5a 7e fe ff       	call   c000077b <strcmp>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	85 c0                	test   eax,eax
c0018926:	75 0f                	jne    c0018937 <CPU::detectFeatures()+0x30b>
c0018928:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018932:	e9 cc 00 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c0018937:	50                   	push   eax
c0018938:	50                   	push   eax
c0018939:	68 98 a2 02 c0       	push   0xc002a298
c001893e:	57                   	push   edi
c001893f:	e8 37 7e fe ff       	call   c000077b <strcmp>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	85 c0                	test   eax,eax
c0018949:	75 0f                	jne    c001895a <CPU::detectFeatures()+0x32e>
c001894b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018955:	e9 a9 00 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c001895a:	50                   	push   eax
c001895b:	50                   	push   eax
c001895c:	68 a5 a2 02 c0       	push   0xc002a2a5
c0018961:	57                   	push   edi
c0018962:	e8 14 7e fe ff       	call   c000077b <strcmp>
c0018967:	83 c4 10             	add    esp,0x10
c001896a:	85 c0                	test   eax,eax
c001896c:	75 0f                	jne    c001897d <CPU::detectFeatures()+0x351>
c001896e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018978:	e9 86 00 00 00       	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c001897d:	50                   	push   eax
c001897e:	50                   	push   eax
c001897f:	68 b2 a2 02 c0       	push   0xc002a2b2
c0018984:	57                   	push   edi
c0018985:	e8 f1 7d fe ff       	call   c000077b <strcmp>
c001898a:	83 c4 10             	add    esp,0x10
c001898d:	85 c0                	test   eax,eax
c001898f:	75 0c                	jne    c001899d <CPU::detectFeatures()+0x371>
c0018991:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001899b:	eb 66                	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c001899d:	50                   	push   eax
c001899e:	50                   	push   eax
c001899f:	68 bf a2 02 c0       	push   0xc002a2bf
c00189a4:	57                   	push   edi
c00189a5:	e8 d1 7d fe ff       	call   c000077b <strcmp>
c00189aa:	83 c4 10             	add    esp,0x10
c00189ad:	85 c0                	test   eax,eax
c00189af:	75 0c                	jne    c00189bd <CPU::detectFeatures()+0x391>
c00189b1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00189bb:	eb 46                	jmp    c0018a03 <CPU::detectFeatures()+0x3d7>
c00189bd:	50                   	push   eax
c00189be:	50                   	push   eax
c00189bf:	68 cc a2 02 c0       	push   0xc002a2cc
c00189c4:	57                   	push   edi
c00189c5:	e8 b1 7d fe ff       	call   c000077b <strcmp>
c00189ca:	83 c4 10             	add    esp,0x10
c00189cd:	85 c0                	test   eax,eax
c00189cf:	74 e0                	je     c00189b1 <CPU::detectFeatures()+0x385>
c00189d1:	50                   	push   eax
c00189d2:	50                   	push   eax
c00189d3:	68 d9 a2 02 c0       	push   0xc002a2d9
c00189d8:	57                   	push   edi
c00189d9:	e8 9d 7d fe ff       	call   c000077b <strcmp>
c00189de:	83 c4 10             	add    esp,0x10
c00189e1:	85 c0                	test   eax,eax
c00189e3:	74 cc                	je     c00189b1 <CPU::detectFeatures()+0x385>
c00189e5:	51                   	push   ecx
c00189e6:	51                   	push   ecx
c00189e7:	68 e6 a2 02 c0       	push   0xc002a2e6
c00189ec:	57                   	push   edi
c00189ed:	e8 89 7d fe ff       	call   c000077b <strcmp>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	85 c0                	test   eax,eax
c00189f7:	74 b8                	je     c00189b1 <CPU::detectFeatures()+0x385>
c00189f9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018a03:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018a08:	0f 86 be 00 00 00    	jbe    c0018acc <CPU::detectFeatures()+0x4a0>
c0018a0e:	83 ec 0c             	sub    esp,0xc
c0018a11:	68 80 00 00 00       	push   0x80
c0018a16:	e8 ab f8 ff ff       	call   c00182c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018a1b:	83 e0 01             	and    eax,0x1
c0018a1e:	c1 e0 06             	shl    eax,0x6
c0018a21:	88 c2                	mov    dl,al
c0018a23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a29:	83 e0 bf             	and    eax,0xffffffbf
c0018a2c:	09 d0                	or     eax,edx
c0018a2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a34:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018a3b:	e8 86 f8 ff ff       	call   c00182c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018a40:	83 e0 01             	and    eax,0x1
c0018a43:	c1 e0 04             	shl    eax,0x4
c0018a46:	88 c2                	mov    dl,al
c0018a48:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a4e:	83 e0 ef             	and    eax,0xffffffef
c0018a51:	09 d0                	or     eax,edx
c0018a53:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a59:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018a60:	e8 61 f8 ff ff       	call   c00182c6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018a65:	c1 e0 07             	shl    eax,0x7
c0018a68:	88 c2                	mov    dl,al
c0018a6a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a70:	83 e0 7f             	and    eax,0x7f
c0018a73:	09 d0                	or     eax,edx
c0018a75:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a7b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018a82:	e8 6d f8 ff ff       	call   c00182f4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018a87:	83 e0 01             	and    eax,0x1
c0018a8a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018a91:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a97:	83 e0 f7             	and    eax,0xfffffff7
c0018a9a:	09 d0                	or     eax,edx
c0018a9c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018aa2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018aa9:	e8 46 f8 ff ff       	call   c00182f4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	83 e0 01             	and    eax,0x1
c0018ab4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018abb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ac1:	83 e0 fb             	and    eax,0xfffffffb
c0018ac4:	09 d0                	or     eax,edx
c0018ac6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018acc:	83 ec 0c             	sub    esp,0xc
c0018acf:	56                   	push   esi
c0018ad0:	55                   	push   ebp
c0018ad1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018ad5:	57                   	push   edi
c0018ad6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ada:	50                   	push   eax
c0018adb:	6a 01                	push   0x1
c0018add:	e8 04 f7 ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ae2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018ae6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018aec:	88 ca                	mov    dl,cl
c0018aee:	83 e0 f0             	and    eax,0xfffffff0
c0018af1:	83 e2 0f             	and    edx,0xf
c0018af4:	09 d0                	or     eax,edx
c0018af6:	88 ca                	mov    dl,cl
c0018af8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018afe:	c0 ea 04             	shr    dl,0x4
c0018b01:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018b05:	0f b6 c2             	movzx  eax,dl
c0018b08:	83 c4 20             	add    esp,0x20
c0018b0b:	c1 e0 06             	shl    eax,0x6
c0018b0e:	89 c5                	mov    ebp,eax
c0018b10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b16:	66 25 3f c0          	and    ax,0xc03f
c0018b1a:	09 e8                	or     eax,ebp
c0018b1c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018b23:	89 c8                	mov    eax,ecx
c0018b25:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018b2b:	c1 e8 08             	shr    eax,0x8
c0018b2e:	83 e2 3f             	and    edx,0x3f
c0018b31:	83 e0 0f             	and    eax,0xf
c0018b34:	89 c5                	mov    ebp,eax
c0018b36:	c1 e5 06             	shl    ebp,0x6
c0018b39:	09 d5                	or     ebp,edx
c0018b3b:	89 ea                	mov    edx,ebp
c0018b3d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018b43:	88 c2                	mov    dl,al
c0018b45:	c0 ea 02             	shr    dl,0x2
c0018b48:	89 d5                	mov    ebp,edx
c0018b4a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018b50:	83 e2 c0             	and    edx,0xffffffc0
c0018b53:	09 d5                	or     ebp,edx
c0018b55:	89 ea                	mov    edx,ebp
c0018b57:	89 cd                	mov    ebp,ecx
c0018b59:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018b5f:	c1 ed 0c             	shr    ebp,0xc
c0018b62:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018b68:	83 e5 03             	and    ebp,0x3
c0018b6b:	83 e2 cf             	and    edx,0xffffffcf
c0018b6e:	c1 e5 04             	shl    ebp,0x4
c0018b71:	09 d5                	or     ebp,edx
c0018b73:	3c 06                	cmp    al,0x6
c0018b75:	89 ea                	mov    edx,ebp
c0018b77:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018b7d:	74 04                	je     c0018b83 <CPU::detectFeatures()+0x557>
c0018b7f:	3c 0f                	cmp    al,0xf
c0018b81:	75 5c                	jne    c0018bdf <CPU::detectFeatures()+0x5b3>
c0018b83:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018b87:	89 cd                	mov    ebp,ecx
c0018b89:	c1 ed 10             	shr    ebp,0x10
c0018b8c:	c1 e5 04             	shl    ebp,0x4
c0018b8f:	09 ea                	or     edx,ebp
c0018b91:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018b97:	0f b6 d2             	movzx  edx,dl
c0018b9a:	66 81 e5 3f c0       	and    bp,0xc03f
c0018b9f:	c1 e2 06             	shl    edx,0x6
c0018ba2:	09 ea                	or     edx,ebp
c0018ba4:	3c 0f                	cmp    al,0xf
c0018ba6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018bad:	75 30                	jne    c0018bdf <CPU::detectFeatures()+0x5b3>
c0018baf:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018bb5:	c1 e9 14             	shr    ecx,0x14
c0018bb8:	83 e0 3f             	and    eax,0x3f
c0018bbb:	83 c1 0f             	add    ecx,0xf
c0018bbe:	88 ca                	mov    dl,cl
c0018bc0:	c0 e9 02             	shr    cl,0x2
c0018bc3:	c1 e2 06             	shl    edx,0x6
c0018bc6:	09 d0                	or     eax,edx
c0018bc8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018bce:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018bd4:	83 e0 c0             	and    eax,0xffffffc0
c0018bd7:	09 c1                	or     ecx,eax
c0018bd9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018bdf:	83 ec 0c             	sub    esp,0xc
c0018be2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018be9:	56                   	push   esi
c0018bea:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018bee:	50                   	push   eax
c0018bef:	57                   	push   edi
c0018bf0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018bf4:	55                   	push   ebp
c0018bf5:	68 00 00 00 80       	push   0x80000000
c0018bfa:	e8 e7 f5 ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bff:	83 c4 20             	add    esp,0x20
c0018c02:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018c0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c0e:	76 1e                	jbe    c0018c2e <CPU::detectFeatures()+0x602>
c0018c10:	83 ec 0c             	sub    esp,0xc
c0018c13:	56                   	push   esi
c0018c14:	50                   	push   eax
c0018c15:	57                   	push   edi
c0018c16:	55                   	push   ebp
c0018c17:	68 01 00 00 80       	push   0x80000001
c0018c1c:	e8 c5 f5 ff ff       	call   c00181e6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c21:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018c2b:	83 c4 20             	add    esp,0x20
c0018c2e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018c34:	83 f8 01             	cmp    eax,0x1
c0018c37:	75 6f                	jne    c0018ca8 <CPU::detectFeatures()+0x67c>
c0018c39:	51                   	push   ecx
c0018c3a:	51                   	push   ecx
c0018c3b:	68 f2 a2 02 c0       	push   0xc002a2f2
c0018c40:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018c44:	56                   	push   esi
c0018c45:	e8 e0 7a fe ff       	call   c000072a <strcpy>
c0018c4a:	5f                   	pop    edi
c0018c4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c51:	5d                   	pop    ebp
c0018c52:	66 c1 e8 06          	shr    ax,0x6
c0018c56:	0f b6 c0             	movzx  eax,al
c0018c59:	50                   	push   eax
c0018c5a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c60:	c1 e8 0e             	shr    eax,0xe
c0018c63:	0f b6 c0             	movzx  eax,al
c0018c66:	50                   	push   eax
c0018c67:	e8 24 f2 ff ff       	call   c0017e90 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018c6c:	5a                   	pop    edx
c0018c6d:	59                   	pop    ecx
c0018c6e:	50                   	push   eax
c0018c6f:	56                   	push   esi
c0018c70:	e8 6c 7b fe ff       	call   c00007e1 <strcat>
c0018c75:	5f                   	pop    edi
c0018c76:	5d                   	pop    ebp
c0018c77:	56                   	push   esi
c0018c78:	53                   	push   ebx
c0018c79:	e8 1a b2 ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018c7e:	58                   	pop    eax
c0018c7f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018c85:	5a                   	pop    edx
c0018c86:	68 f9 a2 02 c0       	push   0xc002a2f9
c0018c8b:	50                   	push   eax
c0018c8c:	e8 ea 7a fe ff       	call   c000077b <strcmp>
c0018c91:	83 c4 10             	add    esp,0x10
c0018c94:	85 c0                	test   eax,eax
c0018c96:	0f 85 71 03 00 00    	jne    c001900d <CPU::detectFeatures()+0x9e1>
c0018c9c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018ca3:	e9 65 03 00 00       	jmp    c001900d <CPU::detectFeatures()+0x9e1>
c0018ca8:	83 f8 02             	cmp    eax,0x2
c0018cab:	0f 85 b5 00 00 00    	jne    c0018d66 <CPU::detectFeatures()+0x73a>
c0018cb1:	57                   	push   edi
c0018cb2:	57                   	push   edi
c0018cb3:	68 0b a3 02 c0       	push   0xc002a30b
c0018cb8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018cbc:	56                   	push   esi
c0018cbd:	e8 68 7a fe ff       	call   c000072a <strcpy>
c0018cc2:	5d                   	pop    ebp
c0018cc3:	58                   	pop    eax
c0018cc4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cca:	66 c1 e8 06          	shr    ax,0x6
c0018cce:	0f b6 c0             	movzx  eax,al
c0018cd1:	50                   	push   eax
c0018cd2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cd8:	c1 e8 0e             	shr    eax,0xe
c0018cdb:	0f b6 c0             	movzx  eax,al
c0018cde:	50                   	push   eax
c0018cdf:	e8 18 f0 ff ff       	call   c0017cfc <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018ce4:	5a                   	pop    edx
c0018ce5:	59                   	pop    ecx
c0018ce6:	50                   	push   eax
c0018ce7:	56                   	push   esi
c0018ce8:	e8 f4 7a fe ff       	call   c00007e1 <strcat>
c0018ced:	5f                   	pop    edi
c0018cee:	5d                   	pop    ebp
c0018cef:	56                   	push   esi
c0018cf0:	53                   	push   ebx
c0018cf1:	e8 a2 b1 ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018cf6:	58                   	pop    eax
c0018cf7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018cfd:	5a                   	pop    edx
c0018cfe:	68 10 a3 02 c0       	push   0xc002a310
c0018d03:	50                   	push   eax
c0018d04:	e8 72 7a fe ff       	call   c000077b <strcmp>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	85 c0                	test   eax,eax
c0018d0e:	75 20                	jne    c0018d30 <CPU::detectFeatures()+0x704>
c0018d10:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c0018d16:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018d1c:	a8 01                	test   al,0x1
c0018d1e:	74 10                	je     c0018d30 <CPU::detectFeatures()+0x704>
c0018d20:	83 e0 fe             	and    eax,0xfffffffe
c0018d23:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018d29:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018d30:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d36:	c1 e8 0e             	shr    eax,0xe
c0018d39:	3c 05                	cmp    al,0x5
c0018d3b:	0f 85 cc 02 00 00    	jne    c001900d <CPU::detectFeatures()+0x9e1>
c0018d41:	56                   	push   esi
c0018d42:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d48:	83 e0 0f             	and    eax,0xf
c0018d4b:	50                   	push   eax
c0018d4c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d52:	66 c1 e8 06          	shr    ax,0x6
c0018d56:	0f b6 c0             	movzx  eax,al
c0018d59:	50                   	push   eax
c0018d5a:	6a 05                	push   0x5
c0018d5c:	e8 11 f4 ff ff       	call   c0018172 <CPU::AMD_K6_writeback(int, int, int)>
c0018d61:	e9 1f 02 00 00       	jmp    c0018f85 <CPU::detectFeatures()+0x959>
c0018d66:	8d 50 fd             	lea    edx,[eax-0x3]
c0018d69:	83 fa 01             	cmp    edx,0x1
c0018d6c:	76 09                	jbe    c0018d77 <CPU::detectFeatures()+0x74b>
c0018d6e:	83 f8 06             	cmp    eax,0x6
c0018d71:	0f 85 91 01 00 00    	jne    c0018f08 <CPU::detectFeatures()+0x8dc>
c0018d77:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018d7d:	c1 ea 0e             	shr    edx,0xe
c0018d80:	80 fa 05             	cmp    dl,0x5
c0018d83:	75 7b                	jne    c0018e00 <CPU::detectFeatures()+0x7d4>
c0018d85:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018d8b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018d90:	66 81 fa 00 01       	cmp    dx,0x100
c0018d95:	75 0c                	jne    c0018da3 <CPU::detectFeatures()+0x777>
c0018d97:	51                   	push   ecx
c0018d98:	51                   	push   ecx
c0018d99:	68 17 a3 02 c0       	push   0xc002a317
c0018d9e:	e9 dc 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018da3:	66 81 fa 00 02       	cmp    dx,0x200
c0018da8:	75 0c                	jne    c0018db6 <CPU::detectFeatures()+0x78a>
c0018daa:	52                   	push   edx
c0018dab:	52                   	push   edx
c0018dac:	68 2a a3 02 c0       	push   0xc002a32a
c0018db1:	e9 c9 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018db6:	66 81 fa 40 02       	cmp    dx,0x240
c0018dbb:	75 0c                	jne    c0018dc9 <CPU::detectFeatures()+0x79d>
c0018dbd:	50                   	push   eax
c0018dbe:	50                   	push   eax
c0018dbf:	68 3c a3 02 c0       	push   0xc002a33c
c0018dc4:	e9 b6 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018dc9:	83 f8 06             	cmp    eax,0x6
c0018dcc:	75 0c                	jne    c0018dda <CPU::detectFeatures()+0x7ae>
c0018dce:	50                   	push   eax
c0018dcf:	50                   	push   eax
c0018dd0:	68 4e a3 02 c0       	push   0xc002a34e
c0018dd5:	e9 a5 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018dda:	83 f8 04             	cmp    eax,0x4
c0018ddd:	75 0c                	jne    c0018deb <CPU::detectFeatures()+0x7bf>
c0018ddf:	50                   	push   eax
c0018de0:	50                   	push   eax
c0018de1:	68 5a a3 02 c0       	push   0xc002a35a
c0018de6:	e9 94 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018deb:	83 f8 03             	cmp    eax,0x3
c0018dee:	0f 85 19 02 00 00    	jne    c001900d <CPU::detectFeatures()+0x9e1>
c0018df4:	50                   	push   eax
c0018df5:	50                   	push   eax
c0018df6:	68 62 a3 02 c0       	push   0xc002a362
c0018dfb:	e9 7f 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e00:	80 fa 06             	cmp    dl,0x6
c0018e03:	0f 85 db 00 00 00    	jne    c0018ee4 <CPU::detectFeatures()+0x8b8>
c0018e09:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018e0f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018e14:	66 81 fa 80 01       	cmp    dx,0x180
c0018e19:	75 0c                	jne    c0018e27 <CPU::detectFeatures()+0x7fb>
c0018e1b:	50                   	push   eax
c0018e1c:	50                   	push   eax
c0018e1d:	68 6d a3 02 c0       	push   0xc002a36d
c0018e22:	e9 58 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e27:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018e2d:	66 f7 c1 80 ff       	test   cx,0xff80
c0018e32:	75 0c                	jne    c0018e40 <CPU::detectFeatures()+0x814>
c0018e34:	50                   	push   eax
c0018e35:	50                   	push   eax
c0018e36:	68 7d a3 02 c0       	push   0xc002a37d
c0018e3b:	e9 3f 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e40:	66 81 fa 40 02       	cmp    dx,0x240
c0018e45:	75 0c                	jne    c0018e53 <CPU::detectFeatures()+0x827>
c0018e47:	55                   	push   ebp
c0018e48:	55                   	push   ebp
c0018e49:	68 84 a3 02 c0       	push   0xc002a384
c0018e4e:	e9 2c 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e53:	66 81 fa 80 02       	cmp    dx,0x280
c0018e58:	75 0c                	jne    c0018e66 <CPU::detectFeatures()+0x83a>
c0018e5a:	57                   	push   edi
c0018e5b:	57                   	push   edi
c0018e5c:	68 8d a3 02 c0       	push   0xc002a38d
c0018e61:	e9 19 01 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e66:	66 81 fa 40 03       	cmp    dx,0x340
c0018e6b:	74 ed                	je     c0018e5a <CPU::detectFeatures()+0x82e>
c0018e6d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018e72:	75 0c                	jne    c0018e80 <CPU::detectFeatures()+0x854>
c0018e74:	56                   	push   esi
c0018e75:	56                   	push   esi
c0018e76:	68 94 a3 02 c0       	push   0xc002a394
c0018e7b:	e9 ff 00 00 00       	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018e80:	83 f8 06             	cmp    eax,0x6
c0018e83:	0f 84 45 ff ff ff    	je     c0018dce <CPU::detectFeatures()+0x7a2>
c0018e89:	83 f8 04             	cmp    eax,0x4
c0018e8c:	0f 84 4d ff ff ff    	je     c0018ddf <CPU::detectFeatures()+0x7b3>
c0018e92:	83 f8 03             	cmp    eax,0x3
c0018e95:	0f 85 72 01 00 00    	jne    c001900d <CPU::detectFeatures()+0x9e1>
c0018e9b:	51                   	push   ecx
c0018e9c:	51                   	push   ecx
c0018e9d:	68 9d a3 02 c0       	push   0xc002a39d
c0018ea2:	53                   	push   ebx
c0018ea3:	e8 f0 af ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018ea8:	b1 c1                	mov    cl,0xc1
c0018eaa:	88 c8                	mov    al,cl
c0018eac:	e6 22                	out    0x22,al
c0018eae:	e4 23                	in     al,0x23
c0018eb0:	88 c2                	mov    dl,al
c0018eb2:	88 c8                	mov    al,cl
c0018eb4:	e6 22                	out    0x22,al
c0018eb6:	88 d0                	mov    al,dl
c0018eb8:	83 c8 10             	or     eax,0x10
c0018ebb:	e6 23                	out    0x23,al
c0018ebd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018ec4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018ec7:	89 d0                	mov    eax,edx
c0018ec9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018ecf:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018ed3:	40                   	inc    eax
c0018ed4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018eda:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018edf:	e9 a1 00 00 00       	jmp    c0018f85 <CPU::detectFeatures()+0x959>
c0018ee4:	83 f8 06             	cmp    eax,0x6
c0018ee7:	0f 84 e1 fe ff ff    	je     c0018dce <CPU::detectFeatures()+0x7a2>
c0018eed:	83 f8 04             	cmp    eax,0x4
c0018ef0:	0f 84 e9 fe ff ff    	je     c0018ddf <CPU::detectFeatures()+0x7b3>
c0018ef6:	83 f8 03             	cmp    eax,0x3
c0018ef9:	0f 85 0e 01 00 00    	jne    c001900d <CPU::detectFeatures()+0x9e1>
c0018eff:	52                   	push   edx
c0018f00:	52                   	push   edx
c0018f01:	68 a8 a3 02 c0       	push   0xc002a3a8
c0018f06:	eb 77                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f08:	83 f8 07             	cmp    eax,0x7
c0018f0b:	75 09                	jne    c0018f16 <CPU::detectFeatures()+0x8ea>
c0018f0d:	50                   	push   eax
c0018f0e:	50                   	push   eax
c0018f0f:	68 b2 a3 02 c0       	push   0xc002a3b2
c0018f14:	eb 69                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f16:	83 f8 0a             	cmp    eax,0xa
c0018f19:	75 09                	jne    c0018f24 <CPU::detectFeatures()+0x8f8>
c0018f1b:	50                   	push   eax
c0018f1c:	50                   	push   eax
c0018f1d:	68 bd a3 02 c0       	push   0xc002a3bd
c0018f22:	eb 5b                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f24:	83 f8 0b             	cmp    eax,0xb
c0018f27:	75 09                	jne    c0018f32 <CPU::detectFeatures()+0x906>
c0018f29:	50                   	push   eax
c0018f2a:	50                   	push   eax
c0018f2b:	68 c5 a3 02 c0       	push   0xc002a3c5
c0018f30:	eb 4d                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f32:	83 f8 08             	cmp    eax,0x8
c0018f35:	75 09                	jne    c0018f40 <CPU::detectFeatures()+0x914>
c0018f37:	50                   	push   eax
c0018f38:	50                   	push   eax
c0018f39:	68 ce a3 02 c0       	push   0xc002a3ce
c0018f3e:	eb 3f                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f40:	83 f8 09             	cmp    eax,0x9
c0018f43:	75 09                	jne    c0018f4e <CPU::detectFeatures()+0x922>
c0018f45:	50                   	push   eax
c0018f46:	50                   	push   eax
c0018f47:	68 d6 a3 02 c0       	push   0xc002a3d6
c0018f4c:	eb 31                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f4e:	83 f8 05             	cmp    eax,0x5
c0018f51:	75 09                	jne    c0018f5c <CPU::detectFeatures()+0x930>
c0018f53:	50                   	push   eax
c0018f54:	50                   	push   eax
c0018f55:	68 de a3 02 c0       	push   0xc002a3de
c0018f5a:	eb 23                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f5c:	83 f8 0c             	cmp    eax,0xc
c0018f5f:	75 09                	jne    c0018f6a <CPU::detectFeatures()+0x93e>
c0018f61:	55                   	push   ebp
c0018f62:	55                   	push   ebp
c0018f63:	68 ec a3 02 c0       	push   0xc002a3ec
c0018f68:	eb 15                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f6a:	83 f8 0d             	cmp    eax,0xd
c0018f6d:	75 09                	jne    c0018f78 <CPU::detectFeatures()+0x94c>
c0018f6f:	57                   	push   edi
c0018f70:	57                   	push   edi
c0018f71:	68 f7 a3 02 c0       	push   0xc002a3f7
c0018f76:	eb 07                	jmp    c0018f7f <CPU::detectFeatures()+0x953>
c0018f78:	56                   	push   esi
c0018f79:	56                   	push   esi
c0018f7a:	68 0b a4 02 c0       	push   0xc002a40b
c0018f7f:	53                   	push   ebx
c0018f80:	e8 13 af ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	e9 80 00 00 00       	jmp    c001900d <CPU::detectFeatures()+0x9e1>
c0018f8d:	51                   	push   ecx
c0018f8e:	51                   	push   ecx
c0018f8f:	68 57 a2 02 c0       	push   0xc002a257
c0018f94:	57                   	push   edi
c0018f95:	e8 90 77 fe ff       	call   c000072a <strcpy>
c0018f9a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018fa4:	e8 ba 72 fe ff       	call   c0000263 <is486>
c0018fa9:	83 c4 10             	add    esp,0x10
c0018fac:	85 c0                	test   eax,eax
c0018fae:	74 2b                	je     c0018fdb <CPU::detectFeatures()+0x9af>
c0018fb0:	52                   	push   edx
c0018fb1:	52                   	push   edx
c0018fb2:	68 17 a4 02 c0       	push   0xc002a417
c0018fb7:	53                   	push   ebx
c0018fb8:	e8 db ae ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018fbd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018fc4:	0f 20 c0             	mov    eax,cr0
c0018fc7:	83 e0 14             	and    eax,0x14
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	83 f8 04             	cmp    eax,0x4
c0018fd0:	75 1f                	jne    c0018ff1 <CPU::detectFeatures()+0x9c5>
c0018fd2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018fd9:	eb 32                	jmp    c001900d <CPU::detectFeatures()+0x9e1>
c0018fdb:	50                   	push   eax
c0018fdc:	50                   	push   eax
c0018fdd:	68 22 a4 02 c0       	push   0xc002a422
c0018fe2:	53                   	push   ebx
c0018fe3:	e8 b0 ae ff ff       	call   c0013e98 <Device::setName(char const*)>
c0018fe8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018fef:	eb d3                	jmp    c0018fc4 <CPU::detectFeatures()+0x998>
c0018ff1:	e8 48 72 fe ff       	call   c000023e <hasLegacyFPU>
c0018ff6:	83 e0 01             	and    eax,0x1
c0018ff9:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ffc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019002:	83 e0 fd             	and    eax,0xfffffffd
c0019005:	09 d0                	or     eax,edx
c0019007:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001900d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019014:	83 c4 4c             	add    esp,0x4c
c0019017:	5b                   	pop    ebx
c0019018:	5e                   	pop    esi
c0019019:	5f                   	pop    edi
c001901a:	5d                   	pop    ebp
c001901b:	c3                   	ret    

c001901c <CPU::setupSMEP()>:
c001901c:	0f 20 e0             	mov    eax,cr4
c001901f:	0d 00 00 10 00       	or     eax,0x100000
c0019024:	0f 22 e0             	mov    cr4,eax
c0019027:	c3                   	ret    

c0019028 <CPU::setupUMIP()>:
c0019028:	0f 20 e0             	mov    eax,cr4
c001902b:	80 cc 08             	or     ah,0x8
c001902e:	0f 22 e0             	mov    cr4,eax
c0019031:	c3                   	ret    

c0019032 <CPU::setupTSC()>:
c0019032:	0f 20 e0             	mov    eax,cr4
c0019035:	83 c8 04             	or     eax,0x4
c0019038:	0f 22 e0             	mov    cr4,eax
c001903b:	c3                   	ret    

c001903c <CPU::setupLargePages()>:
c001903c:	0f 20 e0             	mov    eax,cr4
c001903f:	83 c8 10             	or     eax,0x10
c0019042:	0f 22 e0             	mov    cr4,eax
c0019045:	c3                   	ret    

c0019046 <CPU::setupPAT()>:
c0019046:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001904b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019052:	74 2c                	je     c0019080 <CPU::setupPAT()+0x3a>
c0019054:	53                   	push   ebx
c0019055:	83 ec 10             	sub    esp,0x10
c0019058:	68 77 02 00 00       	push   0x277
c001905d:	50                   	push   eax
c001905e:	e8 2f 5b ff ff       	call   c000eb92 <Computer::rdmsr(unsigned int)>
c0019063:	83 e2 f8             	and    edx,0xfffffff8
c0019066:	83 ca 01             	or     edx,0x1
c0019069:	52                   	push   edx
c001906a:	50                   	push   eax
c001906b:	68 77 02 00 00       	push   0x277
c0019070:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c0019076:	e8 43 5b ff ff       	call   c000ebbe <Computer::wrmsr(unsigned int, unsigned long long)>
c001907b:	83 c4 28             	add    esp,0x28
c001907e:	5b                   	pop    ebx
c001907f:	c3                   	ret    
c0019080:	c3                   	ret    
c0019081:	90                   	nop

c0019082 <CPU::setupMTRR()>:
c0019082:	c3                   	ret    
c0019083:	90                   	nop

c0019084 <CPU::setupGlobalPages()>:
c0019084:	0f 20 e0             	mov    eax,cr4
c0019087:	0c 80                	or     al,0x80
c0019089:	0f 22 e0             	mov    cr4,eax
c001908c:	c3                   	ret    
c001908d:	90                   	nop

c001908e <CPU::allowUsermodeDataAccess()>:
c001908e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019092:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019099:	74 03                	je     c001909e <CPU::allowUsermodeDataAccess()+0x10>
c001909b:	0f 01 cb             	stac   
c001909e:	c3                   	ret    
c001909f:	90                   	nop

c00190a0 <CPU::prohibitUsermodeDataAccess()>:
c00190a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00190ab:	74 03                	je     c00190b0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00190ad:	0f 01 ca             	clac   
c00190b0:	c3                   	ret    
c00190b1:	90                   	nop

c00190b2 <CPU::setupSMAP()>:
c00190b2:	0f 20 e0             	mov    eax,cr4
c00190b5:	0d 00 00 20 00       	or     eax,0x200000
c00190ba:	0f 22 e0             	mov    cr4,eax
c00190bd:	eb e1                	jmp    c00190a0 <CPU::prohibitUsermodeDataAccess()>
c00190bf:	90                   	nop

c00190c0 <CPU::setupFeatures()>:
c00190c0:	83 ec 0c             	sub    esp,0xc
c00190c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190c7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00190ce:	74 07                	je     c00190d7 <CPU::setupFeatures()+0x17>
c00190d0:	52                   	push   edx
c00190d1:	e8 46 ff ff ff       	call   c001901c <CPU::setupSMEP()>
c00190d6:	58                   	pop    eax
c00190d7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00190de:	74 07                	je     c00190e7 <CPU::setupFeatures()+0x27>
c00190e0:	52                   	push   edx
c00190e1:	e8 cc ff ff ff       	call   c00190b2 <CPU::setupSMAP()>
c00190e6:	58                   	pop    eax
c00190e7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00190ee:	74 07                	je     c00190f7 <CPU::setupFeatures()+0x37>
c00190f0:	52                   	push   edx
c00190f1:	e8 32 ff ff ff       	call   c0019028 <CPU::setupUMIP()>
c00190f6:	58                   	pop    eax
c00190f7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00190fe:	74 07                	je     c0019107 <CPU::setupFeatures()+0x47>
c0019100:	52                   	push   edx
c0019101:	e8 2c ff ff ff       	call   c0019032 <CPU::setupTSC()>
c0019106:	58                   	pop    eax
c0019107:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001910e:	74 07                	je     c0019117 <CPU::setupFeatures()+0x57>
c0019110:	52                   	push   edx
c0019111:	e8 26 ff ff ff       	call   c001903c <CPU::setupLargePages()>
c0019116:	59                   	pop    ecx
c0019117:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001911e:	74 07                	je     c0019127 <CPU::setupFeatures()+0x67>
c0019120:	52                   	push   edx
c0019121:	e8 5e ff ff ff       	call   c0019084 <CPU::setupGlobalPages()>
c0019126:	58                   	pop    eax
c0019127:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001912e:	74 0c                	je     c001913c <CPU::setupFeatures()+0x7c>
c0019130:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019134:	83 c4 0c             	add    esp,0xc
c0019137:	e9 0a ff ff ff       	jmp    c0019046 <CPU::setupPAT()>
c001913c:	83 c4 0c             	add    esp,0xc
c001913f:	c3                   	ret    

c0019140 <CPU::open(int, int, void*)>:
c0019140:	57                   	push   edi
c0019141:	56                   	push   esi
c0019142:	53                   	push   ebx
c0019143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019147:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001914b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019151:	83 ec 0c             	sub    esp,0xc
c0019154:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001915a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019160:	50                   	push   eax
c0019161:	e8 18 5d ff ff       	call   c000ee7e <GDT::setup()>
c0019166:	83 c4 0c             	add    esp,0xc
c0019169:	6a 00                	push   0x0
c001916b:	68 ef be ad de       	push   0xdeadbeef
c0019170:	57                   	push   edi
c0019171:	e8 9a 80 ff ff       	call   c0011210 <TSS::setup(unsigned long, unsigned long)>
c0019176:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019179:	e8 72 80 ff ff       	call   c00111f0 <TSS::flush()>
c001917e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019184:	89 04 24             	mov    DWORD PTR [esp],eax
c0019187:	e8 4e 5f ff ff       	call   c000f0da <IDT::setup()>
c001918c:	b8 00 04 00 00       	mov    eax,0x400
c0019191:	0f 23 f8             	mov    db7,eax
c0019194:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001919e:	e8 ba 6a ff ff       	call   c000fc5d <Phys::allocatePage()>
c00191a3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00191a9:	89 30                	mov    DWORD PTR [eax],esi
c00191ab:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00191b1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00191b4:	58                   	pop    eax
c00191b5:	5a                   	pop    edx
c00191b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00191bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00191c0:	e8 7d 90 ff ff       	call   c0012242 <VAS::setCPUSpecific(unsigned long)>
c00191c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00191c8:	e8 5f f4 ff ff       	call   c001862c <CPU::detectFeatures()>
c00191cd:	e8 aa bf ff ff       	call   c001517c <setupInterruptController()>
c00191d2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00191d8:	a1 e0 cc 02 c0       	mov    eax,ds:0xc002cce0
c00191dd:	83 e0 10             	and    eax,0x10
c00191e0:	83 f8 01             	cmp    eax,0x1
c00191e3:	19 c0                	sbb    eax,eax
c00191e5:	83 e0 46             	and    eax,0x46
c00191e8:	83 c0 1e             	add    eax,0x1e
c00191eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00191ee:	e8 41 d4 ff ff       	call   c0016634 <setupTimer(int)>
c00191f3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00191f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00191fc:	e8 bf fe ff ff       	call   c00190c0 <CPU::setupFeatures()>
c0019201:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019204:	e8 a7 f1 ff ff       	call   c00183b0 <CPU::displayFeatures()>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	31 c0                	xor    eax,eax
c001920e:	5b                   	pop    ebx
c001920f:	5e                   	pop    esi
c0019210:	5f                   	pop    edi
c0019211:	c3                   	ret    

c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019212:	57                   	push   edi
c0019213:	56                   	push   esi
c0019214:	53                   	push   ebx
c0019215:	51                   	push   ecx
c0019216:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001921a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001921d:	0f 02 c0             	lar    eax,ax
c0019220:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019227:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001922a:	88 ca                	mov    dl,cl
c001922c:	c0 ea 06             	shr    dl,0x6
c001922f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019233:	89 ca                	mov    edx,ecx
c0019235:	66 c1 ea 03          	shr    dx,0x3
c0019239:	83 e2 07             	and    edx,0x7
c001923c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019241:	88 17                	mov    BYTE PTR [edi],dl
c0019243:	0f 84 a6 01 00 00    	je     c00193ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019249:	83 e1 07             	and    ecx,0x7
c001924c:	80 f9 04             	cmp    cl,0x4
c001924f:	0f 84 98 00 00 00    	je     c00192ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019255:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001925a:	0f 95 c0             	setne  al
c001925d:	80 f9 05             	cmp    cl,0x5
c0019260:	0f 95 c2             	setne  dl
c0019263:	08 c2                	or     dl,al
c0019265:	74 79                	je     c00192e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019267:	84 c9                	test   cl,cl
c0019269:	75 05                	jne    c0019270 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001926b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001926e:	eb 3c                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019270:	80 f9 01             	cmp    cl,0x1
c0019273:	75 05                	jne    c001927a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019275:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019278:	eb 32                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001927a:	80 f9 02             	cmp    cl,0x2
c001927d:	75 05                	jne    c0019284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001927f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019282:	eb 28                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019284:	31 c0                	xor    eax,eax
c0019286:	80 f9 03             	cmp    cl,0x3
c0019289:	75 05                	jne    c0019290 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001928b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001928e:	eb 1c                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019290:	80 f9 05             	cmp    cl,0x5
c0019293:	75 05                	jne    c001929a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019295:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019298:	eb 12                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001929a:	80 f9 06             	cmp    cl,0x6
c001929d:	75 05                	jne    c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001929f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00192a2:	eb 08                	jmp    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00192a4:	80 f9 07             	cmp    cl,0x7
c00192a7:	75 03                	jne    c00192ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00192a9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00192ac:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00192b1:	75 10                	jne    c00192c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00192b3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00192b7:	b9 03 00 00 00       	mov    ecx,0x3
c00192bc:	01 d0                	add    eax,edx
c00192be:	e9 37 01 00 00       	jmp    c00193fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00192c3:	b9 02 00 00 00       	mov    ecx,0x2
c00192c8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00192cd:	0f 85 27 01 00 00    	jne    c00193fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00192d3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00192d6:	b9 06 00 00 00       	mov    ecx,0x6
c00192db:	e9 1a 01 00 00       	jmp    c00193fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00192e0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00192e3:	b9 06 00 00 00       	mov    ecx,0x6
c00192e8:	e9 0f 01 00 00       	jmp    c00193fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192ed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00192f0:	88 ca                	mov    dl,cl
c00192f2:	c0 ea 06             	shr    dl,0x6
c00192f5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00192f9:	89 ca                	mov    edx,ecx
c00192fb:	66 c1 ea 03          	shr    dx,0x3
c00192ff:	83 e2 07             	and    edx,0x7
c0019302:	80 e1 07             	and    cl,0x7
c0019305:	75 05                	jne    c001930c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019307:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001930a:	eb 4c                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001930c:	80 f9 01             	cmp    cl,0x1
c001930f:	75 05                	jne    c0019316 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019311:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019314:	eb 42                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019316:	80 f9 02             	cmp    cl,0x2
c0019319:	75 05                	jne    c0019320 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001931b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001931e:	eb 38                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019320:	80 f9 03             	cmp    cl,0x3
c0019323:	75 05                	jne    c001932a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019325:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019328:	eb 2e                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001932a:	80 f9 04             	cmp    cl,0x4
c001932d:	75 12                	jne    c0019341 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001932f:	f6 c4 60             	test   ah,0x60
c0019332:	75 08                	jne    c001933c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019334:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019337:	8d 78 14             	lea    edi,[eax+0x14]
c001933a:	eb 1c                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001933c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001933f:	eb 17                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019341:	80 f9 05             	cmp    cl,0x5
c0019344:	75 05                	jne    c001934b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019346:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019349:	eb 0d                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001934b:	80 f9 06             	cmp    cl,0x6
c001934e:	75 05                	jne    c0019355 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019350:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019353:	eb 03                	jmp    c0019358 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019355:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019358:	84 d2                	test   dl,dl
c001935a:	75 05                	jne    c0019361 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001935c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001935f:	eb 3c                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019361:	80 fa 01             	cmp    dl,0x1
c0019364:	75 05                	jne    c001936b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019366:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019369:	eb 32                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001936b:	80 fa 02             	cmp    dl,0x2
c001936e:	75 05                	jne    c0019375 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019370:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019373:	eb 28                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019375:	80 fa 03             	cmp    dl,0x3
c0019378:	75 05                	jne    c001937f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001937a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001937d:	eb 1e                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001937f:	31 c0                	xor    eax,eax
c0019381:	80 fa 04             	cmp    dl,0x4
c0019384:	74 17                	je     c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019386:	80 fa 05             	cmp    dl,0x5
c0019389:	75 05                	jne    c0019390 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001938b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001938e:	eb 0d                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019390:	80 fa 06             	cmp    dl,0x6
c0019393:	75 05                	jne    c001939a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019395:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019398:	eb 03                	jmp    c001939d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001939a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001939d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193a2:	0f 94 c2             	sete   dl
c00193a5:	80 f9 05             	cmp    cl,0x5
c00193a8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00193ac:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00193b1:	d3 e0                	shl    eax,cl
c00193b3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00193b7:	74 0a                	je     c00193c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00193b9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00193bc:	b9 07 00 00 00       	mov    ecx,0x7
c00193c1:	eb 37                	jmp    c00193fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00193c3:	01 f8                	add    eax,edi
c00193c5:	b9 03 00 00 00       	mov    ecx,0x3
c00193ca:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193cf:	74 2b                	je     c00193fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00193d1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00193d6:	75 0d                	jne    c00193e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00193d8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00193dc:	01 c8                	add    eax,ecx
c00193de:	b9 04 00 00 00       	mov    ecx,0x4
c00193e3:	eb 17                	jmp    c00193fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00193e5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00193e8:	b9 07 00 00 00       	mov    ecx,0x7
c00193ed:	eb 0d                	jmp    c00193fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00193ef:	b9 02 00 00 00       	mov    ecx,0x2
c00193f4:	b2 01                	mov    dl,0x1
c00193f6:	31 c0                	xor    eax,eax
c00193f8:	eb 02                	jmp    c00193fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00193fa:	31 d2                	xor    edx,edx
c00193fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019400:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019402:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019406:	88 11                	mov    BYTE PTR [ecx],dl
c0019408:	5a                   	pop    edx
c0019409:	5b                   	pop    ebx
c001940a:	5e                   	pop    esi
c001940b:	5f                   	pop    edi
c001940c:	c3                   	ret    
c001940d:	90                   	nop

c001940e <EnvVarContainer::getEnv(char const*)>:
c001940e:	57                   	push   edi
c001940f:	56                   	push   esi
c0019410:	53                   	push   ebx
c0019411:	31 db                	xor    ebx,ebx
c0019413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019417:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019419:	7e 2b                	jle    c0019446 <EnvVarContainer::getEnv(char const*)+0x38>
c001941b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019422:	50                   	push   eax
c0019423:	50                   	push   eax
c0019424:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019427:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001942a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001942e:	e8 48 73 fe ff       	call   c000077b <strcmp>
c0019433:	83 c4 10             	add    esp,0x10
c0019436:	85 c0                	test   eax,eax
c0019438:	75 09                	jne    c0019443 <EnvVarContainer::getEnv(char const*)+0x35>
c001943a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001943d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019441:	eb 05                	jmp    c0019448 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019443:	43                   	inc    ebx
c0019444:	eb d1                	jmp    c0019417 <EnvVarContainer::getEnv(char const*)+0x9>
c0019446:	31 c0                	xor    eax,eax
c0019448:	5b                   	pop    ebx
c0019449:	5e                   	pop    esi
c001944a:	5f                   	pop    edi
c001944b:	c3                   	ret    

c001944c <EnvVarContainer::setEnv(char const*, char const*)>:
c001944c:	57                   	push   edi
c001944d:	56                   	push   esi
c001944e:	53                   	push   ebx
c001944f:	83 ec 1c             	sub    esp,0x1c
c0019452:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019456:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001945a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001945e:	57                   	push   edi
c001945f:	e8 44 72 fe ff       	call   c00006a8 <strlen>
c0019464:	40                   	inc    eax
c0019465:	89 04 24             	mov    DWORD PTR [esp],eax
c0019468:	e8 7d 61 ff ff       	call   c000f5ea <malloc>
c001946d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019470:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019474:	e8 2f 72 fe ff       	call   c00006a8 <strlen>
c0019479:	40                   	inc    eax
c001947a:	89 04 24             	mov    DWORD PTR [esp],eax
c001947d:	e8 68 61 ff ff       	call   c000f5ea <malloc>
c0019482:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019485:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019489:	e8 1a 72 fe ff       	call   c00006a8 <strlen>
c001948e:	83 c4 0c             	add    esp,0xc
c0019491:	40                   	inc    eax
c0019492:	50                   	push   eax
c0019493:	6a 00                	push   0x0
c0019495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019499:	e8 ed 71 fe ff       	call   c000068b <memset>
c001949e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194a1:	e8 02 72 fe ff       	call   c00006a8 <strlen>
c00194a6:	83 c4 0c             	add    esp,0xc
c00194a9:	40                   	inc    eax
c00194aa:	50                   	push   eax
c00194ab:	57                   	push   edi
c00194ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00194b0:	e8 a0 71 fe ff       	call   c0000655 <memcpy>
c00194b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00194b8:	e8 eb 71 fe ff       	call   c00006a8 <strlen>
c00194bd:	83 c4 0c             	add    esp,0xc
c00194c0:	40                   	inc    eax
c00194c1:	50                   	push   eax
c00194c2:	6a 00                	push   0x0
c00194c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194c8:	e8 be 71 fe ff       	call   c000068b <memset>
c00194cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00194d0:	e8 d3 71 fe ff       	call   c00006a8 <strlen>
c00194d5:	83 c4 0c             	add    esp,0xc
c00194d8:	40                   	inc    eax
c00194d9:	50                   	push   eax
c00194da:	56                   	push   esi
c00194db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194df:	e8 71 71 fe ff       	call   c0000655 <memcpy>
c00194e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00194e6:	40                   	inc    eax
c00194e7:	89 03                	mov    DWORD PTR [ebx],eax
c00194e9:	c1 e0 03             	shl    eax,0x3
c00194ec:	5a                   	pop    edx
c00194ed:	59                   	pop    ecx
c00194ee:	50                   	push   eax
c00194ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00194f2:	e8 df 60 ff ff       	call   c000f5d6 <realloc>
c00194f7:	83 c4 0c             	add    esp,0xc
c00194fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00194fd:	6a 08                	push   0x8
c00194ff:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019503:	52                   	push   edx
c0019504:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019506:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001950a:	50                   	push   eax
c001950b:	e8 45 71 fe ff       	call   c0000655 <memcpy>
c0019510:	83 c4 20             	add    esp,0x20
c0019513:	5b                   	pop    ebx
c0019514:	5e                   	pop    esi
c0019515:	5f                   	pop    edi
c0019516:	c3                   	ret    
c0019517:	90                   	nop

c0019518 <EnvVarContainer::deleteEnv(char const*)>:
c0019518:	c3                   	ret    
c0019519:	90                   	nop

c001951a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001951a:	55                   	push   ebp
c001951b:	57                   	push   edi
c001951c:	56                   	push   esi
c001951d:	53                   	push   ebx
c001951e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019524:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001952b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019532:	68 14 01 00 00       	push   0x114
c0019537:	e8 ae 60 ff ff       	call   c000f5ea <malloc>
c001953c:	83 c4 0c             	add    esp,0xc
c001953f:	89 c7                	mov    edi,eax
c0019541:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019544:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001954b:	50                   	push   eax
c001954c:	e8 97 98 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c0019551:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019554:	e8 61 9b ff ff       	call   c00130ba <File::exists()>
c0019559:	83 c4 10             	add    esp,0x10
c001955c:	84 c0                	test   al,al
c001955e:	75 31                	jne    c0019591 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019560:	51                   	push   ecx
c0019561:	51                   	push   ecx
c0019562:	6a 12                	push   0x12
c0019564:	57                   	push   edi
c0019565:	e8 e2 98 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001956a:	8b 07                	mov    eax,DWORD PTR [edi]
c001956c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001956f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019572:	e8 31 71 fe ff       	call   c00006a8 <strlen>
c0019577:	5a                   	pop    edx
c0019578:	31 d2                	xor    edx,edx
c001957a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001957e:	51                   	push   ecx
c001957f:	55                   	push   ebp
c0019580:	52                   	push   edx
c0019581:	50                   	push   eax
c0019582:	57                   	push   edi
c0019583:	ff d3                	call   ebx
c0019585:	83 c4 14             	add    esp,0x14
c0019588:	57                   	push   edi
c0019589:	e8 1c 99 ff ff       	call   c0012eaa <File::close()>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	31 db                	xor    ebx,ebx
c0019593:	50                   	push   eax
c0019594:	31 ed                	xor    ebp,ebp
c0019596:	68 00 01 00 00       	push   0x100
c001959b:	6a 00                	push   0x0
c001959d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00195a1:	50                   	push   eax
c00195a2:	e8 e4 70 fe ff       	call   c000068b <memset>
c00195a7:	58                   	pop    eax
c00195a8:	5a                   	pop    edx
c00195a9:	6a 01                	push   0x1
c00195ab:	57                   	push   edi
c00195ac:	e8 9b 98 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00195b9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00195bd:	51                   	push   ecx
c00195be:	8d 54 24 23          	lea    edx,[esp+0x23]
c00195c2:	52                   	push   edx
c00195c3:	6a 00                	push   0x0
c00195c5:	6a 01                	push   0x1
c00195c7:	57                   	push   edi
c00195c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00195cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00195cf:	83 c4 20             	add    esp,0x20
c00195d2:	3c 0d                	cmp    al,0xd
c00195d4:	0f 84 12 01 00 00    	je     c00196ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195da:	85 db                	test   ebx,ebx
c00195dc:	0f 84 fd 00 00 00    	je     c00196df <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00195e2:	3c 0a                	cmp    al,0xa
c00195e4:	74 13                	je     c00195f9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00195e6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195eb:	74 0c                	je     c00195f9 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00195ed:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00195f3:	0f 8e e6 00 00 00    	jle    c00196df <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00195f9:	83 ec 0c             	sub    esp,0xc
c00195fc:	8d 53 01             	lea    edx,[ebx+0x1]
c00195ff:	29 dd                	sub    ebp,ebx
c0019601:	52                   	push   edx
c0019602:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019606:	e8 df 5f ff ff       	call   c000f5ea <malloc>
c001960b:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001960e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019612:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019615:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019619:	e8 cc 5f ff ff       	call   c000f5ea <malloc>
c001961e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019622:	83 c4 0c             	add    esp,0xc
c0019625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019629:	52                   	push   edx
c001962a:	6a 00                	push   0x0
c001962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019630:	e8 56 70 fe ff       	call   c000068b <memset>
c0019635:	83 c4 0c             	add    esp,0xc
c0019638:	53                   	push   ebx
c0019639:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001963d:	55                   	push   ebp
c001963e:	01 eb                	add    ebx,ebp
c0019640:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019644:	e8 0c 70 fe ff       	call   c0000655 <memcpy>
c0019649:	83 c4 0c             	add    esp,0xc
c001964c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019650:	51                   	push   ecx
c0019651:	6a 00                	push   0x0
c0019653:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019657:	e8 2f 70 fe ff       	call   c000068b <memset>
c001965c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001965f:	e8 44 70 fe ff       	call   c00006a8 <strlen>
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	50                   	push   eax
c0019668:	53                   	push   ebx
c0019669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001966d:	e8 e3 6f fe ff       	call   c0000655 <memcpy>
c0019672:	5b                   	pop    ebx
c0019673:	58                   	pop    eax
c0019674:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019678:	68 5c a4 02 c0       	push   0xc002a45c
c001967d:	e8 0d 92 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019682:	8b 06                	mov    eax,DWORD PTR [esi]
c0019684:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019687:	40                   	inc    eax
c0019688:	83 c4 10             	add    esp,0x10
c001968b:	89 06                	mov    DWORD PTR [esi],eax
c001968d:	85 d2                	test   edx,edx
c001968f:	75 0c                	jne    c001969d <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019691:	83 ec 0c             	sub    esp,0xc
c0019694:	6a 08                	push   0x8
c0019696:	e8 4f 5f ff ff       	call   c000f5ea <malloc>
c001969b:	eb 0c                	jmp    c00196a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001969d:	c1 e0 03             	shl    eax,0x3
c00196a0:	51                   	push   ecx
c00196a1:	51                   	push   ecx
c00196a2:	50                   	push   eax
c00196a3:	52                   	push   edx
c00196a4:	e8 2d 5f ff ff       	call   c000f5d6 <realloc>
c00196a9:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	31 db                	xor    ebx,ebx
c00196b1:	52                   	push   edx
c00196b2:	6a 08                	push   0x8
c00196b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00196b8:	50                   	push   eax
c00196b9:	8b 16                	mov    edx,DWORD PTR [esi]
c00196bb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196be:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00196c2:	50                   	push   eax
c00196c3:	e8 8d 6f fe ff       	call   c0000655 <memcpy>
c00196c8:	83 c4 0c             	add    esp,0xc
c00196cb:	68 00 01 00 00       	push   0x100
c00196d0:	6a 00                	push   0x0
c00196d2:	55                   	push   ebp
c00196d3:	31 ed                	xor    ebp,ebp
c00196d5:	e8 b1 6f fe ff       	call   c000068b <memset>
c00196da:	83 c4 10             	add    esp,0x10
c00196dd:	eb 0d                	jmp    c00196ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00196df:	3c 3d                	cmp    al,0x3d
c00196e1:	74 07                	je     c00196ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00196e3:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00196e7:	45                   	inc    ebp
c00196e8:	eb 02                	jmp    c00196ec <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00196ea:	89 eb                	mov    ebx,ebp
c00196ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00196f1:	0f 85 bd fe ff ff    	jne    c00195b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00196f7:	50                   	push   eax
c00196f8:	50                   	push   eax
c00196f9:	ff 36                	push   DWORD PTR [esi]
c00196fb:	68 6a a4 02 c0       	push   0xc002a46a
c0019700:	e8 8a 91 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019705:	81 c4 3c 01 00 00    	add    esp,0x13c
c001970b:	5b                   	pop    ebx
c001970c:	5e                   	pop    esi
c001970d:	5f                   	pop    edi
c001970e:	5d                   	pop    ebp
c001970f:	c3                   	ret    

c0019710 <EnvVarContainer::__loadSystem()>:
c0019710:	83 ec 10             	sub    esp,0x10
c0019713:	68 00 c2 02 c0       	push   0xc002c200
c0019718:	68 95 a4 02 c0       	push   0xc002a495
c001971d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019721:	e8 f4 fd ff ff       	call   c001951a <EnvVarContainer::loadFrom(char const*, char const*)>
c0019726:	83 c4 1c             	add    esp,0x1c
c0019729:	c3                   	ret    

c001972a <EnvVarContainer::__loadUser()>:
c001972a:	c3                   	ret    
c001972b:	90                   	nop

c001972c <EnvVarContainer::EnvVarContainer(Process*)>:
c001972c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001973a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001973e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019745:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001974c:	90                   	nop
c001974d:	c3                   	ret    

c001974e <EnvVarContainer::~EnvVarContainer()>:
c001974e:	83 ec 0c             	sub    esp,0xc
c0019751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019755:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019758:	85 c0                	test   eax,eax
c001975a:	74 1d                	je     c0019779 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001975c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019760:	8b 00                	mov    eax,DWORD PTR [eax]
c0019762:	85 c0                	test   eax,eax
c0019764:	74 13                	je     c0019779 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001976a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001976d:	83 ec 0c             	sub    esp,0xc
c0019770:	50                   	push   eax
c0019771:	e8 84 5e ff ff       	call   c000f5fa <free>
c0019776:	83 c4 10             	add    esp,0x10
c0019779:	90                   	nop
c001977a:	83 c4 0c             	add    esp,0xc
c001977d:	c3                   	ret    

c001977e <Krnl::getEnv(Process*, char const*)>:
c001977e:	53                   	push   ebx
c001977f:	83 ec 08             	sub    esp,0x8
c0019782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019786:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001978a:	39 05 14 e2 02 c0    	cmp    DWORD PTR ds:0xc002e214,eax
c0019790:	74 04                	je     c0019796 <Krnl::getEnv(Process*, char const*)+0x18>
c0019792:	85 c0                	test   eax,eax
c0019794:	75 0b                	jne    c00197a1 <Krnl::getEnv(Process*, char const*)+0x23>
c0019796:	a1 f0 d7 02 c0       	mov    eax,ds:0xc002d7f0
c001979b:	85 c0                	test   eax,eax
c001979d:	75 19                	jne    c00197b8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001979f:	eb 27                	jmp    c00197c8 <Krnl::getEnv(Process*, char const*)+0x4a>
c00197a1:	52                   	push   edx
c00197a2:	52                   	push   edx
c00197a3:	53                   	push   ebx
c00197a4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c00197aa:	e8 5f fc ff ff       	call   c001940e <EnvVarContainer::getEnv(char const*)>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	85 c0                	test   eax,eax
c00197b4:	75 28                	jne    c00197de <Krnl::getEnv(Process*, char const*)+0x60>
c00197b6:	eb de                	jmp    c0019796 <Krnl::getEnv(Process*, char const*)+0x18>
c00197b8:	52                   	push   edx
c00197b9:	52                   	push   edx
c00197ba:	53                   	push   ebx
c00197bb:	50                   	push   eax
c00197bc:	e8 4d fc ff ff       	call   c001940e <EnvVarContainer::getEnv(char const*)>
c00197c1:	83 c4 10             	add    esp,0x10
c00197c4:	85 c0                	test   eax,eax
c00197c6:	75 16                	jne    c00197de <Krnl::getEnv(Process*, char const*)+0x60>
c00197c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00197cc:	a1 f4 d7 02 c0       	mov    eax,ds:0xc002d7f4
c00197d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00197d5:	83 c4 08             	add    esp,0x8
c00197d8:	5b                   	pop    ebx
c00197d9:	e9 30 fc ff ff       	jmp    c001940e <EnvVarContainer::getEnv(char const*)>
c00197de:	83 c4 08             	add    esp,0x8
c00197e1:	5b                   	pop    ebx
c00197e2:	c3                   	ret    

c00197e3 <Krnl::setEnvSystem(char const*, char const*)>:
c00197e3:	83 ec 10             	sub    esp,0x10
c00197e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197ee:	ff 35 f4 d7 02 c0    	push   DWORD PTR ds:0xc002d7f4
c00197f4:	e8 53 fc ff ff       	call   c001944c <EnvVarContainer::setEnv(char const*, char const*)>
c00197f9:	83 c4 1c             	add    esp,0x1c
c00197fc:	c3                   	ret    

c00197fd <Krnl::setEnvUser(char const*, char const*)>:
c00197fd:	a1 f0 d7 02 c0       	mov    eax,ds:0xc002d7f0
c0019802:	85 c0                	test   eax,eax
c0019804:	74 15                	je     c001981b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019806:	83 ec 10             	sub    esp,0x10
c0019809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001980d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019811:	50                   	push   eax
c0019812:	e8 35 fc ff ff       	call   c001944c <EnvVarContainer::setEnv(char const*, char const*)>
c0019817:	83 c4 1c             	add    esp,0x1c
c001981a:	c3                   	ret    
c001981b:	c3                   	ret    

c001981c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001981c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019820:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001982a:	e9 1d fc ff ff       	jmp    c001944c <EnvVarContainer::setEnv(char const*, char const*)>

c001982f <Krnl::deleteEnvSystem(char const*)>:
c001982f:	c3                   	ret    

c0019830 <Krnl::deleteEnvUser(char const*)>:
c0019830:	c3                   	ret    

c0019831 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019831:	c3                   	ret    

c0019832 <Krnl::newProcessEnv(Process*)>:
c0019832:	83 ec 28             	sub    esp,0x28
c0019835:	6a 0c                	push   0xc
c0019837:	e8 ae 5d ff ff       	call   c000f5ea <malloc>
c001983c:	5a                   	pop    edx
c001983d:	59                   	pop    ecx
c001983e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019842:	50                   	push   eax
c0019843:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019847:	e8 e0 fe ff ff       	call   c001972c <EnvVarContainer::EnvVarContainer(Process*)>
c001984c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019850:	83 c4 2c             	add    esp,0x2c
c0019853:	c3                   	ret    

c0019854 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019854:	56                   	push   esi
c0019855:	53                   	push   ebx
c0019856:	83 ec 10             	sub    esp,0x10
c0019859:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001985d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019863:	6a 0c                	push   0xc
c0019865:	e8 80 5d ff ff       	call   c000f5ea <malloc>
c001986a:	89 c3                	mov    ebx,eax
c001986c:	58                   	pop    eax
c001986d:	5a                   	pop    edx
c001986e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019872:	53                   	push   ebx
c0019873:	e8 b4 fe ff ff       	call   c001972c <EnvVarContainer::EnvVarContainer(Process*)>
c0019878:	8b 06                	mov    eax,DWORD PTR [esi]
c001987a:	89 03                	mov    DWORD PTR [ebx],eax
c001987c:	c1 e0 03             	shl    eax,0x3
c001987f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019882:	e8 63 5d ff ff       	call   c000f5ea <malloc>
c0019887:	83 c4 0c             	add    esp,0xc
c001988a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001988d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001988f:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019896:	52                   	push   edx
c0019897:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001989a:	50                   	push   eax
c001989b:	e8 b5 6d fe ff       	call   c0000655 <memcpy>
c00198a0:	89 d8                	mov    eax,ebx
c00198a2:	83 c4 14             	add    esp,0x14
c00198a5:	5b                   	pop    ebx
c00198a6:	5e                   	pop    esi
c00198a7:	c3                   	ret    

c00198a8 <Krnl::loadSystemEnv()>:
c00198a8:	53                   	push   ebx
c00198a9:	83 ec 14             	sub    esp,0x14
c00198ac:	6a 0c                	push   0xc
c00198ae:	e8 37 5d ff ff       	call   c000f5ea <malloc>
c00198b3:	89 c3                	mov    ebx,eax
c00198b5:	58                   	pop    eax
c00198b6:	5a                   	pop    edx
c00198b7:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c00198bd:	53                   	push   ebx
c00198be:	e8 69 fe ff ff       	call   c001972c <EnvVarContainer::EnvVarContainer(Process*)>
c00198c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198c6:	89 1d f4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7f4,ebx
c00198cc:	e8 3f fe ff ff       	call   c0019710 <EnvVarContainer::__loadSystem()>
c00198d1:	83 c4 18             	add    esp,0x18
c00198d4:	5b                   	pop    ebx
c00198d5:	c3                   	ret    

c00198d6 <Krnl::loadUserEnv()>:
c00198d6:	53                   	push   ebx
c00198d7:	83 ec 14             	sub    esp,0x14
c00198da:	6a 0c                	push   0xc
c00198dc:	e8 09 5d ff ff       	call   c000f5ea <malloc>
c00198e1:	89 c3                	mov    ebx,eax
c00198e3:	58                   	pop    eax
c00198e4:	5a                   	pop    edx
c00198e5:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c00198eb:	53                   	push   ebx
c00198ec:	e8 3b fe ff ff       	call   c001972c <EnvVarContainer::EnvVarContainer(Process*)>
c00198f1:	89 1d f0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7f0,ebx
c00198f7:	83 c4 18             	add    esp,0x18
c00198fa:	5b                   	pop    ebx
c00198fb:	c3                   	ret    

c00198fc <Krnl::flushEnv()>:
c00198fc:	c3                   	ret    

c00198fd <Krnl::getProcessTotalEnvCount(Process*)>:
c00198fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019901:	8b 15 f0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7f0
c0019907:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001990d:	a1 f4 d7 02 c0       	mov    eax,ds:0xc002d7f4
c0019912:	8b 00                	mov    eax,DWORD PTR [eax]
c0019914:	03 01                	add    eax,DWORD PTR [ecx]
c0019916:	85 d2                	test   edx,edx
c0019918:	74 02                	je     c001991c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001991a:	03 02                	add    eax,DWORD PTR [edx]
c001991c:	c3                   	ret    

c001991d <Krnl::getProcessEnvPair(Process*, int)>:
c001991d:	57                   	push   edi
c001991e:	8b 0d f0 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7f0
c0019924:	56                   	push   esi
c0019925:	85 c9                	test   ecx,ecx
c0019927:	53                   	push   ebx
c0019928:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001992c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019930:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019936:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001993a:	8b 02                	mov    eax,DWORD PTR [edx]
c001993c:	75 47                	jne    c0019985 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001993e:	39 c3                	cmp    ebx,eax
c0019940:	7c 47                	jl     c0019989 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019942:	8b 15 f4 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7f4
c0019948:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001994a:	01 c1                	add    ecx,eax
c001994c:	39 d9                	cmp    ecx,ebx
c001994e:	7e 6c                	jle    c00199bc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019950:	51                   	push   ecx
c0019951:	89 d9                	mov    ecx,ebx
c0019953:	29 c1                	sub    ecx,eax
c0019955:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019958:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001995c:	53                   	push   ebx
c001995d:	68 b7 a4 02 c0       	push   0xc002a4b7
c0019962:	e8 28 8f ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019967:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001996d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001996f:	a1 f4 d7 02 c0       	mov    eax,ds:0xc002d7f4
c0019974:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019977:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001997b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001997e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019981:	89 06                	mov    DWORD PTR [esi],eax
c0019983:	eb 51                	jmp    c00199d6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019985:	39 c3                	cmp    ebx,eax
c0019987:	7d 05                	jge    c001998e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019989:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001998c:	eb 20                	jmp    c00199ae <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001998e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019990:	8d 14 07             	lea    edx,[edi+eax*1]
c0019993:	39 da                	cmp    edx,ebx
c0019995:	7e 04                	jle    c001999b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019997:	29 c3                	sub    ebx,eax
c0019999:	eb 10                	jmp    c00199ab <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001999b:	8b 0d f4 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7f4
c00199a1:	03 11                	add    edx,DWORD PTR [ecx]
c00199a3:	39 da                	cmp    edx,ebx
c00199a5:	7e 15                	jle    c00199bc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00199a7:	29 c3                	sub    ebx,eax
c00199a9:	29 fb                	sub    ebx,edi
c00199ab:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00199ae:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c00199b2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00199b5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00199b8:	89 06                	mov    DWORD PTR [esi],eax
c00199ba:	eb 1d                	jmp    c00199d9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c00199bc:	83 ec 0c             	sub    esp,0xc
c00199bf:	68 cb a4 02 c0       	push   0xc002a4cb
c00199c4:	e8 18 00 00 00       	call   c00199e1 <Krnl::panic(char const*)>
c00199c9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00199cf:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00199d6:	83 c4 10             	add    esp,0x10
c00199d9:	89 f0                	mov    eax,esi
c00199db:	5b                   	pop    ebx
c00199dc:	5e                   	pop    esi
c00199dd:	5f                   	pop    edi
c00199de:	c2 04 00             	ret    0x4

c00199e1 <Krnl::panic(char const*)>:
c00199e1:	55                   	push   ebp
c00199e2:	89 e5                	mov    ebp,esp
c00199e4:	53                   	push   ebx
c00199e5:	50                   	push   eax
c00199e6:	a1 fc d7 02 c0       	mov    eax,ds:0xc002d7fc
c00199eb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00199ee:	85 c0                	test   eax,eax
c00199f0:	74 02                	je     c00199f4 <Krnl::panic(char const*)+0x13>
c00199f2:	ff d0                	call   eax
c00199f4:	fa                   	cli    
c00199f5:	c6 05 00 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d800,0x1
c00199fc:	83 ec 08             	sub    esp,0x8
c00199ff:	c6 05 04 bc 02 c0 00 	mov    BYTE PTR ds:0xc002bc04,0x0
c0019a06:	53                   	push   ebx
c0019a07:	68 e5 a4 02 c0       	push   0xc002a4e5
c0019a0c:	e8 7e 8e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019a11:	58                   	pop    eax
c0019a12:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a1d:	e8 2f 70 ff ff       	call   c0010a51 <setActiveTerminal(VgaText*)>
c0019a22:	83 c4 0c             	add    esp,0xc
c0019a25:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a2a:	6a 01                	push   0x1
c0019a2c:	6a 0f                	push   0xf
c0019a2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a34:	e8 49 6a ff ff       	call   c0010482 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019a39:	5a                   	pop    edx
c0019a3a:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a45:	e8 a8 72 ff ff       	call   c0010cf2 <VgaText::clearScreen()>
c0019a4a:	59                   	pop    ecx
c0019a4b:	58                   	pop    eax
c0019a4c:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a51:	68 fe a4 02 c0       	push   0xc002a4fe
c0019a56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a5c:	e8 0f 74 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019a61:	58                   	pop    eax
c0019a62:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a67:	5a                   	pop    edx
c0019a68:	68 a4 a5 02 c0       	push   0xc002a5a4
c0019a6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a73:	e8 f8 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019a78:	59                   	pop    ecx
c0019a79:	58                   	pop    eax
c0019a7a:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a7f:	68 1a a5 02 c0       	push   0xc002a51a
c0019a84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a8a:	e8 e1 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019a8f:	58                   	pop    eax
c0019a90:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019a95:	5a                   	pop    edx
c0019a96:	53                   	push   ebx
c0019a97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a9d:	e8 ce 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019aa2:	59                   	pop    ecx
c0019aa3:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019aa8:	5b                   	pop    ebx
c0019aa9:	68 3a a5 02 c0       	push   0xc002a53a
c0019aae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ab4:	e8 b7 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019ab9:	58                   	pop    eax
c0019aba:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019abf:	5a                   	pop    edx
c0019ac0:	68 e0 a5 02 c0       	push   0xc002a5e0
c0019ac5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019acb:	e8 a0 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019ad0:	59                   	pop    ecx
c0019ad1:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019ad6:	5b                   	pop    ebx
c0019ad7:	68 1a a5 02 c0       	push   0xc002a51a
c0019adc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae2:	e8 89 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019ae7:	58                   	pop    eax
c0019ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aed:	5a                   	pop    edx
c0019aee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019af1:	83 c0 0c             	add    eax,0xc
c0019af4:	50                   	push   eax
c0019af5:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b00:	e8 6b 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019b05:	59                   	pop    ecx
c0019b06:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019b0b:	5b                   	pop    ebx
c0019b0c:	68 39 a5 02 c0       	push   0xc002a539
c0019b11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b17:	e8 54 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019b1c:	58                   	pop    eax
c0019b1d:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019b22:	5a                   	pop    edx
c0019b23:	68 0c a6 02 c0       	push   0xc002a60c
c0019b28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b2e:	e8 3d 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019b33:	59                   	pop    ecx
c0019b34:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019b39:	5b                   	pop    ebx
c0019b3a:	68 4c a6 02 c0       	push   0xc002a64c
c0019b3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b45:	e8 26 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019b4a:	58                   	pop    eax
c0019b4b:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019b50:	5a                   	pop    edx
c0019b51:	68 25 a5 02 c0       	push   0xc002a525
c0019b56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b5c:	e8 0f 73 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019b61:	59                   	pop    ecx
c0019b62:	5b                   	pop    ebx
c0019b63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b66:	68 3d a5 02 c0       	push   0xc002a53d
c0019b6b:	e8 1f 8d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019b70:	58                   	pop    eax
c0019b71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b74:	5a                   	pop    edx
c0019b75:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019b78:	68 46 a5 02 c0       	push   0xc002a546
c0019b7d:	e8 0d 8d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019b82:	59                   	pop    ecx
c0019b83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b86:	5b                   	pop    ebx
c0019b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b89:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019b8c:	68 4f a5 02 c0       	push   0xc002a54f
c0019b91:	e8 f9 8c ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019b96:	58                   	pop    eax
c0019b97:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019b9c:	5a                   	pop    edx
c0019b9d:	68 90 a6 02 c0       	push   0xc002a690
c0019ba2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ba8:	e8 c3 72 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019bad:	59                   	pop    ecx
c0019bae:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019bb3:	5b                   	pop    ebx
c0019bb4:	68 58 a5 02 c0       	push   0xc002a558
c0019bb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bbf:	e8 ac 72 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019bc4:	0f 20 c0             	mov    eax,cr0
c0019bc7:	5a                   	pop    edx
c0019bc8:	59                   	pop    ecx
c0019bc9:	50                   	push   eax
c0019bca:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019bcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bd5:	e8 bc 72 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019bda:	5b                   	pop    ebx
c0019bdb:	58                   	pop    eax
c0019bdc:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019be1:	68 62 a5 02 c0       	push   0xc002a562
c0019be6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bec:	e8 7f 72 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019bf1:	0f 20 d0             	mov    eax,cr2
c0019bf4:	5a                   	pop    edx
c0019bf5:	59                   	pop    ecx
c0019bf6:	50                   	push   eax
c0019bf7:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019bfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c02:	e8 8f 72 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019c07:	5b                   	pop    ebx
c0019c08:	58                   	pop    eax
c0019c09:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c0e:	68 6c a5 02 c0       	push   0xc002a56c
c0019c13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c19:	e8 52 72 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019c1e:	0f 20 d8             	mov    eax,cr3
c0019c21:	5a                   	pop    edx
c0019c22:	59                   	pop    ecx
c0019c23:	50                   	push   eax
c0019c24:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c2f:	e8 62 72 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019c34:	5b                   	pop    ebx
c0019c35:	58                   	pop    eax
c0019c36:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c3b:	68 7f a5 02 c0       	push   0xc002a57f
c0019c40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c46:	e8 25 72 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019c4b:	0f 20 e0             	mov    eax,cr4
c0019c4e:	5a                   	pop    edx
c0019c4f:	59                   	pop    ecx
c0019c50:	50                   	push   eax
c0019c51:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c5c:	e8 35 72 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019c61:	5b                   	pop    ebx
c0019c62:	58                   	pop    eax
c0019c63:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c68:	68 89 a5 02 c0       	push   0xc002a589
c0019c6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c73:	e8 f8 71 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019c78:	5a                   	pop    edx
c0019c79:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c7e:	59                   	pop    ecx
c0019c7f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019c85:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019c88:	50                   	push   eax
c0019c89:	e8 08 72 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019c8e:	5b                   	pop    ebx
c0019c8f:	58                   	pop    eax
c0019c90:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019c95:	68 a0 a5 02 c0       	push   0xc002a5a0
c0019c9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ca0:	e8 cb 71 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019ca5:	5a                   	pop    edx
c0019ca6:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019cab:	59                   	pop    ecx
c0019cac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019cb2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019cb5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019cb8:	50                   	push   eax
c0019cb9:	e8 d8 71 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019cbe:	5b                   	pop    ebx
c0019cbf:	58                   	pop    eax
c0019cc0:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019cc5:	68 a0 a5 02 c0       	push   0xc002a5a0
c0019cca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd0:	e8 9b 71 ff ff       	call   c0010e70 <VgaText::puts(char const*)>
c0019cd5:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c0019cda:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019cdd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019ce3:	8b 12                	mov    edx,DWORD PTR [edx]
c0019ce5:	59                   	pop    ecx
c0019ce6:	5b                   	pop    ebx
c0019ce7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019cea:	50                   	push   eax
c0019ceb:	e8 a6 71 ff ff       	call   c0010e96 <VgaText::putx(unsigned int)>
c0019cf0:	83 c4 10             	add    esp,0x10
c0019cf3:	b2 fe                	mov    dl,0xfe
c0019cf5:	e4 60                	in     al,0x60
c0019cf7:	3c 1c                	cmp    al,0x1c
c0019cf9:	74 04                	je     c0019cff <Krnl::panic(char const*)+0x31e>
c0019cfb:	3c 5a                	cmp    al,0x5a
c0019cfd:	75 f6                	jne    c0019cf5 <Krnl::panic(char const*)+0x314>
c0019cff:	e4 64                	in     al,0x64
c0019d01:	a8 02                	test   al,0x2
c0019d03:	75 fa                	jne    c0019cff <Krnl::panic(char const*)+0x31e>
c0019d05:	88 d0                	mov    al,dl
c0019d07:	e6 64                	out    0x64,al
c0019d09:	fa                   	cli    
c0019d0a:	f4                   	hlt    
c0019d0b:	eb e8                	jmp    c0019cf5 <Krnl::panic(char const*)+0x314>

c0019d0d <Net::switchEndian16(unsigned short)>:
c0019d0d:	83 ec 04             	sub    esp,0x4
c0019d10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d14:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019d18:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019d1c:	c1 f8 08             	sar    eax,0x8
c0019d1f:	89 c2                	mov    edx,eax
c0019d21:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019d25:	c1 e0 08             	shl    eax,0x8
c0019d28:	09 d0                	or     eax,edx
c0019d2a:	83 c4 04             	add    esp,0x4
c0019d2d:	c3                   	ret    

c0019d2e <Net::switchEndian32(unsigned int)>:
c0019d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d32:	c1 e8 18             	shr    eax,0x18
c0019d35:	89 c2                	mov    edx,eax
c0019d37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d3b:	c1 e0 08             	shl    eax,0x8
c0019d3e:	25 00 00 ff 00       	and    eax,0xff0000
c0019d43:	09 c2                	or     edx,eax
c0019d45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d49:	c1 e8 08             	shr    eax,0x8
c0019d4c:	25 00 ff 00 00       	and    eax,0xff00
c0019d51:	09 c2                	or     edx,eax
c0019d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d57:	c1 e0 18             	shl    eax,0x18
c0019d5a:	09 d0                	or     eax,edx
c0019d5c:	c3                   	ret    

c0019d5d <Net::crc32Calc(unsigned char*, int)>:
c0019d5d:	83 ec 10             	sub    esp,0x10
c0019d60:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d65:	75 07                	jne    c0019d6e <Net::crc32Calc(unsigned char*, int)+0x11>
c0019d67:	b8 00 00 00 00       	mov    eax,0x0
c0019d6c:	eb 7c                	jmp    c0019dea <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019d6e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019d73:	7f 07                	jg     c0019d7c <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019d75:	b8 00 00 00 00       	mov    eax,0x0
c0019d7a:	eb 6e                	jmp    c0019dea <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019d7c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019d84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d90:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019d94:	7d 4e                	jge    c0019de4 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d9e:	01 d0                	add    eax,edx
c0019da0:	8a 00                	mov    al,BYTE PTR [eax]
c0019da2:	0f b6 c0             	movzx  eax,al
c0019da5:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019da9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019db1:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019db6:	7f 26                	jg     c0019dde <Net::crc32Calc(unsigned char*, int)+0x81>
c0019db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dbc:	83 e0 01             	and    eax,0x1
c0019dbf:	74 0d                	je     c0019dce <Net::crc32Calc(unsigned char*, int)+0x71>
c0019dc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dc5:	d1 e8                	shr    eax,1
c0019dc7:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019dcc:	eb 06                	jmp    c0019dd4 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd2:	d1 e8                	shr    eax,1
c0019dd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019dd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ddc:	eb d3                	jmp    c0019db1 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019dde:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019de2:	eb a8                	jmp    c0019d8c <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de8:	f7 d0                	not    eax
c0019dea:	83 c4 10             	add    esp,0x10
c0019ded:	c3                   	ret    

c0019dee <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019dee:	83 ec 1c             	sub    esp,0x1c
c0019df1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019df9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019e01:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019e06:	7f 14                	jg     c0019e1c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019e08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e0c:	8d 50 01             	lea    edx,[eax+0x1]
c0019e0f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e13:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019e16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019e1a:	eb e5                	jmp    c0019e01 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019e1c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e20:	8d 50 01             	lea    edx,[eax+0x1]
c0019e23:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e27:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019e2a:	83 ec 04             	sub    esp,0x4
c0019e2d:	6a 06                	push   0x6
c0019e2f:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019e33:	50                   	push   eax
c0019e34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019e38:	e8 18 68 fe ff       	call   c0000655 <memcpy>
c0019e3d:	83 c4 10             	add    esp,0x10
c0019e40:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019e45:	83 ec 04             	sub    esp,0x4
c0019e48:	6a 06                	push   0x6
c0019e4a:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019e4e:	50                   	push   eax
c0019e4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019e53:	e8 fd 67 fe ff       	call   c0000655 <memcpy>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019e60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e64:	0f b7 c0             	movzx  eax,ax
c0019e67:	c1 f8 08             	sar    eax,0x8
c0019e6a:	89 c1                	mov    ecx,eax
c0019e6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e70:	8d 50 01             	lea    edx,[eax+0x1]
c0019e73:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e77:	88 ca                	mov    dl,cl
c0019e79:	88 10                	mov    BYTE PTR [eax],dl
c0019e7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019e7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e83:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e86:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019e8a:	88 10                	mov    BYTE PTR [eax],dl
c0019e8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e94:	83 ec 04             	sub    esp,0x4
c0019e97:	52                   	push   edx
c0019e98:	50                   	push   eax
c0019e99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019e9d:	e8 b3 67 fe ff       	call   c0000655 <memcpy>
c0019ea2:	83 c4 10             	add    esp,0x10
c0019ea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ea9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019ead:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019eb5:	83 ec 08             	sub    esp,0x8
c0019eb8:	50                   	push   eax
c0019eb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ebd:	e8 9b fe ff ff       	call   c0019d5d <Net::crc32Calc(unsigned char*, int)>
c0019ec2:	83 c4 10             	add    esp,0x10
c0019ec5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ecd:	c1 e8 18             	shr    eax,0x18
c0019ed0:	89 c1                	mov    ecx,eax
c0019ed2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ed6:	8d 50 01             	lea    edx,[eax+0x1]
c0019ed9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019edd:	88 ca                	mov    dl,cl
c0019edf:	88 10                	mov    BYTE PTR [eax],dl
c0019ee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ee5:	c1 e8 10             	shr    eax,0x10
c0019ee8:	89 c1                	mov    ecx,eax
c0019eea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eee:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ef5:	88 ca                	mov    dl,cl
c0019ef7:	88 10                	mov    BYTE PTR [eax],dl
c0019ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019efd:	c1 e8 08             	shr    eax,0x8
c0019f00:	89 c1                	mov    ecx,eax
c0019f02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f06:	8d 50 01             	lea    edx,[eax+0x1]
c0019f09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019f0d:	88 ca                	mov    dl,cl
c0019f0f:	88 10                	mov    BYTE PTR [eax],dl
c0019f11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f15:	8d 50 01             	lea    edx,[eax+0x1]
c0019f18:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019f1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f20:	88 10                	mov    BYTE PTR [eax],dl
c0019f22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f26:	83 c4 1c             	add    esp,0x1c
c0019f29:	c3                   	ret    

c0019f2a <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019f2a:	83 ec 2c             	sub    esp,0x2c
c0019f2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f35:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019f3a:	83 ec 04             	sub    esp,0x4
c0019f3d:	6a 06                	push   0x6
c0019f3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f47:	83 c0 0e             	add    eax,0xe
c0019f4a:	50                   	push   eax
c0019f4b:	e8 05 67 fe ff       	call   c0000655 <memcpy>
c0019f50:	83 c4 10             	add    esp,0x10
c0019f53:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019f58:	83 ec 04             	sub    esp,0x4
c0019f5b:	6a 06                	push   0x6
c0019f5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f65:	83 c0 08             	add    eax,0x8
c0019f68:	50                   	push   eax
c0019f69:	e8 e7 66 fe ff       	call   c0000655 <memcpy>
c0019f6e:	83 c4 10             	add    esp,0x10
c0019f71:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019f76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f7a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f81:	8a 00                	mov    al,BYTE PTR [eax]
c0019f83:	0f b6 c0             	movzx  eax,al
c0019f86:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019f8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f8f:	8d 50 01             	lea    edx,[eax+0x1]
c0019f92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f96:	8a 00                	mov    al,BYTE PTR [eax]
c0019f98:	0f b6 c0             	movzx  eax,al
c0019f9b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019fa0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019fa5:	c1 e0 08             	shl    eax,0x8
c0019fa8:	89 c2                	mov    edx,eax
c0019faa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019fae:	09 d0                	or     eax,edx
c0019fb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019fb4:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019fb8:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019fbd:	75 3a                	jne    c0019ff9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fc3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019fc6:	66 3d dc 05          	cmp    ax,0x5dc
c0019fca:	77 10                	ja     c0019fdc <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019fcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fd0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019fd3:	0f b7 c0             	movzx  eax,ax
c0019fd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019fda:	eb 1d                	jmp    c0019ff9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019fdc:	83 ec 0c             	sub    esp,0xc
c0019fdf:	68 b8 a6 02 c0       	push   0xc002a6b8
c0019fe4:	e8 a6 88 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0019fe9:	83 c4 10             	add    esp,0x10
c0019fec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ff0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019ff4:	e9 c0 00 00 00       	jmp    c001a0b9 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ff9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a001:	8b 00                	mov    eax,DWORD PTR [eax]
c001a003:	83 ec 04             	sub    esp,0x4
c001a006:	52                   	push   edx
c001a007:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a00b:	50                   	push   eax
c001a00c:	e8 44 66 fe ff       	call   c0000655 <memcpy>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a018:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a01c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a020:	8d 50 01             	lea    edx,[eax+0x1]
c001a023:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a027:	8a 00                	mov    al,BYTE PTR [eax]
c001a029:	0f b6 c0             	movzx  eax,al
c001a02c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a030:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a034:	8d 50 01             	lea    edx,[eax+0x1]
c001a037:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a03b:	8a 00                	mov    al,BYTE PTR [eax]
c001a03d:	0f b6 c0             	movzx  eax,al
c001a040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a044:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a048:	8d 50 01             	lea    edx,[eax+0x1]
c001a04b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a04f:	8a 00                	mov    al,BYTE PTR [eax]
c001a051:	0f b6 c0             	movzx  eax,al
c001a054:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a058:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a05c:	8d 50 01             	lea    edx,[eax+0x1]
c001a05f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a063:	8a 00                	mov    al,BYTE PTR [eax]
c001a065:	0f b6 c0             	movzx  eax,al
c001a068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a06c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a070:	c1 e0 18             	shl    eax,0x18
c001a073:	89 c2                	mov    edx,eax
c001a075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a079:	c1 e0 10             	shl    eax,0x10
c001a07c:	09 c2                	or     edx,eax
c001a07e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a082:	c1 e0 08             	shl    eax,0x8
c001a085:	09 d0                	or     eax,edx
c001a087:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a08b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a08f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a093:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a097:	83 e8 04             	sub    eax,0x4
c001a09a:	83 ec 08             	sub    esp,0x8
c001a09d:	50                   	push   eax
c001a09e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0a2:	e8 b6 fc ff ff       	call   c0019d5d <Net::crc32Calc(unsigned char*, int)>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a0ae:	0f 94 c2             	sete   dl
c001a0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0b5:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a0b8:	90                   	nop
c001a0b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0bd:	83 c4 2c             	add    esp,0x2c
c001a0c0:	c2 04 00             	ret    0x4

c001a0c3 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a0c3:	55                   	push   ebp
c001a0c4:	57                   	push   edi
c001a0c5:	56                   	push   esi
c001a0c6:	53                   	push   ebx
c001a0c7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0cd:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a0d4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a0d6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a0d9:	80 fb 40             	cmp    bl,0x40
c001a0dc:	75 1b                	jne    c001a0f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a0de:	8a 16                	mov    dl,BYTE PTR [esi]
c001a0e0:	84 d2                	test   dl,dl
c001a0e2:	0f 84 f1 00 00 00    	je     c001a1d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a0e8:	8d 46 01             	lea    eax,[esi+0x1]
c001a0eb:	80 fa 3a             	cmp    dl,0x3a
c001a0ee:	74 04                	je     c001a0f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a0f0:	89 c6                	mov    esi,eax
c001a0f2:	eb ea                	jmp    c001a0de <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a0f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a0f7:	89 c6                	mov    esi,eax
c001a0f9:	50                   	push   eax
c001a0fa:	6a 40                	push   0x40
c001a0fc:	6a 00                	push   0x0
c001a0fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a102:	50                   	push   eax
c001a103:	e8 83 65 fe ff       	call   c000068b <memset>
c001a108:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a10f:	31 c0                	xor    eax,eax
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a116:	84 c9                	test   cl,cl
c001a118:	0f 84 bb 00 00 00    	je     c001a1d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a11e:	3d c7 00 00 00       	cmp    eax,0xc7
c001a123:	0f 8f b0 00 00 00    	jg     c001a1d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a129:	80 f9 0a             	cmp    cl,0xa
c001a12c:	0f 85 98 00 00 00    	jne    c001a1ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a132:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a137:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a13b:	a8 df                	test   al,0xdf
c001a13d:	0f 94 c1             	sete   cl
c001a140:	3c 23                	cmp    al,0x23
c001a142:	0f 94 c2             	sete   dl
c001a145:	08 d1                	or     cl,dl
c001a147:	75 4a                	jne    c001a193 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a149:	8d 50 f7             	lea    edx,[eax-0x9]
c001a14c:	80 fa 01             	cmp    dl,0x1
c001a14f:	76 42                	jbe    c001a193 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a151:	3c 5b                	cmp    al,0x5b
c001a153:	75 42                	jne    c001a197 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a155:	80 fb 40             	cmp    bl,0x40
c001a158:	75 39                	jne    c001a193 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a15a:	83 ec 0c             	sub    esp,0xc
c001a15d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a161:	52                   	push   edx
c001a162:	e8 41 65 fe ff       	call   c00006a8 <strlen>
c001a167:	83 c4 10             	add    esp,0x10
c001a16a:	83 f8 3f             	cmp    eax,0x3f
c001a16d:	77 6a                	ja     c001a1d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a16f:	50                   	push   eax
c001a170:	50                   	push   eax
c001a171:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a175:	52                   	push   edx
c001a176:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a17a:	52                   	push   edx
c001a17b:	e8 aa 65 fe ff       	call   c000072a <strcpy>
c001a180:	58                   	pop    eax
c001a181:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a185:	52                   	push   edx
c001a186:	e8 1d 65 fe ff       	call   c00006a8 <strlen>
c001a18b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a190:	83 c4 10             	add    esp,0x10
c001a193:	31 d2                	xor    edx,edx
c001a195:	eb 3a                	jmp    c001a1d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a197:	80 fb 40             	cmp    bl,0x40
c001a19a:	74 06                	je     c001a1a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a19c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a1a0:	eb 20                	jmp    c001a1c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a1a2:	50                   	push   eax
c001a1a3:	50                   	push   eax
c001a1a4:	55                   	push   ebp
c001a1a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1a9:	50                   	push   eax
c001a1aa:	e8 cc 65 fe ff       	call   c000077b <strcmp>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	85 c0                	test   eax,eax
c001a1b4:	75 dd                	jne    c001a193 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a1b6:	eb e4                	jmp    c001a19c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a1b8:	8d 50 01             	lea    edx,[eax+0x1]
c001a1bb:	80 f9 3d             	cmp    cl,0x3d
c001a1be:	74 1d                	je     c001a1dd <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a1c0:	89 d0                	mov    eax,edx
c001a1c2:	8a 08                	mov    cl,BYTE PTR [eax]
c001a1c4:	84 c9                	test   cl,cl
c001a1c6:	75 f0                	jne    c001a1b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a1c8:	eb 0f                	jmp    c001a1d9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a1ca:	8d 50 01             	lea    edx,[eax+0x1]
c001a1cd:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a1d1:	47                   	inc    edi
c001a1d2:	89 d0                	mov    eax,edx
c001a1d4:	e9 3b ff ff ff       	jmp    c001a114 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a1d9:	31 c0                	xor    eax,eax
c001a1db:	eb 33                	jmp    c001a210 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a1dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1e1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a1e4:	50                   	push   eax
c001a1e5:	50                   	push   eax
c001a1e6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a1ea:	50                   	push   eax
c001a1eb:	56                   	push   esi
c001a1ec:	e8 8a 65 fe ff       	call   c000077b <strcmp>
c001a1f1:	83 c4 10             	add    esp,0x10
c001a1f4:	85 c0                	test   eax,eax
c001a1f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1fa:	75 97                	jne    c001a193 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a1fc:	51                   	push   ecx
c001a1fd:	51                   	push   ecx
c001a1fe:	52                   	push   edx
c001a1ff:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a206:	e8 1f 65 fe ff       	call   c000072a <strcpy>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	b0 01                	mov    al,0x1
c001a210:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a216:	5b                   	pop    ebx
c001a217:	5e                   	pop    esi
c001a218:	5f                   	pop    edi
c001a219:	5d                   	pop    ebp
c001a21a:	c3                   	ret    

c001a21b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a21b:	57                   	push   edi
c001a21c:	56                   	push   esi
c001a21d:	53                   	push   ebx
c001a21e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a224:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a22b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a232:	53                   	push   ebx
c001a233:	e8 70 64 fe ff       	call   c00006a8 <strlen>
c001a238:	89 34 24             	mov    DWORD PTR [esp],esi
c001a23b:	89 c7                	mov    edi,eax
c001a23d:	e8 66 64 fe ff       	call   c00006a8 <strlen>
c001a242:	83 c4 10             	add    esp,0x10
c001a245:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a249:	3d ff 00 00 00       	cmp    eax,0xff
c001a24e:	0f 87 d3 00 00 00    	ja     c001a327 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a254:	57                   	push   edi
c001a255:	57                   	push   edi
c001a256:	56                   	push   esi
c001a257:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a25b:	56                   	push   esi
c001a25c:	e8 c9 64 fe ff       	call   c000072a <strcpy>
c001a261:	58                   	pop    eax
c001a262:	5a                   	pop    edx
c001a263:	68 ec aa 02 c0       	push   0xc002aaec
c001a268:	56                   	push   esi
c001a269:	e8 73 65 fe ff       	call   c00007e1 <strcat>
c001a26e:	59                   	pop    ecx
c001a26f:	5f                   	pop    edi
c001a270:	53                   	push   ebx
c001a271:	56                   	push   esi
c001a272:	e8 6a 65 fe ff       	call   c00007e1 <strcat>
c001a277:	58                   	pop    eax
c001a278:	5a                   	pop    edx
c001a279:	68 04 a7 02 c0       	push   0xc002a704
c001a27e:	56                   	push   esi
c001a27f:	e8 5d 65 fe ff       	call   c00007e1 <strcat>
c001a284:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a28b:	e8 5a 53 ff ff       	call   c000f5ea <malloc>
c001a290:	83 c4 0c             	add    esp,0xc
c001a293:	89 c3                	mov    ebx,eax
c001a295:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c001a29b:	56                   	push   esi
c001a29c:	50                   	push   eax
c001a29d:	e8 46 8b ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	85 db                	test   ebx,ebx
c001a2a7:	74 7e                	je     c001a327 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a2a9:	51                   	push   ecx
c001a2aa:	51                   	push   ecx
c001a2ab:	6a 01                	push   0x1
c001a2ad:	53                   	push   ebx
c001a2ae:	e8 99 8b ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	85 c0                	test   eax,eax
c001a2b8:	74 08                	je     c001a2c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a2bf:	53                   	push   ebx
c001a2c0:	eb 5f                	jmp    c001a321 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a2c2:	52                   	push   edx
c001a2c3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a2c7:	50                   	push   eax
c001a2c8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2cc:	50                   	push   eax
c001a2cd:	53                   	push   ebx
c001a2ce:	e8 25 8e ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c001a2d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2d7:	83 c4 10             	add    esp,0x10
c001a2da:	89 c1                	mov    ecx,eax
c001a2dc:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a2e0:	74 31                	je     c001a313 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	50                   	push   eax
c001a2e6:	e8 ff 52 ff ff       	call   c000f5ea <malloc>
c001a2eb:	89 c6                	mov    esi,eax
c001a2ed:	58                   	pop    eax
c001a2ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a2f0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a2f4:	52                   	push   edx
c001a2f5:	56                   	push   esi
c001a2f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2fe:	53                   	push   ebx
c001a2ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a302:	83 c4 20             	add    esp,0x20
c001a305:	85 c0                	test   eax,eax
c001a307:	75 0a                	jne    c001a313 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a30d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a311:	74 18                	je     c001a32b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a313:	83 ec 0c             	sub    esp,0xc
c001a316:	53                   	push   ebx
c001a317:	e8 8e 8b ff ff       	call   c0012eaa <File::close()>
c001a31c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a31e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a321:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	31 c0                	xor    eax,eax
c001a329:	eb 3b                	jmp    c001a366 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a32b:	83 ec 0c             	sub    esp,0xc
c001a32e:	53                   	push   ebx
c001a32f:	e8 76 8b ff ff       	call   c0012eaa <File::close()>
c001a334:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a339:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a33c:	83 c4 0c             	add    esp,0xc
c001a33f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a346:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a34d:	56                   	push   esi
c001a34e:	e8 70 fd ff ff       	call   c001a0c3 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a353:	89 34 24             	mov    DWORD PTR [esp],esi
c001a356:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a35a:	e8 9b 52 ff ff       	call   c000f5fa <free>
c001a35f:	83 c4 10             	add    esp,0x10
c001a362:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a366:	81 c4 20 01 00 00    	add    esp,0x120
c001a36c:	5b                   	pop    ebx
c001a36d:	5e                   	pop    esi
c001a36e:	5f                   	pop    edi
c001a36f:	c3                   	ret    

c001a370 <Reg::getLine(char*, char*, char*)>:
c001a370:	57                   	push   edi
c001a371:	56                   	push   esi
c001a372:	53                   	push   ebx
c001a373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a377:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a37b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a37f:	57                   	push   edi
c001a380:	56                   	push   esi
c001a381:	53                   	push   ebx
c001a382:	68 09 a7 02 c0       	push   0xc002a709
c001a387:	e8 8f fe ff ff       	call   c001a21b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	84 c0                	test   al,al
c001a391:	75 10                	jne    c001a3a3 <Reg::getLine(char*, char*, char*)+0x33>
c001a393:	57                   	push   edi
c001a394:	56                   	push   esi
c001a395:	53                   	push   ebx
c001a396:	68 2e a7 02 c0       	push   0xc002a72e
c001a39b:	e8 7b fe ff ff       	call   c001a21b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	5b                   	pop    ebx
c001a3a4:	5e                   	pop    esi
c001a3a5:	5f                   	pop    edi
c001a3a6:	c3                   	ret    

c001a3a7 <Reg::readInt(char*, char*, int*)>:
c001a3a7:	55                   	push   ebp
c001a3a8:	57                   	push   edi
c001a3a9:	56                   	push   esi
c001a3aa:	53                   	push   ebx
c001a3ab:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a3b1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a3b5:	57                   	push   edi
c001a3b6:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a3bd:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a3c4:	e8 a7 ff ff ff       	call   c001a370 <Reg::getLine(char*, char*, char*)>
c001a3c9:	83 c4 10             	add    esp,0x10
c001a3cc:	84 c0                	test   al,al
c001a3ce:	0f 84 b3 00 00 00    	je     c001a487 <Reg::readInt(char*, char*, int*)+0xe0>
c001a3d4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a3d8:	80 fa 2b             	cmp    dl,0x2b
c001a3db:	74 0c                	je     c001a3e9 <Reg::readInt(char*, char*, int*)+0x42>
c001a3dd:	80 fa 2d             	cmp    dl,0x2d
c001a3e0:	75 0e                	jne    c001a3f0 <Reg::readInt(char*, char*, int*)+0x49>
c001a3e2:	ba 01 00 00 00       	mov    edx,0x1
c001a3e7:	eb 0b                	jmp    c001a3f4 <Reg::readInt(char*, char*, int*)+0x4d>
c001a3e9:	ba 01 00 00 00       	mov    edx,0x1
c001a3ee:	eb 02                	jmp    c001a3f2 <Reg::readInt(char*, char*, int*)+0x4b>
c001a3f0:	31 d2                	xor    edx,edx
c001a3f2:	31 c0                	xor    eax,eax
c001a3f4:	be 0a 00 00 00       	mov    esi,0xa
c001a3f9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a3fe:	75 20                	jne    c001a420 <Reg::readInt(char*, char*, int*)+0x79>
c001a400:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a404:	80 f9 78             	cmp    cl,0x78
c001a407:	75 0a                	jne    c001a413 <Reg::readInt(char*, char*, int*)+0x6c>
c001a409:	83 c2 02             	add    edx,0x2
c001a40c:	be 10 00 00 00       	mov    esi,0x10
c001a411:	eb 0d                	jmp    c001a420 <Reg::readInt(char*, char*, int*)+0x79>
c001a413:	80 f9 62             	cmp    cl,0x62
c001a416:	75 08                	jne    c001a420 <Reg::readInt(char*, char*, int*)+0x79>
c001a418:	83 c2 02             	add    edx,0x2
c001a41b:	be 02 00 00 00       	mov    esi,0x2
c001a420:	01 d7                	add    edi,edx
c001a422:	31 d2                	xor    edx,edx
c001a424:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a426:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a42a:	80 fb 0d             	cmp    bl,0xd
c001a42d:	0f 94 c3             	sete   bl
c001a430:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a435:	0f 94 c1             	sete   cl
c001a438:	08 cb                	or     bl,cl
c001a43a:	75 3a                	jne    c001a476 <Reg::readInt(char*, char*, int*)+0xcf>
c001a43c:	0f af d6             	imul   edx,esi
c001a43f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a444:	83 fe 10             	cmp    esi,0x10
c001a447:	75 26                	jne    c001a46f <Reg::readInt(char*, char*, int*)+0xc8>
c001a449:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a44d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a450:	89 e9                	mov    ecx,ebp
c001a452:	80 f9 05             	cmp    cl,0x5
c001a455:	77 06                	ja     c001a45d <Reg::readInt(char*, char*, int*)+0xb6>
c001a457:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a45b:	eb 16                	jmp    c001a473 <Reg::readInt(char*, char*, int*)+0xcc>
c001a45d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a461:	83 e9 61             	sub    ecx,0x61
c001a464:	80 f9 05             	cmp    cl,0x5
c001a467:	77 06                	ja     c001a46f <Reg::readInt(char*, char*, int*)+0xc8>
c001a469:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a46d:	eb 04                	jmp    c001a473 <Reg::readInt(char*, char*, int*)+0xcc>
c001a46f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a473:	47                   	inc    edi
c001a474:	eb ae                	jmp    c001a424 <Reg::readInt(char*, char*, int*)+0x7d>
c001a476:	84 c0                	test   al,al
c001a478:	74 02                	je     c001a47c <Reg::readInt(char*, char*, int*)+0xd5>
c001a47a:	f7 da                	neg    edx
c001a47c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a483:	89 10                	mov    DWORD PTR [eax],edx
c001a485:	88 d8                	mov    al,bl
c001a487:	81 c4 ec 00 00 00    	add    esp,0xec
c001a48d:	5b                   	pop    ebx
c001a48e:	5e                   	pop    esi
c001a48f:	5f                   	pop    edi
c001a490:	5d                   	pop    ebp
c001a491:	c3                   	ret    

c001a492 <Reg::readString(char*, char*, char*, int)>:
c001a492:	57                   	push   edi
c001a493:	56                   	push   esi
c001a494:	53                   	push   ebx
c001a495:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a49b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a4a2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a4a6:	57                   	push   edi
c001a4a7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a4ae:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a4b5:	e8 b6 fe ff ff       	call   c001a370 <Reg::getLine(char*, char*, char*)>
c001a4ba:	83 c4 10             	add    esp,0x10
c001a4bd:	89 c6                	mov    esi,eax
c001a4bf:	84 c0                	test   al,al
c001a4c1:	74 44                	je     c001a507 <Reg::readString(char*, char*, char*, int)+0x75>
c001a4c3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a4ca:	31 c0                	xor    eax,eax
c001a4cc:	4a                   	dec    edx
c001a4cd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a4d0:	84 c9                	test   cl,cl
c001a4d2:	74 0f                	je     c001a4e3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a4d4:	39 c2                	cmp    edx,eax
c001a4d6:	7e 0b                	jle    c001a4e3 <Reg::readString(char*, char*, char*, int)+0x51>
c001a4d8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a4db:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a4e0:	40                   	inc    eax
c001a4e1:	eb ea                	jmp    c001a4cd <Reg::readString(char*, char*, char*, int)+0x3b>
c001a4e3:	83 ec 0c             	sub    esp,0xc
c001a4e6:	53                   	push   ebx
c001a4e7:	e8 bc 61 fe ff       	call   c00006a8 <strlen>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a4f4:	75 11                	jne    c001a507 <Reg::readString(char*, char*, char*, int)+0x75>
c001a4f6:	83 ec 0c             	sub    esp,0xc
c001a4f9:	53                   	push   ebx
c001a4fa:	e8 a9 61 fe ff       	call   c00006a8 <strlen>
c001a4ff:	83 c4 10             	add    esp,0x10
c001a502:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a507:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a50d:	89 f0                	mov    eax,esi
c001a50f:	5b                   	pop    ebx
c001a510:	5e                   	pop    esi
c001a511:	5f                   	pop    edi
c001a512:	c3                   	ret    

c001a513 <Reg::readBool(char*, char*, bool*)>:
c001a513:	83 ec 20             	sub    esp,0x20
c001a516:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a51a:	50                   	push   eax
c001a51b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a51f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a523:	e8 7f fe ff ff       	call   c001a3a7 <Reg::readInt(char*, char*, int*)>
c001a528:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a52d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a531:	0f 95 02             	setne  BYTE PTR [edx]
c001a534:	83 c4 2c             	add    esp,0x2c
c001a537:	c3                   	ret    

c001a538 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a538:	53                   	push   ebx
c001a539:	83 ec 1c             	sub    esp,0x1c
c001a53c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a540:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a544:	50                   	push   eax
c001a545:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a549:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a54d:	e8 c1 ff ff ff       	call   c001a513 <Reg::readBool(char*, char*, bool*)>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	84 c0                	test   al,al
c001a557:	74 04                	je     c001a55d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a559:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a55d:	88 d8                	mov    al,bl
c001a55f:	83 c4 18             	add    esp,0x18
c001a562:	5b                   	pop    ebx
c001a563:	c3                   	ret    

c001a564 <Reg::readIntWithDefault(char*, char*, int)>:
c001a564:	53                   	push   ebx
c001a565:	83 ec 1c             	sub    esp,0x1c
c001a568:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a56c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a570:	50                   	push   eax
c001a571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a579:	e8 29 fe ff ff       	call   c001a3a7 <Reg::readInt(char*, char*, int*)>
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	84 c0                	test   al,al
c001a583:	74 04                	je     c001a589 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a585:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a589:	89 d8                	mov    eax,ebx
c001a58b:	83 c4 18             	add    esp,0x18
c001a58e:	5b                   	pop    ebx
c001a58f:	c3                   	ret    

c001a590 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a590:	57                   	push   edi
c001a591:	56                   	push   esi
c001a592:	53                   	push   ebx
c001a593:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a597:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a59b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a59f:	56                   	push   esi
c001a5a0:	53                   	push   ebx
c001a5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5a9:	e8 e4 fe ff ff       	call   c001a492 <Reg::readString(char*, char*, char*, int)>
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	84 c0                	test   al,al
c001a5b3:	75 1b                	jne    c001a5d0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a5b5:	50                   	push   eax
c001a5b6:	56                   	push   esi
c001a5b7:	4e                   	dec    esi
c001a5b8:	6a 00                	push   0x0
c001a5ba:	53                   	push   ebx
c001a5bb:	e8 cb 60 fe ff       	call   c000068b <memset>
c001a5c0:	83 c4 0c             	add    esp,0xc
c001a5c3:	56                   	push   esi
c001a5c4:	57                   	push   edi
c001a5c5:	53                   	push   ebx
c001a5c6:	89 fb                	mov    ebx,edi
c001a5c8:	e8 88 60 fe ff       	call   c0000655 <memcpy>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	89 d8                	mov    eax,ebx
c001a5d2:	5b                   	pop    ebx
c001a5d3:	5e                   	pop    esi
c001a5d4:	5f                   	pop    edi
c001a5d5:	c3                   	ret    

c001a5d6 <Sys::exit(regs*)>:
c001a5d6:	83 ec 18             	sub    esp,0x18
c001a5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5dd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a5e0:	e8 ee 33 00 00       	call   c001d9d3 <terminateTask(int)>
c001a5e5:	83 c8 ff             	or     eax,0xffffffff
c001a5e8:	83 c4 1c             	add    esp,0x1c
c001a5eb:	89 c2                	mov    edx,eax
c001a5ed:	c3                   	ret    

c001a5ee <Sys::getCwd(regs*)>:
c001a5ee:	83 ec 10             	sub    esp,0x10
c001a5f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5f5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a5f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a5fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a600:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a603:	e8 e2 85 ff ff       	call   c0012bea <Fs::getcwd(Process*, char*, int)>
c001a608:	83 c4 1c             	add    esp,0x1c
c001a60b:	99                   	cdq    
c001a60c:	c3                   	ret    

c001a60d <Sys::getPID(regs*)>:
c001a60d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a612:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a615:	8b 00                	mov    eax,DWORD PTR [eax]
c001a617:	99                   	cdq    
c001a618:	c3                   	ret    

c001a619 <Sys::loadDLL(regs*)>:
c001a619:	56                   	push   esi
c001a61a:	53                   	push   ebx
c001a61b:	31 d2                	xor    edx,edx
c001a61d:	51                   	push   ecx
c001a61e:	b8 01 00 00 00       	mov    eax,0x1
c001a623:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a627:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a62b:	0f 84 8c 00 00 00    	je     c001a6bd <Sys::loadDLL(regs*)+0xa4>
c001a631:	83 ec 0c             	sub    esp,0xc
c001a634:	68 14 01 00 00       	push   0x114
c001a639:	e8 ac 4f ff ff       	call   c000f5ea <malloc>
c001a63e:	83 c4 0c             	add    esp,0xc
c001a641:	89 c3                	mov    ebx,eax
c001a643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a648:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a64b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a64e:	53                   	push   ebx
c001a64f:	e8 94 87 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001a654:	83 c4 10             	add    esp,0x10
c001a657:	31 d2                	xor    edx,edx
c001a659:	b8 02 00 00 00       	mov    eax,0x2
c001a65e:	85 db                	test   ebx,ebx
c001a660:	74 5b                	je     c001a6bd <Sys::loadDLL(regs*)+0xa4>
c001a662:	83 ec 0c             	sub    esp,0xc
c001a665:	53                   	push   ebx
c001a666:	e8 4f 8a ff ff       	call   c00130ba <File::exists()>
c001a66b:	83 c4 10             	add    esp,0x10
c001a66e:	84 c0                	test   al,al
c001a670:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a672:	75 11                	jne    c001a685 <Sys::loadDLL(regs*)+0x6c>
c001a674:	83 ec 0c             	sub    esp,0xc
c001a677:	53                   	push   ebx
c001a678:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a67b:	83 c4 10             	add    esp,0x10
c001a67e:	b8 03 00 00 00       	mov    eax,0x3
c001a683:	eb 36                	jmp    c001a6bb <Sys::loadDLL(regs*)+0xa2>
c001a685:	83 ec 0c             	sub    esp,0xc
c001a688:	53                   	push   ebx
c001a689:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a68c:	58                   	pop    eax
c001a68d:	5a                   	pop    edx
c001a68e:	6a 00                	push   0x0
c001a690:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a693:	e8 85 22 00 00       	call   c001c91d <Thr::loadDLL(char const*, bool)>
c001a698:	83 c4 10             	add    esp,0x10
c001a69b:	89 c1                	mov    ecx,eax
c001a69d:	31 d2                	xor    edx,edx
c001a69f:	b8 04 00 00 00       	mov    eax,0x4
c001a6a4:	85 c9                	test   ecx,ecx
c001a6a6:	74 15                	je     c001a6bd <Sys::loadDLL(regs*)+0xa4>
c001a6a8:	53                   	push   ebx
c001a6a9:	53                   	push   ebx
c001a6aa:	ff 35 c8 cc 02 c0    	push   DWORD PTR ds:0xc002ccc8
c001a6b0:	51                   	push   ecx
c001a6b1:	e8 76 24 00 00       	call   c001cb2c <Thr::executeDLL(unsigned long, void*)>
c001a6b6:	83 c4 10             	add    esp,0x10
c001a6b9:	31 c0                	xor    eax,eax
c001a6bb:	31 d2                	xor    edx,edx
c001a6bd:	59                   	pop    ecx
c001a6be:	5b                   	pop    ebx
c001a6bf:	5e                   	pop    esi
c001a6c0:	c3                   	ret    

c001a6c1 <Sys::read(regs*)>:
c001a6c1:	57                   	push   edi
c001a6c2:	56                   	push   esi
c001a6c3:	53                   	push   ebx
c001a6c4:	83 ec 10             	sub    esp,0x10
c001a6c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a6ce:	83 f8 02             	cmp    eax,0x2
c001a6d1:	77 10                	ja     c001a6e3 <Sys::read(regs*)+0x22>
c001a6d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6db:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a6e1:	eb 0e                	jmp    c001a6f1 <Sys::read(regs*)+0x30>
c001a6e3:	83 ec 0c             	sub    esp,0xc
c001a6e6:	50                   	push   eax
c001a6e7:	e8 5d 70 ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001a6ec:	83 c4 10             	add    esp,0x10
c001a6ef:	89 c1                	mov    ecx,eax
c001a6f1:	83 c8 ff             	or     eax,0xffffffff
c001a6f4:	85 c9                	test   ecx,ecx
c001a6f6:	89 c2                	mov    edx,eax
c001a6f8:	74 28                	je     c001a722 <Sys::read(regs*)+0x61>
c001a6fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a702:	31 ff                	xor    edi,edi
c001a704:	83 ec 0c             	sub    esp,0xc
c001a707:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a709:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a70d:	52                   	push   edx
c001a70e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a711:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a714:	57                   	push   edi
c001a715:	56                   	push   esi
c001a716:	51                   	push   ecx
c001a717:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a71a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a71e:	83 c4 20             	add    esp,0x20
c001a721:	99                   	cdq    
c001a722:	83 c4 10             	add    esp,0x10
c001a725:	5b                   	pop    ebx
c001a726:	5e                   	pop    esi
c001a727:	5f                   	pop    edi
c001a728:	c3                   	ret    

c001a729 <Sys::sbrk(regs*)>:
c001a729:	56                   	push   esi
c001a72a:	53                   	push   ebx
c001a72b:	50                   	push   eax
c001a72c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a731:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a735:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a738:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a73b:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a741:	85 db                	test   ebx,ebx
c001a743:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a746:	74 02                	je     c001a74a <Sys::sbrk(regs*)+0x21>
c001a748:	79 06                	jns    c001a750 <Sys::sbrk(regs*)+0x27>
c001a74a:	89 f0                	mov    eax,esi
c001a74c:	31 d2                	xor    edx,edx
c001a74e:	eb 2a                	jmp    c001a77a <Sys::sbrk(regs*)+0x51>
c001a750:	83 c8 ff             	or     eax,0xffffffff
c001a753:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a759:	89 c2                	mov    edx,eax
c001a75b:	77 1d                	ja     c001a77a <Sys::sbrk(regs*)+0x51>
c001a75d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a763:	50                   	push   eax
c001a764:	c1 ea 0c             	shr    edx,0xc
c001a767:	68 07 04 00 00       	push   0x407
c001a76c:	52                   	push   edx
c001a76d:	51                   	push   ecx
c001a76e:	e8 f7 78 ff ff       	call   c001206a <VAS::allocatePages(int, int)>
c001a773:	89 f0                	mov    eax,esi
c001a775:	31 d2                	xor    edx,edx
c001a777:	83 c4 10             	add    esp,0x10
c001a77a:	59                   	pop    ecx
c001a77b:	5b                   	pop    ebx
c001a77c:	5e                   	pop    esi
c001a77d:	c3                   	ret    

c001a77e <Sys::setCwd(regs*)>:
c001a77e:	83 ec 14             	sub    esp,0x14
c001a781:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a785:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a78d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a790:	e8 c4 89 ff ff       	call   c0013159 <Fs::setcwd(Process*, char*)>
c001a795:	83 c4 1c             	add    esp,0x1c
c001a798:	99                   	cdq    
c001a799:	c3                   	ret    

c001a79a <Sys::setTime(regs*)>:
c001a79a:	55                   	push   ebp
c001a79b:	31 d2                	xor    edx,edx
c001a79d:	57                   	push   edi
c001a79e:	bf 18 00 00 00       	mov    edi,0x18
c001a7a3:	56                   	push   esi
c001a7a4:	53                   	push   ebx
c001a7a5:	bb 3c 00 00 00       	mov    ebx,0x3c
c001a7aa:	83 ec 30             	sub    esp,0x30
c001a7ad:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001a7b1:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001a7b4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a7b7:	f7 f3                	div    ebx
c001a7b9:	89 d6                	mov    esi,edx
c001a7bb:	31 d2                	xor    edx,edx
c001a7bd:	f7 f3                	div    ebx
c001a7bf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a7c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a7c6:	bb 10 0e 00 00       	mov    ebx,0xe10
c001a7cb:	31 d2                	xor    edx,edx
c001a7cd:	f7 f3                	div    ebx
c001a7cf:	31 d2                	xor    edx,edx
c001a7d1:	bb 0c 00 00 00       	mov    ebx,0xc
c001a7d6:	f7 f7                	div    edi
c001a7d8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a7db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a7df:	0f b7 cd             	movzx  ecx,bp
c001a7e2:	56                   	push   esi
c001a7e3:	89 c7                	mov    edi,eax
c001a7e5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001a7e9:	c1 e6 10             	shl    esi,0x10
c001a7ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f0:	83 e7 1f             	and    edi,0x1f
c001a7f3:	51                   	push   ecx
c001a7f4:	47                   	inc    edi
c001a7f5:	c1 e8 05             	shr    eax,0x5
c001a7f8:	31 d2                	xor    edx,edx
c001a7fa:	f7 f3                	div    ebx
c001a7fc:	31 db                	xor    ebx,ebx
c001a7fe:	52                   	push   edx
c001a7ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a803:	57                   	push   edi
c001a804:	68 49 a7 02 c0       	push   0xc002a749
c001a809:	e8 81 80 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001a80e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a812:	89 f8                	mov    eax,edi
c001a814:	31 c9                	xor    ecx,ecx
c001a816:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a81a:	88 c1                	mov    cl,al
c001a81c:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001a822:	88 d5                	mov    ch,dl
c001a824:	c1 e0 10             	shl    eax,0x10
c001a827:	0f b7 d1             	movzx  edx,cx
c001a82a:	09 c2                	or     edx,eax
c001a82c:	89 d8                	mov    eax,ebx
c001a82e:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001a833:	09 f0                	or     eax,esi
c001a835:	89 c3                	mov    ebx,eax
c001a837:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001a83b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a83f:	83 c4 18             	add    esp,0x18
c001a842:	53                   	push   ebx
c001a843:	52                   	push   edx
c001a844:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a848:	8d 74 24 28          	lea    esi,[esp+0x28]
c001a84c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a850:	e8 1e 90 ff ff       	call   c0013873 <datetimeToSeconds(datetime_t)>
c001a855:	83 c4 0c             	add    esp,0xc
c001a858:	52                   	push   edx
c001a859:	50                   	push   eax
c001a85a:	56                   	push   esi
c001a85b:	e8 9a 91 ff ff       	call   c00139fa <secondsToDatetime(unsigned long long)>
c001a860:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a864:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a868:	51                   	push   ecx
c001a869:	89 d6                	mov    esi,edx
c001a86b:	51                   	push   ecx
c001a86c:	c1 ee 10             	shr    esi,0x10
c001a86f:	89 f3                	mov    ebx,esi
c001a871:	0f b6 f3             	movzx  esi,bl
c001a874:	56                   	push   esi
c001a875:	0f b6 f6             	movzx  esi,dh
c001a878:	0f b6 d2             	movzx  edx,dl
c001a87b:	56                   	push   esi
c001a87c:	52                   	push   edx
c001a87d:	89 c2                	mov    edx,eax
c001a87f:	c1 ea 10             	shr    edx,0x10
c001a882:	52                   	push   edx
c001a883:	0f b6 d4             	movzx  edx,ah
c001a886:	0f b6 c0             	movzx  eax,al
c001a889:	52                   	push   edx
c001a88a:	50                   	push   eax
c001a88b:	68 65 a7 02 c0       	push   0xc002a765
c001a890:	e8 fa 7f ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001a895:	83 c4 2c             	add    esp,0x2c
c001a898:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001a89d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a8a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a8a5:	53                   	push   ebx
c001a8a6:	51                   	push   ecx
c001a8a7:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001a8ad:	e8 e8 90 ff ff       	call   c001399a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001a8b2:	83 f0 01             	xor    eax,0x1
c001a8b5:	31 d2                	xor    edx,edx
c001a8b7:	0f b6 c0             	movzx  eax,al
c001a8ba:	83 c4 3c             	add    esp,0x3c
c001a8bd:	5b                   	pop    ebx
c001a8be:	5e                   	pop    esi
c001a8bf:	5f                   	pop    edi
c001a8c0:	5d                   	pop    ebp
c001a8c1:	c3                   	ret    

c001a8c2 <Sys::timezone(regs*)>:
c001a8c2:	53                   	push   ebx
c001a8c3:	83 ec 08             	sub    esp,0x8
c001a8c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8ca:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001a8ce:	75 17                	jne    c001a8e7 <Sys::timezone(regs*)+0x25>
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	68 81 a7 02 c0       	push   0xc002a781
c001a8d8:	e8 b2 7f ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001a8dd:	83 c8 ff             	or     eax,0xffffffff
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	89 c2                	mov    edx,eax
c001a8e5:	eb 20                	jmp    c001a907 <Sys::timezone(regs*)+0x45>
c001a8e7:	83 ec 0c             	sub    esp,0xc
c001a8ea:	68 b9 a7 02 c0       	push   0xc002a7b9
c001a8ef:	e8 9b 7f ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001a8f4:	58                   	pop    eax
c001a8f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001a8f8:	e8 ff 8d ff ff       	call   c00136fc <User::loadClockSettings(int)>
c001a8fd:	83 c4 10             	add    esp,0x10
c001a900:	b8 01 00 00 00       	mov    eax,0x1
c001a905:	31 d2                	xor    edx,edx
c001a907:	83 c4 08             	add    esp,0x8
c001a90a:	5b                   	pop    ebx
c001a90b:	c3                   	ret    

c001a90c <Sys::write(regs*)>:
c001a90c:	57                   	push   edi
c001a90d:	56                   	push   esi
c001a90e:	53                   	push   ebx
c001a90f:	83 ec 10             	sub    esp,0x10
c001a912:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a916:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a919:	83 f8 02             	cmp    eax,0x2
c001a91c:	77 10                	ja     c001a92e <Sys::write(regs*)+0x22>
c001a91e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a923:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a926:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a92c:	eb 0e                	jmp    c001a93c <Sys::write(regs*)+0x30>
c001a92e:	83 ec 0c             	sub    esp,0xc
c001a931:	50                   	push   eax
c001a932:	e8 12 6e ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	89 c1                	mov    ecx,eax
c001a93c:	83 c8 ff             	or     eax,0xffffffff
c001a93f:	85 c9                	test   ecx,ecx
c001a941:	89 c2                	mov    edx,eax
c001a943:	74 28                	je     c001a96d <Sys::write(regs*)+0x61>
c001a945:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a94d:	31 ff                	xor    edi,edi
c001a94f:	83 ec 0c             	sub    esp,0xc
c001a952:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a954:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a958:	52                   	push   edx
c001a959:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a95c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a95f:	57                   	push   edi
c001a960:	56                   	push   esi
c001a961:	51                   	push   ecx
c001a962:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a965:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a969:	83 c4 20             	add    esp,0x20
c001a96c:	99                   	cdq    
c001a96d:	83 c4 10             	add    esp,0x10
c001a970:	5b                   	pop    ebx
c001a971:	5e                   	pop    esi
c001a972:	5f                   	pop    edi
c001a973:	c3                   	ret    

c001a974 <Sys::yield(regs*)>:
c001a974:	57                   	push   edi
c001a975:	56                   	push   esi
c001a976:	53                   	push   ebx
c001a977:	e8 14 26 00 00       	call   c001cf90 <lockScheduler()>
c001a97c:	e8 4b 29 00 00       	call   c001d2cc <schedule()>
c001a981:	e8 0c 26 00 00       	call   c001cf92 <unlockScheduler()>
c001a986:	8b 35 50 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d350
c001a98c:	8b 3d 54 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d354
c001a992:	89 f0                	mov    eax,esi
c001a994:	89 fb                	mov    ebx,edi
c001a996:	89 f1                	mov    ecx,esi
c001a998:	c1 e0 07             	shl    eax,0x7
c001a99b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a99f:	25 80 30 0f 00       	and    eax,0xf3080
c001a9a4:	c1 eb 17             	shr    ebx,0x17
c001a9a7:	31 c8                	xor    eax,ecx
c001a9a9:	89 da                	mov    edx,ebx
c001a9ab:	5b                   	pop    ebx
c001a9ac:	5e                   	pop    esi
c001a9ad:	5f                   	pop    edi
c001a9ae:	c3                   	ret    

c001a9af <sysCallSeekDir(regs*)>:
c001a9af:	31 c0                	xor    eax,eax
c001a9b1:	31 d2                	xor    edx,edx
c001a9b3:	c3                   	ret    

c001a9b4 <sysCallTellDir(regs*)>:
c001a9b4:	31 c0                	xor    eax,eax
c001a9b6:	31 d2                	xor    edx,edx
c001a9b8:	c3                   	ret    

c001a9b9 <sysCallVerify(regs*)>:
c001a9b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9bd:	31 d2                	xor    edx,edx
c001a9bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a9c2:	c3                   	ret    

c001a9c3 <sysCallGetArgc(regs*)>:
c001a9c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9cb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a9d1:	99                   	cdq    
c001a9d2:	c3                   	ret    

c001a9d3 <sysFormatDisk(regs*)>:
c001a9d3:	56                   	push   esi
c001a9d4:	53                   	push   ebx
c001a9d5:	53                   	push   ebx
c001a9d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9da:	8b 1d 48 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ce48
c001a9e0:	eb 25                	jmp    c001aa07 <sysFormatDisk(regs*)+0x34>
c001a9e2:	83 ec 0c             	sub    esp,0xc
c001a9e5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a9e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a9ea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a9ed:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a9f0:	50                   	push   eax
c001a9f1:	ff 34 85 e0 d2 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d20]
c001a9f8:	53                   	push   ebx
c001a9f9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a9fc:	83 c4 20             	add    esp,0x20
c001a9ff:	83 f8 08             	cmp    eax,0x8
c001aa02:	75 12                	jne    c001aa16 <sysFormatDisk(regs*)+0x43>
c001aa04:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001aa07:	85 db                	test   ebx,ebx
c001aa09:	75 d7                	jne    c001a9e2 <sysFormatDisk(regs*)+0xf>
c001aa0b:	59                   	pop    ecx
c001aa0c:	b8 03 00 00 00       	mov    eax,0x3
c001aa11:	31 d2                	xor    edx,edx
c001aa13:	5b                   	pop    ebx
c001aa14:	5e                   	pop    esi
c001aa15:	c3                   	ret    
c001aa16:	85 c0                	test   eax,eax
c001aa18:	74 1b                	je     c001aa35 <sysFormatDisk(regs*)+0x62>
c001aa1a:	83 f8 09             	cmp    eax,0x9
c001aa1d:	74 0b                	je     c001aa2a <sysFormatDisk(regs*)+0x57>
c001aa1f:	59                   	pop    ecx
c001aa20:	b8 02 00 00 00       	mov    eax,0x2
c001aa25:	31 d2                	xor    edx,edx
c001aa27:	5b                   	pop    ebx
c001aa28:	5e                   	pop    esi
c001aa29:	c3                   	ret    
c001aa2a:	59                   	pop    ecx
c001aa2b:	b8 01 00 00 00       	mov    eax,0x1
c001aa30:	31 d2                	xor    edx,edx
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	c3                   	ret    
c001aa35:	59                   	pop    ecx
c001aa36:	31 c0                	xor    eax,eax
c001aa38:	31 d2                	xor    edx,edx
c001aa3a:	5b                   	pop    ebx
c001aa3b:	5e                   	pop    esi
c001aa3c:	c3                   	ret    

c001aa3d <sysSetDiskVolumeLabel(regs*)>:
c001aa3d:	56                   	push   esi
c001aa3e:	53                   	push   ebx
c001aa3f:	53                   	push   ebx
c001aa40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa44:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aa47:	83 f8 19             	cmp    eax,0x19
c001aa4a:	77 29                	ja     c001aa75 <sysSetDiskVolumeLabel(regs*)+0x38>
c001aa4c:	8b 0c 85 e0 d2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2d20]
c001aa53:	85 c9                	test   ecx,ecx
c001aa55:	74 1e                	je     c001aa75 <sysSetDiskVolumeLabel(regs*)+0x38>
c001aa57:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001aa5a:	85 d2                	test   edx,edx
c001aa5c:	74 17                	je     c001aa75 <sysSetDiskVolumeLabel(regs*)+0x38>
c001aa5e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001aa64:	8b 33                	mov    esi,DWORD PTR [ebx]
c001aa66:	52                   	push   edx
c001aa67:	50                   	push   eax
c001aa68:	51                   	push   ecx
c001aa69:	53                   	push   ebx
c001aa6a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001aa6d:	83 c4 10             	add    esp,0x10
c001aa70:	99                   	cdq    
c001aa71:	59                   	pop    ecx
c001aa72:	5b                   	pop    ebx
c001aa73:	5e                   	pop    esi
c001aa74:	c3                   	ret    
c001aa75:	59                   	pop    ecx
c001aa76:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aa7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa80:	5b                   	pop    ebx
c001aa81:	5e                   	pop    esi
c001aa82:	c3                   	ret    

c001aa83 <sysGetDiskVolumeLabel(regs*)>:
c001aa83:	57                   	push   edi
c001aa84:	56                   	push   esi
c001aa85:	53                   	push   ebx
c001aa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa8a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001aa8d:	83 fa 19             	cmp    edx,0x19
c001aa90:	77 34                	ja     c001aac6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001aa92:	8b 0c 95 e0 d2 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2d20]
c001aa99:	85 c9                	test   ecx,ecx
c001aa9b:	74 29                	je     c001aac6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001aa9d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001aaa0:	85 db                	test   ebx,ebx
c001aaa2:	74 22                	je     c001aac6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001aaa4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001aaa7:	85 c0                	test   eax,eax
c001aaa9:	74 1b                	je     c001aac6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001aaab:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001aab1:	83 ec 0c             	sub    esp,0xc
c001aab4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001aab6:	50                   	push   eax
c001aab7:	53                   	push   ebx
c001aab8:	52                   	push   edx
c001aab9:	51                   	push   ecx
c001aaba:	56                   	push   esi
c001aabb:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001aabe:	83 c4 20             	add    esp,0x20
c001aac1:	99                   	cdq    
c001aac2:	5b                   	pop    ebx
c001aac3:	5e                   	pop    esi
c001aac4:	5f                   	pop    edi
c001aac5:	c3                   	ret    
c001aac6:	5b                   	pop    ebx
c001aac7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aacc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aad1:	5e                   	pop    esi
c001aad2:	5f                   	pop    edi
c001aad3:	c3                   	ret    

c001aad4 <sysShutdown(regs*)>:
c001aad4:	83 ec 0c             	sub    esp,0xc
c001aad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aadb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aade:	85 c0                	test   eax,eax
c001aae0:	74 18                	je     c001aafa <sysShutdown(regs*)+0x26>
c001aae2:	83 f8 01             	cmp    eax,0x1
c001aae5:	74 38                	je     c001ab1f <sysShutdown(regs*)+0x4b>
c001aae7:	83 f8 02             	cmp    eax,0x2
c001aaea:	74 24                	je     c001ab10 <sysShutdown(regs*)+0x3c>
c001aaec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aaf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aaf6:	83 c4 0c             	add    esp,0xc
c001aaf9:	c3                   	ret    
c001aafa:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001aaff:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab01:	6a 00                	push   0x0
c001ab03:	6a 00                	push   0x0
c001ab05:	6a 00                	push   0x0
c001ab07:	50                   	push   eax
c001ab08:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	eb dc                	jmp    c001aaec <sysShutdown(regs*)+0x18>
c001ab10:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001ab15:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab17:	6a 00                	push   0x0
c001ab19:	6a 00                	push   0x0
c001ab1b:	6a 01                	push   0x1
c001ab1d:	eb e8                	jmp    c001ab07 <sysShutdown(regs*)+0x33>
c001ab1f:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c001ab24:	85 c0                	test   eax,eax
c001ab26:	74 02                	je     c001ab2a <sysShutdown(regs*)+0x56>
c001ab28:	ff d0                	call   eax
c001ab2a:	31 c0                	xor    eax,eax
c001ab2c:	31 d2                	xor    edx,edx
c001ab2e:	83 c4 0c             	add    esp,0xc
c001ab31:	c3                   	ret    

c001ab32 <sysCallRealpath(regs*)>:
c001ab32:	83 ec 0c             	sub    esp,0xc
c001ab35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab39:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001ab3c:	85 d2                	test   edx,edx
c001ab3e:	74 07                	je     c001ab47 <sysCallRealpath(regs*)+0x15>
c001ab40:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ab43:	85 c0                	test   eax,eax
c001ab45:	75 0b                	jne    c001ab52 <sysCallRealpath(regs*)+0x20>
c001ab47:	b8 01 00 00 00       	mov    eax,0x1
c001ab4c:	31 d2                	xor    edx,edx
c001ab4e:	83 c4 0c             	add    esp,0xc
c001ab51:	c3                   	ret    
c001ab52:	51                   	push   ecx
c001ab53:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ab59:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ab5c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ab62:	51                   	push   ecx
c001ab63:	52                   	push   edx
c001ab64:	50                   	push   eax
c001ab65:	e8 d4 80 ff ff       	call   c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>
c001ab6a:	83 c4 10             	add    esp,0x10
c001ab6d:	31 c0                	xor    eax,eax
c001ab6f:	31 d2                	xor    edx,edx
c001ab71:	83 c4 0c             	add    esp,0xc
c001ab74:	c3                   	ret    

c001ab75 <sysCallReadDir(regs*)>:
c001ab75:	53                   	push   ebx
c001ab76:	83 ec 18             	sub    esp,0x18
c001ab79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab7d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ab80:	83 f8 02             	cmp    eax,0x2
c001ab83:	76 53                	jbe    c001abd8 <sysCallReadDir(regs*)+0x63>
c001ab85:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ab88:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ab8e:	77 4f                	ja     c001abdf <sysCallReadDir(regs*)+0x6a>
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	50                   	push   eax
c001ab94:	e8 b0 6b ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	85 c0                	test   eax,eax
c001ab9e:	74 50                	je     c001abf0 <sysCallReadDir(regs*)+0x7b>
c001aba0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	8b 10                	mov    edx,DWORD PTR [eax]
c001abad:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001abb1:	51                   	push   ecx
c001abb2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001abb5:	6a 00                	push   0x0
c001abb7:	68 10 01 00 00       	push   0x110
c001abbc:	50                   	push   eax
c001abbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001abc0:	83 c4 20             	add    esp,0x20
c001abc3:	85 c0                	test   eax,eax
c001abc5:	74 38                	je     c001abff <sysCallReadDir(regs*)+0x8a>
c001abc7:	83 f8 07             	cmp    eax,0x7
c001abca:	74 0c                	je     c001abd8 <sysCallReadDir(regs*)+0x63>
c001abcc:	b8 02 00 00 00       	mov    eax,0x2
c001abd1:	31 d2                	xor    edx,edx
c001abd3:	83 c4 18             	add    esp,0x18
c001abd6:	5b                   	pop    ebx
c001abd7:	c3                   	ret    
c001abd8:	b8 01 00 00 00       	mov    eax,0x1
c001abdd:	eb f2                	jmp    c001abd1 <sysCallReadDir(regs*)+0x5c>
c001abdf:	83 ec 08             	sub    esp,0x8
c001abe2:	52                   	push   edx
c001abe3:	68 f8 a7 02 c0       	push   0xc002a7f8
c001abe8:	e8 a2 7c ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abf5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abfa:	83 c4 18             	add    esp,0x18
c001abfd:	5b                   	pop    ebx
c001abfe:	c3                   	ret    
c001abff:	31 c0                	xor    eax,eax
c001ac01:	eb ce                	jmp    c001abd1 <sysCallReadDir(regs*)+0x5c>

c001ac03 <sysCallIsATTY(regs*)>:
c001ac03:	83 ec 0c             	sub    esp,0xc
c001ac06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac0d:	83 f8 02             	cmp    eax,0x2
c001ac10:	76 07                	jbe    c001ac19 <sysCallIsATTY(regs*)+0x16>
c001ac12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ac17:	75 26                	jne    c001ac3f <sysCallIsATTY(regs*)+0x3c>
c001ac19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac27:	85 c0                	test   eax,eax
c001ac29:	74 24                	je     c001ac4f <sysCallIsATTY(regs*)+0x4c>
c001ac2b:	83 ec 0c             	sub    esp,0xc
c001ac2e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac30:	50                   	push   eax
c001ac31:	ff 12                	call   DWORD PTR [edx]
c001ac33:	31 d2                	xor    edx,edx
c001ac35:	0f b6 c0             	movzx  eax,al
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	83 c4 0c             	add    esp,0xc
c001ac3e:	c3                   	ret    
c001ac3f:	83 ec 0c             	sub    esp,0xc
c001ac42:	50                   	push   eax
c001ac43:	e8 01 6b ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	85 c0                	test   eax,eax
c001ac4d:	75 dc                	jne    c001ac2b <sysCallIsATTY(regs*)+0x28>
c001ac4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac59:	83 c4 0c             	add    esp,0xc
c001ac5c:	c3                   	ret    

c001ac5d <sysCallSeek(regs*)>:
c001ac5d:	53                   	push   ebx
c001ac5e:	83 ec 08             	sub    esp,0x8
c001ac61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac65:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac68:	83 f8 02             	cmp    eax,0x2
c001ac6b:	76 4a                	jbe    c001acb7 <sysCallSeek(regs*)+0x5a>
c001ac6d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac72:	77 32                	ja     c001aca6 <sysCallSeek(regs*)+0x49>
c001ac74:	83 ec 0c             	sub    esp,0xc
c001ac77:	50                   	push   eax
c001ac78:	e8 cc 6a ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001ac7d:	83 c4 0c             	add    esp,0xc
c001ac80:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ac83:	31 db                	xor    ebx,ebx
c001ac85:	53                   	push   ebx
c001ac86:	51                   	push   ecx
c001ac87:	50                   	push   eax
c001ac88:	e8 7d 82 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001ac8d:	83 c4 10             	add    esp,0x10
c001ac90:	85 c0                	test   eax,eax
c001ac92:	0f 95 c0             	setne  al
c001ac95:	31 d2                	xor    edx,edx
c001ac97:	0f b6 c0             	movzx  eax,al
c001ac9a:	f7 d8                	neg    eax
c001ac9c:	83 d2 00             	adc    edx,0x0
c001ac9f:	83 c4 08             	add    esp,0x8
c001aca2:	f7 da                	neg    edx
c001aca4:	5b                   	pop    ebx
c001aca5:	c3                   	ret    
c001aca6:	83 ec 08             	sub    esp,0x8
c001aca9:	50                   	push   eax
c001acaa:	68 67 a8 02 c0       	push   0xc002a867
c001acaf:	e8 db 7b ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001acb4:	83 c4 10             	add    esp,0x10
c001acb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acbc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acc1:	83 c4 08             	add    esp,0x8
c001acc4:	5b                   	pop    ebx
c001acc5:	c3                   	ret    

c001acc6 <sysCallTell(regs*)>:
c001acc6:	53                   	push   ebx
c001acc7:	83 ec 08             	sub    esp,0x8
c001acca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001acd1:	83 f8 02             	cmp    eax,0x2
c001acd4:	76 5e                	jbe    c001ad34 <sysCallTell(regs*)+0x6e>
c001acd6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001acdb:	77 2d                	ja     c001ad0a <sysCallTell(regs*)+0x44>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	50                   	push   eax
c001ace1:	e8 63 6a ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001ace6:	5a                   	pop    edx
c001ace7:	59                   	pop    ecx
c001ace8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aceb:	50                   	push   eax
c001acec:	e8 6f 82 ff ff       	call   c0012f60 <File::tell(unsigned long long*)>
c001acf1:	83 c4 10             	add    esp,0x10
c001acf4:	85 c0                	test   eax,eax
c001acf6:	0f 95 c0             	setne  al
c001acf9:	31 d2                	xor    edx,edx
c001acfb:	0f b6 c0             	movzx  eax,al
c001acfe:	f7 d8                	neg    eax
c001ad00:	83 d2 00             	adc    edx,0x0
c001ad03:	83 c4 08             	add    esp,0x8
c001ad06:	f7 da                	neg    edx
c001ad08:	5b                   	pop    ebx
c001ad09:	c3                   	ret    
c001ad0a:	83 ec 08             	sub    esp,0x8
c001ad0d:	50                   	push   eax
c001ad0e:	68 81 a8 02 c0       	push   0xc002a881
c001ad13:	e8 77 7b ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001ad18:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ad24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ad2b:	31 d2                	xor    edx,edx
c001ad2d:	31 c0                	xor    eax,eax
c001ad2f:	83 c4 08             	add    esp,0x8
c001ad32:	5b                   	pop    ebx
c001ad33:	c3                   	ret    
c001ad34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad39:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad3e:	83 c4 08             	add    esp,0x8
c001ad41:	5b                   	pop    ebx
c001ad42:	c3                   	ret    

c001ad43 <sysCallSize(regs*)>:
c001ad43:	53                   	push   ebx
c001ad44:	83 ec 18             	sub    esp,0x18
c001ad47:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad4e:	83 f8 02             	cmp    eax,0x2
c001ad51:	76 64                	jbe    c001adb7 <sysCallSize(regs*)+0x74>
c001ad53:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad58:	77 33                	ja     c001ad8d <sysCallSize(regs*)+0x4a>
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	50                   	push   eax
c001ad5e:	e8 e6 69 ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001ad63:	83 c4 0c             	add    esp,0xc
c001ad66:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ad6a:	52                   	push   edx
c001ad6b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ad6e:	50                   	push   eax
c001ad6f:	e8 84 83 ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c001ad74:	83 c4 10             	add    esp,0x10
c001ad77:	85 c0                	test   eax,eax
c001ad79:	0f 95 c0             	setne  al
c001ad7c:	31 d2                	xor    edx,edx
c001ad7e:	0f b6 c0             	movzx  eax,al
c001ad81:	f7 d8                	neg    eax
c001ad83:	83 d2 00             	adc    edx,0x0
c001ad86:	83 c4 18             	add    esp,0x18
c001ad89:	f7 da                	neg    edx
c001ad8b:	5b                   	pop    ebx
c001ad8c:	c3                   	ret    
c001ad8d:	83 ec 08             	sub    esp,0x8
c001ad90:	50                   	push   eax
c001ad91:	68 9b a8 02 c0       	push   0xc002a89b
c001ad96:	e8 f4 7a ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001ad9b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ad9e:	83 c4 10             	add    esp,0x10
c001ada1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ada7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001adae:	31 d2                	xor    edx,edx
c001adb0:	31 c0                	xor    eax,eax
c001adb2:	83 c4 18             	add    esp,0x18
c001adb5:	5b                   	pop    ebx
c001adb6:	c3                   	ret    
c001adb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adbc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adc1:	83 c4 18             	add    esp,0x18
c001adc4:	5b                   	pop    ebx
c001adc5:	c3                   	ret    

c001adc6 <sysCallSizeFromFilename(regs*)>:
c001adc6:	57                   	push   edi
c001adc7:	56                   	push   esi
c001adc8:	53                   	push   ebx
c001adc9:	83 ec 20             	sub    esp,0x20
c001adcc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001add0:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001add3:	83 fb 02             	cmp    ebx,0x2
c001add6:	0f 86 99 00 00 00    	jbe    c001ae75 <sysCallSizeFromFilename(regs*)+0xaf>
c001addc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ade2:	77 65                	ja     c001ae49 <sysCallSizeFromFilename(regs*)+0x83>
c001ade4:	83 ec 0c             	sub    esp,0xc
c001ade7:	68 14 01 00 00       	push   0x114
c001adec:	e8 f9 47 ff ff       	call   c000f5ea <malloc>
c001adf1:	83 c4 0c             	add    esp,0xc
c001adf4:	89 c6                	mov    esi,eax
c001adf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adfb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adfe:	53                   	push   ebx
c001adff:	56                   	push   esi
c001ae00:	e8 e3 7f ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001ae05:	83 c4 0c             	add    esp,0xc
c001ae08:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ae0c:	50                   	push   eax
c001ae0d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ae10:	56                   	push   esi
c001ae11:	e8 e2 82 ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c001ae16:	83 c4 10             	add    esp,0x10
c001ae19:	85 f6                	test   esi,esi
c001ae1b:	74 14                	je     c001ae31 <sysCallSizeFromFilename(regs*)+0x6b>
c001ae1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae21:	8b 16                	mov    edx,DWORD PTR [esi]
c001ae23:	83 ec 0c             	sub    esp,0xc
c001ae26:	56                   	push   esi
c001ae27:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae31:	85 c0                	test   eax,eax
c001ae33:	0f 95 c0             	setne  al
c001ae36:	31 d2                	xor    edx,edx
c001ae38:	0f b6 c0             	movzx  eax,al
c001ae3b:	f7 d8                	neg    eax
c001ae3d:	83 d2 00             	adc    edx,0x0
c001ae40:	83 c4 20             	add    esp,0x20
c001ae43:	f7 da                	neg    edx
c001ae45:	5b                   	pop    ebx
c001ae46:	5e                   	pop    esi
c001ae47:	5f                   	pop    edi
c001ae48:	c3                   	ret    
c001ae49:	83 ec 08             	sub    esp,0x8
c001ae4c:	53                   	push   ebx
c001ae4d:	68 9b a8 02 c0       	push   0xc002a89b
c001ae52:	e8 38 7a ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001ae57:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ae63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ae6a:	31 d2                	xor    edx,edx
c001ae6c:	83 c4 20             	add    esp,0x20
c001ae6f:	31 c0                	xor    eax,eax
c001ae71:	5b                   	pop    ebx
c001ae72:	5e                   	pop    esi
c001ae73:	5f                   	pop    edi
c001ae74:	c3                   	ret    
c001ae75:	83 c4 20             	add    esp,0x20
c001ae78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae7d:	5b                   	pop    ebx
c001ae7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae83:	5e                   	pop    esi
c001ae84:	5f                   	pop    edi
c001ae85:	c3                   	ret    

c001ae86 <sysCallClose(regs*)>:
c001ae86:	53                   	push   ebx
c001ae87:	83 ec 08             	sub    esp,0x8
c001ae8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ae91:	83 f8 02             	cmp    eax,0x2
c001ae94:	76 50                	jbe    c001aee6 <sysCallClose(regs*)+0x60>
c001ae96:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ae9b:	74 58                	je     c001aef5 <sysCallClose(regs*)+0x6f>
c001ae9d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aea2:	74 60                	je     c001af04 <sysCallClose(regs*)+0x7e>
c001aea4:	77 2f                	ja     c001aed5 <sysCallClose(regs*)+0x4f>
c001aea6:	83 ec 0c             	sub    esp,0xc
c001aea9:	50                   	push   eax
c001aeaa:	e8 9a 68 ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001aeaf:	89 c3                	mov    ebx,eax
c001aeb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001aeb4:	e8 f1 7f ff ff       	call   c0012eaa <File::close()>
c001aeb9:	83 c4 10             	add    esp,0x10
c001aebc:	85 db                	test   ebx,ebx
c001aebe:	74 0c                	je     c001aecc <sysCallClose(regs*)+0x46>
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec5:	53                   	push   ebx
c001aec6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aec9:	83 c4 10             	add    esp,0x10
c001aecc:	31 c0                	xor    eax,eax
c001aece:	31 d2                	xor    edx,edx
c001aed0:	83 c4 08             	add    esp,0x8
c001aed3:	5b                   	pop    ebx
c001aed4:	c3                   	ret    
c001aed5:	83 ec 08             	sub    esp,0x8
c001aed8:	50                   	push   eax
c001aed9:	68 1c a8 02 c0       	push   0xc002a81c
c001aede:	e8 ac 79 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001aee3:	83 c4 10             	add    esp,0x10
c001aee6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aeeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aef0:	83 c4 08             	add    esp,0x8
c001aef3:	5b                   	pop    ebx
c001aef4:	c3                   	ret    
c001aef5:	83 ec 0c             	sub    esp,0xc
c001aef8:	68 b6 a8 02 c0       	push   0xc002a8b6
c001aefd:	e8 8d 79 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001af02:	eb c5                	jmp    c001aec9 <sysCallClose(regs*)+0x43>
c001af04:	83 ec 0c             	sub    esp,0xc
c001af07:	68 c4 a8 02 c0       	push   0xc002a8c4
c001af0c:	eb ef                	jmp    c001aefd <sysCallClose(regs*)+0x77>

c001af0e <sysCallOpenDir(regs*)>:
c001af0e:	56                   	push   esi
c001af0f:	53                   	push   ebx
c001af10:	53                   	push   ebx
c001af11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af15:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001af18:	85 f6                	test   esi,esi
c001af1a:	74 59                	je     c001af75 <sysCallOpenDir(regs*)+0x67>
c001af1c:	83 ec 0c             	sub    esp,0xc
c001af1f:	68 14 01 00 00       	push   0x114
c001af24:	e8 c1 46 ff ff       	call   c000f5ea <malloc>
c001af29:	83 c4 0c             	add    esp,0xc
c001af2c:	89 c6                	mov    esi,eax
c001af2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af33:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af39:	56                   	push   esi
c001af3a:	e8 55 83 ff ff       	call   c0013294 <Directory::Directory(char const*, Process*)>
c001af3f:	83 c4 10             	add    esp,0x10
c001af42:	85 f6                	test   esi,esi
c001af44:	74 2f                	je     c001af75 <sysCallOpenDir(regs*)+0x67>
c001af46:	83 ec 0c             	sub    esp,0xc
c001af49:	56                   	push   esi
c001af4a:	e8 a9 83 ff ff       	call   c00132f8 <Directory::open()>
c001af4f:	83 c4 10             	add    esp,0x10
c001af52:	85 c0                	test   eax,eax
c001af54:	75 1f                	jne    c001af75 <sysCallOpenDir(regs*)+0x67>
c001af56:	83 ec 0c             	sub    esp,0xc
c001af59:	56                   	push   esi
c001af5a:	e8 f5 64 ff ff       	call   c0011454 <UnixFile::getFileDescriptor()>
c001af5f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	89 02                	mov    DWORD PTR [edx],eax
c001af67:	c1 f8 1f             	sar    eax,0x1f
c001af6a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001af6d:	31 c0                	xor    eax,eax
c001af6f:	59                   	pop    ecx
c001af70:	31 d2                	xor    edx,edx
c001af72:	5b                   	pop    ebx
c001af73:	5e                   	pop    esi
c001af74:	c3                   	ret    
c001af75:	59                   	pop    ecx
c001af76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af80:	5b                   	pop    ebx
c001af81:	5e                   	pop    esi
c001af82:	c3                   	ret    

c001af83 <sysCallCloseDir(regs*)>:
c001af83:	53                   	push   ebx
c001af84:	83 ec 08             	sub    esp,0x8
c001af87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af8e:	83 f8 02             	cmp    eax,0x2
c001af91:	76 47                	jbe    c001afda <sysCallCloseDir(regs*)+0x57>
c001af93:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af98:	77 2f                	ja     c001afc9 <sysCallCloseDir(regs*)+0x46>
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	50                   	push   eax
c001af9e:	e8 a6 67 ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001afa3:	89 c3                	mov    ebx,eax
c001afa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001afa8:	e8 a7 83 ff ff       	call   c0013354 <Directory::close()>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	85 db                	test   ebx,ebx
c001afb2:	74 0c                	je     c001afc0 <sysCallCloseDir(regs*)+0x3d>
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb9:	53                   	push   ebx
c001afba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	31 c0                	xor    eax,eax
c001afc2:	31 d2                	xor    edx,edx
c001afc4:	83 c4 08             	add    esp,0x8
c001afc7:	5b                   	pop    ebx
c001afc8:	c3                   	ret    
c001afc9:	83 ec 08             	sub    esp,0x8
c001afcc:	50                   	push   eax
c001afcd:	68 44 a8 02 c0       	push   0xc002a844
c001afd2:	e8 b8 78 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001afd7:	83 c4 10             	add    esp,0x10
c001afda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afe4:	83 c4 08             	add    esp,0x8
c001afe7:	5b                   	pop    ebx
c001afe8:	c3                   	ret    

c001afe9 <sysCallMakeDir(regs*)>:
c001afe9:	56                   	push   esi
c001afea:	53                   	push   ebx
c001afeb:	83 ec 10             	sub    esp,0x10
c001afee:	68 14 01 00 00       	push   0x114
c001aff3:	e8 f2 45 ff ff       	call   c000f5ea <malloc>
c001aff8:	83 c4 0c             	add    esp,0xc
c001affb:	89 c3                	mov    ebx,eax
c001affd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b002:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b005:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b009:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b00c:	53                   	push   ebx
c001b00d:	e8 82 82 ff ff       	call   c0013294 <Directory::Directory(char const*, Process*)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	85 db                	test   ebx,ebx
c001b017:	74 32                	je     c001b04b <sysCallMakeDir(regs*)+0x62>
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	53                   	push   ebx
c001b01d:	e8 b6 84 ff ff       	call   c00134d8 <Directory::create()>
c001b022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b025:	89 c6                	mov    esi,eax
c001b027:	e8 28 83 ff ff       	call   c0013354 <Directory::close()>
c001b02c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b02e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b031:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b034:	83 c4 10             	add    esp,0x10
c001b037:	31 c0                	xor    eax,eax
c001b039:	59                   	pop    ecx
c001b03a:	85 f6                	test   esi,esi
c001b03c:	5b                   	pop    ebx
c001b03d:	0f 95 c0             	setne  al
c001b040:	5e                   	pop    esi
c001b041:	31 d2                	xor    edx,edx
c001b043:	f7 d8                	neg    eax
c001b045:	83 d2 00             	adc    edx,0x0
c001b048:	f7 da                	neg    edx
c001b04a:	c3                   	ret    
c001b04b:	59                   	pop    ecx
c001b04c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b051:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b056:	5b                   	pop    ebx
c001b057:	5e                   	pop    esi
c001b058:	c3                   	ret    

c001b059 <sysCallWait(regs*)>:
c001b059:	83 ec 10             	sub    esp,0x10
c001b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b060:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b063:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b066:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b069:	e8 d9 23 00 00       	call   c001d447 <waitTask(int, int*, int)>
c001b06e:	83 c4 1c             	add    esp,0x1c
c001b071:	99                   	cdq    
c001b072:	c3                   	ret    

c001b073 <sysCallNotImpl(regs*)>:
c001b073:	83 ec 18             	sub    esp,0x18
c001b076:	68 d2 a8 02 c0       	push   0xc002a8d2
c001b07b:	e8 61 e9 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001b080:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b085:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b08a:	83 c4 1c             	add    esp,0x1c
c001b08d:	c3                   	ret    

c001b08e <sysPanic(regs*)>:
c001b08e:	83 ec 18             	sub    esp,0x18
c001b091:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b095:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b098:	e8 44 e9 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001b09d:	c7 04 24 ec a8 02 c0 	mov    DWORD PTR [esp],0xc002a8ec
c001b0a4:	e8 38 e9 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001b0a9:	b8 01 00 00 00       	mov    eax,0x1
c001b0ae:	31 d2                	xor    edx,edx
c001b0b0:	83 c4 1c             	add    esp,0x1c
c001b0b3:	c3                   	ret    

c001b0b4 <sysCallRmdir(regs*)>:
c001b0b4:	56                   	push   esi
c001b0b5:	53                   	push   ebx
c001b0b6:	83 ec 20             	sub    esp,0x20
c001b0b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0bd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b0c0:	68 14 01 00 00       	push   0x114
c001b0c5:	e8 20 45 ff ff       	call   c000f5ea <malloc>
c001b0ca:	83 c4 0c             	add    esp,0xc
c001b0cd:	89 c3                	mov    ebx,eax
c001b0cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b0d7:	56                   	push   esi
c001b0d8:	53                   	push   ebx
c001b0d9:	e8 0a 7d ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0e1:	e8 de 7e ff ff       	call   c0012fc4 <File::unlink()>
c001b0e6:	83 c4 10             	add    esp,0x10
c001b0e9:	85 db                	test   ebx,ebx
c001b0eb:	74 14                	je     c001b101 <sysCallRmdir(regs*)+0x4d>
c001b0ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0f3:	83 ec 0c             	sub    esp,0xc
c001b0f6:	53                   	push   ebx
c001b0f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b101:	85 c0                	test   eax,eax
c001b103:	0f 95 c0             	setne  al
c001b106:	31 d2                	xor    edx,edx
c001b108:	0f b6 c0             	movzx  eax,al
c001b10b:	f7 d8                	neg    eax
c001b10d:	83 d2 00             	adc    edx,0x0
c001b110:	83 c4 14             	add    esp,0x14
c001b113:	f7 da                	neg    edx
c001b115:	5b                   	pop    ebx
c001b116:	5e                   	pop    esi
c001b117:	c3                   	ret    

c001b118 <sysCallUnlink(regs*)>:
c001b118:	56                   	push   esi
c001b119:	53                   	push   ebx
c001b11a:	83 ec 20             	sub    esp,0x20
c001b11d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b121:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b124:	68 14 01 00 00       	push   0x114
c001b129:	e8 bc 44 ff ff       	call   c000f5ea <malloc>
c001b12e:	83 c4 0c             	add    esp,0xc
c001b131:	89 c3                	mov    ebx,eax
c001b133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b138:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b13b:	56                   	push   esi
c001b13c:	53                   	push   ebx
c001b13d:	e8 a6 7c ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001b142:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b145:	e8 7a 7e ff ff       	call   c0012fc4 <File::unlink()>
c001b14a:	83 c4 10             	add    esp,0x10
c001b14d:	85 db                	test   ebx,ebx
c001b14f:	74 14                	je     c001b165 <sysCallUnlink(regs*)+0x4d>
c001b151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b155:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	53                   	push   ebx
c001b15b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b15e:	83 c4 10             	add    esp,0x10
c001b161:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b165:	85 c0                	test   eax,eax
c001b167:	0f 95 c0             	setne  al
c001b16a:	31 d2                	xor    edx,edx
c001b16c:	0f b6 c0             	movzx  eax,al
c001b16f:	f7 d8                	neg    eax
c001b171:	83 d2 00             	adc    edx,0x0
c001b174:	83 c4 14             	add    esp,0x14
c001b177:	f7 da                	neg    edx
c001b179:	5b                   	pop    ebx
c001b17a:	5e                   	pop    esi
c001b17b:	c3                   	ret    

c001b17c <sysCallGetArgv(regs*)>:
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b183:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b186:	85 c0                	test   eax,eax
c001b188:	78 2b                	js     c001b1b5 <sysCallGetArgv(regs*)+0x39>
c001b18a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b190:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b193:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b199:	7d 1a                	jge    c001b1b5 <sysCallGetArgv(regs*)+0x39>
c001b19b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b1a2:	85 c0                	test   eax,eax
c001b1a4:	74 17                	je     c001b1bd <sysCallGetArgv(regs*)+0x41>
c001b1a6:	83 ec 08             	sub    esp,0x8
c001b1a9:	50                   	push   eax
c001b1aa:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b1ad:	e8 78 55 fe ff       	call   c000072a <strcpy>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	31 c0                	xor    eax,eax
c001b1b7:	31 d2                	xor    edx,edx
c001b1b9:	83 c4 0c             	add    esp,0xc
c001b1bc:	c3                   	ret    
c001b1bd:	b8 01 00 00 00       	mov    eax,0x1
c001b1c2:	31 d2                	xor    edx,edx
c001b1c4:	83 c4 0c             	add    esp,0xc
c001b1c7:	c3                   	ret    

c001b1c8 <sysCallTTYName(regs*)>:
c001b1c8:	56                   	push   esi
c001b1c9:	53                   	push   ebx
c001b1ca:	53                   	push   ebx
c001b1cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1cf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b1d2:	85 c0                	test   eax,eax
c001b1d4:	74 5f                	je     c001b235 <sysCallTTYName(regs*)+0x6d>
c001b1d6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b1d9:	83 f8 02             	cmp    eax,0x2
c001b1dc:	77 3e                	ja     c001b21c <sysCallTTYName(regs*)+0x54>
c001b1de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1e6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b1ec:	85 db                	test   ebx,ebx
c001b1ee:	74 45                	je     c001b235 <sysCallTTYName(regs*)+0x6d>
c001b1f0:	83 ec 0c             	sub    esp,0xc
c001b1f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f5:	53                   	push   ebx
c001b1f6:	ff 10                	call   DWORD PTR [eax]
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	84 c0                	test   al,al
c001b1fd:	74 41                	je     c001b240 <sysCallTTYName(regs*)+0x78>
c001b1ff:	83 ec 08             	sub    esp,0x8
c001b202:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b208:	53                   	push   ebx
c001b209:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b20c:	e8 19 55 fe ff       	call   c000072a <strcpy>
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	31 c0                	xor    eax,eax
c001b216:	59                   	pop    ecx
c001b217:	31 d2                	xor    edx,edx
c001b219:	5b                   	pop    ebx
c001b21a:	5e                   	pop    esi
c001b21b:	c3                   	ret    
c001b21c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b221:	74 bb                	je     c001b1de <sysCallTTYName(regs*)+0x16>
c001b223:	83 ec 0c             	sub    esp,0xc
c001b226:	50                   	push   eax
c001b227:	e8 1d 65 ff ff       	call   c0011749 <getFromFileDescriptor(int)>
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	89 c3                	mov    ebx,eax
c001b231:	85 db                	test   ebx,ebx
c001b233:	75 bb                	jne    c001b1f0 <sysCallTTYName(regs*)+0x28>
c001b235:	59                   	pop    ecx
c001b236:	b8 01 00 00 00       	mov    eax,0x1
c001b23b:	31 d2                	xor    edx,edx
c001b23d:	5b                   	pop    ebx
c001b23e:	5e                   	pop    esi
c001b23f:	c3                   	ret    
c001b240:	59                   	pop    ecx
c001b241:	b8 02 00 00 00       	mov    eax,0x2
c001b246:	31 d2                	xor    edx,edx
c001b248:	5b                   	pop    ebx
c001b249:	5e                   	pop    esi
c001b24a:	c3                   	ret    

c001b24b <sysCallUSleep(regs*)>:
c001b24b:	83 ec 14             	sub    esp,0x14
c001b24e:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b253:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b257:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b25e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b261:	01 ca                	add    edx,ecx
c001b263:	52                   	push   edx
c001b264:	50                   	push   eax
c001b265:	e8 76 22 00 00       	call   c001d4e0 <nanoSleep(unsigned long long)>
c001b26a:	31 c0                	xor    eax,eax
c001b26c:	31 d2                	xor    edx,edx
c001b26e:	83 c4 1c             	add    esp,0x1c
c001b271:	c3                   	ret    

c001b272 <sysCallSpawn(regs*)>:
c001b272:	56                   	push   esi
c001b273:	53                   	push   ebx
c001b274:	53                   	push   ebx
c001b275:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b279:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b27c:	85 f6                	test   esi,esi
c001b27e:	75 08                	jne    c001b288 <sysCallSpawn(regs*)+0x16>
c001b280:	59                   	pop    ecx
c001b281:	31 c0                	xor    eax,eax
c001b283:	31 d2                	xor    edx,edx
c001b285:	5b                   	pop    ebx
c001b286:	5e                   	pop    esi
c001b287:	c3                   	ret    
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	68 3f 07 00 00       	push   0x73f
c001b290:	e8 55 43 ff ff       	call   c000f5ea <malloc>
c001b295:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b298:	89 c6                	mov    esi,eax
c001b29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b29f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2a5:	56                   	push   esi
c001b2a6:	e8 35 19 00 00       	call   c001cbe0 <Process::Process(char const*, Process*, char**)>
c001b2ab:	83 c4 20             	add    esp,0x20
c001b2ae:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b2b5:	75 c9                	jne    c001b280 <sysCallSpawn(regs*)+0xe>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	56                   	push   esi
c001b2bb:	e8 e6 1e 00 00       	call   c001d1a6 <Process::createUserThread()>
c001b2c0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2c2:	83 c4 10             	add    esp,0x10
c001b2c5:	99                   	cdq    
c001b2c6:	59                   	pop    ecx
c001b2c7:	5b                   	pop    ebx
c001b2c8:	5e                   	pop    esi
c001b2c9:	c3                   	ret    

c001b2ca <sysCallGetEnv(regs*)>:
c001b2ca:	57                   	push   edi
c001b2cb:	56                   	push   esi
c001b2cc:	53                   	push   ebx
c001b2cd:	83 ec 1c             	sub    esp,0x1c
c001b2d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2d9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b2dc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b2df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2e2:	e8 16 e6 ff ff       	call   c00198fd <Krnl::getProcessTotalEnvCount(Process*)>
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	39 c7                	cmp    edi,eax
c001b2ec:	7c 14                	jl     c001b302 <sysCallGetEnv(regs*)+0x38>
c001b2ee:	85 f6                	test   esi,esi
c001b2f0:	75 0b                	jne    c001b2fd <sysCallGetEnv(regs*)+0x33>
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	31 c0                	xor    eax,eax
c001b2f7:	5b                   	pop    ebx
c001b2f8:	31 d2                	xor    edx,edx
c001b2fa:	5e                   	pop    esi
c001b2fb:	5f                   	pop    edi
c001b2fc:	c3                   	ret    
c001b2fd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b300:	eb f0                	jmp    c001b2f2 <sysCallGetEnv(regs*)+0x28>
c001b302:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b306:	52                   	push   edx
c001b307:	57                   	push   edi
c001b308:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b30e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b311:	50                   	push   eax
c001b312:	e8 06 e6 ff ff       	call   c001991d <Krnl::getProcessEnvPair(Process*, int)>
c001b317:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b31a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b31e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b322:	83 c4 0c             	add    esp,0xc
c001b325:	85 c9                	test   ecx,ecx
c001b327:	75 23                	jne    c001b34c <sysCallGetEnv(regs*)+0x82>
c001b329:	83 ec 0c             	sub    esp,0xc
c001b32c:	50                   	push   eax
c001b32d:	e8 76 53 fe ff       	call   c00006a8 <strlen>
c001b332:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b335:	89 c3                	mov    ebx,eax
c001b337:	e8 6c 53 fe ff       	call   c00006a8 <strlen>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b343:	83 c4 10             	add    esp,0x10
c001b346:	31 d2                	xor    edx,edx
c001b348:	5b                   	pop    ebx
c001b349:	5e                   	pop    esi
c001b34a:	5f                   	pop    edi
c001b34b:	c3                   	ret    
c001b34c:	83 ec 08             	sub    esp,0x8
c001b34f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b352:	50                   	push   eax
c001b353:	56                   	push   esi
c001b354:	e8 d1 53 fe ff       	call   c000072a <strcpy>
c001b359:	58                   	pop    eax
c001b35a:	5a                   	pop    edx
c001b35b:	68 fb a8 02 c0       	push   0xc002a8fb
c001b360:	56                   	push   esi
c001b361:	e8 7b 54 fe ff       	call   c00007e1 <strcat>
c001b366:	59                   	pop    ecx
c001b367:	5b                   	pop    ebx
c001b368:	57                   	push   edi
c001b369:	56                   	push   esi
c001b36a:	e8 72 54 fe ff       	call   c00007e1 <strcat>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	e9 7b ff ff ff       	jmp    c001b2f2 <sysCallGetEnv(regs*)+0x28>

c001b377 <sysAppSettings(regs*)>:
c001b377:	53                   	push   ebx
c001b378:	83 ec 08             	sub    esp,0x8
c001b37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b37f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b382:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b388:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b38d:	66 3d c0 09          	cmp    ax,0x9c0
c001b391:	75 2f                	jne    c001b3c2 <sysAppSettings(regs*)+0x4b>
c001b393:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b399:	83 e0 1f             	and    eax,0x1f
c001b39c:	3c 01                	cmp    al,0x1
c001b39e:	74 2e                	je     c001b3ce <sysAppSettings(regs*)+0x57>
c001b3a0:	3c 07                	cmp    al,0x7
c001b3a2:	0f 84 bd 00 00 00    	je     c001b465 <sysAppSettings(regs*)+0xee>
c001b3a8:	84 c0                	test   al,al
c001b3aa:	0f 84 dc 00 00 00    	je     c001b48c <sysAppSettings(regs*)+0x115>
c001b3b0:	3c 08                	cmp    al,0x8
c001b3b2:	74 6d                	je     c001b421 <sysAppSettings(regs*)+0xaa>
c001b3b4:	0f b6 c0             	movzx  eax,al
c001b3b7:	83 c4 08             	add    esp,0x8
c001b3ba:	05 e8 03 00 00       	add    eax,0x3e8
c001b3bf:	5b                   	pop    ebx
c001b3c0:	99                   	cdq    
c001b3c1:	c3                   	ret    
c001b3c2:	b8 01 00 00 00       	mov    eax,0x1
c001b3c7:	31 d2                	xor    edx,edx
c001b3c9:	83 c4 08             	add    esp,0x8
c001b3cc:	5b                   	pop    ebx
c001b3cd:	c3                   	ret    
c001b3ce:	51                   	push   ecx
c001b3cf:	68 00 01 00 00       	push   0x100
c001b3d4:	6a 00                	push   0x0
c001b3d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3de:	83 c0 0c             	add    eax,0xc
c001b3e1:	50                   	push   eax
c001b3e2:	e8 a4 52 fe ff       	call   c000068b <memset>
c001b3e7:	83 c4 0c             	add    esp,0xc
c001b3ea:	68 ff 00 00 00       	push   0xff
c001b3ef:	53                   	push   ebx
c001b3f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f8:	83 c0 0c             	add    eax,0xc
c001b3fb:	50                   	push   eax
c001b3fc:	e8 54 52 fe ff       	call   c0000655 <memcpy>
c001b401:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b406:	5b                   	pop    ebx
c001b407:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b40a:	5a                   	pop    edx
c001b40b:	8d 50 0c             	lea    edx,[eax+0xc]
c001b40e:	52                   	push   edx
c001b40f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b415:	e8 aa 54 ff ff       	call   c00108c4 <VgaText::setTitle(char*)>
c001b41a:	83 c4 10             	add    esp,0x10
c001b41d:	31 c0                	xor    eax,eax
c001b41f:	eb a6                	jmp    c001b3c7 <sysAppSettings(regs*)+0x50>
c001b421:	83 ec 08             	sub    esp,0x8
c001b424:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b42a:	83 e0 0f             	and    eax,0xf
c001b42d:	50                   	push   eax
c001b42e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b433:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b436:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b43c:	e8 73 54 ff ff       	call   c00108b4 <VgaText::setTitleColour(VgaColour)>
c001b441:	58                   	pop    eax
c001b442:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b448:	5a                   	pop    edx
c001b449:	c1 e8 04             	shr    eax,0x4
c001b44c:	83 e0 0f             	and    eax,0xf
c001b44f:	50                   	push   eax
c001b450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b455:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b458:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b45e:	e8 41 54 ff ff       	call   c00108a4 <VgaText::setTitleTextColour(VgaColour)>
c001b463:	eb b5                	jmp    c001b41a <sysAppSettings(regs*)+0xa3>
c001b465:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b46d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b473:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b479:	c0 e8 06             	shr    al,0x6
c001b47c:	83 e0 01             	and    eax,0x1
c001b47f:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b485:	31 c0                	xor    eax,eax
c001b487:	e9 3b ff ff ff       	jmp    c001b3c7 <sysAppSettings(regs*)+0x50>
c001b48c:	b8 02 00 00 00       	mov    eax,0x2
c001b491:	e9 31 ff ff ff       	jmp    c001b3c7 <sysAppSettings(regs*)+0x50>

c001b496 <sysSetFatAttrib(regs*)>:
c001b496:	57                   	push   edi
c001b497:	56                   	push   esi
c001b498:	53                   	push   ebx
c001b499:	83 ec 1c             	sub    esp,0x1c
c001b49c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b4a0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b4a3:	68 14 01 00 00       	push   0x114
c001b4a8:	e8 3d 41 ff ff       	call   c000f5ea <malloc>
c001b4ad:	83 c4 0c             	add    esp,0xc
c001b4b0:	89 c3                	mov    ebx,eax
c001b4b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ba:	57                   	push   edi
c001b4bb:	53                   	push   ebx
c001b4bc:	e8 27 79 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001b4c1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4c4:	83 c4 0c             	add    esp,0xc
c001b4c7:	0f b6 d4             	movzx  edx,ah
c001b4ca:	0f b6 c0             	movzx  eax,al
c001b4cd:	52                   	push   edx
c001b4ce:	50                   	push   eax
c001b4cf:	53                   	push   ebx
c001b4d0:	e8 89 7b ff ff       	call   c001305e <File::chfatattr(unsigned char, unsigned char)>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	85 db                	test   ebx,ebx
c001b4da:	74 14                	je     c001b4f0 <sysSetFatAttrib(regs*)+0x5a>
c001b4dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b4e2:	83 ec 0c             	sub    esp,0xc
c001b4e5:	53                   	push   ebx
c001b4e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4f0:	85 c0                	test   eax,eax
c001b4f2:	0f 95 c0             	setne  al
c001b4f5:	31 d2                	xor    edx,edx
c001b4f7:	0f b6 c0             	movzx  eax,al
c001b4fa:	f7 d8                	neg    eax
c001b4fc:	83 d2 00             	adc    edx,0x0
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	f7 da                	neg    edx
c001b504:	5b                   	pop    ebx
c001b505:	5e                   	pop    esi
c001b506:	5f                   	pop    edi
c001b507:	c3                   	ret    

c001b508 <sysPipe(regs*)>:
c001b508:	57                   	push   edi
c001b509:	56                   	push   esi
c001b50a:	53                   	push   ebx
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	83 ec 0c             	sub    esp,0xc
c001b512:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b515:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b518:	6a 20                	push   0x20
c001b51a:	e8 cb 40 ff ff       	call   c000f5ea <malloc>
c001b51f:	89 c3                	mov    ebx,eax
c001b521:	58                   	pop    eax
c001b522:	5a                   	pop    edx
c001b523:	68 00 50 00 00       	push   0x5000
c001b528:	53                   	push   ebx
c001b529:	e8 c6 4c ff ff       	call   c00101f4 <Pipe::Pipe(int)>
c001b52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b531:	e8 1e 5f ff ff       	call   c0011454 <UnixFile::getFileDescriptor()>
c001b536:	89 07                	mov    DWORD PTR [edi],eax
c001b538:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b53b:	e8 14 5f ff ff       	call   c0011454 <UnixFile::getFileDescriptor()>
c001b540:	83 c4 10             	add    esp,0x10
c001b543:	89 06                	mov    DWORD PTR [esi],eax
c001b545:	31 d2                	xor    edx,edx
c001b547:	5b                   	pop    ebx
c001b548:	31 c0                	xor    eax,eax
c001b54a:	5e                   	pop    esi
c001b54b:	5f                   	pop    edi
c001b54c:	c3                   	ret    

c001b54d <sysGetUnixTime(regs*)>:
c001b54d:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001b552:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b558:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b55c:	e9 71 82 ff ff       	jmp    c00137d2 <Clock::timeInSecondsLocal()>

c001b561 <string_ends_with(char const*, char const*)>:
c001b561:	57                   	push   edi
c001b562:	56                   	push   esi
c001b563:	53                   	push   ebx
c001b564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b568:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b56c:	83 ec 0c             	sub    esp,0xc
c001b56f:	53                   	push   ebx
c001b570:	e8 33 51 fe ff       	call   c00006a8 <strlen>
c001b575:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b578:	89 c6                	mov    esi,eax
c001b57a:	e8 29 51 fe ff       	call   c00006a8 <strlen>
c001b57f:	83 c4 10             	add    esp,0x10
c001b582:	39 c6                	cmp    esi,eax
c001b584:	7d 06                	jge    c001b58c <string_ends_with(char const*, char const*)+0x2b>
c001b586:	5b                   	pop    ebx
c001b587:	31 c0                	xor    eax,eax
c001b589:	5e                   	pop    esi
c001b58a:	5f                   	pop    edi
c001b58b:	c3                   	ret    
c001b58c:	83 ec 08             	sub    esp,0x8
c001b58f:	29 c6                	sub    esi,eax
c001b591:	57                   	push   edi
c001b592:	01 f3                	add    ebx,esi
c001b594:	53                   	push   ebx
c001b595:	e8 e1 51 fe ff       	call   c000077b <strcmp>
c001b59a:	83 c4 10             	add    esp,0x10
c001b59d:	85 c0                	test   eax,eax
c001b59f:	5b                   	pop    ebx
c001b5a0:	0f 94 c0             	sete   al
c001b5a3:	5e                   	pop    esi
c001b5a4:	0f b6 c0             	movzx  eax,al
c001b5a7:	5f                   	pop    edi
c001b5a8:	c3                   	ret    

c001b5a9 <sysCallOpen(regs*)>:
c001b5a9:	56                   	push   esi
c001b5aa:	53                   	push   ebx
c001b5ab:	81 ec 04 01 00 00    	sub    esp,0x104
c001b5b1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b5b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b5bb:	85 c9                	test   ecx,ecx
c001b5bd:	0f 84 b3 00 00 00    	je     c001b676 <sysCallOpen(regs*)+0xcd>
c001b5c3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b5c6:	85 c0                	test   eax,eax
c001b5c8:	0f 84 a8 00 00 00    	je     c001b676 <sysCallOpen(regs*)+0xcd>
c001b5ce:	52                   	push   edx
c001b5cf:	68 fd a8 02 c0       	push   0xc002a8fd
c001b5d4:	50                   	push   eax
c001b5d5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b5d9:	56                   	push   esi
c001b5da:	e8 5f 76 ff ff       	call   c0012c3e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b5df:	89 34 24             	mov    DWORD PTR [esp],esi
c001b5e2:	e8 c1 50 fe ff       	call   c00006a8 <strlen>
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	48                   	dec    eax
c001b5eb:	74 1d                	je     c001b60a <sysCallOpen(regs*)+0x61>
c001b5ed:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b5f0:	eb 0f                	jmp    c001b601 <sysCallOpen(regs*)+0x58>
c001b5f2:	80 fa 3a             	cmp    dl,0x3a
c001b5f5:	74 0f                	je     c001b606 <sysCallOpen(regs*)+0x5d>
c001b5f7:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b5fb:	48                   	dec    eax
c001b5fc:	74 0c                	je     c001b60a <sysCallOpen(regs*)+0x61>
c001b5fe:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b601:	80 fa 2e             	cmp    dl,0x2e
c001b604:	75 ec                	jne    c001b5f2 <sysCallOpen(regs*)+0x49>
c001b606:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b60a:	83 ec 08             	sub    esp,0x8
c001b60d:	68 01 a9 02 c0       	push   0xc002a901
c001b612:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b615:	e8 47 ff ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b61a:	83 c4 10             	add    esp,0x10
c001b61d:	85 c0                	test   eax,eax
c001b61f:	75 17                	jne    c001b638 <sysCallOpen(regs*)+0x8f>
c001b621:	83 ec 08             	sub    esp,0x8
c001b624:	68 22 a9 02 c0       	push   0xc002a922
c001b629:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b62c:	e8 30 ff ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	85 c0                	test   eax,eax
c001b636:	74 51                	je     c001b689 <sysCallOpen(regs*)+0xe0>
c001b638:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b63b:	83 ec 08             	sub    esp,0x8
c001b63e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b644:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b64b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b64e:	ff 30                	push   DWORD PTR [eax]
c001b650:	68 06 a9 02 c0       	push   0xc002a906
c001b655:	e8 35 72 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001b65a:	c7 04 24 15 a9 02 c0 	mov    DWORD PTR [esp],0xc002a915
c001b661:	e8 29 72 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001b666:	83 c4 10             	add    esp,0x10
c001b669:	81 c4 04 01 00 00    	add    esp,0x104
c001b66f:	31 c0                	xor    eax,eax
c001b671:	31 d2                	xor    edx,edx
c001b673:	5b                   	pop    ebx
c001b674:	5e                   	pop    esi
c001b675:	c3                   	ret    
c001b676:	81 c4 04 01 00 00    	add    esp,0x104
c001b67c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b681:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b686:	5b                   	pop    ebx
c001b687:	5e                   	pop    esi
c001b688:	c3                   	ret    
c001b689:	83 ec 08             	sub    esp,0x8
c001b68c:	68 02 a9 02 c0       	push   0xc002a902
c001b691:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b694:	e8 e2 50 fe ff       	call   c000077b <strcmp>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	85 c0                	test   eax,eax
c001b69e:	74 98                	je     c001b638 <sysCallOpen(regs*)+0x8f>
c001b6a0:	83 ec 08             	sub    esp,0x8
c001b6a3:	68 01 a9 02 c0       	push   0xc002a901
c001b6a8:	56                   	push   esi
c001b6a9:	e8 b3 fe ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b6ae:	83 c4 10             	add    esp,0x10
c001b6b1:	85 c0                	test   eax,eax
c001b6b3:	75 83                	jne    c001b638 <sysCallOpen(regs*)+0x8f>
c001b6b5:	83 ec 08             	sub    esp,0x8
c001b6b8:	68 27 a9 02 c0       	push   0xc002a927
c001b6bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6c0:	e8 9c fe ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b6c5:	83 c4 10             	add    esp,0x10
c001b6c8:	85 c0                	test   eax,eax
c001b6ca:	0f 85 d9 00 00 00    	jne    c001b7a9 <sysCallOpen(regs*)+0x200>
c001b6d0:	83 ec 08             	sub    esp,0x8
c001b6d3:	68 2c a9 02 c0       	push   0xc002a92c
c001b6d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6db:	e8 81 fe ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	85 c0                	test   eax,eax
c001b6e5:	0f 85 be 00 00 00    	jne    c001b7a9 <sysCallOpen(regs*)+0x200>
c001b6eb:	83 ec 08             	sub    esp,0x8
c001b6ee:	68 28 a9 02 c0       	push   0xc002a928
c001b6f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6f6:	e8 80 50 fe ff       	call   c000077b <strcmp>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	85 c0                	test   eax,eax
c001b700:	0f 84 a3 00 00 00    	je     c001b7a9 <sysCallOpen(regs*)+0x200>
c001b706:	83 ec 08             	sub    esp,0x8
c001b709:	68 27 a9 02 c0       	push   0xc002a927
c001b70e:	56                   	push   esi
c001b70f:	e8 4d fe ff ff       	call   c001b561 <string_ends_with(char const*, char const*)>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	85 c0                	test   eax,eax
c001b719:	0f 85 8a 00 00 00    	jne    c001b7a9 <sysCallOpen(regs*)+0x200>
c001b71f:	83 ec 0c             	sub    esp,0xc
c001b722:	68 14 01 00 00       	push   0x114
c001b727:	e8 be 3e ff ff       	call   c000f5ea <malloc>
c001b72c:	83 c4 0c             	add    esp,0xc
c001b72f:	89 c6                	mov    esi,eax
c001b731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b736:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b739:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b73c:	56                   	push   esi
c001b73d:	e8 a6 76 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	85 f6                	test   esi,esi
c001b747:	0f 84 29 ff ff ff    	je     c001b676 <sysCallOpen(regs*)+0xcd>
c001b74d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b750:	0f b6 c2             	movzx  eax,dl
c001b753:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b756:	89 d0                	mov    eax,edx
c001b758:	83 e0 01             	and    eax,0x1
c001b75b:	f6 c2 02             	test   dl,0x2
c001b75e:	74 03                	je     c001b763 <sysCallOpen(regs*)+0x1ba>
c001b760:	83 c8 02             	or     eax,0x2
c001b763:	f6 c2 04             	test   dl,0x4
c001b766:	74 03                	je     c001b76b <sysCallOpen(regs*)+0x1c2>
c001b768:	83 c8 04             	or     eax,0x4
c001b76b:	f6 c2 08             	test   dl,0x8
c001b76e:	74 03                	je     c001b773 <sysCallOpen(regs*)+0x1ca>
c001b770:	83 c8 0a             	or     eax,0xa
c001b773:	83 e2 10             	and    edx,0x10
c001b776:	74 03                	je     c001b77b <sysCallOpen(regs*)+0x1d2>
c001b778:	83 c8 12             	or     eax,0x12
c001b77b:	83 ec 08             	sub    esp,0x8
c001b77e:	50                   	push   eax
c001b77f:	56                   	push   esi
c001b780:	e8 c7 76 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001b785:	83 c4 10             	add    esp,0x10
c001b788:	85 c0                	test   eax,eax
c001b78a:	0f 85 e6 fe ff ff    	jne    c001b676 <sysCallOpen(regs*)+0xcd>
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	56                   	push   esi
c001b794:	e8 bb 5c ff ff       	call   c0011454 <UnixFile::getFileDescriptor()>
c001b799:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b79c:	89 02                	mov    DWORD PTR [edx],eax
c001b79e:	c1 f8 1f             	sar    eax,0x1f
c001b7a1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b7a4:	e9 bd fe ff ff       	jmp    c001b666 <sysCallOpen(regs*)+0xbd>
c001b7a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b7ac:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b7b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7b9:	e9 ab fe ff ff       	jmp    c001b669 <sysCallOpen(regs*)+0xc0>

c001b7be <Sys::loadSyscalls()>:
c001b7be:	c7 05 20 d8 02 c0 74 a9 01 c0 	mov    DWORD PTR ds:0xc002d820,0xc001a974
c001b7c8:	c7 05 24 d8 02 c0 d6 a5 01 c0 	mov    DWORD PTR ds:0xc002d824,0xc001a5d6
c001b7d2:	c7 05 28 d8 02 c0 29 a7 01 c0 	mov    DWORD PTR ds:0xc002d828,0xc001a729
c001b7dc:	c7 05 2c d8 02 c0 0c a9 01 c0 	mov    DWORD PTR ds:0xc002d82c,0xc001a90c
c001b7e6:	c7 05 30 d8 02 c0 c1 a6 01 c0 	mov    DWORD PTR ds:0xc002d830,0xc001a6c1
c001b7f0:	c7 05 34 d8 02 c0 0d a6 01 c0 	mov    DWORD PTR ds:0xc002d834,0xc001a60d
c001b7fa:	c7 05 38 d8 02 c0 ee a5 01 c0 	mov    DWORD PTR ds:0xc002d838,0xc001a5ee
c001b804:	c7 05 3c d8 02 c0 7e a7 01 c0 	mov    DWORD PTR ds:0xc002d83c,0xc001a77e
c001b80e:	c7 05 44 d8 02 c0 86 ae 01 c0 	mov    DWORD PTR ds:0xc002d844,0xc001ae86
c001b818:	c7 05 40 d8 02 c0 a9 b5 01 c0 	mov    DWORD PTR ds:0xc002d840,0xc001b5a9
c001b822:	c7 05 48 d8 02 c0 0e af 01 c0 	mov    DWORD PTR ds:0xc002d848,0xc001af0e
c001b82c:	c7 05 4c d8 02 c0 75 ab 01 c0 	mov    DWORD PTR ds:0xc002d84c,0xc001ab75
c001b836:	c7 05 50 d8 02 c0 af a9 01 c0 	mov    DWORD PTR ds:0xc002d850,0xc001a9af
c001b840:	c7 05 54 d8 02 c0 b4 a9 01 c0 	mov    DWORD PTR ds:0xc002d854,0xc001a9b4
c001b84a:	c7 05 58 d8 02 c0 e9 af 01 c0 	mov    DWORD PTR ds:0xc002d858,0xc001afe9
c001b854:	c7 05 5c d8 02 c0 83 af 01 c0 	mov    DWORD PTR ds:0xc002d85c,0xc001af83
c001b85e:	c7 05 60 d8 02 c0 5d ac 01 c0 	mov    DWORD PTR ds:0xc002d860,0xc001ac5d
c001b868:	c7 05 64 d8 02 c0 c6 ac 01 c0 	mov    DWORD PTR ds:0xc002d864,0xc001acc6
c001b872:	c7 05 68 d8 02 c0 43 ad 01 c0 	mov    DWORD PTR ds:0xc002d868,0xc001ad43
c001b87c:	c7 05 6c d8 02 c0 b9 a9 01 c0 	mov    DWORD PTR ds:0xc002d86c,0xc001a9b9
c001b886:	c7 05 70 d8 02 c0 59 b0 01 c0 	mov    DWORD PTR ds:0xc002d870,0xc001b059
c001b890:	c7 05 74 d8 02 c0 73 b0 01 c0 	mov    DWORD PTR ds:0xc002d874,0xc001b073
c001b89a:	c7 05 78 d8 02 c0 73 b0 01 c0 	mov    DWORD PTR ds:0xc002d878,0xc001b073
c001b8a4:	c7 05 7c d8 02 c0 b4 b0 01 c0 	mov    DWORD PTR ds:0xc002d87c,0xc001b0b4
c001b8ae:	c7 05 80 d8 02 c0 18 b1 01 c0 	mov    DWORD PTR ds:0xc002d880,0xc001b118
c001b8b8:	c7 05 84 d8 02 c0 c3 a9 01 c0 	mov    DWORD PTR ds:0xc002d884,0xc001a9c3
c001b8c2:	c7 05 88 d8 02 c0 7c b1 01 c0 	mov    DWORD PTR ds:0xc002d888,0xc001b17c
c001b8cc:	c7 05 8c d8 02 c0 32 ab 01 c0 	mov    DWORD PTR ds:0xc002d88c,0xc001ab32
c001b8d6:	c7 05 90 d8 02 c0 c8 b1 01 c0 	mov    DWORD PTR ds:0xc002d890,0xc001b1c8
c001b8e0:	c7 05 94 d8 02 c0 03 ac 01 c0 	mov    DWORD PTR ds:0xc002d894,0xc001ac03
c001b8ea:	c7 05 98 d8 02 c0 4b b2 01 c0 	mov    DWORD PTR ds:0xc002d898,0xc001b24b
c001b8f4:	c7 05 9c d8 02 c0 c6 ad 01 c0 	mov    DWORD PTR ds:0xc002d89c,0xc001adc6
c001b8fe:	c7 05 a0 d8 02 c0 72 b2 01 c0 	mov    DWORD PTR ds:0xc002d8a0,0xc001b272
c001b908:	c7 05 a4 d8 02 c0 ca b2 01 c0 	mov    DWORD PTR ds:0xc002d8a4,0xc001b2ca
c001b912:	c7 05 a8 d8 02 c0 77 b3 01 c0 	mov    DWORD PTR ds:0xc002d8a8,0xc001b377
c001b91c:	c7 05 ac d8 02 c0 d3 a9 01 c0 	mov    DWORD PTR ds:0xc002d8ac,0xc001a9d3
c001b926:	c7 05 b0 d8 02 c0 3d aa 01 c0 	mov    DWORD PTR ds:0xc002d8b0,0xc001aa3d
c001b930:	c7 05 b4 d8 02 c0 83 aa 01 c0 	mov    DWORD PTR ds:0xc002d8b4,0xc001aa83
c001b93a:	c7 05 b8 d8 02 c0 96 b4 01 c0 	mov    DWORD PTR ds:0xc002d8b8,0xc001b496
c001b944:	c7 05 bc d8 02 c0 8e b0 01 c0 	mov    DWORD PTR ds:0xc002d8bc,0xc001b08e
c001b94e:	c7 05 c0 d8 02 c0 d4 aa 01 c0 	mov    DWORD PTR ds:0xc002d8c0,0xc001aad4
c001b958:	c7 05 c4 d8 02 c0 08 b5 01 c0 	mov    DWORD PTR ds:0xc002d8c4,0xc001b508
c001b962:	c7 05 c8 d8 02 c0 4d b5 01 c0 	mov    DWORD PTR ds:0xc002d8c8,0xc001b54d
c001b96c:	c7 05 cc d8 02 c0 19 a6 01 c0 	mov    DWORD PTR ds:0xc002d8cc,0xc001a619
c001b976:	c7 05 d0 d8 02 c0 9a a7 01 c0 	mov    DWORD PTR ds:0xc002d8d0,0xc001a79a
c001b980:	c7 05 d4 d8 02 c0 c2 a8 01 c0 	mov    DWORD PTR ds:0xc002d8d4,0xc001a8c2
c001b98a:	c3                   	ret    

c001b98b <Sys::systemCall(regs*, void*)>:
c001b98b:	53                   	push   ebx
c001b98c:	83 ec 08             	sub    esp,0x8
c001b98f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b993:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b996:	83 f8 7f             	cmp    eax,0x7f
c001b999:	77 16                	ja     c001b9b1 <Sys::systemCall(regs*, void*)+0x26>
c001b99b:	8b 14 85 20 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd27e0]
c001b9a2:	85 d2                	test   edx,edx
c001b9a4:	74 0b                	je     c001b9b1 <Sys::systemCall(regs*, void*)+0x26>
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	53                   	push   ebx
c001b9aa:	ff d2                	call   edx
c001b9ac:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b9af:	eb 0d                	jmp    c001b9be <Sys::systemCall(regs*, void*)+0x33>
c001b9b1:	52                   	push   edx
c001b9b2:	52                   	push   edx
c001b9b3:	50                   	push   eax
c001b9b4:	68 31 a9 02 c0       	push   0xc002a931
c001b9b9:	e8 d1 6e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001b9be:	83 c4 10             	add    esp,0x10
c001b9c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9c6:	31 d2                	xor    edx,edx
c001b9c8:	83 c4 08             	add    esp,0x8
c001b9cb:	5b                   	pop    ebx
c001b9cc:	c3                   	ret    

c001b9cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b9cd:	55                   	push   ebp
c001b9ce:	89 e5                	mov    ebp,esp
c001b9d0:	57                   	push   edi
c001b9d1:	56                   	push   esi
c001b9d2:	53                   	push   ebx
c001b9d3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b9d9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b9dc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	0f 95 c1             	setne  cl
c001b9e4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b9e8:	0f 94 c2             	sete   dl
c001b9eb:	84 d1                	test   cl,dl
c001b9ed:	74 26                	je     c001ba15 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b9ef:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b9f6:	74 1d                	je     c001ba15 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b9f8:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b9fb:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001ba01:	89 d6                	mov    esi,edx
c001ba03:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ba09:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001ba0f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ba12:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001ba15:	83 ec 0c             	sub    esp,0xc
c001ba18:	05 ff 0f 00 00       	add    eax,0xfff
c001ba1d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001ba20:	6a 01                	push   0x1
c001ba22:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001ba28:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001ba2e:	e8 6c 5e ff ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c001ba33:	83 c4 10             	add    esp,0x10
c001ba36:	89 c6                	mov    esi,eax
c001ba38:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001ba3e:	0f 86 21 01 00 00    	jbe    c001bb65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001ba44:	c1 eb 0c             	shr    ebx,0xc
c001ba47:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001ba51:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001ba57:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ba5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ba5d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001ba63:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001ba66:	29 d8                	sub    eax,ebx
c001ba68:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001ba6e:	0f 83 f4 00 00 00    	jae    c001bb68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001ba74:	83 ec 0c             	sub    esp,0xc
c001ba77:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001ba7d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ba80:	3d 00 10 00 00       	cmp    eax,0x1000
c001ba85:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001ba87:	52                   	push   edx
c001ba88:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001ba8e:	52                   	push   edx
c001ba8f:	76 05                	jbe    c001ba96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001ba91:	b8 00 10 00 00       	mov    eax,0x1000
c001ba96:	31 d2                	xor    edx,edx
c001ba98:	52                   	push   edx
c001ba99:	50                   	push   eax
c001ba9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001ba9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001baa0:	83 c4 20             	add    esp,0x20
c001baa3:	85 c0                	test   eax,eax
c001baa5:	74 1f                	je     c001bac6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001baa7:	51                   	push   ecx
c001baa8:	51                   	push   ecx
c001baa9:	50                   	push   eax
c001baaa:	68 45 a9 02 c0       	push   0xc002a945
c001baaf:	e8 db 6d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001bab4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bab7:	e8 47 61 ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c001babc:	83 c4 10             	add    esp,0x10
c001babf:	31 c0                	xor    eax,eax
c001bac1:	e9 7c 01 00 00       	jmp    c001bc42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bac6:	e8 c5 14 00 00       	call   c001cf90 <lockScheduler()>
c001bacb:	e8 8d 41 ff ff       	call   c000fc5d <Phys::allocatePage()>
c001bad0:	6a 07                	push   0x7
c001bad2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bad8:	56                   	push   esi
c001bad9:	50                   	push   eax
c001bada:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bae0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bae3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bae9:	e8 7c 64 ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c001baee:	83 c4 0c             	add    esp,0xc
c001baf1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001baf7:	6a 00                	push   0x0
c001baf9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001baff:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bb02:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bb08:	e8 c7 62 ff ff       	call   c0011dd4 <VAS::mapOtherVASIn(bool, VAS*)>
c001bb0d:	58                   	pop    eax
c001bb0e:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bb14:	5a                   	pop    edx
c001bb15:	68 07 04 00 00       	push   0x407
c001bb1a:	53                   	push   ebx
c001bb1b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bb21:	50                   	push   eax
c001bb22:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bb28:	6a 00                	push   0x0
c001bb2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb32:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bb38:	e8 e7 67 ff ff       	call   c0012324 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bb3d:	83 c4 1c             	add    esp,0x1c
c001bb40:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bb46:	68 00 10 00 00       	push   0x1000
c001bb4b:	50                   	push   eax
c001bb4c:	56                   	push   esi
c001bb4d:	e8 03 4b fe ff       	call   c0000655 <memcpy>
c001bb52:	e8 3b 14 00 00       	call   c001cf92 <unlockScheduler()>
c001bb57:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	e9 f5 fe ff ff       	jmp    c001ba5a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001bb65:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb68:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001bb72:	0f 86 bc 00 00 00    	jbe    c001bc34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001bb78:	e8 13 14 00 00       	call   c001cf90 <lockScheduler()>
c001bb7d:	51                   	push   ecx
c001bb7e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bb84:	6a 00                	push   0x0
c001bb86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb8e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bb94:	e8 3b 62 ff ff       	call   c0011dd4 <VAS::mapOtherVASIn(bool, VAS*)>
c001bb99:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	c1 e8 0c             	shr    eax,0xc
c001bba5:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001bbaf:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001bbb5:	e8 a3 40 ff ff       	call   c000fc5d <Phys::allocatePage()>
c001bbba:	6a 07                	push   0x7
c001bbbc:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bbc2:	56                   	push   esi
c001bbc3:	50                   	push   eax
c001bbc4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbca:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbcd:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bbd3:	e8 92 63 ff ff       	call   c0011f6a <VAS::mapPage(unsigned long, unsigned long, int)>
c001bbd8:	58                   	pop    eax
c001bbd9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001bbdf:	5a                   	pop    edx
c001bbe0:	68 07 04 00 00       	push   0x407
c001bbe5:	53                   	push   ebx
c001bbe6:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bbec:	50                   	push   eax
c001bbed:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bbf3:	6a 00                	push   0x0
c001bbf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbfd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bc03:	e8 1c 67 ff ff       	call   c0012324 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bc08:	83 c4 1c             	add    esp,0x1c
c001bc0b:	68 00 10 00 00       	push   0x1000
c001bc10:	6a 00                	push   0x0
c001bc12:	56                   	push   esi
c001bc13:	e8 73 4a fe ff       	call   c000068b <memset>
c001bc18:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bc27:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001bc2d:	77 86                	ja     c001bbb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001bc2f:	e8 5e 13 00 00       	call   c001cf92 <unlockScheduler()>
c001bc34:	83 ec 0c             	sub    esp,0xc
c001bc37:	56                   	push   esi
c001bc38:	e8 c6 5f ff ff       	call   c0011c03 <Virt::freeKernelVirtualPages(unsigned long)>
c001bc3d:	83 c4 10             	add    esp,0x10
c001bc40:	b0 01                	mov    al,0x1
c001bc42:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bc45:	5b                   	pop    ebx
c001bc46:	5e                   	pop    esi
c001bc47:	5f                   	pop    edi
c001bc48:	5d                   	pop    ebp
c001bc49:	c3                   	ret    

c001bc4a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bc4a:	55                   	push   ebp
c001bc4b:	57                   	push   edi
c001bc4c:	56                   	push   esi
c001bc4d:	53                   	push   ebx
c001bc4e:	83 ec 48             	sub    esp,0x48
c001bc51:	68 14 01 00 00       	push   0x114
c001bc56:	e8 8f 39 ff ff       	call   c000f5ea <malloc>
c001bc5b:	83 c4 0c             	add    esp,0xc
c001bc5e:	89 c6                	mov    esi,eax
c001bc60:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bc64:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bc68:	50                   	push   eax
c001bc69:	e8 7a 71 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001bc6e:	58                   	pop    eax
c001bc6f:	5a                   	pop    edx
c001bc70:	6a 01                	push   0x1
c001bc72:	56                   	push   esi
c001bc73:	e8 d4 71 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001bc78:	83 c4 10             	add    esp,0x10
c001bc7b:	85 c0                	test   eax,eax
c001bc7d:	0f 85 47 01 00 00    	jne    c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bc83:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bc8b:	83 ec 0c             	sub    esp,0xc
c001bc8e:	6a 34                	push   0x34
c001bc90:	e8 55 39 ff ff       	call   c000f5ea <malloc>
c001bc95:	89 c3                	mov    ebx,eax
c001bc97:	58                   	pop    eax
c001bc98:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc9a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bc9e:	57                   	push   edi
c001bc9f:	53                   	push   ebx
c001bca0:	6a 00                	push   0x0
c001bca2:	6a 34                	push   0x34
c001bca4:	56                   	push   esi
c001bca5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bca8:	83 c4 20             	add    esp,0x20
c001bcab:	85 c0                	test   eax,eax
c001bcad:	0f 85 17 01 00 00    	jne    c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bcb3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bcb9:	0f 85 0b 01 00 00    	jne    c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bcbf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcc2:	85 c0                	test   eax,eax
c001bcc4:	0f 84 00 01 00 00    	je     c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bcca:	31 d2                	xor    edx,edx
c001bccc:	55                   	push   ebp
c001bccd:	52                   	push   edx
c001bcce:	50                   	push   eax
c001bccf:	56                   	push   esi
c001bcd0:	e8 35 72 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	85 c0                	test   eax,eax
c001bcda:	0f 85 ea 00 00 00    	jne    c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bce0:	83 ec 0c             	sub    esp,0xc
c001bce3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bce6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bcee:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bcf2:	0f af c2             	imul   eax,edx
c001bcf5:	50                   	push   eax
c001bcf6:	e8 ef 38 ff ff       	call   c000f5ea <malloc>
c001bcfb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bcfd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bd01:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bd08:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bd0c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bd10:	0f af c2             	imul   eax,edx
c001bd13:	99                   	cdq    
c001bd14:	52                   	push   edx
c001bd15:	50                   	push   eax
c001bd16:	56                   	push   esi
c001bd17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd1a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bd1d:	83 c4 20             	add    esp,0x20
c001bd20:	85 c0                	test   eax,eax
c001bd22:	0f 84 a2 00 00 00    	je     c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bd28:	31 d2                	xor    edx,edx
c001bd2a:	51                   	push   ecx
c001bd2b:	52                   	push   edx
c001bd2c:	50                   	push   eax
c001bd2d:	56                   	push   esi
c001bd2e:	e8 d7 71 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	85 c0                	test   eax,eax
c001bd38:	0f 85 8c 00 00 00    	jne    c001bdca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bd3e:	83 ec 0c             	sub    esp,0xc
c001bd41:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bd45:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bd49:	31 ed                	xor    ebp,ebp
c001bd4b:	0f af c2             	imul   eax,edx
c001bd4e:	50                   	push   eax
c001bd4f:	e8 96 38 ff ff       	call   c000f5ea <malloc>
c001bd54:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bd56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd61:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bd65:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bd69:	0f af c2             	imul   eax,edx
c001bd6c:	99                   	cdq    
c001bd6d:	52                   	push   edx
c001bd6e:	50                   	push   eax
c001bd6f:	56                   	push   esi
c001bd70:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd73:	83 c4 20             	add    esp,0x20
c001bd76:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bd7e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bd82:	0f 86 80 00 00 00    	jbe    c001be08 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bd88:	0f b7 fd             	movzx  edi,bp
c001bd8b:	c1 e7 05             	shl    edi,0x5
c001bd8e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bd92:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bd95:	75 6b                	jne    c001be02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bd97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bd9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd9e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bda1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bda5:	52                   	push   edx
c001bda6:	31 d2                	xor    edx,edx
c001bda8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bdab:	52                   	push   edx
c001bdac:	50                   	push   eax
c001bdad:	56                   	push   esi
c001bdae:	e8 57 71 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	85 c0                	test   eax,eax
c001bdb8:	74 17                	je     c001bdd1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bdba:	83 ec 0c             	sub    esp,0xc
c001bdbd:	68 70 a9 02 c0       	push   0xc002a970
c001bdc2:	e8 c8 6a ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001bdc7:	83 c4 10             	add    esp,0x10
c001bdca:	31 c0                	xor    eax,eax
c001bdcc:	e9 87 00 00 00       	jmp    c001be58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bdd1:	83 ec 0c             	sub    esp,0xc
c001bdd4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bdd7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bdda:	50                   	push   eax
c001bddb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bde3:	56                   	push   esi
c001bde4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bde8:	e8 e0 fb ff ff       	call   c001b9cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bded:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bdf1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bdf5:	83 c4 20             	add    esp,0x20
c001bdf8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bdfc:	73 04                	jae    c001be02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bdfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be02:	45                   	inc    ebp
c001be03:	e9 76 ff ff ff       	jmp    c001bd7e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001be08:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001be0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001be14:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001be1a:	83 ec 0c             	sub    esp,0xc
c001be1d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001be23:	25 00 f0 ff ff       	and    eax,0xfffff000
c001be28:	05 00 10 00 00       	add    eax,0x1000
c001be2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be34:	e8 c1 37 ff ff       	call   c000f5fa <free>
c001be39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be3c:	e8 b9 37 ff ff       	call   c000f5fa <free>
c001be41:	58                   	pop    eax
c001be42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be46:	e8 af 37 ff ff       	call   c000f5fa <free>
c001be4b:	89 34 24             	mov    DWORD PTR [esp],esi
c001be4e:	e8 57 70 ff ff       	call   c0012eaa <File::close()>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	b0 01                	mov    al,0x1
c001be58:	83 c4 3c             	add    esp,0x3c
c001be5b:	5b                   	pop    ebx
c001be5c:	5e                   	pop    esi
c001be5d:	5f                   	pop    edi
c001be5e:	5d                   	pop    ebp
c001be5f:	c3                   	ret    

c001be60 <Thr::runtimeReferenceHelper()>:
c001be60:	83 ec 18             	sub    esp,0x18
c001be63:	68 78 a9 02 c0       	push   0xc002a978
c001be68:	e8 22 6a ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001be6d:	fa                   	cli    
c001be6e:	83 c4 10             	add    esp,0x10
c001be71:	eb fe                	jmp    c001be71 <Thr::runtimeReferenceHelper()+0x11>

c001be73 <Thr::getAddressOfKernelSymbol(char const*)>:
c001be73:	57                   	push   edi
c001be74:	56                   	push   esi
c001be75:	53                   	push   ebx
c001be76:	31 db                	xor    ebx,ebx
c001be78:	39 1d c0 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1c0,ebx
c001be7e:	7e 3c                	jle    c001bebc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001be80:	8b 34 9d 40 e1 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1ec0]
c001be87:	31 ff                	xor    edi,edi
c001be89:	39 3c 9d 40 e0 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1fc0],edi
c001be90:	7e 27                	jle    c001beb9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001be92:	50                   	push   eax
c001be93:	50                   	push   eax
c001be94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be98:	8b 06                	mov    eax,DWORD PTR [esi]
c001be9a:	03 04 9d c0 e0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1f40]
c001bea1:	50                   	push   eax
c001bea2:	e8 d4 48 fe ff       	call   c000077b <strcmp>
c001bea7:	83 c4 10             	add    esp,0x10
c001beaa:	85 c0                	test   eax,eax
c001beac:	75 05                	jne    c001beb3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001beae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001beb1:	eb 0b                	jmp    c001bebe <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001beb3:	83 c6 10             	add    esi,0x10
c001beb6:	47                   	inc    edi
c001beb7:	eb d0                	jmp    c001be89 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001beb9:	43                   	inc    ebx
c001beba:	eb bc                	jmp    c001be78 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bebc:	31 c0                	xor    eax,eax
c001bebe:	5b                   	pop    ebx
c001bebf:	5e                   	pop    esi
c001bec0:	5f                   	pop    edi
c001bec1:	c3                   	ret    

c001bec2 <Thr::loadKernelSymbolTable(char const*)>:
c001bec2:	55                   	push   ebp
c001bec3:	57                   	push   edi
c001bec4:	56                   	push   esi
c001bec5:	53                   	push   ebx
c001bec6:	83 ec 68             	sub    esp,0x68
c001bec9:	8b 35 14 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e214
c001becf:	68 14 01 00 00       	push   0x114
c001bed4:	e8 11 37 ff ff       	call   c000f5ea <malloc>
c001bed9:	83 c4 0c             	add    esp,0xc
c001bedc:	89 c3                	mov    ebx,eax
c001bede:	56                   	push   esi
c001bedf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bee3:	50                   	push   eax
c001bee4:	e8 ff 6e ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001bee9:	5e                   	pop    esi
c001beea:	5f                   	pop    edi
c001beeb:	6a 01                	push   0x1
c001beed:	53                   	push   ebx
c001beee:	e8 59 6f ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	31 d2                	xor    edx,edx
c001bef8:	85 c0                	test   eax,eax
c001befa:	0f 85 74 02 00 00    	jne    c001c174 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bf00:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bf08:	83 ec 0c             	sub    esp,0xc
c001bf0b:	6a 34                	push   0x34
c001bf0d:	e8 d8 36 ff ff       	call   c000f5ea <malloc>
c001bf12:	59                   	pop    ecx
c001bf13:	89 c7                	mov    edi,eax
c001bf15:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bf19:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf1b:	56                   	push   esi
c001bf1c:	57                   	push   edi
c001bf1d:	6a 00                	push   0x0
c001bf1f:	6a 34                	push   0x34
c001bf21:	53                   	push   ebx
c001bf22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf25:	83 c4 20             	add    esp,0x20
c001bf28:	85 c0                	test   eax,eax
c001bf2a:	74 17                	je     c001bf43 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bf2c:	83 ec 0c             	sub    esp,0xc
c001bf2f:	68 9a a9 02 c0       	push   0xc002a99a
c001bf34:	e8 a8 da ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	31 d2                	xor    edx,edx
c001bf3e:	e9 31 02 00 00       	jmp    c001c174 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bf43:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf49:	75 e1                	jne    c001bf2c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bf4b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf4e:	85 c0                	test   eax,eax
c001bf50:	74 da                	je     c001bf2c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bf52:	52                   	push   edx
c001bf53:	31 d2                	xor    edx,edx
c001bf55:	52                   	push   edx
c001bf56:	50                   	push   eax
c001bf57:	53                   	push   ebx
c001bf58:	e8 ad 6f ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001bf5d:	83 c4 10             	add    esp,0x10
c001bf60:	85 c0                	test   eax,eax
c001bf62:	75 c8                	jne    c001bf2c <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bf64:	83 ec 0c             	sub    esp,0xc
c001bf67:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf6f:	31 ed                	xor    ebp,ebp
c001bf71:	0f af c2             	imul   eax,edx
c001bf74:	50                   	push   eax
c001bf75:	e8 70 36 ff ff       	call   c000f5ea <malloc>
c001bf7a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bf7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf80:	89 34 24             	mov    DWORD PTR [esp],esi
c001bf83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf87:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf8b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf8f:	0f af c2             	imul   eax,edx
c001bf92:	99                   	cdq    
c001bf93:	52                   	push   edx
c001bf94:	50                   	push   eax
c001bf95:	53                   	push   ebx
c001bf96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf99:	83 c4 20             	add    esp,0x20
c001bf9c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bfa4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bfb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bfbc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bfc0:	0f 86 aa 00 00 00    	jbe    c001c070 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bfc6:	0f b7 f5             	movzx  esi,bp
c001bfc9:	6b f6 28             	imul   esi,esi,0x28
c001bfcc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bfd0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfd7:	50                   	push   eax
c001bfd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bfdc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bfe0:	8b 16                	mov    edx,DWORD PTR [esi]
c001bfe2:	6b c0 28             	imul   eax,eax,0x28
c001bfe5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bfe9:	89 d0                	mov    eax,edx
c001bfeb:	31 d2                	xor    edx,edx
c001bfed:	52                   	push   edx
c001bfee:	50                   	push   eax
c001bfef:	53                   	push   ebx
c001bff0:	e8 15 6f ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001bff5:	83 c4 0c             	add    esp,0xc
c001bff8:	6a 20                	push   0x20
c001bffa:	6a 00                	push   0x0
c001bffc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c000:	52                   	push   edx
c001c001:	e8 85 46 fe ff       	call   c000068b <memset>
c001c006:	58                   	pop    eax
c001c007:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c009:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c00d:	51                   	push   ecx
c001c00e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c012:	52                   	push   edx
c001c013:	6a 00                	push   0x0
c001c015:	6a 1f                	push   0x1f
c001c017:	53                   	push   ebx
c001c018:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c01b:	83 c4 18             	add    esp,0x18
c001c01e:	68 b1 a9 02 c0       	push   0xc002a9b1
c001c023:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c027:	52                   	push   edx
c001c028:	e8 4e 47 fe ff       	call   c000077b <strcmp>
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	85 c0                	test   eax,eax
c001c032:	75 0f                	jne    c001c043 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001c034:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c03b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c03f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c043:	50                   	push   eax
c001c044:	50                   	push   eax
c001c045:	68 b9 a9 02 c0       	push   0xc002a9b9
c001c04a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c04e:	50                   	push   eax
c001c04f:	e8 27 47 fe ff       	call   c000077b <strcmp>
c001c054:	83 c4 10             	add    esp,0x10
c001c057:	85 c0                	test   eax,eax
c001c059:	75 0f                	jne    c001c06a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c05b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c05e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c062:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c066:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c06a:	45                   	inc    ebp
c001c06b:	e9 4c ff ff ff       	jmp    c001bfbc <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001c070:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c075:	75 10                	jne    c001c087 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001c077:	83 ec 0c             	sub    esp,0xc
c001c07a:	68 c1 a9 02 c0       	push   0xc002a9c1
c001c07f:	e8 5d d9 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c084:	83 c4 10             	add    esp,0x10
c001c087:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c08c:	75 10                	jne    c001c09e <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001c08e:	83 ec 0c             	sub    esp,0xc
c001c091:	68 c1 a9 02 c0       	push   0xc002a9c1
c001c096:	e8 46 d9 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c09b:	83 c4 10             	add    esp,0x10
c001c09e:	31 d2                	xor    edx,edx
c001c0a0:	50                   	push   eax
c001c0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a5:	52                   	push   edx
c001c0a6:	50                   	push   eax
c001c0a7:	53                   	push   ebx
c001c0a8:	e8 5d 6e ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c0ad:	5a                   	pop    edx
c001c0ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0b2:	e8 33 35 ff ff       	call   c000f5ea <malloc>
c001c0b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c0bf:	31 c9                	xor    ecx,ecx
c001c0c1:	5e                   	pop    esi
c001c0c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0c4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c0c8:	55                   	push   ebp
c001c0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0cd:	51                   	push   ecx
c001c0ce:	52                   	push   edx
c001c0cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c0d3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c0d7:	53                   	push   ebx
c001c0d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0db:	83 c4 14             	add    esp,0x14
c001c0de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c0e2:	e8 03 35 ff ff       	call   c000f5ea <malloc>
c001c0e7:	89 c6                	mov    esi,eax
c001c0e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0ee:	56                   	push   esi
c001c0ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c0f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c0f7:	51                   	push   ecx
c001c0f8:	52                   	push   edx
c001c0f9:	53                   	push   ebx
c001c0fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c101:	8b 15 c0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1c0
c001c107:	83 c4 1c             	add    esp,0x1c
c001c10a:	c1 e8 04             	shr    eax,0x4
c001c10d:	89 04 95 40 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1fc0],eax
c001c114:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c118:	31 d2                	xor    edx,edx
c001c11a:	52                   	push   edx
c001c11b:	50                   	push   eax
c001c11c:	53                   	push   ebx
c001c11d:	e8 e8 6d ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c122:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c124:	31 d2                	xor    edx,edx
c001c126:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c129:	56                   	push   esi
c001c12a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c12e:	52                   	push   edx
c001c12f:	50                   	push   eax
c001c130:	53                   	push   ebx
c001c131:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c134:	83 c4 14             	add    esp,0x14
c001c137:	53                   	push   ebx
c001c138:	e8 6d 6d ff ff       	call   c0012eaa <File::close()>
c001c13d:	5d                   	pop    ebp
c001c13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c142:	e8 b3 34 ff ff       	call   c000f5fa <free>
c001c147:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c14a:	e8 ab 34 ff ff       	call   c000f5fa <free>
c001c14f:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c001c154:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c158:	8d 50 01             	lea    edx,[eax+0x1]
c001c15b:	89 0c 85 40 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ec0],ecx
c001c162:	89 15 c0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c0,edx
c001c168:	89 34 85 c0 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f40],esi
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	b2 01                	mov    dl,0x1
c001c174:	83 c4 5c             	add    esp,0x5c
c001c177:	88 d0                	mov    al,dl
c001c179:	5b                   	pop    ebx
c001c17a:	5e                   	pop    esi
c001c17b:	5f                   	pop    edi
c001c17c:	5d                   	pop    ebp
c001c17d:	c3                   	ret    

c001c17e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c17e:	55                   	push   ebp
c001c17f:	57                   	push   edi
c001c180:	56                   	push   esi
c001c181:	53                   	push   ebx
c001c182:	81 ec 68 03 00 00    	sub    esp,0x368
c001c188:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c18f:	8b 1d 14 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e214
c001c195:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c199:	68 14 01 00 00       	push   0x114
c001c19e:	e8 47 34 ff ff       	call   c000f5ea <malloc>
c001c1a3:	83 c4 0c             	add    esp,0xc
c001c1a6:	89 c5                	mov    ebp,eax
c001c1a8:	53                   	push   ebx
c001c1a9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c1b0:	50                   	push   eax
c001c1b1:	e8 32 6c ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001c1b6:	5e                   	pop    esi
c001c1b7:	5f                   	pop    edi
c001c1b8:	6a 01                	push   0x1
c001c1ba:	55                   	push   ebp
c001c1bb:	e8 8c 6c ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001c1c0:	83 c4 10             	add    esp,0x10
c001c1c3:	85 c0                	test   eax,eax
c001c1c5:	0f 85 8d 06 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c1cb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c1d3:	83 ec 0c             	sub    esp,0xc
c001c1d6:	6a 34                	push   0x34
c001c1d8:	e8 0d 34 ff ff       	call   c000f5ea <malloc>
c001c1dd:	5b                   	pop    ebx
c001c1de:	89 c7                	mov    edi,eax
c001c1e0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c1e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1e7:	53                   	push   ebx
c001c1e8:	57                   	push   edi
c001c1e9:	6a 00                	push   0x0
c001c1eb:	6a 34                	push   0x34
c001c1ed:	55                   	push   ebp
c001c1ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1f1:	83 c4 20             	add    esp,0x20
c001c1f4:	85 c0                	test   eax,eax
c001c1f6:	0f 85 5c 06 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c1fc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c202:	0f 85 50 06 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c208:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c20b:	85 c0                	test   eax,eax
c001c20d:	0f 84 45 06 00 00    	je     c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c213:	31 d2                	xor    edx,edx
c001c215:	51                   	push   ecx
c001c216:	52                   	push   edx
c001c217:	50                   	push   eax
c001c218:	55                   	push   ebp
c001c219:	e8 ec 6c ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	85 c0                	test   eax,eax
c001c223:	0f 85 2f 06 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c229:	83 ec 0c             	sub    esp,0xc
c001c22c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c22f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c233:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c237:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c23b:	0f af c2             	imul   eax,edx
c001c23e:	50                   	push   eax
c001c23f:	e8 a6 33 ff ff       	call   c000f5ea <malloc>
c001c244:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c247:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c24b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c24e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c252:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c256:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c25a:	0f af c2             	imul   eax,edx
c001c25d:	99                   	cdq    
c001c25e:	52                   	push   edx
c001c25f:	50                   	push   eax
c001c260:	55                   	push   ebp
c001c261:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c264:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c267:	83 c4 20             	add    esp,0x20
c001c26a:	85 c0                	test   eax,eax
c001c26c:	0f 84 e6 05 00 00    	je     c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c272:	52                   	push   edx
c001c273:	31 d2                	xor    edx,edx
c001c275:	52                   	push   edx
c001c276:	50                   	push   eax
c001c277:	55                   	push   ebp
c001c278:	e8 8d 6c ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c27d:	83 c4 10             	add    esp,0x10
c001c280:	85 c0                	test   eax,eax
c001c282:	0f 85 d0 05 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c28f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c293:	31 f6                	xor    esi,esi
c001c295:	0f af c2             	imul   eax,edx
c001c298:	50                   	push   eax
c001c299:	e8 4c 33 ff ff       	call   c000f5ea <malloc>
c001c29e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2ac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c2b0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c2b4:	0f af c2             	imul   eax,edx
c001c2b7:	99                   	cdq    
c001c2b8:	52                   	push   edx
c001c2b9:	50                   	push   eax
c001c2ba:	55                   	push   ebp
c001c2bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2be:	83 c4 20             	add    esp,0x20
c001c2c1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c2c5:	0f 86 8a 00 00 00    	jbe    c001c355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c2cb:	0f b7 de             	movzx  ebx,si
c001c2ce:	c1 e3 05             	shl    ebx,0x5
c001c2d1:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c2d5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c2d8:	75 75                	jne    c001c34f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c2da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c2dd:	31 d2                	xor    edx,edx
c001c2df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c2e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2ea:	50                   	push   eax
c001c2eb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c2ee:	52                   	push   edx
c001c2ef:	50                   	push   eax
c001c2f0:	55                   	push   ebp
c001c2f1:	e8 14 6c ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c2f6:	83 c4 10             	add    esp,0x10
c001c2f9:	85 c0                	test   eax,eax
c001c2fb:	0f 85 57 05 00 00    	jne    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c301:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c308:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c30b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c30f:	31 d2                	xor    edx,edx
c001c311:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c315:	83 ec 0c             	sub    esp,0xc
c001c318:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c31c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c323:	50                   	push   eax
c001c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c32c:	52                   	push   edx
c001c32d:	50                   	push   eax
c001c32e:	55                   	push   ebp
c001c32f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c332:	83 c4 1c             	add    esp,0x1c
c001c335:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c338:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c33b:	50                   	push   eax
c001c33c:	6a 00                	push   0x0
c001c33e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c342:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c346:	50                   	push   eax
c001c347:	e8 3f 43 fe ff       	call   c000068b <memset>
c001c34c:	83 c4 10             	add    esp,0x10
c001c34f:	46                   	inc    esi
c001c350:	e9 6c ff ff ff       	jmp    c001c2c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c355:	53                   	push   ebx
c001c356:	31 db                	xor    ebx,ebx
c001c358:	68 00 01 00 00       	push   0x100
c001c35d:	6a 00                	push   0x0
c001c35f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c363:	50                   	push   eax
c001c364:	e8 22 43 fe ff       	call   c000068b <memset>
c001c369:	83 c4 0c             	add    esp,0xc
c001c36c:	68 00 01 00 00       	push   0x100
c001c371:	6a 00                	push   0x0
c001c373:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c37a:	50                   	push   eax
c001c37b:	e8 0b 43 fe ff       	call   c000068b <memset>
c001c380:	83 c4 10             	add    esp,0x10
c001c383:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c38b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c393:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c39b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c3a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c3ab:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c3af:	0f 86 30 01 00 00    	jbe    c001c4e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c3b5:	0f b7 f3             	movzx  esi,bx
c001c3b8:	6b f6 28             	imul   esi,esi,0x28
c001c3bb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c3bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c3c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3c6:	52                   	push   edx
c001c3c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c3cb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c3cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3d1:	6b d2 28             	imul   edx,edx,0x28
c001c3d4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c3d8:	31 d2                	xor    edx,edx
c001c3da:	52                   	push   edx
c001c3db:	50                   	push   eax
c001c3dc:	55                   	push   ebp
c001c3dd:	e8 28 6b ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c3e2:	83 c4 0c             	add    esp,0xc
c001c3e5:	6a 20                	push   0x20
c001c3e7:	6a 00                	push   0x0
c001c3e9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c3f0:	51                   	push   ecx
c001c3f1:	e8 95 42 fe ff       	call   c000068b <memset>
c001c3f6:	59                   	pop    ecx
c001c3f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c3fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c3fe:	52                   	push   edx
c001c3ff:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c406:	51                   	push   ecx
c001c407:	6a 00                	push   0x0
c001c409:	6a 1f                	push   0x1f
c001c40b:	55                   	push   ebp
c001c40c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c40f:	83 c4 1c             	add    esp,0x1c
c001c412:	6a 09                	push   0x9
c001c414:	68 db a9 02 c0       	push   0xc002a9db
c001c419:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c420:	51                   	push   ecx
c001c421:	e8 cc 41 fe ff       	call   c00005f2 <memcmp>
c001c426:	83 c4 10             	add    esp,0x10
c001c429:	85 c0                	test   eax,eax
c001c42b:	75 21                	jne    c001c44e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c42d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c431:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c435:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c439:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c43d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c440:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c447:	89 d0                	mov    eax,edx
c001c449:	40                   	inc    eax
c001c44a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c44e:	50                   	push   eax
c001c44f:	6a 09                	push   0x9
c001c451:	68 e5 a9 02 c0       	push   0xc002a9e5
c001c456:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c45d:	50                   	push   eax
c001c45e:	e8 8f 41 fe ff       	call   c00005f2 <memcmp>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	85 c0                	test   eax,eax
c001c468:	75 21                	jne    c001c48b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c46a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c472:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c47a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c47d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c484:	89 d0                	mov    eax,edx
c001c486:	40                   	inc    eax
c001c487:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c48b:	50                   	push   eax
c001c48c:	50                   	push   eax
c001c48d:	68 b1 a9 02 c0       	push   0xc002a9b1
c001c492:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c499:	50                   	push   eax
c001c49a:	e8 dc 42 fe ff       	call   c000077b <strcmp>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	85 c0                	test   eax,eax
c001c4a4:	75 0f                	jne    c001c4b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c4a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c4a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4b5:	50                   	push   eax
c001c4b6:	50                   	push   eax
c001c4b7:	68 b9 a9 02 c0       	push   0xc002a9b9
c001c4bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c4c3:	50                   	push   eax
c001c4c4:	e8 b2 42 fe ff       	call   c000077b <strcmp>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	85 c0                	test   eax,eax
c001c4ce:	75 0f                	jne    c001c4df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c4d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c4d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c4d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c4df:	43                   	inc    ebx
c001c4e0:	e9 c6 fe ff ff       	jmp    c001c3ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c4e5:	31 d2                	xor    edx,edx
c001c4e7:	50                   	push   eax
c001c4e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4ec:	52                   	push   edx
c001c4ed:	50                   	push   eax
c001c4ee:	55                   	push   ebp
c001c4ef:	e8 16 6a ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c4f4:	58                   	pop    eax
c001c4f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c4f9:	e8 ec 30 ff ff       	call   c000f5ea <malloc>
c001c4fe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c501:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c505:	31 d2                	xor    edx,edx
c001c507:	58                   	pop    eax
c001c508:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c50c:	53                   	push   ebx
c001c50d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c511:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c515:	52                   	push   edx
c001c516:	50                   	push   eax
c001c517:	55                   	push   ebp
c001c518:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c51b:	83 c4 14             	add    esp,0x14
c001c51e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c522:	e8 c3 30 ff ff       	call   c000f5ea <malloc>
c001c527:	31 d2                	xor    edx,edx
c001c529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c52d:	83 c4 0c             	add    esp,0xc
c001c530:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c534:	52                   	push   edx
c001c535:	50                   	push   eax
c001c536:	55                   	push   ebp
c001c537:	e8 ce 69 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c53c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c53f:	31 d2                	xor    edx,edx
c001c541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c544:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c548:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c54c:	52                   	push   edx
c001c54d:	50                   	push   eax
c001c54e:	55                   	push   ebp
c001c54f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c552:	83 c4 20             	add    esp,0x20
c001c555:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c55d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c561:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c565:	0f 84 f1 02 00 00    	je     c001c85c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c56b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c572:	31 d2                	xor    edx,edx
c001c574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c578:	c1 e8 03             	shr    eax,0x3
c001c57b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c57f:	51                   	push   ecx
c001c580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c584:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c588:	52                   	push   edx
c001c589:	50                   	push   eax
c001c58a:	55                   	push   ebp
c001c58b:	e8 7a 69 ff ff       	call   c0012f0a <File::seek(unsigned long long)>
c001c590:	5b                   	pop    ebx
c001c591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c595:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c59c:	e8 49 30 ff ff       	call   c000f5ea <malloc>
c001c5a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c5a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5a8:	31 d2                	xor    edx,edx
c001c5aa:	5e                   	pop    esi
c001c5ab:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c5af:	50                   	push   eax
c001c5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5b8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c5bf:	52                   	push   edx
c001c5c0:	50                   	push   eax
c001c5c1:	55                   	push   ebp
c001c5c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5c5:	83 c4 20             	add    esp,0x20
c001c5c8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c5d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c5d4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c5d8:	0f 8d 62 02 00 00    	jge    c001c840 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c5de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5e6:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c5eb:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c5ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c5f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5f6:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c5fa:	89 d8                	mov    eax,ebx
c001c5fc:	c1 e8 08             	shr    eax,0x8
c001c5ff:	89 c6                	mov    esi,eax
c001c601:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c605:	c1 e6 04             	shl    esi,0x4
c001c608:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c60c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c60f:	85 d2                	test   edx,edx
c001c611:	0f 85 bf 00 00 00    	jne    c001c6d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c617:	83 ec 0c             	sub    esp,0xc
c001c61a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c61e:	03 06                	add    eax,DWORD PTR [esi]
c001c620:	50                   	push   eax
c001c621:	e8 4d f8 ff ff       	call   c001be73 <Thr::getAddressOfKernelSymbol(char const*)>
c001c626:	83 c4 10             	add    esp,0x10
c001c629:	89 c2                	mov    edx,eax
c001c62b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c630:	85 c0                	test   eax,eax
c001c632:	0f 85 9e 00 00 00    	jne    c001c6d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c63f:	03 06                	add    eax,DWORD PTR [esi]
c001c641:	50                   	push   eax
c001c642:	e8 5e 1c ff ff       	call   c000e2a5 <Krnl::resolveCompatibilitySymbol(char*)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	89 c2                	mov    edx,eax
c001c64c:	85 c0                	test   eax,eax
c001c64e:	0f 85 82 00 00 00    	jne    c001c6d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c654:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c658:	50                   	push   eax
c001c659:	50                   	push   eax
c001c65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c65e:	03 06                	add    eax,DWORD PTR [esi]
c001c660:	50                   	push   eax
c001c661:	68 ef a9 02 c0       	push   0xc002a9ef
c001c666:	e8 24 62 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001c66b:	58                   	pop    eax
c001c66c:	5a                   	pop    edx
c001c66d:	68 09 aa 02 c0       	push   0xc002aa09
c001c672:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c679:	50                   	push   eax
c001c67a:	e8 ab 40 fe ff       	call   c000072a <strcpy>
c001c67f:	59                   	pop    ecx
c001c680:	58                   	pop    eax
c001c681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c685:	03 06                	add    eax,DWORD PTR [esi]
c001c687:	50                   	push   eax
c001c688:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c68f:	50                   	push   eax
c001c690:	e8 4c 41 fe ff       	call   c00007e1 <strcat>
c001c695:	58                   	pop    eax
c001c696:	5a                   	pop    edx
c001c697:	68 9f aa 02 c0       	push   0xc002aa9f
c001c69c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c6a3:	50                   	push   eax
c001c6a4:	e8 38 41 fe ff       	call   c00007e1 <strcat>
c001c6a9:	83 c4 10             	add    esp,0x10
c001c6ac:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c6b1:	0f 84 43 01 00 00    	je     c001c7fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c6c1:	50                   	push   eax
c001c6c2:	e8 1a d3 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c6c7:	83 c4 10             	add    esp,0x10
c001c6ca:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c6ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c6d2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c6d6:	80 fb 01             	cmp    bl,0x1
c001c6d9:	75 7d                	jne    c001c758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c6db:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c6e2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c6e6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c6ea:	01 ce                	add    esi,ecx
c001c6ec:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c6f2:	0f 94 c0             	sete   al
c001c6f5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c6fb:	0f 94 c3             	sete   bl
c001c6fe:	09 c3                	or     ebx,eax
c001c700:	8b 06                	mov    eax,DWORD PTR [esi]
c001c702:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c707:	74 36                	je     c001c73f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c709:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c70c:	84 db                	test   bl,bl
c001c70e:	75 0a                	jne    c001c71a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c710:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c714:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c718:	76 37                	jbe    c001c751 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c71a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c71e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c723:	0f 84 d1 00 00 00    	je     c001c7fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c729:	83 ec 0c             	sub    esp,0xc
c001c72c:	68 20 aa 02 c0       	push   0xc002aa20
c001c731:	e8 ab d2 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c736:	83 c4 10             	add    esp,0x10
c001c739:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c73d:	eb 12                	jmp    c001c751 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c73f:	01 c1                	add    ecx,eax
c001c741:	84 db                	test   bl,bl
c001c743:	75 0c                	jne    c001c751 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c745:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c749:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c74d:	77 02                	ja     c001c751 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c74f:	01 d1                	add    ecx,edx
c001c751:	89 0e                	mov    DWORD PTR [esi],ecx
c001c753:	e9 df 00 00 00       	jmp    c001c837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c758:	80 fb 02             	cmp    bl,0x2
c001c75b:	75 71                	jne    c001c7ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001c75d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c764:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001c768:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001c76c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c772:	74 15                	je     c001c789 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c774:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c77a:	74 0d                	je     c001c789 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c77c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c780:	83 e8 04             	sub    eax,0x4
c001c783:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c787:	76 1f                	jbe    c001c7a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001c789:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001c78d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c792:	74 66                	je     c001c7fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c794:	83 ec 0c             	sub    esp,0xc
c001c797:	68 3c aa 02 c0       	push   0xc002aa3c
c001c79c:	e8 40 d2 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c7a1:	83 c4 10             	add    esp,0x10
c001c7a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7a8:	8b 06                	mov    eax,DWORD PTR [esi]
c001c7aa:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c7af:	74 13                	je     c001c7c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001c7b1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c7b5:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001c7bc:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c7c0:	01 c8                	add    eax,ecx
c001c7c2:	eb 04                	jmp    c001c7c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001c7c4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c7c8:	01 c2                	add    edx,eax
c001c7ca:	89 16                	mov    DWORD PTR [esi],edx
c001c7cc:	eb 69                	jmp    c001c837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c7ce:	0f b6 db             	movzx  ebx,bl
c001c7d1:	50                   	push   eax
c001c7d2:	50                   	push   eax
c001c7d3:	53                   	push   ebx
c001c7d4:	68 58 aa 02 c0       	push   0xc002aa58
c001c7d9:	e8 b1 60 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c7e6:	74 12                	je     c001c7fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c7e8:	83 ec 0c             	sub    esp,0xc
c001c7eb:	68 63 aa 02 c0       	push   0xc002aa63
c001c7f0:	e8 ec d1 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	eb 3d                	jmp    c001c837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c7fa:	83 ec 0c             	sub    esp,0xc
c001c7fd:	55                   	push   ebp
c001c7fe:	e8 a7 66 ff ff       	call   c0012eaa <File::close()>
c001c803:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c806:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c809:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c80c:	59                   	pop    ecx
c001c80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c811:	e8 e4 2d ff ff       	call   c000f5fa <free>
c001c816:	5b                   	pop    ebx
c001c817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c81b:	e8 da 2d ff ff       	call   c000f5fa <free>
c001c820:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c823:	e8 d2 2d ff ff       	call   c000f5fa <free>
c001c828:	5e                   	pop    esi
c001c829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c82d:	e8 c8 2d ff ff       	call   c000f5fa <free>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	eb 21                	jmp    c001c858 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c837:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001c83b:	e9 90 fd ff ff       	jmp    c001c5d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c847:	e8 ae 2d ff ff       	call   c000f5fa <free>
c001c84c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001c850:	83 c4 10             	add    esp,0x10
c001c853:	e9 05 fd ff ff       	jmp    c001c55d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c858:	31 c0                	xor    eax,eax
c001c85a:	eb 33                	jmp    c001c88f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	55                   	push   ebp
c001c860:	e8 45 66 ff ff       	call   c0012eaa <File::close()>
c001c865:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c868:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c86b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c86e:	58                   	pop    eax
c001c86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c873:	e8 82 2d ff ff       	call   c000f5fa <free>
c001c878:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c87b:	e8 7a 2d ff ff       	call   c000f5fa <free>
c001c880:	5a                   	pop    edx
c001c881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c885:	e8 70 2d ff ff       	call   c000f5fa <free>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	b0 01                	mov    al,0x1
c001c88f:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c895:	5b                   	pop    ebx
c001c896:	5e                   	pop    esi
c001c897:	5f                   	pop    edi
c001c898:	5d                   	pop    ebp
c001c899:	c3                   	ret    

c001c89a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c89a:	56                   	push   esi
c001c89b:	31 d2                	xor    edx,edx
c001c89d:	53                   	push   ebx
c001c89e:	8b 1d 20 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da20
c001c8a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8a8:	39 d3                	cmp    ebx,edx
c001c8aa:	7e 1b                	jle    c001c8c7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c8ac:	8b 04 95 40 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd23c0]
c001c8b3:	39 c8                	cmp    eax,ecx
c001c8b5:	77 0d                	ja     c001c8c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c8b7:	8b 34 95 40 da 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd25c0]
c001c8be:	01 c6                	add    esi,eax
c001c8c0:	39 ce                	cmp    esi,ecx
c001c8c2:	77 05                	ja     c001c8c9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c8c4:	42                   	inc    edx
c001c8c5:	eb e1                	jmp    c001c8a8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c8c7:	31 c0                	xor    eax,eax
c001c8c9:	5b                   	pop    ebx
c001c8ca:	5e                   	pop    esi
c001c8cb:	c3                   	ret    

c001c8cc <Thr::getDriverNameFromAddress(unsigned long)>:
c001c8cc:	53                   	push   ebx
c001c8cd:	31 c0                	xor    eax,eax
c001c8cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8d3:	8b 1d 20 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da20
c001c8d9:	39 c3                	cmp    ebx,eax
c001c8db:	7e 22                	jle    c001c8ff <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c8dd:	8b 14 85 40 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd23c0]
c001c8e4:	39 ca                	cmp    edx,ecx
c001c8e6:	77 14                	ja     c001c8fc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c8e8:	03 14 85 40 da 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd25c0]
c001c8ef:	39 ca                	cmp    edx,ecx
c001c8f1:	76 09                	jbe    c001c8fc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c8f3:	8b 04 85 40 de 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd21c0]
c001c8fa:	eb 05                	jmp    c001c901 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c8fc:	40                   	inc    eax
c001c8fd:	eb da                	jmp    c001c8d9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c8ff:	31 c0                	xor    eax,eax
c001c901:	5b                   	pop    ebx
c001c902:	c3                   	ret    

c001c903 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c903:	53                   	push   ebx
c001c904:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c908:	53                   	push   ebx
c001c909:	e8 8c ff ff ff       	call   c001c89a <Thr::getDriverBaseFromAddress(unsigned long)>
c001c90e:	5a                   	pop    edx
c001c90f:	31 d2                	xor    edx,edx
c001c911:	85 c0                	test   eax,eax
c001c913:	74 04                	je     c001c919 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c915:	89 da                	mov    edx,ebx
c001c917:	29 c2                	sub    edx,eax
c001c919:	89 d0                	mov    eax,edx
c001c91b:	5b                   	pop    ebx
c001c91c:	c3                   	ret    

c001c91d <Thr::loadDLL(char const*, bool)>:
c001c91d:	55                   	push   ebp
c001c91e:	57                   	push   edi
c001c91f:	56                   	push   esi
c001c920:	53                   	push   ebx
c001c921:	81 ec 34 01 00 00    	sub    esp,0x134
c001c927:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c92e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c935:	56                   	push   esi
c001c936:	68 7b aa 02 c0       	push   0xc002aa7b
c001c93b:	e8 4f 5f ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001c940:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c947:	e8 9e 2c ff ff       	call   c000f5ea <malloc>
c001c94c:	83 c4 0c             	add    esp,0xc
c001c94f:	89 c3                	mov    ebx,eax
c001c951:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c001c957:	56                   	push   esi
c001c958:	50                   	push   eax
c001c959:	e8 8a 64 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001c95e:	83 c4 10             	add    esp,0x10
c001c961:	85 db                	test   ebx,ebx
c001c963:	75 3c                	jne    c001c9a1 <Thr::loadDLL(char const*, bool)+0x84>
c001c965:	89 e8                	mov    eax,ebp
c001c967:	84 c0                	test   al,al
c001c969:	0f 84 b0 01 00 00    	je     c001cb1f <Thr::loadDLL(char const*, bool)+0x202>
c001c96f:	50                   	push   eax
c001c970:	50                   	push   eax
c001c971:	68 8c aa 02 c0       	push   0xc002aa8c
c001c976:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c97a:	57                   	push   edi
c001c97b:	e8 aa 3d fe ff       	call   c000072a <strcpy>
c001c980:	58                   	pop    eax
c001c981:	5a                   	pop    edx
c001c982:	56                   	push   esi
c001c983:	57                   	push   edi
c001c984:	e8 58 3e fe ff       	call   c00007e1 <strcat>
c001c989:	59                   	pop    ecx
c001c98a:	58                   	pop    eax
c001c98b:	68 9f aa 02 c0       	push   0xc002aa9f
c001c990:	57                   	push   edi
c001c991:	e8 4b 3e fe ff       	call   c00007e1 <strcat>
c001c996:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c999:	e8 43 d0 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001c99e:	83 c4 10             	add    esp,0x10
c001c9a1:	50                   	push   eax
c001c9a2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c9a6:	50                   	push   eax
c001c9a7:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c9ab:	50                   	push   eax
c001c9ac:	53                   	push   ebx
c001c9ad:	e8 46 67 ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	85 db                	test   ebx,ebx
c001c9b7:	74 0c                	je     c001c9c5 <Thr::loadDLL(char const*, bool)+0xa8>
c001c9b9:	83 ec 0c             	sub    esp,0xc
c001c9bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c9be:	53                   	push   ebx
c001c9bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9c2:	83 c4 10             	add    esp,0x10
c001c9c5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c9ca:	75 0a                	jne    c001c9d6 <Thr::loadDLL(char const*, bool)+0xb9>
c001c9cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9d0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c9d4:	75 3c                	jne    c001ca12 <Thr::loadDLL(char const*, bool)+0xf5>
c001c9d6:	89 e8                	mov    eax,ebp
c001c9d8:	84 c0                	test   al,al
c001c9da:	0f 84 3d 01 00 00    	je     c001cb1d <Thr::loadDLL(char const*, bool)+0x200>
c001c9e0:	50                   	push   eax
c001c9e1:	50                   	push   eax
c001c9e2:	68 8c aa 02 c0       	push   0xc002aa8c
c001c9e7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c9eb:	53                   	push   ebx
c001c9ec:	e8 39 3d fe ff       	call   c000072a <strcpy>
c001c9f1:	58                   	pop    eax
c001c9f2:	5a                   	pop    edx
c001c9f3:	56                   	push   esi
c001c9f4:	53                   	push   ebx
c001c9f5:	e8 e7 3d fe ff       	call   c00007e1 <strcat>
c001c9fa:	59                   	pop    ecx
c001c9fb:	5f                   	pop    edi
c001c9fc:	68 9f aa 02 c0       	push   0xc002aa9f
c001ca01:	53                   	push   ebx
c001ca02:	e8 da 3d fe ff       	call   c00007e1 <strcat>
c001ca07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca0a:	e8 d2 cf ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	e8 18 50 ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c001ca17:	51                   	push   ecx
c001ca18:	6a 03                	push   0x3
c001ca1a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ca1e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ca22:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001ca28:	83 d3 00             	adc    ebx,0x0
c001ca2b:	89 ca                	mov    edx,ecx
c001ca2d:	89 d1                	mov    ecx,edx
c001ca2f:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001ca33:	51                   	push   ecx
c001ca34:	50                   	push   eax
c001ca35:	e8 30 56 ff ff       	call   c001206a <VAS::allocatePages(int, int)>
c001ca3a:	89 34 24             	mov    DWORD PTR [esp],esi
c001ca3d:	89 c3                	mov    ebx,eax
c001ca3f:	e8 64 3c fe ff       	call   c00006a8 <strlen>
c001ca44:	8b 3d 20 da 02 c0    	mov    edi,DWORD PTR ds:0xc002da20
c001ca4a:	40                   	inc    eax
c001ca4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca4e:	e8 97 2b ff ff       	call   c000f5ea <malloc>
c001ca53:	89 04 bd 40 de 02 c0 	mov    DWORD PTR [edi*4-0x3ffd21c0],eax
c001ca5a:	5f                   	pop    edi
c001ca5b:	58                   	pop    eax
c001ca5c:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c001ca61:	56                   	push   esi
c001ca62:	ff 34 85 40 de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21c0]
c001ca69:	e8 bc 3c fe ff       	call   c000072a <strcpy>
c001ca6e:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c001ca73:	8d 50 01             	lea    edx,[eax+0x1]
c001ca76:	89 1c 85 40 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23c0],ebx
c001ca7d:	89 15 20 da 02 c0    	mov    DWORD PTR ds:0xc002da20,edx
c001ca83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca87:	83 c4 0c             	add    esp,0xc
c001ca8a:	89 14 85 40 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd25c0],edx
c001ca91:	6a 01                	push   0x1
c001ca93:	53                   	push   ebx
c001ca94:	56                   	push   esi
c001ca95:	e8 e4 f6 ff ff       	call   c001c17e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001ca9a:	83 c4 10             	add    esp,0x10
c001ca9d:	89 c7                	mov    edi,eax
c001ca9f:	fe c8                	dec    al
c001caa1:	74 16                	je     c001cab9 <Thr::loadDLL(char const*, bool)+0x19c>
c001caa3:	89 e8                	mov    eax,ebp
c001caa5:	84 c0                	test   al,al
c001caa7:	74 10                	je     c001cab9 <Thr::loadDLL(char const*, bool)+0x19c>
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	68 a1 aa 02 c0       	push   0xc002aaa1
c001cab1:	e8 2b cf ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	31 f6                	xor    esi,esi
c001cabb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cabf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cac3:	05 ff 0f 00 00       	add    eax,0xfff
c001cac8:	83 d2 00             	adc    edx,0x0
c001cacb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cacf:	c1 ea 0c             	shr    edx,0xc
c001cad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cada:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cade:	ba 00 00 00 00       	mov    edx,0x0
c001cae3:	89 d0                	mov    eax,edx
c001cae5:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001cae9:	73 2c                	jae    c001cb17 <Thr::loadDLL(char const*, bool)+0x1fa>
c001caeb:	e8 3f 4f ff ff       	call   c0011a2f <Virt::getAKernelVAS()>
c001caf0:	89 f5                	mov    ebp,esi
c001caf2:	c1 e5 0c             	shl    ebp,0xc
c001caf5:	52                   	push   edx
c001caf6:	01 dd                	add    ebp,ebx
c001caf8:	52                   	push   edx
c001caf9:	55                   	push   ebp
c001cafa:	50                   	push   eax
c001cafb:	e8 e4 50 ff ff       	call   c0011be4 <VAS::getPageTableEntry(unsigned long)>
c001cb00:	83 c4 10             	add    esp,0x10
c001cb03:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cb06:	75 0c                	jne    c001cb14 <Thr::loadDLL(char const*, bool)+0x1f7>
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	55                   	push   ebp
c001cb0c:	e8 c2 30 ff ff       	call   c000fbd3 <Phys::freePage(unsigned long)>
c001cb11:	83 c4 10             	add    esp,0x10
c001cb14:	46                   	inc    esi
c001cb15:	eb a4                	jmp    c001cabb <Thr::loadDLL(char const*, bool)+0x19e>
c001cb17:	89 f8                	mov    eax,edi
c001cb19:	84 c0                	test   al,al
c001cb1b:	75 02                	jne    c001cb1f <Thr::loadDLL(char const*, bool)+0x202>
c001cb1d:	31 db                	xor    ebx,ebx
c001cb1f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cb25:	89 d8                	mov    eax,ebx
c001cb27:	5b                   	pop    ebx
c001cb28:	5e                   	pop    esi
c001cb29:	5f                   	pop    edi
c001cb2a:	5d                   	pop    ebp
c001cb2b:	c3                   	ret    

c001cb2c <Thr::executeDLL(unsigned long, void*)>:
c001cb2c:	56                   	push   esi
c001cb2d:	53                   	push   ebx
c001cb2e:	51                   	push   ecx
c001cb2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cb37:	85 db                	test   ebx,ebx
c001cb39:	75 10                	jne    c001cb4b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	68 c0 aa 02 c0       	push   0xc002aac0
c001cb43:	e8 99 ce ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001cb48:	83 c4 10             	add    esp,0x10
c001cb4b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cb4f:	89 d8                	mov    eax,ebx
c001cb51:	5a                   	pop    edx
c001cb52:	5b                   	pop    ebx
c001cb53:	5e                   	pop    esi
c001cb54:	ff e0                	jmp    eax

c001cb56 <changeTSS>:
c001cb56:	83 ec 14             	sub    esp,0x14
c001cb59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb5e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cb61:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001cb66:	c1 e2 15             	shl    edx,0x15
c001cb69:	29 d0                	sub    eax,edx
c001cb6b:	50                   	push   eax
c001cb6c:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001cb71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb77:	05 7c 11 00 00       	add    eax,0x117c
c001cb7c:	50                   	push   eax
c001cb7d:	e8 5c 46 ff ff       	call   c00111de <TSS::setESP(unsigned long)>
c001cb82:	83 c4 1c             	add    esp,0x1c
c001cb85:	c3                   	ret    

c001cb86 <Process::addArgs(char**)>:
c001cb86:	57                   	push   edi
c001cb87:	56                   	push   esi
c001cb88:	53                   	push   ebx
c001cb89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb91:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001cb9b:	85 ff                	test   edi,edi
c001cb9d:	74 3d                	je     c001cbdc <Process::addArgs(char**)+0x56>
c001cb9f:	8b 07                	mov    eax,DWORD PTR [edi]
c001cba1:	85 c0                	test   eax,eax
c001cba3:	74 37                	je     c001cbdc <Process::addArgs(char**)+0x56>
c001cba5:	31 db                	xor    ebx,ebx
c001cba7:	83 ec 0c             	sub    esp,0xc
c001cbaa:	50                   	push   eax
c001cbab:	e8 f8 3a fe ff       	call   c00006a8 <strlen>
c001cbb0:	40                   	inc    eax
c001cbb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbb4:	e8 31 2a ff ff       	call   c000f5ea <malloc>
c001cbb9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001cbc0:	5a                   	pop    edx
c001cbc1:	59                   	pop    ecx
c001cbc2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001cbc5:	43                   	inc    ebx
c001cbc6:	50                   	push   eax
c001cbc7:	e8 5e 3b fe ff       	call   c000072a <strcpy>
c001cbcc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001cbd2:	83 c4 10             	add    esp,0x10
c001cbd5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cbd8:	85 c0                	test   eax,eax
c001cbda:	75 cb                	jne    c001cba7 <Process::addArgs(char**)+0x21>
c001cbdc:	5b                   	pop    ebx
c001cbdd:	5e                   	pop    esi
c001cbde:	5f                   	pop    edi
c001cbdf:	c3                   	ret    

c001cbe0 <Process::Process(char const*, Process*, char**)>:
c001cbe0:	56                   	push   esi
c001cbe1:	53                   	push   ebx
c001cbe2:	83 ec 14             	sub    esp,0x14
c001cbe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbe9:	05 0c 02 00 00       	add    eax,0x20c
c001cbee:	bb 07 00 00 00       	mov    ebx,0x7
c001cbf3:	89 c6                	mov    esi,eax
c001cbf5:	85 db                	test   ebx,ebx
c001cbf7:	78 12                	js     c001cc0b <Process::Process(char const*, Process*, char**)+0x2b>
c001cbf9:	83 ec 0c             	sub    esp,0xc
c001cbfc:	56                   	push   esi
c001cbfd:	e8 b0 ac 00 00       	call   c00278b2 <ThreadControlBlock::ThreadControlBlock()>
c001cc02:	83 c4 10             	add    esp,0x10
c001cc05:	83 c6 63             	add    esi,0x63
c001cc08:	4b                   	dec    ebx
c001cc09:	eb ea                	jmp    c001cbf5 <Process::Process(char const*, Process*, char**)+0x15>
c001cc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc0f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc1d:	e8 10 cc ff ff       	call   c0019832 <Krnl::newProcessEnv(Process*)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	89 c2                	mov    edx,eax
c001cc27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc2b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc35:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cc3e:	a1 50 c2 02 c0       	mov    eax,ds:0xc002c250
c001cc43:	8d 50 01             	lea    edx,[eax+0x1]
c001cc46:	89 15 50 c2 02 c0    	mov    DWORD PTR ds:0xc002c250,edx
c001cc4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cc50:	89 02                	mov    DWORD PTR [edx],eax
c001cc52:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cc5a:	83 ec 0c             	sub    esp,0xc
c001cc5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cc61:	e8 84 29 ff ff       	call   c000f5ea <malloc>
c001cc66:	83 c4 10             	add    esp,0x10
c001cc69:	89 c3                	mov    ebx,eax
c001cc6b:	83 ec 08             	sub    esp,0x8
c001cc6e:	6a 00                	push   0x0
c001cc70:	53                   	push   ebx
c001cc71:	e8 9c 57 ff ff       	call   c0012412 <VAS::VAS(bool)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc7d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc87:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc99:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cca3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cca9:	85 c0                	test   eax,eax
c001ccab:	74 42                	je     c001ccef <Process::Process(char const*, Process*, char**)+0x10f>
c001ccad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccb1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ccb7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ccbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccc1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ccc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cccb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ccd1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ccd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccdb:	05 0c 01 00 00       	add    eax,0x10c
c001cce0:	83 ec 08             	sub    esp,0x8
c001cce3:	52                   	push   edx
c001cce4:	50                   	push   eax
c001cce5:	e8 40 3a fe ff       	call   c000072a <strcpy>
c001ccea:	83 c4 10             	add    esp,0x10
c001cced:	eb 63                	jmp    c001cd52 <Process::Process(char const*, Process*, char**)+0x172>
c001ccef:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001ccf7:	83 ec 0c             	sub    esp,0xc
c001ccfa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ccfe:	e8 e7 28 ff ff       	call   c000f5ea <malloc>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	89 c3                	mov    ebx,eax
c001cd08:	83 ec 08             	sub    esp,0x8
c001cd0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd0f:	53                   	push   ebx
c001cd10:	e8 c7 41 ff ff       	call   c0010edc <VgaText::VgaText(char const*)>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd1c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cd22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd26:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cd2c:	83 ec 0c             	sub    esp,0xc
c001cd2f:	50                   	push   eax
c001cd30:	e8 9a 35 ff ff       	call   c00102cf <addToTerminalCycle(VgaText*)>
c001cd35:	83 c4 10             	add    esp,0x10
c001cd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd3c:	05 0c 01 00 00       	add    eax,0x10c
c001cd41:	83 ec 08             	sub    esp,0x8
c001cd44:	68 ea aa 02 c0       	push   0xc002aaea
c001cd49:	50                   	push   eax
c001cd4a:	e8 db 39 fe ff       	call   c000072a <strcpy>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd56:	83 c0 0c             	add    eax,0xc
c001cd59:	83 ec 08             	sub    esp,0x8
c001cd5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd60:	50                   	push   eax
c001cd61:	e8 c4 39 fe ff       	call   c000072a <strcpy>
c001cd66:	83 c4 10             	add    esp,0x10
c001cd69:	83 ec 08             	sub    esp,0x8
c001cd6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cd70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd74:	e8 0d fe ff ff       	call   c001cb86 <Process::addArgs(char**)>
c001cd79:	83 c4 10             	add    esp,0x10
c001cd7c:	83 ec 08             	sub    esp,0x8
c001cd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd87:	e8 be ee ff ff       	call   c001bc4a <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cd8c:	83 c4 10             	add    esp,0x10
c001cd8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cd93:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cd97:	83 f0 01             	xor    eax,0x1
c001cd9a:	88 c2                	mov    dl,al
c001cd9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cda6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cdab:	83 ec 08             	sub    esp,0x8
c001cdae:	50                   	push   eax
c001cdaf:	68 e8 ab 02 c0       	push   0xc002abe8
c001cdb4:	e8 d6 5a ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001cdb9:	83 c4 10             	add    esp,0x10
c001cdbc:	90                   	nop
c001cdbd:	83 c4 14             	add    esp,0x14
c001cdc0:	5b                   	pop    ebx
c001cdc1:	5e                   	pop    esi
c001cdc2:	c3                   	ret    
c001cdc3:	90                   	nop

c001cdc4 <Process::Process(bool, char const*, Process*, char**)>:
c001cdc4:	56                   	push   esi
c001cdc5:	53                   	push   ebx
c001cdc6:	83 ec 24             	sub    esp,0x24
c001cdc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cdcd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cdd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cdd5:	05 0c 02 00 00       	add    eax,0x20c
c001cdda:	bb 07 00 00 00       	mov    ebx,0x7
c001cddf:	89 c6                	mov    esi,eax
c001cde1:	85 db                	test   ebx,ebx
c001cde3:	78 12                	js     c001cdf7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cde5:	83 ec 0c             	sub    esp,0xc
c001cde8:	56                   	push   esi
c001cde9:	e8 c4 aa 00 00       	call   c00278b2 <ThreadControlBlock::ThreadControlBlock()>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	83 c6 63             	add    esi,0x63
c001cdf4:	4b                   	dec    ebx
c001cdf5:	eb ea                	jmp    c001cde1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cdf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cdfb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ce02:	83 ec 0c             	sub    esp,0xc
c001ce05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce09:	e8 24 ca ff ff       	call   c0019832 <Krnl::newProcessEnv(Process*)>
c001ce0e:	83 c4 10             	add    esp,0x10
c001ce11:	89 c2                	mov    edx,eax
c001ce13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce17:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ce1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce21:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ce2a:	a1 50 c2 02 c0       	mov    eax,ds:0xc002c250
c001ce2f:	8d 50 01             	lea    edx,[eax+0x1]
c001ce32:	89 15 50 c2 02 c0    	mov    DWORD PTR ds:0xc002c250,edx
c001ce38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce3c:	89 02                	mov    DWORD PTR [edx],eax
c001ce3e:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ce4d:	e8 98 27 ff ff       	call   c000f5ea <malloc>
c001ce52:	83 c4 10             	add    esp,0x10
c001ce55:	89 c3                	mov    ebx,eax
c001ce57:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ce5c:	83 ec 08             	sub    esp,0x8
c001ce5f:	50                   	push   eax
c001ce60:	53                   	push   ebx
c001ce61:	e8 ac 55 ff ff       	call   c0012412 <VAS::VAS(bool)>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce6d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ce73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce77:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ce81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce85:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce89:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ce8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce93:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce99:	85 c0                	test   eax,eax
c001ce9b:	74 42                	je     c001cedf <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ce9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cea1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cea7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ceb1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ceb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cebb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cec1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cec7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cecb:	05 0c 01 00 00       	add    eax,0x10c
c001ced0:	83 ec 08             	sub    esp,0x8
c001ced3:	52                   	push   edx
c001ced4:	50                   	push   eax
c001ced5:	e8 50 38 fe ff       	call   c000072a <strcpy>
c001ceda:	83 c4 10             	add    esp,0x10
c001cedd:	eb 63                	jmp    c001cf42 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cedf:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cee7:	83 ec 0c             	sub    esp,0xc
c001ceea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ceee:	e8 f7 26 ff ff       	call   c000f5ea <malloc>
c001cef3:	83 c4 10             	add    esp,0x10
c001cef6:	89 c3                	mov    ebx,eax
c001cef8:	83 ec 08             	sub    esp,0x8
c001cefb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ceff:	53                   	push   ebx
c001cf00:	e8 d7 3f ff ff       	call   c0010edc <VgaText::VgaText(char const*)>
c001cf05:	83 c4 10             	add    esp,0x10
c001cf08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf0c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cf12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cf1c:	83 ec 0c             	sub    esp,0xc
c001cf1f:	50                   	push   eax
c001cf20:	e8 aa 33 ff ff       	call   c00102cf <addToTerminalCycle(VgaText*)>
c001cf25:	83 c4 10             	add    esp,0x10
c001cf28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf2c:	05 0c 01 00 00       	add    eax,0x10c
c001cf31:	83 ec 08             	sub    esp,0x8
c001cf34:	68 ea aa 02 c0       	push   0xc002aaea
c001cf39:	50                   	push   eax
c001cf3a:	e8 eb 37 fe ff       	call   c000072a <strcpy>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf46:	83 c0 0c             	add    eax,0xc
c001cf49:	83 ec 08             	sub    esp,0x8
c001cf4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cf50:	50                   	push   eax
c001cf51:	e8 d4 37 fe ff       	call   c000072a <strcpy>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	83 ec 08             	sub    esp,0x8
c001cf5c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cf60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf64:	e8 1d fc ff ff       	call   c001cb86 <Process::addArgs(char**)>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	90                   	nop
c001cf6d:	83 c4 24             	add    esp,0x24
c001cf70:	5b                   	pop    ebx
c001cf71:	5e                   	pop    esi
c001cf72:	c3                   	ret    

c001cf73 <disableIRQs()>:
c001cf73:	fa                   	cli    
c001cf74:	ff 05 ec e1 02 c0    	inc    DWORD PTR ds:0xc002e1ec
c001cf7a:	c3                   	ret    

c001cf7b <getIRQNestingLevel()>:
c001cf7b:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c001cf80:	c3                   	ret    

c001cf81 <enableIRQs()>:
c001cf81:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c001cf86:	48                   	dec    eax
c001cf87:	a3 ec e1 02 c0       	mov    ds:0xc002e1ec,eax
c001cf8c:	75 01                	jne    c001cf8f <enableIRQs()+0xe>
c001cf8e:	fb                   	sti    
c001cf8f:	c3                   	ret    

c001cf90 <lockScheduler()>:
c001cf90:	eb e1                	jmp    c001cf73 <disableIRQs()>

c001cf92 <unlockScheduler()>:
c001cf92:	eb ed                	jmp    c001cf81 <enableIRQs()>

c001cf94 <userModeEntryPoint(void*)>:
c001cf94:	83 ec 0c             	sub    esp,0xc
c001cf97:	e8 f6 ff ff ff       	call   c001cf92 <unlockScheduler()>
c001cf9c:	fb                   	sti    
c001cf9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfa2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cfa5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cfab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfaf:	83 c4 0c             	add    esp,0xc
c001cfb2:	e9 28 33 fe ff       	jmp    c00002df <goToUsermode>

c001cfb7 <lockStuff()>:
c001cfb7:	e8 b7 ff ff ff       	call   c001cf73 <disableIRQs()>
c001cfbc:	ff 05 e8 e1 02 c0    	inc    DWORD PTR ds:0xc002e1e8
c001cfc2:	c3                   	ret    

c001cfc3 <taskStartupFunction>:
c001cfc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cfc8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cfcb:	c3                   	ret    

c001cfcc <updateTimeUsed()>:
c001cfcc:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c001cfd1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cfd7:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cfde:	74 50                	je     c001d030 <updateTimeUsed()+0x64>
c001cfe0:	57                   	push   edi
c001cfe1:	56                   	push   esi
c001cfe2:	53                   	push   ebx
c001cfe3:	0f 31                	rdtsc  
c001cfe5:	89 c1                	mov    ecx,eax
c001cfe7:	a3 28 e2 02 c0       	mov    ds:0xc002e228,eax
c001cfec:	2b 0d 18 e2 02 c0    	sub    ecx,DWORD PTR ds:0xc002e218
c001cff2:	89 d3                	mov    ebx,edx
c001cff4:	89 0d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,ecx
c001cffa:	1b 1d 1c e2 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e21c
c001d000:	a3 18 e2 02 c0       	mov    ds:0xc002e218,eax
c001d005:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c001d00b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d010:	89 15 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,edx
c001d016:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d019:	89 15 1c e2 02 c0    	mov    DWORD PTR ds:0xc002e21c,edx
c001d01f:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d022:	01 f1                	add    ecx,esi
c001d024:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d027:	11 fb                	adc    ebx,edi
c001d029:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d02c:	5b                   	pop    ebx
c001d02d:	5e                   	pop    esi
c001d02e:	5f                   	pop    edi
c001d02f:	c3                   	ret    
c001d030:	c3                   	ret    

c001d031 <switchToThread(ThreadControlBlock*)>:
c001d031:	53                   	push   ebx
c001d032:	83 ec 08             	sub    esp,0x8
c001d035:	a1 e8 e1 02 c0       	mov    eax,ds:0xc002e1e8
c001d03a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d03e:	85 c0                	test   eax,eax
c001d040:	75 30                	jne    c001d072 <switchToThread(ThreadControlBlock*)+0x41>
c001d042:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d045:	3c ff                	cmp    al,0xff
c001d047:	74 25                	je     c001d06e <switchToThread(ThreadControlBlock*)+0x3d>
c001d049:	0f b6 d0             	movzx  edx,al
c001d04c:	b8 84 03 00 00       	mov    eax,0x384
c001d051:	29 d0                	sub    eax,edx
c001d053:	c1 e0 10             	shl    eax,0x10
c001d056:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d059:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d05c:	e8 6b ff ff ff       	call   c001cfcc <updateTimeUsed()>
c001d061:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d065:	83 c4 08             	add    esp,0x8
c001d068:	5b                   	pop    ebx
c001d069:	e9 a9 32 fe ff       	jmp    c0000317 <switchToThreadASM>
c001d06e:	31 c0                	xor    eax,eax
c001d070:	eb e7                	jmp    c001d059 <switchToThread(ThreadControlBlock*)+0x28>
c001d072:	c7 05 e4 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e1e4,0x1
c001d07c:	83 c4 08             	add    esp,0x8
c001d07f:	5b                   	pop    ebx
c001d080:	c3                   	ret    
c001d081:	90                   	nop

c001d082 <Semaphore::Semaphore(int)>:
c001d082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d086:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d08a:	89 10                	mov    DWORD PTR [eax],edx
c001d08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d090:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d09b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0a6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d0ad:	90                   	nop
c001d0ae:	c3                   	ret    
c001d0af:	90                   	nop

c001d0b0 <Mutex::Mutex()>:
c001d0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0b4:	6a 01                	push   0x1
c001d0b6:	50                   	push   eax
c001d0b7:	e8 c6 ff ff ff       	call   c001d082 <Semaphore::Semaphore(int)>
c001d0bc:	83 c4 08             	add    esp,0x8
c001d0bf:	90                   	nop
c001d0c0:	c3                   	ret    
c001d0c1:	90                   	nop

c001d0c2 <Process::createThread(void (*)(void*), void*, int)>:
c001d0c2:	55                   	push   ebp
c001d0c3:	31 c9                	xor    ecx,ecx
c001d0c5:	57                   	push   edi
c001d0c6:	56                   	push   esi
c001d0c7:	53                   	push   ebx
c001d0c8:	83 ec 1c             	sub    esp,0x1c
c001d0cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0cf:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d0d6:	89 f2                	mov    edx,esi
c001d0d8:	0f b7 c2             	movzx  eax,dx
c001d0db:	83 e2 01             	and    edx,0x1
c001d0de:	74 14                	je     c001d0f4 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d0e0:	d1 f8                	sar    eax,1
c001d0e2:	41                   	inc    ecx
c001d0e3:	89 c2                	mov    edx,eax
c001d0e5:	83 f9 10             	cmp    ecx,0x10
c001d0e8:	75 ee                	jne    c001d0d8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d0ea:	83 c4 1c             	add    esp,0x1c
c001d0ed:	31 c0                	xor    eax,eax
c001d0ef:	5b                   	pop    ebx
c001d0f0:	5e                   	pop    esi
c001d0f1:	5f                   	pop    edi
c001d0f2:	5d                   	pop    ebp
c001d0f3:	c3                   	ret    
c001d0f4:	83 ec 08             	sub    esp,0x8
c001d0f7:	b8 01 00 00 00       	mov    eax,0x1
c001d0fc:	d3 e0                	shl    eax,cl
c001d0fe:	09 c6                	or     esi,eax
c001d100:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d106:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d10d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d110:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d113:	01 ce                	add    esi,ecx
c001d115:	89 f0                	mov    eax,esi
c001d117:	c1 e0 05             	shl    eax,0x5
c001d11a:	01 c6                	add    esi,eax
c001d11c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d11f:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d125:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d12b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d12f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d135:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d13b:	89 ca                	mov    edx,ecx
c001d13d:	f7 da                	neg    edx
c001d13f:	c1 e2 15             	shl    edx,0x15
c001d142:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d148:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d14e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d152:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d15c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d162:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d166:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d16c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d176:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d180:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d187:	50                   	push   eax
c001d188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d18c:	68 08 e2 02 c0       	push   0xc002e208
c001d191:	e8 aa a5 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d19d:	83 c4 1c             	add    esp,0x1c
c001d1a0:	5b                   	pop    ebx
c001d1a1:	5e                   	pop    esi
c001d1a2:	5f                   	pop    edi
c001d1a3:	5d                   	pop    ebp
c001d1a4:	c3                   	ret    
c001d1a5:	90                   	nop

c001d1a6 <Process::createUserThread()>:
c001d1a6:	83 ec 0c             	sub    esp,0xc
c001d1a9:	68 80 00 00 00       	push   0x80
c001d1ae:	6a 00                	push   0x0
c001d1b0:	68 94 cf 01 c0       	push   0xc001cf94
c001d1b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1b9:	e8 04 ff ff ff       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c001d1be:	83 c4 1c             	add    esp,0x1c
c001d1c1:	c3                   	ret    

c001d1c2 <setupMultitasking(void (*)())>:
c001d1c2:	56                   	push   esi
c001d1c3:	53                   	push   ebx
c001d1c4:	53                   	push   ebx
c001d1c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1c9:	eb 10                	jmp    c001d1db <setupMultitasking(void (*)())+0x19>
c001d1cb:	83 ec 0c             	sub    esp,0xc
c001d1ce:	68 08 e2 02 c0       	push   0xc002e208
c001d1d3:	e8 ba a4 00 00       	call   c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d1d8:	83 c4 10             	add    esp,0x10
c001d1db:	83 ec 0c             	sub    esp,0xc
c001d1de:	68 08 e2 02 c0       	push   0xc002e208
c001d1e3:	e8 8e a4 00 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d1e8:	83 c4 10             	add    esp,0x10
c001d1eb:	84 c0                	test   al,al
c001d1ed:	74 dc                	je     c001d1cb <setupMultitasking(void (*)())+0x9>
c001d1ef:	83 ec 0c             	sub    esp,0xc
c001d1f2:	68 3f 07 00 00       	push   0x73f
c001d1f7:	e8 ee 23 ff ff       	call   c000f5ea <malloc>
c001d1fc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d203:	89 c3                	mov    ebx,eax
c001d205:	6a 00                	push   0x0
c001d207:	68 ee aa 02 c0       	push   0xc002aaee
c001d20c:	6a 01                	push   0x1
c001d20e:	50                   	push   eax
c001d20f:	e8 b0 fb ff ff       	call   c001cdc4 <Process::Process(bool, char const*, Process*, char**)>
c001d214:	83 c4 18             	add    esp,0x18
c001d217:	89 1d 14 e2 02 c0    	mov    DWORD PTR ds:0xc002e214,ebx
c001d21d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d223:	68 10 ac 02 c0       	push   0xc002ac10
c001d228:	e8 62 56 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d22d:	58                   	pop    eax
c001d22e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d234:	e8 18 38 ff ff       	call   c0010a51 <setActiveTerminal(VgaText*)>
c001d239:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d241:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d247:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d24a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d254:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d25a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d260:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d26a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d274:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d27e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d284:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d28a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d294:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d29a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d2a4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d2aa:	5a                   	pop    edx
c001d2ab:	59                   	pop    ecx
c001d2ac:	68 ea aa 02 c0       	push   0xc002aaea
c001d2b1:	50                   	push   eax
c001d2b2:	e8 73 34 fe ff       	call   c000072a <strcpy>
c001d2b7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d2be:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d2c2:	83 c4 14             	add    esp,0x14
c001d2c5:	5b                   	pop    ebx
c001d2c6:	5e                   	pop    esi
c001d2c7:	e9 3d 30 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d2cc <schedule()>:
c001d2cc:	a1 e8 e1 02 c0       	mov    eax,ds:0xc002e1e8
c001d2d1:	85 c0                	test   eax,eax
c001d2d3:	74 0b                	je     c001d2e0 <schedule()+0x14>
c001d2d5:	c7 05 e4 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e1e4,0x1
c001d2df:	c3                   	ret    
c001d2e0:	53                   	push   ebx
c001d2e1:	83 ec 14             	sub    esp,0x14
c001d2e4:	68 08 e2 02 c0       	push   0xc002e208
c001d2e9:	e8 88 a3 00 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d2ee:	83 c4 10             	add    esp,0x10
c001d2f1:	84 c0                	test   al,al
c001d2f3:	75 38                	jne    c001d32d <schedule()+0x61>
c001d2f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d2fd:	4a                   	dec    edx
c001d2fe:	74 32                	je     c001d332 <schedule()+0x66>
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	68 08 e2 02 c0       	push   0xc002e208
c001d308:	e8 61 a3 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d30d:	c7 04 24 08 e2 02 c0 	mov    DWORD PTR [esp],0xc002e208
c001d314:	89 c3                	mov    ebx,eax
c001d316:	e8 77 a3 00 00       	call   c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d31b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d325:	e8 07 fd ff ff       	call   c001d031 <switchToThread(ThreadControlBlock*)>
c001d32a:	83 c4 10             	add    esp,0x10
c001d32d:	83 c4 08             	add    esp,0x8
c001d330:	5b                   	pop    ebx
c001d331:	c3                   	ret    
c001d332:	83 ec 08             	sub    esp,0x8
c001d335:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d33c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d342:	68 08 e2 02 c0       	push   0xc002e208
c001d347:	e8 f4 a3 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d34c:	83 c4 10             	add    esp,0x10
c001d34f:	eb af                	jmp    c001d300 <schedule()+0x34>

c001d351 <unlockStuff()>:
c001d351:	a1 e8 e1 02 c0       	mov    eax,ds:0xc002e1e8
c001d356:	48                   	dec    eax
c001d357:	a3 e8 e1 02 c0       	mov    ds:0xc002e1e8,eax
c001d35c:	75 09                	jne    c001d367 <unlockStuff()+0x16>
c001d35e:	a1 e4 e1 02 c0       	mov    eax,ds:0xc002e1e4
c001d363:	85 c0                	test   eax,eax
c001d365:	75 05                	jne    c001d36c <unlockStuff()+0x1b>
c001d367:	e9 15 fc ff ff       	jmp    c001cf81 <enableIRQs()>
c001d36c:	83 ec 0c             	sub    esp,0xc
c001d36f:	c7 05 e4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1e4,0x0
c001d379:	e8 4e ff ff ff       	call   c001d2cc <schedule()>
c001d37e:	83 c4 0c             	add    esp,0xc
c001d381:	e9 fb fb ff ff       	jmp    c001cf81 <enableIRQs()>

c001d386 <Semaphore::tryAcquire()>:
c001d386:	83 ec 0c             	sub    esp,0xc
c001d389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38d:	e8 25 fc ff ff       	call   c001cfb7 <lockStuff()>
c001d392:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d395:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d397:	7c 0b                	jl     c001d3a4 <Semaphore::tryAcquire()+0x1e>
c001d399:	e8 b3 ff ff ff       	call   c001d351 <unlockStuff()>
c001d39e:	31 c0                	xor    eax,eax
c001d3a0:	83 c4 0c             	add    esp,0xc
c001d3a3:	c3                   	ret    
c001d3a4:	42                   	inc    edx
c001d3a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d3a8:	e8 a4 ff ff ff       	call   c001d351 <unlockStuff()>
c001d3ad:	b0 01                	mov    al,0x1
c001d3af:	83 c4 0c             	add    esp,0xc
c001d3b2:	c3                   	ret    
c001d3b3:	90                   	nop

c001d3b4 <Semaphore::assertLocked(char const*)>:
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3bf:	e8 f3 fb ff ff       	call   c001cfb7 <lockStuff()>
c001d3c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3c6:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d3c9:	7c 05                	jl     c001d3d0 <Semaphore::assertLocked(char const*)+0x1c>
c001d3cb:	83 c4 0c             	add    esp,0xc
c001d3ce:	eb 81                	jmp    c001d351 <unlockStuff()>
c001d3d0:	83 ec 0c             	sub    esp,0xc
c001d3d3:	52                   	push   edx
c001d3d4:	e8 08 c6 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001d3d9:	83 c4 10             	add    esp,0x10
c001d3dc:	83 c4 0c             	add    esp,0xc
c001d3df:	e9 6d ff ff ff       	jmp    c001d351 <unlockStuff()>

c001d3e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	e8 8f fb ff ff       	call   c001cf7b <getIRQNestingLevel()>
c001d3ec:	83 ec 08             	sub    esp,0x8
c001d3ef:	50                   	push   eax
c001d3f0:	68 44 ac 02 c0       	push   0xc002ac44
c001d3f5:	e8 95 54 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d3fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d3fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d403:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d406:	e8 c1 fe ff ff       	call   c001d2cc <schedule()>
c001d40b:	e8 82 fb ff ff       	call   c001cf92 <unlockScheduler()>
c001d410:	e8 66 fb ff ff       	call   c001cf7b <getIRQNestingLevel()>
c001d415:	5a                   	pop    edx
c001d416:	59                   	pop    ecx
c001d417:	50                   	push   eax
c001d418:	68 78 ac 02 c0       	push   0xc002ac78
c001d41d:	e8 6d 54 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d422:	83 c4 1c             	add    esp,0x1c
c001d425:	c3                   	ret    

c001d426 <blockTask(TaskState)>:
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d42d:	e8 5e fb ff ff       	call   c001cf90 <lockScheduler()>
c001d432:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d437:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d43a:	e8 8d fe ff ff       	call   c001d2cc <schedule()>
c001d43f:	83 c4 0c             	add    esp,0xc
c001d442:	e9 4b fb ff ff       	jmp    c001cf92 <unlockScheduler()>

c001d447 <waitTask(int, int*, int)>:
c001d447:	83 ec 18             	sub    esp,0x18
c001d44a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d44f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d453:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d456:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d45a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d45f:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d462:	6a 07                	push   0x7
c001d464:	e8 bd ff ff ff       	call   c001d426 <blockTask(TaskState)>
c001d469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d46e:	83 c4 10             	add    esp,0x10
c001d471:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d474:	85 d2                	test   edx,edx
c001d476:	74 0a                	je     c001d482 <waitTask(int, int*, int)+0x3b>
c001d478:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d47b:	89 02                	mov    DWORD PTR [edx],eax
c001d47d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d482:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d485:	83 c4 0c             	add    esp,0xc
c001d488:	c3                   	ret    

c001d489 <nanoSleepUntil(unsigned long long)>:
c001d489:	83 ec 0c             	sub    esp,0xc
c001d48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d490:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d494:	3b 05 50 d3 02 c0    	cmp    eax,DWORD PTR ds:0xc002d350
c001d49a:	89 d1                	mov    ecx,edx
c001d49c:	1b 0d 54 d3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d354
c001d4a2:	73 04                	jae    c001d4a8 <nanoSleepUntil(unsigned long long)+0x1f>
c001d4a4:	83 c4 0c             	add    esp,0xc
c001d4a7:	c3                   	ret    
c001d4a8:	e8 0a fb ff ff       	call   c001cfb7 <lockStuff()>
c001d4ad:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d4b3:	83 ec 08             	sub    esp,0x8
c001d4b6:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d4b9:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d4bc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d4c2:	68 fc e1 02 c0       	push   0xc002e1fc
c001d4c7:	e8 74 a2 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d4cc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d4d3:	e8 4e ff ff ff       	call   c001d426 <blockTask(TaskState)>
c001d4d8:	83 c4 1c             	add    esp,0x1c
c001d4db:	e9 71 fe ff ff       	jmp    c001d351 <unlockStuff()>

c001d4e0 <nanoSleep(unsigned long long)>:
c001d4e0:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c001d4e5:	8b 15 54 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d354
c001d4eb:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d4ef:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d4f3:	eb 94                	jmp    c001d489 <nanoSleepUntil(unsigned long long)>

c001d4f5 <sleep(unsigned long long)>:
c001d4f5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d4fd:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d502:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d506:	01 ca                	add    edx,ecx
c001d508:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d50c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d510:	eb ce                	jmp    c001d4e0 <nanoSleep(unsigned long long)>

c001d512 <Semaphore::acquire()>:
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d519:	e8 99 fa ff ff       	call   c001cfb7 <lockStuff()>
c001d51e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d521:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d523:	7d 0c                	jge    c001d531 <Semaphore::acquire()+0x1f>
c001d525:	42                   	inc    edx
c001d526:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d529:	83 c4 0c             	add    esp,0xc
c001d52c:	e9 20 fe ff ff       	jmp    c001d351 <unlockStuff()>
c001d531:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d537:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d53e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d541:	85 d2                	test   edx,edx
c001d543:	74 2a                	je     c001d56f <Semaphore::acquire()+0x5d>
c001d545:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d548:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d54e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d551:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d55d:	6a 05                	push   0x5
c001d55f:	e8 c2 fe ff ff       	call   c001d426 <blockTask(TaskState)>
c001d564:	83 c4 10             	add    esp,0x10
c001d567:	83 c4 0c             	add    esp,0xc
c001d56a:	e9 e2 fd ff ff       	jmp    c001d351 <unlockStuff()>
c001d56f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d575:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d578:	eb d7                	jmp    c001d551 <Semaphore::acquire()+0x3f>

c001d57a <taskReturned>:
c001d57a:	83 ec 18             	sub    esp,0x18
c001d57d:	68 ac ac 02 c0       	push   0xc002acac
c001d582:	e8 5a c4 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	83 ec 0c             	sub    esp,0xc
c001d58d:	6a 02                	push   0x2
c001d58f:	e8 92 fe ff ff       	call   c001d426 <blockTask(TaskState)>
c001d594:	e8 f7 f9 ff ff       	call   c001cf90 <lockScheduler()>
c001d599:	e8 2e fd ff ff       	call   c001d2cc <schedule()>
c001d59e:	e8 ef f9 ff ff       	call   c001cf92 <unlockScheduler()>
c001d5a3:	83 c4 10             	add    esp,0x10
c001d5a6:	eb e2                	jmp    c001d58a <taskReturned+0x10>

c001d5a8 <unblockTask(ThreadControlBlock*)>:
c001d5a8:	53                   	push   ebx
c001d5a9:	83 ec 08             	sub    esp,0x8
c001d5ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5b0:	e8 db f9 ff ff       	call   c001cf90 <lockScheduler()>
c001d5b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d5b8:	85 c0                	test   eax,eax
c001d5ba:	74 5c                	je     c001d618 <unblockTask(ThreadControlBlock*)+0x70>
c001d5bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d5bf:	48                   	dec    eax
c001d5c0:	74 31                	je     c001d5f3 <unblockTask(ThreadControlBlock*)+0x4b>
c001d5c2:	83 ec 0c             	sub    esp,0xc
c001d5c5:	68 08 e2 02 c0       	push   0xc002e208
c001d5ca:	e8 9f a0 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d5cf:	83 c4 10             	add    esp,0x10
c001d5d2:	85 c0                	test   eax,eax
c001d5d4:	75 17                	jne    c001d5ed <unblockTask(ThreadControlBlock*)+0x45>
c001d5d6:	eb 65                	jmp    c001d63d <unblockTask(ThreadControlBlock*)+0x95>
c001d5d8:	83 ec 08             	sub    esp,0x8
c001d5db:	50                   	push   eax
c001d5dc:	68 08 e2 02 c0       	push   0xc002e208
c001d5e1:	e8 62 a3 00 00       	call   c0027948 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d5e6:	83 c4 10             	add    esp,0x10
c001d5e9:	85 c0                	test   eax,eax
c001d5eb:	74 50                	je     c001d63d <unblockTask(ThreadControlBlock*)+0x95>
c001d5ed:	39 c3                	cmp    ebx,eax
c001d5ef:	75 e7                	jne    c001d5d8 <unblockTask(ThreadControlBlock*)+0x30>
c001d5f1:	eb 1c                	jmp    c001d60f <unblockTask(ThreadControlBlock*)+0x67>
c001d5f3:	83 ec 0c             	sub    esp,0xc
c001d5f6:	68 9c ad 02 c0       	push   0xc002ad9c
c001d5fb:	e8 8f 52 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d600:	c7 04 24 28 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad28
c001d607:	e8 83 52 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d60c:	83 c4 10             	add    esp,0x10
c001d60f:	83 c4 08             	add    esp,0x8
c001d612:	5b                   	pop    ebx
c001d613:	e9 7a f9 ff ff       	jmp    c001cf92 <unlockScheduler()>
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	68 e0 ac 02 c0       	push   0xc002ace0
c001d620:	e8 6a 52 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d625:	c7 04 24 28 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad28
c001d62c:	e8 5e 52 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	83 c4 08             	add    esp,0x8
c001d637:	5b                   	pop    ebx
c001d638:	e9 55 f9 ff ff       	jmp    c001cf92 <unlockScheduler()>
c001d63d:	83 ec 08             	sub    esp,0x8
c001d640:	53                   	push   ebx
c001d641:	68 08 e2 02 c0       	push   0xc002e208
c001d646:	e8 f5 a0 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	83 c4 08             	add    esp,0x8
c001d651:	5b                   	pop    ebx
c001d652:	e9 3b f9 ff ff       	jmp    c001cf92 <unlockScheduler()>

c001d657 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d657:	55                   	push   ebp
c001d658:	57                   	push   edi
c001d659:	56                   	push   esi
c001d65a:	53                   	push   ebx
c001d65b:	83 ec 1c             	sub    esp,0x1c
c001d65e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d662:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d665:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d66b:	85 ff                	test   edi,edi
c001d66d:	7e 20                	jle    c001d68f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d66f:	31 f6                	xor    esi,esi
c001d671:	83 ec 0c             	sub    esp,0xc
c001d674:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d67b:	46                   	inc    esi
c001d67c:	e8 79 1f ff ff       	call   c000f5fa <free>
c001d681:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d68d:	7f e2                	jg     c001d671 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d68f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d699:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d69e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d6a1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d6a4:	d3 c0                	rol    eax,cl
c001d6a6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d6ad:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d6b0:	89 f7                	mov    edi,esi
c001d6b2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d6ba:	0f 85 74 01 00 00    	jne    c001d834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d6c0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d6c6:	85 ed                	test   ebp,ebp
c001d6c8:	74 1b                	je     c001d6e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d6ca:	83 ec 0c             	sub    esp,0xc
c001d6cd:	55                   	push   ebp
c001d6ce:	e8 7b c0 ff ff       	call   c001974e <EnvVarContainer::~EnvVarContainer()>
c001d6d3:	59                   	pop    ecx
c001d6d4:	5e                   	pop    esi
c001d6d5:	6a 0c                	push   0xc
c001d6d7:	55                   	push   ebp
c001d6d8:	e8 d2 50 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c001d6dd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	89 f7                	mov    edi,esi
c001d6e5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d6eb:	85 c0                	test   eax,eax
c001d6ed:	0f 84 aa 00 00 00    	je     c001d79d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d6f3:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d6f6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d6fa:	31 c9                	xor    ecx,ecx
c001d6fc:	eb 10                	jmp    c001d70e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d6fe:	41                   	inc    ecx
c001d6ff:	83 f9 10             	cmp    ecx,0x10
c001d702:	0f 84 95 00 00 00    	je     c001d79d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d708:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d70e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d715:	d3 fa                	sar    edx,cl
c001d717:	83 e2 01             	and    edx,0x1
c001d71a:	74 e2                	je     c001d6fe <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d71c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d71f:	01 ca                	add    edx,ecx
c001d721:	89 d5                	mov    ebp,edx
c001d723:	c1 e5 05             	shl    ebp,0x5
c001d726:	01 ea                	add    edx,ebp
c001d728:	01 d0                	add    eax,edx
c001d72a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d730:	83 fd 07             	cmp    ebp,0x7
c001d733:	75 c9                	jne    c001d6fe <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d735:	05 40 02 00 00       	add    eax,0x240
c001d73a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d73d:	83 fd ff             	cmp    ebp,0xffffffff
c001d740:	0f 8c 08 01 00 00    	jl     c001d84e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d746:	0f 84 b9 01 00 00    	je     c001d905 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d74c:	85 ed                	test   ebp,ebp
c001d74e:	0f 84 a0 01 00 00    	je     c001d8f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d754:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d756:	75 a6                	jne    c001d6fe <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d758:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d75e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d762:	01 d0                	add    eax,edx
c001d764:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d771:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d774:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d77a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d781:	50                   	push   eax
c001d782:	e8 21 fe ff ff       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d78d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d791:	89 f7                	mov    edi,esi
c001d793:	41                   	inc    ecx
c001d794:	83 f9 10             	cmp    ecx,0x10
c001d797:	0f 85 6b ff ff ff    	jne    c001d708 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d79d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d7a3:	85 c0                	test   eax,eax
c001d7a5:	74 5d                	je     c001d804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d7a7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d7ad:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d7b3:	74 4f                	je     c001d804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d7b5:	83 ec 0c             	sub    esp,0xc
c001d7b8:	68 08 e2 02 c0       	push   0xc002e208
c001d7bd:	e8 ac 9e 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d7c2:	c7 04 24 08 e2 02 c0 	mov    DWORD PTR [esp],0xc002e208
c001d7c9:	89 c7                	mov    edi,eax
c001d7cb:	e8 a6 9e 00 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	84 c0                	test   al,al
c001d7d5:	0f 84 e4 00 00 00    	je     c001d8bf <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d7db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d7de:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d7e4:	85 d2                	test   edx,edx
c001d7e6:	74 0f                	je     c001d7f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d7e8:	83 ec 0c             	sub    esp,0xc
c001d7eb:	8b 02                	mov    eax,DWORD PTR [edx]
c001d7ed:	52                   	push   edx
c001d7ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7f1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d7f4:	83 c4 10             	add    esp,0x10
c001d7f7:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d801:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d804:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d80a:	85 db                	test   ebx,ebx
c001d80c:	74 16                	je     c001d824 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	53                   	push   ebx
c001d812:	e8 e7 45 ff ff       	call   c0011dfe <VAS::~VAS()>
c001d817:	58                   	pop    eax
c001d818:	5a                   	pop    edx
c001d819:	6a 10                	push   0x10
c001d81b:	53                   	push   ebx
c001d81c:	e8 8e 4f ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	83 ec 0c             	sub    esp,0xc
c001d827:	68 f5 aa 02 c0       	push   0xc002aaf5
c001d82c:	e8 5e 50 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	83 ec 08             	sub    esp,0x8
c001d837:	68 3f 07 00 00       	push   0x73f
c001d83c:	68 03 ab 02 c0       	push   0xc002ab03
c001d841:	e8 49 50 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d846:	83 c4 2c             	add    esp,0x2c
c001d849:	5b                   	pop    ebx
c001d84a:	5e                   	pop    esi
c001d84b:	5f                   	pop    edi
c001d84c:	5d                   	pop    ebp
c001d84d:	c3                   	ret    
c001d84e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d852:	83 ec 0c             	sub    esp,0xc
c001d855:	68 e0 ad 02 c0       	push   0xc002ade0
c001d85a:	e8 82 c1 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001d85f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d862:	83 c4 10             	add    esp,0x10
c001d865:	89 f7                	mov    edi,esi
c001d867:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d86b:	e9 8e fe ff ff       	jmp    c001d6fe <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d870:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d876:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d87c:	75 1c                	jne    c001d89a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d87e:	83 ec 0c             	sub    esp,0xc
c001d881:	68 48 ae 02 c0       	push   0xc002ae48
c001d886:	e8 04 50 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d88b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d892:	e8 8f fb ff ff       	call   c001d426 <blockTask(TaskState)>
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	83 ec 08             	sub    esp,0x8
c001d89d:	56                   	push   esi
c001d89e:	68 08 e2 02 c0       	push   0xc002e208
c001d8a3:	e8 98 9e 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8a8:	c7 04 24 08 e2 02 c0 	mov    DWORD PTR [esp],0xc002e208
c001d8af:	e8 ba 9d 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8b4:	83 c4 10             	add    esp,0x10
c001d8b7:	39 f8                	cmp    eax,edi
c001d8b9:	0f 84 1c ff ff ff    	je     c001d7db <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d8bf:	83 ec 0c             	sub    esp,0xc
c001d8c2:	68 08 e2 02 c0       	push   0xc002e208
c001d8c7:	e8 a2 9d 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d8cc:	c7 04 24 08 e2 02 c0 	mov    DWORD PTR [esp],0xc002e208
c001d8d3:	89 c6                	mov    esi,eax
c001d8d5:	e8 b8 9d 00 00       	call   c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8da:	83 c4 10             	add    esp,0x10
c001d8dd:	39 f3                	cmp    ebx,esi
c001d8df:	74 b9                	je     c001d89a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d8e1:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d8e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d8e7:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d8ed:	75 ab                	jne    c001d89a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d8ef:	e9 7c ff ff ff       	jmp    c001d870 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d8f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8f8:	83 ec 0c             	sub    esp,0xc
c001d8fb:	68 14 ae 02 c0       	push   0xc002ae14
c001d900:	e9 55 ff ff ff       	jmp    c001d85a <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d905:	8b 36                	mov    esi,DWORD PTR [esi]
c001d907:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d90b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d90e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d911:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d917:	01 d7                	add    edi,edx
c001d919:	89 f8                	mov    eax,edi
c001d91b:	e9 44 fe ff ff       	jmp    c001d764 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d920 <cleanerTaskFunction(void*)>:
c001d920:	53                   	push   ebx
c001d921:	83 ec 08             	sub    esp,0x8
c001d924:	e8 69 f6 ff ff       	call   c001cf92 <unlockScheduler()>
c001d929:	e8 62 f6 ff ff       	call   c001cf90 <lockScheduler()>
c001d92e:	80 3d cc e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1cc,0x0
c001d935:	0f 85 8e 00 00 00    	jne    c001d9c9 <cleanerTaskFunction(void*)+0xa9>
c001d93b:	83 ec 0c             	sub    esp,0xc
c001d93e:	6a 02                	push   0x2
c001d940:	e8 9f fa ff ff       	call   c001d3e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d945:	83 c4 10             	add    esp,0x10
c001d948:	c6 05 cc e1 02 c0 00 	mov    BYTE PTR ds:0xc002e1cc,0x0
c001d94f:	e8 63 f6 ff ff       	call   c001cfb7 <lockStuff()>
c001d954:	e8 37 f6 ff ff       	call   c001cf90 <lockScheduler()>
c001d959:	83 ec 0c             	sub    esp,0xc
c001d95c:	68 f0 e1 02 c0       	push   0xc002e1f0
c001d961:	e8 10 9d 00 00       	call   c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d966:	83 c4 10             	add    esp,0x10
c001d969:	84 c0                	test   al,al
c001d96b:	75 40                	jne    c001d9ad <cleanerTaskFunction(void*)+0x8d>
c001d96d:	83 ec 0c             	sub    esp,0xc
c001d970:	68 f0 e1 02 c0       	push   0xc002e1f0
c001d975:	e8 f4 9c 00 00       	call   c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d97a:	c7 04 24 f0 e1 02 c0 	mov    DWORD PTR [esp],0xc002e1f0
c001d981:	89 c3                	mov    ebx,eax
c001d983:	e8 0a 9d 00 00       	call   c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d988:	c7 04 24 19 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab19
c001d98f:	e8 fb 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d994:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d997:	e8 bb fc ff ff       	call   c001d657 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d99c:	c7 04 24 32 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab32
c001d9a3:	e8 e7 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d9a8:	83 c4 10             	add    esp,0x10
c001d9ab:	eb ac                	jmp    c001d959 <cleanerTaskFunction(void*)+0x39>
c001d9ad:	e8 e0 f5 ff ff       	call   c001cf92 <unlockScheduler()>
c001d9b2:	e8 9a f9 ff ff       	call   c001d351 <unlockStuff()>
c001d9b7:	e8 d4 f5 ff ff       	call   c001cf90 <lockScheduler()>
c001d9bc:	80 3d cc e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1cc,0x0
c001d9c3:	0f 84 72 ff ff ff    	je     c001d93b <cleanerTaskFunction(void*)+0x1b>
c001d9c9:	e8 c4 f5 ff ff       	call   c001cf92 <unlockScheduler()>
c001d9ce:	e9 75 ff ff ff       	jmp    c001d948 <cleanerTaskFunction(void*)+0x28>

c001d9d3 <terminateTask(int)>:
c001d9d3:	83 ec 14             	sub    esp,0x14
c001d9d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d9de:	83 c0 0c             	add    eax,0xc
c001d9e1:	50                   	push   eax
c001d9e2:	68 70 ae 02 c0       	push   0xc002ae70
c001d9e7:	e8 a3 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001d9ec:	e8 c6 f5 ff ff       	call   c001cfb7 <lockStuff()>
c001d9f1:	e8 9a f5 ff ff       	call   c001cf90 <lockScheduler()>
c001d9f6:	c7 04 24 45 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab45
c001d9fd:	e8 8d 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001da02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da0b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001da0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da13:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001da16:	5a                   	pop    edx
c001da17:	59                   	pop    ecx
c001da18:	50                   	push   eax
c001da19:	68 f0 e1 02 c0       	push   0xc002e1f0
c001da1e:	e8 1d 9d 00 00       	call   c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da28:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001da2f:	c7 04 24 5f ab 02 c0 	mov    DWORD PTR [esp],0xc002ab5f
c001da36:	e8 54 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001da3b:	83 c4 10             	add    esp,0x10
c001da3e:	a1 c8 e1 02 c0       	mov    eax,ds:0xc002e1c8
c001da43:	85 c0                	test   eax,eax
c001da45:	74 5a                	je     c001daa1 <terminateTask(int)+0xce>
c001da47:	83 ec 0c             	sub    esp,0xc
c001da4a:	68 79 ab 02 c0       	push   0xc002ab79
c001da4f:	e8 3b 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001da54:	58                   	pop    eax
c001da55:	c6 05 cc e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1cc,0x1
c001da5c:	ff 35 c8 e1 02 c0    	push   DWORD PTR ds:0xc002e1c8
c001da62:	e8 41 fb ff ff       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001da67:	c7 04 24 93 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab93
c001da6e:	e8 1c 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001da73:	83 c4 10             	add    esp,0x10
c001da76:	e8 17 f5 ff ff       	call   c001cf92 <unlockScheduler()>
c001da7b:	e8 d1 f8 ff ff       	call   c001d351 <unlockStuff()>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	68 cb ab 02 c0       	push   0xc002abcb
c001da88:	e8 02 4e ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	e8 fb f4 ff ff       	call   c001cf90 <lockScheduler()>
c001da95:	e8 32 f8 ff ff       	call   c001d2cc <schedule()>
c001da9a:	e8 f3 f4 ff ff       	call   c001cf92 <unlockScheduler()>
c001da9f:	eb ef                	jmp    c001da90 <terminateTask(int)+0xbd>
c001daa1:	83 ec 0c             	sub    esp,0xc
c001daa4:	68 ad ab 02 c0       	push   0xc002abad
c001daa9:	e8 e1 4d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001daae:	83 c4 10             	add    esp,0x10
c001dab1:	eb c3                	jmp    c001da76 <terminateTask(int)+0xa3>

c001dab3 <Thr::terminateFromIRQ(int)>:
c001dab3:	83 ec 18             	sub    esp,0x18
c001dab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daba:	e8 14 ff ff ff       	call   c001d9d3 <terminateTask(int)>
c001dabf:	90                   	nop

c001dac0 <Semaphore::release()>:
c001dac0:	83 ec 0c             	sub    esp,0xc
c001dac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dac7:	e8 eb f4 ff ff       	call   c001cfb7 <lockStuff()>
c001dacc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dacf:	85 d2                	test   edx,edx
c001dad1:	74 1a                	je     c001daed <Semaphore::release()+0x2d>
c001dad3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dad6:	83 ec 0c             	sub    esp,0xc
c001dad9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dadc:	52                   	push   edx
c001dadd:	e8 c6 fa ff ff       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	83 c4 0c             	add    esp,0xc
c001dae8:	e9 64 f8 ff ff       	jmp    c001d351 <unlockStuff()>
c001daed:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001daf0:	83 c4 0c             	add    esp,0xc
c001daf3:	e9 59 f8 ff ff       	jmp    c001d351 <unlockStuff()>

c001daf8 <__static_initialization_and_destruction_0(int, int)>:
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001db00:	0f 85 88 00 00 00    	jne    c001db8e <__static_initialization_and_destruction_0(int, int)+0x96>
c001db06:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001db0e:	75 7e                	jne    c001db8e <__static_initialization_and_destruction_0(int, int)+0x96>
c001db10:	83 ec 0c             	sub    esp,0xc
c001db13:	68 08 e2 02 c0       	push   0xc002e208
c001db18:	e8 d3 9d 00 00       	call   c00278f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	83 ec 04             	sub    esp,0x4
c001db23:	68 e0 bb 02 c0       	push   0xc002bbe0
c001db28:	68 08 e2 02 c0       	push   0xc002e208
c001db2d:	68 b0 78 02 c0       	push   0xc00278b0
c001db32:	e8 f2 4b ff ff       	call   c0012729 <__cxa_atexit>
c001db37:	83 c4 10             	add    esp,0x10
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	68 fc e1 02 c0       	push   0xc002e1fc
c001db42:	e8 a9 9d 00 00       	call   c00278f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001db47:	83 c4 10             	add    esp,0x10
c001db4a:	83 ec 04             	sub    esp,0x4
c001db4d:	68 e0 bb 02 c0       	push   0xc002bbe0
c001db52:	68 fc e1 02 c0       	push   0xc002e1fc
c001db57:	68 b0 78 02 c0       	push   0xc00278b0
c001db5c:	e8 c8 4b ff ff       	call   c0012729 <__cxa_atexit>
c001db61:	83 c4 10             	add    esp,0x10
c001db64:	83 ec 0c             	sub    esp,0xc
c001db67:	68 f0 e1 02 c0       	push   0xc002e1f0
c001db6c:	e8 7f 9d 00 00       	call   c00278f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	83 ec 04             	sub    esp,0x4
c001db77:	68 e0 bb 02 c0       	push   0xc002bbe0
c001db7c:	68 f0 e1 02 c0       	push   0xc002e1f0
c001db81:	68 b0 78 02 c0       	push   0xc00278b0
c001db86:	e8 9e 4b ff ff       	call   c0012729 <__cxa_atexit>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	90                   	nop
c001db8f:	83 c4 0c             	add    esp,0xc
c001db92:	c3                   	ret    

c001db93 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	83 ec 08             	sub    esp,0x8
c001db99:	68 ff ff 00 00       	push   0xffff
c001db9e:	6a 01                	push   0x1
c001dba0:	e8 53 ff ff ff       	call   c001daf8 <__static_initialization_and_destruction_0(int, int)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	83 c4 0c             	add    esp,0xc
c001dbab:	c3                   	ret    

c001dbac <Vm::inbv(unsigned short)>:
c001dbac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dbb0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dbb5:	75 06                	jne    c001dbbd <Vm::inbv(unsigned short)+0x11>
c001dbb7:	a0 4c e2 02 c0       	mov    al,ds:0xc002e24c
c001dbbc:	c3                   	ret    
c001dbbd:	ec                   	in     al,dx
c001dbbe:	c3                   	ret    

c001dbbf <Vm::outbv(unsigned short, unsigned char)>:
c001dbbf:	53                   	push   ebx
c001dbc0:	83 ec 08             	sub    esp,0x8
c001dbc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dbcb:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dbd0:	75 38                	jne    c001dc0a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001dbd2:	0f b6 c3             	movzx  eax,bl
c001dbd5:	51                   	push   ecx
c001dbd6:	51                   	push   ecx
c001dbd7:	50                   	push   eax
c001dbd8:	68 8f ae 02 c0       	push   0xc002ae8f
c001dbdd:	e8 ad 4c ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001dbe2:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c001dbe8:	83 c4 10             	add    esp,0x10
c001dbeb:	8d 42 01             	lea    eax,[edx+0x1]
c001dbee:	88 9a 60 e2 02 c0    	mov    BYTE PTR [edx-0x3ffd1da0],bl
c001dbf4:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c001dbf9:	83 f8 20             	cmp    eax,0x20
c001dbfc:	75 0f                	jne    c001dc0d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dbfe:	c7 05 4c e2 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e24c,0x1f
c001dc08:	eb 03                	jmp    c001dc0d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dc0a:	88 d8                	mov    al,bl
c001dc0c:	ee                   	out    dx,al
c001dc0d:	83 c4 08             	add    esp,0x8
c001dc10:	5b                   	pop    ebx
c001dc11:	c3                   	ret    

c001dc12 <Vm::realToLinear(unsigned short, unsigned short)>:
c001dc12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dc17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dc1c:	c1 e0 04             	shl    eax,0x4
c001dc1f:	01 d0                	add    eax,edx
c001dc21:	c3                   	ret    

c001dc22 <Vm::getSegment(unsigned int)>:
c001dc22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc26:	c1 e8 10             	shr    eax,0x10
c001dc29:	c3                   	ret    

c001dc2a <Vm::getOffset(unsigned int)>:
c001dc2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc2e:	c3                   	ret    

c001dc2f <Vm::mainloop2()>:
c001dc2f:	83 ec 0c             	sub    esp,0xc
c001dc32:	e8 59 f3 ff ff       	call   c001cf90 <lockScheduler()>
c001dc37:	83 ec 0c             	sub    esp,0xc
c001dc3a:	c6 05 45 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e245,0x1
c001dc41:	6a 02                	push   0x2
c001dc43:	e8 9c f7 ff ff       	call   c001d3e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dc48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc4d:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001dc51:	52                   	push   edx
c001dc52:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001dc56:	52                   	push   edx
c001dc57:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001dc5b:	52                   	push   edx
c001dc5c:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001dc60:	50                   	push   eax
c001dc61:	e8 49 26 fe ff       	call   c00002af <goToVM86>
c001dc66:	83 c4 2c             	add    esp,0x2c
c001dc69:	c3                   	ret    

c001dc6a <Vm::mainVm8086Loop(void*)>:
c001dc6a:	83 ec 0c             	sub    esp,0xc
c001dc6d:	e8 20 f3 ff ff       	call   c001cf92 <unlockScheduler()>
c001dc72:	83 c4 0c             	add    esp,0xc
c001dc75:	eb b8                	jmp    c001dc2f <Vm::mainloop2()>

c001dc77 <Vm::mainloop3(unsigned long)>:
c001dc77:	53                   	push   ebx
c001dc78:	83 ec 08             	sub    esp,0x8
c001dc7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc7f:	e8 0c f3 ff ff       	call   c001cf90 <lockScheduler()>
c001dc84:	83 ec 0c             	sub    esp,0xc
c001dc87:	89 1d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ebx
c001dc8d:	6a 02                	push   0x2
c001dc8f:	c6 05 44 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e244,0x1
c001dc96:	e8 49 f7 ff ff       	call   c001d3e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dc9b:	83 c4 18             	add    esp,0x18
c001dc9e:	5b                   	pop    ebx
c001dc9f:	eb 8e                	jmp    c001dc2f <Vm::mainloop2()>

c001dca1 <Vm::initialise8086()>:
c001dca1:	83 ec 0c             	sub    esp,0xc
c001dca4:	68 80 00 00 00       	push   0x80
c001dca9:	6a 00                	push   0x0
c001dcab:	68 6a dc 01 c0       	push   0xc001dc6a
c001dcb0:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c001dcb6:	e8 07 f4 ff ff       	call   c001d0c2 <Process::createThread(void (*)(void*), void*, int)>
c001dcbb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001dcc2:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c001dcc7:	68 00 01 00 00       	push   0x100
c001dccc:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001dcd1:	6a 00                	push   0x0
c001dcd3:	6a 00                	push   0x0
c001dcd5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001dcdb:	e8 7e 45 ff ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dce0:	83 c4 2c             	add    esp,0x2c
c001dce3:	c3                   	ret    

c001dce4 <Vm::finish8086()>:
c001dce4:	53                   	push   ebx
c001dce5:	83 ec 08             	sub    esp,0x8
c001dce8:	e8 a3 f2 ff ff       	call   c001cf90 <lockScheduler()>
c001dced:	80 3d 44 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e244,0x0
c001dcf4:	75 0c                	jne    c001dd02 <Vm::finish8086()+0x1e>
c001dcf6:	e8 d1 f5 ff ff       	call   c001d2cc <schedule()>
c001dcfb:	e8 92 f2 ff ff       	call   c001cf92 <unlockScheduler()>
c001dd00:	eb e6                	jmp    c001dce8 <Vm::finish8086()+0x4>
c001dd02:	83 ec 0c             	sub    esp,0xc
c001dd05:	8b 1d 40 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e240
c001dd0b:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001dd11:	c6 05 44 e2 02 c0 00 	mov    BYTE PTR ds:0xc002e244,0x0
c001dd18:	e8 8b f8 ff ff       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001dd1d:	e8 70 f2 ff ff       	call   c001cf92 <unlockScheduler()>
c001dd22:	89 d8                	mov    eax,ebx
c001dd24:	83 c4 18             	add    esp,0x18
c001dd27:	5b                   	pop    ebx
c001dd28:	c3                   	ret    

c001dd29 <Vm::getOutput8086(unsigned char*)>:
c001dd29:	83 ec 10             	sub    esp,0x10
c001dd2c:	ff 35 4c e2 02 c0    	push   DWORD PTR ds:0xc002e24c
c001dd32:	68 60 e2 02 c0       	push   0xc002e260
c001dd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd3b:	e8 15 29 fe ff       	call   c0000655 <memcpy>
c001dd40:	a1 4c e2 02 c0       	mov    eax,ds:0xc002e24c
c001dd45:	c7 05 4c e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e24c,0x0
c001dd4f:	83 c4 1c             	add    esp,0x1c
c001dd52:	c3                   	ret    

c001dd53 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dd53:	55                   	push   ebp
c001dd54:	57                   	push   edi
c001dd55:	56                   	push   esi
c001dd56:	53                   	push   ebx
c001dd57:	83 ec 2c             	sub    esp,0x2c
c001dd5a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd5e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001dd62:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001dd66:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dd6a:	e8 21 f2 ff ff       	call   c001cf90 <lockScheduler()>
c001dd6f:	a0 45 e2 02 c0       	mov    al,ds:0xc002e245
c001dd74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd78:	84 c0                	test   al,al
c001dd7a:	75 0c                	jne    c001dd88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001dd7c:	e8 4b f5 ff ff       	call   c001d2cc <schedule()>
c001dd81:	e8 0c f2 ff ff       	call   c001cf92 <unlockScheduler()>
c001dd86:	eb e2                	jmp    c001dd6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001dd88:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001dd8d:	c7 05 4c e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e24c,0x0
c001dd97:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001dd9b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001dd9f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001dda3:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001dda7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ddab:	50                   	push   eax
c001ddac:	6a 20                	push   0x20
c001ddae:	6a 00                	push   0x0
c001ddb0:	68 60 e2 02 c0       	push   0xc002e260
c001ddb5:	e8 d1 28 fe ff       	call   c000068b <memset>
c001ddba:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ddc1:	e8 24 18 ff ff       	call   c000f5ea <malloc>
c001ddc6:	83 c4 0c             	add    esp,0xc
c001ddc9:	89 c7                	mov    edi,eax
c001ddcb:	ff 35 14 e2 02 c0    	push   DWORD PTR ds:0xc002e214
c001ddd1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddd5:	50                   	push   eax
c001ddd6:	e8 0d 50 ff ff       	call   c0012de8 <File::File(char const*, Process*)>
c001dddb:	83 c4 10             	add    esp,0x10
c001ddde:	85 ff                	test   edi,edi
c001dde0:	75 0a                	jne    c001ddec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dde2:	83 ec 0c             	sub    esp,0xc
c001dde5:	68 ab ae 02 c0       	push   0xc002aeab
c001ddea:	eb 27                	jmp    c001de13 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ddec:	50                   	push   eax
c001dded:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ddf1:	50                   	push   eax
c001ddf2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ddf6:	50                   	push   eax
c001ddf7:	57                   	push   edi
c001ddf8:	e8 fb 52 ff ff       	call   c00130f8 <File::stat(unsigned long long*, bool*)>
c001ddfd:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001de02:	83 c4 10             	add    esp,0x10
c001de05:	89 e8                	mov    eax,ebp
c001de07:	84 c0                	test   al,al
c001de09:	74 19                	je     c001de24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001de0b:	83 ec 0c             	sub    esp,0xc
c001de0e:	68 bf ae 02 c0       	push   0xc002aebf
c001de13:	e8 c9 bb ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001de18:	31 ed                	xor    ebp,ebp
c001de1a:	e8 73 f1 ff ff       	call   c001cf92 <unlockScheduler()>
c001de1f:	83 c4 10             	add    esp,0x10
c001de22:	eb 75                	jmp    c001de99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001de24:	50                   	push   eax
c001de25:	50                   	push   eax
c001de26:	6a 01                	push   0x1
c001de28:	57                   	push   edi
c001de29:	e8 1e 50 ff ff       	call   c0012e4c <File::open(FileOpenMode)>
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	85 c0                	test   eax,eax
c001de33:	74 17                	je     c001de4c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001de35:	83 ec 0c             	sub    esp,0xc
c001de38:	68 d8 ae 02 c0       	push   0xc002aed8
c001de3d:	e8 9f bb ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001de42:	e8 4b f1 ff ff       	call   c001cf92 <unlockScheduler()>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	eb 4d                	jmp    c001de99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001de4c:	0f b7 f6             	movzx  esi,si
c001de4f:	50                   	push   eax
c001de50:	0f b7 db             	movzx  ebx,bx
c001de53:	50                   	push   eax
c001de54:	56                   	push   esi
c001de55:	53                   	push   ebx
c001de56:	e8 b7 fd ff ff       	call   c001dc12 <Vm::realToLinear(unsigned short, unsigned short)>
c001de5b:	5a                   	pop    edx
c001de5c:	8b 17                	mov    edx,DWORD PTR [edi]
c001de5e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001de62:	51                   	push   ecx
c001de63:	50                   	push   eax
c001de64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001de68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001de6c:	57                   	push   edi
c001de6d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001de70:	83 c4 14             	add    esp,0x14
c001de73:	57                   	push   edi
c001de74:	e8 31 50 ff ff       	call   c0012eaa <File::close()>
c001de79:	c6 05 45 e2 02 c0 00 	mov    BYTE PTR ds:0xc002e245,0x0
c001de80:	e8 0d f1 ff ff       	call   c001cf92 <unlockScheduler()>
c001de85:	59                   	pop    ecx
c001de86:	ff 35 48 e2 02 c0    	push   DWORD PTR ds:0xc002e248
c001de8c:	e8 17 f7 ff ff       	call   c001d5a8 <unblockTask(ThreadControlBlock*)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001de99:	83 c4 2c             	add    esp,0x2c
c001de9c:	89 e8                	mov    eax,ebp
c001de9e:	5b                   	pop    ebx
c001de9f:	5e                   	pop    esi
c001dea0:	5f                   	pop    edi
c001dea1:	5d                   	pop    ebp
c001dea2:	c3                   	ret    

c001dea3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dea3:	57                   	push   edi
c001dea4:	56                   	push   esi
c001dea5:	53                   	push   ebx
c001dea6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001deaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001deb2:	83 e8 06             	sub    eax,0x6
c001deb5:	0f b7 c0             	movzx  eax,ax
c001deb8:	50                   	push   eax
c001deb9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001debe:	50                   	push   eax
c001debf:	e8 4e fd ff ff       	call   c001dc12 <Vm::realToLinear(unsigned short, unsigned short)>
c001dec4:	5a                   	pop    edx
c001dec5:	5e                   	pop    esi
c001dec6:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dec9:	8d 56 fa             	lea    edx,[esi-0x6]
c001decc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ded2:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ded5:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ded8:	83 c2 02             	add    edx,0x2
c001dedb:	66 89 10             	mov    WORD PTR [eax],dx
c001dede:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dee1:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dee5:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dee8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001deec:	89 d6                	mov    esi,edx
c001deee:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001def4:	66 81 e6 ff fd       	and    si,0xfdff
c001def9:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001defd:	74 07                	je     c001df06 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001deff:	89 d6                	mov    esi,edx
c001df01:	66 81 ce 00 02       	or     si,0x200
c001df06:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001df0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df0f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001df13:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001df1b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001df1e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001df26:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001df29:	5b                   	pop    ebx
c001df2a:	5e                   	pop    esi
c001df2b:	5f                   	pop    edi
c001df2c:	c3                   	ret    

c001df2d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001df2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df37:	c1 e0 04             	shl    eax,0x4
c001df3a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001df3d:	c3                   	ret    

c001df3e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001df3e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df48:	c1 e0 04             	shl    eax,0x4
c001df4b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001df4f:	c3                   	ret    

c001df50 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001df50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df55:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df5a:	c1 e0 04             	shl    eax,0x4
c001df5d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001df60:	c3                   	ret    

c001df61 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001df61:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df66:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df6b:	c1 e0 04             	shl    eax,0x4
c001df6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df72:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001df75:	c3                   	ret    

c001df76 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001df76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df80:	c1 e0 04             	shl    eax,0x4
c001df83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df87:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001df8b:	c3                   	ret    

c001df8c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001df8c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001df91:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001df96:	c1 e0 04             	shl    eax,0x4
c001df99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df9d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dfa0:	c3                   	ret    

c001dfa1 <Vm::faultHandler(regs*)>:
c001dfa1:	55                   	push   ebp
c001dfa2:	57                   	push   edi
c001dfa3:	56                   	push   esi
c001dfa4:	53                   	push   ebx
c001dfa5:	83 ec 1c             	sub    esp,0x1c
c001dfa8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dfac:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dfaf:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dfb2:	0f b7 c1             	movzx  eax,cx
c001dfb5:	50                   	push   eax
c001dfb6:	0f b7 c3             	movzx  eax,bx
c001dfb9:	c1 e3 04             	shl    ebx,0x4
c001dfbc:	50                   	push   eax
c001dfbd:	e8 50 fc ff ff       	call   c001dc12 <Vm::realToLinear(unsigned short, unsigned short)>
c001dfc2:	5a                   	pop    edx
c001dfc3:	89 c5                	mov    ebp,eax
c001dfc5:	5e                   	pop    esi
c001dfc6:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dfca:	50                   	push   eax
c001dfcb:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dfcf:	50                   	push   eax
c001dfd0:	e8 3d fc ff ff       	call   c001dc12 <Vm::realToLinear(unsigned short, unsigned short)>
c001dfd5:	01 cb                	add    ebx,ecx
c001dfd7:	89 c6                	mov    esi,eax
c001dfd9:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dfdd:	50                   	push   eax
c001dfde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfe2:	50                   	push   eax
c001dfe3:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dfe7:	50                   	push   eax
c001dfe8:	55                   	push   ebp
c001dfe9:	53                   	push   ebx
c001dfea:	b3 06                	mov    bl,0x6
c001dfec:	68 f1 ae 02 c0       	push   0xc002aef1
c001dff1:	e8 99 48 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001dff6:	83 c4 20             	add    esp,0x20
c001dff9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dffe:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e003:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e007:	3c 9d                	cmp    al,0x9d
c001e009:	0f 84 d7 02 00 00    	je     c001e2e6 <Vm::faultHandler(regs*)+0x345>
c001e00f:	0f 87 a3 00 00 00    	ja     c001e0b8 <Vm::faultHandler(regs*)+0x117>
c001e015:	3c 66                	cmp    al,0x66
c001e017:	0f 84 15 02 00 00    	je     c001e232 <Vm::faultHandler(regs*)+0x291>
c001e01d:	77 5f                	ja     c001e07e <Vm::faultHandler(regs*)+0xdd>
c001e01f:	3c 36                	cmp    al,0x36
c001e021:	0f 84 f1 01 00 00    	je     c001e218 <Vm::faultHandler(regs*)+0x277>
c001e027:	77 28                	ja     c001e051 <Vm::faultHandler(regs*)+0xb0>
c001e029:	3c 26                	cmp    al,0x26
c001e02b:	0f 84 99 01 00 00    	je     c001e1ca <Vm::faultHandler(regs*)+0x229>
c001e031:	3c 2e                	cmp    al,0x2e
c001e033:	0f 85 3b 07 00 00    	jne    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e039:	83 ec 0c             	sub    esp,0xc
c001e03c:	31 db                	xor    ebx,ebx
c001e03e:	68 06 af 02 c0       	push   0xc002af06
c001e043:	e8 47 48 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e048:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e04b:	83 c4 10             	add    esp,0x10
c001e04e:	45                   	inc    ebp
c001e04f:	eb b2                	jmp    c001e003 <Vm::faultHandler(regs*)+0x62>
c001e051:	3c 64                	cmp    al,0x64
c001e053:	0f 84 8b 01 00 00    	je     c001e1e4 <Vm::faultHandler(regs*)+0x243>
c001e059:	0f 87 9f 01 00 00    	ja     c001e1fe <Vm::faultHandler(regs*)+0x25d>
c001e05f:	3c 3e                	cmp    al,0x3e
c001e061:	0f 85 0d 07 00 00    	jne    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e067:	83 ec 0c             	sub    esp,0xc
c001e06a:	b3 01                	mov    bl,0x1
c001e06c:	68 0a af 02 c0       	push   0xc002af0a
c001e071:	e8 19 48 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e076:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	eb d0                	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e07e:	3c 6d                	cmp    al,0x6d
c001e080:	0f 84 af 03 00 00    	je     c001e435 <Vm::faultHandler(regs*)+0x494>
c001e086:	77 15                	ja     c001e09d <Vm::faultHandler(regs*)+0xfc>
c001e088:	3c 67                	cmp    al,0x67
c001e08a:	0f 84 bf 01 00 00    	je     c001e24f <Vm::faultHandler(regs*)+0x2ae>
c001e090:	3c 6c                	cmp    al,0x6c
c001e092:	0f 84 3f 03 00 00    	je     c001e3d7 <Vm::faultHandler(regs*)+0x436>
c001e098:	e9 d7 06 00 00       	jmp    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e09d:	3c 6f                	cmp    al,0x6f
c001e09f:	0f 84 a4 04 00 00    	je     c001e549 <Vm::faultHandler(regs*)+0x5a8>
c001e0a5:	0f 82 11 04 00 00    	jb     c001e4bc <Vm::faultHandler(regs*)+0x51b>
c001e0ab:	3c 9c                	cmp    al,0x9c
c001e0ad:	0f 84 ba 01 00 00    	je     c001e26d <Vm::faultHandler(regs*)+0x2cc>
c001e0b3:	e9 bc 06 00 00       	jmp    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e0b8:	3c ec                	cmp    al,0xec
c001e0ba:	0f 84 24 06 00 00    	je     c001e6e4 <Vm::faultHandler(regs*)+0x743>
c001e0c0:	0f 87 93 00 00 00    	ja     c001e159 <Vm::faultHandler(regs*)+0x1b8>
c001e0c6:	3c e4                	cmp    al,0xe4
c001e0c8:	0f 84 5c 05 00 00    	je     c001e62a <Vm::faultHandler(regs*)+0x689>
c001e0ce:	77 6a                	ja     c001e13a <Vm::faultHandler(regs*)+0x199>
c001e0d0:	3c cd                	cmp    al,0xcd
c001e0d2:	0f 84 7e 02 00 00    	je     c001e356 <Vm::faultHandler(regs*)+0x3b5>
c001e0d8:	3c cf                	cmp    al,0xcf
c001e0da:	0f 85 94 06 00 00    	jne    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e0e0:	83 ec 0c             	sub    esp,0xc
c001e0e3:	68 4e af 02 c0       	push   0xc002af4e
c001e0e8:	e8 a2 47 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e0ed:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e0f0:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e0f3:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e0f7:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e0fa:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e0fe:	0d 00 02 02 00       	or     eax,0x20200
c001e103:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e106:	56                   	push   esi
c001e107:	53                   	push   ebx
c001e108:	52                   	push   edx
c001e109:	68 54 af 02 c0       	push   0xc002af54
c001e10e:	e8 7c 47 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e113:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e117:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e11d:	66 c1 e8 09          	shr    ax,0x9
c001e121:	83 e0 01             	and    eax,0x1
c001e124:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e127:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e12a:	83 c0 06             	add    eax,0x6
c001e12d:	25 ff ff 00 00       	and    eax,0xffff
c001e132:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e135:	e9 95 02 00 00       	jmp    c001e3cf <Vm::faultHandler(regs*)+0x42e>
c001e13a:	3c e6                	cmp    al,0xe6
c001e13c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e140:	0f 84 4e 05 00 00    	je     c001e694 <Vm::faultHandler(regs*)+0x6f3>
c001e146:	0f 82 0a 05 00 00    	jb     c001e656 <Vm::faultHandler(regs*)+0x6b5>
c001e14c:	3c e7                	cmp    al,0xe7
c001e14e:	0f 84 69 05 00 00    	je     c001e6bd <Vm::faultHandler(regs*)+0x71c>
c001e154:	e9 1b 06 00 00       	jmp    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e159:	3c ef                	cmp    al,0xef
c001e15b:	0f 84 e6 05 00 00    	je     c001e747 <Vm::faultHandler(regs*)+0x7a6>
c001e161:	77 37                	ja     c001e19a <Vm::faultHandler(regs*)+0x1f9>
c001e163:	3c ed                	cmp    al,0xed
c001e165:	0f 84 a3 05 00 00    	je     c001e70e <Vm::faultHandler(regs*)+0x76d>
c001e16b:	3c ee                	cmp    al,0xee
c001e16d:	0f 85 01 06 00 00    	jne    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e173:	52                   	push   edx
c001e174:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e177:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e17a:	68 ef af 02 c0       	push   0xc002afef
c001e17f:	e8 0b 47 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e184:	59                   	pop    ecx
c001e185:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e189:	5b                   	pop    ebx
c001e18a:	50                   	push   eax
c001e18b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e18f:	50                   	push   eax
c001e190:	e8 2a fa ff ff       	call   c001dbbf <Vm::outbv(unsigned short, unsigned char)>
c001e195:	e9 a5 05 00 00       	jmp    c001e73f <Vm::faultHandler(regs*)+0x79e>
c001e19a:	3c fa                	cmp    al,0xfa
c001e19c:	0f 84 f7 01 00 00    	je     c001e399 <Vm::faultHandler(regs*)+0x3f8>
c001e1a2:	3c fb                	cmp    al,0xfb
c001e1a4:	0f 84 0a 02 00 00    	je     c001e3b4 <Vm::faultHandler(regs*)+0x413>
c001e1aa:	3c f3                	cmp    al,0xf3
c001e1ac:	0f 85 c2 05 00 00    	jne    c001e774 <Vm::faultHandler(regs*)+0x7d3>
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	68 27 af 02 c0       	push   0xc002af27
c001e1ba:	e8 d0 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e1bf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e1c2:	83 c4 10             	add    esp,0x10
c001e1c5:	e9 84 fe ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	b3 02                	mov    bl,0x2
c001e1cf:	68 02 af 02 c0       	push   0xc002af02
c001e1d4:	e8 b6 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e1d9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	e9 6a fe ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e1e4:	83 ec 0c             	sub    esp,0xc
c001e1e7:	b3 03                	mov    bl,0x3
c001e1e9:	68 0e af 02 c0       	push   0xc002af0e
c001e1ee:	e8 9c 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e1f3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	e9 50 fe ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e1fe:	83 ec 0c             	sub    esp,0xc
c001e201:	b3 04                	mov    bl,0x4
c001e203:	68 12 af 02 c0       	push   0xc002af12
c001e208:	e8 82 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e20d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e210:	83 c4 10             	add    esp,0x10
c001e213:	e9 36 fe ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	b3 05                	mov    bl,0x5
c001e21d:	68 16 af 02 c0       	push   0xc002af16
c001e222:	e8 68 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e227:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e22a:	83 c4 10             	add    esp,0x10
c001e22d:	e9 1c fe ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e232:	83 ec 0c             	sub    esp,0xc
c001e235:	68 1a af 02 c0       	push   0xc002af1a
c001e23a:	e8 50 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e23f:	83 c4 10             	add    esp,0x10
c001e242:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e245:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e24a:	e9 ff fd ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e24f:	50                   	push   eax
c001e250:	50                   	push   eax
c001e251:	6a 01                	push   0x1
c001e253:	68 1f af 02 c0       	push   0xc002af1f
c001e258:	e8 32 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e263:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e268:	e9 e1 fd ff ff       	jmp    c001e04e <Vm::faultHandler(regs*)+0xad>
c001e26d:	83 ec 0c             	sub    esp,0xc
c001e270:	68 2d af 02 c0       	push   0xc002af2d
c001e275:	e8 15 46 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e27a:	83 c4 10             	add    esp,0x10
c001e27d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e280:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e285:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e288:	74 2f                	je     c001e2b9 <Vm::faultHandler(regs*)+0x318>
c001e28a:	83 ea 04             	sub    edx,0x4
c001e28d:	25 ff 0d 00 00       	and    eax,0xdff
c001e292:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e298:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e29b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e29e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2a4:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e2a8:	0f 84 bf 04 00 00    	je     c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e2ae:	80 cc 02             	or     ah,0x2
c001e2b1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e2b4:	e9 b4 04 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e2b9:	83 ea 02             	sub    edx,0x2
c001e2bc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e2c2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e2c5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e2c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2cf:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e2d3:	74 05                	je     c001e2da <Vm::faultHandler(regs*)+0x339>
c001e2d5:	80 cc 02             	or     ah,0x2
c001e2d8:	eb 03                	jmp    c001e2dd <Vm::faultHandler(regs*)+0x33c>
c001e2da:	80 e4 fd             	and    ah,0xfd
c001e2dd:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e2e1:	e9 87 04 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	68 34 af 02 c0       	push   0xc002af34
c001e2ee:	e8 9c 45 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e2f3:	83 c4 10             	add    esp,0x10
c001e2f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e2fb:	74 28                	je     c001e325 <Vm::faultHandler(regs*)+0x384>
c001e2fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001e2ff:	25 ff 0d 00 00       	and    eax,0xdff
c001e304:	0d 00 02 02 00       	or     eax,0x20200
c001e309:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e30c:	8b 06                	mov    eax,DWORD PTR [esi]
c001e30e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e314:	c1 e8 09             	shr    eax,0x9
c001e317:	83 e0 01             	and    eax,0x1
c001e31a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e31d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e320:	83 c0 04             	add    eax,0x4
c001e323:	eb 24                	jmp    c001e349 <Vm::faultHandler(regs*)+0x3a8>
c001e325:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e328:	0d 00 02 02 00       	or     eax,0x20200
c001e32d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e330:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e333:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e339:	66 c1 e8 09          	shr    ax,0x9
c001e33d:	83 e0 01             	and    eax,0x1
c001e340:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e343:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e346:	83 c0 02             	add    eax,0x2
c001e349:	25 ff ff 00 00       	and    eax,0xffff
c001e34e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e351:	e9 17 04 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e356:	53                   	push   ebx
c001e357:	53                   	push   ebx
c001e358:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e35c:	50                   	push   eax
c001e35d:	68 3a af 02 c0       	push   0xc002af3a
c001e362:	e8 28 45 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e367:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e36b:	83 c4 10             	add    esp,0x10
c001e36e:	3c ee                	cmp    al,0xee
c001e370:	75 10                	jne    c001e382 <Vm::faultHandler(regs*)+0x3e1>
c001e372:	83 ec 0c             	sub    esp,0xc
c001e375:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e378:	e8 fa f8 ff ff       	call   c001dc77 <Vm::mainloop3(unsigned long)>
c001e37d:	e9 c0 03 00 00       	jmp    c001e742 <Vm::faultHandler(regs*)+0x7a1>
c001e382:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e386:	83 ec 0c             	sub    esp,0xc
c001e389:	53                   	push   ebx
c001e38a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e38e:	53                   	push   ebx
c001e38f:	55                   	push   ebp
c001e390:	50                   	push   eax
c001e391:	57                   	push   edi
c001e392:	e8 0c fb ff ff       	call   c001dea3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e397:	eb 36                	jmp    c001e3cf <Vm::faultHandler(regs*)+0x42e>
c001e399:	83 ec 0c             	sub    esp,0xc
c001e39c:	68 44 af 02 c0       	push   0xc002af44
c001e3a1:	e8 e9 44 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e3a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ab:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e3af:	e9 8b 03 00 00       	jmp    c001e73f <Vm::faultHandler(regs*)+0x79e>
c001e3b4:	83 ec 0c             	sub    esp,0xc
c001e3b7:	68 49 af 02 c0       	push   0xc002af49
c001e3bc:	e8 ce 44 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e3c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3c6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e3ca:	e9 70 03 00 00       	jmp    c001e73f <Vm::faultHandler(regs*)+0x79e>
c001e3cf:	83 c4 20             	add    esp,0x20
c001e3d2:	e9 99 03 00 00       	jmp    c001e770 <Vm::faultHandler(regs*)+0x7cf>
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	68 87 af 02 c0       	push   0xc002af87
c001e3df:	e8 ab 44 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e3ea:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e3ef:	74 0d                	je     c001e3fe <Vm::faultHandler(regs*)+0x45d>
c001e3f1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e3f8:	0f 87 9e 01 00 00    	ja     c001e59c <Vm::faultHandler(regs*)+0x5fb>
c001e3fe:	83 ec 0c             	sub    esp,0xc
c001e401:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e405:	0f b7 db             	movzx  ebx,bx
c001e408:	50                   	push   eax
c001e409:	e8 9e f7 ff ff       	call   c001dbac <Vm::inbv(unsigned short)>
c001e40e:	83 c4 0c             	add    esp,0xc
c001e411:	0f b6 c0             	movzx  eax,al
c001e414:	50                   	push   eax
c001e415:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e419:	50                   	push   eax
c001e41a:	53                   	push   ebx
c001e41b:	e8 41 fb ff ff       	call   c001df61 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e426:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e42a:	74 03                	je     c001e42f <Vm::faultHandler(regs*)+0x48e>
c001e42c:	48                   	dec    eax
c001e42d:	eb 01                	jmp    c001e430 <Vm::faultHandler(regs*)+0x48f>
c001e42f:	40                   	inc    eax
c001e430:	0f b7 c0             	movzx  eax,ax
c001e433:	eb 7f                	jmp    c001e4b4 <Vm::faultHandler(regs*)+0x513>
c001e435:	83 ec 0c             	sub    esp,0xc
c001e438:	68 b9 af 02 c0       	push   0xc002afb9
c001e43d:	e8 4d 44 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e442:	83 c4 10             	add    esp,0x10
c001e445:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e448:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e44d:	74 0d                	je     c001e45c <Vm::faultHandler(regs*)+0x4bb>
c001e44f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e456:	0f 87 40 01 00 00    	ja     c001e59c <Vm::faultHandler(regs*)+0x5fb>
c001e45c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e45f:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e463:	0f b7 db             	movzx  ebx,bx
c001e466:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e46b:	74 20                	je     c001e48d <Vm::faultHandler(regs*)+0x4ec>
c001e46d:	ed                   	in     eax,dx
c001e46e:	51                   	push   ecx
c001e46f:	50                   	push   eax
c001e470:	56                   	push   esi
c001e471:	53                   	push   ebx
c001e472:	e8 15 fb ff ff       	call   c001df8c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e477:	83 c4 10             	add    esp,0x10
c001e47a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e47d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e481:	74 05                	je     c001e488 <Vm::faultHandler(regs*)+0x4e7>
c001e483:	83 e8 04             	sub    eax,0x4
c001e486:	eb 27                	jmp    c001e4af <Vm::faultHandler(regs*)+0x50e>
c001e488:	83 c0 04             	add    eax,0x4
c001e48b:	eb 22                	jmp    c001e4af <Vm::faultHandler(regs*)+0x50e>
c001e48d:	66 ed                	in     ax,dx
c001e48f:	0f b7 c0             	movzx  eax,ax
c001e492:	52                   	push   edx
c001e493:	50                   	push   eax
c001e494:	56                   	push   esi
c001e495:	53                   	push   ebx
c001e496:	e8 db fa ff ff       	call   c001df76 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e4a1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e4a5:	74 05                	je     c001e4ac <Vm::faultHandler(regs*)+0x50b>
c001e4a7:	83 e8 02             	sub    eax,0x2
c001e4aa:	eb 03                	jmp    c001e4af <Vm::faultHandler(regs*)+0x50e>
c001e4ac:	83 c0 02             	add    eax,0x2
c001e4af:	25 ff ff 00 00       	and    eax,0xffff
c001e4b4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e4b7:	e9 b1 02 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e4bc:	83 ec 0c             	sub    esp,0xc
c001e4bf:	4b                   	dec    ebx
c001e4c0:	68 bf af 02 c0       	push   0xc002afbf
c001e4c5:	e8 c5 43 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	80 fb 05             	cmp    bl,0x5
c001e4d0:	77 0a                	ja     c001e4dc <Vm::faultHandler(regs*)+0x53b>
c001e4d2:	0f b6 db             	movzx  ebx,bl
c001e4d5:	ff 24 9d 30 b0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4fd0]
c001e4dc:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e4e0:	eb 1b                	jmp    c001e4fd <Vm::faultHandler(regs*)+0x55c>
c001e4e2:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e4e6:	eb 15                	jmp    c001e4fd <Vm::faultHandler(regs*)+0x55c>
c001e4e8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e4ec:	eb 0f                	jmp    c001e4fd <Vm::faultHandler(regs*)+0x55c>
c001e4ee:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e4f2:	eb 09                	jmp    c001e4fd <Vm::faultHandler(regs*)+0x55c>
c001e4f4:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e4f7:	eb 04                	jmp    c001e4fd <Vm::faultHandler(regs*)+0x55c>
c001e4f9:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e4fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e502:	74 0d                	je     c001e511 <Vm::faultHandler(regs*)+0x570>
c001e504:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e50b:	0f 87 8b 00 00 00    	ja     c001e59c <Vm::faultHandler(regs*)+0x5fb>
c001e511:	53                   	push   ebx
c001e512:	53                   	push   ebx
c001e513:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e517:	52                   	push   edx
c001e518:	50                   	push   eax
c001e519:	e8 0f fa ff ff       	call   c001df2d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e51e:	5e                   	pop    esi
c001e51f:	0f b6 c0             	movzx  eax,al
c001e522:	5d                   	pop    ebp
c001e523:	50                   	push   eax
c001e524:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e528:	50                   	push   eax
c001e529:	e8 91 f6 ff ff       	call   c001dbbf <Vm::outbv(unsigned short, unsigned char)>
c001e52e:	83 c4 10             	add    esp,0x10
c001e531:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e534:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e538:	74 03                	je     c001e53d <Vm::faultHandler(regs*)+0x59c>
c001e53a:	48                   	dec    eax
c001e53b:	eb 01                	jmp    c001e53e <Vm::faultHandler(regs*)+0x59d>
c001e53d:	40                   	inc    eax
c001e53e:	0f b7 c0             	movzx  eax,ax
c001e541:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e544:	e9 24 02 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e549:	83 ec 0c             	sub    esp,0xc
c001e54c:	4b                   	dec    ebx
c001e54d:	68 bf af 02 c0       	push   0xc002afbf
c001e552:	e8 38 43 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e557:	83 c4 10             	add    esp,0x10
c001e55a:	80 fb 05             	cmp    bl,0x5
c001e55d:	77 0a                	ja     c001e569 <Vm::faultHandler(regs*)+0x5c8>
c001e55f:	0f b6 db             	movzx  ebx,bl
c001e562:	ff 24 9d 48 b0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4fb8]
c001e569:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e56d:	eb 1b                	jmp    c001e58a <Vm::faultHandler(regs*)+0x5e9>
c001e56f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e573:	eb 15                	jmp    c001e58a <Vm::faultHandler(regs*)+0x5e9>
c001e575:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e579:	eb 0f                	jmp    c001e58a <Vm::faultHandler(regs*)+0x5e9>
c001e57b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e57f:	eb 09                	jmp    c001e58a <Vm::faultHandler(regs*)+0x5e9>
c001e581:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e584:	eb 04                	jmp    c001e58a <Vm::faultHandler(regs*)+0x5e9>
c001e586:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e58a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e58d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e592:	74 39                	je     c001e5cd <Vm::faultHandler(regs*)+0x62c>
c001e594:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e59a:	76 31                	jbe    c001e5cd <Vm::faultHandler(regs*)+0x62c>
c001e59c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e5a0:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e5a4:	51                   	push   ecx
c001e5a5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e5a9:	51                   	push   ecx
c001e5aa:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e5ae:	51                   	push   ecx
c001e5af:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e5b3:	51                   	push   ecx
c001e5b4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e5b8:	52                   	push   edx
c001e5b9:	50                   	push   eax
c001e5ba:	50                   	push   eax
c001e5bb:	68 8c af 02 c0       	push   0xc002af8c
c001e5c0:	e8 ca 42 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e5c5:	83 c4 20             	add    esp,0x20
c001e5c8:	e9 fb 01 00 00       	jmp    c001e7c8 <Vm::faultHandler(regs*)+0x827>
c001e5cd:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e5d0:	0f b7 d3             	movzx  edx,bx
c001e5d3:	81 e6 00 04 00 00    	and    esi,0x400
c001e5d9:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e5dc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e5e1:	74 1d                	je     c001e600 <Vm::faultHandler(regs*)+0x65f>
c001e5e3:	51                   	push   ecx
c001e5e4:	51                   	push   ecx
c001e5e5:	52                   	push   edx
c001e5e6:	50                   	push   eax
c001e5e7:	e8 64 f9 ff ff       	call   c001df50 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e5ec:	83 c4 10             	add    esp,0x10
c001e5ef:	89 ea                	mov    edx,ebp
c001e5f1:	ef                   	out    dx,eax
c001e5f2:	85 f6                	test   esi,esi
c001e5f4:	74 05                	je     c001e5fb <Vm::faultHandler(regs*)+0x65a>
c001e5f6:	83 eb 04             	sub    ebx,0x4
c001e5f9:	eb 21                	jmp    c001e61c <Vm::faultHandler(regs*)+0x67b>
c001e5fb:	83 c3 04             	add    ebx,0x4
c001e5fe:	eb 1c                	jmp    c001e61c <Vm::faultHandler(regs*)+0x67b>
c001e600:	51                   	push   ecx
c001e601:	51                   	push   ecx
c001e602:	52                   	push   edx
c001e603:	50                   	push   eax
c001e604:	e8 35 f9 ff ff       	call   c001df3e <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e609:	83 c4 10             	add    esp,0x10
c001e60c:	89 ea                	mov    edx,ebp
c001e60e:	66 ef                	out    dx,ax
c001e610:	85 f6                	test   esi,esi
c001e612:	74 05                	je     c001e619 <Vm::faultHandler(regs*)+0x678>
c001e614:	83 eb 02             	sub    ebx,0x2
c001e617:	eb 03                	jmp    c001e61c <Vm::faultHandler(regs*)+0x67b>
c001e619:	83 c3 02             	add    ebx,0x2
c001e61c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e622:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e625:	e9 43 01 00 00       	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e62a:	53                   	push   ebx
c001e62b:	53                   	push   ebx
c001e62c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e630:	50                   	push   eax
c001e631:	68 c5 af 02 c0       	push   0xc002afc5
c001e636:	e8 54 42 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e63b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e642:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e646:	89 04 24             	mov    DWORD PTR [esp],eax
c001e649:	e8 5e f5 ff ff       	call   c001dbac <Vm::inbv(unsigned short)>
c001e64e:	0f b6 c0             	movzx  eax,al
c001e651:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e654:	eb 5e                	jmp    c001e6b4 <Vm::faultHandler(regs*)+0x713>
c001e656:	51                   	push   ecx
c001e657:	51                   	push   ecx
c001e658:	53                   	push   ebx
c001e659:	68 cb af 02 c0       	push   0xc002afcb
c001e65e:	e8 2c 42 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e663:	83 c4 10             	add    esp,0x10
c001e666:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e66b:	74 07                	je     c001e674 <Vm::faultHandler(regs*)+0x6d3>
c001e66d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e671:	ed                   	in     eax,dx
c001e672:	eb 14                	jmp    c001e688 <Vm::faultHandler(regs*)+0x6e7>
c001e674:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e677:	66 31 db             	xor    bx,bx
c001e67a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e67d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e681:	66 ed                	in     ax,dx
c001e683:	0f b7 c0             	movzx  eax,ax
c001e686:	09 d8                	or     eax,ebx
c001e688:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e68b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e68f:	e9 dc 00 00 00       	jmp    c001e770 <Vm::faultHandler(regs*)+0x7cf>
c001e694:	50                   	push   eax
c001e695:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e698:	53                   	push   ebx
c001e699:	68 d1 af 02 c0       	push   0xc002afd1
c001e69e:	e8 ec 41 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e6a3:	58                   	pop    eax
c001e6a4:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e6a8:	5a                   	pop    edx
c001e6a9:	50                   	push   eax
c001e6aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e6ae:	50                   	push   eax
c001e6af:	e8 0b f5 ff ff       	call   c001dbbf <Vm::outbv(unsigned short, unsigned char)>
c001e6b4:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e6b8:	e9 85 00 00 00       	jmp    c001e742 <Vm::faultHandler(regs*)+0x7a1>
c001e6bd:	50                   	push   eax
c001e6be:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e6c1:	53                   	push   ebx
c001e6c2:	68 da af 02 c0       	push   0xc002afda
c001e6c7:	e8 c3 41 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e6cc:	83 c4 10             	add    esp,0x10
c001e6cf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e6d3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6d8:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e6db:	74 03                	je     c001e6e0 <Vm::faultHandler(regs*)+0x73f>
c001e6dd:	ef                   	out    dx,eax
c001e6de:	eb ab                	jmp    c001e68b <Vm::faultHandler(regs*)+0x6ea>
c001e6e0:	66 ef                	out    dx,ax
c001e6e2:	eb a7                	jmp    c001e68b <Vm::faultHandler(regs*)+0x6ea>
c001e6e4:	55                   	push   ebp
c001e6e5:	55                   	push   ebp
c001e6e6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e6e9:	68 e3 af 02 c0       	push   0xc002afe3
c001e6ee:	e8 9c 41 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e6f3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e6fa:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001e701:	e8 a6 f4 ff ff       	call   c001dbac <Vm::inbv(unsigned short)>
c001e706:	0f b6 c0             	movzx  eax,al
c001e709:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e70c:	eb 31                	jmp    c001e73f <Vm::faultHandler(regs*)+0x79e>
c001e70e:	56                   	push   esi
c001e70f:	56                   	push   esi
c001e710:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e713:	68 e9 af 02 c0       	push   0xc002afe9
c001e718:	e8 72 41 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e71d:	83 c4 10             	add    esp,0x10
c001e720:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e723:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e728:	74 03                	je     c001e72d <Vm::faultHandler(regs*)+0x78c>
c001e72a:	ed                   	in     eax,dx
c001e72b:	eb 0d                	jmp    c001e73a <Vm::faultHandler(regs*)+0x799>
c001e72d:	66 ed                	in     ax,dx
c001e72f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e732:	0f b7 c0             	movzx  eax,ax
c001e735:	66 31 d2             	xor    dx,dx
c001e738:	09 d0                	or     eax,edx
c001e73a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e73d:	eb 2e                	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e73f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e742:	83 c4 10             	add    esp,0x10
c001e745:	eb 29                	jmp    c001e770 <Vm::faultHandler(regs*)+0x7cf>
c001e747:	50                   	push   eax
c001e748:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e74b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e74e:	68 f8 af 02 c0       	push   0xc002aff8
c001e753:	e8 37 41 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e758:	83 c4 10             	add    esp,0x10
c001e75b:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e75e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e763:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e766:	74 03                	je     c001e76b <Vm::faultHandler(regs*)+0x7ca>
c001e768:	ef                   	out    dx,eax
c001e769:	eb 02                	jmp    c001e76d <Vm::faultHandler(regs*)+0x7cc>
c001e76b:	66 ef                	out    dx,ax
c001e76d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e770:	b0 01                	mov    al,0x1
c001e772:	eb 56                	jmp    c001e7ca <Vm::faultHandler(regs*)+0x829>
c001e774:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e778:	51                   	push   ecx
c001e779:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e77d:	51                   	push   ecx
c001e77e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e782:	51                   	push   ecx
c001e783:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e787:	51                   	push   ecx
c001e788:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e78c:	52                   	push   edx
c001e78d:	50                   	push   eax
c001e78e:	50                   	push   eax
c001e78f:	68 01 b0 02 c0       	push   0xc002b001
c001e794:	e8 f6 40 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001e799:	83 c4 20             	add    esp,0x20
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	6a 60                	push   0x60
c001e7a1:	e8 06 f4 ff ff       	call   c001dbac <Vm::inbv(unsigned short)>
c001e7a6:	83 c4 10             	add    esp,0x10
c001e7a9:	3c 1c                	cmp    al,0x1c
c001e7ab:	74 04                	je     c001e7b1 <Vm::faultHandler(regs*)+0x810>
c001e7ad:	3c 5a                	cmp    al,0x5a
c001e7af:	75 eb                	jne    c001e79c <Vm::faultHandler(regs*)+0x7fb>
c001e7b1:	3c 1c                	cmp    al,0x1c
c001e7b3:	74 04                	je     c001e7b9 <Vm::faultHandler(regs*)+0x818>
c001e7b5:	3c 5a                	cmp    al,0x5a
c001e7b7:	75 0f                	jne    c001e7c8 <Vm::faultHandler(regs*)+0x827>
c001e7b9:	83 ec 0c             	sub    esp,0xc
c001e7bc:	6a 60                	push   0x60
c001e7be:	e8 e9 f3 ff ff       	call   c001dbac <Vm::inbv(unsigned short)>
c001e7c3:	83 c4 10             	add    esp,0x10
c001e7c6:	eb e9                	jmp    c001e7b1 <Vm::faultHandler(regs*)+0x810>
c001e7c8:	31 c0                	xor    eax,eax
c001e7ca:	83 c4 1c             	add    esp,0x1c
c001e7cd:	5b                   	pop    ebx
c001e7ce:	5e                   	pop    esi
c001e7cf:	5f                   	pop    edi
c001e7d0:	5d                   	pop    ebp
c001e7d1:	c3                   	ret    

c001e7d2 <Vm::fpuInternalTo32(unsigned long long)>:
c001e7d2:	57                   	push   edi
c001e7d3:	56                   	push   esi
c001e7d4:	53                   	push   ebx
c001e7d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7dd:	89 d6                	mov    esi,edx
c001e7df:	89 d7                	mov    edi,edx
c001e7e1:	89 c1                	mov    ecx,eax
c001e7e3:	c1 ef 14             	shr    edi,0x14
c001e7e6:	89 d3                	mov    ebx,edx
c001e7e8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e7ee:	31 d2                	xor    edx,edx
c001e7f0:	89 f8                	mov    eax,edi
c001e7f2:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e7f8:	bf ff 00 00 00       	mov    edi,0xff
c001e7fd:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e802:	83 d2 ff             	adc    edx,0xffffffff
c001e805:	39 c7                	cmp    edi,eax
c001e807:	bf 00 00 00 00       	mov    edi,0x0
c001e80c:	19 d7                	sbb    edi,edx
c001e80e:	72 15                	jb     c001e825 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e810:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e814:	c1 e0 17             	shl    eax,0x17
c001e817:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e81d:	09 f1                	or     ecx,esi
c001e81f:	09 c1                	or     ecx,eax
c001e821:	89 cf                	mov    edi,ecx
c001e823:	eb 02                	jmp    c001e827 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e825:	31 ff                	xor    edi,edi
c001e827:	89 f8                	mov    eax,edi
c001e829:	5b                   	pop    ebx
c001e82a:	5e                   	pop    esi
c001e82b:	5f                   	pop    edi
c001e82c:	c3                   	ret    

c001e82d <Vm::fpuInternalTo64(unsigned long long)>:
c001e82d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e831:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e835:	c3                   	ret    

c001e836 <Vm::fpu32ToInternal(unsigned int)>:
c001e836:	57                   	push   edi
c001e837:	31 ff                	xor    edi,edi
c001e839:	56                   	push   esi
c001e83a:	53                   	push   ebx
c001e83b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e83f:	89 cb                	mov    ebx,ecx
c001e841:	89 ce                	mov    esi,ecx
c001e843:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e849:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e84f:	c1 e9 17             	shr    ecx,0x17
c001e852:	89 f0                	mov    eax,esi
c001e854:	0f b6 d1             	movzx  edx,cl
c001e857:	81 c2 80 03 00 00    	add    edx,0x380
c001e85d:	89 d1                	mov    ecx,edx
c001e85f:	89 fa                	mov    edx,edi
c001e861:	c1 e1 14             	shl    ecx,0x14
c001e864:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e868:	c1 e0 1d             	shl    eax,0x1d
c001e86b:	89 d7                	mov    edi,edx
c001e86d:	89 c6                	mov    esi,eax
c001e86f:	89 ca                	mov    edx,ecx
c001e871:	89 f0                	mov    eax,esi
c001e873:	09 fa                	or     edx,edi
c001e875:	09 da                	or     edx,ebx
c001e877:	5b                   	pop    ebx
c001e878:	5e                   	pop    esi
c001e879:	5f                   	pop    edi
c001e87a:	c3                   	ret    

c001e87b <Vm::fpu64ToInternal(unsigned long long)>:
c001e87b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e883:	c3                   	ret    

c001e884 <Vm::fpuFloatToLong(unsigned long long)>:
c001e884:	57                   	push   edi
c001e885:	31 c0                	xor    eax,eax
c001e887:	56                   	push   esi
c001e888:	31 d2                	xor    edx,edx
c001e88a:	53                   	push   ebx
c001e88b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e88f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e893:	89 d9                	mov    ecx,ebx
c001e895:	c1 e9 14             	shr    ecx,0x14
c001e898:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e89e:	89 cf                	mov    edi,ecx
c001e8a0:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e8a6:	78 33                	js     c001e8db <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e8a8:	89 d9                	mov    ecx,ebx
c001e8aa:	89 f0                	mov    eax,esi
c001e8ac:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e8b2:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e8b8:	89 ca                	mov    edx,ecx
c001e8ba:	b9 34 00 00 00       	mov    ecx,0x34
c001e8bf:	29 f9                	sub    ecx,edi
c001e8c1:	0f ad d0             	shrd   eax,edx,cl
c001e8c4:	d3 fa                	sar    edx,cl
c001e8c6:	f6 c1 20             	test   cl,0x20
c001e8c9:	74 05                	je     c001e8d0 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e8cb:	89 d0                	mov    eax,edx
c001e8cd:	c1 fa 1f             	sar    edx,0x1f
c001e8d0:	85 db                	test   ebx,ebx
c001e8d2:	79 07                	jns    c001e8db <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e8d4:	f7 d8                	neg    eax
c001e8d6:	83 d2 00             	adc    edx,0x0
c001e8d9:	f7 da                	neg    edx
c001e8db:	5b                   	pop    ebx
c001e8dc:	5e                   	pop    esi
c001e8dd:	5f                   	pop    edi
c001e8de:	c3                   	ret    

c001e8df <Vm::fpuULongToFloat(unsigned long long)>:
c001e8df:	57                   	push   edi
c001e8e0:	31 c9                	xor    ecx,ecx
c001e8e2:	56                   	push   esi
c001e8e3:	53                   	push   ebx
c001e8e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e8ec:	0f ba e7 14          	bt     edi,0x14
c001e8f0:	72 07                	jb     c001e8f9 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e8f2:	01 f6                	add    esi,esi
c001e8f4:	11 ff                	adc    edi,edi
c001e8f6:	41                   	inc    ecx
c001e8f7:	eb f3                	jmp    c001e8ec <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e8f9:	89 fa                	mov    edx,edi
c001e8fb:	89 f0                	mov    eax,esi
c001e8fd:	bb 33 04 00 00       	mov    ebx,0x433
c001e902:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e908:	29 cb                	sub    ebx,ecx
c001e90a:	89 d9                	mov    ecx,ebx
c001e90c:	5b                   	pop    ebx
c001e90d:	c1 e1 14             	shl    ecx,0x14
c001e910:	5e                   	pop    esi
c001e911:	09 ca                	or     edx,ecx
c001e913:	5f                   	pop    edi
c001e914:	c3                   	ret    

c001e915 <Vm::fpuLongToFloat(long long)>:
c001e915:	56                   	push   esi
c001e916:	31 c0                	xor    eax,eax
c001e918:	53                   	push   ebx
c001e919:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e91d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e921:	39 c8                	cmp    eax,ecx
c001e923:	19 d8                	sbb    eax,ebx
c001e925:	7d 04                	jge    c001e92b <Vm::fpuLongToFloat(long long)+0x16>
c001e927:	31 f6                	xor    esi,esi
c001e929:	eb 0c                	jmp    c001e937 <Vm::fpuLongToFloat(long long)+0x22>
c001e92b:	f7 d9                	neg    ecx
c001e92d:	be 01 00 00 00       	mov    esi,0x1
c001e932:	83 d3 00             	adc    ebx,0x0
c001e935:	f7 db                	neg    ebx
c001e937:	31 c0                	xor    eax,eax
c001e939:	0f ba e3 14          	bt     ebx,0x14
c001e93d:	72 07                	jb     c001e946 <Vm::fpuLongToFloat(long long)+0x31>
c001e93f:	01 c9                	add    ecx,ecx
c001e941:	11 db                	adc    ebx,ebx
c001e943:	40                   	inc    eax
c001e944:	eb f3                	jmp    c001e939 <Vm::fpuLongToFloat(long long)+0x24>
c001e946:	ba 33 04 00 00       	mov    edx,0x433
c001e94b:	29 c2                	sub    edx,eax
c001e94d:	89 c8                	mov    eax,ecx
c001e94f:	c1 e2 14             	shl    edx,0x14
c001e952:	89 d9                	mov    ecx,ebx
c001e954:	89 f3                	mov    ebx,esi
c001e956:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e95c:	09 ca                	or     edx,ecx
c001e95e:	84 db                	test   bl,bl
c001e960:	74 06                	je     c001e968 <Vm::fpuLongToFloat(long long)+0x53>
c001e962:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e968:	5b                   	pop    ebx
c001e969:	5e                   	pop    esi
c001e96a:	c3                   	ret    

c001e96b <Vm::fpuGet0()>:
c001e96b:	31 c0                	xor    eax,eax
c001e96d:	31 d2                	xor    edx,edx
c001e96f:	c3                   	ret    

c001e970 <Vm::fpuGet1()>:
c001e970:	b8 01 00 00 00       	mov    eax,0x1
c001e975:	31 d2                	xor    edx,edx
c001e977:	c3                   	ret    

c001e978 <Vm::fpuGetPi()>:
c001e978:	b8 03 00 00 00       	mov    eax,0x3
c001e97d:	31 d2                	xor    edx,edx
c001e97f:	c3                   	ret    

c001e980 <Vm::fpuGetLog2E()>:
c001e980:	83 ec 18             	sub    esp,0x18
c001e983:	68 60 b0 02 c0       	push   0xc002b060
c001e988:	e8 54 b0 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001e98d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e992:	31 d2                	xor    edx,edx
c001e994:	83 c4 1c             	add    esp,0x1c
c001e997:	c3                   	ret    

c001e998 <Vm::fpuGetLogE2()>:
c001e998:	83 ec 18             	sub    esp,0x18
c001e99b:	68 6c b0 02 c0       	push   0xc002b06c
c001e9a0:	e8 3c b0 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001e9a5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e9aa:	31 d2                	xor    edx,edx
c001e9ac:	83 c4 1c             	add    esp,0x1c
c001e9af:	c3                   	ret    

c001e9b0 <Vm::fpuGetLog210()>:
c001e9b0:	83 ec 18             	sub    esp,0x18
c001e9b3:	68 78 b0 02 c0       	push   0xc002b078
c001e9b8:	e8 24 b0 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001e9bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e9c2:	31 d2                	xor    edx,edx
c001e9c4:	83 c4 1c             	add    esp,0x1c
c001e9c7:	c3                   	ret    

c001e9c8 <Vm::fpuGetLog102()>:
c001e9c8:	83 ec 18             	sub    esp,0x18
c001e9cb:	68 85 b0 02 c0       	push   0xc002b085
c001e9d0:	e8 0c b0 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001e9d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e9da:	31 d2                	xor    edx,edx
c001e9dc:	83 c4 1c             	add    esp,0x1c
c001e9df:	c3                   	ret    

c001e9e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9e4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ec:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e9f0:	0f 92 c0             	setb   al
c001e9f3:	c3                   	ret    

c001e9f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e9f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ea00:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ea04:	09 c2                	or     edx,eax
c001ea06:	0f 94 c0             	sete   al
c001ea09:	c3                   	ret    

c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ea0a:	57                   	push   edi
c001ea0b:	56                   	push   esi
c001ea0c:	53                   	push   ebx
c001ea0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea15:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ea19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ea1d:	57                   	push   edi
c001ea1e:	56                   	push   esi
c001ea1f:	53                   	push   ebx
c001ea20:	51                   	push   ecx
c001ea21:	e8 ce ff ff ff       	call   c001e9f4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ea26:	83 c4 10             	add    esp,0x10
c001ea29:	88 c2                	mov    dl,al
c001ea2b:	31 c0                	xor    eax,eax
c001ea2d:	84 d2                	test   dl,dl
c001ea2f:	75 0c                	jne    c001ea3d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ea31:	57                   	push   edi
c001ea32:	56                   	push   esi
c001ea33:	53                   	push   ebx
c001ea34:	51                   	push   ecx
c001ea35:	e8 a6 ff ff ff       	call   c001e9e0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ea3a:	83 c4 10             	add    esp,0x10
c001ea3d:	83 e0 01             	and    eax,0x1
c001ea40:	5b                   	pop    ebx
c001ea41:	88 c1                	mov    cl,al
c001ea43:	83 e2 01             	and    edx,0x1
c001ea46:	a0 81 e2 02 c0       	mov    al,ds:0xc002e281
c001ea4b:	c1 e2 06             	shl    edx,0x6
c001ea4e:	83 e0 ba             	and    eax,0xffffffba
c001ea51:	5e                   	pop    esi
c001ea52:	09 c8                	or     eax,ecx
c001ea54:	5f                   	pop    edi
c001ea55:	09 d0                	or     eax,edx
c001ea57:	a2 81 e2 02 c0       	mov    ds:0xc002e281,al
c001ea5c:	c3                   	ret    

c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ea5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea65:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ea69:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ea6d:	c3                   	ret    

c001ea6e <Vm::fpuAbs(unsigned long long)>:
c001ea6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ea76:	c3                   	ret    

c001ea77 <Vm::fpuChs(unsigned long long)>:
c001ea77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea7b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ea7f:	f7 d8                	neg    eax
c001ea81:	83 d2 00             	adc    edx,0x0
c001ea84:	f7 da                	neg    edx
c001ea86:	c3                   	ret    

c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ea87:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ea8b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ea90:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ea94:	eb c7                	jmp    c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ea96:	53                   	push   ebx
c001ea97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaa3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eaa7:	0f af ca             	imul   ecx,edx
c001eaaa:	0f af d8             	imul   ebx,eax
c001eaad:	f7 e2                	mul    edx
c001eaaf:	01 d9                	add    ecx,ebx
c001eab1:	5b                   	pop    ebx
c001eab2:	01 ca                	add    edx,ecx
c001eab4:	c3                   	ret    

c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001eab5:	83 ec 0c             	sub    esp,0xc
c001eab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac8:	e8 2f 6b 00 00       	call   c00255fc <__udivdi3>
c001eacd:	83 c4 1c             	add    esp,0x1c
c001ead0:	c3                   	ret    

c001ead1 <Vm::fpuSquare(unsigned long long)>:
c001ead1:	50                   	push   eax
c001ead2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ead6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eada:	52                   	push   edx
c001eadb:	50                   	push   eax
c001eadc:	52                   	push   edx
c001eadd:	50                   	push   eax
c001eade:	e8 b3 ff ff ff       	call   c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001eae3:	83 c4 14             	add    esp,0x14
c001eae6:	c3                   	ret    

c001eae7 <Vm::fpuGetReg(int)>:
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001eaef:	76 10                	jbe    c001eb01 <Vm::fpuGetReg(int)+0x1a>
c001eaf1:	83 ec 0c             	sub    esp,0xc
c001eaf4:	68 92 b0 02 c0       	push   0xc002b092
c001eaf9:	e8 e3 ae ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001eafe:	83 c4 10             	add    esp,0x10
c001eb01:	a0 81 e2 02 c0       	mov    al,ds:0xc002e281
c001eb06:	b9 08 00 00 00       	mov    ecx,0x8
c001eb0b:	c0 e8 03             	shr    al,0x3
c001eb0e:	83 e0 07             	and    eax,0x7
c001eb11:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001eb15:	99                   	cdq    
c001eb16:	f7 f9                	idiv   ecx
c001eb18:	8b 04 d5 84 e2 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd1d7c]
c001eb1f:	8b 14 d5 88 e2 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1d78]
c001eb26:	83 c4 0c             	add    esp,0xc
c001eb29:	c3                   	ret    

c001eb2a <Vm::fpuSetReg(int, unsigned long long)>:
c001eb2a:	57                   	push   edi
c001eb2b:	56                   	push   esi
c001eb2c:	52                   	push   edx
c001eb2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001eb31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001eb35:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001eb3a:	76 10                	jbe    c001eb4c <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	68 a5 b0 02 c0       	push   0xc002b0a5
c001eb44:	e8 98 ae ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	a0 81 e2 02 c0       	mov    al,ds:0xc002e281
c001eb51:	b9 08 00 00 00       	mov    ecx,0x8
c001eb56:	c0 e8 03             	shr    al,0x3
c001eb59:	83 e0 07             	and    eax,0x7
c001eb5c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001eb60:	99                   	cdq    
c001eb61:	f7 f9                	idiv   ecx
c001eb63:	89 34 d5 84 e2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1d7c],esi
c001eb6a:	89 3c d5 88 e2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1d78],edi
c001eb71:	58                   	pop    eax
c001eb72:	5e                   	pop    esi
c001eb73:	5f                   	pop    edi
c001eb74:	c3                   	ret    

c001eb75 <Vm::fpuPush(unsigned long long)>:
c001eb75:	a0 81 e2 02 c0       	mov    al,ds:0xc002e281
c001eb7a:	c0 e8 03             	shr    al,0x3
c001eb7d:	83 e0 07             	and    eax,0x7
c001eb80:	83 c0 07             	add    eax,0x7
c001eb83:	88 c2                	mov    dl,al
c001eb85:	83 e0 07             	and    eax,0x7
c001eb88:	83 e2 07             	and    edx,0x7
c001eb8b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001eb92:	8a 15 81 e2 02 c0    	mov    dl,BYTE PTR ds:0xc002e281
c001eb98:	83 e2 c7             	and    edx,0xffffffc7
c001eb9b:	09 ca                	or     edx,ecx
c001eb9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eba1:	88 15 81 e2 02 c0    	mov    BYTE PTR ds:0xc002e281,dl
c001eba7:	89 0c c5 88 e2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1d78],ecx
c001ebae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ebb2:	89 14 c5 84 e2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1d7c],edx
c001ebb9:	a1 c4 e2 02 c0       	mov    eax,ds:0xc002e2c4
c001ebbe:	83 f8 08             	cmp    eax,0x8
c001ebc1:	75 08                	jne    c001ebcb <Vm::fpuPush(unsigned long long)+0x56>
c001ebc3:	80 0d 80 e2 02 c0 40 	or     BYTE PTR ds:0xc002e280,0x40
c001ebca:	c3                   	ret    
c001ebcb:	40                   	inc    eax
c001ebcc:	a3 c4 e2 02 c0       	mov    ds:0xc002e2c4,eax
c001ebd1:	c3                   	ret    

c001ebd2 <Vm::fpuPop()>:
c001ebd2:	8a 0d 81 e2 02 c0    	mov    cl,BYTE PTR ds:0xc002e281
c001ebd8:	53                   	push   ebx
c001ebd9:	c0 e9 03             	shr    cl,0x3
c001ebdc:	8a 1d 81 e2 02 c0    	mov    bl,BYTE PTR ds:0xc002e281
c001ebe2:	83 e1 07             	and    ecx,0x7
c001ebe5:	83 e3 c7             	and    ebx,0xffffffc7
c001ebe8:	8b 04 cd 84 e2 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd1d7c]
c001ebef:	8b 14 cd 88 e2 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1d78]
c001ebf6:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001ebfd:	83 e1 38             	and    ecx,0x38
c001ec00:	09 d9                	or     ecx,ebx
c001ec02:	88 0d 81 e2 02 c0    	mov    BYTE PTR ds:0xc002e281,cl
c001ec08:	8b 0d c4 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2c4
c001ec0e:	85 c9                	test   ecx,ecx
c001ec10:	74 09                	je     c001ec1b <Vm::fpuPop()+0x49>
c001ec12:	49                   	dec    ecx
c001ec13:	89 0d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ecx
c001ec19:	eb 07                	jmp    c001ec22 <Vm::fpuPop()+0x50>
c001ec1b:	80 0d 80 e2 02 c0 40 	or     BYTE PTR ds:0xc002e280,0x40
c001ec22:	5b                   	pop    ebx
c001ec23:	c3                   	ret    

c001ec24 <Vm::x87Handler(regs*)>:
c001ec24:	55                   	push   ebp
c001ec25:	57                   	push   edi
c001ec26:	56                   	push   esi
c001ec27:	53                   	push   ebx
c001ec28:	83 ec 1c             	sub    esp,0x1c
c001ec2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec2f:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ec34:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ec37:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ec3f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ec43:	50                   	push   eax
c001ec44:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ec48:	50                   	push   eax
c001ec49:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ec4d:	50                   	push   eax
c001ec4e:	53                   	push   ebx
c001ec4f:	e8 be a5 ff ff       	call   c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ec54:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	89 c6                	mov    esi,eax
c001ec5c:	80 fa d9             	cmp    dl,0xd9
c001ec5f:	0f 85 52 01 00 00    	jne    c001edb7 <Vm::x87Handler(regs*)+0x193>
c001ec65:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec69:	8d 50 20             	lea    edx,[eax+0x20]
c001ec6c:	80 fa 0e             	cmp    dl,0xe
c001ec6f:	0f 87 86 00 00 00    	ja     c001ecfb <Vm::x87Handler(regs*)+0xd7>
c001ec75:	0f b6 d2             	movzx  edx,dl
c001ec78:	ff 24 95 b8 b0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4f48]
c001ec7f:	e8 e7 fc ff ff       	call   c001e96b <Vm::fpuGet0()>
c001ec84:	eb 05                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001ec86:	e8 e5 fc ff ff       	call   c001e970 <Vm::fpuGet1()>
c001ec8b:	57                   	push   edi
c001ec8c:	57                   	push   edi
c001ec8d:	52                   	push   edx
c001ec8e:	50                   	push   eax
c001ec8f:	e8 e1 fe ff ff       	call   c001eb75 <Vm::fpuPush(unsigned long long)>
c001ec94:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	b0 01                	mov    al,0x1
c001ec9d:	e9 e3 09 00 00       	jmp    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	6a 00                	push   0x0
c001eca7:	e8 3b fe ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ecac:	59                   	pop    ecx
c001ecad:	5e                   	pop    esi
c001ecae:	52                   	push   edx
c001ecaf:	50                   	push   eax
c001ecb0:	e8 c2 fd ff ff       	call   c001ea77 <Vm::fpuChs(unsigned long long)>
c001ecb5:	eb 13                	jmp    c001ecca <Vm::x87Handler(regs*)+0xa6>
c001ecb7:	83 ec 0c             	sub    esp,0xc
c001ecba:	6a 00                	push   0x0
c001ecbc:	e8 26 fe ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ecc1:	5f                   	pop    edi
c001ecc2:	5d                   	pop    ebp
c001ecc3:	52                   	push   edx
c001ecc4:	50                   	push   eax
c001ecc5:	e8 a4 fd ff ff       	call   c001ea6e <Vm::fpuAbs(unsigned long long)>
c001ecca:	83 c4 0c             	add    esp,0xc
c001eccd:	52                   	push   edx
c001ecce:	50                   	push   eax
c001eccf:	6a 00                	push   0x0
c001ecd1:	e8 54 fe ff ff       	call   c001eb2a <Vm::fpuSetReg(int, unsigned long long)>
c001ecd6:	eb bc                	jmp    c001ec94 <Vm::x87Handler(regs*)+0x70>
c001ecd8:	e8 d3 fc ff ff       	call   c001e9b0 <Vm::fpuGetLog210()>
c001ecdd:	eb ac                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001ecdf:	e8 9c fc ff ff       	call   c001e980 <Vm::fpuGetLog2E()>
c001ece4:	eb a5                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001ece6:	e8 8d fc ff ff       	call   c001e978 <Vm::fpuGetPi()>
c001eceb:	eb 9e                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001eced:	e8 d6 fc ff ff       	call   c001e9c8 <Vm::fpuGetLog102()>
c001ecf2:	eb 97                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001ecf4:	e8 9f fc ff ff       	call   c001e998 <Vm::fpuGetLogE2()>
c001ecf9:	eb 90                	jmp    c001ec8b <Vm::x87Handler(regs*)+0x67>
c001ecfb:	8d 50 40             	lea    edx,[eax+0x40]
c001ecfe:	80 fa 07             	cmp    dl,0x7
c001ed01:	77 15                	ja     c001ed18 <Vm::x87Handler(regs*)+0xf4>
c001ed03:	83 ec 0c             	sub    esp,0xc
c001ed06:	2d c0 00 00 00       	sub    eax,0xc0
c001ed0b:	50                   	push   eax
c001ed0c:	e8 d6 fd ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ed11:	59                   	pop    ecx
c001ed12:	5e                   	pop    esi
c001ed13:	e9 75 ff ff ff       	jmp    c001ec8d <Vm::x87Handler(regs*)+0x69>
c001ed18:	8d 50 38             	lea    edx,[eax+0x38]
c001ed1b:	80 fa 07             	cmp    dl,0x7
c001ed1e:	77 3c                	ja     c001ed5c <Vm::x87Handler(regs*)+0x138>
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	2d c8 00 00 00       	sub    eax,0xc8
c001ed28:	50                   	push   eax
c001ed29:	e8 b9 fd ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ed2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed35:	89 c6                	mov    esi,eax
c001ed37:	89 d7                	mov    edi,edx
c001ed39:	e8 a9 fd ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ed3e:	83 c4 0c             	add    esp,0xc
c001ed41:	52                   	push   edx
c001ed42:	50                   	push   eax
c001ed43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed47:	2d c8 00 00 00       	sub    eax,0xc8
c001ed4c:	50                   	push   eax
c001ed4d:	e8 d8 fd ff ff       	call   c001eb2a <Vm::fpuSetReg(int, unsigned long long)>
c001ed52:	83 c4 0c             	add    esp,0xc
c001ed55:	57                   	push   edi
c001ed56:	56                   	push   esi
c001ed57:	e9 73 ff ff ff       	jmp    c001eccf <Vm::x87Handler(regs*)+0xab>
c001ed5c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ed60:	84 d2                	test   dl,dl
c001ed62:	75 0f                	jne    c001ed73 <Vm::x87Handler(regs*)+0x14f>
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	ff 36                	push   DWORD PTR [esi]
c001ed69:	e8 c8 fa ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001ed6e:	e9 bf 00 00 00       	jmp    c001ee32 <Vm::x87Handler(regs*)+0x20e>
c001ed73:	80 fa 03             	cmp    dl,0x3
c001ed76:	75 13                	jne    c001ed8b <Vm::x87Handler(regs*)+0x167>
c001ed78:	e8 55 fe ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001ed7d:	55                   	push   ebp
c001ed7e:	55                   	push   ebp
c001ed7f:	52                   	push   edx
c001ed80:	50                   	push   eax
c001ed81:	e8 4c fa ff ff       	call   c001e7d2 <Vm::fpuInternalTo32(unsigned long long)>
c001ed86:	e9 88 00 00 00       	jmp    c001ee13 <Vm::x87Handler(regs*)+0x1ef>
c001ed8b:	80 fa 05             	cmp    dl,0x5
c001ed8e:	75 0e                	jne    c001ed9e <Vm::x87Handler(regs*)+0x17a>
c001ed90:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ed93:	66 a3 82 e2 02 c0    	mov    ds:0xc002e282,ax
c001ed99:	e9 df 00 00 00       	jmp    c001ee7d <Vm::x87Handler(regs*)+0x259>
c001ed9e:	31 c0                	xor    eax,eax
c001eda0:	80 fa 07             	cmp    dl,0x7
c001eda3:	0f 85 dc 08 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001eda9:	66 a1 82 e2 02 c0    	mov    ax,ds:0xc002e282
c001edaf:	66 89 06             	mov    WORD PTR [esi],ax
c001edb2:	e9 c6 00 00 00       	jmp    c001ee7d <Vm::x87Handler(regs*)+0x259>
c001edb7:	80 fa d8             	cmp    dl,0xd8
c001edba:	0f 84 c9 00 00 00    	je     c001ee89 <Vm::x87Handler(regs*)+0x265>
c001edc0:	80 fa dc             	cmp    dl,0xdc
c001edc3:	0f 84 0d 02 00 00    	je     c001efd6 <Vm::x87Handler(regs*)+0x3b2>
c001edc9:	80 fa de             	cmp    dl,0xde
c001edcc:	0f 84 cd 02 00 00    	je     c001f09f <Vm::x87Handler(regs*)+0x47b>
c001edd2:	80 fa dd             	cmp    dl,0xdd
c001edd5:	0f 84 5f 04 00 00    	je     c001f23a <Vm::x87Handler(regs*)+0x616>
c001eddb:	80 fa da             	cmp    dl,0xda
c001edde:	0f 84 24 05 00 00    	je     c001f308 <Vm::x87Handler(regs*)+0x6e4>
c001ede4:	80 fa df             	cmp    dl,0xdf
c001ede7:	0f 84 68 05 00 00    	je     c001f355 <Vm::x87Handler(regs*)+0x731>
c001eded:	31 c0                	xor    eax,eax
c001edef:	80 fa db             	cmp    dl,0xdb
c001edf2:	0f 85 8d 08 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001edf8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001edfc:	80 fa 03             	cmp    dl,0x3
c001edff:	0f 85 70 06 00 00    	jne    c001f475 <Vm::x87Handler(regs*)+0x851>
c001ee05:	e8 c8 fd ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001ee0a:	55                   	push   ebp
c001ee0b:	55                   	push   ebp
c001ee0c:	52                   	push   edx
c001ee0d:	50                   	push   eax
c001ee0e:	e8 71 fa ff ff       	call   c001e884 <Vm::fpuFloatToLong(unsigned long long)>
c001ee13:	83 c4 10             	add    esp,0x10
c001ee16:	89 06                	mov    DWORD PTR [esi],eax
c001ee18:	eb 63                	jmp    c001ee7d <Vm::x87Handler(regs*)+0x259>
c001ee1a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ee1e:	84 d2                	test   dl,dl
c001ee20:	0f 85 e6 05 00 00    	jne    c001f40c <Vm::x87Handler(regs*)+0x7e8>
c001ee26:	57                   	push   edi
c001ee27:	57                   	push   edi
c001ee28:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ee2b:	ff 36                	push   DWORD PTR [esi]
c001ee2d:	e8 49 fa ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001ee32:	5e                   	pop    esi
c001ee33:	5f                   	pop    edi
c001ee34:	52                   	push   edx
c001ee35:	50                   	push   eax
c001ee36:	e8 3a fd ff ff       	call   c001eb75 <Vm::fpuPush(unsigned long long)>
c001ee3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee3f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ee42:	e9 51 fe ff ff       	jmp    c001ec98 <Vm::x87Handler(regs*)+0x74>
c001ee47:	80 fa 03             	cmp    dl,0x3
c001ee4a:	0f 85 d7 06 00 00    	jne    c001f527 <Vm::x87Handler(regs*)+0x903>
c001ee50:	57                   	push   edi
c001ee51:	57                   	push   edi
c001ee52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ee55:	ff 36                	push   DWORD PTR [esi]
c001ee57:	e8 1f fa ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001ee5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee63:	89 c6                	mov    esi,eax
c001ee65:	89 d7                	mov    edi,edx
c001ee67:	e8 7b fc ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ee6c:	57                   	push   edi
c001ee6d:	56                   	push   esi
c001ee6e:	52                   	push   edx
c001ee6f:	50                   	push   eax
c001ee70:	e8 95 fb ff ff       	call   c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ee75:	83 c4 20             	add    esp,0x20
c001ee78:	e8 55 fd ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001ee7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee81:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ee84:	e9 12 fe ff ff       	jmp    c001ec9b <Vm::x87Handler(regs*)+0x77>
c001ee89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee8d:	8d 50 40             	lea    edx,[eax+0x40]
c001ee90:	80 fa 07             	cmp    dl,0x7
c001ee93:	77 29                	ja     c001eebe <Vm::x87Handler(regs*)+0x29a>
c001ee95:	83 ec 0c             	sub    esp,0xc
c001ee98:	2d c0 00 00 00       	sub    eax,0xc0
c001ee9d:	50                   	push   eax
c001ee9e:	e8 44 fc ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001eea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eeaa:	89 c6                	mov    esi,eax
c001eeac:	89 d7                	mov    edi,edx
c001eeae:	e8 34 fc ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001eeb3:	57                   	push   edi
c001eeb4:	56                   	push   esi
c001eeb5:	52                   	push   edx
c001eeb6:	50                   	push   eax
c001eeb7:	e8 a1 fb ff ff       	call   c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eebc:	eb 2f                	jmp    c001eeed <Vm::x87Handler(regs*)+0x2c9>
c001eebe:	8d 50 38             	lea    edx,[eax+0x38]
c001eec1:	80 fa 07             	cmp    dl,0x7
c001eec4:	77 2f                	ja     c001eef5 <Vm::x87Handler(regs*)+0x2d1>
c001eec6:	83 ec 0c             	sub    esp,0xc
c001eec9:	2d c8 00 00 00       	sub    eax,0xc8
c001eece:	50                   	push   eax
c001eecf:	e8 13 fc ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001eed4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eedb:	89 c6                	mov    esi,eax
c001eedd:	89 d7                	mov    edi,edx
c001eedf:	e8 03 fc ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001eee4:	57                   	push   edi
c001eee5:	56                   	push   esi
c001eee6:	52                   	push   edx
c001eee7:	50                   	push   eax
c001eee8:	e8 a9 fb ff ff       	call   c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001eeed:	83 c4 1c             	add    esp,0x1c
c001eef0:	e9 d8 fd ff ff       	jmp    c001eccd <Vm::x87Handler(regs*)+0xa9>
c001eef5:	8d 50 30             	lea    edx,[eax+0x30]
c001eef8:	80 fa 07             	cmp    dl,0x7
c001eefb:	77 0d                	ja     c001ef0a <Vm::x87Handler(regs*)+0x2e6>
c001eefd:	83 ec 0c             	sub    esp,0xc
c001ef00:	2d d0 00 00 00       	sub    eax,0xd0
c001ef05:	e9 99 03 00 00       	jmp    c001f2a3 <Vm::x87Handler(regs*)+0x67f>
c001ef0a:	8d 50 28             	lea    edx,[eax+0x28]
c001ef0d:	80 fa 07             	cmp    dl,0x7
c001ef10:	77 0d                	ja     c001ef1f <Vm::x87Handler(regs*)+0x2fb>
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	2d d8 00 00 00       	sub    eax,0xd8
c001ef1a:	e9 c0 03 00 00       	jmp    c001f2df <Vm::x87Handler(regs*)+0x6bb>
c001ef1f:	8d 50 20             	lea    edx,[eax+0x20]
c001ef22:	80 fa 07             	cmp    dl,0x7
c001ef25:	77 1b                	ja     c001ef42 <Vm::x87Handler(regs*)+0x31e>
c001ef27:	83 ec 0c             	sub    esp,0xc
c001ef2a:	2d e0 00 00 00       	sub    eax,0xe0
c001ef2f:	50                   	push   eax
c001ef30:	e8 b2 fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ef35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef3c:	89 c6                	mov    esi,eax
c001ef3e:	89 d7                	mov    edi,edx
c001ef40:	eb 22                	jmp    c001ef64 <Vm::x87Handler(regs*)+0x340>
c001ef42:	8d 50 18             	lea    edx,[eax+0x18]
c001ef45:	80 fa 07             	cmp    dl,0x7
c001ef48:	77 2d                	ja     c001ef77 <Vm::x87Handler(regs*)+0x353>
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	6a 00                	push   0x0
c001ef4f:	e8 93 fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ef54:	89 c6                	mov    esi,eax
c001ef56:	89 d7                	mov    edi,edx
c001ef58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef5c:	2d e8 00 00 00       	sub    eax,0xe8
c001ef61:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef64:	e8 7e fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ef69:	57                   	push   edi
c001ef6a:	56                   	push   esi
c001ef6b:	52                   	push   edx
c001ef6c:	50                   	push   eax
c001ef6d:	e8 15 fb ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef72:	e9 76 ff ff ff       	jmp    c001eeed <Vm::x87Handler(regs*)+0x2c9>
c001ef77:	8d 50 10             	lea    edx,[eax+0x10]
c001ef7a:	80 fa 07             	cmp    dl,0x7
c001ef7d:	77 1b                	ja     c001ef9a <Vm::x87Handler(regs*)+0x376>
c001ef7f:	83 ec 0c             	sub    esp,0xc
c001ef82:	2d f0 00 00 00       	sub    eax,0xf0
c001ef87:	50                   	push   eax
c001ef88:	e8 5a fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001ef8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef94:	89 c6                	mov    esi,eax
c001ef96:	89 d7                	mov    edi,edx
c001ef98:	eb 22                	jmp    c001efbc <Vm::x87Handler(regs*)+0x398>
c001ef9a:	3c f7                	cmp    al,0xf7
c001ef9c:	0f 86 d1 03 00 00    	jbe    c001f373 <Vm::x87Handler(regs*)+0x74f>
c001efa2:	83 ec 0c             	sub    esp,0xc
c001efa5:	6a 00                	push   0x0
c001efa7:	e8 3b fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001efac:	89 c6                	mov    esi,eax
c001efae:	89 d7                	mov    edi,edx
c001efb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efb4:	2d f8 00 00 00       	sub    eax,0xf8
c001efb9:	89 04 24             	mov    DWORD PTR [esp],eax
c001efbc:	e8 26 fb ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001efc1:	57                   	push   edi
c001efc2:	56                   	push   esi
c001efc3:	52                   	push   edx
c001efc4:	50                   	push   eax
c001efc5:	e8 eb fa ff ff       	call   c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efca:	83 c4 1c             	add    esp,0x1c
c001efcd:	52                   	push   edx
c001efce:	50                   	push   eax
c001efcf:	6a 00                	push   0x0
c001efd1:	e9 51 02 00 00       	jmp    c001f227 <Vm::x87Handler(regs*)+0x603>
c001efd6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efda:	8d 50 40             	lea    edx,[eax+0x40]
c001efdd:	80 fa 07             	cmp    dl,0x7
c001efe0:	77 37                	ja     c001f019 <Vm::x87Handler(regs*)+0x3f5>
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	2d c0 00 00 00       	sub    eax,0xc0
c001efea:	50                   	push   eax
c001efeb:	e8 f7 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001eff0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eff7:	89 c6                	mov    esi,eax
c001eff9:	89 d7                	mov    edi,edx
c001effb:	e8 e7 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f000:	57                   	push   edi
c001f001:	56                   	push   esi
c001f002:	52                   	push   edx
c001f003:	50                   	push   eax
c001f004:	e8 54 fa ff ff       	call   c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f009:	83 c4 1c             	add    esp,0x1c
c001f00c:	52                   	push   edx
c001f00d:	50                   	push   eax
c001f00e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f012:	2d c0 00 00 00       	sub    eax,0xc0
c001f017:	eb 3d                	jmp    c001f056 <Vm::x87Handler(regs*)+0x432>
c001f019:	8d 50 38             	lea    edx,[eax+0x38]
c001f01c:	80 fa 07             	cmp    dl,0x7
c001f01f:	77 3b                	ja     c001f05c <Vm::x87Handler(regs*)+0x438>
c001f021:	83 ec 0c             	sub    esp,0xc
c001f024:	2d c8 00 00 00       	sub    eax,0xc8
c001f029:	50                   	push   eax
c001f02a:	e8 b8 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f02f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f036:	89 c6                	mov    esi,eax
c001f038:	89 d7                	mov    edi,edx
c001f03a:	e8 a8 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f03f:	57                   	push   edi
c001f040:	56                   	push   esi
c001f041:	52                   	push   edx
c001f042:	50                   	push   eax
c001f043:	e8 4e fa ff ff       	call   c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f048:	83 c4 1c             	add    esp,0x1c
c001f04b:	52                   	push   edx
c001f04c:	50                   	push   eax
c001f04d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f051:	2d c8 00 00 00       	sub    eax,0xc8
c001f056:	50                   	push   eax
c001f057:	e9 75 fc ff ff       	jmp    c001ecd1 <Vm::x87Handler(regs*)+0xad>
c001f05c:	83 c0 18             	add    eax,0x18
c001f05f:	3c 07                	cmp    al,0x7
c001f061:	0f 87 3b 04 00 00    	ja     c001f4a2 <Vm::x87Handler(regs*)+0x87e>
c001f067:	83 ec 0c             	sub    esp,0xc
c001f06a:	6a 00                	push   0x0
c001f06c:	e8 76 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f071:	89 c6                	mov    esi,eax
c001f073:	89 d7                	mov    edi,edx
c001f075:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f079:	2d e8 00 00 00       	sub    eax,0xe8
c001f07e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f081:	e8 61 fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f086:	57                   	push   edi
c001f087:	56                   	push   esi
c001f088:	52                   	push   edx
c001f089:	50                   	push   eax
c001f08a:	e8 f8 f9 ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f08f:	83 c4 1c             	add    esp,0x1c
c001f092:	52                   	push   edx
c001f093:	50                   	push   eax
c001f094:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f098:	2d e8 00 00 00       	sub    eax,0xe8
c001f09d:	eb b7                	jmp    c001f056 <Vm::x87Handler(regs*)+0x432>
c001f09f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0a3:	8d 50 40             	lea    edx,[eax+0x40]
c001f0a6:	80 fa 07             	cmp    dl,0x7
c001f0a9:	77 3a                	ja     c001f0e5 <Vm::x87Handler(regs*)+0x4c1>
c001f0ab:	83 ec 0c             	sub    esp,0xc
c001f0ae:	2d c0 00 00 00       	sub    eax,0xc0
c001f0b3:	50                   	push   eax
c001f0b4:	e8 2e fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f0b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0c0:	89 c6                	mov    esi,eax
c001f0c2:	89 d7                	mov    edi,edx
c001f0c4:	e8 1e fa ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f0c9:	57                   	push   edi
c001f0ca:	56                   	push   esi
c001f0cb:	52                   	push   edx
c001f0cc:	50                   	push   eax
c001f0cd:	e8 8b f9 ff ff       	call   c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f0d2:	83 c4 1c             	add    esp,0x1c
c001f0d5:	52                   	push   edx
c001f0d6:	50                   	push   eax
c001f0d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0db:	2d c0 00 00 00       	sub    eax,0xc0
c001f0e0:	e9 9e 01 00 00       	jmp    c001f283 <Vm::x87Handler(regs*)+0x65f>
c001f0e5:	8d 50 20             	lea    edx,[eax+0x20]
c001f0e8:	80 fa 07             	cmp    dl,0x7
c001f0eb:	77 3a                	ja     c001f127 <Vm::x87Handler(regs*)+0x503>
c001f0ed:	83 ec 0c             	sub    esp,0xc
c001f0f0:	2d e0 00 00 00       	sub    eax,0xe0
c001f0f5:	50                   	push   eax
c001f0f6:	e8 ec f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f0fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f102:	89 c6                	mov    esi,eax
c001f104:	89 d7                	mov    edi,edx
c001f106:	e8 dc f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f10b:	57                   	push   edi
c001f10c:	56                   	push   esi
c001f10d:	52                   	push   edx
c001f10e:	50                   	push   eax
c001f10f:	e8 73 f9 ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f114:	83 c4 1c             	add    esp,0x1c
c001f117:	52                   	push   edx
c001f118:	50                   	push   eax
c001f119:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f11d:	2d e0 00 00 00       	sub    eax,0xe0
c001f122:	e9 5c 01 00 00       	jmp    c001f283 <Vm::x87Handler(regs*)+0x65f>
c001f127:	8d 50 18             	lea    edx,[eax+0x18]
c001f12a:	80 fa 07             	cmp    dl,0x7
c001f12d:	77 3b                	ja     c001f16a <Vm::x87Handler(regs*)+0x546>
c001f12f:	83 ec 0c             	sub    esp,0xc
c001f132:	6a 00                	push   0x0
c001f134:	e8 ae f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f139:	89 c6                	mov    esi,eax
c001f13b:	89 d7                	mov    edi,edx
c001f13d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f141:	2d e8 00 00 00       	sub    eax,0xe8
c001f146:	89 04 24             	mov    DWORD PTR [esp],eax
c001f149:	e8 99 f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f14e:	57                   	push   edi
c001f14f:	56                   	push   esi
c001f150:	52                   	push   edx
c001f151:	50                   	push   eax
c001f152:	e8 30 f9 ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f157:	83 c4 1c             	add    esp,0x1c
c001f15a:	52                   	push   edx
c001f15b:	50                   	push   eax
c001f15c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f160:	2d e8 00 00 00       	sub    eax,0xe8
c001f165:	e9 19 01 00 00       	jmp    c001f283 <Vm::x87Handler(regs*)+0x65f>
c001f16a:	8d 50 38             	lea    edx,[eax+0x38]
c001f16d:	80 fa 07             	cmp    dl,0x7
c001f170:	77 37                	ja     c001f1a9 <Vm::x87Handler(regs*)+0x585>
c001f172:	83 ec 0c             	sub    esp,0xc
c001f175:	2d c8 00 00 00       	sub    eax,0xc8
c001f17a:	50                   	push   eax
c001f17b:	e8 67 f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f187:	89 c6                	mov    esi,eax
c001f189:	89 d7                	mov    edi,edx
c001f18b:	e8 57 f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f190:	57                   	push   edi
c001f191:	56                   	push   esi
c001f192:	52                   	push   edx
c001f193:	50                   	push   eax
c001f194:	e8 fd f8 ff ff       	call   c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f199:	83 c4 1c             	add    esp,0x1c
c001f19c:	52                   	push   edx
c001f19d:	50                   	push   eax
c001f19e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1a2:	2d c8 00 00 00       	sub    eax,0xc8
c001f1a7:	eb 7d                	jmp    c001f226 <Vm::x87Handler(regs*)+0x602>
c001f1a9:	3c f7                	cmp    al,0xf7
c001f1ab:	76 38                	jbe    c001f1e5 <Vm::x87Handler(regs*)+0x5c1>
c001f1ad:	83 ec 0c             	sub    esp,0xc
c001f1b0:	6a 00                	push   0x0
c001f1b2:	e8 30 f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f1b7:	89 c6                	mov    esi,eax
c001f1b9:	89 d7                	mov    edi,edx
c001f1bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1bf:	2d f8 00 00 00       	sub    eax,0xf8
c001f1c4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1c7:	e8 1b f9 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f1cc:	57                   	push   edi
c001f1cd:	56                   	push   esi
c001f1ce:	52                   	push   edx
c001f1cf:	50                   	push   eax
c001f1d0:	e8 e0 f8 ff ff       	call   c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f1d5:	83 c4 1c             	add    esp,0x1c
c001f1d8:	52                   	push   edx
c001f1d9:	50                   	push   eax
c001f1da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1de:	2d f8 00 00 00       	sub    eax,0xf8
c001f1e3:	eb 41                	jmp    c001f226 <Vm::x87Handler(regs*)+0x602>
c001f1e5:	8d 50 10             	lea    edx,[eax+0x10]
c001f1e8:	80 fa 07             	cmp    dl,0x7
c001f1eb:	0f 87 5a 01 00 00    	ja     c001f34b <Vm::x87Handler(regs*)+0x727>
c001f1f1:	83 ec 0c             	sub    esp,0xc
c001f1f4:	2d f0 00 00 00       	sub    eax,0xf0
c001f1f9:	50                   	push   eax
c001f1fa:	e8 e8 f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f1ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f206:	89 c6                	mov    esi,eax
c001f208:	89 d7                	mov    edi,edx
c001f20a:	e8 d8 f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f20f:	57                   	push   edi
c001f210:	56                   	push   esi
c001f211:	52                   	push   edx
c001f212:	50                   	push   eax
c001f213:	e8 9d f8 ff ff       	call   c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f218:	83 c4 1c             	add    esp,0x1c
c001f21b:	52                   	push   edx
c001f21c:	50                   	push   eax
c001f21d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f221:	2d f0 00 00 00       	sub    eax,0xf0
c001f226:	50                   	push   eax
c001f227:	e8 fe f8 ff ff       	call   c001eb2a <Vm::fpuSetReg(int, unsigned long long)>
c001f22c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f230:	e8 9d f9 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f235:	e9 5e fa ff ff       	jmp    c001ec98 <Vm::x87Handler(regs*)+0x74>
c001f23a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f23e:	8d 50 30             	lea    edx,[eax+0x30]
c001f241:	80 fa 07             	cmp    dl,0x7
c001f244:	77 1d                	ja     c001f263 <Vm::x87Handler(regs*)+0x63f>
c001f246:	83 ec 0c             	sub    esp,0xc
c001f249:	6a 00                	push   0x0
c001f24b:	e8 97 f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f250:	83 c4 0c             	add    esp,0xc
c001f253:	52                   	push   edx
c001f254:	50                   	push   eax
c001f255:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f259:	2d d0 00 00 00       	sub    eax,0xd0
c001f25e:	e9 f3 fd ff ff       	jmp    c001f056 <Vm::x87Handler(regs*)+0x432>
c001f263:	8d 50 28             	lea    edx,[eax+0x28]
c001f266:	80 fa 07             	cmp    dl,0x7
c001f269:	77 28                	ja     c001f293 <Vm::x87Handler(regs*)+0x66f>
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	6a 00                	push   0x0
c001f270:	e8 72 f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f275:	83 c4 0c             	add    esp,0xc
c001f278:	52                   	push   edx
c001f279:	50                   	push   eax
c001f27a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f27e:	2d d8 00 00 00       	sub    eax,0xd8
c001f283:	50                   	push   eax
c001f284:	e8 a1 f8 ff ff       	call   c001eb2a <Vm::fpuSetReg(int, unsigned long long)>
c001f289:	e8 44 f9 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f28e:	e9 01 fa ff ff       	jmp    c001ec94 <Vm::x87Handler(regs*)+0x70>
c001f293:	8d 50 20             	lea    edx,[eax+0x20]
c001f296:	80 fa 07             	cmp    dl,0x7
c001f299:	77 30                	ja     c001f2cb <Vm::x87Handler(regs*)+0x6a7>
c001f29b:	83 ec 0c             	sub    esp,0xc
c001f29e:	2d e0 00 00 00       	sub    eax,0xe0
c001f2a3:	50                   	push   eax
c001f2a4:	e8 3e f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f2a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2b0:	89 c6                	mov    esi,eax
c001f2b2:	89 d7                	mov    edi,edx
c001f2b4:	e8 2e f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f2b9:	57                   	push   edi
c001f2ba:	56                   	push   esi
c001f2bb:	52                   	push   edx
c001f2bc:	50                   	push   eax
c001f2bd:	e8 48 f7 ff ff       	call   c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2c2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f2c6:	e9 54 02 00 00       	jmp    c001f51f <Vm::x87Handler(regs*)+0x8fb>
c001f2cb:	8d 50 18             	lea    edx,[eax+0x18]
c001f2ce:	80 fa 07             	cmp    dl,0x7
c001f2d1:	0f 87 43 fb ff ff    	ja     c001ee1a <Vm::x87Handler(regs*)+0x1f6>
c001f2d7:	83 ec 0c             	sub    esp,0xc
c001f2da:	2d e8 00 00 00       	sub    eax,0xe8
c001f2df:	50                   	push   eax
c001f2e0:	e8 02 f8 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f2e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2ec:	89 c6                	mov    esi,eax
c001f2ee:	89 d7                	mov    edi,edx
c001f2f0:	e8 f2 f7 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f2f5:	57                   	push   edi
c001f2f6:	56                   	push   esi
c001f2f7:	52                   	push   edx
c001f2f8:	50                   	push   eax
c001f2f9:	e8 0c f7 ff ff       	call   c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2fe:	83 c4 20             	add    esp,0x20
c001f301:	e8 cc f8 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f306:	eb 62                	jmp    c001f36a <Vm::x87Handler(regs*)+0x746>
c001f308:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f30c:	0f 85 0f 01 00 00    	jne    c001f421 <Vm::x87Handler(regs*)+0x7fd>
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	6a 01                	push   0x1
c001f317:	e8 cb f7 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f31c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f323:	89 c6                	mov    esi,eax
c001f325:	89 d7                	mov    edi,edx
c001f327:	e8 bb f7 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f32c:	57                   	push   edi
c001f32d:	56                   	push   esi
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	e8 d5 f6 ff ff       	call   c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f335:	83 c4 20             	add    esp,0x20
c001f338:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f33c:	e8 91 f8 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f341:	e8 8c f8 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f346:	e9 50 f9 ff ff       	jmp    c001ec9b <Vm::x87Handler(regs*)+0x77>
c001f34b:	3c d9                	cmp    al,0xd9
c001f34d:	0f 85 b5 02 00 00    	jne    c001f608 <Vm::x87Handler(regs*)+0x9e4>
c001f353:	eb bd                	jmp    c001f312 <Vm::x87Handler(regs*)+0x6ee>
c001f355:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f359:	0f 85 ea 02 00 00    	jne    c001f649 <Vm::x87Handler(regs*)+0xa25>
c001f35f:	0f b7 05 80 e2 02 c0 	movzx  eax,WORD PTR ds:0xc002e280
c001f366:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f36a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f36e:	e9 28 f9 ff ff       	jmp    c001ec9b <Vm::x87Handler(regs*)+0x77>
c001f373:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f377:	84 d2                	test   dl,dl
c001f379:	75 0f                	jne    c001f38a <Vm::x87Handler(regs*)+0x766>
c001f37b:	83 ec 0c             	sub    esp,0xc
c001f37e:	ff 36                	push   DWORD PTR [esi]
c001f380:	e8 b1 f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f385:	e9 2c 01 00 00       	jmp    c001f4b6 <Vm::x87Handler(regs*)+0x892>
c001f38a:	80 fa 01             	cmp    dl,0x1
c001f38d:	75 0f                	jne    c001f39e <Vm::x87Handler(regs*)+0x77a>
c001f38f:	83 ec 0c             	sub    esp,0xc
c001f392:	ff 36                	push   DWORD PTR [esi]
c001f394:	e8 9d f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f399:	e9 81 02 00 00       	jmp    c001f61f <Vm::x87Handler(regs*)+0x9fb>
c001f39e:	80 fa 04             	cmp    dl,0x4
c001f3a1:	75 0f                	jne    c001f3b2 <Vm::x87Handler(regs*)+0x78e>
c001f3a3:	83 ec 0c             	sub    esp,0xc
c001f3a6:	ff 36                	push   DWORD PTR [esi]
c001f3a8:	e8 89 f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f3ad:	e9 86 01 00 00       	jmp    c001f538 <Vm::x87Handler(regs*)+0x914>
c001f3b2:	80 fa 05             	cmp    dl,0x5
c001f3b5:	75 1b                	jne    c001f3d2 <Vm::x87Handler(regs*)+0x7ae>
c001f3b7:	83 ec 0c             	sub    esp,0xc
c001f3ba:	6a 00                	push   0x0
c001f3bc:	e8 26 f7 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f3c1:	89 c7                	mov    edi,eax
c001f3c3:	89 d5                	mov    ebp,edx
c001f3c5:	58                   	pop    eax
c001f3c6:	ff 36                	push   DWORD PTR [esi]
c001f3c8:	e8 69 f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f3cd:	e9 a3 01 00 00       	jmp    c001f575 <Vm::x87Handler(regs*)+0x951>
c001f3d2:	80 fa 06             	cmp    dl,0x6
c001f3d5:	75 0f                	jne    c001f3e6 <Vm::x87Handler(regs*)+0x7c2>
c001f3d7:	83 ec 0c             	sub    esp,0xc
c001f3da:	ff 36                	push   DWORD PTR [esi]
c001f3dc:	e8 55 f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f3e1:	e9 ae 01 00 00       	jmp    c001f594 <Vm::x87Handler(regs*)+0x970>
c001f3e6:	31 c0                	xor    eax,eax
c001f3e8:	80 fa 07             	cmp    dl,0x7
c001f3eb:	0f 85 94 02 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f3f1:	83 ec 0c             	sub    esp,0xc
c001f3f4:	6a 00                	push   0x0
c001f3f6:	e8 ec f6 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f3fb:	89 c7                	mov    edi,eax
c001f3fd:	89 d5                	mov    ebp,edx
c001f3ff:	58                   	pop    eax
c001f400:	ff 36                	push   DWORD PTR [esi]
c001f402:	e8 2f f4 ff ff       	call   c001e836 <Vm::fpu32ToInternal(unsigned int)>
c001f407:	e9 cb 01 00 00       	jmp    c001f5d7 <Vm::x87Handler(regs*)+0x9b3>
c001f40c:	80 fa 03             	cmp    dl,0x3
c001f40f:	0f 85 d3 01 00 00    	jne    c001f5e8 <Vm::x87Handler(regs*)+0x9c4>
c001f415:	e8 b8 f7 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f41a:	51                   	push   ecx
c001f41b:	51                   	push   ecx
c001f41c:	e9 de 01 00 00       	jmp    c001f5ff <Vm::x87Handler(regs*)+0x9db>
c001f421:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f425:	80 fa 01             	cmp    dl,0x1
c001f428:	75 09                	jne    c001f433 <Vm::x87Handler(regs*)+0x80f>
c001f42a:	57                   	push   edi
c001f42b:	57                   	push   edi
c001f42c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f42e:	e9 e3 01 00 00       	jmp    c001f616 <Vm::x87Handler(regs*)+0x9f2>
c001f433:	80 fa 04             	cmp    dl,0x4
c001f436:	75 12                	jne    c001f44a <Vm::x87Handler(regs*)+0x826>
c001f438:	31 d2                	xor    edx,edx
c001f43a:	51                   	push   ecx
c001f43b:	51                   	push   ecx
c001f43c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f43e:	52                   	push   edx
c001f43f:	50                   	push   eax
c001f440:	e8 d0 f4 ff ff       	call   c001e915 <Vm::fpuLongToFloat(long long)>
c001f445:	e9 ee 00 00 00       	jmp    c001f538 <Vm::x87Handler(regs*)+0x914>
c001f44a:	31 c0                	xor    eax,eax
c001f44c:	80 fa 07             	cmp    dl,0x7
c001f44f:	0f 85 30 02 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f455:	83 ec 0c             	sub    esp,0xc
c001f458:	6a 00                	push   0x0
c001f45a:	e8 88 f6 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f45f:	89 c7                	mov    edi,eax
c001f461:	89 d5                	mov    ebp,edx
c001f463:	58                   	pop    eax
c001f464:	8b 06                	mov    eax,DWORD PTR [esi]
c001f466:	5a                   	pop    edx
c001f467:	31 d2                	xor    edx,edx
c001f469:	52                   	push   edx
c001f46a:	50                   	push   eax
c001f46b:	e8 a5 f4 ff ff       	call   c001e915 <Vm::fpuLongToFloat(long long)>
c001f470:	e9 62 01 00 00       	jmp    c001f5d7 <Vm::x87Handler(regs*)+0x9b3>
c001f475:	84 d2                	test   dl,dl
c001f477:	75 0d                	jne    c001f486 <Vm::x87Handler(regs*)+0x862>
c001f479:	31 d2                	xor    edx,edx
c001f47b:	55                   	push   ebp
c001f47c:	55                   	push   ebp
c001f47d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f47f:	52                   	push   edx
c001f480:	50                   	push   eax
c001f481:	e9 d3 01 00 00       	jmp    c001f659 <Vm::x87Handler(regs*)+0xa35>
c001f486:	31 c0                	xor    eax,eax
c001f488:	80 fa 02             	cmp    dl,0x2
c001f48b:	0f 85 f4 01 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f491:	83 ec 0c             	sub    esp,0xc
c001f494:	6a 00                	push   0x0
c001f496:	e8 4c f6 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f49b:	59                   	pop    ecx
c001f49c:	5f                   	pop    edi
c001f49d:	e9 6a f9 ff ff       	jmp    c001ee0c <Vm::x87Handler(regs*)+0x1e8>
c001f4a2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4a6:	84 d2                	test   dl,dl
c001f4a8:	75 2a                	jne    c001f4d4 <Vm::x87Handler(regs*)+0x8b0>
c001f4aa:	50                   	push   eax
c001f4ab:	50                   	push   eax
c001f4ac:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4af:	ff 36                	push   DWORD PTR [esi]
c001f4b1:	e8 c5 f3 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f4b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4bd:	89 c6                	mov    esi,eax
c001f4bf:	89 d7                	mov    edi,edx
c001f4c1:	e8 21 f6 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f4c6:	57                   	push   edi
c001f4c7:	56                   	push   esi
c001f4c8:	52                   	push   edx
c001f4c9:	50                   	push   eax
c001f4ca:	e8 8e f5 ff ff       	call   c001ea5d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f4cf:	e9 64 01 00 00       	jmp    c001f638 <Vm::x87Handler(regs*)+0xa14>
c001f4d4:	80 fa 01             	cmp    dl,0x1
c001f4d7:	75 11                	jne    c001f4ea <Vm::x87Handler(regs*)+0x8c6>
c001f4d9:	50                   	push   eax
c001f4da:	50                   	push   eax
c001f4db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4de:	ff 36                	push   DWORD PTR [esi]
c001f4e0:	e8 96 f3 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f4e5:	e9 35 01 00 00       	jmp    c001f61f <Vm::x87Handler(regs*)+0x9fb>
c001f4ea:	80 fa 02             	cmp    dl,0x2
c001f4ed:	0f 85 54 f9 ff ff    	jne    c001ee47 <Vm::x87Handler(regs*)+0x223>
c001f4f3:	55                   	push   ebp
c001f4f4:	55                   	push   ebp
c001f4f5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4f8:	ff 36                	push   DWORD PTR [esi]
c001f4fa:	e8 7c f3 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f4ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f506:	89 c6                	mov    esi,eax
c001f508:	89 d7                	mov    edi,edx
c001f50a:	e8 d8 f5 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f50f:	57                   	push   edi
c001f510:	56                   	push   esi
c001f511:	52                   	push   edx
c001f512:	50                   	push   eax
c001f513:	e8 f2 f4 ff ff       	call   c001ea0a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f51c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f51f:	83 c4 20             	add    esp,0x20
c001f522:	e9 74 f7 ff ff       	jmp    c001ec9b <Vm::x87Handler(regs*)+0x77>
c001f527:	80 fa 04             	cmp    dl,0x4
c001f52a:	75 2a                	jne    c001f556 <Vm::x87Handler(regs*)+0x932>
c001f52c:	51                   	push   ecx
c001f52d:	51                   	push   ecx
c001f52e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f531:	ff 36                	push   DWORD PTR [esi]
c001f533:	e8 43 f3 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f538:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f53f:	89 c6                	mov    esi,eax
c001f541:	89 d7                	mov    edi,edx
c001f543:	e8 9f f5 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f548:	57                   	push   edi
c001f549:	56                   	push   esi
c001f54a:	52                   	push   edx
c001f54b:	50                   	push   eax
c001f54c:	e8 36 f5 ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f551:	e9 e2 00 00 00       	jmp    c001f638 <Vm::x87Handler(regs*)+0xa14>
c001f556:	80 fa 05             	cmp    dl,0x5
c001f559:	75 28                	jne    c001f583 <Vm::x87Handler(regs*)+0x95f>
c001f55b:	83 ec 0c             	sub    esp,0xc
c001f55e:	6a 00                	push   0x0
c001f560:	e8 82 f5 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f565:	89 c7                	mov    edi,eax
c001f567:	89 d5                	mov    ebp,edx
c001f569:	58                   	pop    eax
c001f56a:	5a                   	pop    edx
c001f56b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f56e:	ff 36                	push   DWORD PTR [esi]
c001f570:	e8 06 f3 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f575:	83 c4 10             	add    esp,0x10
c001f578:	55                   	push   ebp
c001f579:	57                   	push   edi
c001f57a:	52                   	push   edx
c001f57b:	50                   	push   eax
c001f57c:	e8 06 f5 ff ff       	call   c001ea87 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f581:	eb 60                	jmp    c001f5e3 <Vm::x87Handler(regs*)+0x9bf>
c001f583:	80 fa 06             	cmp    dl,0x6
c001f586:	75 2a                	jne    c001f5b2 <Vm::x87Handler(regs*)+0x98e>
c001f588:	51                   	push   ecx
c001f589:	51                   	push   ecx
c001f58a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f58d:	ff 36                	push   DWORD PTR [esi]
c001f58f:	e8 e7 f2 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f594:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f59b:	89 c6                	mov    esi,eax
c001f59d:	89 d7                	mov    edi,edx
c001f59f:	e8 43 f5 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f5a4:	57                   	push   edi
c001f5a5:	56                   	push   esi
c001f5a6:	52                   	push   edx
c001f5a7:	50                   	push   eax
c001f5a8:	e8 08 f5 ff ff       	call   c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f5ad:	e9 86 00 00 00       	jmp    c001f638 <Vm::x87Handler(regs*)+0xa14>
c001f5b2:	31 c0                	xor    eax,eax
c001f5b4:	80 fa 07             	cmp    dl,0x7
c001f5b7:	0f 85 c8 00 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f5bd:	83 ec 0c             	sub    esp,0xc
c001f5c0:	6a 00                	push   0x0
c001f5c2:	e8 20 f5 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f5c7:	89 c7                	mov    edi,eax
c001f5c9:	89 d5                	mov    ebp,edx
c001f5cb:	58                   	pop    eax
c001f5cc:	5a                   	pop    edx
c001f5cd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f5d0:	ff 36                	push   DWORD PTR [esi]
c001f5d2:	e8 a4 f2 ff ff       	call   c001e87b <Vm::fpu64ToInternal(unsigned long long)>
c001f5d7:	83 c4 10             	add    esp,0x10
c001f5da:	55                   	push   ebp
c001f5db:	57                   	push   edi
c001f5dc:	52                   	push   edx
c001f5dd:	50                   	push   eax
c001f5de:	e8 d2 f4 ff ff       	call   c001eab5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f5e3:	83 c4 0c             	add    esp,0xc
c001f5e6:	eb 53                	jmp    c001f63b <Vm::x87Handler(regs*)+0xa17>
c001f5e8:	31 c0                	xor    eax,eax
c001f5ea:	80 fa 02             	cmp    dl,0x2
c001f5ed:	0f 85 92 00 00 00    	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f5f3:	83 ec 0c             	sub    esp,0xc
c001f5f6:	6a 00                	push   0x0
c001f5f8:	e8 ea f4 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f5fd:	59                   	pop    ecx
c001f5fe:	5f                   	pop    edi
c001f5ff:	52                   	push   edx
c001f600:	50                   	push   eax
c001f601:	e8 27 f2 ff ff       	call   c001e82d <Vm::fpuInternalTo64(unsigned long long)>
c001f606:	eb 70                	jmp    c001f678 <Vm::x87Handler(regs*)+0xa54>
c001f608:	31 c0                	xor    eax,eax
c001f60a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f60f:	75 74                	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f611:	50                   	push   eax
c001f612:	50                   	push   eax
c001f613:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f616:	31 d2                	xor    edx,edx
c001f618:	52                   	push   edx
c001f619:	50                   	push   eax
c001f61a:	e8 f6 f2 ff ff       	call   c001e915 <Vm::fpuLongToFloat(long long)>
c001f61f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f626:	89 c6                	mov    esi,eax
c001f628:	89 d7                	mov    edi,edx
c001f62a:	e8 b8 f4 ff ff       	call   c001eae7 <Vm::fpuGetReg(int)>
c001f62f:	57                   	push   edi
c001f630:	56                   	push   esi
c001f631:	52                   	push   edx
c001f632:	50                   	push   eax
c001f633:	e8 5e f4 ff ff       	call   c001ea96 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f638:	83 c4 1c             	add    esp,0x1c
c001f63b:	52                   	push   edx
c001f63c:	50                   	push   eax
c001f63d:	6a 00                	push   0x0
c001f63f:	e8 e6 f4 ff ff       	call   c001eb2a <Vm::fpuSetReg(int, unsigned long long)>
c001f644:	e9 f2 f7 ff ff       	jmp    c001ee3b <Vm::x87Handler(regs*)+0x217>
c001f649:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f64d:	80 fa 05             	cmp    dl,0x5
c001f650:	75 11                	jne    c001f663 <Vm::x87Handler(regs*)+0xa3f>
c001f652:	55                   	push   ebp
c001f653:	55                   	push   ebp
c001f654:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f657:	ff 36                	push   DWORD PTR [esi]
c001f659:	e8 81 f2 ff ff       	call   c001e8df <Vm::fpuULongToFloat(unsigned long long)>
c001f65e:	e9 cf f7 ff ff       	jmp    c001ee32 <Vm::x87Handler(regs*)+0x20e>
c001f663:	31 c0                	xor    eax,eax
c001f665:	80 fa 07             	cmp    dl,0x7
c001f668:	75 1b                	jne    c001f685 <Vm::x87Handler(regs*)+0xa61>
c001f66a:	e8 63 f5 ff ff       	call   c001ebd2 <Vm::fpuPop()>
c001f66f:	51                   	push   ecx
c001f670:	51                   	push   ecx
c001f671:	52                   	push   edx
c001f672:	50                   	push   eax
c001f673:	e8 0c f2 ff ff       	call   c001e884 <Vm::fpuFloatToLong(unsigned long long)>
c001f678:	83 c4 10             	add    esp,0x10
c001f67b:	89 06                	mov    DWORD PTR [esi],eax
c001f67d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f680:	e9 f8 f7 ff ff       	jmp    c001ee7d <Vm::x87Handler(regs*)+0x259>
c001f685:	83 c4 1c             	add    esp,0x1c
c001f688:	5b                   	pop    ebx
c001f689:	5e                   	pop    esi
c001f68a:	5f                   	pop    edi
c001f68b:	5d                   	pop    ebp
c001f68c:	c3                   	ret    

c001f68d <__static_initialization_and_destruction_0(int, int)>:
c001f68d:	83 ec 0c             	sub    esp,0xc
c001f690:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f695:	75 1a                	jne    c001f6b1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f697:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f69f:	75 10                	jne    c001f6b1 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f6a1:	83 ec 0c             	sub    esp,0xc
c001f6a4:	68 80 e2 02 c0       	push   0xc002e280
c001f6a9:	e8 a2 82 00 00       	call   c0027950 <Vm::_FPUState::_FPUState()>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	90                   	nop
c001f6b2:	83 c4 0c             	add    esp,0xc
c001f6b5:	c3                   	ret    

c001f6b6 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f6b6:	83 ec 0c             	sub    esp,0xc
c001f6b9:	83 ec 08             	sub    esp,0x8
c001f6bc:	68 ff ff 00 00       	push   0xffff
c001f6c1:	6a 01                	push   0x1
c001f6c3:	e8 c5 ff ff ff       	call   c001f68d <__static_initialization_and_destruction_0(int, int)>
c001f6c8:	83 c4 10             	add    esp,0x10
c001f6cb:	83 c4 0c             	add    esp,0xc
c001f6ce:	c3                   	ret    
c001f6cf:	90                   	nop

c001f6d0 <FAT::getName()>:
c001f6d0:	b8 f4 b0 02 c0       	mov    eax,0xc002b0f4
c001f6d5:	c3                   	ret    

c001f6d6 <FAT::tell(void*, unsigned long long*)>:
c001f6d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f6db:	75 06                	jne    c001f6e3 <FAT::tell(void*, unsigned long long*)+0xd>
c001f6dd:	b8 04 00 00 00       	mov    eax,0x4
c001f6e2:	c3                   	ret    
c001f6e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f6e8:	75 06                	jne    c001f6f0 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f6ea:	b8 04 00 00 00       	mov    eax,0x4
c001f6ef:	c3                   	ret    
c001f6f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6f4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f6f7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f6fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6fe:	89 01                	mov    DWORD PTR [ecx],eax
c001f700:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f703:	b8 00 00 00 00       	mov    eax,0x0
c001f708:	c3                   	ret    
c001f709:	90                   	nop

c001f70a <FAT::stat(void*, unsigned long long*)>:
c001f70a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f70f:	75 06                	jne    c001f717 <FAT::stat(void*, unsigned long long*)+0xd>
c001f711:	b8 04 00 00 00       	mov    eax,0x4
c001f716:	c3                   	ret    
c001f717:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f71c:	75 06                	jne    c001f724 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f71e:	b8 04 00 00 00       	mov    eax,0x4
c001f723:	c3                   	ret    
c001f724:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f728:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f72b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f72e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f732:	89 01                	mov    DWORD PTR [ecx],eax
c001f734:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f737:	b8 00 00 00 00       	mov    eax,0x0
c001f73c:	c3                   	ret    
c001f73d:	90                   	nop

c001f73e <FAT::~FAT()>:
c001f73e:	83 ec 0c             	sub    esp,0xc
c001f741:	ba 78 b1 02 c0       	mov    edx,0xc002b178
c001f746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74a:	89 10                	mov    DWORD PTR [eax],edx
c001f74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f750:	83 ec 0c             	sub    esp,0xc
c001f753:	50                   	push   eax
c001f754:	e8 5f 34 ff ff       	call   c0012bb8 <Filesystem::~Filesystem()>
c001f759:	83 c4 10             	add    esp,0x10
c001f75c:	90                   	nop
c001f75d:	83 c4 0c             	add    esp,0xc
c001f760:	c3                   	ret    
c001f761:	90                   	nop

c001f762 <FAT::~FAT()>:
c001f762:	83 ec 0c             	sub    esp,0xc
c001f765:	83 ec 0c             	sub    esp,0xc
c001f768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f76c:	e8 cd ff ff ff       	call   c001f73e <FAT::~FAT()>
c001f771:	83 c4 10             	add    esp,0x10
c001f774:	83 ec 08             	sub    esp,0x8
c001f777:	6a 08                	push   0x8
c001f779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f77d:	e8 2d 30 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c001f782:	83 c4 10             	add    esp,0x10
c001f785:	83 c4 0c             	add    esp,0xc
c001f788:	c3                   	ret    
c001f789:	90                   	nop

c001f78a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f78a:	83 ec 1c             	sub    esp,0x1c
c001f78d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f794:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f79d:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001f7a4:	83 f8 ff             	cmp    eax,0xffffffff
c001f7a7:	75 34                	jne    c001f7dd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f7a9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f7ad:	88 c2                	mov    dl,al
c001f7af:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001f7b4:	01 d0                	add    eax,edx
c001f7b6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f7ba:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c001f7c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f7c4:	89 14 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],edx
c001f7cb:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001f7d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f7d4:	89 14 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],edx
c001f7db:	eb 17                	jmp    c001f7f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f7dd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f7e1:	88 c2                	mov    dl,al
c001f7e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f7e7:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001f7ee:	01 d0                	add    eax,edx
c001f7f0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f7f4:	83 ec 04             	sub    esp,0x4
c001f7f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f7ff:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f803:	50                   	push   eax
c001f804:	e8 df 72 fe ff       	call   c0006ae8 <f_getlabel>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f810:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f815:	75 07                	jne    c001f81e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f817:	b8 00 00 00 00       	mov    eax,0x0
c001f81c:	eb 05                	jmp    c001f823 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f81e:	b8 01 00 00 00       	mov    eax,0x1
c001f823:	83 c4 1c             	add    esp,0x1c
c001f826:	c3                   	ret    
c001f827:	90                   	nop

c001f828 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f828:	57                   	push   edi
c001f829:	83 ec 58             	sub    esp,0x58
c001f82c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f834:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f838:	b9 0f 00 00 00       	mov    ecx,0xf
c001f83d:	b8 00 00 00 00       	mov    eax,0x0
c001f842:	fc                   	cld    
c001f843:	89 d7                	mov    edi,edx
c001f845:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f847:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f84b:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001f852:	83 f8 ff             	cmp    eax,0xffffffff
c001f855:	75 34                	jne    c001f88b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f857:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f85b:	88 c2                	mov    dl,al
c001f85d:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001f862:	01 d0                	add    eax,edx
c001f864:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f868:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c001f86e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f872:	89 14 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],edx
c001f879:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001f87e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f882:	89 14 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],edx
c001f889:	eb 17                	jmp    c001f8a2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f88b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f88f:	88 c2                	mov    dl,al
c001f891:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f895:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001f89c:	01 d0                	add    eax,edx
c001f89e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f8a2:	83 ec 08             	sub    esp,0x8
c001f8a5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f8a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8ad:	50                   	push   eax
c001f8ae:	e8 2e 0f fe ff       	call   c00007e1 <strcat>
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	83 ec 0c             	sub    esp,0xc
c001f8b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8bd:	50                   	push   eax
c001f8be:	e8 13 74 fe ff       	call   c0006cd6 <f_setlabel>
c001f8c3:	83 c4 10             	add    esp,0x10
c001f8c6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f8ca:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f8cf:	75 07                	jne    c001f8d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f8d1:	b8 00 00 00 00       	mov    eax,0x0
c001f8d6:	eb 05                	jmp    c001f8dd <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f8d8:	b8 01 00 00 00       	mov    eax,0x1
c001f8dd:	83 c4 58             	add    esp,0x58
c001f8e0:	5f                   	pop    edi
c001f8e1:	c3                   	ret    

c001f8e2 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f8e2:	83 ec 2c             	sub    esp,0x2c
c001f8e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f8ed:	83 ec 08             	sub    esp,0x8
c001f8f0:	68 18 b1 02 c0       	push   0xc002b118
c001f8f5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f8f9:	e8 7d 0e fe ff       	call   c000077b <strcmp>
c001f8fe:	83 c4 10             	add    esp,0x10
c001f901:	85 c0                	test   eax,eax
c001f903:	0f 94 c0             	sete   al
c001f906:	84 c0                	test   al,al
c001f908:	74 0d                	je     c001f917 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f90a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f912:	e9 a6 00 00 00       	jmp    c001f9bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f917:	83 ec 08             	sub    esp,0x8
c001f91a:	68 0a b1 02 c0       	push   0xc002b10a
c001f91f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f923:	e8 53 0e fe ff       	call   c000077b <strcmp>
c001f928:	83 c4 10             	add    esp,0x10
c001f92b:	85 c0                	test   eax,eax
c001f92d:	0f 94 c0             	sete   al
c001f930:	84 c0                	test   al,al
c001f932:	74 0a                	je     c001f93e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f934:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f93c:	eb 7f                	jmp    c001f9bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f93e:	83 ec 08             	sub    esp,0x8
c001f941:	68 10 b1 02 c0       	push   0xc002b110
c001f946:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f94a:	e8 2c 0e fe ff       	call   c000077b <strcmp>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	85 c0                	test   eax,eax
c001f954:	0f 94 c0             	sete   al
c001f957:	84 c0                	test   al,al
c001f959:	74 0a                	je     c001f965 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f95b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f963:	eb 58                	jmp    c001f9bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f965:	83 ec 08             	sub    esp,0x8
c001f968:	68 6c 80 02 c0       	push   0xc002806c
c001f96d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f971:	e8 05 0e fe ff       	call   c000077b <strcmp>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	85 c0                	test   eax,eax
c001f97b:	0f 94 c0             	sete   al
c001f97e:	84 c0                	test   al,al
c001f980:	74 0a                	je     c001f98c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f982:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f98a:	eb 31                	jmp    c001f9bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f98c:	83 ec 08             	sub    esp,0x8
c001f98f:	68 16 b1 02 c0       	push   0xc002b116
c001f994:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f998:	e8 de 0d fe ff       	call   c000077b <strcmp>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	85 c0                	test   eax,eax
c001f9a2:	0f 94 c0             	sete   al
c001f9a5:	84 c0                	test   al,al
c001f9a7:	74 0a                	je     c001f9b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f9a9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f9b1:	eb 0a                	jmp    c001f9bd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f9b3:	b8 08 00 00 00       	mov    eax,0x8
c001f9b8:	e9 04 01 00 00       	jmp    c001fac1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f9bd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f9c4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f9c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f9cd:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001f9d4:	83 f8 ff             	cmp    eax,0xffffffff
c001f9d7:	75 34                	jne    c001fa0d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f9d9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f9dd:	88 c2                	mov    dl,al
c001f9df:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001f9e4:	01 d0                	add    eax,edx
c001f9e6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f9ea:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c001f9f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f9f4:	89 14 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],edx
c001f9fb:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001fa00:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fa04:	89 14 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],edx
c001fa0b:	eb 17                	jmp    c001fa24 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fa0d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fa11:	88 c2                	mov    dl,al
c001fa13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fa17:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001fa1e:	01 d0                	add    eax,edx
c001fa20:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fa24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fa28:	88 04 24             	mov    BYTE PTR [esp],al
c001fa2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fa2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fa3b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fa40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	68 00 20 00 00       	push   0x2000
c001fa50:	e8 95 fb fe ff       	call   c000f5ea <malloc>
c001fa55:	83 c4 10             	add    esp,0x10
c001fa58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa5c:	68 00 20 00 00       	push   0x2000
c001fa61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa65:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fa69:	50                   	push   eax
c001fa6a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fa6e:	50                   	push   eax
c001fa6f:	e8 ad 76 fe ff       	call   c0007121 <f_mkfs>
c001fa74:	83 c4 10             	add    esp,0x10
c001fa77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fa7b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa80:	75 07                	jne    c001fa89 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fa82:	b8 00 00 00 00       	mov    eax,0x0
c001fa87:	eb 38                	jmp    c001fac1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fa89:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fa8e:	75 17                	jne    c001faa7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fa90:	83 ec 0c             	sub    esp,0xc
c001fa93:	68 48 b1 02 c0       	push   0xc002b148
c001fa98:	e8 f2 2d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001fa9d:	83 c4 10             	add    esp,0x10
c001faa0:	b8 09 00 00 00       	mov    eax,0x9
c001faa5:	eb 1a                	jmp    c001fac1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001faa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faab:	83 ec 08             	sub    esp,0x8
c001faae:	50                   	push   eax
c001faaf:	68 1c b1 02 c0       	push   0xc002b11c
c001fab4:	e8 d6 2d ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c001fab9:	83 c4 10             	add    esp,0x10
c001fabc:	b8 01 00 00 00       	mov    eax,0x1
c001fac1:	83 c4 2c             	add    esp,0x2c
c001fac4:	c3                   	ret    
c001fac5:	90                   	nop

c001fac6 <FAT::tryMount(LogicalDisk*, int)>:
c001fac6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001facc:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001fad1:	83 f8 14             	cmp    eax,0x14
c001fad4:	75 17                	jne    c001faed <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	68 2e b1 02 c0       	push   0xc002b12e
c001fade:	e8 fe 9e ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c001fae3:	83 c4 10             	add    esp,0x10
c001fae6:	b0 00                	mov    al,0x0
c001fae8:	e9 d7 01 00 00       	jmp    c001fcc4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001faed:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001faf4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fafa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fb00:	3d 00 02 00 00       	cmp    eax,0x200
c001fb05:	74 07                	je     c001fb0e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fb07:	b0 00                	mov    al,0x0
c001fb09:	e9 b6 01 00 00       	jmp    c001fcc4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fb0e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fb16:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fb1d:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c001fb24:	83 f8 ff             	cmp    eax,0xffffffff
c001fb27:	74 07                	je     c001fb30 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fb29:	b0 01                	mov    al,0x1
c001fb2b:	e9 94 01 00 00       	jmp    c001fcc4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fb30:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fb3a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fb42:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fb49:	88 c2                	mov    dl,al
c001fb4b:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001fb50:	01 d0                	add    eax,edx
c001fb52:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fb59:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c001fb5f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fb66:	89 14 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],edx
c001fb6d:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001fb72:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fb79:	89 14 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],edx
c001fb80:	83 ec 0c             	sub    esp,0xc
c001fb83:	68 54 02 00 00       	push   0x254
c001fb88:	e8 5d fa fe ff       	call   c000f5ea <malloc>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fb97:	83 ec 04             	sub    esp,0x4
c001fb9a:	6a 00                	push   0x0
c001fb9c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fba3:	50                   	push   eax
c001fba4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fbab:	e8 2f 51 fe ff       	call   c0004cdf <f_mount>
c001fbb0:	83 c4 10             	add    esp,0x10
c001fbb3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fbba:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fbc2:	74 19                	je     c001fbdd <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fbce:	e8 37 fa fe ff       	call   c000f60a <rfree>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	b0 00                	mov    al,0x0
c001fbd8:	e9 e7 00 00 00       	jmp    c001fcc4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fbdd:	83 ec 04             	sub    esp,0x4
c001fbe0:	68 00 01 00 00       	push   0x100
c001fbe5:	6a 00                	push   0x0
c001fbe7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fbee:	50                   	push   eax
c001fbef:	e8 97 0a fe ff       	call   c000068b <memset>
c001fbf4:	83 c4 10             	add    esp,0x10
c001fbf7:	83 ec 08             	sub    esp,0x8
c001fbfa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fc01:	50                   	push   eax
c001fc02:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fc09:	50                   	push   eax
c001fc0a:	e8 d2 0b fe ff       	call   c00007e1 <strcat>
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	83 ec 08             	sub    esp,0x8
c001fc15:	68 3c b1 02 c0       	push   0xc002b13c
c001fc1a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fc21:	50                   	push   eax
c001fc22:	e8 ba 0b fe ff       	call   c00007e1 <strcat>
c001fc27:	83 c4 10             	add    esp,0x10
c001fc2a:	83 ec 04             	sub    esp,0x4
c001fc2d:	6a 01                	push   0x1
c001fc2f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fc36:	50                   	push   eax
c001fc37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fc3b:	50                   	push   eax
c001fc3c:	e8 00 51 fe ff       	call   c0004d41 <f_open>
c001fc41:	83 c4 10             	add    esp,0x10
c001fc44:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fc4b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	74 0a                	je     c001fc60 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fc56:	78 2d                	js     c001fc85 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fc58:	83 e8 04             	sub    eax,0x4
c001fc5b:	83 f8 01             	cmp    eax,0x1
c001fc5e:	77 25                	ja     c001fc85 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fc60:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fc6f:	50                   	push   eax
c001fc70:	e8 1e 5c fe ff       	call   c0005893 <f_close>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	90                   	nop
c001fc79:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fc81:	74 3a                	je     c001fcbd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fc83:	eb 2d                	jmp    c001fcb2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fc85:	83 ec 0c             	sub    esp,0xc
c001fc88:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fc8f:	e8 76 f9 fe ff       	call   c000f60a <rfree>
c001fc94:	83 c4 10             	add    esp,0x10
c001fc97:	83 ec 04             	sub    esp,0x4
c001fc9a:	6a 00                	push   0x0
c001fc9c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fca3:	50                   	push   eax
c001fca4:	6a 00                	push   0x0
c001fca6:	e8 34 50 fe ff       	call   c0004cdf <f_mount>
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	b0 00                	mov    al,0x0
c001fcb0:	eb 12                	jmp    c001fcc4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcb2:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c001fcb7:	40                   	inc    eax
c001fcb8:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c001fcbd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fcc4:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fcca:	c3                   	ret    
c001fccb:	90                   	nop

c001fccc <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fccc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fcd2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fcda:	74 0a                	je     c001fce6 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fcdc:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fce4:	75 0a                	jne    c001fcf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fce6:	b8 04 00 00 00       	mov    eax,0x4
c001fceb:	e9 db 00 00 00       	jmp    c001fdcb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fcf0:	83 ec 08             	sub    esp,0x8
c001fcf3:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fcfa:	50                   	push   eax
c001fcfb:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fd02:	e8 96 61 fe ff       	call   c0005e9d <f_readdir>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fd11:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fd17:	83 ec 0c             	sub    esp,0xc
c001fd1a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fd21:	83 c0 1a             	add    eax,0x1a
c001fd24:	50                   	push   eax
c001fd25:	e8 7e 09 fe ff       	call   c00006a8 <strlen>
c001fd2a:	83 c4 10             	add    esp,0x10
c001fd2d:	ba 00 00 00 00       	mov    edx,0x0
c001fd32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd36:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fd3a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fd41:	0f b6 c0             	movzx  eax,al
c001fd44:	83 e0 10             	and    eax,0x10
c001fd47:	74 07                	je     c001fd50 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fd49:	b8 02 00 00 00       	mov    eax,0x2
c001fd4e:	eb 05                	jmp    c001fd55 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fd50:	b8 01 00 00 00       	mov    eax,0x1
c001fd55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd59:	83 ec 08             	sub    esp,0x8
c001fd5c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fd63:	83 c0 1a             	add    eax,0x1a
c001fd66:	50                   	push   eax
c001fd67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fd6b:	83 c0 10             	add    eax,0x10
c001fd6e:	50                   	push   eax
c001fd6f:	e8 b6 09 fe ff       	call   c000072a <strcpy>
c001fd74:	83 c4 10             	add    esp,0x10
c001fd77:	83 ec 04             	sub    esp,0x4
c001fd7a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fd81:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd85:	50                   	push   eax
c001fd86:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fd8d:	e8 c3 08 fe ff       	call   c0000655 <memcpy>
c001fd92:	83 c4 10             	add    esp,0x10
c001fd95:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fd9c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fda2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fda9:	84 c0                	test   al,al
c001fdab:	75 07                	jne    c001fdb4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fdad:	b8 07 00 00 00       	mov    eax,0x7
c001fdb2:	eb 17                	jmp    c001fdcb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fdb4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fdbb:	85 c0                	test   eax,eax
c001fdbd:	75 07                	jne    c001fdc6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fdbf:	b8 00 00 00 00       	mov    eax,0x0
c001fdc4:	eb 05                	jmp    c001fdcb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fdc6:	b8 01 00 00 00       	mov    eax,0x1
c001fdcb:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fdd1:	c3                   	ret    

c001fdd2 <FAT::read(void*, unsigned long, void*, int*)>:
c001fdd2:	83 ec 1c             	sub    esp,0x1c
c001fdd5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fdda:	74 07                	je     c001fde3 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fddc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fde1:	75 07                	jne    c001fdea <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fde3:	b8 04 00 00 00       	mov    eax,0x4
c001fde8:	eb 3d                	jmp    c001fe27 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fdea:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fdee:	50                   	push   eax
c001fdef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fdf7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fdfb:	e8 7d 53 fe ff       	call   c000517d <f_read>
c001fe00:	83 c4 10             	add    esp,0x10
c001fe03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe0b:	89 c2                	mov    edx,eax
c001fe0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fe11:	89 10                	mov    DWORD PTR [eax],edx
c001fe13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe17:	85 c0                	test   eax,eax
c001fe19:	75 07                	jne    c001fe22 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fe1b:	b8 00 00 00 00       	mov    eax,0x0
c001fe20:	eb 05                	jmp    c001fe27 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fe22:	b8 01 00 00 00       	mov    eax,0x1
c001fe27:	83 c4 1c             	add    esp,0x1c
c001fe2a:	c3                   	ret    
c001fe2b:	90                   	nop

c001fe2c <FAT::write(void*, unsigned long, void*, int*)>:
c001fe2c:	83 ec 1c             	sub    esp,0x1c
c001fe2f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fe34:	74 07                	je     c001fe3d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fe36:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fe3b:	75 07                	jne    c001fe44 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fe3d:	b8 04 00 00 00       	mov    eax,0x4
c001fe42:	eb 3d                	jmp    c001fe81 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fe44:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fe48:	50                   	push   eax
c001fe49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fe4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe55:	e8 a3 55 fe ff       	call   c00053fd <f_write>
c001fe5a:	83 c4 10             	add    esp,0x10
c001fe5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe65:	89 c2                	mov    edx,eax
c001fe67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fe6b:	89 10                	mov    DWORD PTR [eax],edx
c001fe6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe71:	85 c0                	test   eax,eax
c001fe73:	75 07                	jne    c001fe7c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fe75:	b8 00 00 00 00       	mov    eax,0x0
c001fe7a:	eb 05                	jmp    c001fe81 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fe7c:	b8 01 00 00 00       	mov    eax,0x1
c001fe81:	83 c4 1c             	add    esp,0x1c
c001fe84:	c3                   	ret    
c001fe85:	90                   	nop

c001fe86 <FAT::close(void*)>:
c001fe86:	83 ec 1c             	sub    esp,0x1c
c001fe89:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fe8e:	75 07                	jne    c001fe97 <FAT::close(void*)+0x11>
c001fe90:	b8 04 00 00 00       	mov    eax,0x4
c001fe95:	eb 36                	jmp    c001fecd <FAT::close(void*)+0x47>
c001fe97:	83 ec 0c             	sub    esp,0xc
c001fe9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fe9e:	e8 f0 59 fe ff       	call   c0005893 <f_close>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001feb1:	e8 44 f7 fe ff       	call   c000f5fa <free>
c001feb6:	83 c4 10             	add    esp,0x10
c001feb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001febd:	85 c0                	test   eax,eax
c001febf:	75 07                	jne    c001fec8 <FAT::close(void*)+0x42>
c001fec1:	b8 00 00 00 00       	mov    eax,0x0
c001fec6:	eb 05                	jmp    c001fecd <FAT::close(void*)+0x47>
c001fec8:	b8 01 00 00 00       	mov    eax,0x1
c001fecd:	83 c4 1c             	add    esp,0x1c
c001fed0:	c3                   	ret    
c001fed1:	90                   	nop

c001fed2 <FAT::closeDir(void*)>:
c001fed2:	83 ec 1c             	sub    esp,0x1c
c001fed5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001feda:	75 07                	jne    c001fee3 <FAT::closeDir(void*)+0x11>
c001fedc:	b8 04 00 00 00       	mov    eax,0x4
c001fee1:	eb 36                	jmp    c001ff19 <FAT::closeDir(void*)+0x47>
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001feea:	e8 8c 5f fe ff       	call   c0005e7b <f_closedir>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fef6:	83 ec 0c             	sub    esp,0xc
c001fef9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fefd:	e8 f8 f6 fe ff       	call   c000f5fa <free>
c001ff02:	83 c4 10             	add    esp,0x10
c001ff05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff09:	85 c0                	test   eax,eax
c001ff0b:	75 07                	jne    c001ff14 <FAT::closeDir(void*)+0x42>
c001ff0d:	b8 00 00 00 00       	mov    eax,0x0
c001ff12:	eb 05                	jmp    c001ff19 <FAT::closeDir(void*)+0x47>
c001ff14:	b8 01 00 00 00       	mov    eax,0x1
c001ff19:	83 c4 1c             	add    esp,0x1c
c001ff1c:	c3                   	ret    
c001ff1d:	90                   	nop

c001ff1e <FAT::seek(void*, unsigned long long)>:
c001ff1e:	83 ec 2c             	sub    esp,0x2c
c001ff21:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ff2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff31:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ff36:	75 07                	jne    c001ff3f <FAT::seek(void*, unsigned long long)+0x21>
c001ff38:	b8 04 00 00 00       	mov    eax,0x4
c001ff3d:	eb 2f                	jmp    c001ff6e <FAT::seek(void*, unsigned long long)+0x50>
c001ff3f:	83 ec 04             	sub    esp,0x4
c001ff42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff4a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ff4e:	e8 6f 59 fe ff       	call   c00058c2 <f_lseek>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff5e:	85 c0                	test   eax,eax
c001ff60:	75 07                	jne    c001ff69 <FAT::seek(void*, unsigned long long)+0x4b>
c001ff62:	b8 00 00 00 00       	mov    eax,0x0
c001ff67:	eb 05                	jmp    c001ff6e <FAT::seek(void*, unsigned long long)+0x50>
c001ff69:	b8 01 00 00 00       	mov    eax,0x1
c001ff6e:	83 c4 2c             	add    esp,0x2c
c001ff71:	c3                   	ret    

c001ff72 <fatWrapperReadDisk>:
c001ff72:	83 ec 1c             	sub    esp,0x1c
c001ff75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff79:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff81:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ff91:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c001ff98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffa3:	52                   	push   edx
c001ffa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffac:	50                   	push   eax
c001ffad:	e8 a2 5f ff ff       	call   c0015f54 <LogicalDisk::read(unsigned long long, int, void*)>
c001ffb2:	83 c4 20             	add    esp,0x20
c001ffb5:	83 c4 1c             	add    esp,0x1c
c001ffb8:	c3                   	ret    

c001ffb9 <fatWrapperWriteDisk>:
c001ffb9:	83 ec 1c             	sub    esp,0x1c
c001ffbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ffcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ffd3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ffd8:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c001ffdf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffea:	52                   	push   edx
c001ffeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fff3:	50                   	push   eax
c001fff4:	e8 c7 5f ff ff       	call   c0015fc0 <LogicalDisk::write(unsigned long long, int, void*)>
c001fff9:	83 c4 20             	add    esp,0x20
c001fffc:	83 c4 1c             	add    esp,0x1c
c001ffff:	c3                   	ret    

c0020000 <fatWrapperIoctl>:
c0020000:	53                   	push   ebx
c0020001:	83 ec 28             	sub    esp,0x28
c0020004:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020008:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002000c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020010:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020014:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020019:	75 31                	jne    c002004c <fatWrapperIoctl+0x4c>
c002001b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002001f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020023:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020028:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c002002f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020035:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002003b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002003f:	66 89 02             	mov    WORD PTR [edx],ax
c0020042:	b8 00 00 00 00       	mov    eax,0x0
c0020047:	e9 b2 00 00 00       	jmp    c00200fe <fatWrapperIoctl+0xfe>
c002004c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020051:	75 6a                	jne    c00200bd <fatWrapperIoctl+0xbd>
c0020053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002005b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020060:	8b 04 85 e0 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d20]
c0020067:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002006d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020073:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020079:	89 c8                	mov    eax,ecx
c002007b:	89 da                	mov    edx,ebx
c002007d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020081:	c1 e0 0a             	shl    eax,0xa
c0020084:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020089:	8b 0c 8d e0 d2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2d20]
c0020090:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020096:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002009c:	89 cb                	mov    ebx,ecx
c002009e:	c1 fb 1f             	sar    ebx,0x1f
c00200a1:	53                   	push   ebx
c00200a2:	51                   	push   ecx
c00200a3:	52                   	push   edx
c00200a4:	50                   	push   eax
c00200a5:	e8 52 55 00 00       	call   c00255fc <__udivdi3>
c00200aa:	83 c4 10             	add    esp,0x10
c00200ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200b1:	89 01                	mov    DWORD PTR [ecx],eax
c00200b3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00200b6:	b8 00 00 00 00       	mov    eax,0x0
c00200bb:	eb 41                	jmp    c00200fe <fatWrapperIoctl+0xfe>
c00200bd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00200c2:	75 07                	jne    c00200cb <fatWrapperIoctl+0xcb>
c00200c4:	b8 00 00 00 00       	mov    eax,0x0
c00200c9:	eb 33                	jmp    c00200fe <fatWrapperIoctl+0xfe>
c00200cb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00200d0:	75 19                	jne    c00200eb <fatWrapperIoctl+0xeb>
c00200d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200de:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00200e4:	b8 00 00 00 00       	mov    eax,0x0
c00200e9:	eb 13                	jmp    c00200fe <fatWrapperIoctl+0xfe>
c00200eb:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00200f0:	75 07                	jne    c00200f9 <fatWrapperIoctl+0xf9>
c00200f2:	b8 00 00 00 00       	mov    eax,0x0
c00200f7:	eb 05                	jmp    c00200fe <fatWrapperIoctl+0xfe>
c00200f9:	b8 04 00 00 00       	mov    eax,0x4
c00200fe:	83 c4 28             	add    esp,0x28
c0020101:	5b                   	pop    ebx
c0020102:	c3                   	ret    
c0020103:	90                   	nop

c0020104 <FAT::FAT()>:
c0020104:	83 ec 1c             	sub    esp,0x1c
c0020107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002010b:	83 ec 0c             	sub    esp,0xc
c002010e:	50                   	push   eax
c002010f:	e8 80 2a ff ff       	call   c0012b94 <Filesystem::Filesystem()>
c0020114:	83 c4 10             	add    esp,0x10
c0020117:	ba 78 b1 02 c0       	mov    edx,0xc002b178
c002011c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020120:	89 10                	mov    DWORD PTR [eax],edx
c0020122:	c7 05 e0 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2e0,0x0
c002012c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020134:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020139:	7f 15                	jg     c0020150 <FAT::FAT()+0x4c>
c002013b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002013f:	c7 04 85 00 e3 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1d00],0xffffffff
c002014a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002014e:	eb e4                	jmp    c0020134 <FAT::FAT()+0x30>
c0020150:	90                   	nop
c0020151:	83 c4 1c             	add    esp,0x1c
c0020154:	c3                   	ret    
c0020155:	90                   	nop

c0020156 <FAT::fixFilepath(char*)>:
c0020156:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002015a:	8a 00                	mov    al,BYTE PTR [eax]
c002015c:	3c 40                	cmp    al,0x40
c002015e:	7e 2c                	jle    c002018c <FAT::fixFilepath(char*)+0x36>
c0020160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020164:	8a 00                	mov    al,BYTE PTR [eax]
c0020166:	83 e8 41             	sub    eax,0x41
c0020169:	88 c2                	mov    dl,al
c002016b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002016f:	88 10                	mov    BYTE PTR [eax],dl
c0020171:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020175:	8a 00                	mov    al,BYTE PTR [eax]
c0020177:	0f be c0             	movsx  eax,al
c002017a:	8b 04 85 00 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1d00]
c0020181:	83 c0 30             	add    eax,0x30
c0020184:	88 c2                	mov    dl,al
c0020186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002018a:	88 10                	mov    BYTE PTR [eax],dl
c002018c:	90                   	nop
c002018d:	c3                   	ret    

c002018e <FAT::open(char const*, void**, FileOpenMode)>:
c002018e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020194:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002019c:	74 0a                	je     c00201a8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002019e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00201a6:	75 0a                	jne    c00201b2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00201a8:	b8 04 00 00 00       	mov    eax,0x4
c00201ad:	e9 fd 00 00 00       	jmp    c00202af <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00201b2:	83 ec 08             	sub    esp,0x8
c00201b5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00201bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00201c0:	50                   	push   eax
c00201c1:	e8 64 05 fe ff       	call   c000072a <strcpy>
c00201c6:	83 c4 10             	add    esp,0x10
c00201c9:	83 ec 08             	sub    esp,0x8
c00201cc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00201d0:	50                   	push   eax
c00201d1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00201d8:	e8 79 ff ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c00201dd:	83 c4 10             	add    esp,0x10
c00201e0:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00201e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00201ef:	83 e0 01             	and    eax,0x1
c00201f2:	74 08                	je     c00201fc <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00201f4:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00201fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020203:	83 e0 04             	and    eax,0x4
c0020206:	74 10                	je     c0020218 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020208:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020210:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020218:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002021f:	83 e0 02             	and    eax,0x2
c0020222:	74 08                	je     c002022c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020224:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002022c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020233:	83 e0 08             	and    eax,0x8
c0020236:	74 08                	je     c0020240 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020238:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020240:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020247:	83 e0 10             	and    eax,0x10
c002024a:	74 08                	je     c0020254 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002024c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020254:	83 ec 0c             	sub    esp,0xc
c0020257:	68 50 02 00 00       	push   0x250
c002025c:	e8 89 f3 fe ff       	call   c000f5ea <malloc>
c0020261:	83 c4 10             	add    esp,0x10
c0020264:	89 c2                	mov    edx,eax
c0020266:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002026d:	89 10                	mov    DWORD PTR [eax],edx
c002026f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020277:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002027e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020280:	83 ec 04             	sub    esp,0x4
c0020283:	52                   	push   edx
c0020284:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020288:	52                   	push   edx
c0020289:	50                   	push   eax
c002028a:	e8 b2 4a fe ff       	call   c0004d41 <f_open>
c002028f:	83 c4 10             	add    esp,0x10
c0020292:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020299:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00202a1:	74 07                	je     c00202aa <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00202a3:	b8 01 00 00 00       	mov    eax,0x1
c00202a8:	eb 05                	jmp    c00202af <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00202aa:	b8 00 00 00 00       	mov    eax,0x0
c00202af:	81 c4 1c 01 00 00    	add    esp,0x11c
c00202b5:	c3                   	ret    

c00202b6 <FAT::openDir(char const*, void**)>:
c00202b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00202bc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00202c4:	74 0a                	je     c00202d0 <FAT::openDir(char const*, void**)+0x1a>
c00202c6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00202ce:	75 07                	jne    c00202d7 <FAT::openDir(char const*, void**)+0x21>
c00202d0:	b8 04 00 00 00       	mov    eax,0x4
c00202d5:	eb 7d                	jmp    c0020354 <FAT::openDir(char const*, void**)+0x9e>
c00202d7:	83 ec 08             	sub    esp,0x8
c00202da:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00202e5:	50                   	push   eax
c00202e6:	e8 3f 04 fe ff       	call   c000072a <strcpy>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	83 ec 08             	sub    esp,0x8
c00202f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00202f5:	50                   	push   eax
c00202f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00202fd:	e8 54 fe ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c0020302:	83 c4 10             	add    esp,0x10
c0020305:	83 ec 0c             	sub    esp,0xc
c0020308:	6a 4c                	push   0x4c
c002030a:	e8 db f2 fe ff       	call   c000f5ea <malloc>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	89 c2                	mov    edx,eax
c0020314:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002031b:	89 10                	mov    DWORD PTR [eax],edx
c002031d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020324:	8b 00                	mov    eax,DWORD PTR [eax]
c0020326:	83 ec 08             	sub    esp,0x8
c0020329:	8d 54 24 14          	lea    edx,[esp+0x14]
c002032d:	52                   	push   edx
c002032e:	50                   	push   eax
c002032f:	e8 45 5a fe ff       	call   c0005d79 <f_opendir>
c0020334:	83 c4 10             	add    esp,0x10
c0020337:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002033e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020346:	74 07                	je     c002034f <FAT::openDir(char const*, void**)+0x99>
c0020348:	b8 01 00 00 00       	mov    eax,0x1
c002034d:	eb 05                	jmp    c0020354 <FAT::openDir(char const*, void**)+0x9e>
c002034f:	b8 00 00 00 00       	mov    eax,0x0
c0020354:	81 c4 1c 01 00 00    	add    esp,0x11c
c002035a:	c3                   	ret    
c002035b:	90                   	nop

c002035c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002035c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020362:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002036a:	75 0a                	jne    c0020376 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002036c:	b8 04 00 00 00       	mov    eax,0x4
c0020371:	e9 c9 00 00 00       	jmp    c002043f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020376:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002037e:	75 0a                	jne    c002038a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020380:	b8 04 00 00 00       	mov    eax,0x4
c0020385:	e9 b5 00 00 00       	jmp    c002043f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002038a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020392:	75 0a                	jne    c002039e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020394:	b8 04 00 00 00       	mov    eax,0x4
c0020399:	e9 a1 00 00 00       	jmp    c002043f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002039e:	83 ec 08             	sub    esp,0x8
c00203a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00203a8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00203af:	50                   	push   eax
c00203b0:	e8 75 03 fe ff       	call   c000072a <strcpy>
c00203b5:	83 c4 10             	add    esp,0x10
c00203b8:	83 ec 08             	sub    esp,0x8
c00203bb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00203c2:	50                   	push   eax
c00203c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00203ca:	e8 87 fd ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c00203cf:	83 c4 10             	add    esp,0x10
c00203d2:	83 ec 08             	sub    esp,0x8
c00203d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00203d9:	50                   	push   eax
c00203da:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00203e1:	50                   	push   eax
c00203e2:	e8 51 5b fe ff       	call   c0005f38 <f_stat>
c00203e7:	83 c4 10             	add    esp,0x10
c00203ea:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00203f1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00203f8:	85 c0                	test   eax,eax
c00203fa:	74 07                	je     c0020403 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00203fc:	83 f8 04             	cmp    eax,0x4
c00203ff:	74 32                	je     c0020433 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020401:	eb 37                	jmp    c002043a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020403:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020407:	0f b6 c0             	movzx  eax,al
c002040a:	83 e0 10             	and    eax,0x10
c002040d:	0f 95 c2             	setne  dl
c0020410:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020417:	88 10                	mov    BYTE PTR [eax],dl
c0020419:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002041c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020420:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020427:	89 01                	mov    DWORD PTR [ecx],eax
c0020429:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002042c:	b8 00 00 00 00       	mov    eax,0x0
c0020431:	eb 0c                	jmp    c002043f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020433:	b8 02 00 00 00       	mov    eax,0x2
c0020438:	eb 05                	jmp    c002043f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002043a:	b8 01 00 00 00       	mov    eax,0x1
c002043f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020445:	c3                   	ret    

c0020446 <FAT::unlink(char const*)>:
c0020446:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002044c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020454:	75 07                	jne    c002045d <FAT::unlink(char const*)+0x17>
c0020456:	b8 04 00 00 00       	mov    eax,0x4
c002045b:	eb 5c                	jmp    c00204b9 <FAT::unlink(char const*)+0x73>
c002045d:	83 ec 08             	sub    esp,0x8
c0020460:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020467:	8d 44 24 18          	lea    eax,[esp+0x18]
c002046b:	50                   	push   eax
c002046c:	e8 b9 02 fe ff       	call   c000072a <strcpy>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	83 ec 08             	sub    esp,0x8
c0020477:	8d 44 24 14          	lea    eax,[esp+0x14]
c002047b:	50                   	push   eax
c002047c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020483:	e8 ce fc ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c0020488:	83 c4 10             	add    esp,0x10
c002048b:	83 ec 0c             	sub    esp,0xc
c002048e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020492:	50                   	push   eax
c0020493:	e8 f2 5d fe ff       	call   c000628a <f_unlink>
c0020498:	83 c4 10             	add    esp,0x10
c002049b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00204a2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204a9:	85 c0                	test   eax,eax
c00204ab:	75 07                	jne    c00204b4 <FAT::unlink(char const*)+0x6e>
c00204ad:	b8 00 00 00 00       	mov    eax,0x0
c00204b2:	eb 05                	jmp    c00204b9 <FAT::unlink(char const*)+0x73>
c00204b4:	b8 01 00 00 00       	mov    eax,0x1
c00204b9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204bf:	c3                   	ret    

c00204c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00204c0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00204c6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00204cd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00204d4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00204d8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00204dc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00204e4:	75 0a                	jne    c00204f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00204e6:	b8 04 00 00 00       	mov    eax,0x4
c00204eb:	e9 1c 01 00 00       	jmp    c002060c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00204f0:	83 ec 08             	sub    esp,0x8
c00204f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00204fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00204fe:	50                   	push   eax
c00204ff:	e8 26 02 fe ff       	call   c000072a <strcpy>
c0020504:	83 c4 10             	add    esp,0x10
c0020507:	83 ec 08             	sub    esp,0x8
c002050a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002050e:	50                   	push   eax
c002050f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020516:	e8 3b fc ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c002051b:	83 c4 10             	add    esp,0x10
c002051e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020526:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002052e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020533:	83 e0 01             	and    eax,0x1
c0020536:	74 08                	je     c0020540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020538:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020540:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020545:	83 e0 02             	and    eax,0x2
c0020548:	74 08                	je     c0020552 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002054a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020552:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020557:	83 e0 04             	and    eax,0x4
c002055a:	74 08                	je     c0020564 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002055c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020564:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020569:	83 e0 08             	and    eax,0x8
c002056c:	74 08                	je     c0020576 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002056e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020576:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002057b:	83 e0 01             	and    eax,0x1
c002057e:	74 08                	je     c0020588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020580:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020588:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002058d:	83 e0 02             	and    eax,0x2
c0020590:	74 08                	je     c002059a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020592:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002059a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002059f:	83 e0 04             	and    eax,0x4
c00205a2:	74 08                	je     c00205ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00205a4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00205ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205b1:	83 e0 08             	and    eax,0x8
c00205b4:	74 08                	je     c00205be <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00205b6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00205be:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00205c5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00205cc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00205d4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00205dc:	83 ec 04             	sub    esp,0x4
c00205df:	52                   	push   edx
c00205e0:	50                   	push   eax
c00205e1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00205e5:	50                   	push   eax
c00205e6:	e8 41 63 fe ff       	call   c000692c <f_chmod>
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00205f5:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00205fc:	85 c0                	test   eax,eax
c00205fe:	75 07                	jne    c0020607 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020600:	b8 00 00 00 00       	mov    eax,0x0
c0020605:	eb 05                	jmp    c002060c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020607:	b8 01 00 00 00       	mov    eax,0x1
c002060c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020612:	c3                   	ret    
c0020613:	90                   	nop

c0020614 <FAT::rename(char const*, char const*)>:
c0020614:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002061a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020622:	74 0a                	je     c002062e <FAT::rename(char const*, char const*)+0x1a>
c0020624:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002062c:	75 0a                	jne    c0020638 <FAT::rename(char const*, char const*)+0x24>
c002062e:	b8 04 00 00 00       	mov    eax,0x4
c0020633:	e9 98 00 00 00       	jmp    c00206d0 <FAT::rename(char const*, char const*)+0xbc>
c0020638:	83 ec 08             	sub    esp,0x8
c002063b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020642:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020649:	50                   	push   eax
c002064a:	e8 db 00 fe ff       	call   c000072a <strcpy>
c002064f:	83 c4 10             	add    esp,0x10
c0020652:	83 ec 08             	sub    esp,0x8
c0020655:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002065c:	50                   	push   eax
c002065d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020664:	e8 ed fa ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c0020669:	83 c4 10             	add    esp,0x10
c002066c:	83 ec 08             	sub    esp,0x8
c002066f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020676:	8d 44 24 18          	lea    eax,[esp+0x18]
c002067a:	50                   	push   eax
c002067b:	e8 aa 00 fe ff       	call   c000072a <strcpy>
c0020680:	83 c4 10             	add    esp,0x10
c0020683:	83 ec 08             	sub    esp,0x8
c0020686:	8d 44 24 14          	lea    eax,[esp+0x14]
c002068a:	50                   	push   eax
c002068b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020692:	e8 bf fa ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c0020697:	83 c4 10             	add    esp,0x10
c002069a:	83 ec 08             	sub    esp,0x8
c002069d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00206a1:	50                   	push   eax
c00206a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00206a9:	50                   	push   eax
c00206aa:	e8 8a 5f fe ff       	call   c0006639 <f_rename>
c00206af:	83 c4 10             	add    esp,0x10
c00206b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00206b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00206c0:	85 c0                	test   eax,eax
c00206c2:	75 07                	jne    c00206cb <FAT::rename(char const*, char const*)+0xb7>
c00206c4:	b8 00 00 00 00       	mov    eax,0x0
c00206c9:	eb 05                	jmp    c00206d0 <FAT::rename(char const*, char const*)+0xbc>
c00206cb:	b8 01 00 00 00       	mov    eax,0x1
c00206d0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00206d6:	c3                   	ret    
c00206d7:	90                   	nop

c00206d8 <FAT::mkdir(char const*)>:
c00206d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206e6:	75 07                	jne    c00206ef <FAT::mkdir(char const*)+0x17>
c00206e8:	b8 04 00 00 00       	mov    eax,0x4
c00206ed:	eb 5c                	jmp    c002074b <FAT::mkdir(char const*)+0x73>
c00206ef:	83 ec 08             	sub    esp,0x8
c00206f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00206f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206fd:	50                   	push   eax
c00206fe:	e8 27 00 fe ff       	call   c000072a <strcpy>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	83 ec 08             	sub    esp,0x8
c0020709:	8d 44 24 14          	lea    eax,[esp+0x14]
c002070d:	50                   	push   eax
c002070e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020715:	e8 3c fa ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c002071a:	83 c4 10             	add    esp,0x10
c002071d:	83 ec 0c             	sub    esp,0xc
c0020720:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020724:	50                   	push   eax
c0020725:	e8 e3 5c fe ff       	call   c000640d <f_mkdir>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020734:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002073b:	85 c0                	test   eax,eax
c002073d:	75 07                	jne    c0020746 <FAT::mkdir(char const*)+0x6e>
c002073f:	b8 00 00 00 00       	mov    eax,0x0
c0020744:	eb 05                	jmp    c002074b <FAT::mkdir(char const*)+0x73>
c0020746:	b8 01 00 00 00       	mov    eax,0x1
c002074b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020751:	c3                   	ret    

c0020752 <FAT::exists(char const*)>:
c0020752:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020758:	83 ec 08             	sub    esp,0x8
c002075b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020766:	50                   	push   eax
c0020767:	e8 be ff fd ff       	call   c000072a <strcpy>
c002076c:	83 c4 10             	add    esp,0x10
c002076f:	83 ec 08             	sub    esp,0x8
c0020772:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020776:	50                   	push   eax
c0020777:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002077e:	e8 d3 f9 ff ff       	call   c0020156 <FAT::fixFilepath(char*)>
c0020783:	83 c4 10             	add    esp,0x10
c0020786:	83 ec 08             	sub    esp,0x8
c0020789:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020790:	50                   	push   eax
c0020791:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020795:	50                   	push   eax
c0020796:	e8 9d 57 fe ff       	call   c0005f38 <f_stat>
c002079b:	83 c4 10             	add    esp,0x10
c002079e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00207a5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00207ac:	85 c0                	test   eax,eax
c00207ae:	75 04                	jne    c00207b4 <FAT::exists(char const*)+0x62>
c00207b0:	b0 01                	mov    al,0x1
c00207b2:	eb 02                	jmp    c00207b6 <FAT::exists(char const*)+0x64>
c00207b4:	b0 00                	mov    al,0x0
c00207b6:	81 c4 2c 02 00 00    	add    esp,0x22c
c00207bc:	c3                   	ret    
c00207bd:	90                   	nop

c00207be <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00207be:	b8 08 00 00 00       	mov    eax,0x8
c00207c3:	c3                   	ret    

c00207c4 <ISO9660::seek(void*, unsigned long long)>:
c00207c4:	53                   	push   ebx
c00207c5:	b8 04 00 00 00       	mov    eax,0x4
c00207ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00207ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00207d6:	85 d2                	test   edx,edx
c00207d8:	74 17                	je     c00207f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00207da:	89 c8                	mov    eax,ecx
c00207dc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00207df:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00207e2:	b8 01 00 00 00       	mov    eax,0x1
c00207e7:	73 08                	jae    c00207f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00207e9:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00207ec:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00207ef:	31 c0                	xor    eax,eax
c00207f1:	5b                   	pop    ebx
c00207f2:	c3                   	ret    
c00207f3:	90                   	nop

c00207f4 <ISO9660::tell(void*, unsigned long long*)>:
c00207f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00207f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207fc:	85 d2                	test   edx,edx
c00207fe:	74 12                	je     c0020812 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020800:	85 c0                	test   eax,eax
c0020802:	74 0e                	je     c0020812 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020804:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020807:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002080a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002080d:	89 10                	mov    DWORD PTR [eax],edx
c002080f:	31 c0                	xor    eax,eax
c0020811:	c3                   	ret    
c0020812:	b8 04 00 00 00       	mov    eax,0x4
c0020817:	c3                   	ret    

c0020818 <ISO9660::getName()>:
c0020818:	b8 d4 b1 02 c0       	mov    eax,0xc002b1d4
c002081d:	c3                   	ret    

c002081e <ISO9660::stat(void*, unsigned long long*)>:
c002081e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020822:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020826:	85 d2                	test   edx,edx
c0020828:	74 12                	je     c002083c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002082a:	85 c0                	test   eax,eax
c002082c:	74 0e                	je     c002083c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002082e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020831:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020834:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020837:	89 10                	mov    DWORD PTR [eax],edx
c0020839:	31 c0                	xor    eax,eax
c002083b:	c3                   	ret    
c002083c:	b8 04 00 00 00       	mov    eax,0x4
c0020841:	c3                   	ret    

c0020842 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020842:	b8 01 00 00 00       	mov    eax,0x1
c0020847:	c3                   	ret    

c0020848 <ISO9660::unlink(char const*)>:
c0020848:	b8 01 00 00 00       	mov    eax,0x1
c002084d:	c3                   	ret    

c002084e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002084e:	b8 01 00 00 00       	mov    eax,0x1
c0020853:	c3                   	ret    

c0020854 <ISO9660::rename(char const*, char const*)>:
c0020854:	b8 01 00 00 00       	mov    eax,0x1
c0020859:	c3                   	ret    

c002085a <ISO9660::mkdir(char const*)>:
c002085a:	b8 01 00 00 00       	mov    eax,0x1
c002085f:	c3                   	ret    

c0020860 <ISO9660::close(void*)>:
c0020860:	83 ec 0c             	sub    esp,0xc
c0020863:	b8 04 00 00 00       	mov    eax,0x4
c0020868:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002086c:	85 d2                	test   edx,edx
c002086e:	74 0e                	je     c002087e <ISO9660::close(void*)+0x1e>
c0020870:	83 ec 0c             	sub    esp,0xc
c0020873:	52                   	push   edx
c0020874:	e8 81 ed fe ff       	call   c000f5fa <free>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	31 c0                	xor    eax,eax
c002087e:	83 c4 0c             	add    esp,0xc
c0020881:	c3                   	ret    

c0020882 <ISO9660::closeDir(void*)>:
c0020882:	83 ec 0c             	sub    esp,0xc
c0020885:	b8 04 00 00 00       	mov    eax,0x4
c002088a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002088e:	85 d2                	test   edx,edx
c0020890:	74 0e                	je     c00208a0 <ISO9660::closeDir(void*)+0x1e>
c0020892:	83 ec 0c             	sub    esp,0xc
c0020895:	52                   	push   edx
c0020896:	e8 5f ed fe ff       	call   c000f5fa <free>
c002089b:	83 c4 10             	add    esp,0x10
c002089e:	31 c0                	xor    eax,eax
c00208a0:	83 c4 0c             	add    esp,0xc
c00208a3:	c3                   	ret    

c00208a4 <ISO9660::~ISO9660()>:
c00208a4:	83 ec 0c             	sub    esp,0xc
c00208a7:	ba 38 b2 02 c0       	mov    edx,0xc002b238
c00208ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b0:	89 10                	mov    DWORD PTR [eax],edx
c00208b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208b6:	83 ec 0c             	sub    esp,0xc
c00208b9:	50                   	push   eax
c00208ba:	e8 f9 22 ff ff       	call   c0012bb8 <Filesystem::~Filesystem()>
c00208bf:	83 c4 10             	add    esp,0x10
c00208c2:	90                   	nop
c00208c3:	83 c4 0c             	add    esp,0xc
c00208c6:	c3                   	ret    
c00208c7:	90                   	nop

c00208c8 <ISO9660::~ISO9660()>:
c00208c8:	83 ec 0c             	sub    esp,0xc
c00208cb:	83 ec 0c             	sub    esp,0xc
c00208ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208d2:	e8 cd ff ff ff       	call   c00208a4 <ISO9660::~ISO9660()>
c00208d7:	83 c4 10             	add    esp,0x10
c00208da:	83 ec 08             	sub    esp,0x8
c00208dd:	6a 08                	push   0x8
c00208df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208e3:	e8 c7 1e ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00208e8:	83 c4 10             	add    esp,0x10
c00208eb:	83 c4 0c             	add    esp,0xc
c00208ee:	c3                   	ret    

c00208ef <__memmem(unsigned char*, int, unsigned char*, int)>:
c00208ef:	55                   	push   ebp
c00208f0:	31 c9                	xor    ecx,ecx
c00208f2:	57                   	push   edi
c00208f3:	56                   	push   esi
c00208f4:	53                   	push   ebx
c00208f5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00208f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00208fd:	89 eb                	mov    ebx,ebp
c00208ff:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020903:	39 ce                	cmp    esi,ecx
c0020905:	7e 17                	jle    c002091e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020907:	31 d2                	xor    edx,edx
c0020909:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002090d:	7d 13                	jge    c0020922 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002090f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020913:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020916:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020919:	75 0d                	jne    c0020928 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002091b:	42                   	inc    edx
c002091c:	eb eb                	jmp    c0020909 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002091e:	31 c0                	xor    eax,eax
c0020920:	eb 0a                	jmp    c002092c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020922:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020926:	eb 04                	jmp    c002092c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020928:	41                   	inc    ecx
c0020929:	43                   	inc    ebx
c002092a:	eb d7                	jmp    c0020903 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002092c:	5b                   	pop    ebx
c002092d:	5e                   	pop    esi
c002092e:	5f                   	pop    edi
c002092f:	5d                   	pop    ebp
c0020930:	c3                   	ret    

c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020931:	56                   	push   esi
c0020932:	53                   	push   ebx
c0020933:	52                   	push   edx
c0020934:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020938:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002093c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020940:	39 0d e0 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3e0,ecx
c0020946:	75 08                	jne    c0020950 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020948:	38 05 54 c2 02 c0    	cmp    BYTE PTR ds:0xc002c254,al
c002094e:	74 2b                	je     c002097b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020950:	83 ec 0c             	sub    esp,0xc
c0020953:	a2 54 c2 02 c0       	mov    ds:0xc002c254,al
c0020958:	68 00 e4 02 c0       	push   0xc002e400
c002095d:	0f be c0             	movsx  eax,al
c0020960:	6a 01                	push   0x1
c0020962:	89 0d e0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e0,ecx
c0020968:	31 db                	xor    ebx,ebx
c002096a:	53                   	push   ebx
c002096b:	51                   	push   ecx
c002096c:	ff 34 85 dc d1 02 c0 	push   DWORD PTR [eax*4-0x3ffd2e24]
c0020973:	e8 dc 55 ff ff       	call   c0015f54 <LogicalDisk::read(unsigned long long, int, void*)>
c0020978:	83 c4 20             	add    esp,0x20
c002097b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020983:	c7 44 24 14 00 e4 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e400
c002098b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002098f:	58                   	pop    eax
c0020990:	5b                   	pop    ebx
c0020991:	5e                   	pop    esi
c0020992:	e9 be fc fd ff       	jmp    c0000655 <memcpy>
c0020997:	90                   	nop

c0020998 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020998:	81 ec 10 08 00 00    	sub    esp,0x810
c002099e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00209a5:	83 c0 41             	add    eax,0x41
c00209a8:	0f be c0             	movsx  eax,al
c00209ab:	50                   	push   eax
c00209ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209b0:	50                   	push   eax
c00209b1:	6a 10                	push   0x10
c00209b3:	e8 79 ff ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209b8:	83 c4 10             	add    esp,0x10
c00209bb:	31 c0                	xor    eax,eax
c00209bd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00209c2:	75 1d                	jne    c00209e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00209c4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00209c9:	75 16                	jne    c00209e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00209cb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00209d0:	75 0f                	jne    c00209e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00209d2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00209d7:	75 08                	jne    c00209e1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00209d9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00209de:	0f 94 c0             	sete   al
c00209e1:	81 c4 0c 08 00 00    	add    esp,0x80c
c00209e7:	c3                   	ret    

c00209e8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00209e8:	55                   	push   ebp
c00209e9:	57                   	push   edi
c00209ea:	56                   	push   esi
c00209eb:	53                   	push   ebx
c00209ec:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00209f2:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00209f9:	85 ed                	test   ebp,ebp
c00209fb:	0f 84 d6 01 00 00    	je     c0020bd7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020a01:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020a09:	0f 84 c8 01 00 00    	je     c0020bd7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020a0f:	b8 01 00 00 00       	mov    eax,0x1
c0020a14:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020a18:	0f 85 be 01 00 00    	jne    c0020bdc <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020a1e:	31 d2                	xor    edx,edx
c0020a20:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020a27:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020a2a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020a2d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020a31:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020a34:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a3b:	01 f0                	add    eax,esi
c0020a3d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020a40:	11 fa                	adc    edx,edi
c0020a42:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020a46:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020a4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a4e:	19 d1                	sbb    ecx,edx
c0020a50:	72 0a                	jb     c0020a5c <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a5a:	eb 13                	jmp    c0020a6f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020a64:	29 f0                	sub    eax,esi
c0020a66:	19 fa                	sbb    edx,edi
c0020a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020a72:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020a75:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020a79:	51                   	push   ecx
c0020a7a:	c1 e0 0b             	shl    eax,0xb
c0020a7d:	01 c6                	add    esi,eax
c0020a7f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020a83:	11 d7                	adc    edi,edx
c0020a85:	50                   	push   eax
c0020a86:	89 fa                	mov    edx,edi
c0020a88:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020a8c:	89 f0                	mov    eax,esi
c0020a8e:	53                   	push   ebx
c0020a8f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020a93:	50                   	push   eax
c0020a94:	e8 98 fe ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a9d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020aa0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020aa4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020aaa:	83 c4 10             	add    esp,0x10
c0020aad:	b8 00 08 00 00       	mov    eax,0x800
c0020ab2:	29 d0                	sub    eax,edx
c0020ab4:	39 c1                	cmp    ecx,eax
c0020ab6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020aba:	83 d9 00             	sbb    ecx,0x0
c0020abd:	7d 1c                	jge    c0020adb <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020abf:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020ac4:	75 12                	jne    c0020ad8 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020ac6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020acd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ad3:	e9 fb 00 00 00       	jmp    c0020bd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020ad8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020adb:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020ade:	31 d2                	xor    edx,edx
c0020ae0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020ae4:	39 c2                	cmp    edx,eax
c0020ae6:	7d 14                	jge    c0020afc <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020ae8:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020aef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020af3:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020af6:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020af9:	42                   	inc    edx
c0020afa:	eb e8                	jmp    c0020ae4 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020afc:	89 c3                	mov    ebx,eax
c0020afe:	85 c0                	test   eax,eax
c0020b00:	79 02                	jns    c0020b04 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020b02:	31 db                	xor    ebx,ebx
c0020b04:	99                   	cdq    
c0020b05:	01 c3                	add    ebx,eax
c0020b07:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020b0e:	01 c6                	add    esi,eax
c0020b10:	11 d7                	adc    edi,edx
c0020b12:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020b16:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020b1a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020b1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020b21:	29 c6                	sub    esi,eax
c0020b23:	19 d7                	sbb    edi,edx
c0020b25:	89 34 24             	mov    DWORD PTR [esp],esi
c0020b28:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020b2c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020b31:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020b34:	b8 00 00 00 00       	mov    eax,0x0
c0020b39:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020b3d:	7d 3e                	jge    c0020b7d <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020b3f:	52                   	push   edx
c0020b40:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020b44:	50                   	push   eax
c0020b45:	53                   	push   ebx
c0020b46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020b4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020b4e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020b52:	50                   	push   eax
c0020b53:	e8 d9 fd ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b58:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020b60:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020b65:	81 c3 00 08 00 00    	add    ebx,0x800
c0020b6b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020b73:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020b78:	83 c4 10             	add    esp,0x10
c0020b7b:	eb af                	jmp    c0020b2c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b81:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020b84:	74 32                	je     c0020bb8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020b86:	50                   	push   eax
c0020b87:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020b8b:	50                   	push   eax
c0020b8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020b90:	50                   	push   eax
c0020b91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020b95:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020b99:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020b9d:	56                   	push   esi
c0020b9e:	e8 8e fd ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ba3:	83 c4 0c             	add    esp,0xc
c0020ba6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020baa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020bae:	50                   	push   eax
c0020baf:	53                   	push   ebx
c0020bb0:	e8 a0 fa fd ff       	call   c0000655 <memcpy>
c0020bb5:	83 c4 10             	add    esp,0x10
c0020bb8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020bbf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020bc7:	89 38                	mov    DWORD PTR [eax],edi
c0020bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bcd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020bd0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020bd3:	31 c0                	xor    eax,eax
c0020bd5:	eb 05                	jmp    c0020bdc <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020bd7:	b8 04 00 00 00       	mov    eax,0x4
c0020bdc:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020be2:	5b                   	pop    ebx
c0020be3:	5e                   	pop    esi
c0020be4:	5f                   	pop    edi
c0020be5:	5d                   	pop    ebp
c0020be6:	c3                   	ret    
c0020be7:	90                   	nop

c0020be8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020be8:	55                   	push   ebp
c0020be9:	57                   	push   edi
c0020bea:	56                   	push   esi
c0020beb:	53                   	push   ebx
c0020bec:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020bf2:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020bf9:	85 f6                	test   esi,esi
c0020bfb:	0f 84 64 02 00 00    	je     c0020e65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020c01:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020c09:	0f 84 56 02 00 00    	je     c0020e65 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020c0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020c12:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020c15:	75 0a                	jne    c0020c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020c17:	b8 07 00 00 00       	mov    eax,0x7
c0020c1c:	e9 49 02 00 00       	jmp    c0020e6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c21:	50                   	push   eax
c0020c22:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020c26:	50                   	push   eax
c0020c27:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020c2e:	53                   	push   ebx
c0020c2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020c31:	c1 e0 0b             	shl    eax,0xb
c0020c34:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020c37:	c1 e8 0b             	shr    eax,0xb
c0020c3a:	50                   	push   eax
c0020c3b:	e8 f1 fc ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020c43:	83 c4 10             	add    esp,0x10
c0020c46:	89 c1                	mov    ecx,eax
c0020c48:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020c4b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020c51:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020c54:	84 db                	test   bl,bl
c0020c56:	0f 85 90 00 00 00    	jne    c0020cec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020c5c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020c62:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020c68:	29 c7                	sub    edi,eax
c0020c6a:	89 fb                	mov    ebx,edi
c0020c6c:	c1 fb 1f             	sar    ebx,0x1f
c0020c6f:	01 f8                	add    eax,edi
c0020c71:	11 da                	adc    edx,ebx
c0020c73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c7b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020c7e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020c81:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c84:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c8e:	89 d8                	mov    eax,ebx
c0020c90:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020c93:	ba 00 00 00 00       	mov    edx,0x0
c0020c98:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020c9c:	b8 00 00 00 00       	mov    eax,0x0
c0020ca1:	73 0b                	jae    c0020cae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ca6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020caa:	29 f8                	sub    eax,edi
c0020cac:	19 da                	sbb    edx,ebx
c0020cae:	89 d3                	mov    ebx,edx
c0020cb0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020cb3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020cb6:	09 c3                	or     ebx,eax
c0020cb8:	0f 84 59 ff ff ff    	je     c0020c17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020cbe:	55                   	push   ebp
c0020cbf:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020cc3:	50                   	push   eax
c0020cc4:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ccb:	53                   	push   ebx
c0020ccc:	8b 06                	mov    eax,DWORD PTR [esi]
c0020cce:	c1 e0 0b             	shl    eax,0xb
c0020cd1:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020cd5:	c1 e8 0b             	shr    eax,0xb
c0020cd8:	50                   	push   eax
c0020cd9:	e8 53 fc ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020cde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ce1:	83 c4 10             	add    esp,0x10
c0020ce4:	25 ff 07 00 00       	and    eax,0x7ff
c0020ce9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020cec:	57                   	push   edi
c0020ced:	6a 28                	push   0x28
c0020cef:	6a 00                	push   0x0
c0020cf1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020cf5:	50                   	push   eax
c0020cf6:	e8 90 f9 fd ff       	call   c000068b <memset>
c0020cfb:	31 d2                	xor    edx,edx
c0020cfd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020d00:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020d06:	89 f8                	mov    eax,edi
c0020d08:	83 c0 21             	add    eax,0x21
c0020d0b:	83 d2 00             	adc    edx,0x0
c0020d0e:	89 c7                	mov    edi,eax
c0020d10:	89 d5                	mov    ebp,edx
c0020d12:	83 c4 10             	add    esp,0x10
c0020d15:	31 c9                	xor    ecx,ecx
c0020d17:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020d1e:	83 f9 28             	cmp    ecx,0x28
c0020d21:	88 04 24             	mov    BYTE PTR [esp],al
c0020d24:	0f 94 c2             	sete   dl
c0020d27:	88 d0                	mov    al,dl
c0020d29:	ba ff 07 00 00       	mov    edx,0x7ff
c0020d2e:	39 fa                	cmp    edx,edi
c0020d30:	ba 00 00 00 00       	mov    edx,0x0
c0020d35:	19 ea                	sbb    edx,ebp
c0020d37:	0f 92 c2             	setb   dl
c0020d3a:	09 c2                	or     edx,eax
c0020d3c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020d40:	0f 94 c0             	sete   al
c0020d43:	08 d0                	or     al,dl
c0020d45:	75 16                	jne    c0020d5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020d47:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020d4b:	74 10                	je     c0020d5d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020d4d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020d50:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020d54:	41                   	inc    ecx
c0020d55:	83 c7 01             	add    edi,0x1
c0020d58:	83 d5 00             	adc    ebp,0x0
c0020d5b:	eb ba                	jmp    c0020d17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020d5d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020d64:	83 ec 0c             	sub    esp,0xc
c0020d67:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020d6b:	57                   	push   edi
c0020d6c:	e8 37 f9 fd ff       	call   c00006a8 <strlen>
c0020d71:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020d79:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020d7d:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020d84:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020d87:	5a                   	pop    edx
c0020d88:	25 ff 07 00 00       	and    eax,0x7ff
c0020d8d:	01 c8                	add    eax,ecx
c0020d8f:	59                   	pop    ecx
c0020d90:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020d96:	83 e0 02             	and    eax,0x2
c0020d99:	3c 01                	cmp    al,0x1
c0020d9b:	19 c0                	sbb    eax,eax
c0020d9d:	83 c0 02             	add    eax,0x2
c0020da0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020da4:	57                   	push   edi
c0020da5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020da9:	50                   	push   eax
c0020daa:	e8 7b f9 fd ff       	call   c000072a <strcpy>
c0020daf:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	84 c0                	test   al,al
c0020db8:	75 21                	jne    c0020ddb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020dba:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020dc2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020dca:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020dd2:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020dd9:	eb 28                	jmp    c0020e03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ddb:	fe c8                	dec    al
c0020ddd:	75 24                	jne    c0020e03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ddf:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020de7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020def:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020df7:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020dfe:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020e03:	0f b6 fb             	movzx  edi,bl
c0020e06:	31 db                	xor    ebx,ebx
c0020e08:	50                   	push   eax
c0020e09:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020e10:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020e14:	50                   	push   eax
c0020e15:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020e1c:	e8 34 f8 fd ff       	call   c0000655 <memcpy>
c0020e21:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020e28:	89 f9                	mov    ecx,edi
c0020e2a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e30:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020e33:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020e36:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020e39:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020e3c:	83 c4 10             	add    esp,0x10
c0020e3f:	39 c7                	cmp    edi,eax
c0020e41:	89 df                	mov    edi,ebx
c0020e43:	19 d7                	sbb    edi,edx
c0020e45:	72 10                	jb     c0020e57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020e47:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020e4e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020e55:	eb 0a                	jmp    c0020e61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020e57:	29 c8                	sub    eax,ecx
c0020e59:	19 da                	sbb    edx,ebx
c0020e5b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020e5e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020e61:	31 c0                	xor    eax,eax
c0020e63:	eb 05                	jmp    c0020e6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020e65:	b8 04 00 00 00       	mov    eax,0x4
c0020e6a:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020e70:	5b                   	pop    ebx
c0020e71:	5e                   	pop    esi
c0020e72:	5f                   	pop    edi
c0020e73:	5d                   	pop    ebp
c0020e74:	c3                   	ret    

c0020e75 <readRoot(unsigned int*, unsigned int*, char)>:
c0020e75:	81 ec 40 08 00 00    	sub    esp,0x840
c0020e7b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020e83:	50                   	push   eax
c0020e84:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020e88:	50                   	push   eax
c0020e89:	6a 10                	push   0x10
c0020e8b:	e8 a1 fa ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e90:	83 c4 0c             	add    esp,0xc
c0020e93:	6a 22                	push   0x22
c0020e95:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020e9c:	50                   	push   eax
c0020e9d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020ea1:	50                   	push   eax
c0020ea2:	e8 ae f7 fd ff       	call   c0000655 <memcpy>
c0020ea7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020eae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020eb2:	89 10                	mov    DWORD PTR [eax],edx
c0020eb4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020ebb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ebf:	89 10                	mov    DWORD PTR [eax],edx
c0020ec1:	b0 01                	mov    al,0x1
c0020ec3:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020ec9:	c3                   	ret    

c0020eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020eca:	55                   	push   ebp
c0020ecb:	57                   	push   edi
c0020ecc:	56                   	push   esi
c0020ecd:	53                   	push   ebx
c0020ece:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ed4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020edb:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020ee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ee6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020eea:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020eee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ef2:	75 03                	jne    c0020ef7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020ef4:	83 c3 02             	add    ebx,0x2
c0020ef7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020efa:	75 03                	jne    c0020eff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020efc:	43                   	inc    ebx
c0020efd:	eb f8                	jmp    c0020ef7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020eff:	51                   	push   ecx
c0020f00:	68 00 01 00 00       	push   0x100
c0020f05:	6a 00                	push   0x0
c0020f07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f0b:	50                   	push   eax
c0020f0c:	e8 7a f7 fd ff       	call   c000068b <memset>
c0020f11:	83 c4 10             	add    esp,0x10
c0020f14:	31 d2                	xor    edx,edx
c0020f16:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020f19:	84 c0                	test   al,al
c0020f1b:	74 21                	je     c0020f3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020f1d:	3c 2f                	cmp    al,0x2f
c0020f1f:	75 0b                	jne    c0020f2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020f21:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020f25:	bd 01 00 00 00       	mov    ebp,0x1
c0020f2a:	eb 14                	jmp    c0020f40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020f2c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020f2f:	80 f9 19             	cmp    cl,0x19
c0020f32:	77 03                	ja     c0020f37 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020f34:	83 e8 20             	sub    eax,0x20
c0020f37:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020f3b:	42                   	inc    edx
c0020f3c:	eb d8                	jmp    c0020f16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020f3e:	31 ed                	xor    ebp,ebp
c0020f40:	83 ec 0c             	sub    esp,0xc
c0020f43:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020f4a:	e8 9b e6 fe ff       	call   c000f5ea <malloc>
c0020f4f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020f56:	89 c6                	mov    esi,eax
c0020f58:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020f5e:	c1 ef 0b             	shr    edi,0xb
c0020f61:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020f68:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020f6c:	83 c4 10             	add    esp,0x10
c0020f6f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020f74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020f78:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020f7f:	74 28                	je     c0020fa9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020f81:	52                   	push   edx
c0020f82:	57                   	push   edi
c0020f83:	50                   	push   eax
c0020f84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f88:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020f8f:	e8 9d f9 ff ff       	call   c0020931 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f98:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020f9f:	05 00 08 00 00       	add    eax,0x800
c0020fa4:	83 c4 10             	add    esp,0x10
c0020fa7:	eb cb                	jmp    c0020f74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020fa9:	83 ec 0c             	sub    esp,0xc
c0020fac:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020fb0:	57                   	push   edi
c0020fb1:	e8 f2 f6 fd ff       	call   c00006a8 <strlen>
c0020fb6:	50                   	push   eax
c0020fb7:	57                   	push   edi
c0020fb8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020fbf:	56                   	push   esi
c0020fc0:	e8 2a f9 ff ff       	call   c00208ef <__memmem(unsigned char*, int, unsigned char*, int)>
c0020fc5:	83 c4 20             	add    esp,0x20
c0020fc8:	85 c0                	test   eax,eax
c0020fca:	75 13                	jne    c0020fdf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020fcc:	83 ec 0c             	sub    esp,0xc
c0020fcf:	56                   	push   esi
c0020fd0:	e8 25 e6 fe ff       	call   c000f5fa <free>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	31 c0                	xor    eax,eax
c0020fda:	e9 b3 00 00 00       	jmp    c0021092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020fdf:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020fe3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020fe7:	c1 e7 08             	shl    edi,0x8
c0020fea:	c1 e2 10             	shl    edx,0x10
c0020fed:	09 d7                	or     edi,edx
c0020fef:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020ff3:	09 d7                	or     edi,edx
c0020ff5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020ff9:	c1 e2 18             	shl    edx,0x18
c0020ffc:	09 d7                	or     edi,edx
c0020ffe:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021002:	89 d1                	mov    ecx,edx
c0021004:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021008:	c1 e1 08             	shl    ecx,0x8
c002100b:	c1 e2 10             	shl    edx,0x10
c002100e:	09 ca                	or     edx,ecx
c0021010:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021014:	09 ca                	or     edx,ecx
c0021016:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002101a:	c1 e1 18             	shl    ecx,0x18
c002101d:	09 ca                	or     edx,ecx
c002101f:	89 e9                	mov    ecx,ebp
c0021021:	84 c9                	test   cl,cl
c0021023:	74 3c                	je     c0021061 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021025:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021029:	83 ec 0c             	sub    esp,0xc
c002102c:	56                   	push   esi
c002102d:	e8 c8 e5 fe ff       	call   c000f5fa <free>
c0021032:	83 c4 0c             	add    esp,0xc
c0021035:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002103c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021041:	50                   	push   eax
c0021042:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021049:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021054:	52                   	push   edx
c0021055:	57                   	push   edi
c0021056:	53                   	push   ebx
c0021057:	e8 6e fe ff ff       	call   c0020eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002105c:	83 c4 20             	add    esp,0x20
c002105f:	eb 31                	jmp    c0021092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021061:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021064:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002106b:	d0 e8                	shr    al,1
c002106d:	89 3b                	mov    DWORD PTR [ebx],edi
c002106f:	83 e0 01             	and    eax,0x1
c0021072:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021079:	83 ec 0c             	sub    esp,0xc
c002107c:	89 13                	mov    DWORD PTR [ebx],edx
c002107e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021085:	89 03                	mov    DWORD PTR [ebx],eax
c0021087:	56                   	push   esi
c0021088:	e8 6d e5 fe ff       	call   c000f5fa <free>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	b0 01                	mov    al,0x1
c0021092:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021098:	5b                   	pop    ebx
c0021099:	5e                   	pop    esi
c002109a:	5f                   	pop    edi
c002109b:	5d                   	pop    ebp
c002109c:	c3                   	ret    

c002109d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002109d:	55                   	push   ebp
c002109e:	57                   	push   edi
c002109f:	56                   	push   esi
c00210a0:	53                   	push   ebx
c00210a1:	83 ec 20             	sub    esp,0x20
c00210a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00210a8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00210ac:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00210b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00210b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00210c0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00210c5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00210cb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00210d1:	57                   	push   edi
c00210d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210d6:	50                   	push   eax
c00210d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210db:	50                   	push   eax
c00210dc:	e8 94 fd ff ff       	call   c0020e75 <readRoot(unsigned int*, unsigned int*, char)>
c00210e1:	5a                   	pop    edx
c00210e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00210e6:	e8 bd f5 fd ff       	call   c00006a8 <strlen>
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	83 f8 03             	cmp    eax,0x3
c00210f1:	77 17                	ja     c002110a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00210f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210f7:	89 03                	mov    DWORD PTR [ebx],eax
c00210f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210fd:	89 06                	mov    DWORD PTR [esi],eax
c00210ff:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021106:	b0 01                	mov    al,0x1
c0021108:	eb 19                	jmp    c0021123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002110a:	50                   	push   eax
c002110b:	55                   	push   ebp
c002110c:	57                   	push   edi
c002110d:	56                   	push   esi
c002110e:	53                   	push   ebx
c002110f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021117:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002111b:	e8 aa fd ff ff       	call   c0020eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021120:	83 c4 20             	add    esp,0x20
c0021123:	83 c4 1c             	add    esp,0x1c
c0021126:	5b                   	pop    ebx
c0021127:	5e                   	pop    esi
c0021128:	5f                   	pop    edi
c0021129:	5d                   	pop    ebp
c002112a:	c3                   	ret    
c002112b:	90                   	nop

c002112c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002112c:	57                   	push   edi
c002112d:	56                   	push   esi
c002112e:	53                   	push   ebx
c002112f:	83 ec 10             	sub    esp,0x10
c0021132:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021136:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002113a:	85 ff                	test   edi,edi
c002113c:	0f 84 9d 00 00 00    	je     c00211df <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021142:	85 f6                	test   esi,esi
c0021144:	0f 84 95 00 00 00    	je     c00211df <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002114a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002114f:	74 17                	je     c0021168 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021151:	83 ec 0c             	sub    esp,0xc
c0021154:	68 ef b1 02 c0       	push   0xc002b1ef
c0021159:	e8 31 17 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c002115e:	83 c4 10             	add    esp,0x10
c0021161:	b8 03 00 00 00       	mov    eax,0x3
c0021166:	eb 7c                	jmp    c00211e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021168:	83 ec 0c             	sub    esp,0xc
c002116b:	6a 1c                	push   0x1c
c002116d:	e8 78 e4 fe ff       	call   c000f5ea <malloc>
c0021172:	89 07                	mov    DWORD PTR [edi],eax
c0021174:	89 c3                	mov    ebx,eax
c0021176:	58                   	pop    eax
c0021177:	8d 44 24 18          	lea    eax,[esp+0x18]
c002117b:	50                   	push   eax
c002117c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002117f:	50                   	push   eax
c0021180:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021184:	50                   	push   eax
c0021185:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021189:	50                   	push   eax
c002118a:	56                   	push   esi
c002118b:	e8 0d ff ff ff       	call   c002109d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021190:	83 c4 20             	add    esp,0x20
c0021193:	84 c0                	test   al,al
c0021195:	74 07                	je     c002119e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021197:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002119c:	74 0b                	je     c00211a9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002119e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00211a2:	b8 01 00 00 00       	mov    eax,0x1
c00211a7:	eb 3b                	jmp    c00211e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00211a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00211b1:	89 03                	mov    DWORD PTR [ebx],eax
c00211b3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00211ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00211c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00211cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00211d6:	8a 06                	mov    al,BYTE PTR [esi]
c00211d8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00211db:	31 c0                	xor    eax,eax
c00211dd:	eb 05                	jmp    c00211e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00211df:	b8 04 00 00 00       	mov    eax,0x4
c00211e4:	83 c4 10             	add    esp,0x10
c00211e7:	5b                   	pop    ebx
c00211e8:	5e                   	pop    esi
c00211e9:	5f                   	pop    edi
c00211ea:	c3                   	ret    
c00211eb:	90                   	nop

c00211ec <ISO9660::exists(char const*)>:
c00211ec:	83 ec 28             	sub    esp,0x28
c00211ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00211f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00211f7:	52                   	push   edx
c00211f8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00211fb:	52                   	push   edx
c00211fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021200:	52                   	push   edx
c0021201:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021205:	52                   	push   edx
c0021206:	50                   	push   eax
c0021207:	e8 91 fe ff ff       	call   c002109d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002120c:	83 c4 3c             	add    esp,0x3c
c002120f:	c3                   	ret    

c0021210 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021210:	56                   	push   esi
c0021211:	53                   	push   ebx
c0021212:	83 ec 14             	sub    esp,0x14
c0021215:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021219:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002121d:	85 db                	test   ebx,ebx
c002121f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021223:	0f 94 c2             	sete   dl
c0021226:	85 f6                	test   esi,esi
c0021228:	0f 94 c0             	sete   al
c002122b:	08 c2                	or     dl,al
c002122d:	75 68                	jne    c0021297 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002122f:	85 c9                	test   ecx,ecx
c0021231:	74 64                	je     c0021297 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021233:	83 ec 0c             	sub    esp,0xc
c0021236:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021239:	8d 44 24 18          	lea    eax,[esp+0x18]
c002123d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021243:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002124a:	50                   	push   eax
c002124b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002124e:	50                   	push   eax
c002124f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021253:	50                   	push   eax
c0021254:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021258:	50                   	push   eax
c0021259:	51                   	push   ecx
c002125a:	e8 3e fe ff ff       	call   c002109d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002125f:	83 c4 20             	add    esp,0x20
c0021262:	ba 01 00 00 00       	mov    edx,0x1
c0021267:	84 c0                	test   al,al
c0021269:	74 31                	je     c002129c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002126b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002126f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021276:	89 03                	mov    DWORD PTR [ebx],eax
c0021278:	ba 00 00 00 00       	mov    edx,0x0
c002127d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021281:	85 c0                	test   eax,eax
c0021283:	0f 95 06             	setne  BYTE PTR [esi]
c0021286:	74 14                	je     c002129c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021288:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002128e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021295:	eb 05                	jmp    c002129c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021297:	ba 04 00 00 00       	mov    edx,0x4
c002129c:	83 c4 14             	add    esp,0x14
c002129f:	89 d0                	mov    eax,edx
c00212a1:	5b                   	pop    ebx
c00212a2:	5e                   	pop    esi
c00212a3:	c3                   	ret    

c00212a4 <ISO9660::openDir(char const*, void**)>:
c00212a4:	57                   	push   edi
c00212a5:	56                   	push   esi
c00212a6:	53                   	push   ebx
c00212a7:	83 ec 10             	sub    esp,0x10
c00212aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00212ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00212b2:	85 ff                	test   edi,edi
c00212b4:	0f 84 95 00 00 00    	je     c002134f <ISO9660::openDir(char const*, void**)+0xab>
c00212ba:	85 f6                	test   esi,esi
c00212bc:	0f 84 8d 00 00 00    	je     c002134f <ISO9660::openDir(char const*, void**)+0xab>
c00212c2:	83 ec 0c             	sub    esp,0xc
c00212c5:	6a 1c                	push   0x1c
c00212c7:	e8 1e e3 fe ff       	call   c000f5ea <malloc>
c00212cc:	89 07                	mov    DWORD PTR [edi],eax
c00212ce:	89 c3                	mov    ebx,eax
c00212d0:	59                   	pop    ecx
c00212d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212d5:	50                   	push   eax
c00212d6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00212d9:	50                   	push   eax
c00212da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00212de:	50                   	push   eax
c00212df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00212e3:	50                   	push   eax
c00212e4:	56                   	push   esi
c00212e5:	e8 b3 fd ff ff       	call   c002109d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00212ea:	83 c4 20             	add    esp,0x20
c00212ed:	84 c0                	test   al,al
c00212ef:	74 07                	je     c00212f8 <ISO9660::openDir(char const*, void**)+0x54>
c00212f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00212f6:	75 21                	jne    c0021319 <ISO9660::openDir(char const*, void**)+0x75>
c00212f8:	0f b6 c0             	movzx  eax,al
c00212fb:	52                   	push   edx
c00212fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021300:	50                   	push   eax
c0021301:	68 15 b2 02 c0       	push   0xc002b215
c0021306:	e8 84 15 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c002130b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002130f:	83 c4 10             	add    esp,0x10
c0021312:	b8 01 00 00 00       	mov    eax,0x1
c0021317:	eb 3b                	jmp    c0021354 <ISO9660::openDir(char const*, void**)+0xb0>
c0021319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021321:	89 03                	mov    DWORD PTR [ebx],eax
c0021323:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002132a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002132e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021335:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002133c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002133f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021346:	8a 06                	mov    al,BYTE PTR [esi]
c0021348:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002134b:	31 c0                	xor    eax,eax
c002134d:	eb 05                	jmp    c0021354 <ISO9660::openDir(char const*, void**)+0xb0>
c002134f:	b8 04 00 00 00       	mov    eax,0x4
c0021354:	83 c4 10             	add    esp,0x10
c0021357:	5b                   	pop    ebx
c0021358:	5e                   	pop    esi
c0021359:	5f                   	pop    edi
c002135a:	c3                   	ret    
c002135b:	90                   	nop

c002135c <ISO9660::ISO9660()>:
c002135c:	83 ec 0c             	sub    esp,0xc
c002135f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021363:	83 ec 0c             	sub    esp,0xc
c0021366:	50                   	push   eax
c0021367:	e8 28 18 ff ff       	call   c0012b94 <Filesystem::Filesystem()>
c002136c:	83 c4 10             	add    esp,0x10
c002136f:	ba 38 b2 02 c0       	mov    edx,0xc002b238
c0021374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021378:	89 10                	mov    DWORD PTR [eax],edx
c002137a:	90                   	nop
c002137b:	83 c4 0c             	add    esp,0xc
c002137e:	c3                   	ret    
c002137f:	90                   	nop

c0021380 <SoundChannel::~SoundChannel()>:
c0021380:	83 ec 0c             	sub    esp,0xc
c0021383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021387:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002138a:	83 ec 0c             	sub    esp,0xc
c002138d:	50                   	push   eax
c002138e:	e8 67 e2 fe ff       	call   c000f5fa <free>
c0021393:	83 c4 10             	add    esp,0x10
c0021396:	90                   	nop
c0021397:	83 c4 0c             	add    esp,0xc
c002139a:	c3                   	ret    
c002139b:	90                   	nop

c002139c <SoundChannel::setSpeed(float)>:
c002139c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00213a4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00213a7:	c3                   	ret    

c00213a8 <SoundChannel::getSpeed()>:
c00213a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213ac:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00213af:	c3                   	ret    

c00213b0 <SoundChannel::setVolume(int)>:
c00213b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213b4:	83 f8 64             	cmp    eax,0x64
c00213b7:	7e 05                	jle    c00213be <SoundChannel::setVolume(int)+0xe>
c00213b9:	b8 64 00 00 00       	mov    eax,0x64
c00213be:	85 c0                	test   eax,eax
c00213c0:	79 02                	jns    c00213c4 <SoundChannel::setVolume(int)+0x14>
c00213c2:	31 c0                	xor    eax,eax
c00213c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213c8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00213cb:	c3                   	ret    

c00213cc <SoundChannel::getVolume()>:
c00213cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00213d3:	c3                   	ret    

c00213d4 <SoundChannel::pause()>:
c00213d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213d8:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00213dc:	c3                   	ret    
c00213dd:	90                   	nop

c00213de <SoundChannel::SoundChannel(int, int, int, int)>:
c00213de:	83 ec 1c             	sub    esp,0x1c
c00213e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213e5:	e8 ea ff ff ff       	call   c00213d4 <SoundChannel::pause()>
c00213ea:	83 c4 04             	add    esp,0x4
c00213ed:	6a 50                	push   0x50
c00213ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00213f3:	e8 b8 ff ff ff       	call   c00213b0 <SoundChannel::setVolume(int)>
c00213f8:	83 c4 08             	add    esp,0x8
c00213fb:	a1 b0 b2 02 c0       	mov    eax,ds:0xc002b2b0
c0021400:	50                   	push   eax
c0021401:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021405:	e8 92 ff ff ff       	call   c002139c <SoundChannel::setSpeed(float)>
c002140a:	83 c4 08             	add    esp,0x8
c002140d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021411:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021415:	89 10                	mov    DWORD PTR [eax],edx
c0021417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002141b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002141f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021426:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002142a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002142d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021432:	75 23                	jne    c0021457 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021438:	8b 10                	mov    edx,DWORD PTR [eax]
c002143a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002143e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021441:	0f af c2             	imul   eax,edx
c0021444:	85 c0                	test   eax,eax
c0021446:	79 03                	jns    c002144b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021448:	83 c0 03             	add    eax,0x3
c002144b:	c1 f8 02             	sar    eax,0x2
c002144e:	05 a0 0f 00 00       	add    eax,0xfa0
c0021453:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002145b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002145f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021466:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002146d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021471:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002147c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002147f:	c1 e0 02             	shl    eax,0x2
c0021482:	83 ec 0c             	sub    esp,0xc
c0021485:	50                   	push   eax
c0021486:	e8 5f e1 fe ff       	call   c000f5ea <malloc>
c002148b:	83 c4 10             	add    esp,0x10
c002148e:	89 c2                	mov    edx,eax
c0021490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021494:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021497:	83 ec 04             	sub    esp,0x4
c002149a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002149e:	50                   	push   eax
c002149f:	6a 01                	push   0x1
c00214a1:	6a 04                	push   0x4
c00214a3:	e8 a7 74 fe ff       	call   c000894f <src_new>
c00214a8:	83 c4 10             	add    esp,0x10
c00214ab:	89 c2                	mov    edx,eax
c00214ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00214b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b8:	85 c0                	test   eax,eax
c00214ba:	74 10                	je     c00214cc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00214bc:	83 ec 0c             	sub    esp,0xc
c00214bf:	68 94 b2 02 c0       	push   0xc002b294
c00214c4:	e8 18 85 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00214c9:	83 c4 10             	add    esp,0x10
c00214cc:	a0 00 f0 02 c0       	mov    al,ds:0xc002f000
c00214d1:	83 f0 01             	xor    eax,0x1
c00214d4:	84 c0                	test   al,al
c00214d6:	74 57                	je     c002152f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00214d8:	a1 b4 b2 02 c0       	mov    eax,ds:0xc002b2b4
c00214dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214e9:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00214f1:	7f 35                	jg     c0021528 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00214f3:	83 ec 0c             	sub    esp,0xc
c00214f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214fa:	e8 28 4a 00 00       	call   c0025f27 <__floatsisf>
c00214ff:	83 c4 10             	add    esp,0x10
c0021502:	8b 15 b4 b2 02 c0    	mov    edx,DWORD PTR ds:0xc002b2b4
c0021508:	83 ec 08             	sub    esp,0x8
c002150b:	52                   	push   edx
c002150c:	50                   	push   eax
c002150d:	e8 27 46 00 00       	call   c0025b39 <__mulsf3>
c0021512:	83 c4 10             	add    esp,0x10
c0021515:	89 c2                	mov    edx,eax
c0021517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002151b:	89 14 85 00 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1400],edx
c0021522:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021526:	eb c1                	jmp    c00214e9 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021528:	c6 05 00 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f000,0x1
c002152f:	90                   	nop
c0021530:	83 c4 1c             	add    esp,0x1c
c0021533:	c3                   	ret    

c0021534 <SoundChannel::play()>:
c0021534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021538:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002153c:	c3                   	ret    
c002153d:	90                   	nop

c002153e <SoundChannel::paused()>:
c002153e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021542:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021545:	c3                   	ret    

c0021546 <SoundChannel::getSampleRate()>:
c0021546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154a:	8b 00                	mov    eax,DWORD PTR [eax]
c002154c:	c3                   	ret    
c002154d:	90                   	nop

c002154e <SoundChannel::getBits()>:
c002154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021555:	c3                   	ret    

c0021556 <SoundChannel::getBufferUsed()>:
c0021556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002155a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002155d:	c3                   	ret    

c002155e <SoundChannel::getBufferSize()>:
c002155e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021562:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021565:	c3                   	ret    

c0021566 <SoundChannel::unbuffer(float*, int, int)>:
c0021566:	56                   	push   esi
c0021567:	53                   	push   ebx
c0021568:	83 ec 40             	sub    esp,0x40
c002156b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002156f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021576:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021579:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002157d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021581:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021585:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021589:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002158d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021591:	e8 91 49 00 00       	call   c0025f27 <__floatsisf>
c0021596:	5a                   	pop    edx
c0021597:	89 c6                	mov    esi,eax
c0021599:	ff 33                	push   DWORD PTR [ebx]
c002159b:	e8 87 49 00 00       	call   c0025f27 <__floatsisf>
c00215a0:	59                   	pop    ecx
c00215a1:	5a                   	pop    edx
c00215a2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00215a5:	50                   	push   eax
c00215a6:	e8 8e 45 00 00       	call   c0025b39 <__mulsf3>
c00215ab:	59                   	pop    ecx
c00215ac:	5a                   	pop    edx
c00215ad:	50                   	push   eax
c00215ae:	56                   	push   esi
c00215af:	e8 48 47 00 00       	call   c0025cfc <__divsf3>
c00215b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00215b7:	e8 3b 5c 00 00       	call   c00271f7 <__extendsfdf2>
c00215bc:	59                   	pop    ecx
c00215bd:	5e                   	pop    esi
c00215be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00215c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00215c6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00215ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d2:	50                   	push   eax
c00215d3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00215d6:	e8 69 6f fe ff       	call   c0008544 <src_process>
c00215db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215df:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00215e2:	83 c4 0c             	add    esp,0xc
c00215e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00215e8:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00215eb:	29 d0                	sub    eax,edx
c00215ed:	c1 e0 02             	shl    eax,0x2
c00215f0:	50                   	push   eax
c00215f1:	8d 04 91             	lea    eax,[ecx+edx*4]
c00215f4:	50                   	push   eax
c00215f5:	51                   	push   ecx
c00215f6:	e8 22 f0 fd ff       	call   c000061d <memmove>
c00215fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215ff:	83 c4 44             	add    esp,0x44
c0021602:	5b                   	pop    ebx
c0021603:	5e                   	pop    esi
c0021604:	c3                   	ret    
c0021605:	90                   	nop

c0021606 <SoundChannel::buffer8(unsigned char*, int)>:
c0021606:	55                   	push   ebp
c0021607:	57                   	push   edi
c0021608:	56                   	push   esi
c0021609:	53                   	push   ebx
c002160a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002160e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021612:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021615:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021619:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002161c:	74 7a                	je     c0021698 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002161e:	85 ff                	test   edi,edi
c0021620:	7e 76                	jle    c0021698 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021622:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021626:	8d 70 01             	lea    esi,[eax+0x1]
c0021629:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002162c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002162f:	8b 1c 9d 00 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1400]
c0021636:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021639:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002163c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002163f:	74 5e                	je     c002169f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021641:	83 ff 01             	cmp    edi,0x1
c0021644:	74 4b                	je     c0021691 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021646:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002164a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002164d:	8d 70 01             	lea    esi,[eax+0x1]
c0021650:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021653:	8b 1c 9d 00 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1400]
c002165a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002165d:	b8 02 00 00 00       	mov    eax,0x2
c0021662:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021665:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021668:	75 23                	jne    c002168d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002166a:	eb 27                	jmp    c0021693 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002166c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021671:	8d 71 01             	lea    esi,[ecx+0x1]
c0021674:	40                   	inc    eax
c0021675:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021678:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002167b:	8b 1c 9d 00 ec 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1400]
c0021682:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021685:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021688:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002168b:	74 06                	je     c0021693 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002168d:	39 c7                	cmp    edi,eax
c002168f:	75 db                	jne    c002166c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021691:	89 f8                	mov    eax,edi
c0021693:	5b                   	pop    ebx
c0021694:	5e                   	pop    esi
c0021695:	5f                   	pop    edi
c0021696:	5d                   	pop    ebp
c0021697:	c3                   	ret    
c0021698:	5b                   	pop    ebx
c0021699:	31 c0                	xor    eax,eax
c002169b:	5e                   	pop    esi
c002169c:	5f                   	pop    edi
c002169d:	5d                   	pop    ebp
c002169e:	c3                   	ret    
c002169f:	b8 01 00 00 00       	mov    eax,0x1
c00216a4:	eb ed                	jmp    c0021693 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00216a6 <SoundDevice::SoundDevice(char const*)>:
c00216a6:	83 ec 1c             	sub    esp,0x1c
c00216a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216ad:	83 ec 08             	sub    esp,0x8
c00216b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00216b4:	50                   	push   eax
c00216b5:	e8 ec 27 ff ff       	call   c0013ea6 <Device::Device(char const*)>
c00216ba:	83 c4 10             	add    esp,0x10
c00216bd:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c00216c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216c6:	89 10                	mov    DWORD PTR [eax],edx
c00216c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216cc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00216d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00216e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216ec:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00216f1:	7f 19                	jg     c002170c <SoundDevice::SoundDevice(char const*)+0x66>
c00216f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216fb:	83 c2 54             	add    edx,0x54
c00216fe:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021706:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002170a:	eb e0                	jmp    c00216ec <SoundDevice::SoundDevice(char const*)+0x46>
c002170c:	90                   	nop
c002170d:	83 c4 1c             	add    esp,0x1c
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <SoundDevice::~SoundDevice()>:
c0021712:	53                   	push   ebx
c0021713:	83 ec 18             	sub    esp,0x18
c0021716:	ba c0 b2 02 c0       	mov    edx,0xc002b2c0
c002171b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002171f:	89 10                	mov    DWORD PTR [eax],edx
c0021721:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021729:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002172e:	7f 46                	jg     c0021776 <SoundDevice::~SoundDevice()+0x64>
c0021730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021738:	83 c2 54             	add    edx,0x54
c002173b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002173f:	85 c0                	test   eax,eax
c0021741:	74 2d                	je     c0021770 <SoundDevice::~SoundDevice()+0x5e>
c0021743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021747:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002174b:	83 c2 54             	add    edx,0x54
c002174e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021752:	85 db                	test   ebx,ebx
c0021754:	74 1a                	je     c0021770 <SoundDevice::~SoundDevice()+0x5e>
c0021756:	83 ec 0c             	sub    esp,0xc
c0021759:	53                   	push   ebx
c002175a:	e8 21 fc ff ff       	call   c0021380 <SoundChannel::~SoundChannel()>
c002175f:	83 c4 10             	add    esp,0x10
c0021762:	83 ec 08             	sub    esp,0x8
c0021765:	6a 2c                	push   0x2c
c0021767:	53                   	push   ebx
c0021768:	e8 42 10 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c002176d:	83 c4 10             	add    esp,0x10
c0021770:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021774:	eb b3                	jmp    c0021729 <SoundDevice::~SoundDevice()+0x17>
c0021776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002177a:	83 ec 0c             	sub    esp,0xc
c002177d:	50                   	push   eax
c002177e:	e8 05 24 ff ff       	call   c0013b88 <Device::~Device()>
c0021783:	83 c4 10             	add    esp,0x10
c0021786:	90                   	nop
c0021787:	83 c4 18             	add    esp,0x18
c002178a:	5b                   	pop    ebx
c002178b:	c3                   	ret    

c002178c <SoundDevice::~SoundDevice()>:
c002178c:	83 ec 0c             	sub    esp,0xc
c002178f:	83 ec 0c             	sub    esp,0xc
c0021792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021796:	e8 77 ff ff ff       	call   c0021712 <SoundDevice::~SoundDevice()>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	83 ec 08             	sub    esp,0x8
c00217a1:	68 e4 01 00 00       	push   0x1e4
c00217a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217aa:	e8 00 10 ff ff       	call   c00127af <operator delete(void*, unsigned long)>
c00217af:	83 c4 10             	add    esp,0x10
c00217b2:	83 c4 0c             	add    esp,0xc
c00217b5:	c3                   	ret    

c00217b6 <SoundDevice::getFreeChannelNum()>:
c00217b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00217ba:	31 c0                	xor    eax,eax
c00217bc:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00217c4:	74 09                	je     c00217cf <SoundDevice::getFreeChannelNum()+0x19>
c00217c6:	40                   	inc    eax
c00217c7:	83 f8 20             	cmp    eax,0x20
c00217ca:	75 f0                	jne    c00217bc <SoundDevice::getFreeChannelNum()+0x6>
c00217cc:	83 c8 ff             	or     eax,0xffffffff
c00217cf:	c3                   	ret    

c00217d0 <SoundDevice::addChannel(SoundChannel*)>:
c00217d0:	56                   	push   esi
c00217d1:	53                   	push   ebx
c00217d2:	51                   	push   ecx
c00217d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00217d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217db:	53                   	push   ebx
c00217dc:	e8 d5 ff ff ff       	call   c00217b6 <SoundDevice::getFreeChannelNum()>
c00217e1:	5a                   	pop    edx
c00217e2:	83 f8 ff             	cmp    eax,0xffffffff
c00217e5:	74 51                	je     c0021838 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00217e7:	85 f6                	test   esi,esi
c00217e9:	74 4d                	je     c0021838 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00217eb:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00217f2:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00217f9:	75 30                	jne    c002182b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00217fb:	83 ec 0c             	sub    esp,0xc
c00217fe:	56                   	push   esi
c00217ff:	e8 42 fd ff ff       	call   c0021546 <SoundChannel::getSampleRate()>
c0021804:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002180a:	89 34 24             	mov    DWORD PTR [esp],esi
c002180d:	e8 3c fd ff ff       	call   c002154e <SoundChannel::getBits()>
c0021812:	83 c4 0c             	add    esp,0xc
c0021815:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002181b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002181d:	50                   	push   eax
c002181e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021824:	53                   	push   ebx
c0021825:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021828:	83 c4 10             	add    esp,0x10
c002182b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021831:	b8 01 00 00 00       	mov    eax,0x1
c0021836:	eb 03                	jmp    c002183b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021838:	83 c8 ff             	or     eax,0xffffffff
c002183b:	5a                   	pop    edx
c002183c:	5b                   	pop    ebx
c002183d:	5e                   	pop    esi
c002183e:	c3                   	ret    
c002183f:	90                   	nop

c0021840 <SoundDevice::removeChannel(int)>:
c0021840:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021848:	83 fa 1f             	cmp    edx,0x1f
c002184b:	77 23                	ja     c0021870 <SoundDevice::removeChannel(int)+0x30>
c002184d:	8d 14 90             	lea    edx,[eax+edx*4]
c0021850:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021857:	74 17                	je     c0021870 <SoundDevice::removeChannel(int)+0x30>
c0021859:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021863:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021869:	75 05                	jne    c0021870 <SoundDevice::removeChannel(int)+0x30>
c002186b:	8b 00                	mov    eax,DWORD PTR [eax]
c002186d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021870:	c3                   	ret    
c0021871:	90                   	nop

c0021872 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021872:	57                   	push   edi
c0021873:	56                   	push   esi
c0021874:	53                   	push   ebx
c0021875:	31 db                	xor    ebx,ebx
c0021877:	83 ec 10             	sub    esp,0x10
c002187a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002187e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021882:	0f 8d cb 00 00 00    	jge    c0021953 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021888:	83 ec 0c             	sub    esp,0xc
c002188b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002188f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021892:	e8 60 59 00 00       	call   c00271f7 <__extendsfdf2>
c0021897:	83 c4 10             	add    esp,0x10
c002189a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002189e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218a2:	68 00 00 f0 3f       	push   0x3ff00000
c00218a7:	6a 00                	push   0x0
c00218a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218b1:	e8 cd 48 00 00       	call   c0026183 <__adddf3>
c00218b6:	83 c4 10             	add    esp,0x10
c00218b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218c1:	68 00 00 e0 3f       	push   0x3fe00000
c00218c6:	6a 00                	push   0x0
c00218c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218d0:	e8 2b 4f 00 00       	call   c0026800 <__muldf3>
c00218d5:	83 c4 10             	add    esp,0x10
c00218d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218e0:	68 00 00 60 40       	push   0x40600000
c00218e5:	6a 00                	push   0x0
c00218e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00218ef:	e8 0c 4f 00 00       	call   c0026800 <__muldf3>
c00218f4:	59                   	pop    ecx
c00218f5:	5f                   	pop    edi
c00218f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00218fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00218fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021902:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021906:	e8 c8 57 00 00       	call   c00270d3 <__truncdfsf2>
c002190b:	5a                   	pop    edx
c002190c:	89 c7                	mov    edi,eax
c002190e:	59                   	pop    ecx
c002190f:	68 00 00 fe 42       	push   0x42fe0000
c0021914:	50                   	push   eax
c0021915:	e8 63 48 00 00       	call   c002617d <__gesf2>
c002191a:	83 c4 10             	add    esp,0x10
c002191d:	85 c0                	test   eax,eax
c002191f:	78 06                	js     c0021927 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021921:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021925:	eb 26                	jmp    c002194d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021927:	50                   	push   eax
c0021928:	50                   	push   eax
c0021929:	6a 00                	push   0x0
c002192b:	57                   	push   edi
c002192c:	e8 50 48 00 00       	call   c0026181 <__lesf2>
c0021931:	83 c4 10             	add    esp,0x10
c0021934:	85 c0                	test   eax,eax
c0021936:	7f 06                	jg     c002193e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021938:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002193c:	eb 0f                	jmp    c002194d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002193e:	83 ec 0c             	sub    esp,0xc
c0021941:	57                   	push   edi
c0021942:	e8 45 59 00 00       	call   c002728c <lrintf>
c0021947:	83 c4 10             	add    esp,0x10
c002194a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002194d:	43                   	inc    ebx
c002194e:	e9 2b ff ff ff       	jmp    c002187e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021953:	83 c4 10             	add    esp,0x10
c0021956:	5b                   	pop    ebx
c0021957:	5e                   	pop    esi
c0021958:	5f                   	pop    edi
c0021959:	c3                   	ret    

c002195a <SoundDevice::getAudio(int, float*, float*)>:
c002195a:	55                   	push   ebp
c002195b:	57                   	push   edi
c002195c:	56                   	push   esi
c002195d:	53                   	push   ebx
c002195e:	31 db                	xor    ebx,ebx
c0021960:	83 ec 20             	sub    esp,0x20
c0021963:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021967:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002196b:	c1 e0 02             	shl    eax,0x2
c002196e:	50                   	push   eax
c002196f:	6a 00                	push   0x0
c0021971:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021975:	e8 11 ed fd ff       	call   c000068b <memset>
c002197a:	83 c4 10             	add    esp,0x10
c002197d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021981:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021988:	85 c0                	test   eax,eax
c002198a:	0f 84 d7 00 00 00    	je     c0021a67 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021990:	83 ec 0c             	sub    esp,0xc
c0021993:	50                   	push   eax
c0021994:	e8 a5 fb ff ff       	call   c002153e <SoundChannel::paused()>
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	84 c0                	test   al,al
c002199e:	0f 85 c3 00 00 00    	jne    c0021a67 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00219a4:	83 ec 0c             	sub    esp,0xc
c00219a7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00219ae:	e8 19 fa ff ff       	call   c00213cc <SoundChannel::getVolume()>
c00219b3:	83 c4 10             	add    esp,0x10
c00219b6:	85 c0                	test   eax,eax
c00219b8:	0f 84 a9 00 00 00    	je     c0021a67 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00219be:	83 ec 0c             	sub    esp,0xc
c00219c1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00219c8:	e8 ff f9 ff ff       	call   c00213cc <SoundChannel::getVolume()>
c00219cd:	83 ec 0c             	sub    esp,0xc
c00219d0:	50                   	push   eax
c00219d1:	e8 51 45 00 00       	call   c0025f27 <__floatsisf>
c00219d6:	59                   	pop    ecx
c00219d7:	5d                   	pop    ebp
c00219d8:	31 ed                	xor    ebp,ebp
c00219da:	68 00 00 c8 42       	push   0x42c80000
c00219df:	50                   	push   eax
c00219e0:	e8 17 43 00 00       	call   c0025cfc <__divsf3>
c00219e5:	83 c4 10             	add    esp,0x10
c00219e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00219ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00219f0:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00219f6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00219fa:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021a01:	e8 60 fb ff ff       	call   c0021566 <SoundChannel::unbuffer(float*, int, int)>
c0021a06:	83 c4 20             	add    esp,0x20
c0021a09:	89 c1                	mov    ecx,eax
c0021a0b:	39 cd                	cmp    ebp,ecx
c0021a0d:	7d 52                	jge    c0021a61 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021a0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021a13:	50                   	push   eax
c0021a14:	50                   	push   eax
c0021a15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021a19:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021a1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021a20:	e8 14 41 00 00       	call   c0025b39 <__mulsf3>
c0021a25:	5a                   	pop    edx
c0021a26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021a2a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021a30:	e8 f2 44 00 00       	call   c0025f27 <__floatsisf>
c0021a35:	59                   	pop    ecx
c0021a36:	5a                   	pop    edx
c0021a37:	50                   	push   eax
c0021a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a3c:	e8 bb 42 00 00       	call   c0025cfc <__divsf3>
c0021a41:	59                   	pop    ecx
c0021a42:	5a                   	pop    edx
c0021a43:	50                   	push   eax
c0021a44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021a48:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021a4b:	e8 c6 3d 00 00       	call   c0025816 <__addsf3>
c0021a50:	83 c4 10             	add    esp,0x10
c0021a53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021a5b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021a5e:	45                   	inc    ebp
c0021a5f:	eb aa                	jmp    c0021a0b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021a61:	39 cf                	cmp    edi,ecx
c0021a63:	7e 02                	jle    c0021a67 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021a65:	89 cf                	mov    edi,ecx
c0021a67:	43                   	inc    ebx
c0021a68:	83 fb 20             	cmp    ebx,0x20
c0021a6b:	0f 85 10 ff ff ff    	jne    c0021981 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021a71:	83 c4 1c             	add    esp,0x1c
c0021a74:	89 f8                	mov    eax,edi
c0021a76:	5b                   	pop    ebx
c0021a77:	5e                   	pop    esi
c0021a78:	5f                   	pop    edi
c0021a79:	5d                   	pop    ebp
c0021a7a:	c3                   	ret    
c0021a7b:	90                   	nop

c0021a7c <PCI::open(int, int, void*)>:
c0021a7c:	83 ec 18             	sub    esp,0x18
c0021a7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a83:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a85:	50                   	push   eax
c0021a86:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021a89:	31 c0                	xor    eax,eax
c0021a8b:	83 c4 1c             	add    esp,0x1c
c0021a8e:	c3                   	ret    
c0021a8f:	90                   	nop

c0021a90 <PCI::close(int, int, void*)>:
c0021a90:	31 c0                	xor    eax,eax
c0021a92:	c3                   	ret    
c0021a93:	90                   	nop

c0021a94 <PCI::PCI()>:
c0021a94:	83 ec 0c             	sub    esp,0xc
c0021a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9b:	83 ec 08             	sub    esp,0x8
c0021a9e:	68 f0 b2 02 c0       	push   0xc002b2f0
c0021aa3:	50                   	push   eax
c0021aa4:	e8 81 1a ff ff       	call   c001352a <Bus::Bus(char const*)>
c0021aa9:	83 c4 10             	add    esp,0x10
c0021aac:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0021ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab5:	89 10                	mov    DWORD PTR [eax],edx
c0021ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ac1:	0f b6 d0             	movzx  edx,al
c0021ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ad9:	0f b6 d0             	movzx  edx,al
c0021adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021aef:	8d 50 01             	lea    edx,[eax+0x1]
c0021af2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021af6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021afc:	0f b6 d0             	movzx  edx,al
c0021aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b03:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021b07:	83 c9 c0             	or     ecx,0xffffffc0
c0021b0a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021b0e:	90                   	nop
c0021b0f:	83 c4 0c             	add    esp,0xc
c0021b12:	c3                   	ret    
c0021b13:	90                   	nop

c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021b14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021b18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b1d:	89 ca                	mov    edx,ecx
c0021b1f:	c1 e0 10             	shl    eax,0x10
c0021b22:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021b28:	09 d0                	or     eax,edx
c0021b2a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021b2f:	c1 e2 08             	shl    edx,0x8
c0021b32:	09 d0                	or     eax,edx
c0021b34:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021b39:	c1 e2 0b             	shl    edx,0xb
c0021b3c:	09 d0                	or     eax,edx
c0021b3e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b43:	0d 00 00 00 80       	or     eax,0x80000000
c0021b48:	ef                   	out    dx,eax
c0021b49:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b4e:	ed                   	in     eax,dx
c0021b4f:	83 e1 02             	and    ecx,0x2
c0021b52:	0f b6 c9             	movzx  ecx,cl
c0021b55:	c1 e1 03             	shl    ecx,0x3
c0021b58:	d3 e8                	shr    eax,cl
c0021b5a:	c3                   	ret    
c0021b5b:	90                   	nop

c0021b5c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021b5c:	6a 00                	push   0x0
c0021b5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b63:	50                   	push   eax
c0021b64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b69:	50                   	push   eax
c0021b6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b6f:	50                   	push   eax
c0021b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b74:	e8 9b ff ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b79:	83 c4 14             	add    esp,0x14
c0021b7c:	c3                   	ret    
c0021b7d:	90                   	nop

c0021b7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021b7e:	6a 0e                	push   0xe
c0021b80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b85:	50                   	push   eax
c0021b86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b8b:	50                   	push   eax
c0021b8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021b91:	50                   	push   eax
c0021b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b96:	e8 79 ff ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021b9b:	83 c4 14             	add    esp,0x14
c0021b9e:	0f b6 c0             	movzx  eax,al
c0021ba1:	c3                   	ret    

c0021ba2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021ba2:	55                   	push   ebp
c0021ba3:	57                   	push   edi
c0021ba4:	56                   	push   esi
c0021ba5:	53                   	push   ebx
c0021ba6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021bab:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021bb0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021bb5:	6a 0a                	push   0xa
c0021bb7:	56                   	push   esi
c0021bb8:	55                   	push   ebp
c0021bb9:	57                   	push   edi
c0021bba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021bbe:	e8 51 ff ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021bc3:	6a 0a                	push   0xa
c0021bc5:	89 c3                	mov    ebx,eax
c0021bc7:	56                   	push   esi
c0021bc8:	0f b6 db             	movzx  ebx,bl
c0021bcb:	55                   	push   ebp
c0021bcc:	57                   	push   edi
c0021bcd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021bd1:	e8 3e ff ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021bd6:	83 c4 28             	add    esp,0x28
c0021bd9:	25 00 ff 00 00       	and    eax,0xff00
c0021bde:	09 d8                	or     eax,ebx
c0021be0:	5b                   	pop    ebx
c0021be1:	5e                   	pop    esi
c0021be2:	5f                   	pop    edi
c0021be3:	5d                   	pop    ebp
c0021be4:	c3                   	ret    
c0021be5:	90                   	nop

c0021be6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021be6:	6a 08                	push   0x8
c0021be8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bed:	50                   	push   eax
c0021bee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bf3:	50                   	push   eax
c0021bf4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021bf9:	50                   	push   eax
c0021bfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021bfe:	e8 11 ff ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c03:	83 c4 14             	add    esp,0x14
c0021c06:	0f b6 c4             	movzx  eax,ah
c0021c09:	c3                   	ret    

c0021c0a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021c0a:	6a 08                	push   0x8
c0021c0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c11:	50                   	push   eax
c0021c12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c17:	50                   	push   eax
c0021c18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c1d:	50                   	push   eax
c0021c1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c22:	e8 ed fe ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c27:	83 c4 14             	add    esp,0x14
c0021c2a:	c3                   	ret    
c0021c2b:	90                   	nop

c0021c2c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021c2c:	6a 3c                	push   0x3c
c0021c2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c33:	50                   	push   eax
c0021c34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c39:	50                   	push   eax
c0021c3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c3f:	50                   	push   eax
c0021c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c44:	e8 cb fe ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c49:	83 c4 14             	add    esp,0x14
c0021c4c:	c3                   	ret    
c0021c4d:	90                   	nop

c0021c4e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021c4e:	6a 18                	push   0x18
c0021c50:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c55:	50                   	push   eax
c0021c56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c5b:	50                   	push   eax
c0021c5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021c61:	50                   	push   eax
c0021c62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c66:	e8 a9 fe ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021c6b:	83 c4 14             	add    esp,0x14
c0021c6e:	0f b6 c4             	movzx  eax,ah
c0021c71:	c3                   	ret    

c0021c72 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021c72:	55                   	push   ebp
c0021c73:	57                   	push   edi
c0021c74:	56                   	push   esi
c0021c75:	53                   	push   ebx
c0021c76:	50                   	push   eax
c0021c77:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021c7b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021c80:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021c85:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021c8a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021c91:	8d 43 12             	lea    eax,[ebx+0x12]
c0021c94:	83 c3 10             	add    ebx,0x10
c0021c97:	0f b6 c0             	movzx  eax,al
c0021c9a:	0f b6 db             	movzx  ebx,bl
c0021c9d:	50                   	push   eax
c0021c9e:	51                   	push   ecx
c0021c9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021ca3:	57                   	push   edi
c0021ca4:	55                   	push   ebp
c0021ca5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021ca9:	e8 66 fe ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cae:	53                   	push   ebx
c0021caf:	89 c6                	mov    esi,eax
c0021cb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021cb5:	c1 e6 10             	shl    esi,0x10
c0021cb8:	51                   	push   ecx
c0021cb9:	57                   	push   edi
c0021cba:	55                   	push   ebp
c0021cbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021cbf:	e8 50 fe ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cc4:	83 c4 2c             	add    esp,0x2c
c0021cc7:	0f b7 c0             	movzx  eax,ax
c0021cca:	5b                   	pop    ebx
c0021ccb:	09 f0                	or     eax,esi
c0021ccd:	5e                   	pop    esi
c0021cce:	5f                   	pop    edi
c0021ccf:	5d                   	pop    ebp
c0021cd0:	c3                   	ret    
c0021cd1:	90                   	nop

c0021cd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021cd2:	53                   	push   ebx
c0021cd3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021cd8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021cdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ce1:	c1 e1 10             	shl    ecx,0x10
c0021ce4:	25 fc 00 00 00       	and    eax,0xfc
c0021ce9:	09 c1                	or     ecx,eax
c0021ceb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021cf0:	c1 e0 08             	shl    eax,0x8
c0021cf3:	09 c1                	or     ecx,eax
c0021cf5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021cfa:	c1 e0 0b             	shl    eax,0xb
c0021cfd:	09 c1                	or     ecx,eax
c0021cff:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021d05:	89 c8                	mov    eax,ecx
c0021d07:	ef                   	out    dx,eax
c0021d08:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021d0d:	ed                   	in     eax,dx
c0021d0e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021d13:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021d18:	74 0a                	je     c0021d24 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021d1a:	0f b7 d8             	movzx  ebx,ax
c0021d1d:	89 d0                	mov    eax,edx
c0021d1f:	c1 e0 10             	shl    eax,0x10
c0021d22:	eb 05                	jmp    c0021d29 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021d24:	66 31 c0             	xor    ax,ax
c0021d27:	89 d3                	mov    ebx,edx
c0021d29:	09 c3                	or     ebx,eax
c0021d2b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021d30:	89 c8                	mov    eax,ecx
c0021d32:	ef                   	out    dx,eax
c0021d33:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021d38:	89 d8                	mov    eax,ebx
c0021d3a:	ef                   	out    dx,eax
c0021d3b:	5b                   	pop    ebx
c0021d3c:	c3                   	ret    
c0021d3d:	90                   	nop

c0021d3e <PCI::checkBus(unsigned char)>:
c0021d3e:	56                   	push   esi
c0021d3f:	53                   	push   ebx
c0021d40:	31 db                	xor    ebx,ebx
c0021d42:	51                   	push   ecx
c0021d43:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021d48:	52                   	push   edx
c0021d49:	53                   	push   ebx
c0021d4a:	43                   	inc    ebx
c0021d4b:	56                   	push   esi
c0021d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d50:	e8 2b 03 00 00       	call   c0022080 <PCI::checkDevice(unsigned char, unsigned char)>
c0021d55:	83 c4 10             	add    esp,0x10
c0021d58:	83 fb 20             	cmp    ebx,0x20
c0021d5b:	75 eb                	jne    c0021d48 <PCI::checkBus(unsigned char)+0xa>
c0021d5d:	58                   	pop    eax
c0021d5e:	5b                   	pop    ebx
c0021d5f:	5e                   	pop    esi
c0021d60:	c3                   	ret    
c0021d61:	90                   	nop

c0021d62 <PCI::foundDevice(PCIDeviceInfo)>:
c0021d62:	55                   	push   ebp
c0021d63:	57                   	push   edi
c0021d64:	56                   	push   esi
c0021d65:	53                   	push   ebx
c0021d66:	83 ec 1c             	sub    esp,0x1c
c0021d69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021d6d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021d73:	0f 84 52 01 00 00    	je     c0021ecb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021d79:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021d7d:	66 81 f9 06 04       	cmp    cx,0x406
c0021d82:	75 2c                	jne    c0021db0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021d84:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021d89:	50                   	push   eax
c0021d8a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021d8f:	50                   	push   eax
c0021d90:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021d95:	50                   	push   eax
c0021d96:	56                   	push   esi
c0021d97:	e8 b2 fe ff ff       	call   c0021c4e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021d9c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021da0:	0f b6 c0             	movzx  eax,al
c0021da3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021da7:	83 c4 2c             	add    esp,0x2c
c0021daa:	5b                   	pop    ebx
c0021dab:	5e                   	pop    esi
c0021dac:	5f                   	pop    edi
c0021dad:	5d                   	pop    ebp
c0021dae:	eb 8e                	jmp    c0021d3e <PCI::checkBus(unsigned char)>
c0021db0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021db4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021dba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021dbe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021dc2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021dc6:	88 d3                	mov    bl,dl
c0021dc8:	85 c0                	test   eax,eax
c0021dca:	74 33                	je     c0021dff <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021dcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021dcf:	85 d2                	test   edx,edx
c0021dd1:	74 28                	je     c0021dfb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021dd3:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021dd9:	31 ef                	xor    edi,ebp
c0021ddb:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021de1:	75 18                	jne    c0021dfb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021de3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021de7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021ded:	75 0c                	jne    c0021dfb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021def:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021df5:	0f 84 d0 00 00 00    	je     c0021ecb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dfd:	eb c9                	jmp    c0021dc8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021dff:	66 81 f9 01 06       	cmp    cx,0x601
c0021e04:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021e08:	75 19                	jne    c0021e23 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021e0a:	83 ec 0c             	sub    esp,0xc
c0021e0d:	68 64 01 00 00       	push   0x164
c0021e12:	e8 d3 d7 fe ff       	call   c000f5ea <malloc>
c0021e17:	89 c5                	mov    ebp,eax
c0021e19:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e1c:	e8 95 0f 00 00       	call   c0022db6 <SATABus::SATABus()>
c0021e21:	eb 1e                	jmp    c0021e41 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021e23:	66 81 f9 01 01       	cmp    cx,0x101
c0021e28:	75 60                	jne    c0021e8a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021e2a:	83 ec 0c             	sub    esp,0xc
c0021e2d:	68 70 02 00 00       	push   0x270
c0021e32:	e8 b3 d7 fe ff       	call   c000f5ea <malloc>
c0021e37:	89 c5                	mov    ebp,eax
c0021e39:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e3c:	e8 03 03 00 00       	call   c0022144 <IDE::IDE()>
c0021e41:	58                   	pop    eax
c0021e42:	5a                   	pop    edx
c0021e43:	55                   	push   ebp
c0021e44:	56                   	push   esi
c0021e45:	e8 6c 1e ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0021e4a:	83 ec 1c             	sub    esp,0x1c
c0021e4d:	b9 09 00 00 00       	mov    ecx,0x9
c0021e52:	fc                   	cld    
c0021e53:	89 e7                	mov    edi,esp
c0021e55:	89 de                	mov    esi,ebx
c0021e57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e59:	55                   	push   ebp
c0021e5a:	e8 61 1d ff ff       	call   c0013bc0 <Device::preOpenPCI(PCIDeviceInfo)>
c0021e5f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e62:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021e66:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021e6e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021e76:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021e7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e81:	83 c4 4c             	add    esp,0x4c
c0021e84:	5b                   	pop    ebx
c0021e85:	5e                   	pop    esi
c0021e86:	5f                   	pop    edi
c0021e87:	5d                   	pop    ebp
c0021e88:	ff e0                	jmp    eax
c0021e8a:	83 ec 0c             	sub    esp,0xc
c0021e8d:	68 58 01 00 00       	push   0x158
c0021e92:	e8 53 d7 fe ff       	call   c000f5ea <malloc>
c0021e97:	89 c5                	mov    ebp,eax
c0021e99:	58                   	pop    eax
c0021e9a:	5a                   	pop    edx
c0021e9b:	68 f8 b2 02 c0       	push   0xc002b2f8
c0021ea0:	55                   	push   ebp
c0021ea1:	e8 06 21 ff ff       	call   c0013fac <DriverlessDevice::DriverlessDevice(char const*)>
c0021ea6:	59                   	pop    ecx
c0021ea7:	5f                   	pop    edi
c0021ea8:	55                   	push   ebp
c0021ea9:	56                   	push   esi
c0021eaa:	e8 07 1e ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0021eaf:	b9 09 00 00 00       	mov    ecx,0x9
c0021eb4:	fc                   	cld    
c0021eb5:	89 df                	mov    edi,ebx
c0021eb7:	89 de                	mov    esi,ebx
c0021eb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021ebb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021ebf:	83 c4 2c             	add    esp,0x2c
c0021ec2:	5b                   	pop    ebx
c0021ec3:	5e                   	pop    esi
c0021ec4:	5f                   	pop    edi
c0021ec5:	5d                   	pop    ebp
c0021ec6:	e9 f5 1c ff ff       	jmp    c0013bc0 <Device::preOpenPCI(PCIDeviceInfo)>
c0021ecb:	83 c4 1c             	add    esp,0x1c
c0021ece:	5b                   	pop    ebx
c0021ecf:	5e                   	pop    esi
c0021ed0:	5f                   	pop    edi
c0021ed1:	5d                   	pop    ebp
c0021ed2:	c3                   	ret    
c0021ed3:	90                   	nop

c0021ed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021ed4:	55                   	push   ebp
c0021ed5:	57                   	push   edi
c0021ed6:	56                   	push   esi
c0021ed7:	53                   	push   ebx
c0021ed8:	83 ec 5c             	sub    esp,0x5c
c0021edb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021edf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ee3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021ee7:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021eec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021ef0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021ef4:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021ef9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021efd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021f02:	6a 0c                	push   0xc
c0021f04:	55                   	push   ebp
c0021f05:	53                   	push   ebx
c0021f06:	57                   	push   edi
c0021f07:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021f0e:	e8 01 fc ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f13:	55                   	push   ebp
c0021f14:	53                   	push   ebx
c0021f15:	57                   	push   edi
c0021f16:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021f1d:	e8 80 fc ff ff       	call   c0021ba2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021f22:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021f27:	83 c4 24             	add    esp,0x24
c0021f2a:	55                   	push   ebp
c0021f2b:	53                   	push   ebx
c0021f2c:	57                   	push   edi
c0021f2d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021f31:	e8 f6 fc ff ff       	call   c0021c2c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021f36:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021f3a:	6a 3c                	push   0x3c
c0021f3c:	55                   	push   ebp
c0021f3d:	53                   	push   ebx
c0021f3e:	57                   	push   edi
c0021f3f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021f46:	e8 c9 fb ff ff       	call   c0021b14 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f4b:	0f b6 c4             	movzx  eax,ah
c0021f4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021f52:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021f56:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021f5a:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0021f5f:	83 c4 24             	add    esp,0x24
c0021f62:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021f68:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021f6f:	74 6c                	je     c0021fdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021f71:	31 f6                	xor    esi,esi
c0021f73:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c0021f79:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021f7f:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021f85:	7e 56                	jle    c0021fdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021f87:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021f8a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021f91:	39 cb                	cmp    ebx,ecx
c0021f93:	75 45                	jne    c0021fda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021f95:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021f9c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021fa0:	75 38                	jne    c0021fda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021fa2:	83 ec 0c             	sub    esp,0xc
c0021fa5:	68 12 b3 02 c0       	push   0xc002b312
c0021faa:	e8 e0 08 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0021faf:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c0021fb5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021fbb:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021fc3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021fc7:	52                   	push   edx
c0021fc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fcc:	53                   	push   ebx
c0021fcd:	68 37 b3 02 c0       	push   0xc002b337
c0021fd2:	e8 b8 08 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0021fd7:	83 c4 20             	add    esp,0x20
c0021fda:	46                   	inc    esi
c0021fdb:	eb 96                	jmp    c0021f73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021fdd:	31 d2                	xor    edx,edx
c0021fdf:	83 ec 0c             	sub    esp,0xc
c0021fe2:	55                   	push   ebp
c0021fe3:	53                   	push   ebx
c0021fe4:	57                   	push   edi
c0021fe5:	52                   	push   edx
c0021fe6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021fea:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021ff1:	e8 7c fc ff ff       	call   c0021c72 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ff6:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021ffa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ffe:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022002:	42                   	inc    edx
c0022003:	83 c4 20             	add    esp,0x20
c0022006:	83 fa 06             	cmp    edx,0x6
c0022009:	75 d4                	jne    c0021fdf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002200b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002200f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022013:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022017:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002201b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002201f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022023:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022028:	86 e0                	xchg   al,ah
c002202a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002202f:	55                   	push   ebp
c0022030:	53                   	push   ebx
c0022031:	57                   	push   edi
c0022032:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022036:	e8 ab fb ff ff       	call   c0021be6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002203b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002203f:	55                   	push   ebp
c0022040:	53                   	push   ebx
c0022041:	57                   	push   edi
c0022042:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022049:	e8 0e fb ff ff       	call   c0021b5c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002204e:	83 ec 0c             	sub    esp,0xc
c0022051:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022056:	b9 09 00 00 00       	mov    ecx,0x9
c002205b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002205f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022063:	fc                   	cld    
c0022064:	89 e7                	mov    edi,esp
c0022066:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022068:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002206f:	e8 ee fc ff ff       	call   c0021d62 <PCI::foundDevice(PCIDeviceInfo)>
c0022074:	81 c4 8c 00 00 00    	add    esp,0x8c
c002207a:	5b                   	pop    ebx
c002207b:	5e                   	pop    esi
c002207c:	5f                   	pop    edi
c002207d:	5d                   	pop    ebp
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022080:	55                   	push   ebp
c0022081:	57                   	push   edi
c0022082:	56                   	push   esi
c0022083:	53                   	push   ebx
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002208b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022090:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022095:	6a 00                	push   0x0
c0022097:	56                   	push   esi
c0022098:	57                   	push   edi
c0022099:	55                   	push   ebp
c002209a:	e8 bd fa ff ff       	call   c0021b5c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002209f:	6a 00                	push   0x0
c00220a1:	56                   	push   esi
c00220a2:	57                   	push   edi
c00220a3:	55                   	push   ebp
c00220a4:	e8 2b fe ff ff       	call   c0021ed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00220a9:	83 c4 20             	add    esp,0x20
c00220ac:	6a 00                	push   0x0
c00220ae:	56                   	push   esi
c00220af:	57                   	push   edi
c00220b0:	55                   	push   ebp
c00220b1:	e8 c8 fa ff ff       	call   c0021b7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00220b6:	83 c4 10             	add    esp,0x10
c00220b9:	84 c0                	test   al,al
c00220bb:	79 27                	jns    c00220e4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00220bd:	bb 01 00 00 00       	mov    ebx,0x1
c00220c2:	53                   	push   ebx
c00220c3:	56                   	push   esi
c00220c4:	57                   	push   edi
c00220c5:	55                   	push   ebp
c00220c6:	e8 91 fa ff ff       	call   c0021b5c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00220cb:	83 c4 10             	add    esp,0x10
c00220ce:	66 40                	inc    ax
c00220d0:	74 0c                	je     c00220de <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00220d2:	53                   	push   ebx
c00220d3:	56                   	push   esi
c00220d4:	57                   	push   edi
c00220d5:	55                   	push   ebp
c00220d6:	e8 f9 fd ff ff       	call   c0021ed4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00220db:	83 c4 10             	add    esp,0x10
c00220de:	43                   	inc    ebx
c00220df:	83 fb 08             	cmp    ebx,0x8
c00220e2:	75 de                	jne    c00220c2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00220e4:	83 c4 0c             	add    esp,0xc
c00220e7:	5b                   	pop    ebx
c00220e8:	5e                   	pop    esi
c00220e9:	5f                   	pop    edi
c00220ea:	5d                   	pop    ebp
c00220eb:	c3                   	ret    

c00220ec <PCI::detect()>:
c00220ec:	56                   	push   esi
c00220ed:	53                   	push   ebx
c00220ee:	53                   	push   ebx
c00220ef:	31 db                	xor    ebx,ebx
c00220f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00220f5:	6a 00                	push   0x0
c00220f7:	6a 00                	push   0x0
c00220f9:	6a 00                	push   0x0
c00220fb:	56                   	push   esi
c00220fc:	e8 7d fa ff ff       	call   c0021b7e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022101:	83 c4 10             	add    esp,0x10
c0022104:	a8 80                	test   al,0x80
c0022106:	75 21                	jne    c0022129 <PCI::detect()+0x3d>
c0022108:	51                   	push   ecx
c0022109:	51                   	push   ecx
c002210a:	6a 00                	push   0x0
c002210c:	56                   	push   esi
c002210d:	e8 2c fc ff ff       	call   c0021d3e <PCI::checkBus(unsigned char)>
c0022112:	83 c4 10             	add    esp,0x10
c0022115:	eb 24                	jmp    c002213b <PCI::detect()+0x4f>
c0022117:	52                   	push   edx
c0022118:	52                   	push   edx
c0022119:	53                   	push   ebx
c002211a:	43                   	inc    ebx
c002211b:	56                   	push   esi
c002211c:	e8 1d fc ff ff       	call   c0021d3e <PCI::checkBus(unsigned char)>
c0022121:	83 c4 10             	add    esp,0x10
c0022124:	83 fb 08             	cmp    ebx,0x8
c0022127:	74 12                	je     c002213b <PCI::detect()+0x4f>
c0022129:	53                   	push   ebx
c002212a:	6a 00                	push   0x0
c002212c:	6a 00                	push   0x0
c002212e:	56                   	push   esi
c002212f:	e8 28 fa ff ff       	call   c0021b5c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022134:	83 c4 10             	add    esp,0x10
c0022137:	66 40                	inc    ax
c0022139:	74 dc                	je     c0022117 <PCI::detect()+0x2b>
c002213b:	58                   	pop    eax
c002213c:	5b                   	pop    ebx
c002213d:	5e                   	pop    esi
c002213e:	c3                   	ret    
c002213f:	90                   	nop

c0022140 <IDE::close(int, int, void*)>:
c0022140:	83 c8 ff             	or     eax,0xffffffff
c0022143:	c3                   	ret    

c0022144 <IDE::IDE()>:
c0022144:	83 ec 0c             	sub    esp,0xc
c0022147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214b:	83 ec 08             	sub    esp,0x8
c002214e:	68 80 b3 02 c0       	push   0xc002b380
c0022153:	50                   	push   eax
c0022154:	e8 e9 1e ff ff       	call   c0014042 <HardDiskController::HardDiskController(char const*)>
c0022159:	83 c4 10             	add    esp,0x10
c002215c:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c0022161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022165:	89 10                	mov    DWORD PTR [eax],edx
c0022167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022172:	90                   	nop
c0022173:	83 c4 0c             	add    esp,0xc
c0022176:	c3                   	ret    
c0022177:	90                   	nop

c0022178 <IDE::prepareInterrupt(unsigned char)>:
c0022178:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002217d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022181:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022189:	c3                   	ret    

c002218a <selectDrive(unsigned char, unsigned char)>:
c002218a:	c3                   	ret    
c002218b:	90                   	nop

c002218c <IDE::getBase(unsigned char)>:
c002218c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022195:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002219d:	c3                   	ret    

c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002219e:	55                   	push   ebp
c002219f:	57                   	push   edi
c00221a0:	56                   	push   esi
c00221a1:	53                   	push   ebx
c00221a2:	83 ec 1c             	sub    esp,0x1c
c00221a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00221a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00221ad:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00221b0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00221b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00221b8:	80 f9 03             	cmp    cl,0x3
c00221bb:	77 51                	ja     c002220e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00221bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00221c1:	0f b6 f2             	movzx  esi,dl
c00221c4:	0f b6 db             	movzx  ebx,bl
c00221c7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00221ca:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00221ce:	83 ca 80             	or     edx,0xffffff80
c00221d1:	0f b6 d2             	movzx  edx,dl
c00221d4:	52                   	push   edx
c00221d5:	6a 0c                	push   0xc
c00221d7:	56                   	push   esi
c00221d8:	57                   	push   edi
c00221d9:	e8 c0 ff ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221de:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00221e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221e7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00221eb:	ee                   	out    dx,al
c00221ec:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00221f1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00221f5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00221f9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00221fd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022205:	83 c4 2c             	add    esp,0x2c
c0022208:	5b                   	pop    ebx
c0022209:	5e                   	pop    esi
c002220a:	5f                   	pop    edi
c002220b:	5d                   	pop    ebp
c002220c:	eb 90                	jmp    c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002220e:	80 fb 07             	cmp    bl,0x7
c0022211:	77 12                	ja     c0022225 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022213:	0f b6 d2             	movzx  edx,dl
c0022216:	0f b6 db             	movzx  ebx,bl
c0022219:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022221:	89 da                	mov    edx,ebx
c0022223:	eb 2f                	jmp    c0022254 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022225:	80 fb 0d             	cmp    bl,0xd
c0022228:	77 13                	ja     c002223d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002222a:	0f b6 d2             	movzx  edx,dl
c002222d:	0f b6 db             	movzx  ebx,bl
c0022230:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022237:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002223b:	eb 17                	jmp    c0022254 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002223d:	80 fb 15             	cmp    bl,0x15
c0022240:	77 13                	ja     c0022255 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022242:	0f b6 d2             	movzx  edx,dl
c0022245:	0f b6 db             	movzx  ebx,bl
c0022248:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022250:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022254:	ee                   	out    dx,al
c0022255:	83 c4 1c             	add    esp,0x1c
c0022258:	5b                   	pop    ebx
c0022259:	5e                   	pop    esi
c002225a:	5f                   	pop    edi
c002225b:	5d                   	pop    ebp
c002225c:	c3                   	ret    
c002225d:	90                   	nop

c002225e <IDE::read(unsigned char, unsigned char)>:
c002225e:	55                   	push   ebp
c002225f:	57                   	push   edi
c0022260:	56                   	push   esi
c0022261:	53                   	push   ebx
c0022262:	83 ec 1c             	sub    esp,0x1c
c0022265:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022269:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002226d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022270:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022274:	3c 03                	cmp    al,0x3
c0022276:	77 43                	ja     c00222bb <IDE::read(unsigned char, unsigned char)+0x5d>
c0022278:	0f b6 f2             	movzx  esi,dl
c002227b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002227e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022282:	83 c8 80             	or     eax,0xffffff80
c0022285:	0f b6 c0             	movzx  eax,al
c0022288:	50                   	push   eax
c0022289:	6a 0c                	push   0xc
c002228b:	56                   	push   esi
c002228c:	57                   	push   edi
c002228d:	e8 0c ff ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022292:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022297:	0f b6 c3             	movzx  eax,bl
c002229a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002229e:	ec                   	in     al,dx
c002229f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00222a3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00222a8:	52                   	push   edx
c00222a9:	6a 0c                	push   0xc
c00222ab:	56                   	push   esi
c00222ac:	57                   	push   edi
c00222ad:	e8 ec fe ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222b2:	83 c4 20             	add    esp,0x20
c00222b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00222b9:	eb 49                	jmp    c0022304 <IDE::read(unsigned char, unsigned char)+0xa6>
c00222bb:	80 fb 07             	cmp    bl,0x7
c00222be:	77 12                	ja     c00222d2 <IDE::read(unsigned char, unsigned char)+0x74>
c00222c0:	0f b6 d2             	movzx  edx,dl
c00222c3:	0f b6 c3             	movzx  eax,bl
c00222c6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00222ce:	89 c2                	mov    edx,eax
c00222d0:	eb 31                	jmp    c0022303 <IDE::read(unsigned char, unsigned char)+0xa5>
c00222d2:	80 fb 0d             	cmp    bl,0xd
c00222d5:	77 13                	ja     c00222ea <IDE::read(unsigned char, unsigned char)+0x8c>
c00222d7:	0f b6 d2             	movzx  edx,dl
c00222da:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00222e1:	0f b6 d3             	movzx  edx,bl
c00222e4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00222e8:	eb 19                	jmp    c0022303 <IDE::read(unsigned char, unsigned char)+0xa5>
c00222ea:	31 c0                	xor    eax,eax
c00222ec:	80 fb 15             	cmp    bl,0x15
c00222ef:	77 13                	ja     c0022304 <IDE::read(unsigned char, unsigned char)+0xa6>
c00222f1:	0f b6 d2             	movzx  edx,dl
c00222f4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00222fc:	0f b6 d3             	movzx  edx,bl
c00222ff:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022303:	ec                   	in     al,dx
c0022304:	83 c4 1c             	add    esp,0x1c
c0022307:	5b                   	pop    ebx
c0022308:	5e                   	pop    esi
c0022309:	5f                   	pop    edi
c002230a:	5d                   	pop    ebp
c002230b:	c3                   	ret    

c002230c <IDE::waitInterrupt(unsigned char)>:
c002230c:	55                   	push   ebp
c002230d:	57                   	push   edi
c002230e:	56                   	push   esi
c002230f:	53                   	push   ebx
c0022310:	31 db                	xor    ebx,ebx
c0022312:	83 ec 0c             	sub    esp,0xc
c0022315:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022319:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002231e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022326:	89 e8                	mov    eax,ebp
c0022328:	84 c0                	test   al,al
c002232a:	75 34                	jne    c0022360 <IDE::waitInterrupt(unsigned char)+0x54>
c002232c:	52                   	push   edx
c002232d:	6a 0c                	push   0xc
c002232f:	56                   	push   esi
c0022330:	57                   	push   edi
c0022331:	e8 28 ff ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022336:	83 c4 10             	add    esp,0x10
c0022339:	a8 01                	test   al,0x1
c002233b:	75 2b                	jne    c0022368 <IDE::waitInterrupt(unsigned char)+0x5c>
c002233d:	f6 c3 04             	test   bl,0x4
c0022340:	75 16                	jne    c0022358 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022342:	83 fb 32             	cmp    ebx,0x32
c0022345:	7e 11                	jle    c0022358 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022347:	50                   	push   eax
c0022348:	50                   	push   eax
c0022349:	6a 00                	push   0x0
c002234b:	68 80 96 98 00       	push   0x989680
c0022350:	e8 8b b1 ff ff       	call   c001d4e0 <nanoSleep(unsigned long long)>
c0022355:	83 c4 10             	add    esp,0x10
c0022358:	83 fb 3c             	cmp    ebx,0x3c
c002235b:	74 0b                	je     c0022368 <IDE::waitInterrupt(unsigned char)+0x5c>
c002235d:	43                   	inc    ebx
c002235e:	eb be                	jmp    c002231e <IDE::waitInterrupt(unsigned char)+0x12>
c0022360:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022368:	83 c4 0c             	add    esp,0xc
c002236b:	89 e8                	mov    eax,ebp
c002236d:	5b                   	pop    ebx
c002236e:	5e                   	pop    esi
c002236f:	5f                   	pop    edi
c0022370:	5d                   	pop    ebp
c0022371:	c3                   	ret    

c0022372 <ideChannel0IRQHandler(regs*, void*)>:
c0022372:	83 ec 10             	sub    esp,0x10
c0022375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022379:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022380:	6a 07                	push   0x7
c0022382:	6a 00                	push   0x0
c0022384:	50                   	push   eax
c0022385:	e8 d4 fe ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c002238a:	83 c4 1c             	add    esp,0x1c
c002238d:	c3                   	ret    

c002238e <ideChannel1IRQHandler(regs*, void*)>:
c002238e:	83 ec 10             	sub    esp,0x10
c0022391:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022395:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002239c:	6a 07                	push   0x7
c002239e:	6a 01                	push   0x1
c00223a0:	50                   	push   eax
c00223a1:	e8 b8 fe ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00223a6:	83 c4 1c             	add    esp,0x1c
c00223a9:	c3                   	ret    

c00223aa <IDE::enableIRQs(unsigned char, bool)>:
c00223aa:	57                   	push   edi
c00223ab:	56                   	push   esi
c00223ac:	be 04 00 00 00       	mov    esi,0x4
c00223b1:	53                   	push   ebx
c00223b2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00223bb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00223c0:	0f 94 c0             	sete   al
c00223c3:	d1 e0                	shl    eax,1
c00223c5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00223cc:	0f b6 c0             	movzx  eax,al
c00223cf:	50                   	push   eax
c00223d0:	6a 0c                	push   0xc
c00223d2:	57                   	push   edi
c00223d3:	53                   	push   ebx
c00223d4:	e8 c5 fd ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223d9:	83 c4 10             	add    esp,0x10
c00223dc:	50                   	push   eax
c00223dd:	6a 0c                	push   0xc
c00223df:	57                   	push   edi
c00223e0:	53                   	push   ebx
c00223e1:	e8 78 fe ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00223e6:	83 c4 10             	add    esp,0x10
c00223e9:	4e                   	dec    esi
c00223ea:	75 f0                	jne    c00223dc <IDE::enableIRQs(unsigned char, bool)+0x32>
c00223ec:	5b                   	pop    ebx
c00223ed:	5e                   	pop    esi
c00223ee:	5f                   	pop    edi
c00223ef:	c3                   	ret    

c00223f0 <IDE::open(int, int, void*)>:
c00223f0:	55                   	push   ebp
c00223f1:	57                   	push   edi
c00223f2:	56                   	push   esi
c00223f3:	53                   	push   ebx
c00223f4:	83 ec 1c             	sub    esp,0x1c
c00223f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00223fb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022404:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002240d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022414:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002241b:	0f 85 b0 02 00 00    	jne    c00226d1 <IDE::open(int, int, void*)+0x2e1>
c0022421:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022427:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002242b:	83 e0 7f             	and    eax,0x7f
c002242e:	3c 05                	cmp    al,0x5
c0022430:	74 04                	je     c0022436 <IDE::open(int, int, void*)+0x46>
c0022432:	3c 0f                	cmp    al,0xf
c0022434:	75 32                	jne    c0022468 <IDE::open(int, int, void*)+0x78>
c0022436:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002243c:	83 e0 fc             	and    eax,0xfffffffc
c002243f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022446:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002244c:	83 e0 fc             	and    eax,0xfffffffc
c002244f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022456:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002245c:	83 e0 fc             	and    eax,0xfffffffc
c002245f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022466:	eb 14                	jmp    c002247c <IDE::open(int, int, void*)+0x8c>
c0022468:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022472:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002247c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022483:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002248a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002248e:	89 c6                	mov    esi,eax
c0022490:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022495:	c1 e6 10             	shl    esi,0x10
c0022498:	89 e8                	mov    eax,ebp
c002249a:	89 fa                	mov    edx,edi
c002249c:	c1 e0 0b             	shl    eax,0xb
c002249f:	09 f0                	or     eax,esi
c00224a1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00224a8:	c1 e6 08             	shl    esi,0x8
c00224ab:	09 c6                	or     esi,eax
c00224ad:	89 f0                	mov    eax,esi
c00224af:	0d 08 00 00 80       	or     eax,0x80000008
c00224b4:	ef                   	out    dx,eax
c00224b5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00224ba:	89 ca                	mov    edx,ecx
c00224bc:	ed                   	in     eax,dx
c00224bd:	c1 e8 10             	shr    eax,0x10
c00224c0:	3d ff ff 00 00       	cmp    eax,0xffff
c00224c5:	0f 84 f5 00 00 00    	je     c00225c0 <IDE::open(int, int, void*)+0x1d0>
c00224cb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00224d1:	89 fa                	mov    edx,edi
c00224d3:	89 f0                	mov    eax,esi
c00224d5:	ef                   	out    dx,eax
c00224d6:	b0 fe                	mov    al,0xfe
c00224d8:	89 ca                	mov    edx,ecx
c00224da:	ee                   	out    dx,al
c00224db:	89 f0                	mov    eax,esi
c00224dd:	89 fa                	mov    edx,edi
c00224df:	ef                   	out    dx,eax
c00224e0:	89 ca                	mov    edx,ecx
c00224e2:	ed                   	in     eax,dx
c00224e3:	3c fe                	cmp    al,0xfe
c00224e5:	0f 85 a9 00 00 00    	jne    c0022594 <IDE::open(int, int, void*)+0x1a4>
c00224eb:	8b 15 c8 cc 02 c0    	mov    edx,DWORD PTR ds:0xc002ccc8
c00224f1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00224f8:	74 33                	je     c002252d <IDE::open(int, int, void*)+0x13d>
c00224fa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022500:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022504:	40                   	inc    eax
c0022505:	83 ec 0c             	sub    esp,0xc
c0022508:	0f b6 c0             	movzx  eax,al
c002250b:	50                   	push   eax
c002250c:	55                   	push   ebp
c002250d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022511:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022517:	51                   	push   ecx
c0022518:	e8 b9 53 ff ff       	call   c00178d6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002251d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022522:	83 c4 1c             	add    esp,0x1c
c0022525:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002252b:	eb 0a                	jmp    c0022537 <IDE::open(int, int, void*)+0x147>
c002252d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022537:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002253e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022545:	c1 e1 10             	shl    ecx,0x10
c0022548:	c1 e0 08             	shl    eax,0x8
c002254b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022550:	09 c1                	or     ecx,eax
c0022552:	89 fa                	mov    edx,edi
c0022554:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002255b:	c1 e0 0b             	shl    eax,0xb
c002255e:	09 c1                	or     ecx,eax
c0022560:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022566:	89 c8                	mov    eax,ecx
c0022568:	ef                   	out    dx,eax
c0022569:	be fc 0c 00 00       	mov    esi,0xcfc
c002256e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022574:	89 f2                	mov    edx,esi
c0022576:	ee                   	out    dx,al
c0022577:	89 c8                	mov    eax,ecx
c0022579:	89 fa                	mov    edx,edi
c002257b:	ef                   	out    dx,eax
c002257c:	89 f2                	mov    edx,esi
c002257e:	ed                   	in     eax,dx
c002257f:	0f b6 c0             	movzx  eax,al
c0022582:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022588:	74 46                	je     c00225d0 <IDE::open(int, int, void*)+0x1e0>
c002258a:	83 ec 0c             	sub    esp,0xc
c002258d:	68 98 b3 02 c0       	push   0xc002b398
c0022592:	eb 34                	jmp    c00225c8 <IDE::open(int, int, void*)+0x1d8>
c0022594:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002259d:	75 17                	jne    c00225b6 <IDE::open(int, int, void*)+0x1c6>
c002259f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00225a4:	74 07                	je     c00225ad <IDE::open(int, int, void*)+0x1bd>
c00225a6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00225ab:	75 09                	jne    c00225b6 <IDE::open(int, int, void*)+0x1c6>
c00225ad:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00225b4:	eb 1a                	jmp    c00225d0 <IDE::open(int, int, void*)+0x1e0>
c00225b6:	83 ec 0c             	sub    esp,0xc
c00225b9:	68 a0 b3 02 c0       	push   0xc002b3a0
c00225be:	eb 08                	jmp    c00225c8 <IDE::open(int, int, void*)+0x1d8>
c00225c0:	83 ec 0c             	sub    esp,0xc
c00225c3:	68 d1 b3 02 c0       	push   0xc002b3d1
c00225c8:	e8 14 74 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00225cd:	83 c4 10             	add    esp,0x10
c00225d0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00225d7:	79 1a                	jns    c00225f3 <IDE::open(int, int, void*)+0x203>
c00225d9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00225df:	83 e0 fc             	and    eax,0xfffffffc
c00225e2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00225e9:	83 c0 08             	add    eax,0x8
c00225ec:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00225f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00225f9:	89 c2                	mov    edx,eax
c00225fb:	83 e2 0f             	and    edx,0xf
c00225fe:	66 83 fa 08          	cmp    dx,0x8
c0022602:	75 0a                	jne    c002260e <IDE::open(int, int, void*)+0x21e>
c0022604:	83 e8 02             	sub    eax,0x2
c0022607:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002260e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022614:	89 c2                	mov    edx,eax
c0022616:	83 e2 0f             	and    edx,0xf
c0022619:	66 83 fa 08          	cmp    dx,0x8
c002261d:	75 0a                	jne    c0022629 <IDE::open(int, int, void*)+0x239>
c002261f:	83 e8 02             	sub    eax,0x2
c0022622:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022629:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022630:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022637:	89 d0                	mov    eax,edx
c0022639:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002263c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022640:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022644:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022647:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002264c:	0f b6 c9             	movzx  ecx,cl
c002264f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022656:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022659:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002265d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022661:	8d 50 02             	lea    edx,[eax+0x2]
c0022664:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022669:	0f b6 d2             	movzx  edx,dl
c002266c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022672:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022675:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022679:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002267d:	8d 48 03             	lea    ecx,[eax+0x3]
c0022680:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022685:	0f b6 c9             	movzx  ecx,cl
c0022688:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002268e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022691:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022695:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022699:	8d 50 04             	lea    edx,[eax+0x4]
c002269c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00226a2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00226a7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00226ae:	66 85 f6             	test   si,si
c00226b1:	74 3e                	je     c00226f1 <IDE::open(int, int, void*)+0x301>
c00226b3:	0f b6 d2             	movzx  edx,dl
c00226b6:	83 c0 05             	add    eax,0x5
c00226b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00226bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00226c0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00226c4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00226ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00226cf:	eb 20                	jmp    c00226f1 <IDE::open(int, int, void*)+0x301>
c00226d1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00226db:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00226e5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00226ec:	e9 02 ff ff ff       	jmp    c00225f3 <IDE::open(int, int, void*)+0x203>
c00226f1:	52                   	push   edx
c00226f2:	52                   	push   edx
c00226f3:	6a 00                	push   0x0
c00226f5:	53                   	push   ebx
c00226f6:	e8 7d fa ff ff       	call   c0022178 <IDE::prepareInterrupt(unsigned char)>
c00226fb:	59                   	pop    ecx
c00226fc:	5e                   	pop    esi
c00226fd:	6a 01                	push   0x1
c00226ff:	53                   	push   ebx
c0022700:	e8 73 fa ff ff       	call   c0022178 <IDE::prepareInterrupt(unsigned char)>
c0022705:	83 c4 0c             	add    esp,0xc
c0022708:	6a 00                	push   0x0
c002270a:	6a 00                	push   0x0
c002270c:	53                   	push   ebx
c002270d:	e8 98 fc ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c0022712:	83 c4 0c             	add    esp,0xc
c0022715:	6a 00                	push   0x0
c0022717:	6a 01                	push   0x1
c0022719:	53                   	push   ebx
c002271a:	e8 8b fc ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c002271f:	83 c4 10             	add    esp,0x10
c0022722:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022729:	74 40                	je     c002276b <IDE::open(int, int, void*)+0x37b>
c002272b:	83 ec 0c             	sub    esp,0xc
c002272e:	68 fb b3 02 c0       	push   0xc002b3fb
c0022733:	e8 57 01 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022738:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002273b:	6a 01                	push   0x1
c002273d:	68 72 23 02 c0       	push   0xc0022372
c0022742:	6a 0e                	push   0xe
c0022744:	53                   	push   ebx
c0022745:	e8 f0 14 ff ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002274a:	83 c4 14             	add    esp,0x14
c002274d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022753:	53                   	push   ebx
c0022754:	6a 01                	push   0x1
c0022756:	68 8e 23 02 c0       	push   0xc002238e
c002275b:	6a 0f                	push   0xf
c002275d:	53                   	push   ebx
c002275e:	e8 d7 14 ff ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022763:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022769:	eb 4a                	jmp    c00227b5 <IDE::open(int, int, void*)+0x3c5>
c002276b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022775:	50                   	push   eax
c0022776:	6a 0f                	push   0xf
c0022778:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002277e:	68 17 b4 02 c0       	push   0xc002b417
c0022783:	e8 07 01 ff ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022788:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002278b:	6a 00                	push   0x0
c002278d:	68 72 23 02 c0       	push   0xc0022372
c0022792:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022798:	53                   	push   ebx
c0022799:	e8 9c 14 ff ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002279e:	83 c4 14             	add    esp,0x14
c00227a1:	53                   	push   ebx
c00227a2:	6a 00                	push   0x0
c00227a4:	68 8e 23 02 c0       	push   0xc002238e
c00227a9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00227af:	53                   	push   ebx
c00227b0:	e8 85 14 ff ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00227b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00227b7:	83 c4 20             	add    esp,0x20
c00227ba:	83 ec 0c             	sub    esp,0xc
c00227bd:	53                   	push   ebx
c00227be:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00227c1:	83 c4 0c             	add    esp,0xc
c00227c4:	6a 07                	push   0x7
c00227c6:	6a 00                	push   0x0
c00227c8:	53                   	push   ebx
c00227c9:	e8 90 fa ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00227ce:	83 c4 0c             	add    esp,0xc
c00227d1:	6a 07                	push   0x7
c00227d3:	6a 01                	push   0x1
c00227d5:	53                   	push   ebx
c00227d6:	e8 83 fa ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00227db:	83 c4 0c             	add    esp,0xc
c00227de:	6a 01                	push   0x1
c00227e0:	6a 00                	push   0x0
c00227e2:	53                   	push   ebx
c00227e3:	e8 c2 fb ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c00227e8:	83 c4 0c             	add    esp,0xc
c00227eb:	6a 01                	push   0x1
c00227ed:	6a 01                	push   0x1
c00227ef:	53                   	push   ebx
c00227f0:	e8 b5 fb ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c00227f5:	83 c4 2c             	add    esp,0x2c
c00227f8:	31 c0                	xor    eax,eax
c00227fa:	5b                   	pop    ebx
c00227fb:	5e                   	pop    esi
c00227fc:	5f                   	pop    edi
c00227fd:	5d                   	pop    ebp
c00227fe:	c3                   	ret    
c00227ff:	90                   	nop

c0022800 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022800:	55                   	push   ebp
c0022801:	57                   	push   edi
c0022802:	56                   	push   esi
c0022803:	53                   	push   ebx
c0022804:	83 ec 1c             	sub    esp,0x1c
c0022807:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002280b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002280f:	8d 50 f8             	lea    edx,[eax-0x8]
c0022812:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022816:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002281a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002281e:	80 fa 03             	cmp    dl,0x3
c0022821:	77 5d                	ja     c0022880 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022823:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002282b:	0f b6 db             	movzx  ebx,bl
c002282e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022831:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022835:	83 ca 80             	or     edx,0xffffff80
c0022838:	0f b6 d2             	movzx  edx,dl
c002283b:	52                   	push   edx
c002283c:	6a 0c                	push   0xc
c002283e:	53                   	push   ebx
c002283f:	56                   	push   esi
c0022840:	e8 59 f9 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022845:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002284a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002284e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022852:	0f b6 c0             	movzx  eax,al
c0022855:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022859:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002285b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022860:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022864:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022868:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002286c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022874:	83 c4 2c             	add    esp,0x2c
c0022877:	5b                   	pop    ebx
c0022878:	5e                   	pop    esi
c0022879:	5f                   	pop    edi
c002287a:	5d                   	pop    ebp
c002287b:	e9 1e f9 ff ff       	jmp    c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022880:	3c 07                	cmp    al,0x7
c0022882:	77 10                	ja     c0022894 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022884:	0f b6 db             	movzx  ebx,bl
c0022887:	0f b6 d0             	movzx  edx,al
c002288a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022892:	eb 2d                	jmp    c00228c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022894:	3c 0d                	cmp    al,0xd
c0022896:	77 13                	ja     c00228ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022898:	0f b6 db             	movzx  ebx,bl
c002289b:	0f b6 c0             	movzx  eax,al
c002289e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00228a5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00228a9:	eb 16                	jmp    c00228c1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00228ab:	3c 15                	cmp    al,0x15
c00228ad:	77 14                	ja     c00228c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00228af:	0f b6 db             	movzx  ebx,bl
c00228b2:	0f b6 c0             	movzx  eax,al
c00228b5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00228bd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00228c1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00228c3:	83 c4 1c             	add    esp,0x1c
c00228c6:	5b                   	pop    ebx
c00228c7:	5e                   	pop    esi
c00228c8:	5f                   	pop    edi
c00228c9:	5d                   	pop    ebp
c00228ca:	c3                   	ret    
c00228cb:	90                   	nop

c00228cc <IDE::detect()>:
c00228cc:	55                   	push   ebp
c00228cd:	57                   	push   edi
c00228ce:	56                   	push   esi
c00228cf:	53                   	push   ebx
c00228d0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00228d6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00228dd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00228e4:	0f 85 be 02 00 00    	jne    c0022ba8 <IDE::detect()+0x2dc>
c00228ea:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00228f1:	31 f6                	xor    esi,esi
c00228f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00228fb:	31 ed                	xor    ebp,ebp
c00228fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022901:	c1 e0 06             	shl    eax,0x6
c0022904:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002290c:	89 e8                	mov    eax,ebp
c002290e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022912:	c1 e0 04             	shl    eax,0x4
c0022915:	83 c8 a0             	or     eax,0xffffffa0
c0022918:	0f b6 c0             	movzx  eax,al
c002291b:	50                   	push   eax
c002291c:	6a 06                	push   0x6
c002291e:	56                   	push   esi
c002291f:	53                   	push   ebx
c0022920:	e8 79 f8 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022925:	83 c4 0c             	add    esp,0xc
c0022928:	6a 0c                	push   0xc
c002292a:	56                   	push   esi
c002292b:	53                   	push   ebx
c002292c:	e8 2d f9 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022931:	83 c4 0c             	add    esp,0xc
c0022934:	6a 0c                	push   0xc
c0022936:	56                   	push   esi
c0022937:	53                   	push   ebx
c0022938:	e8 21 f9 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c002293d:	83 c4 0c             	add    esp,0xc
c0022940:	6a 0c                	push   0xc
c0022942:	56                   	push   esi
c0022943:	53                   	push   ebx
c0022944:	e8 15 f9 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022949:	83 c4 0c             	add    esp,0xc
c002294c:	6a 0c                	push   0xc
c002294e:	56                   	push   esi
c002294f:	53                   	push   ebx
c0022950:	e8 09 f9 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022955:	68 ec 00 00 00       	push   0xec
c002295a:	6a 07                	push   0x7
c002295c:	56                   	push   esi
c002295d:	53                   	push   ebx
c002295e:	e8 3b f8 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022963:	83 c4 1c             	add    esp,0x1c
c0022966:	6a 0c                	push   0xc
c0022968:	56                   	push   esi
c0022969:	53                   	push   ebx
c002296a:	e8 ef f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c002296f:	83 c4 0c             	add    esp,0xc
c0022972:	6a 0c                	push   0xc
c0022974:	56                   	push   esi
c0022975:	53                   	push   ebx
c0022976:	e8 e3 f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c002297b:	83 c4 0c             	add    esp,0xc
c002297e:	6a 0c                	push   0xc
c0022980:	56                   	push   esi
c0022981:	53                   	push   ebx
c0022982:	e8 d7 f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022987:	83 c4 0c             	add    esp,0xc
c002298a:	6a 0c                	push   0xc
c002298c:	56                   	push   esi
c002298d:	53                   	push   ebx
c002298e:	e8 cb f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022993:	83 c4 0c             	add    esp,0xc
c0022996:	6a 0c                	push   0xc
c0022998:	56                   	push   esi
c0022999:	53                   	push   ebx
c002299a:	e8 bf f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c002299f:	83 c4 10             	add    esp,0x10
c00229a2:	84 c0                	test   al,al
c00229a4:	0f 84 8b 01 00 00    	je     c0022b35 <IDE::detect()+0x269>
c00229aa:	31 ff                	xor    edi,edi
c00229ac:	50                   	push   eax
c00229ad:	6a 0c                	push   0xc
c00229af:	56                   	push   esi
c00229b0:	53                   	push   ebx
c00229b1:	e8 a8 f8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00229b6:	83 c4 10             	add    esp,0x10
c00229b9:	a8 01                	test   al,0x1
c00229bb:	0f 85 8e 01 00 00    	jne    c0022b4f <IDE::detect()+0x283>
c00229c1:	84 c0                	test   al,al
c00229c3:	78 04                	js     c00229c9 <IDE::detect()+0xfd>
c00229c5:	a8 08                	test   al,0x8
c00229c7:	75 27                	jne    c00229f0 <IDE::detect()+0x124>
c00229c9:	47                   	inc    edi
c00229ca:	81 ff 17 01 00 00    	cmp    edi,0x117
c00229d0:	7e da                	jle    c00229ac <IDE::detect()+0xe0>
c00229d2:	50                   	push   eax
c00229d3:	50                   	push   eax
c00229d4:	6a 00                	push   0x0
c00229d6:	68 40 4b 4c 00       	push   0x4c4b40
c00229db:	e8 00 ab ff ff       	call   c001d4e0 <nanoSleep(unsigned long long)>
c00229e0:	83 c4 10             	add    esp,0x10
c00229e3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00229e9:	75 c1                	jne    c00229ac <IDE::detect()+0xe0>
c00229eb:	e9 5f 01 00 00       	jmp    c0022b4f <IDE::detect()+0x283>
c00229f0:	31 c9                	xor    ecx,ecx
c00229f2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00229f6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00229fa:	83 ec 0c             	sub    esp,0xc
c00229fd:	68 80 00 00 00       	push   0x80
c0022a02:	57                   	push   edi
c0022a03:	6a 00                	push   0x0
c0022a05:	56                   	push   esi
c0022a06:	53                   	push   ebx
c0022a07:	e8 f4 fd ff ff       	call   c0022800 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022a0c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022a11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022a15:	89 d1                	mov    ecx,edx
c0022a17:	c1 e0 06             	shl    eax,0x6
c0022a1a:	01 d8                	add    eax,ebx
c0022a1c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022a23:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022a2a:	89 f2                	mov    edx,esi
c0022a2c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022a32:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022a36:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022a3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022a40:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022a47:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022a4f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022a56:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022a5e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022a64:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022a6b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022a71:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022a75:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022a79:	83 c4 20             	add    esp,0x20
c0022a7c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022a7f:	83 c0 02             	add    eax,0x2
c0022a82:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022a88:	83 c7 02             	add    edi,0x2
c0022a8b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022a8e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022a94:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022a98:	75 e2                	jne    c0022a7c <IDE::detect()+0x1b0>
c0022a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a9e:	c1 e0 06             	shl    eax,0x6
c0022aa1:	01 d8                	add    eax,ebx
c0022aa3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022aa9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022ab0:	66 c1 ea 09          	shr    dx,0x9
c0022ab4:	83 e2 01             	and    edx,0x1
c0022ab7:	84 c9                	test   cl,cl
c0022ab9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022abf:	75 2f                	jne    c0022af0 <IDE::detect()+0x224>
c0022ac1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022ac7:	85 c0                	test   eax,eax
c0022ac9:	74 66                	je     c0022b31 <IDE::detect()+0x265>
c0022acb:	50                   	push   eax
c0022acc:	55                   	push   ebp
c0022acd:	56                   	push   esi
c0022ace:	68 33 b4 02 c0       	push   0xc002b433
c0022ad3:	e8 b7 fd fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022ad8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022adf:	e8 06 cb fe ff       	call   c000f5ea <malloc>
c0022ae4:	89 c7                	mov    edi,eax
c0022ae6:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ae9:	e8 62 06 00 00       	call   c0023150 <ATA::ATA()>
c0022aee:	eb 28                	jmp    c0022b18 <IDE::detect()+0x24c>
c0022af0:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022af6:	55                   	push   ebp
c0022af7:	56                   	push   esi
c0022af8:	68 62 b4 02 c0       	push   0xc002b462
c0022afd:	e8 8d fd fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022b02:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022b09:	e8 dc ca fe ff       	call   c000f5ea <malloc>
c0022b0e:	89 c7                	mov    edi,eax
c0022b10:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b13:	e8 68 0c 00 00       	call   c0023780 <ATAPI::ATAPI()>
c0022b18:	5a                   	pop    edx
c0022b19:	59                   	pop    ecx
c0022b1a:	57                   	push   edi
c0022b1b:	53                   	push   ebx
c0022b1c:	e8 95 11 ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c0022b21:	8b 07                	mov    eax,DWORD PTR [edi]
c0022b23:	53                   	push   ebx
c0022b24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022b28:	6a 00                	push   0x0
c0022b2a:	57                   	push   edi
c0022b2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022b2e:	83 c4 20             	add    esp,0x20
c0022b31:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022b35:	4d                   	dec    ebp
c0022b36:	74 0a                	je     c0022b42 <IDE::detect()+0x276>
c0022b38:	bd 01 00 00 00       	mov    ebp,0x1
c0022b3d:	e9 bb fd ff ff       	jmp    c00228fd <IDE::detect()+0x31>
c0022b42:	4e                   	dec    esi
c0022b43:	74 63                	je     c0022ba8 <IDE::detect()+0x2dc>
c0022b45:	be 01 00 00 00       	mov    esi,0x1
c0022b4a:	e9 ac fd ff ff       	jmp    c00228fb <IDE::detect()+0x2f>
c0022b4f:	50                   	push   eax
c0022b50:	6a 04                	push   0x4
c0022b52:	56                   	push   esi
c0022b53:	53                   	push   ebx
c0022b54:	e8 05 f7 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022b59:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022b5d:	83 c4 0c             	add    esp,0xc
c0022b60:	6a 05                	push   0x5
c0022b62:	56                   	push   esi
c0022b63:	53                   	push   ebx
c0022b64:	e8 f5 f6 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022b69:	83 c4 10             	add    esp,0x10
c0022b6c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022b70:	80 fa 14             	cmp    dl,0x14
c0022b73:	75 04                	jne    c0022b79 <IDE::detect()+0x2ad>
c0022b75:	3c eb                	cmp    al,0xeb
c0022b77:	eb 07                	jmp    c0022b80 <IDE::detect()+0x2b4>
c0022b79:	3c 96                	cmp    al,0x96
c0022b7b:	75 b8                	jne    c0022b35 <IDE::detect()+0x269>
c0022b7d:	80 fa 69             	cmp    dl,0x69
c0022b80:	75 b3                	jne    c0022b35 <IDE::detect()+0x269>
c0022b82:	68 a1 00 00 00       	push   0xa1
c0022b87:	6a 07                	push   0x7
c0022b89:	56                   	push   esi
c0022b8a:	53                   	push   ebx
c0022b8b:	e8 0e f6 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b90:	5f                   	pop    edi
c0022b91:	58                   	pop    eax
c0022b92:	6a 00                	push   0x0
c0022b94:	68 40 42 0f 00       	push   0xf4240
c0022b99:	e8 42 a9 ff ff       	call   c001d4e0 <nanoSleep(unsigned long long)>
c0022b9e:	83 c4 10             	add    esp,0x10
c0022ba1:	b1 01                	mov    cl,0x1
c0022ba3:	e9 4a fe ff ff       	jmp    c00229f2 <IDE::detect()+0x126>
c0022ba8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022bae:	5b                   	pop    ebx
c0022baf:	5e                   	pop    esi
c0022bb0:	5f                   	pop    edi
c0022bb1:	5d                   	pop    ebp
c0022bb2:	c3                   	ret    
c0022bb3:	90                   	nop

c0022bb4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022bb4:	55                   	push   ebp
c0022bb5:	57                   	push   edi
c0022bb6:	56                   	push   esi
c0022bb7:	53                   	push   ebx
c0022bb8:	83 ec 1c             	sub    esp,0x1c
c0022bbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022bbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022bc3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022bc7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022bcb:	88 c3                	mov    bl,al
c0022bcd:	84 c0                	test   al,al
c0022bcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022bd3:	0f 84 67 01 00 00    	je     c0022d40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022bd9:	83 ec 0c             	sub    esp,0xc
c0022bdc:	68 93 b4 02 c0       	push   0xc002b493
c0022be1:	e8 a9 fc fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022be6:	83 c4 10             	add    esp,0x10
c0022be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022bed:	3c 01                	cmp    al,0x1
c0022bef:	75 17                	jne    c0022c08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022bf1:	83 ec 0c             	sub    esp,0xc
c0022bf4:	b3 13                	mov    bl,0x13
c0022bf6:	68 9f b4 02 c0       	push   0xc002b49f
c0022bfb:	e8 8f fc fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022c00:	83 c4 10             	add    esp,0x10
c0022c03:	e9 25 01 00 00       	jmp    c0022d2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022c08:	3c 02                	cmp    al,0x2
c0022c0a:	0f 85 ef 00 00 00    	jne    c0022cff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022c10:	d1 e6                	shl    esi,1
c0022c12:	09 ee                	or     esi,ebp
c0022c14:	52                   	push   edx
c0022c15:	89 f0                	mov    eax,esi
c0022c17:	6a 01                	push   0x1
c0022c19:	0f b6 f0             	movzx  esi,al
c0022c1c:	c1 e6 06             	shl    esi,0x6
c0022c1f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022c27:	50                   	push   eax
c0022c28:	57                   	push   edi
c0022c29:	e8 30 f6 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022c2e:	83 c4 10             	add    esp,0x10
c0022c31:	89 c6                	mov    esi,eax
c0022c33:	a8 01                	test   al,0x1
c0022c35:	74 12                	je     c0022c49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022c37:	83 ec 0c             	sub    esp,0xc
c0022c3a:	b3 07                	mov    bl,0x7
c0022c3c:	68 b4 b4 02 c0       	push   0xc002b4b4
c0022c41:	e8 49 fc fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022c46:	83 c4 10             	add    esp,0x10
c0022c49:	f7 c6 02 00 00 00    	test   esi,0x2
c0022c4f:	74 12                	je     c0022c63 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022c51:	83 ec 0c             	sub    esp,0xc
c0022c54:	b3 03                	mov    bl,0x3
c0022c56:	68 d2 b4 02 c0       	push   0xc002b4d2
c0022c5b:	e8 2f fc fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022c60:	83 c4 10             	add    esp,0x10
c0022c63:	f7 c6 04 00 00 00    	test   esi,0x4
c0022c69:	74 12                	je     c0022c7d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022c6b:	83 ec 0c             	sub    esp,0xc
c0022c6e:	b3 14                	mov    bl,0x14
c0022c70:	68 f2 b4 02 c0       	push   0xc002b4f2
c0022c75:	e8 15 fc fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022c7a:	83 c4 10             	add    esp,0x10
c0022c7d:	f7 c6 08 00 00 00    	test   esi,0x8
c0022c83:	74 12                	je     c0022c97 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022c85:	83 ec 0c             	sub    esp,0xc
c0022c88:	b3 03                	mov    bl,0x3
c0022c8a:	68 d2 b4 02 c0       	push   0xc002b4d2
c0022c8f:	e8 fb fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022c94:	83 c4 10             	add    esp,0x10
c0022c97:	f7 c6 10 00 00 00    	test   esi,0x10
c0022c9d:	74 12                	je     c0022cb1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022c9f:	83 ec 0c             	sub    esp,0xc
c0022ca2:	b3 15                	mov    bl,0x15
c0022ca4:	68 0a b5 02 c0       	push   0xc002b50a
c0022ca9:	e8 e1 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022cae:	83 c4 10             	add    esp,0x10
c0022cb1:	f7 c6 20 00 00 00    	test   esi,0x20
c0022cb7:	74 12                	je     c0022ccb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022cb9:	83 ec 0c             	sub    esp,0xc
c0022cbc:	b3 03                	mov    bl,0x3
c0022cbe:	68 d2 b4 02 c0       	push   0xc002b4d2
c0022cc3:	e8 c7 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022cc8:	83 c4 10             	add    esp,0x10
c0022ccb:	f7 c6 40 00 00 00    	test   esi,0x40
c0022cd1:	74 12                	je     c0022ce5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022cd3:	83 ec 0c             	sub    esp,0xc
c0022cd6:	b3 16                	mov    bl,0x16
c0022cd8:	68 24 b5 02 c0       	push   0xc002b524
c0022cdd:	e8 ad fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022ce2:	83 c4 10             	add    esp,0x10
c0022ce5:	89 f0                	mov    eax,esi
c0022ce7:	84 c0                	test   al,al
c0022ce9:	79 42                	jns    c0022d2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ceb:	83 ec 0c             	sub    esp,0xc
c0022cee:	b3 0d                	mov    bl,0xd
c0022cf0:	68 45 b5 02 c0       	push   0xc002b545
c0022cf5:	e8 95 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022cfa:	83 c4 10             	add    esp,0x10
c0022cfd:	eb 2e                	jmp    c0022d2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022cff:	3c 03                	cmp    al,0x3
c0022d01:	75 14                	jne    c0022d17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022d03:	83 ec 0c             	sub    esp,0xc
c0022d06:	b3 17                	mov    bl,0x17
c0022d08:	68 59 b5 02 c0       	push   0xc002b559
c0022d0d:	e8 7d fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022d12:	83 c4 10             	add    esp,0x10
c0022d15:	eb 16                	jmp    c0022d2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022d17:	3c 04                	cmp    al,0x4
c0022d19:	75 12                	jne    c0022d2d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022d1b:	83 ec 0c             	sub    esp,0xc
c0022d1e:	b3 08                	mov    bl,0x8
c0022d20:	68 6f b5 02 c0       	push   0xc002b56f
c0022d25:	e8 65 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022d2a:	83 c4 10             	add    esp,0x10
c0022d2d:	50                   	push   eax
c0022d2e:	50                   	push   eax
c0022d2f:	0f b6 c3             	movzx  eax,bl
c0022d32:	50                   	push   eax
c0022d33:	68 87 b5 02 c0       	push   0xc002b587
c0022d38:	e8 52 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	83 c4 1c             	add    esp,0x1c
c0022d43:	88 d8                	mov    al,bl
c0022d45:	5b                   	pop    ebx
c0022d46:	5e                   	pop    esi
c0022d47:	5f                   	pop    edi
c0022d48:	5d                   	pop    ebp
c0022d49:	c3                   	ret    

c0022d4a <IDE::polling(unsigned char, unsigned int)>:
c0022d4a:	57                   	push   edi
c0022d4b:	56                   	push   esi
c0022d4c:	53                   	push   ebx
c0022d4d:	bb 04 00 00 00       	mov    ebx,0x4
c0022d52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022d56:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022d5b:	52                   	push   edx
c0022d5c:	6a 0c                	push   0xc
c0022d5e:	56                   	push   esi
c0022d5f:	57                   	push   edi
c0022d60:	e8 f9 f4 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022d65:	83 c4 10             	add    esp,0x10
c0022d68:	4b                   	dec    ebx
c0022d69:	75 f0                	jne    c0022d5b <IDE::polling(unsigned char, unsigned int)+0x11>
c0022d6b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022d70:	50                   	push   eax
c0022d71:	6a 0c                	push   0xc
c0022d73:	56                   	push   esi
c0022d74:	57                   	push   edi
c0022d75:	e8 e4 f4 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c0022d7a:	83 c4 10             	add    esp,0x10
c0022d7d:	a8 01                	test   al,0x1
c0022d7f:	74 12                	je     c0022d93 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022d81:	83 ec 0c             	sub    esp,0xc
c0022d84:	68 a1 b5 02 c0       	push   0xc002b5a1
c0022d89:	e8 01 fb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022d8e:	83 c4 10             	add    esp,0x10
c0022d91:	eb 17                	jmp    c0022daa <IDE::polling(unsigned char, unsigned int)+0x60>
c0022d93:	a8 20                	test   al,0x20
c0022d95:	75 0f                	jne    c0022da6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022d97:	4b                   	dec    ebx
c0022d98:	74 10                	je     c0022daa <IDE::polling(unsigned char, unsigned int)+0x60>
c0022d9a:	84 c0                	test   al,al
c0022d9c:	78 d2                	js     c0022d70 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022d9e:	a8 08                	test   al,0x8
c0022da0:	74 ce                	je     c0022d70 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022da2:	31 c0                	xor    eax,eax
c0022da4:	eb 06                	jmp    c0022dac <IDE::polling(unsigned char, unsigned int)+0x62>
c0022da6:	b0 01                	mov    al,0x1
c0022da8:	eb 02                	jmp    c0022dac <IDE::polling(unsigned char, unsigned int)+0x62>
c0022daa:	b0 02                	mov    al,0x2
c0022dac:	5b                   	pop    ebx
c0022dad:	5e                   	pop    esi
c0022dae:	5f                   	pop    edi
c0022daf:	c3                   	ret    

c0022db0 <SATABus::close(int, int, void*)>:
c0022db0:	31 c0                	xor    eax,eax
c0022db2:	c3                   	ret    
c0022db3:	90                   	nop

c0022db4 <SATABus::detect()>:
c0022db4:	c3                   	ret    
c0022db5:	90                   	nop

c0022db6 <SATABus::SATABus()>:
c0022db6:	83 ec 0c             	sub    esp,0xc
c0022db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dbd:	83 ec 08             	sub    esp,0x8
c0022dc0:	68 e4 b5 02 c0       	push   0xc002b5e4
c0022dc5:	50                   	push   eax
c0022dc6:	e8 77 12 ff ff       	call   c0014042 <HardDiskController::HardDiskController(char const*)>
c0022dcb:	83 c4 10             	add    esp,0x10
c0022dce:	ba a0 b6 02 c0       	mov    edx,0xc002b6a0
c0022dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd7:	89 10                	mov    DWORD PTR [eax],edx
c0022dd9:	83 ec 0c             	sub    esp,0xc
c0022ddc:	6a 50                	push   0x50
c0022dde:	e8 42 cf fe ff       	call   c000fd25 <Phys::allocateContiguousPages(int)>
c0022de3:	83 c4 10             	add    esp,0x10
c0022de6:	89 c2                	mov    edx,eax
c0022de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022df2:	83 ec 0c             	sub    esp,0xc
c0022df5:	6a 50                	push   0x50
c0022df7:	e8 a3 ea fe ff       	call   c001189f <Virt::allocateKernelVirtualPages(int)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	89 c2                	mov    edx,eax
c0022e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e05:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e0b:	e8 1f ec fe ff       	call   c0011a2f <Virt::getAKernelVAS()>
c0022e10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022e14:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022e1e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022e24:	83 ec 0c             	sub    esp,0xc
c0022e27:	6a 03                	push   0x3
c0022e29:	6a 50                	push   0x50
c0022e2b:	51                   	push   ecx
c0022e2c:	52                   	push   edx
c0022e2d:	50                   	push   eax
c0022e2e:	e8 2b f4 fe ff       	call   c001225e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022e33:	83 c4 20             	add    esp,0x20
c0022e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e3a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022e4a:	83 ec 04             	sub    esp,0x4
c0022e4d:	52                   	push   edx
c0022e4e:	50                   	push   eax
c0022e4f:	68 08 b6 02 c0       	push   0xc002b608
c0022e54:	e8 36 fa fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0022e59:	83 c4 10             	add    esp,0x10
c0022e5c:	90                   	nop
c0022e5d:	83 c4 0c             	add    esp,0xc
c0022e60:	c3                   	ret    
c0022e61:	90                   	nop

c0022e62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022e62:	83 ec 0c             	sub    esp,0xc
c0022e65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e69:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022e6c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022e6f:	09 c2                	or     edx,eax
c0022e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022e7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022e7d:	31 c0                	xor    eax,eax
c0022e7f:	c1 e9 08             	shr    ecx,0x8
c0022e82:	83 e1 0f             	and    ecx,0xf
c0022e85:	39 c8                	cmp    eax,ecx
c0022e87:	74 0a                	je     c0022e93 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022e89:	f6 c2 01             	test   dl,0x1
c0022e8c:	74 18                	je     c0022ea6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022e8e:	d1 ea                	shr    edx,1
c0022e90:	40                   	inc    eax
c0022e91:	eb f2                	jmp    c0022e85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022e93:	83 ec 0c             	sub    esp,0xc
c0022e96:	68 2c b6 02 c0       	push   0xc002b62c
c0022e9b:	e8 41 6b ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0022ea0:	83 c4 10             	add    esp,0x10
c0022ea3:	83 c8 ff             	or     eax,0xffffffff
c0022ea6:	83 c4 0c             	add    esp,0xc
c0022ea9:	c3                   	ret    

c0022eaa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022eaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022eae:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022eb1:	89 c2                	mov    edx,eax
c0022eb3:	c1 ea 08             	shr    edx,0x8
c0022eb6:	83 e2 0f             	and    edx,0xf
c0022eb9:	fe ca                	dec    dl
c0022ebb:	75 31                	jne    c0022eee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022ebd:	83 e0 0f             	and    eax,0xf
c0022ec0:	3c 03                	cmp    al,0x3
c0022ec2:	75 2a                	jne    c0022eee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022ec4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022ec7:	b8 02 00 00 00       	mov    eax,0x2
c0022ecc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022ed2:	74 1c                	je     c0022ef0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022ed4:	b8 04 00 00 00       	mov    eax,0x4
c0022ed9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022edf:	74 0f                	je     c0022ef0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022ee1:	31 c0                	xor    eax,eax
c0022ee3:	83 fa 03             	cmp    edx,0x3
c0022ee6:	0f 94 c0             	sete   al
c0022ee9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022eed:	c3                   	ret    
c0022eee:	31 c0                	xor    eax,eax
c0022ef0:	c3                   	ret    
c0022ef1:	90                   	nop

c0022ef2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022ef2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022ef6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ef9:	0f ba e2 0f          	bt     edx,0xf
c0022efd:	72 f7                	jb     c0022ef6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022eff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f02:	83 ca 10             	or     edx,0x10
c0022f05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022f08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f0b:	83 ca 01             	or     edx,0x1
c0022f0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022f11:	c3                   	ret    

c0022f12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022f12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022f16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f19:	83 e2 fe             	and    edx,0xfffffffe
c0022f1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022f1f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f22:	83 e2 ef             	and    edx,0xffffffef
c0022f25:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022f28:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f2b:	0f ba e2 0e          	bt     edx,0xe
c0022f2f:	72 f7                	jb     c0022f28 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022f31:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022f34:	0f ba e2 0f          	bt     edx,0xf
c0022f38:	72 ee                	jb     c0022f28 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022f3a:	c3                   	ret    
c0022f3b:	90                   	nop

c0022f3c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022f3c:	55                   	push   ebp
c0022f3d:	57                   	push   edi
c0022f3e:	56                   	push   esi
c0022f3f:	53                   	push   ebx
c0022f40:	83 ec 1c             	sub    esp,0x1c
c0022f43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022f4f:	53                   	push   ebx
c0022f50:	89 fd                	mov    ebp,edi
c0022f52:	56                   	push   esi
c0022f53:	c1 e5 0a             	shl    ebp,0xa
c0022f56:	e8 b7 ff ff ff       	call   c0022f12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022f5b:	83 ec 0c             	sub    esp,0xc
c0022f5e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022f64:	01 e8                	add    eax,ebp
c0022f66:	89 03                	mov    DWORD PTR [ebx],eax
c0022f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f6a:	68 00 04 00 00       	push   0x400
c0022f6f:	6a 00                	push   0x0
c0022f71:	50                   	push   eax
c0022f72:	e8 14 d7 fd ff       	call   c000068b <memset>
c0022f77:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022f7d:	89 fa                	mov    edx,edi
c0022f7f:	01 e8                	add    eax,ebp
c0022f81:	c1 e7 0d             	shl    edi,0xd
c0022f84:	89 03                	mov    DWORD PTR [ebx],eax
c0022f86:	c1 e2 08             	shl    edx,0x8
c0022f89:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022f90:	81 c2 00 80 00 00    	add    edx,0x8000
c0022f96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022f9a:	89 d0                	mov    eax,edx
c0022f9c:	83 c4 1c             	add    esp,0x1c
c0022f9f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022fa5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022fa8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022fab:	68 00 01 00 00       	push   0x100
c0022fb0:	6a 00                	push   0x0
c0022fb2:	50                   	push   eax
c0022fb3:	e8 d3 d6 fd ff       	call   c000068b <memset>
c0022fb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022fbc:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022fc2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022fc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022fcc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022fcf:	83 c4 10             	add    esp,0x10
c0022fd2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022fd9:	31 ff                	xor    edi,edi
c0022fdb:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022fe1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022feb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022ff1:	83 c5 20             	add    ebp,0x20
c0022ff4:	01 f8                	add    eax,edi
c0022ff6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022ff9:	52                   	push   edx
c0022ffa:	68 00 01 00 00       	push   0x100
c0022fff:	6a 00                	push   0x0
c0023001:	50                   	push   eax
c0023002:	e8 84 d6 fd ff       	call   c000068b <memset>
c0023007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023014:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002301b:	01 f8                	add    eax,edi
c002301d:	81 c7 00 01 00 00    	add    edi,0x100
c0023023:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023026:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002302c:	75 b3                	jne    c0022fe1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002302e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023032:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023036:	83 c4 1c             	add    esp,0x1c
c0023039:	5b                   	pop    ebx
c002303a:	5e                   	pop    esi
c002303b:	5f                   	pop    edi
c002303c:	5d                   	pop    ebp
c002303d:	e9 b0 fe ff ff       	jmp    c0022ef2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023042 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023042:	55                   	push   ebp
c0023043:	57                   	push   edi
c0023044:	56                   	push   esi
c0023045:	53                   	push   ebx
c0023046:	31 db                	xor    ebx,ebx
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002304f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023053:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023056:	f7 c7 01 00 00 00    	test   edi,0x1
c002305c:	0f 84 94 00 00 00    	je     c00230f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023062:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023066:	89 d8                	mov    eax,ebx
c0023068:	c1 e0 07             	shl    eax,0x7
c002306b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023072:	55                   	push   ebp
c0023073:	56                   	push   esi
c0023074:	e8 31 fe ff ff       	call   c0022eaa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023079:	59                   	pop    ecx
c002307a:	83 f8 01             	cmp    eax,0x1
c002307d:	5a                   	pop    edx
c002307e:	75 47                	jne    c00230c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0023080:	51                   	push   ecx
c0023081:	51                   	push   ecx
c0023082:	53                   	push   ebx
c0023083:	68 51 b6 02 c0       	push   0xc002b651
c0023088:	e8 02 f8 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c002308d:	83 c4 0c             	add    esp,0xc
c0023090:	53                   	push   ebx
c0023091:	55                   	push   ebp
c0023092:	56                   	push   esi
c0023093:	e8 a4 fe ff ff       	call   c0022f3c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023098:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c002309f:	e8 46 c5 fe ff       	call   c000f5ea <malloc>
c00230a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00230a7:	89 c5                	mov    ebp,eax
c00230a9:	e8 de 0c 00 00       	call   c0023d8c <SATA::SATA()>
c00230ae:	58                   	pop    eax
c00230af:	5a                   	pop    edx
c00230b0:	55                   	push   ebp
c00230b1:	56                   	push   esi
c00230b2:	e8 ff 0b ff ff       	call   c0013cb6 <Device::addChild(Device*)>
c00230b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00230ba:	56                   	push   esi
c00230bb:	6a 00                	push   0x0
c00230bd:	53                   	push   ebx
c00230be:	55                   	push   ebp
c00230bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00230c2:	83 c4 20             	add    esp,0x20
c00230c5:	eb 2f                	jmp    c00230f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c00230c7:	83 f8 04             	cmp    eax,0x4
c00230ca:	75 1a                	jne    c00230e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c00230cc:	52                   	push   edx
c00230cd:	52                   	push   edx
c00230ce:	53                   	push   ebx
c00230cf:	68 68 b6 02 c0       	push   0xc002b668
c00230d4:	e8 b6 f7 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00230d9:	83 c4 0c             	add    esp,0xc
c00230dc:	53                   	push   ebx
c00230dd:	55                   	push   ebp
c00230de:	56                   	push   esi
c00230df:	e8 58 fe ff ff       	call   c0022f3c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00230e4:	eb 0d                	jmp    c00230f3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c00230e6:	50                   	push   eax
c00230e7:	50                   	push   eax
c00230e8:	53                   	push   ebx
c00230e9:	68 81 b6 02 c0       	push   0xc002b681
c00230ee:	e8 9c f7 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00230f3:	83 c4 10             	add    esp,0x10
c00230f6:	d1 ef                	shr    edi,1
c00230f8:	43                   	inc    ebx
c00230f9:	83 fb 20             	cmp    ebx,0x20
c00230fc:	0f 85 54 ff ff ff    	jne    c0023056 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023102:	83 c4 0c             	add    esp,0xc
c0023105:	5b                   	pop    ebx
c0023106:	5e                   	pop    esi
c0023107:	5f                   	pop    edi
c0023108:	5d                   	pop    ebp
c0023109:	c3                   	ret    

c002310a <SATABus::open(int, int, void*)>:
c002310a:	83 ec 14             	sub    esp,0x14
c002310d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023111:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023117:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002311d:	52                   	push   edx
c002311e:	50                   	push   eax
c002311f:	e8 1e ff ff ff       	call   c0023042 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023124:	31 c0                	xor    eax,eax
c0023126:	83 c4 1c             	add    esp,0x1c
c0023129:	c3                   	ret    

c002312a <ATA::close(int, int, void*)>:
c002312a:	83 ec 0c             	sub    esp,0xc
c002312d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023131:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023137:	85 c0                	test   eax,eax
c0023139:	74 0c                	je     c0023147 <ATA::close(int, int, void*)+0x1d>
c002313b:	83 ec 0c             	sub    esp,0xc
c002313e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023140:	50                   	push   eax
c0023141:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023144:	83 c4 10             	add    esp,0x10
c0023147:	31 c0                	xor    eax,eax
c0023149:	83 c4 0c             	add    esp,0xc
c002314c:	c3                   	ret    
c002314d:	90                   	nop

c002314e <ATA::powerSaving(PowerSavingLevel)>:
c002314e:	c3                   	ret    
c002314f:	90                   	nop

c0023150 <ATA::ATA()>:
c0023150:	83 ec 0c             	sub    esp,0xc
c0023153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023157:	83 ec 04             	sub    esp,0x4
c002315a:	68 00 02 00 00       	push   0x200
c002315f:	68 94 b7 02 c0       	push   0xc002b794
c0023164:	50                   	push   eax
c0023165:	e8 5c 0f ff ff       	call   c00140c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002316a:	83 c4 10             	add    esp,0x10
c002316d:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0023172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023176:	89 10                	mov    DWORD PTR [eax],edx
c0023178:	90                   	nop
c0023179:	83 c4 0c             	add    esp,0xc
c002317c:	c3                   	ret    
c002317d:	90                   	nop

c002317e <ATA::flush(bool)>:
c002317e:	53                   	push   ebx
c002317f:	83 ec 08             	sub    esp,0x8
c0023182:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023187:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002318b:	19 c0                	sbb    eax,eax
c002318d:	83 e0 fd             	and    eax,0xfffffffd
c0023190:	05 ea 00 00 00       	add    eax,0xea
c0023195:	50                   	push   eax
c0023196:	6a 07                	push   0x7
c0023198:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002319f:	50                   	push   eax
c00231a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231a6:	e8 f3 ef ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ab:	83 c4 0c             	add    esp,0xc
c00231ae:	6a 00                	push   0x0
c00231b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231b7:	50                   	push   eax
c00231b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231be:	e8 87 fb ff ff       	call   c0022d4a <IDE::polling(unsigned char, unsigned int)>
c00231c3:	83 c4 18             	add    esp,0x18
c00231c6:	5b                   	pop    ebx
c00231c7:	c3                   	ret    

c00231c8 <ATA::readyForCommand()>:
c00231c8:	56                   	push   esi
c00231c9:	53                   	push   ebx
c00231ca:	31 db                	xor    ebx,ebx
c00231cc:	50                   	push   eax
c00231cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00231d1:	50                   	push   eax
c00231d2:	6a 0c                	push   0xc
c00231d4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00231db:	50                   	push   eax
c00231dc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00231e2:	e8 77 f0 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00231e7:	83 c4 10             	add    esp,0x10
c00231ea:	a8 88                	test   al,0x88
c00231ec:	74 23                	je     c0023211 <ATA::readyForCommand()+0x49>
c00231ee:	43                   	inc    ebx
c00231ef:	83 fb 63             	cmp    ebx,0x63
c00231f2:	7e dd                	jle    c00231d1 <ATA::readyForCommand()+0x9>
c00231f4:	51                   	push   ecx
c00231f5:	51                   	push   ecx
c00231f6:	6a 00                	push   0x0
c00231f8:	68 40 42 0f 00       	push   0xf4240
c00231fd:	e8 de a2 ff ff       	call   c001d4e0 <nanoSleep(unsigned long long)>
c0023202:	83 c4 10             	add    esp,0x10
c0023205:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002320b:	75 c4                	jne    c00231d1 <ATA::readyForCommand()+0x9>
c002320d:	31 c0                	xor    eax,eax
c002320f:	eb 02                	jmp    c0023213 <ATA::readyForCommand()+0x4b>
c0023211:	b0 01                	mov    al,0x1
c0023213:	5a                   	pop    edx
c0023214:	5b                   	pop    ebx
c0023215:	5e                   	pop    esi
c0023216:	c3                   	ret    
c0023217:	90                   	nop

c0023218 <ATA::access(unsigned long long, int, void*, bool)>:
c0023218:	55                   	push   ebp
c0023219:	57                   	push   edi
c002321a:	56                   	push   esi
c002321b:	53                   	push   ebx
c002321c:	83 ec 2c             	sub    esp,0x2c
c002321f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023223:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023227:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002322b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002322f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023233:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023237:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002323b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023241:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023245:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002324b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002324f:	c1 e0 06             	shl    eax,0x6
c0023252:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002325a:	74 5d                	je     c00232b9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002325c:	89 fa                	mov    edx,edi
c002325e:	89 f0                	mov    eax,esi
c0023260:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023264:	c1 ea 1c             	shr    edx,0x1c
c0023267:	89 d1                	mov    ecx,edx
c0023269:	09 c1                	or     ecx,eax
c002326b:	74 25                	je     c0023292 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002326d:	31 ed                	xor    ebp,ebp
c002326f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023276:	89 fa                	mov    edx,edi
c0023278:	89 f0                	mov    eax,esi
c002327a:	0f ad d0             	shrd   eax,edx,cl
c002327d:	d3 ea                	shr    edx,cl
c002327f:	f6 c1 20             	test   cl,0x20
c0023282:	74 02                	je     c0023286 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023284:	89 d0                	mov    eax,edx
c0023286:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002328a:	45                   	inc    ebp
c002328b:	83 fd 06             	cmp    ebp,0x6
c002328e:	75 df                	jne    c002326f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023290:	eb 76                	jmp    c0023308 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023292:	89 f0                	mov    eax,esi
c0023294:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023299:	89 fa                	mov    edx,edi
c002329b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00232a2:	0f ac d0 10          	shrd   eax,edx,0x10
c00232a6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00232ab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00232af:	c1 ee 18             	shr    esi,0x18
c00232b2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00232b7:	eb 56                	jmp    c002330f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00232b9:	6a 00                	push   0x0
c00232bb:	6a 3f                	push   0x3f
c00232bd:	57                   	push   edi
c00232be:	56                   	push   esi
c00232bf:	e8 38 24 00 00       	call   c00256fc <__umoddi3>
c00232c4:	83 c4 10             	add    esp,0x10
c00232c7:	40                   	inc    eax
c00232c8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00232cc:	6a 00                	push   0x0
c00232ce:	68 f0 03 00 00       	push   0x3f0
c00232d3:	57                   	push   edi
c00232d4:	56                   	push   esi
c00232d5:	e8 22 23 00 00       	call   c00255fc <__udivdi3>
c00232da:	83 c4 10             	add    esp,0x10
c00232dd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00232e2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00232e9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00232ee:	6a 00                	push   0x0
c00232f0:	6a 3f                	push   0x3f
c00232f2:	57                   	push   edi
c00232f3:	56                   	push   esi
c00232f4:	e8 03 23 00 00       	call   c00255fc <__udivdi3>
c00232f9:	83 c4 10             	add    esp,0x10
c00232fc:	89 c6                	mov    esi,eax
c00232fe:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023303:	83 e6 0f             	and    esi,0xf
c0023306:	eb 07                	jmp    c002330f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023308:	31 f6                	xor    esi,esi
c002330a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002330f:	bf 01 00 00 00       	mov    edi,0x1
c0023314:	50                   	push   eax
c0023315:	6a 00                	push   0x0
c0023317:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002331e:	50                   	push   eax
c002331f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023323:	e8 82 f0 ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c0023328:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002332b:	e8 98 fe ff ff       	call   c00231c8 <ATA::readyForCommand()>
c0023330:	83 c4 10             	add    esp,0x10
c0023333:	84 c0                	test   al,al
c0023335:	0f 84 50 02 00 00    	je     c002358b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002333b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023341:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023347:	c1 e0 04             	shl    eax,0x4
c002334a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023351:	09 c6                	or     esi,eax
c0023353:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023358:	75 05                	jne    c002335f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002335a:	83 ce a0             	or     esi,0xffffffa0
c002335d:	eb 03                	jmp    c0023362 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002335f:	83 ce e0             	or     esi,0xffffffe0
c0023362:	89 f0                	mov    eax,esi
c0023364:	0f b6 f0             	movzx  esi,al
c0023367:	56                   	push   esi
c0023368:	6a 06                	push   0x6
c002336a:	51                   	push   ecx
c002336b:	52                   	push   edx
c002336c:	e8 2d ee ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023371:	83 c4 10             	add    esp,0x10
c0023374:	6a 00                	push   0x0
c0023376:	6a 01                	push   0x1
c0023378:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002337f:	50                   	push   eax
c0023380:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023386:	e8 13 ee ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002338b:	83 c4 10             	add    esp,0x10
c002338e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023393:	75 6e                	jne    c0023403 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023395:	6a 00                	push   0x0
c0023397:	6a 08                	push   0x8
c0023399:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233a0:	50                   	push   eax
c00233a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233a7:	e8 f2 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233ac:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00233b1:	50                   	push   eax
c00233b2:	6a 09                	push   0x9
c00233b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233bb:	50                   	push   eax
c00233bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233c2:	e8 d7 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233c7:	83 c4 20             	add    esp,0x20
c00233ca:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00233cf:	50                   	push   eax
c00233d0:	6a 0a                	push   0xa
c00233d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233d9:	50                   	push   eax
c00233da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233e0:	e8 b9 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00233ea:	50                   	push   eax
c00233eb:	6a 0b                	push   0xb
c00233ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00233f4:	50                   	push   eax
c00233f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00233fb:	e8 9e ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023400:	83 c4 20             	add    esp,0x20
c0023403:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023408:	50                   	push   eax
c0023409:	6a 02                	push   0x2
c002340b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023412:	50                   	push   eax
c0023413:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023419:	e8 80 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002341e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023423:	50                   	push   eax
c0023424:	6a 03                	push   0x3
c0023426:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002342d:	50                   	push   eax
c002342e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023434:	e8 65 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023439:	83 c4 20             	add    esp,0x20
c002343c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023441:	50                   	push   eax
c0023442:	6a 04                	push   0x4
c0023444:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002344b:	50                   	push   eax
c002344c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023452:	e8 47 ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023457:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002345c:	50                   	push   eax
c002345d:	6a 05                	push   0x5
c002345f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023466:	50                   	push   eax
c0023467:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002346d:	e8 2c ed ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023472:	83 c4 20             	add    esp,0x20
c0023475:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002347a:	0f 94 c0             	sete   al
c002347d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023482:	74 09                	je     c002348d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023484:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002348b:	eb 07                	jmp    c0023494 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002348d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023494:	0f b6 c0             	movzx  eax,al
c0023497:	50                   	push   eax
c0023498:	6a 07                	push   0x7
c002349a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234a1:	50                   	push   eax
c00234a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234a8:	e8 f1 ec ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234ad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00234b1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00234b5:	83 c4 10             	add    esp,0x10
c00234b8:	85 f6                	test   esi,esi
c00234ba:	0f 84 ac 00 00 00    	je     c002356c <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00234c0:	50                   	push   eax
c00234c1:	6a 01                	push   0x1
c00234c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234ca:	50                   	push   eax
c00234cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234d1:	e8 74 f8 ff ff       	call   c0022d4a <IDE::polling(unsigned char, unsigned int)>
c00234d6:	83 c4 10             	add    esp,0x10
c00234d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00234df:	84 c0                	test   al,al
c00234e1:	74 20                	je     c0023503 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00234e3:	0f b6 f8             	movzx  edi,al
c00234e6:	0f b6 d2             	movzx  edx,dl
c00234e9:	57                   	push   edi
c00234ea:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00234f1:	50                   	push   eax
c00234f2:	52                   	push   edx
c00234f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234f9:	e8 b6 f6 ff ff       	call   c0022bb4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00234fe:	e9 85 00 00 00       	jmp    c0023588 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0023503:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023508:	74 41                	je     c002354b <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002350a:	31 c9                	xor    ecx,ecx
c002350c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023510:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023514:	50                   	push   eax
c0023515:	50                   	push   eax
c0023516:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002351d:	50                   	push   eax
c002351e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023524:	e8 63 ec ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c0023529:	89 c2                	mov    edx,eax
c002352b:	89 e8                	mov    eax,ebp
c002352d:	66 ef                	out    dx,ax
c002352f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023533:	83 c4 10             	add    esp,0x10
c0023536:	41                   	inc    ecx
c0023537:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002353d:	75 cd                	jne    c002350c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c002353f:	4e                   	dec    esi
c0023540:	81 c7 00 02 00 00    	add    edi,0x200
c0023546:	e9 6d ff ff ff       	jmp    c00234b8 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002354b:	0f b6 d2             	movzx  edx,dl
c002354e:	51                   	push   ecx
c002354f:	51                   	push   ecx
c0023550:	52                   	push   edx
c0023551:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023557:	e8 30 ec ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c002355c:	b9 00 01 00 00       	mov    ecx,0x100
c0023561:	89 c2                	mov    edx,eax
c0023563:	fc                   	cld    
c0023564:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023567:	83 c4 10             	add    esp,0x10
c002356a:	eb d3                	jmp    c002353f <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002356c:	31 ff                	xor    edi,edi
c002356e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023573:	74 16                	je     c002358b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023575:	50                   	push   eax
c0023576:	50                   	push   eax
c0023577:	31 c0                	xor    eax,eax
c0023579:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002357e:	0f 94 c0             	sete   al
c0023581:	50                   	push   eax
c0023582:	53                   	push   ebx
c0023583:	e8 f6 fb ff ff       	call   c002317e <ATA::flush(bool)>
c0023588:	83 c4 10             	add    esp,0x10
c002358b:	83 c4 2c             	add    esp,0x2c
c002358e:	89 f8                	mov    eax,edi
c0023590:	5b                   	pop    ebx
c0023591:	5e                   	pop    esi
c0023592:	5f                   	pop    edi
c0023593:	5d                   	pop    ebp
c0023594:	c3                   	ret    
c0023595:	90                   	nop

c0023596 <ATA::read(unsigned long long, int, void*)>:
c0023596:	57                   	push   edi
c0023597:	b8 04 00 00 00       	mov    eax,0x4
c002359c:	56                   	push   esi
c002359d:	53                   	push   ebx
c002359e:	83 ec 10             	sub    esp,0x10
c00235a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00235a5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00235a9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00235ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00235b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00235b4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00235ba:	77 3b                	ja     c00235f7 <ATA::read(unsigned long long, int, void*)+0x61>
c00235bc:	b8 06 00 00 00       	mov    eax,0x6
c00235c1:	85 d2                	test   edx,edx
c00235c3:	74 32                	je     c00235f7 <ATA::read(unsigned long long, int, void*)+0x61>
c00235c5:	50                   	push   eax
c00235c6:	50                   	push   eax
c00235c7:	6a 00                	push   0x0
c00235c9:	52                   	push   edx
c00235ca:	53                   	push   ebx
c00235cb:	57                   	push   edi
c00235cc:	56                   	push   esi
c00235cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00235d1:	e8 42 fc ff ff       	call   c0023218 <ATA::access(unsigned long long, int, void*, bool)>
c00235d6:	83 c4 20             	add    esp,0x20
c00235d9:	85 c0                	test   eax,eax
c00235db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00235df:	75 11                	jne    c00235f2 <ATA::read(unsigned long long, int, void*)+0x5c>
c00235e1:	01 1d 08 f0 02 c0    	add    DWORD PTR ds:0xc002f008,ebx
c00235e7:	e8 08 d1 fe ff       	call   c00106f4 <VgaText::updateDiskUsage()>
c00235ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00235f0:	eb 05                	jmp    c00235f7 <ATA::read(unsigned long long, int, void*)+0x61>
c00235f2:	b8 01 00 00 00       	mov    eax,0x1
c00235f7:	83 c4 10             	add    esp,0x10
c00235fa:	5b                   	pop    ebx
c00235fb:	5e                   	pop    esi
c00235fc:	5f                   	pop    edi
c00235fd:	c3                   	ret    

c00235fe <ATA::write(unsigned long long, int, void*)>:
c00235fe:	57                   	push   edi
c00235ff:	b8 04 00 00 00       	mov    eax,0x4
c0023604:	56                   	push   esi
c0023605:	53                   	push   ebx
c0023606:	83 ec 10             	sub    esp,0x10
c0023609:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002360d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023611:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023614:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023618:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002361c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023622:	77 3b                	ja     c002365f <ATA::write(unsigned long long, int, void*)+0x61>
c0023624:	b8 06 00 00 00       	mov    eax,0x6
c0023629:	85 d2                	test   edx,edx
c002362b:	74 32                	je     c002365f <ATA::write(unsigned long long, int, void*)+0x61>
c002362d:	50                   	push   eax
c002362e:	50                   	push   eax
c002362f:	6a 01                	push   0x1
c0023631:	52                   	push   edx
c0023632:	53                   	push   ebx
c0023633:	57                   	push   edi
c0023634:	56                   	push   esi
c0023635:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023639:	e8 da fb ff ff       	call   c0023218 <ATA::access(unsigned long long, int, void*, bool)>
c002363e:	83 c4 20             	add    esp,0x20
c0023641:	85 c0                	test   eax,eax
c0023643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023647:	75 11                	jne    c002365a <ATA::write(unsigned long long, int, void*)+0x5c>
c0023649:	01 1d 04 f0 02 c0    	add    DWORD PTR ds:0xc002f004,ebx
c002364f:	e8 a0 d0 fe ff       	call   c00106f4 <VgaText::updateDiskUsage()>
c0023654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023658:	eb 05                	jmp    c002365f <ATA::write(unsigned long long, int, void*)+0x61>
c002365a:	b8 01 00 00 00       	mov    eax,0x1
c002365f:	83 c4 10             	add    esp,0x10
c0023662:	5b                   	pop    ebx
c0023663:	5e                   	pop    esi
c0023664:	5f                   	pop    edi
c0023665:	c3                   	ret    

c0023666 <ATA::detectCHS()>:
c0023666:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002366a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023670:	c1 e0 06             	shl    eax,0x6
c0023673:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023679:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023683:	c7 44 24 04 c4 b6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b6c4
c002368b:	e9 51 63 ff ff       	jmp    c00199e1 <Krnl::panic(char const*)>

c0023690 <ATA::open(int, int, void*)>:
c0023690:	53                   	push   ebx
c0023691:	83 ec 08             	sub    esp,0x8
c0023694:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023698:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002369c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00236a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00236ac:	c1 e0 06             	shl    eax,0x6
c00236af:	01 d0                	add    eax,edx
c00236b1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00236b8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00236be:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00236c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00236cf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00236d5:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00236dc:	75 0c                	jne    c00236ea <ATA::open(int, int, void*)+0x5a>
c00236de:	83 ec 0c             	sub    esp,0xc
c00236e1:	53                   	push   ebx
c00236e2:	e8 7f ff ff ff       	call   c0023666 <ATA::detectCHS()>
c00236e7:	83 c4 10             	add    esp,0x10
c00236ea:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00236f0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00236f6:	c1 e0 06             	shl    eax,0x6
c00236f9:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023700:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002370a:	d1 e8                	shr    eax,1
c002370c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023712:	6a 04                	push   0x4
c0023714:	6a 0c                	push   0xc
c0023716:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002371d:	50                   	push   eax
c002371e:	52                   	push   edx
c002371f:	e8 7a ea ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023724:	90                   	nop
c0023725:	90                   	nop
c0023726:	6a 00                	push   0x0
c0023728:	6a 0c                	push   0xc
c002372a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023731:	50                   	push   eax
c0023732:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023738:	e8 61 ea ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002373d:	83 c4 14             	add    esp,0x14
c0023740:	53                   	push   ebx
c0023741:	e8 e8 09 ff ff       	call   c001412e <PhysicalDisk::startCache()>
c0023746:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023749:	e8 0a 2a ff ff       	call   c0016158 <createPartitionsForDisk(PhysicalDisk*)>
c002374e:	31 c0                	xor    eax,eax
c0023750:	83 c4 18             	add    esp,0x18
c0023753:	5b                   	pop    ebx
c0023754:	c3                   	ret    
c0023755:	90                   	nop

c0023756 <ATAPI::write(unsigned long long, int, void*)>:
c0023756:	b8 03 00 00 00       	mov    eax,0x3
c002375b:	c3                   	ret    

c002375c <ATAPI::close(int, int, void*)>:
c002375c:	83 ec 0c             	sub    esp,0xc
c002375f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023763:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023769:	85 c0                	test   eax,eax
c002376b:	74 0c                	je     c0023779 <ATAPI::close(int, int, void*)+0x1d>
c002376d:	83 ec 0c             	sub    esp,0xc
c0023770:	8b 10                	mov    edx,DWORD PTR [eax]
c0023772:	50                   	push   eax
c0023773:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023776:	83 c4 10             	add    esp,0x10
c0023779:	31 c0                	xor    eax,eax
c002377b:	83 c4 0c             	add    esp,0xc
c002377e:	c3                   	ret    
c002377f:	90                   	nop

c0023780 <ATAPI::ATAPI()>:
c0023780:	83 ec 0c             	sub    esp,0xc
c0023783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023787:	83 ec 04             	sub    esp,0x4
c002378a:	68 00 08 00 00       	push   0x800
c002378f:	68 0c b7 02 c0       	push   0xc002b70c
c0023794:	50                   	push   eax
c0023795:	e8 2c 09 ff ff       	call   c00140c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002379a:	83 c4 10             	add    esp,0x10
c002379d:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c00237a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a6:	89 10                	mov    DWORD PTR [eax],edx
c00237a8:	90                   	nop
c00237a9:	83 c4 0c             	add    esp,0xc
c00237ac:	c3                   	ret    
c00237ad:	90                   	nop

c00237ae <ATAPI::readyForCommand()>:
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	31 db                	xor    ebx,ebx
c00237b2:	50                   	push   eax
c00237b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237b7:	50                   	push   eax
c00237b8:	6a 0c                	push   0xc
c00237ba:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00237c1:	50                   	push   eax
c00237c2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00237c8:	e8 91 ea ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 10             	add    esp,0x10
c00237d0:	a8 88                	test   al,0x88
c00237d2:	74 23                	je     c00237f7 <ATAPI::readyForCommand()+0x49>
c00237d4:	43                   	inc    ebx
c00237d5:	83 fb 63             	cmp    ebx,0x63
c00237d8:	7e dd                	jle    c00237b7 <ATAPI::readyForCommand()+0x9>
c00237da:	51                   	push   ecx
c00237db:	51                   	push   ecx
c00237dc:	6a 00                	push   0x0
c00237de:	68 40 42 0f 00       	push   0xf4240
c00237e3:	e8 f8 9c ff ff       	call   c001d4e0 <nanoSleep(unsigned long long)>
c00237e8:	83 c4 10             	add    esp,0x10
c00237eb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00237f1:	75 c4                	jne    c00237b7 <ATAPI::readyForCommand()+0x9>
c00237f3:	31 c0                	xor    eax,eax
c00237f5:	eb 02                	jmp    c00237f9 <ATAPI::readyForCommand()+0x4b>
c00237f7:	b0 01                	mov    al,0x1
c00237f9:	5a                   	pop    edx
c00237fa:	5b                   	pop    ebx
c00237fb:	5e                   	pop    esi
c00237fc:	c3                   	ret    
c00237fd:	90                   	nop

c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00237fe:	55                   	push   ebp
c00237ff:	57                   	push   edi
c0023800:	56                   	push   esi
c0023801:	53                   	push   ebx
c0023802:	83 ec 20             	sub    esp,0x20
c0023805:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023809:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002380d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023811:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023815:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023819:	6a 01                	push   0x1
c002381b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023822:	50                   	push   eax
c0023823:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023829:	e8 7c eb ff ff       	call   c00223aa <IDE::enableIRQs(unsigned char, bool)>
c002382e:	5e                   	pop    esi
c002382f:	58                   	pop    eax
c0023830:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023837:	50                   	push   eax
c0023838:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002383e:	e8 35 e9 ff ff       	call   c0022178 <IDE::prepareInterrupt(unsigned char)>
c0023843:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023846:	e8 63 ff ff ff       	call   c00237ae <ATAPI::readyForCommand()>
c002384b:	83 c4 10             	add    esp,0x10
c002384e:	84 c0                	test   al,al
c0023850:	75 0a                	jne    c002385c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023852:	bb 01 00 00 00       	mov    ebx,0x1
c0023857:	e9 57 02 00 00       	jmp    c0023ab3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002385c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023862:	c1 e0 04             	shl    eax,0x4
c0023865:	0f b6 c0             	movzx  eax,al
c0023868:	50                   	push   eax
c0023869:	6a 06                	push   0x6
c002386b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023872:	50                   	push   eax
c0023873:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023879:	e8 20 e9 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002387e:	6a 00                	push   0x0
c0023880:	6a 01                	push   0x1
c0023882:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023889:	50                   	push   eax
c002388a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023890:	e8 09 e9 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023895:	83 c4 20             	add    esp,0x20
c0023898:	0f b6 c3             	movzx  eax,bl
c002389b:	0f b6 df             	movzx  ebx,bh
c002389e:	50                   	push   eax
c002389f:	6a 04                	push   0x4
c00238a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238a8:	50                   	push   eax
c00238a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238af:	e8 ea e8 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238b4:	53                   	push   ebx
c00238b5:	6a 05                	push   0x5
c00238b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238be:	50                   	push   eax
c00238bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238c5:	e8 d4 e8 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ca:	83 c4 20             	add    esp,0x20
c00238cd:	68 a0 00 00 00       	push   0xa0
c00238d2:	6a 07                	push   0x7
c00238d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238db:	50                   	push   eax
c00238dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238e2:	e8 b7 e8 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238e7:	83 c4 0c             	add    esp,0xc
c00238ea:	6a 01                	push   0x1
c00238ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00238f3:	50                   	push   eax
c00238f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00238fa:	e8 4b f4 ff ff       	call   c0022d4a <IDE::polling(unsigned char, unsigned int)>
c00238ff:	83 c4 10             	add    esp,0x10
c0023902:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023908:	84 c0                	test   al,al
c002390a:	74 23                	je     c002392f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002390c:	0f b6 d8             	movzx  ebx,al
c002390f:	0f b6 d2             	movzx  edx,dl
c0023912:	53                   	push   ebx
c0023913:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002391a:	50                   	push   eax
c002391b:	52                   	push   edx
c002391c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023922:	e8 8d f2 ff ff       	call   c0022bb4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023927:	83 c4 10             	add    esp,0x10
c002392a:	e9 84 01 00 00       	jmp    c0023ab3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002392f:	0f b6 d2             	movzx  edx,dl
c0023932:	53                   	push   ebx
c0023933:	53                   	push   ebx
c0023934:	52                   	push   edx
c0023935:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002393b:	e8 4c e8 ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c0023940:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023944:	b9 06 00 00 00       	mov    ecx,0x6
c0023949:	89 c2                	mov    edx,eax
c002394b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002394e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023952:	83 c4 10             	add    esp,0x10
c0023955:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002395b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023962:	85 db                	test   ebx,ebx
c0023964:	0f 84 ec 00 00 00    	je     c0023a56 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002396a:	51                   	push   ecx
c002396b:	51                   	push   ecx
c002396c:	52                   	push   edx
c002396d:	50                   	push   eax
c002396e:	e8 99 e9 ff ff       	call   c002230c <IDE::waitInterrupt(unsigned char)>
c0023973:	83 c4 10             	add    esp,0x10
c0023976:	84 c0                	test   al,al
c0023978:	0f 84 d4 fe ff ff    	je     c0023852 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002397e:	56                   	push   esi
c002397f:	56                   	push   esi
c0023980:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023987:	50                   	push   eax
c0023988:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002398e:	e8 e5 e7 ff ff       	call   c0022178 <IDE::prepareInterrupt(unsigned char)>
c0023993:	83 c4 0c             	add    esp,0xc
c0023996:	6a 04                	push   0x4
c0023998:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002399f:	50                   	push   eax
c00239a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239a6:	e8 b3 e8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00239ab:	83 c4 0c             	add    esp,0xc
c00239ae:	89 c6                	mov    esi,eax
c00239b0:	6a 05                	push   0x5
c00239b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239b9:	50                   	push   eax
c00239ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239c0:	e8 99 e8 ff ff       	call   c002225e <IDE::read(unsigned char, unsigned char)>
c00239c5:	89 f1                	mov    ecx,esi
c00239c7:	0f b6 c0             	movzx  eax,al
c00239ca:	0f b6 f1             	movzx  esi,cl
c00239cd:	c1 e0 08             	shl    eax,0x8
c00239d0:	09 c6                	or     esi,eax
c00239d2:	d1 fe                	sar    esi,1
c00239d4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00239d8:	83 c4 10             	add    esp,0x10
c00239db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00239e0:	74 41                	je     c0023a23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00239e2:	31 c9                	xor    ecx,ecx
c00239e4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00239ea:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00239f1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00239f5:	75 0a                	jne    c0023a01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00239f7:	01 c9                	add    ecx,ecx
c00239f9:	01 cd                	add    ebp,ecx
c00239fb:	4b                   	dec    ebx
c00239fc:	e9 54 ff ff ff       	jmp    c0023955 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023a01:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023a06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023a0a:	51                   	push   ecx
c0023a0b:	51                   	push   ecx
c0023a0c:	52                   	push   edx
c0023a0d:	50                   	push   eax
c0023a0e:	e8 79 e7 ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c0023a13:	89 c2                	mov    edx,eax
c0023a15:	89 f0                	mov    eax,esi
c0023a17:	66 ef                	out    dx,ax
c0023a19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023a1d:	83 c4 10             	add    esp,0x10
c0023a20:	41                   	inc    ecx
c0023a21:	eb c1                	jmp    c00239e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023a23:	31 f6                	xor    esi,esi
c0023a25:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023a2b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023a32:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023a36:	75 06                	jne    c0023a3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023a38:	01 f6                	add    esi,esi
c0023a3a:	01 f5                	add    ebp,esi
c0023a3c:	eb bd                	jmp    c00239fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023a3e:	51                   	push   ecx
c0023a3f:	51                   	push   ecx
c0023a40:	52                   	push   edx
c0023a41:	50                   	push   eax
c0023a42:	e8 45 e7 ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c0023a47:	89 c2                	mov    edx,eax
c0023a49:	66 ed                	in     ax,dx
c0023a4b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023a50:	83 c4 10             	add    esp,0x10
c0023a53:	46                   	inc    esi
c0023a54:	eb cf                	jmp    c0023a25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023a56:	51                   	push   ecx
c0023a57:	51                   	push   ecx
c0023a58:	52                   	push   edx
c0023a59:	50                   	push   eax
c0023a5a:	e8 ad e8 ff ff       	call   c002230c <IDE::waitInterrupt(unsigned char)>
c0023a5f:	83 c4 10             	add    esp,0x10
c0023a62:	84 c0                	test   al,al
c0023a64:	0f 84 e8 fd ff ff    	je     c0023852 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023a6a:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a6f:	52                   	push   edx
c0023a70:	52                   	push   edx
c0023a71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a78:	50                   	push   eax
c0023a79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a7f:	e8 f4 e6 ff ff       	call   c0022178 <IDE::prepareInterrupt(unsigned char)>
c0023a84:	83 c4 10             	add    esp,0x10
c0023a87:	50                   	push   eax
c0023a88:	50                   	push   eax
c0023a89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a90:	50                   	push   eax
c0023a91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a97:	e8 f0 e6 ff ff       	call   c002218c <IDE::getBase(unsigned char)>
c0023a9c:	8d 50 07             	lea    edx,[eax+0x7]
c0023a9f:	ec                   	in     al,dx
c0023aa0:	83 c4 10             	add    esp,0x10
c0023aa3:	a8 88                	test   al,0x88
c0023aa5:	74 0a                	je     c0023ab1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023aa7:	4b                   	dec    ebx
c0023aa8:	75 dd                	jne    c0023a87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023aaa:	bb 02 00 00 00       	mov    ebx,0x2
c0023aaf:	eb 02                	jmp    c0023ab3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023ab1:	31 db                	xor    ebx,ebx
c0023ab3:	83 c4 1c             	add    esp,0x1c
c0023ab6:	89 d8                	mov    eax,ebx
c0023ab8:	5b                   	pop    ebx
c0023ab9:	5e                   	pop    esi
c0023aba:	5f                   	pop    edi
c0023abb:	5d                   	pop    ebp
c0023abc:	c3                   	ret    
c0023abd:	90                   	nop

c0023abe <ATAPI::diskRemoved()>:
c0023abe:	83 ec 18             	sub    esp,0x18
c0023ac1:	68 17 b7 02 c0       	push   0xc002b717
c0023ac6:	e8 c4 ed fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023acf:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023ad6:	83 c4 1c             	add    esp,0x1c
c0023ad9:	c3                   	ret    

c0023ada <ATAPI::eject()>:
c0023ada:	57                   	push   edi
c0023adb:	b9 03 00 00 00       	mov    ecx,0x3
c0023ae0:	53                   	push   ebx
c0023ae1:	83 ec 14             	sub    esp,0x14
c0023ae4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023ae8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023aec:	fc                   	cld    
c0023aed:	31 c0                	xor    eax,eax
c0023aef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023af1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023af6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023afb:	50                   	push   eax
c0023afc:	50                   	push   eax
c0023afd:	6a 00                	push   0x0
c0023aff:	6a 00                	push   0x0
c0023b01:	6a 00                	push   0x0
c0023b03:	6a 02                	push   0x2
c0023b05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023b09:	50                   	push   eax
c0023b0a:	53                   	push   ebx
c0023b0b:	e8 ee fc ff ff       	call   c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023b10:	83 c4 14             	add    esp,0x14
c0023b13:	53                   	push   ebx
c0023b14:	e8 a5 ff ff ff       	call   c0023abe <ATAPI::diskRemoved()>
c0023b19:	83 c4 24             	add    esp,0x24
c0023b1c:	5b                   	pop    ebx
c0023b1d:	5f                   	pop    edi
c0023b1e:	c3                   	ret    
c0023b1f:	90                   	nop

c0023b20 <ATAPI::diskInserted()>:
c0023b20:	53                   	push   ebx
c0023b21:	83 ec 14             	sub    esp,0x14
c0023b24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023b28:	68 2d b7 02 c0       	push   0xc002b72d
c0023b2d:	e8 5d ed fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023b32:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023b39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b3c:	e8 ed 05 ff ff       	call   c001412e <PhysicalDisk::startCache()>
c0023b41:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023b45:	83 c4 18             	add    esp,0x18
c0023b48:	5b                   	pop    ebx
c0023b49:	e9 0a 26 ff ff       	jmp    c0016158 <createPartitionsForDisk(PhysicalDisk*)>

c0023b4e <ATAPI::detectMedia()>:
c0023b4e:	56                   	push   esi
c0023b4f:	53                   	push   ebx
c0023b50:	83 ec 28             	sub    esp,0x28
c0023b53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b57:	6a 0c                	push   0xc
c0023b59:	6a 00                	push   0x0
c0023b5b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023b5f:	56                   	push   esi
c0023b60:	e8 26 cb fd ff       	call   c000068b <memset>
c0023b65:	58                   	pop    eax
c0023b66:	5a                   	pop    edx
c0023b67:	6a 00                	push   0x0
c0023b69:	6a 00                	push   0x0
c0023b6b:	6a 00                	push   0x0
c0023b6d:	6a 00                	push   0x0
c0023b6f:	56                   	push   esi
c0023b70:	53                   	push   ebx
c0023b71:	e8 88 fc ff ff       	call   c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023b76:	83 c4 1c             	add    esp,0x1c
c0023b79:	6a 0c                	push   0xc
c0023b7b:	6a 00                	push   0x0
c0023b7d:	56                   	push   esi
c0023b7e:	e8 08 cb fd ff       	call   c000068b <memset>
c0023b83:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023b88:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023b8d:	59                   	pop    ecx
c0023b8e:	58                   	pop    eax
c0023b8f:	6a 01                	push   0x1
c0023b91:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023b95:	50                   	push   eax
c0023b96:	6a 00                	push   0x0
c0023b98:	6a 12                	push   0x12
c0023b9a:	56                   	push   esi
c0023b9b:	53                   	push   ebx
c0023b9c:	e8 5d fc ff ff       	call   c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023ba1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023ba5:	83 c4 20             	add    esp,0x20
c0023ba8:	83 e0 7f             	and    eax,0x7f
c0023bab:	3c 70                	cmp    al,0x70
c0023bad:	74 15                	je     c0023bc4 <ATAPI::detectMedia()+0x76>
c0023baf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023bb6:	75 0c                	jne    c0023bc4 <ATAPI::detectMedia()+0x76>
c0023bb8:	83 ec 0c             	sub    esp,0xc
c0023bbb:	53                   	push   ebx
c0023bbc:	e8 5f ff ff ff       	call   c0023b20 <ATAPI::diskInserted()>
c0023bc1:	83 c4 10             	add    esp,0x10
c0023bc4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023bc8:	83 e0 0f             	and    eax,0xf
c0023bcb:	3c 02                	cmp    al,0x2
c0023bcd:	75 1b                	jne    c0023bea <ATAPI::detectMedia()+0x9c>
c0023bcf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023bd4:	75 2d                	jne    c0023c03 <ATAPI::detectMedia()+0xb5>
c0023bd6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023bdd:	74 24                	je     c0023c03 <ATAPI::detectMedia()+0xb5>
c0023bdf:	83 ec 0c             	sub    esp,0xc
c0023be2:	53                   	push   ebx
c0023be3:	e8 d6 fe ff ff       	call   c0023abe <ATAPI::diskRemoved()>
c0023be8:	eb 16                	jmp    c0023c00 <ATAPI::detectMedia()+0xb2>
c0023bea:	84 c0                	test   al,al
c0023bec:	75 15                	jne    c0023c03 <ATAPI::detectMedia()+0xb5>
c0023bee:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023bf5:	75 0c                	jne    c0023c03 <ATAPI::detectMedia()+0xb5>
c0023bf7:	83 ec 0c             	sub    esp,0xc
c0023bfa:	53                   	push   ebx
c0023bfb:	e8 20 ff ff ff       	call   c0023b20 <ATAPI::diskInserted()>
c0023c00:	83 c4 10             	add    esp,0x10
c0023c03:	83 c4 24             	add    esp,0x24
c0023c06:	5b                   	pop    ebx
c0023c07:	5e                   	pop    esi
c0023c08:	c3                   	ret    
c0023c09:	90                   	nop

c0023c0a <ATAPI::open(int, int, void*)>:
c0023c0a:	53                   	push   ebx
c0023c0b:	83 ec 08             	sub    esp,0x8
c0023c0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c1a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023c20:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023c26:	c1 e0 06             	shl    eax,0x6
c0023c29:	01 d0                	add    eax,edx
c0023c2b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023c32:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023c38:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023c3f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023c49:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023c4f:	6a 04                	push   0x4
c0023c51:	6a 0c                	push   0xc
c0023c53:	51                   	push   ecx
c0023c54:	52                   	push   edx
c0023c55:	e8 44 e5 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c5a:	90                   	nop
c0023c5b:	90                   	nop
c0023c5c:	6a 00                	push   0x0
c0023c5e:	6a 0c                	push   0xc
c0023c60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c67:	50                   	push   eax
c0023c68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c6e:	e8 2b e5 ff ff       	call   c002219e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c73:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023c7a:	83 c4 14             	add    esp,0x14
c0023c7d:	53                   	push   ebx
c0023c7e:	e8 cb fe ff ff       	call   c0023b4e <ATAPI::detectMedia()>
c0023c83:	31 c0                	xor    eax,eax
c0023c85:	83 c4 18             	add    esp,0x18
c0023c88:	5b                   	pop    ebx
c0023c89:	c3                   	ret    

c0023c8a <ATAPI::read(unsigned long long, int, void*)>:
c0023c8a:	55                   	push   ebp
c0023c8b:	57                   	push   edi
c0023c8c:	56                   	push   esi
c0023c8d:	53                   	push   ebx
c0023c8e:	83 ec 1c             	sub    esp,0x1c
c0023c91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c99:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023c9d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ca4:	74 41                	je     c0023ce7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023ca6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023caa:	b9 03 00 00 00       	mov    ecx,0x3
c0023caf:	fc                   	cld    
c0023cb0:	31 c0                	xor    eax,eax
c0023cb2:	86 fb                	xchg   bl,bh
c0023cb4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023cb6:	c1 c3 10             	rol    ebx,0x10
c0023cb9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023cbe:	89 e8                	mov    eax,ebp
c0023cc0:	86 fb                	xchg   bl,bh
c0023cc2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023cc6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023cca:	50                   	push   eax
c0023ccb:	50                   	push   eax
c0023ccc:	55                   	push   ebp
c0023ccd:	c1 e5 0b             	shl    ebp,0xb
c0023cd0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023cd4:	6a 00                	push   0x0
c0023cd6:	55                   	push   ebp
c0023cd7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023cdb:	50                   	push   eax
c0023cdc:	56                   	push   esi
c0023cdd:	e8 1c fb ff ff       	call   c00237fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023ce2:	83 c4 20             	add    esp,0x20
c0023ce5:	eb 1a                	jmp    c0023d01 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023ce7:	83 ec 0c             	sub    esp,0xc
c0023cea:	56                   	push   esi
c0023ceb:	e8 5e fe ff ff       	call   c0023b4e <ATAPI::detectMedia()>
c0023cf0:	83 c4 10             	add    esp,0x10
c0023cf3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023cfa:	75 aa                	jne    c0023ca6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023cfc:	b8 02 00 00 00       	mov    eax,0x2
c0023d01:	83 c4 1c             	add    esp,0x1c
c0023d04:	5b                   	pop    ebx
c0023d05:	5e                   	pop    esi
c0023d06:	5f                   	pop    edi
c0023d07:	5d                   	pop    ebp
c0023d08:	c3                   	ret    
c0023d09:	90                   	nop

c0023d0a <SATA::close(int, int, void*)>:
c0023d0a:	83 ec 0c             	sub    esp,0xc
c0023d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d11:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d17:	85 c0                	test   eax,eax
c0023d19:	74 0c                	je     c0023d27 <SATA::close(int, int, void*)+0x1d>
c0023d1b:	83 ec 0c             	sub    esp,0xc
c0023d1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d20:	50                   	push   eax
c0023d21:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d24:	83 c4 10             	add    esp,0x10
c0023d27:	31 c0                	xor    eax,eax
c0023d29:	83 c4 0c             	add    esp,0xc
c0023d2c:	c3                   	ret    
c0023d2d:	90                   	nop

c0023d2e <SATA::powerSaving(PowerSavingLevel)>:
c0023d2e:	c3                   	ret    
c0023d2f:	90                   	nop

c0023d30 <SATA::open(int, int, void*)>:
c0023d30:	53                   	push   ebx
c0023d31:	83 ec 14             	sub    esp,0x14
c0023d34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023d38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023d3c:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023d46:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023d4c:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d5a:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023d64:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023d6a:	68 78 b7 02 c0       	push   0xc002b778
c0023d6f:	e8 1b eb fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023d74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d77:	e8 b2 03 ff ff       	call   c001412e <PhysicalDisk::startCache()>
c0023d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d7f:	e8 d4 23 ff ff       	call   c0016158 <createPartitionsForDisk(PhysicalDisk*)>
c0023d84:	31 c0                	xor    eax,eax
c0023d86:	83 c4 18             	add    esp,0x18
c0023d89:	5b                   	pop    ebx
c0023d8a:	c3                   	ret    
c0023d8b:	90                   	nop

c0023d8c <SATA::SATA()>:
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d93:	83 ec 04             	sub    esp,0x4
c0023d96:	68 00 02 00 00       	push   0x200
c0023d9b:	68 93 b7 02 c0       	push   0xc002b793
c0023da0:	50                   	push   eax
c0023da1:	e8 20 03 ff ff       	call   c00140c6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023da6:	83 c4 10             	add    esp,0x10
c0023da9:	ba 70 b8 02 c0       	mov    edx,0xc002b870
c0023dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db2:	89 10                	mov    DWORD PTR [eax],edx
c0023db4:	90                   	nop
c0023db5:	83 c4 0c             	add    esp,0xc
c0023db8:	c3                   	ret    
c0023db9:	90                   	nop

c0023dba <SATA::access(unsigned long long, int, void*, bool)>:
c0023dba:	55                   	push   ebp
c0023dbb:	57                   	push   edi
c0023dbc:	56                   	push   esi
c0023dbd:	53                   	push   ebx
c0023dbe:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023dc4:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023dcb:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023dd2:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023dd9:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023de0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023de4:	83 ff 08             	cmp    edi,0x8
c0023de7:	7e 10                	jle    c0023df9 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023de9:	83 ec 0c             	sub    esp,0xc
c0023dec:	68 a3 b7 02 c0       	push   0xc002b7a3
c0023df1:	e8 eb 5b ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0023df6:	83 c4 10             	add    esp,0x10
c0023df9:	51                   	push   ecx
c0023dfa:	68 00 02 00 00       	push   0x200
c0023dff:	68 ee 00 00 00       	push   0xee
c0023e04:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023e08:	55                   	push   ebp
c0023e09:	e8 7d c8 fd ff       	call   c000068b <memset>
c0023e0e:	83 c4 0c             	add    esp,0xc
c0023e11:	68 00 02 00 00       	push   0x200
c0023e16:	68 ee 00 00 00       	push   0xee
c0023e1b:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023e22:	50                   	push   eax
c0023e23:	e8 63 c8 fd ff       	call   c000068b <memset>
c0023e28:	55                   	push   ebp
c0023e29:	57                   	push   edi
c0023e2a:	56                   	push   esi
c0023e2b:	68 d5 b7 02 c0       	push   0xc002b7d5
c0023e30:	e8 5a ea fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023e35:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023e3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023e41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023e45:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023e4f:	c1 e0 07             	shl    eax,0x7
c0023e52:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023e56:	83 c4 18             	add    esp,0x18
c0023e59:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e67:	8d 50 02             	lea    edx,[eax+0x2]
c0023e6a:	c1 e2 07             	shl    edx,0x7
c0023e6d:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023e71:	52                   	push   edx
c0023e72:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023e76:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023e7c:	e8 e1 ef ff ff       	call   c0022e62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023e81:	89 c1                	mov    ecx,eax
c0023e83:	58                   	pop    eax
c0023e84:	5a                   	pop    edx
c0023e85:	51                   	push   ecx
c0023e86:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023e8a:	68 0a b8 02 c0       	push   0xc002b80a
c0023e8f:	e8 fb e9 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023e94:	83 c4 10             	add    esp,0x10
c0023e97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023e9b:	83 f9 ff             	cmp    ecx,0xffffffff
c0023e9e:	0f 84 9a 01 00 00    	je     c002403e <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023ea4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023eaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023eae:	8b 12                	mov    edx,DWORD PTR [edx]
c0023eb0:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023eb6:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023ebc:	89 c8                	mov    eax,ecx
c0023ebe:	c1 e0 05             	shl    eax,0x5
c0023ec1:	01 c2                	add    edx,eax
c0023ec3:	8a 02                	mov    al,BYTE PTR [edx]
c0023ec5:	83 e0 a0             	and    eax,0xffffffa0
c0023ec8:	83 c8 05             	or     eax,0x5
c0023ecb:	88 02                	mov    BYTE PTR [edx],al
c0023ecd:	8d 47 ff             	lea    eax,[edi-0x1]
c0023ed0:	c1 f8 04             	sar    eax,0x4
c0023ed3:	40                   	inc    eax
c0023ed4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023ed8:	0f b7 c0             	movzx  eax,ax
c0023edb:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023ee1:	83 c0 08             	add    eax,0x8
c0023ee4:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023eea:	c1 e0 04             	shl    eax,0x4
c0023eed:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023ef3:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023ef6:	01 cb                	add    ebx,ecx
c0023ef8:	52                   	push   edx
c0023ef9:	50                   	push   eax
c0023efa:	6a 00                	push   0x0
c0023efc:	53                   	push   ebx
c0023efd:	e8 89 c7 fd ff       	call   c000068b <memset>
c0023f02:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023f08:	83 c4 10             	add    esp,0x10
c0023f0b:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023f11:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023f16:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023f1d:	0d ff 01 00 80       	or     eax,0x800001ff
c0023f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023f26:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023f2c:	b8 01 00 00 00       	mov    eax,0x1
c0023f31:	89 c2                	mov    edx,eax
c0023f33:	c1 e2 04             	shl    edx,0x4
c0023f36:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023f3d:	8d 50 08             	lea    edx,[eax+0x8]
c0023f40:	40                   	inc    eax
c0023f41:	c1 e2 04             	shl    edx,0x4
c0023f44:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023f4c:	83 f8 10             	cmp    eax,0x10
c0023f4f:	75 e0                	jne    c0023f31 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023f51:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023f54:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023f58:	66 25 00 7f          	and    ax,0x7f00
c0023f5c:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023f60:	66 0d 27 80          	or     ax,0x8027
c0023f64:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023f68:	66 89 03             	mov    WORD PTR [ebx],ax
c0023f6b:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023f6f:	89 f0                	mov    eax,esi
c0023f71:	31 d2                	xor    edx,edx
c0023f73:	c1 e8 10             	shr    eax,0x10
c0023f76:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023f79:	89 f0                	mov    eax,esi
c0023f7b:	c1 e8 18             	shr    eax,0x18
c0023f7e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023f81:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023f85:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023f88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f8c:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f93:	c1 e0 07             	shl    eax,0x7
c0023f96:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023f9a:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023fa0:	80 e3 88             	and    bl,0x88
c0023fa3:	74 0b                	je     c0023fb0 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023fa5:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023fab:	74 0b                	je     c0023fb8 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023fad:	42                   	inc    edx
c0023fae:	eb ea                	jmp    c0023f9a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023fb0:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023fb6:	75 0a                	jne    c0023fc2 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	68 13 b8 02 c0       	push   0xc002b813
c0023fc0:	eb 60                	jmp    c0024022 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023fc2:	be 01 00 00 00       	mov    esi,0x1
c0023fc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fcb:	d3 e6                	shl    esi,cl
c0023fcd:	c1 e3 07             	shl    ebx,0x7
c0023fd0:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023fd6:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023fda:	83 ec 0c             	sub    esp,0xc
c0023fdd:	68 21 b8 02 c0       	push   0xc002b821
c0023fe2:	e8 a8 e8 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0023fe7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023fed:	83 c4 10             	add    esp,0x10
c0023ff0:	85 c6                	test   esi,eax
c0023ff2:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023ff8:	74 1a                	je     c0024014 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023ffa:	0f ba e0 1e          	bt     eax,0x1e
c0023ffe:	73 da                	jae    c0023fda <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0024000:	83 ec 0c             	sub    esp,0xc
c0024003:	68 2e b8 02 c0       	push   0xc002b82e
c0024008:	e8 d4 59 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c002400d:	83 c4 10             	add    esp,0x10
c0024010:	31 c0                	xor    eax,eax
c0024012:	eb 2f                	jmp    c0024043 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0024014:	0f ba e0 1e          	bt     eax,0x1e
c0024018:	73 12                	jae    c002402c <SATA::access(unsigned long long, int, void*, bool)+0x272>
c002401a:	83 ec 0c             	sub    esp,0xc
c002401d:	68 2e b8 02 c0       	push   0xc002b82e
c0024022:	e8 ba 59 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0024027:	83 c4 10             	add    esp,0x10
c002402a:	eb 12                	jmp    c002403e <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002402c:	83 ec 0c             	sub    esp,0xc
c002402f:	68 3f b8 02 c0       	push   0xc002b83f
c0024034:	e8 a8 59 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0024039:	83 c4 10             	add    esp,0x10
c002403c:	eb fe                	jmp    c002403c <SATA::access(unsigned long long, int, void*, bool)+0x282>
c002403e:	b8 01 00 00 00       	mov    eax,0x1
c0024043:	81 c4 2c 04 00 00    	add    esp,0x42c
c0024049:	5b                   	pop    ebx
c002404a:	5e                   	pop    esi
c002404b:	5f                   	pop    edi
c002404c:	5d                   	pop    ebp
c002404d:	c3                   	ret    

c002404e <SATA::read(unsigned long long, int, void*)>:
c002404e:	57                   	push   edi
c002404f:	b8 04 00 00 00       	mov    eax,0x4
c0024054:	56                   	push   esi
c0024055:	53                   	push   ebx
c0024056:	83 ec 10             	sub    esp,0x10
c0024059:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002405d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024061:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024064:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024068:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002406c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024072:	77 3b                	ja     c00240af <SATA::read(unsigned long long, int, void*)+0x61>
c0024074:	b8 06 00 00 00       	mov    eax,0x6
c0024079:	85 d2                	test   edx,edx
c002407b:	74 32                	je     c00240af <SATA::read(unsigned long long, int, void*)+0x61>
c002407d:	50                   	push   eax
c002407e:	50                   	push   eax
c002407f:	6a 00                	push   0x0
c0024081:	52                   	push   edx
c0024082:	53                   	push   ebx
c0024083:	57                   	push   edi
c0024084:	56                   	push   esi
c0024085:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024089:	e8 2c fd ff ff       	call   c0023dba <SATA::access(unsigned long long, int, void*, bool)>
c002408e:	83 c4 20             	add    esp,0x20
c0024091:	85 c0                	test   eax,eax
c0024093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024097:	75 11                	jne    c00240aa <SATA::read(unsigned long long, int, void*)+0x5c>
c0024099:	01 1d 08 f0 02 c0    	add    DWORD PTR ds:0xc002f008,ebx
c002409f:	e8 50 c6 fe ff       	call   c00106f4 <VgaText::updateDiskUsage()>
c00240a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240a8:	eb 05                	jmp    c00240af <SATA::read(unsigned long long, int, void*)+0x61>
c00240aa:	b8 01 00 00 00       	mov    eax,0x1
c00240af:	83 c4 10             	add    esp,0x10
c00240b2:	5b                   	pop    ebx
c00240b3:	5e                   	pop    esi
c00240b4:	5f                   	pop    edi
c00240b5:	c3                   	ret    

c00240b6 <SATA::write(unsigned long long, int, void*)>:
c00240b6:	57                   	push   edi
c00240b7:	b8 04 00 00 00       	mov    eax,0x4
c00240bc:	56                   	push   esi
c00240bd:	53                   	push   ebx
c00240be:	83 ec 10             	sub    esp,0x10
c00240c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00240c5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00240c9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00240cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00240d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240d4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00240da:	77 3b                	ja     c0024117 <SATA::write(unsigned long long, int, void*)+0x61>
c00240dc:	b8 06 00 00 00       	mov    eax,0x6
c00240e1:	85 d2                	test   edx,edx
c00240e3:	74 32                	je     c0024117 <SATA::write(unsigned long long, int, void*)+0x61>
c00240e5:	50                   	push   eax
c00240e6:	50                   	push   eax
c00240e7:	6a 01                	push   0x1
c00240e9:	52                   	push   edx
c00240ea:	53                   	push   ebx
c00240eb:	57                   	push   edi
c00240ec:	56                   	push   esi
c00240ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00240f1:	e8 c4 fc ff ff       	call   c0023dba <SATA::access(unsigned long long, int, void*, bool)>
c00240f6:	83 c4 20             	add    esp,0x20
c00240f9:	85 c0                	test   eax,eax
c00240fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240ff:	75 11                	jne    c0024112 <SATA::write(unsigned long long, int, void*)+0x5c>
c0024101:	01 1d 04 f0 02 c0    	add    DWORD PTR ds:0xc002f004,ebx
c0024107:	e8 e8 c5 fe ff       	call   c00106f4 <VgaText::updateDiskUsage()>
c002410c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024110:	eb 05                	jmp    c0024117 <SATA::write(unsigned long long, int, void*)+0x61>
c0024112:	b8 01 00 00 00       	mov    eax,0x1
c0024117:	83 c4 10             	add    esp,0x10
c002411a:	5b                   	pop    ebx
c002411b:	5e                   	pop    esi
c002411c:	5f                   	pop    edi
c002411d:	c3                   	ret    

c002411e <AVX::open(int, int, void*)>:
c002411e:	83 ec 0c             	sub    esp,0xc
c0024121:	e8 42 11 00 00       	call   c0025268 <avxInit>
c0024126:	b8 00 00 00 00       	mov    eax,0x0
c002412b:	83 c4 0c             	add    esp,0xc
c002412e:	c3                   	ret    
c002412f:	90                   	nop

c0024130 <AVX::close(int, int, void*)>:
c0024130:	83 ec 0c             	sub    esp,0xc
c0024133:	e8 31 11 00 00       	call   c0025269 <avxClose>
c0024138:	b8 00 00 00 00       	mov    eax,0x0
c002413d:	83 c4 0c             	add    esp,0xc
c0024140:	c3                   	ret    
c0024141:	90                   	nop

c0024142 <AVX::available()>:
c0024142:	83 ec 0c             	sub    esp,0xc
c0024145:	e8 16 11 00 00       	call   c0025260 <avxDetect>
c002414a:	85 c0                	test   eax,eax
c002414c:	0f 95 c0             	setne  al
c002414f:	83 c4 0c             	add    esp,0xc
c0024152:	c3                   	ret    
c0024153:	90                   	nop

c0024154 <AVX::save(void*)>:
c0024154:	83 ec 0c             	sub    esp,0xc
c0024157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002415b:	83 ec 0c             	sub    esp,0xc
c002415e:	50                   	push   eax
c002415f:	e8 02 11 00 00       	call   c0025266 <avxSave>
c0024164:	83 c4 10             	add    esp,0x10
c0024167:	90                   	nop
c0024168:	83 c4 0c             	add    esp,0xc
c002416b:	c3                   	ret    

c002416c <AVX::load(void*)>:
c002416c:	83 ec 0c             	sub    esp,0xc
c002416f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024173:	83 ec 0c             	sub    esp,0xc
c0024176:	50                   	push   eax
c0024177:	e8 eb 10 00 00       	call   c0025267 <avxLoad>
c002417c:	83 c4 10             	add    esp,0x10
c002417f:	90                   	nop
c0024180:	83 c4 0c             	add    esp,0xc
c0024183:	c3                   	ret    

c0024184 <AVX::AVX()>:
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002418b:	83 ec 08             	sub    esp,0x8
c002418e:	68 9c b8 02 c0       	push   0xc002b89c
c0024193:	50                   	push   eax
c0024194:	e8 0b 00 ff ff       	call   c00141a4 <FPU::FPU(char const*)>
c0024199:	83 c4 10             	add    esp,0x10
c002419c:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c00241a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241a5:	89 10                	mov    DWORD PTR [eax],edx
c00241a7:	90                   	nop
c00241a8:	83 c4 0c             	add    esp,0xc
c00241ab:	c3                   	ret    

c00241ac <MMX::available()>:
c00241ac:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00241b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00241b7:	83 e0 20             	and    eax,0x20
c00241ba:	84 c0                	test   al,al
c00241bc:	0f 95 c0             	setne  al
c00241bf:	c3                   	ret    

c00241c0 <MMX::open(int, int, void*)>:
c00241c0:	83 ec 0c             	sub    esp,0xc
c00241c3:	e8 24 11 00 00       	call   c00252ec <x87Init>
c00241c8:	b8 00 00 00 00       	mov    eax,0x0
c00241cd:	83 c4 0c             	add    esp,0xc
c00241d0:	c3                   	ret    
c00241d1:	90                   	nop

c00241d2 <MMX::close(int, int, void*)>:
c00241d2:	83 ec 0c             	sub    esp,0xc
c00241d5:	e8 2c 11 00 00       	call   c0025306 <x87Close>
c00241da:	b8 00 00 00 00       	mov    eax,0x0
c00241df:	83 c4 0c             	add    esp,0xc
c00241e2:	c3                   	ret    
c00241e3:	90                   	nop

c00241e4 <MMX::save(void*)>:
c00241e4:	83 ec 0c             	sub    esp,0xc
c00241e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241eb:	83 ec 0c             	sub    esp,0xc
c00241ee:	50                   	push   eax
c00241ef:	e8 ed 10 00 00       	call   c00252e1 <x87Save>
c00241f4:	83 c4 10             	add    esp,0x10
c00241f7:	90                   	nop
c00241f8:	83 c4 0c             	add    esp,0xc
c00241fb:	c3                   	ret    

c00241fc <MMX::load(void*)>:
c00241fc:	83 ec 0c             	sub    esp,0xc
c00241ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024203:	83 ec 0c             	sub    esp,0xc
c0024206:	50                   	push   eax
c0024207:	e8 db 10 00 00       	call   c00252e7 <x87Load>
c002420c:	83 c4 10             	add    esp,0x10
c002420f:	90                   	nop
c0024210:	83 c4 0c             	add    esp,0xc
c0024213:	c3                   	ret    

c0024214 <MMX::MMX()>:
c0024214:	83 ec 0c             	sub    esp,0xc
c0024217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002421b:	83 ec 08             	sub    esp,0x8
c002421e:	68 dc b8 02 c0       	push   0xc002b8dc
c0024223:	50                   	push   eax
c0024224:	e8 7b ff fe ff       	call   c00141a4 <FPU::FPU(char const*)>
c0024229:	83 c4 10             	add    esp,0x10
c002422c:	ba ec b8 02 c0       	mov    edx,0xc002b8ec
c0024231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024235:	89 10                	mov    DWORD PTR [eax],edx
c0024237:	90                   	nop
c0024238:	83 c4 0c             	add    esp,0xc
c002423b:	c3                   	ret    

c002423c <SSE::open(int, int, void*)>:
c002423c:	83 ec 0c             	sub    esp,0xc
c002423f:	e8 60 10 00 00       	call   c00252a4 <sseInit>
c0024244:	b8 00 00 00 00       	mov    eax,0x0
c0024249:	83 c4 0c             	add    esp,0xc
c002424c:	c3                   	ret    
c002424d:	90                   	nop

c002424e <SSE::close(int, int, void*)>:
c002424e:	83 ec 0c             	sub    esp,0xc
c0024251:	e8 5e 10 00 00       	call   c00252b4 <sseClose>
c0024256:	b8 00 00 00 00       	mov    eax,0x0
c002425b:	83 c4 0c             	add    esp,0xc
c002425e:	c3                   	ret    
c002425f:	90                   	nop

c0024260 <SSE::available()>:
c0024260:	83 ec 1c             	sub    esp,0x1c
c0024263:	e8 18 10 00 00       	call   c0025280 <absolutelyNoChanceInHell>
c0024268:	85 c0                	test   eax,eax
c002426a:	0f 95 c0             	setne  al
c002426d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024271:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024275:	83 c4 1c             	add    esp,0x1c
c0024278:	c3                   	ret    
c0024279:	90                   	nop

c002427a <SSE::save(void*)>:
c002427a:	83 ec 0c             	sub    esp,0xc
c002427d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024281:	83 ec 0c             	sub    esp,0xc
c0024284:	50                   	push   eax
c0024285:	e8 0e 10 00 00       	call   c0025298 <sseSave>
c002428a:	83 c4 10             	add    esp,0x10
c002428d:	90                   	nop
c002428e:	83 c4 0c             	add    esp,0xc
c0024291:	c3                   	ret    

c0024292 <SSE::load(void*)>:
c0024292:	83 ec 0c             	sub    esp,0xc
c0024295:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024299:	83 ec 0c             	sub    esp,0xc
c002429c:	50                   	push   eax
c002429d:	e8 fc 0f 00 00       	call   c002529e <sseLoad>
c00242a2:	83 c4 10             	add    esp,0x10
c00242a5:	90                   	nop
c00242a6:	83 c4 0c             	add    esp,0xc
c00242a9:	c3                   	ret    

c00242aa <SSE::SSE()>:
c00242aa:	83 ec 0c             	sub    esp,0xc
c00242ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242b1:	83 ec 08             	sub    esp,0x8
c00242b4:	68 1c b9 02 c0       	push   0xc002b91c
c00242b9:	50                   	push   eax
c00242ba:	e8 e5 fe fe ff       	call   c00141a4 <FPU::FPU(char const*)>
c00242bf:	83 c4 10             	add    esp,0x10
c00242c2:	ba 2c b9 02 c0       	mov    edx,0xc002b92c
c00242c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242cb:	89 10                	mov    DWORD PTR [eax],edx
c00242cd:	90                   	nop
c00242ce:	83 c4 0c             	add    esp,0xc
c00242d1:	c3                   	ret    

c00242d2 <x87::open(int, int, void*)>:
c00242d2:	83 ec 0c             	sub    esp,0xc
c00242d5:	e8 12 10 00 00       	call   c00252ec <x87Init>
c00242da:	b8 00 00 00 00       	mov    eax,0x0
c00242df:	83 c4 0c             	add    esp,0xc
c00242e2:	c3                   	ret    
c00242e3:	90                   	nop

c00242e4 <x87::close(int, int, void*)>:
c00242e4:	83 ec 0c             	sub    esp,0xc
c00242e7:	e8 1a 10 00 00       	call   c0025306 <x87Close>
c00242ec:	b8 00 00 00 00       	mov    eax,0x0
c00242f1:	83 c4 0c             	add    esp,0xc
c00242f4:	c3                   	ret    
c00242f5:	90                   	nop

c00242f6 <x87::available()>:
c00242f6:	83 ec 0c             	sub    esp,0xc
c00242f9:	e8 c8 0f 00 00       	call   c00252c6 <x87Detect>
c00242fe:	85 c0                	test   eax,eax
c0024300:	0f 95 c0             	setne  al
c0024303:	83 c4 0c             	add    esp,0xc
c0024306:	c3                   	ret    
c0024307:	90                   	nop

c0024308 <x87::save(void*)>:
c0024308:	83 ec 0c             	sub    esp,0xc
c002430b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002430f:	83 ec 0c             	sub    esp,0xc
c0024312:	50                   	push   eax
c0024313:	e8 c9 0f 00 00       	call   c00252e1 <x87Save>
c0024318:	83 c4 10             	add    esp,0x10
c002431b:	90                   	nop
c002431c:	83 c4 0c             	add    esp,0xc
c002431f:	c3                   	ret    

c0024320 <x87::load(void*)>:
c0024320:	83 ec 0c             	sub    esp,0xc
c0024323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024327:	83 ec 0c             	sub    esp,0xc
c002432a:	50                   	push   eax
c002432b:	e8 b7 0f 00 00       	call   c00252e7 <x87Load>
c0024330:	83 c4 10             	add    esp,0x10
c0024333:	90                   	nop
c0024334:	83 c4 0c             	add    esp,0xc
c0024337:	c3                   	ret    

c0024338 <x87::x87()>:
c0024338:	83 ec 0c             	sub    esp,0xc
c002433b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433f:	83 ec 08             	sub    esp,0x8
c0024342:	68 5c b9 02 c0       	push   0xc002b95c
c0024347:	50                   	push   eax
c0024348:	e8 57 fe fe ff       	call   c00141a4 <FPU::FPU(char const*)>
c002434d:	83 c4 10             	add    esp,0x10
c0024350:	ba 6c b9 02 c0       	mov    edx,0xc002b96c
c0024355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024359:	89 10                	mov    DWORD PTR [eax],edx
c002435b:	90                   	nop
c002435c:	83 c4 0c             	add    esp,0xc
c002435f:	c3                   	ret    

c0024360 <APIC::disable()>:
c0024360:	90                   	nop
c0024361:	c3                   	ret    

c0024362 <APIC::close(int, int, void*)>:
c0024362:	55                   	push   ebp
c0024363:	89 e5                	mov    ebp,esp
c0024365:	83 ec 08             	sub    esp,0x8
c0024368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002436b:	8b 00                	mov    eax,DWORD PTR [eax]
c002436d:	83 c0 3c             	add    eax,0x3c
c0024370:	8b 00                	mov    eax,DWORD PTR [eax]
c0024372:	83 ec 0c             	sub    esp,0xc
c0024375:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024378:	ff d0                	call   eax
c002437a:	83 c4 10             	add    esp,0x10
c002437d:	b8 00 00 00 00       	mov    eax,0x0
c0024382:	c9                   	leave  
c0024383:	c3                   	ret    

c0024384 <IOAPIC::close(int, int, void*)>:
c0024384:	b8 00 00 00 00       	mov    eax,0x0
c0024389:	c3                   	ret    

c002438a <APIC::io_wait()>:
c002438a:	eb 00                	jmp    c002438c <APIC::io_wait()+0x2>
c002438c:	eb 00                	jmp    c002438e <APIC::io_wait()+0x4>
c002438e:	90                   	nop
c002438f:	c3                   	ret    

c0024390 <APIC::getBase()>:
c0024390:	55                   	push   ebp
c0024391:	89 e5                	mov    ebp,esp
c0024393:	83 ec 18             	sub    esp,0x18
c0024396:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c002439b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00243a1:	83 e0 08             	and    eax,0x8
c00243a4:	84 c0                	test   al,al
c00243a6:	75 07                	jne    c00243af <APIC::getBase()+0x1f>
c00243a8:	b8 00 00 00 00       	mov    eax,0x0
c00243ad:	eb 21                	jmp    c00243d0 <APIC::getBase()+0x40>
c00243af:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c00243b4:	83 ec 08             	sub    esp,0x8
c00243b7:	6a 1b                	push   0x1b
c00243b9:	50                   	push   eax
c00243ba:	e8 d3 a7 fe ff       	call   c000eb92 <Computer::rdmsr(unsigned int)>
c00243bf:	83 c4 10             	add    esp,0x10
c00243c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00243c5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00243c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00243cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00243d0:	c9                   	leave  
c00243d1:	c3                   	ret    

c00243d2 <APIC::eoi(unsigned char)>:
c00243d2:	55                   	push   ebp
c00243d3:	89 e5                	mov    ebp,esp
c00243d5:	83 ec 28             	sub    esp,0x28
c00243d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00243db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00243de:	83 ec 0c             	sub    esp,0xc
c00243e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00243e4:	e8 a7 ff ff ff       	call   c0024390 <APIC::getBase()>
c00243e9:	83 c4 10             	add    esp,0x10
c00243ec:	05 b0 00 00 00       	add    eax,0xb0
c00243f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00243f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00243f7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00243fd:	90                   	nop
c00243fe:	c9                   	leave  
c00243ff:	c3                   	ret    

c0024400 <APIC::open(int, int, void*)>:
c0024400:	55                   	push   ebp
c0024401:	89 e5                	mov    ebp,esp
c0024403:	57                   	push   edi
c0024404:	56                   	push   esi
c0024405:	53                   	push   ebx
c0024406:	83 ec 2c             	sub    esp,0x2c
c0024409:	83 ec 0c             	sub    esp,0xc
c002440c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002440f:	e8 7c ff ff ff       	call   c0024390 <APIC::getBase()>
c0024414:	83 c4 10             	add    esp,0x10
c0024417:	89 c2                	mov    edx,eax
c0024419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002441c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024422:	0f b6 f8             	movzx  edi,al
c0024425:	89 d0                	mov    eax,edx
c0024427:	ba 00 00 00 00       	mov    edx,0x0
c002442c:	89 c1                	mov    ecx,eax
c002442e:	80 e5 ff             	and    ch,0xff
c0024431:	89 cb                	mov    ebx,ecx
c0024433:	0f b6 f2             	movzx  esi,dl
c0024436:	89 d8                	mov    eax,ebx
c0024438:	89 f2                	mov    edx,esi
c002443a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002443d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024440:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024444:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024448:	83 e0 00             	and    eax,0x0
c002444b:	09 d0                	or     eax,edx
c002444d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024454:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002445a:	8d 50 01             	lea    edx,[eax+0x1]
c002445d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024460:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024466:	0f b6 d0             	movzx  edx,al
c0024469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002446c:	83 c2 08             	add    edx,0x8
c002446f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024473:	0f b6 c9             	movzx  ecx,cl
c0024476:	81 c9 00 00 01 00    	or     ecx,0x10000
c002447c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024480:	83 ec 0c             	sub    esp,0xc
c0024483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024486:	e8 05 ff ff ff       	call   c0024390 <APIC::getBase()>
c002448b:	83 c4 10             	add    esp,0x10
c002448e:	05 f0 00 00 00       	add    eax,0xf0
c0024493:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024499:	8b 00                	mov    eax,DWORD PTR [eax]
c002449b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002449e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00244a5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00244ac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00244af:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00244b2:	89 10                	mov    DWORD PTR [eax],edx
c00244b4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00244bb:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c00244c0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00244c3:	7d 7c                	jge    c0024541 <APIC::open(int, int, void*)+0x141>
c00244c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244c8:	8b 04 85 a0 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2a60]
c00244cf:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00244d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244d5:	8b 04 85 a0 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2a60]
c00244dc:	c1 e8 08             	shr    eax,0x8
c00244df:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00244e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244e6:	8b 04 85 a0 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2a60]
c00244ed:	c1 e8 18             	shr    eax,0x18
c00244f0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00244f3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00244f7:	75 40                	jne    c0024539 <APIC::open(int, int, void*)+0x139>
c00244f9:	83 ec 0c             	sub    esp,0xc
c00244fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00244ff:	e8 8c fe ff ff       	call   c0024390 <APIC::getBase()>
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002450b:	75 07                	jne    c0024514 <APIC::open(int, int, void*)+0x114>
c002450d:	ba 60 03 00 00       	mov    edx,0x360
c0024512:	eb 05                	jmp    c0024519 <APIC::open(int, int, void*)+0x119>
c0024514:	ba 50 03 00 00       	mov    edx,0x350
c0024519:	01 d0                	add    eax,edx
c002451b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002451e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024521:	8b 00                	mov    eax,DWORD PTR [eax]
c0024523:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024526:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002452d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024531:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024534:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024537:	89 10                	mov    DWORD PTR [eax],edx
c0024539:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002453c:	e9 7a ff ff ff       	jmp    c00244bb <APIC::open(int, int, void*)+0xbb>
c0024541:	b8 00 00 00 00       	mov    eax,0x0
c0024546:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024549:	5b                   	pop    ebx
c002454a:	5e                   	pop    esi
c002454b:	5f                   	pop    edi
c002454c:	5d                   	pop    ebp
c002454d:	c3                   	ret    

c002454e <IOAPIC::IOAPIC()>:
c002454e:	83 ec 0c             	sub    esp,0xc
c0024551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024555:	83 ec 08             	sub    esp,0x8
c0024558:	68 9c b9 02 c0       	push   0xc002b99c
c002455d:	50                   	push   eax
c002455e:	e8 43 f9 fe ff       	call   c0013ea6 <Device::Device(char const*)>
c0024563:	83 c4 10             	add    esp,0x10
c0024566:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c002456b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002456f:	89 10                	mov    DWORD PTR [eax],edx
c0024571:	90                   	nop
c0024572:	83 c4 0c             	add    esp,0xc
c0024575:	c3                   	ret    

c0024576 <APIC::APIC()>:
c0024576:	53                   	push   ebx
c0024577:	83 ec 18             	sub    esp,0x18
c002457a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002457e:	83 ec 08             	sub    esp,0x8
c0024581:	68 a4 b9 02 c0       	push   0xc002b9a4
c0024586:	50                   	push   eax
c0024587:	e8 72 00 ff ff       	call   c00145fe <InterruptController::InterruptController(char const*)>
c002458c:	83 c4 10             	add    esp,0x10
c002458f:	ba 7c ba 02 c0       	mov    edx,0xc002ba7c
c0024594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024598:	89 10                	mov    DWORD PTR [eax],edx
c002459a:	a0 60 f0 02 c0       	mov    al,ds:0xc002f060
c002459f:	83 f0 01             	xor    eax,0x1
c00245a2:	84 c0                	test   al,al
c00245a4:	0f 84 a1 00 00 00    	je     c002464b <APIC::APIC()+0xd5>
c00245aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00245af:	a0 40 d6 02 c0       	mov    al,ds:0xc002d640
c00245b4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00245b8:	0f 83 86 00 00 00    	jae    c0024644 <APIC::APIC()+0xce>
c00245be:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00245c6:	83 ec 0c             	sub    esp,0xc
c00245c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00245cd:	e8 18 b0 fe ff       	call   c000f5ea <malloc>
c00245d2:	83 c4 10             	add    esp,0x10
c00245d5:	89 c3                	mov    ebx,eax
c00245d7:	83 ec 0c             	sub    esp,0xc
c00245da:	53                   	push   ebx
c00245db:	e8 6e ff ff ff       	call   c002454e <IOAPIC::IOAPIC()>
c00245e0:	83 c4 10             	add    esp,0x10
c00245e3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00245e7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00245ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00245f0:	89 14 85 40 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0fc0],edx
c00245f7:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c00245fc:	40                   	inc    eax
c00245fd:	a3 20 f0 02 c0       	mov    ds:0xc002f020,eax
c0024602:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0024607:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002460d:	83 ec 08             	sub    esp,0x8
c0024610:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024614:	50                   	push   eax
c0024615:	e8 9c f6 fe ff       	call   c0013cb6 <Device::addChild(Device*)>
c002461a:	83 c4 10             	add    esp,0x10
c002461d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024621:	8b 00                	mov    eax,DWORD PTR [eax]
c0024623:	83 c0 08             	add    eax,0x8
c0024626:	8b 00                	mov    eax,DWORD PTR [eax]
c0024628:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002462d:	6a 00                	push   0x0
c002462f:	6a 00                	push   0x0
c0024631:	52                   	push   edx
c0024632:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024636:	ff d0                	call   eax
c0024638:	83 c4 10             	add    esp,0x10
c002463b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002463f:	e9 6b ff ff ff       	jmp    c00245af <APIC::APIC()+0x39>
c0024644:	c6 05 60 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f060,0x1
c002464b:	90                   	nop
c002464c:	83 c4 18             	add    esp,0x18
c002464f:	5b                   	pop    ebx
c0024650:	c3                   	ret    
c0024651:	90                   	nop

c0024652 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024652:	55                   	push   ebp
c0024653:	89 e5                	mov    ebp,esp
c0024655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024658:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002465e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024661:	72 1d                	jb     c0024680 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024666:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002466c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002466f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024675:	01 d0                	add    eax,edx
c0024677:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002467a:	73 04                	jae    c0024680 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002467c:	b0 01                	mov    al,0x1
c002467e:	eb 02                	jmp    c0024682 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024680:	b0 00                	mov    al,0x0
c0024682:	5d                   	pop    ebp
c0024683:	c3                   	ret    

c0024684 <IOAPIC::read(int)>:
c0024684:	55                   	push   ebp
c0024685:	89 e5                	mov    ebp,esp
c0024687:	83 ec 10             	sub    esp,0x10
c002468a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002468d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024693:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024696:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024699:	0f b6 d0             	movzx  edx,al
c002469c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002469f:	89 10                	mov    DWORD PTR [eax],edx
c00246a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00246a4:	83 c0 10             	add    eax,0x10
c00246a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00246a9:	c9                   	leave  
c00246aa:	c3                   	ret    
c00246ab:	90                   	nop

c00246ac <IOAPIC::open(int, int, void*)>:
c00246ac:	55                   	push   ebp
c00246ad:	89 e5                	mov    ebp,esp
c00246af:	57                   	push   edi
c00246b0:	56                   	push   esi
c00246b1:	53                   	push   ebx
c00246b2:	83 ec 0c             	sub    esp,0xc
c00246b5:	83 ec 0c             	sub    esp,0xc
c00246b8:	68 cf b9 02 c0       	push   0xc002b9cf
c00246bd:	e8 cd e1 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00246cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00246d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246d4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246da:	8b 14 85 80 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2980]
c00246e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246f3:	8b 14 85 00 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2900]
c00246fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024706:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002470c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002470f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024715:	0f b6 f8             	movzx  edi,al
c0024718:	89 d0                	mov    eax,edx
c002471a:	ba 00 00 00 00       	mov    edx,0x0
c002471f:	89 c1                	mov    ecx,eax
c0024721:	80 e5 ff             	and    ch,0xff
c0024724:	89 cb                	mov    ebx,ecx
c0024726:	0f b6 f2             	movzx  esi,dl
c0024729:	89 d8                	mov    eax,ebx
c002472b:	89 f2                	mov    edx,esi
c002472d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024730:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024733:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024737:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002473b:	83 e0 00             	and    eax,0x0
c002473e:	09 d0                	or     eax,edx
c0024740:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024747:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002474d:	8d 50 01             	lea    edx,[eax+0x1]
c0024750:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024753:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024759:	0f b6 d0             	movzx  edx,al
c002475c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002475f:	83 c2 08             	add    edx,0x8
c0024762:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024766:	0f b6 c9             	movzx  ecx,cl
c0024769:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002476f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024773:	83 ec 08             	sub    esp,0x8
c0024776:	6a 01                	push   0x1
c0024778:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002477b:	e8 04 ff ff ff       	call   c0024684 <IOAPIC::read(int)>
c0024780:	83 c4 10             	add    esp,0x10
c0024783:	c1 f8 10             	sar    eax,0x10
c0024786:	0f b6 c0             	movzx  eax,al
c0024789:	8d 50 01             	lea    edx,[eax+0x1]
c002478c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002478f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024795:	b8 00 00 00 00       	mov    eax,0x0
c002479a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002479d:	5b                   	pop    ebx
c002479e:	5e                   	pop    esi
c002479f:	5f                   	pop    edi
c00247a0:	5d                   	pop    ebp
c00247a1:	c3                   	ret    

c00247a2 <IOAPIC::write(int, int)>:
c00247a2:	55                   	push   ebp
c00247a3:	89 e5                	mov    ebp,esp
c00247a5:	83 ec 10             	sub    esp,0x10
c00247a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00247b1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00247b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247b7:	0f b6 d0             	movzx  edx,al
c00247ba:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00247bd:	89 10                	mov    DWORD PTR [eax],edx
c00247bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00247c2:	8d 50 10             	lea    edx,[eax+0x10]
c00247c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00247c8:	89 02                	mov    DWORD PTR [edx],eax
c00247ca:	90                   	nop
c00247cb:	c9                   	leave  
c00247cc:	c3                   	ret    
c00247cd:	90                   	nop

c00247ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00247ce:	55                   	push   ebp
c00247cf:	89 e5                	mov    ebp,esp
c00247d1:	53                   	push   ebx
c00247d2:	83 ec 2c             	sub    esp,0x2c
c00247d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247d8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00247db:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00247de:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00247e1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00247e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00247e7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00247ea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00247ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00247f0:	88 d8                	mov    al,bl
c00247f2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00247f5:	88 c8                	mov    al,cl
c00247f7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00247fa:	88 d0                	mov    al,dl
c00247fc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00247ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024803:	83 c0 08             	add    eax,0x8
c0024806:	01 c0                	add    eax,eax
c0024808:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002480b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002480f:	83 c0 08             	add    eax,0x8
c0024812:	01 c0                	add    eax,eax
c0024814:	40                   	inc    eax
c0024815:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024818:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002481b:	50                   	push   eax
c002481c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002481f:	e8 60 fe ff ff       	call   c0024684 <IOAPIC::read(int)>
c0024824:	83 c4 08             	add    esp,0x8
c0024827:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002482a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024831:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024834:	c1 e0 18             	shl    eax,0x18
c0024837:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002483a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002483d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024840:	52                   	push   edx
c0024841:	50                   	push   eax
c0024842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024845:	e8 58 ff ff ff       	call   c00247a2 <IOAPIC::write(int, int)>
c002484a:	83 c4 0c             	add    esp,0xc
c002484d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024850:	50                   	push   eax
c0024851:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024854:	e8 2b fe ff ff       	call   c0024684 <IOAPIC::read(int)>
c0024859:	83 c4 08             	add    esp,0x8
c002485c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002485f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024866:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002486d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024874:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024878:	74 09                	je     c0024883 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002487a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024881:	eb 07                	jmp    c002488a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024883:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002488a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002488e:	74 09                	je     c0024899 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024890:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024897:	eb 07                	jmp    c00248a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024899:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00248a0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00248a7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00248ab:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00248ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00248b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00248b4:	52                   	push   edx
c00248b5:	50                   	push   eax
c00248b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00248b9:	e8 e4 fe ff ff       	call   c00247a2 <IOAPIC::write(int, int)>
c00248be:	83 c4 0c             	add    esp,0xc
c00248c1:	90                   	nop
c00248c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00248c5:	c9                   	leave  
c00248c6:	c3                   	ret    
c00248c7:	90                   	nop

c00248c8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00248c8:	55                   	push   ebp
c00248c9:	89 e5                	mov    ebp,esp
c00248cb:	57                   	push   edi
c00248cc:	56                   	push   esi
c00248cd:	53                   	push   ebx
c00248ce:	83 ec 2c             	sub    esp,0x2c
c00248d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00248d4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00248d7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00248db:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00248df:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00248e3:	74 5a                	je     c002493f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00248e5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00248e9:	7f 44                	jg     c002492f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00248eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248ee:	05 20 bf 02 c0       	add    eax,0xc002bf20
c00248f3:	8a 00                	mov    al,BYTE PTR [eax]
c00248f5:	0f b6 c0             	movzx  eax,al
c00248f8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00248fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00248fe:	66 8b 84 00 20 d6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd29e0]
c0024906:	0f b7 c0             	movzx  eax,ax
c0024909:	83 e0 02             	and    eax,0x2
c002490c:	85 c0                	test   eax,eax
c002490e:	74 04                	je     c0024914 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024910:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0024914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024917:	66 8b 84 00 20 d6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd29e0]
c002491f:	0f b7 c0             	movzx  eax,ax
c0024922:	83 e0 08             	and    eax,0x8
c0024925:	85 c0                	test   eax,eax
c0024927:	74 16                	je     c002493f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024929:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002492d:	eb 10                	jmp    c002493f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002492f:	83 ec 0c             	sub    esp,0xc
c0024932:	68 e0 b9 02 c0       	push   0xc002b9e0
c0024937:	e8 a5 50 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c002493c:	83 c4 10             	add    esp,0x10
c002493f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024943:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c0024948:	83 ec 08             	sub    esp,0x8
c002494b:	50                   	push   eax
c002494c:	68 18 ba 02 c0       	push   0xc002ba18
c0024951:	e8 39 df fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024960:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c0024965:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024968:	7d 67                	jge    c00249d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002496a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002496d:	8b 04 85 40 f0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0fc0]
c0024974:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024977:	83 ec 08             	sub    esp,0x8
c002497a:	52                   	push   edx
c002497b:	50                   	push   eax
c002497c:	e8 d1 fc ff ff       	call   c0024652 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024981:	83 c4 10             	add    esp,0x10
c0024984:	84 c0                	test   al,al
c0024986:	74 44                	je     c00249cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024988:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002498b:	8b 1c 85 40 f0 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0fc0]
c0024992:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024996:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024999:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002499d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249a0:	83 c0 20             	add    eax,0x20
c00249a3:	0f b6 f0             	movzx  esi,al
c00249a6:	b8 00 00 00 00       	mov    eax,0x0
c00249ab:	99                   	cdq    
c00249ac:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00249af:	0f b6 c9             	movzx  ecx,cl
c00249b2:	83 ec 04             	sub    esp,0x4
c00249b5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00249b8:	57                   	push   edi
c00249b9:	56                   	push   esi
c00249ba:	52                   	push   edx
c00249bb:	50                   	push   eax
c00249bc:	51                   	push   ecx
c00249bd:	53                   	push   ebx
c00249be:	e8 0b fe ff ff       	call   c00247ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00249c3:	83 c4 20             	add    esp,0x20
c00249c6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00249ca:	eb 05                	jmp    c00249d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00249cc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00249cf:	eb 8f                	jmp    c0024960 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00249d1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00249d4:	83 f0 01             	xor    eax,0x1
c00249d7:	84 c0                	test   al,al
c00249d9:	74 10                	je     c00249eb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00249db:	83 ec 0c             	sub    esp,0xc
c00249de:	68 2f ba 02 c0       	push   0xc002ba2f
c00249e3:	e8 f9 4f ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00249e8:	83 c4 10             	add    esp,0x10
c00249eb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00249ef:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00249f6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00249fa:	7f 65                	jg     c0024a61 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00249fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00249ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024a02:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024a09:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024a0c:	01 ca                	add    edx,ecx
c0024a0e:	83 c2 54             	add    edx,0x54
c0024a11:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024a15:	85 c0                	test   eax,eax
c0024a17:	75 43                	jne    c0024a5c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a1c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024a1f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024a26:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024a29:	01 ca                	add    edx,ecx
c0024a2b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024a2e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024a31:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024a3b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024a42:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024a45:	01 ca                	add    edx,ecx
c0024a47:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024a4d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024a50:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024a54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a57:	83 e8 20             	sub    eax,0x20
c0024a5a:	eb 1a                	jmp    c0024a76 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024a5c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024a5f:	eb 95                	jmp    c00249f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024a61:	83 ec 0c             	sub    esp,0xc
c0024a64:	68 3c ba 02 c0       	push   0xc002ba3c
c0024a69:	e8 73 4f ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0024a6e:	83 c4 10             	add    esp,0x10
c0024a71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024a76:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024a79:	5b                   	pop    ebx
c0024a7a:	5e                   	pop    esi
c0024a7b:	5f                   	pop    edi
c0024a7c:	5d                   	pop    ebp
c0024a7d:	c3                   	ret    

c0024a7e <PIC::disable()>:
c0024a7e:	55                   	push   ebp
c0024a7f:	89 e5                	mov    ebp,esp
c0024a81:	83 ec 10             	sub    esp,0x10
c0024a84:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024a8a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024a8e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a91:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a95:	ee                   	out    dx,al
c0024a96:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024a9c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024aa0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024aa3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024aa7:	ee                   	out    dx,al
c0024aa8:	90                   	nop
c0024aa9:	c9                   	leave  
c0024aaa:	c3                   	ret    
c0024aab:	90                   	nop

c0024aac <PIC::close(int, int, void*)>:
c0024aac:	55                   	push   ebp
c0024aad:	89 e5                	mov    ebp,esp
c0024aaf:	83 ec 08             	sub    esp,0x8
c0024ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024ab5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ab7:	83 c0 3c             	add    eax,0x3c
c0024aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0024abc:	83 ec 0c             	sub    esp,0xc
c0024abf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ac2:	ff d0                	call   eax
c0024ac4:	83 c4 10             	add    esp,0x10
c0024ac7:	b8 00 00 00 00       	mov    eax,0x0
c0024acc:	c9                   	leave  
c0024acd:	c3                   	ret    

c0024ace <PIC::PIC()>:
c0024ace:	83 ec 0c             	sub    esp,0xc
c0024ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad5:	83 ec 08             	sub    esp,0x8
c0024ad8:	68 e8 ba 02 c0       	push   0xc002bae8
c0024add:	50                   	push   eax
c0024ade:	e8 1b fb fe ff       	call   c00145fe <InterruptController::InterruptController(char const*)>
c0024ae3:	83 c4 10             	add    esp,0x10
c0024ae6:	ba 14 bb 02 c0       	mov    edx,0xc002bb14
c0024aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aef:	89 10                	mov    DWORD PTR [eax],edx
c0024af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024af5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024afb:	0f b6 d0             	movzx  edx,al
c0024afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b02:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024b13:	0f b6 d0             	movzx  edx,al
c0024b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b1a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024b29:	8d 50 01             	lea    edx,[eax+0x1]
c0024b2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b30:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024b36:	0f b6 d0             	movzx  edx,al
c0024b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b3d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024b41:	83 e1 3f             	and    ecx,0x3f
c0024b44:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024b52:	0f b6 d0             	movzx  edx,al
c0024b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b59:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024b6a:	0f b6 d0             	movzx  edx,al
c0024b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b71:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024b80:	8d 50 01             	lea    edx,[eax+0x1]
c0024b83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b87:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024b8d:	0f b6 d0             	movzx  edx,al
c0024b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b94:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024b98:	83 e1 3f             	and    ecx,0x3f
c0024b9b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024b9f:	90                   	nop
c0024ba0:	83 c4 0c             	add    esp,0xc
c0024ba3:	c3                   	ret    

c0024ba4 <PIC::ioWait()>:
c0024ba4:	eb 00                	jmp    c0024ba6 <PIC::ioWait()+0x2>
c0024ba6:	eb 00                	jmp    c0024ba8 <PIC::ioWait()+0x4>
c0024ba8:	90                   	nop
c0024ba9:	c3                   	ret    

c0024baa <PIC::getIRQReg(int)>:
c0024baa:	55                   	push   ebp
c0024bab:	89 e5                	mov    ebp,esp
c0024bad:	83 ec 10             	sub    esp,0x10
c0024bb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024bb3:	0f b6 c0             	movzx  eax,al
c0024bb6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024bbc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024bbf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bc2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024bc6:	ee                   	out    dx,al
c0024bc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024bca:	0f b6 c0             	movzx  eax,al
c0024bcd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024bd3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024bd6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024bd9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024bdd:	ee                   	out    dx,al
c0024bde:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024be4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024be8:	89 c2                	mov    edx,eax
c0024bea:	ec                   	in     al,dx
c0024beb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024bee:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024bf1:	0f b6 c0             	movzx  eax,al
c0024bf4:	c1 e0 08             	shl    eax,0x8
c0024bf7:	89 c1                	mov    ecx,eax
c0024bf9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024bff:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024c03:	89 c2                	mov    edx,eax
c0024c05:	ec                   	in     al,dx
c0024c06:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024c09:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024c0c:	0f b6 c0             	movzx  eax,al
c0024c0f:	09 c8                	or     eax,ecx
c0024c11:	c9                   	leave  
c0024c12:	c3                   	ret    
c0024c13:	90                   	nop

c0024c14 <PIC::eoi(unsigned char)>:
c0024c14:	55                   	push   ebp
c0024c15:	89 e5                	mov    ebp,esp
c0024c17:	83 ec 14             	sub    esp,0x14
c0024c1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c1d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024c20:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024c24:	75 1e                	jne    c0024c44 <PIC::eoi(unsigned char)+0x30>
c0024c26:	6a 0b                	push   0xb
c0024c28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c2b:	e8 7a ff ff ff       	call   c0024baa <PIC::getIRQReg(int)>
c0024c30:	83 c4 08             	add    esp,0x8
c0024c33:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024c37:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024c3b:	25 80 00 00 00       	and    eax,0x80
c0024c40:	85 c0                	test   eax,eax
c0024c42:	74 5f                	je     c0024ca3 <PIC::eoi(unsigned char)+0x8f>
c0024c44:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024c48:	75 2d                	jne    c0024c77 <PIC::eoi(unsigned char)+0x63>
c0024c4a:	6a 0b                	push   0xb
c0024c4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c4f:	e8 56 ff ff ff       	call   c0024baa <PIC::getIRQReg(int)>
c0024c54:	83 c4 08             	add    esp,0x8
c0024c57:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024c5b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024c5e:	66 85 c0             	test   ax,ax
c0024c61:	78 14                	js     c0024c77 <PIC::eoi(unsigned char)+0x63>
c0024c63:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024c69:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024c6d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024c70:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024c74:	ee                   	out    dx,al
c0024c75:	eb 2d                	jmp    c0024ca4 <PIC::eoi(unsigned char)+0x90>
c0024c77:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024c7b:	76 12                	jbe    c0024c8f <PIC::eoi(unsigned char)+0x7b>
c0024c7d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024c83:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024c87:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024c8a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024c8e:	ee                   	out    dx,al
c0024c8f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024c95:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024c99:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024c9c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ca0:	ee                   	out    dx,al
c0024ca1:	eb 01                	jmp    c0024ca4 <PIC::eoi(unsigned char)+0x90>
c0024ca3:	90                   	nop
c0024ca4:	c9                   	leave  
c0024ca5:	c3                   	ret    

c0024ca6 <PIC::remap()>:
c0024ca6:	55                   	push   ebp
c0024ca7:	89 e5                	mov    ebp,esp
c0024ca9:	83 ec 48             	sub    esp,0x48
c0024cac:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024cb3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024cba:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024cc0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024cc3:	89 c2                	mov    edx,eax
c0024cc5:	ec                   	in     al,dx
c0024cc6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024cc9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024ccc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024ccf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024cd5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024cd8:	89 c2                	mov    edx,eax
c0024cda:	ec                   	in     al,dx
c0024cdb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024cde:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024ce1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024ce4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024cea:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024cee:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024cf1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024cf4:	ee                   	out    dx,al
c0024cf5:	83 ec 0c             	sub    esp,0xc
c0024cf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024cfb:	e8 a4 fe ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024d00:	83 c4 10             	add    esp,0x10
c0024d03:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024d09:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024d0d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024d10:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024d13:	ee                   	out    dx,al
c0024d14:	83 ec 0c             	sub    esp,0xc
c0024d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d1a:	e8 85 fe ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024d1f:	83 c4 10             	add    esp,0x10
c0024d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024d25:	0f b6 c0             	movzx  eax,al
c0024d28:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024d2e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024d31:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024d34:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024d37:	ee                   	out    dx,al
c0024d38:	83 ec 0c             	sub    esp,0xc
c0024d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d3e:	e8 61 fe ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024d43:	83 c4 10             	add    esp,0x10
c0024d46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024d49:	0f b6 c0             	movzx  eax,al
c0024d4c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024d52:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024d55:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024d58:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024d5b:	ee                   	out    dx,al
c0024d5c:	83 ec 0c             	sub    esp,0xc
c0024d5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d62:	e8 3d fe ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024d67:	83 c4 10             	add    esp,0x10
c0024d6a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024d70:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024d74:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024d77:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024d7a:	ee                   	out    dx,al
c0024d7b:	83 ec 0c             	sub    esp,0xc
c0024d7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d81:	e8 1e fe ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024d86:	83 c4 10             	add    esp,0x10
c0024d89:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024d8f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024d93:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024d96:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024d99:	ee                   	out    dx,al
c0024d9a:	83 ec 0c             	sub    esp,0xc
c0024d9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024da0:	e8 ff fd ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024da5:	83 c4 10             	add    esp,0x10
c0024da8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024dae:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024db2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024db5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024db8:	ee                   	out    dx,al
c0024db9:	83 ec 0c             	sub    esp,0xc
c0024dbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024dbf:	e8 e0 fd ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024dc4:	83 c4 10             	add    esp,0x10
c0024dc7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024dcd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024dd1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024dd4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024dd7:	ee                   	out    dx,al
c0024dd8:	83 ec 0c             	sub    esp,0xc
c0024ddb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024dde:	e8 c1 fd ff ff       	call   c0024ba4 <PIC::ioWait()>
c0024de3:	83 c4 10             	add    esp,0x10
c0024de6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024dea:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024df0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024df3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024df6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024df9:	ee                   	out    dx,al
c0024dfa:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024dfe:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024e04:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024e07:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024e0a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024e0d:	ee                   	out    dx,al
c0024e0e:	90                   	nop
c0024e0f:	c9                   	leave  
c0024e10:	c3                   	ret    
c0024e11:	90                   	nop

c0024e12 <PIC::open(int, int, void*)>:
c0024e12:	55                   	push   ebp
c0024e13:	89 e5                	mov    ebp,esp
c0024e15:	83 ec 18             	sub    esp,0x18
c0024e18:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024e1e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024e22:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024e25:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024e29:	ee                   	out    dx,al
c0024e2a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024e30:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024e34:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024e37:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024e3b:	ee                   	out    dx,al
c0024e3c:	83 ec 0c             	sub    esp,0xc
c0024e3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e42:	e8 5f fe ff ff       	call   c0024ca6 <PIC::remap()>
c0024e47:	83 c4 10             	add    esp,0x10
c0024e4a:	b8 00 00 00 00       	mov    eax,0x0
c0024e4f:	c9                   	leave  
c0024e50:	c3                   	ret    
c0024e51:	90                   	nop

c0024e52 <APICTimer::close(int, int, void*)>:
c0024e52:	b8 00 00 00 00       	mov    eax,0x0
c0024e57:	c3                   	ret    

c0024e58 <apicTimerHandler(regs*, void*)>:
c0024e58:	83 ec 0c             	sub    esp,0xc
c0024e5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e61:	99                   	cdq    
c0024e62:	52                   	push   edx
c0024e63:	50                   	push   eax
c0024e64:	6a 00                	push   0x0
c0024e66:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024e6b:	e8 8c 07 00 00       	call   c00255fc <__udivdi3>
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	83 ec 08             	sub    esp,0x8
c0024e76:	52                   	push   edx
c0024e77:	50                   	push   eax
c0024e78:	e8 80 16 ff ff       	call   c00164fd <timerHandler(unsigned long long)>
c0024e7d:	83 c4 10             	add    esp,0x10
c0024e80:	90                   	nop
c0024e81:	83 c4 0c             	add    esp,0xc
c0024e84:	c3                   	ret    
c0024e85:	90                   	nop

c0024e86 <APICTimer::write(int)>:
c0024e86:	53                   	push   ebx
c0024e87:	83 ec 28             	sub    esp,0x28
c0024e8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024e92:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e98:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0024e9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ea3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024ea9:	83 ec 0c             	sub    esp,0xc
c0024eac:	50                   	push   eax
c0024ead:	e8 de f4 ff ff       	call   c0024390 <APIC::getBase()>
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024eb9:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0024ebe:	8b 15 54 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d354
c0024ec4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ec8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024ecc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ed0:	05 e0 03 00 00       	add    eax,0x3e0
c0024ed5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024edb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024edf:	05 80 03 00 00       	add    eax,0x380
c0024ee4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024eea:	fb                   	sti    
c0024eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024ef3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024ef8:	83 d2 00             	adc    edx,0x0
c0024efb:	89 c1                	mov    ecx,eax
c0024efd:	89 d3                	mov    ebx,edx
c0024eff:	a1 50 d3 02 c0       	mov    eax,ds:0xc002d350
c0024f04:	8b 15 54 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d354
c0024f0a:	39 c8                	cmp    eax,ecx
c0024f0c:	89 d0                	mov    eax,edx
c0024f0e:	19 d8                	sbb    eax,ebx
c0024f10:	73 02                	jae    c0024f14 <APICTimer::write(int)+0x8e>
c0024f12:	eb d7                	jmp    c0024eeb <APICTimer::write(int)+0x65>
c0024f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f18:	05 20 03 00 00       	add    eax,0x320
c0024f1d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024f23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f27:	05 90 03 00 00       	add    eax,0x390
c0024f2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f2e:	f7 d0                	not    eax
c0024f30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f3c:	ba 00 00 00 00       	mov    edx,0x0
c0024f41:	f7 f3                	div    ebx
c0024f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f4b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024f51:	0d 00 00 02 00       	or     eax,0x20000
c0024f56:	89 c2                	mov    edx,eax
c0024f58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f5c:	05 20 03 00 00       	add    eax,0x320
c0024f61:	89 10                	mov    DWORD PTR [eax],edx
c0024f63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f67:	05 e0 03 00 00       	add    eax,0x3e0
c0024f6c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024f72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f76:	05 80 03 00 00       	add    eax,0x380
c0024f7b:	89 c2                	mov    edx,eax
c0024f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024f81:	89 02                	mov    DWORD PTR [edx],eax
c0024f83:	90                   	nop
c0024f84:	83 c4 28             	add    esp,0x28
c0024f87:	5b                   	pop    ebx
c0024f88:	c3                   	ret    
c0024f89:	90                   	nop

c0024f8a <APICTimer::open(int, int, void*)>:
c0024f8a:	57                   	push   edi
c0024f8b:	56                   	push   esi
c0024f8c:	53                   	push   ebx
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f93:	83 c0 24             	add    eax,0x24
c0024f96:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f98:	83 ec 08             	sub    esp,0x8
c0024f9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fa3:	ff d0                	call   eax
c0024fa5:	83 c4 10             	add    esp,0x10
c0024fa8:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0024fad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fb3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024fb9:	83 ec 0c             	sub    esp,0xc
c0024fbc:	50                   	push   eax
c0024fbd:	e8 ce f3 ff ff       	call   c0024390 <APIC::getBase()>
c0024fc2:	83 c4 10             	add    esp,0x10
c0024fc5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024fd5:	0f b6 f8             	movzx  edi,al
c0024fd8:	89 d0                	mov    eax,edx
c0024fda:	ba 00 00 00 00       	mov    edx,0x0
c0024fdf:	89 c1                	mov    ecx,eax
c0024fe1:	80 e5 ff             	and    ch,0xff
c0024fe4:	89 cb                	mov    ebx,ecx
c0024fe6:	0f b6 f2             	movzx  esi,dl
c0024fe9:	89 d8                	mov    eax,ebx
c0024feb:	89 f2                	mov    edx,esi
c0024fed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ff1:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024ff4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024ff8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024ffc:	83 e0 00             	and    eax,0x0
c0024fff:	09 d0                	or     eax,edx
c0025001:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025009:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002500f:	8d 50 01             	lea    edx,[eax+0x1]
c0025012:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025016:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002501c:	0f b6 d0             	movzx  edx,al
c002501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025023:	83 c2 08             	add    edx,0x8
c0025026:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002502a:	0f b6 c9             	movzx  ecx,cl
c002502d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025033:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002503b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002503f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025049:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002504d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025053:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025057:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002505d:	83 ec 0c             	sub    esp,0xc
c0025060:	51                   	push   ecx
c0025061:	6a 01                	push   0x1
c0025063:	68 58 4e 02 c0       	push   0xc0024e58
c0025068:	52                   	push   edx
c0025069:	50                   	push   eax
c002506a:	e8 cb eb fe ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002506f:	83 c4 20             	add    esp,0x20
c0025072:	89 c2                	mov    edx,eax
c0025074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025078:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002507e:	b8 00 00 00 00       	mov    eax,0x0
c0025083:	5b                   	pop    ebx
c0025084:	5e                   	pop    esi
c0025085:	5f                   	pop    edi
c0025086:	c3                   	ret    
c0025087:	90                   	nop

c0025088 <APICTimer::APICTimer()>:
c0025088:	83 ec 0c             	sub    esp,0xc
c002508b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508f:	83 ec 08             	sub    esp,0x8
c0025092:	68 54 bb 02 c0       	push   0xc002bb54
c0025097:	50                   	push   eax
c0025098:	e8 d1 13 ff ff       	call   c001646e <Timer::Timer(char const*)>
c002509d:	83 c4 10             	add    esp,0x10
c00250a0:	ba 68 bb 02 c0       	mov    edx,0xc002bb68
c00250a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a9:	89 10                	mov    DWORD PTR [eax],edx
c00250ab:	90                   	nop
c00250ac:	83 c4 0c             	add    esp,0xc
c00250af:	c3                   	ret    

c00250b0 <PIT::write(int)>:
c00250b0:	83 ec 10             	sub    esp,0x10
c00250b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00250bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00250c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00250c5:	a3 64 f0 02 c0       	mov    ds:0xc002f064,eax
c00250ca:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00250cf:	99                   	cdq    
c00250d0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00250d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250d8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00250df:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00250e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00250e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00250ed:	ee                   	out    dx,al
c00250ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250f2:	0f b6 c0             	movzx  eax,al
c00250f5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00250fc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025100:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025104:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025109:	ee                   	out    dx,al
c002510a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002510e:	c1 f8 08             	sar    eax,0x8
c0025111:	0f b6 c0             	movzx  eax,al
c0025114:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002511b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002511f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025123:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025128:	ee                   	out    dx,al
c0025129:	90                   	nop
c002512a:	83 c4 10             	add    esp,0x10
c002512d:	c3                   	ret    

c002512e <pitHandler(regs*, void*)>:
c002512e:	83 ec 0c             	sub    esp,0xc
c0025131:	a1 64 f0 02 c0       	mov    eax,ds:0xc002f064
c0025136:	99                   	cdq    
c0025137:	52                   	push   edx
c0025138:	50                   	push   eax
c0025139:	6a 00                	push   0x0
c002513b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025140:	e8 b7 04 00 00       	call   c00255fc <__udivdi3>
c0025145:	83 c4 10             	add    esp,0x10
c0025148:	83 ec 08             	sub    esp,0x8
c002514b:	52                   	push   edx
c002514c:	50                   	push   eax
c002514d:	e8 ab 13 ff ff       	call   c00164fd <timerHandler(unsigned long long)>
c0025152:	83 c4 10             	add    esp,0x10
c0025155:	90                   	nop
c0025156:	83 c4 0c             	add    esp,0xc
c0025159:	c3                   	ret    

c002515a <PIT::open(int, int, void*)>:
c002515a:	83 ec 0c             	sub    esp,0xc
c002515d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025161:	8b 00                	mov    eax,DWORD PTR [eax]
c0025163:	83 c0 24             	add    eax,0x24
c0025166:	8b 00                	mov    eax,DWORD PTR [eax]
c0025168:	83 ec 08             	sub    esp,0x8
c002516b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002516f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025173:	ff d0                	call   eax
c0025175:	83 c4 10             	add    esp,0x10
c0025178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517c:	83 ec 0c             	sub    esp,0xc
c002517f:	6a 00                	push   0x0
c0025181:	6a 01                	push   0x1
c0025183:	68 2e 51 02 c0       	push   0xc002512e
c0025188:	6a 00                	push   0x0
c002518a:	50                   	push   eax
c002518b:	e8 aa ea fe ff       	call   c0013c3a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025190:	83 c4 20             	add    esp,0x20
c0025193:	89 c2                	mov    edx,eax
c0025195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025199:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002519f:	b8 00 00 00 00       	mov    eax,0x0
c00251a4:	83 c4 0c             	add    esp,0xc
c00251a7:	c3                   	ret    

c00251a8 <PIT::close(int, int, void*)>:
c00251a8:	83 ec 0c             	sub    esp,0xc
c00251ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251af:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00251b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251bd:	6a 01                	push   0x1
c00251bf:	68 2e 51 02 c0       	push   0xc002512e
c00251c4:	6a 00                	push   0x0
c00251c6:	50                   	push   eax
c00251c7:	e8 ac ea fe ff       	call   c0013c78 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00251cc:	83 c4 10             	add    esp,0x10
c00251cf:	b8 00 00 00 00       	mov    eax,0x0
c00251d4:	83 c4 0c             	add    esp,0xc
c00251d7:	c3                   	ret    

c00251d8 <PIT::PIT()>:
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251df:	83 ec 08             	sub    esp,0x8
c00251e2:	68 90 bb 02 c0       	push   0xc002bb90
c00251e7:	50                   	push   eax
c00251e8:	e8 81 12 ff ff       	call   c001646e <Timer::Timer(char const*)>
c00251ed:	83 c4 10             	add    esp,0x10
c00251f0:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c00251f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251f9:	89 10                	mov    DWORD PTR [eax],edx
c00251fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025205:	0f b6 d0             	movzx  edx,al
c0025208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002520c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025217:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002521d:	0f b6 d0             	movzx  edx,al
c0025220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025224:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025233:	8d 50 01             	lea    edx,[eax+0x1]
c0025236:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002523a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025240:	0f b6 d0             	movzx  edx,al
c0025243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025247:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002524b:	83 e1 3f             	and    ecx,0x3f
c002524e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025252:	90                   	nop
c0025253:	83 c4 0c             	add    esp,0xc
c0025256:	c3                   	ret    
c0025257:	66 90                	xchg   ax,ax
c0025259:	66 90                	xchg   ax,ax
c002525b:	66 90                	xchg   ax,ax
c002525d:	66 90                	xchg   ax,ax
c002525f:	90                   	nop

c0025260 <avxDetect>:
c0025260:	b8 00 00 00 00       	mov    eax,0x0
c0025265:	c3                   	ret    

c0025266 <avxSave>:
c0025266:	c3                   	ret    

c0025267 <avxLoad>:
c0025267:	c3                   	ret    

c0025268 <avxInit>:
c0025268:	c3                   	ret    

c0025269 <avxClose>:
c0025269:	c3                   	ret    

c002526a <wouldSheSayYes>:
c002526a:	c3                   	ret    
c002526b:	49                   	dec    ecx
c002526c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025270:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025274:	75 20                	jne    c0025296 <sseDetect.noSSE+0x1>
c0025276:	4e                   	dec    esi
c0025277:	79 61                	jns    c00252da <x87Detect+0x14>
c0025279:	68 2e 2e 2e 00       	push   0x2e2e2e
c002527e:	66 90                	xchg   ax,ax

c0025280 <absolutelyNoChanceInHell>:
c0025280:	b8 01 00 00 00       	mov    eax,0x1
c0025285:	0f a2                	cpuid  
c0025287:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002528d:	74 06                	je     c0025295 <sseDetect.noSSE>
c002528f:	b8 01 00 00 00       	mov    eax,0x1
c0025294:	c3                   	ret    

c0025295 <sseDetect.noSSE>:
c0025295:	31 c0                	xor    eax,eax
c0025297:	c3                   	ret    

c0025298 <sseSave>:
c0025298:	0f ae 44 24 08       	fxsave [esp+0x8]
c002529d:	c3                   	ret    

c002529e <sseLoad>:
c002529e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00252a3:	c3                   	ret    

c00252a4 <sseInit>:
c00252a4:	e8 43 00 00 00       	call   c00252ec <x87Init>
c00252a9:	0f 20 e0             	mov    eax,cr4
c00252ac:	66 0d 00 06          	or     ax,0x600
c00252b0:	0f 22 e0             	mov    cr4,eax
c00252b3:	c3                   	ret    

c00252b4 <sseClose>:
c00252b4:	c3                   	ret    
c00252b5:	66 90                	xchg   ax,ax
c00252b7:	66 90                	xchg   ax,ax
c00252b9:	66 90                	xchg   ax,ax
c00252bb:	66 90                	xchg   ax,ax
c00252bd:	66 90                	xchg   ax,ax
c00252bf:	90                   	nop

c00252c0 <value_37F>:
c00252c0:	7f 03                	jg     c00252c5 <value_37A+0x1>

c00252c2 <value_37E>:
c00252c2:	7e 03                	jle    c00252c7 <x87Detect+0x1>

c00252c4 <value_37A>:
c00252c4:	7a 03                	jp     c00252c9 <x87Detect+0x3>

c00252c6 <x87Detect>:
c00252c6:	b8 01 00 00 00       	mov    eax,0x1
c00252cb:	0f a2                	cpuid  
c00252cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00252d3:	74 06                	je     c00252db <x87Detect.nox87>
c00252d5:	b8 01 00 00 00       	mov    eax,0x1
c00252da:	c3                   	ret    

c00252db <x87Detect.nox87>:
c00252db:	b8 00 00 00 00       	mov    eax,0x0
c00252e0:	c3                   	ret    

c00252e1 <x87Save>:
c00252e1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00252e6:	c3                   	ret    

c00252e7 <x87Load>:
c00252e7:	dd 64 24 08          	frstor [esp+0x8]
c00252eb:	c3                   	ret    

c00252ec <x87Init>:
c00252ec:	9b db e3             	finit  
c00252ef:	0f 20 c0             	mov    eax,cr0
c00252f2:	66 25 fb ff          	and    ax,0xfffb
c00252f6:	66 0d 22 00          	or     ax,0x22
c00252fa:	0f 22 c0             	mov    cr0,eax
c00252fd:	0f 06                	clts   
c00252ff:	d9 2d c4 52 02 c0    	fldcw  WORD PTR ds:0xc00252c4
c0025305:	c3                   	ret    

c0025306 <x87Close>:
c0025306:	c3                   	ret    
c0025307:	90                   	nop

c0025308 <__do_global_ctors_aux>:
c0025308:	a1 fc 7d 02 c0       	mov    eax,ds:0xc0027dfc
c002530d:	83 f8 ff             	cmp    eax,0xffffffff
c0025310:	74 1a                	je     c002532c <__do_global_ctors_aux+0x24>
c0025312:	55                   	push   ebp
c0025313:	89 e5                	mov    ebp,esp
c0025315:	53                   	push   ebx
c0025316:	52                   	push   edx
c0025317:	bb fc 7d 02 c0       	mov    ebx,0xc0027dfc
c002531c:	ff d0                	call   eax
c002531e:	83 eb 04             	sub    ebx,0x4
c0025321:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025323:	83 f8 ff             	cmp    eax,0xffffffff
c0025326:	75 f4                	jne    c002531c <__do_global_ctors_aux+0x14>
c0025328:	58                   	pop    eax
c0025329:	5b                   	pop    ebx
c002532a:	5d                   	pop    ebp
c002532b:	c3                   	ret    
c002532c:	c3                   	ret    
c002532d:	66 90                	xchg   ax,ax
c002532f:	90                   	nop

c0025330 <__divdi3>:
c0025330:	55                   	push   ebp
c0025331:	57                   	push   edi
c0025332:	56                   	push   esi
c0025333:	53                   	push   ebx
c0025334:	83 ec 1c             	sub    esp,0x1c
c0025337:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002533b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002533f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025342:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002534a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002534e:	85 db                	test   ebx,ebx
c0025350:	0f 88 8e 00 00 00    	js     c00253e4 <__divdi3+0xb4>
c0025356:	89 dd                	mov    ebp,ebx
c0025358:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025360:	89 d3                	mov    ebx,edx
c0025362:	85 d2                	test   edx,edx
c0025364:	79 0d                	jns    c0025373 <__divdi3+0x43>
c0025366:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002536a:	f7 d8                	neg    eax
c002536c:	83 d2 00             	adc    edx,0x0
c002536f:	f7 da                	neg    edx
c0025371:	89 d3                	mov    ebx,edx
c0025373:	89 c7                	mov    edi,eax
c0025375:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025378:	85 db                	test   ebx,ebx
c002537a:	75 48                	jne    c00253c4 <__divdi3+0x94>
c002537c:	39 ef                	cmp    edi,ebp
c002537e:	76 24                	jbe    c00253a4 <__divdi3+0x74>
c0025380:	89 ea                	mov    edx,ebp
c0025382:	f7 f7                	div    edi
c0025384:	89 c1                	mov    ecx,eax
c0025386:	31 f6                	xor    esi,esi
c0025388:	89 c8                	mov    eax,ecx
c002538a:	89 f2                	mov    edx,esi
c002538c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025390:	85 c9                	test   ecx,ecx
c0025392:	74 07                	je     c002539b <__divdi3+0x6b>
c0025394:	f7 d8                	neg    eax
c0025396:	83 d2 00             	adc    edx,0x0
c0025399:	f7 da                	neg    edx
c002539b:	83 c4 1c             	add    esp,0x1c
c002539e:	5b                   	pop    ebx
c002539f:	5e                   	pop    esi
c00253a0:	5f                   	pop    edi
c00253a1:	5d                   	pop    ebp
c00253a2:	c3                   	ret    
c00253a3:	90                   	nop
c00253a4:	85 ff                	test   edi,edi
c00253a6:	75 0b                	jne    c00253b3 <__divdi3+0x83>
c00253a8:	b8 01 00 00 00       	mov    eax,0x1
c00253ad:	31 d2                	xor    edx,edx
c00253af:	f7 f3                	div    ebx
c00253b1:	89 c7                	mov    edi,eax
c00253b3:	31 d2                	xor    edx,edx
c00253b5:	89 e8                	mov    eax,ebp
c00253b7:	f7 f7                	div    edi
c00253b9:	89 c6                	mov    esi,eax
c00253bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00253be:	f7 f7                	div    edi
c00253c0:	89 c1                	mov    ecx,eax
c00253c2:	eb c4                	jmp    c0025388 <__divdi3+0x58>
c00253c4:	39 eb                	cmp    ebx,ebp
c00253c6:	77 3c                	ja     c0025404 <__divdi3+0xd4>
c00253c8:	0f bd f3             	bsr    esi,ebx
c00253cb:	83 f6 1f             	xor    esi,0x1f
c00253ce:	75 40                	jne    c0025410 <__divdi3+0xe0>
c00253d0:	39 eb                	cmp    ebx,ebp
c00253d2:	72 09                	jb     c00253dd <__divdi3+0xad>
c00253d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00253d7:	0f 87 97 00 00 00    	ja     c0025474 <__divdi3+0x144>
c00253dd:	b9 01 00 00 00       	mov    ecx,0x1
c00253e2:	eb a4                	jmp    c0025388 <__divdi3+0x58>
c00253e4:	f7 d9                	neg    ecx
c00253e6:	83 d3 00             	adc    ebx,0x0
c00253e9:	f7 db                	neg    ebx
c00253eb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00253ee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00253f2:	89 dd                	mov    ebp,ebx
c00253f4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00253fc:	e9 5f ff ff ff       	jmp    c0025360 <__divdi3+0x30>
c0025401:	8d 76 00             	lea    esi,[esi+0x0]
c0025404:	31 f6                	xor    esi,esi
c0025406:	31 c9                	xor    ecx,ecx
c0025408:	e9 7b ff ff ff       	jmp    c0025388 <__divdi3+0x58>
c002540d:	8d 76 00             	lea    esi,[esi+0x0]
c0025410:	b8 20 00 00 00       	mov    eax,0x20
c0025415:	29 f0                	sub    eax,esi
c0025417:	89 f1                	mov    ecx,esi
c0025419:	d3 e3                	shl    ebx,cl
c002541b:	89 fa                	mov    edx,edi
c002541d:	88 c1                	mov    cl,al
c002541f:	d3 ea                	shr    edx,cl
c0025421:	09 da                	or     edx,ebx
c0025423:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025427:	89 f1                	mov    ecx,esi
c0025429:	d3 e7                	shl    edi,cl
c002542b:	89 eb                	mov    ebx,ebp
c002542d:	88 c1                	mov    cl,al
c002542f:	d3 eb                	shr    ebx,cl
c0025431:	89 f1                	mov    ecx,esi
c0025433:	d3 e5                	shl    ebp,cl
c0025435:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025438:	88 c1                	mov    cl,al
c002543a:	d3 ea                	shr    edx,cl
c002543c:	09 d5                	or     ebp,edx
c002543e:	89 e8                	mov    eax,ebp
c0025440:	89 da                	mov    edx,ebx
c0025442:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025446:	89 d3                	mov    ebx,edx
c0025448:	89 c5                	mov    ebp,eax
c002544a:	f7 e7                	mul    edi
c002544c:	39 d3                	cmp    ebx,edx
c002544e:	72 18                	jb     c0025468 <__divdi3+0x138>
c0025450:	74 0a                	je     c002545c <__divdi3+0x12c>
c0025452:	89 e9                	mov    ecx,ebp
c0025454:	31 f6                	xor    esi,esi
c0025456:	e9 2d ff ff ff       	jmp    c0025388 <__divdi3+0x58>
c002545b:	90                   	nop
c002545c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002545f:	89 f1                	mov    ecx,esi
c0025461:	d3 e7                	shl    edi,cl
c0025463:	39 c7                	cmp    edi,eax
c0025465:	73 eb                	jae    c0025452 <__divdi3+0x122>
c0025467:	90                   	nop
c0025468:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002546b:	31 f6                	xor    esi,esi
c002546d:	e9 16 ff ff ff       	jmp    c0025388 <__divdi3+0x58>
c0025472:	66 90                	xchg   ax,ax
c0025474:	31 c9                	xor    ecx,ecx
c0025476:	e9 0d ff ff ff       	jmp    c0025388 <__divdi3+0x58>
c002547b:	90                   	nop

c002547c <__moddi3>:
c002547c:	55                   	push   ebp
c002547d:	57                   	push   edi
c002547e:	56                   	push   esi
c002547f:	53                   	push   ebx
c0025480:	83 ec 2c             	sub    esp,0x2c
c0025483:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025487:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002548b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002548f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025493:	85 db                	test   ebx,ebx
c0025495:	0f 88 85 00 00 00    	js     c0025520 <__moddi3+0xa4>
c002549b:	89 de                	mov    esi,ebx
c002549d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00254a5:	89 d7                	mov    edi,edx
c00254a7:	85 d2                	test   edx,edx
c00254a9:	79 09                	jns    c00254b4 <__moddi3+0x38>
c00254ab:	f7 d8                	neg    eax
c00254ad:	83 d2 00             	adc    edx,0x0
c00254b0:	f7 da                	neg    edx
c00254b2:	89 d7                	mov    edi,edx
c00254b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254b8:	89 cd                	mov    ebp,ecx
c00254ba:	85 ff                	test   edi,edi
c00254bc:	75 52                	jne    c0025510 <__moddi3+0x94>
c00254be:	89 c3                	mov    ebx,eax
c00254c0:	39 f0                	cmp    eax,esi
c00254c2:	76 24                	jbe    c00254e8 <__moddi3+0x6c>
c00254c4:	89 c8                	mov    eax,ecx
c00254c6:	89 f2                	mov    edx,esi
c00254c8:	f7 f3                	div    ebx
c00254ca:	89 d6                	mov    esi,edx
c00254cc:	89 f0                	mov    eax,esi
c00254ce:	31 d2                	xor    edx,edx
c00254d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00254d4:	85 c9                	test   ecx,ecx
c00254d6:	74 07                	je     c00254df <__moddi3+0x63>
c00254d8:	f7 d8                	neg    eax
c00254da:	83 d2 00             	adc    edx,0x0
c00254dd:	f7 da                	neg    edx
c00254df:	83 c4 2c             	add    esp,0x2c
c00254e2:	5b                   	pop    ebx
c00254e3:	5e                   	pop    esi
c00254e4:	5f                   	pop    edi
c00254e5:	5d                   	pop    ebp
c00254e6:	c3                   	ret    
c00254e7:	90                   	nop
c00254e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00254ec:	85 db                	test   ebx,ebx
c00254ee:	75 0d                	jne    c00254fd <__moddi3+0x81>
c00254f0:	b8 01 00 00 00       	mov    eax,0x1
c00254f5:	31 d2                	xor    edx,edx
c00254f7:	f7 f7                	div    edi
c00254f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254fd:	89 f0                	mov    eax,esi
c00254ff:	31 d2                	xor    edx,edx
c0025501:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025505:	f7 f7                	div    edi
c0025507:	89 e8                	mov    eax,ebp
c0025509:	f7 f7                	div    edi
c002550b:	89 d6                	mov    esi,edx
c002550d:	eb bd                	jmp    c00254cc <__moddi3+0x50>
c002550f:	90                   	nop
c0025510:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025514:	39 f7                	cmp    edi,esi
c0025516:	76 20                	jbe    c0025538 <__moddi3+0xbc>
c0025518:	89 c8                	mov    eax,ecx
c002551a:	89 f2                	mov    edx,esi
c002551c:	eb b2                	jmp    c00254d0 <__moddi3+0x54>
c002551e:	66 90                	xchg   ax,ax
c0025520:	f7 d9                	neg    ecx
c0025522:	83 d3 00             	adc    ebx,0x0
c0025525:	f7 db                	neg    ebx
c0025527:	89 de                	mov    esi,ebx
c0025529:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025531:	e9 6f ff ff ff       	jmp    c00254a5 <__moddi3+0x29>
c0025536:	66 90                	xchg   ax,ax
c0025538:	0f bd c7             	bsr    eax,edi
c002553b:	83 f0 1f             	xor    eax,0x1f
c002553e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025542:	75 24                	jne    c0025568 <__moddi3+0xec>
c0025544:	39 f7                	cmp    edi,esi
c0025546:	72 06                	jb     c002554e <__moddi3+0xd2>
c0025548:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002554c:	77 0c                	ja     c002555a <__moddi3+0xde>
c002554e:	89 e9                	mov    ecx,ebp
c0025550:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025554:	19 fe                	sbb    esi,edi
c0025556:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002555a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002555e:	89 f2                	mov    edx,esi
c0025560:	e9 6b ff ff ff       	jmp    c00254d0 <__moddi3+0x54>
c0025565:	8d 76 00             	lea    esi,[esi+0x0]
c0025568:	b8 20 00 00 00       	mov    eax,0x20
c002556d:	89 c2                	mov    edx,eax
c002556f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025573:	29 da                	sub    edx,ebx
c0025575:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025579:	88 d9                	mov    cl,bl
c002557b:	d3 e7                	shl    edi,cl
c002557d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025581:	88 d1                	mov    cl,dl
c0025583:	d3 e8                	shr    eax,cl
c0025585:	09 c7                	or     edi,eax
c0025587:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002558b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002558f:	89 d8                	mov    eax,ebx
c0025591:	88 d9                	mov    cl,bl
c0025593:	d3 e7                	shl    edi,cl
c0025595:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025599:	89 f3                	mov    ebx,esi
c002559b:	88 d1                	mov    cl,dl
c002559d:	d3 eb                	shr    ebx,cl
c002559f:	89 c7                	mov    edi,eax
c00255a1:	88 c1                	mov    cl,al
c00255a3:	d3 e6                	shl    esi,cl
c00255a5:	89 e8                	mov    eax,ebp
c00255a7:	88 d1                	mov    cl,dl
c00255a9:	d3 e8                	shr    eax,cl
c00255ab:	09 f0                	or     eax,esi
c00255ad:	89 f9                	mov    ecx,edi
c00255af:	d3 e5                	shl    ebp,cl
c00255b1:	89 da                	mov    edx,ebx
c00255b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00255b7:	89 d3                	mov    ebx,edx
c00255b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00255bd:	89 c6                	mov    esi,eax
c00255bf:	89 d1                	mov    ecx,edx
c00255c1:	39 d3                	cmp    ebx,edx
c00255c3:	72 27                	jb     c00255ec <__moddi3+0x170>
c00255c5:	74 21                	je     c00255e8 <__moddi3+0x16c>
c00255c7:	29 f5                	sub    ebp,esi
c00255c9:	19 cb                	sbb    ebx,ecx
c00255cb:	89 de                	mov    esi,ebx
c00255cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00255d1:	d3 e6                	shl    esi,cl
c00255d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00255d7:	89 f9                	mov    ecx,edi
c00255d9:	d3 ed                	shr    ebp,cl
c00255db:	09 ee                	or     esi,ebp
c00255dd:	89 f0                	mov    eax,esi
c00255df:	d3 eb                	shr    ebx,cl
c00255e1:	89 da                	mov    edx,ebx
c00255e3:	e9 e8 fe ff ff       	jmp    c00254d0 <__moddi3+0x54>
c00255e8:	39 c5                	cmp    ebp,eax
c00255ea:	73 db                	jae    c00255c7 <__moddi3+0x14b>
c00255ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00255f4:	89 d1                	mov    ecx,edx
c00255f6:	89 c6                	mov    esi,eax
c00255f8:	eb cd                	jmp    c00255c7 <__moddi3+0x14b>
c00255fa:	66 90                	xchg   ax,ax

c00255fc <__udivdi3>:
c00255fc:	55                   	push   ebp
c00255fd:	57                   	push   edi
c00255fe:	56                   	push   esi
c00255ff:	53                   	push   ebx
c0025600:	83 ec 1c             	sub    esp,0x1c
c0025603:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025607:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002560b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002560f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025613:	85 d2                	test   edx,edx
c0025615:	75 41                	jne    c0025658 <__udivdi3+0x5c>
c0025617:	39 f7                	cmp    edi,esi
c0025619:	76 15                	jbe    c0025630 <__udivdi3+0x34>
c002561b:	89 e8                	mov    eax,ebp
c002561d:	89 f2                	mov    edx,esi
c002561f:	f7 f7                	div    edi
c0025621:	31 db                	xor    ebx,ebx
c0025623:	89 da                	mov    edx,ebx
c0025625:	83 c4 1c             	add    esp,0x1c
c0025628:	5b                   	pop    ebx
c0025629:	5e                   	pop    esi
c002562a:	5f                   	pop    edi
c002562b:	5d                   	pop    ebp
c002562c:	c3                   	ret    
c002562d:	8d 76 00             	lea    esi,[esi+0x0]
c0025630:	89 f9                	mov    ecx,edi
c0025632:	85 ff                	test   edi,edi
c0025634:	75 0b                	jne    c0025641 <__udivdi3+0x45>
c0025636:	b8 01 00 00 00       	mov    eax,0x1
c002563b:	31 d2                	xor    edx,edx
c002563d:	f7 f7                	div    edi
c002563f:	89 c1                	mov    ecx,eax
c0025641:	31 d2                	xor    edx,edx
c0025643:	89 f0                	mov    eax,esi
c0025645:	f7 f1                	div    ecx
c0025647:	89 c3                	mov    ebx,eax
c0025649:	89 e8                	mov    eax,ebp
c002564b:	f7 f1                	div    ecx
c002564d:	89 da                	mov    edx,ebx
c002564f:	83 c4 1c             	add    esp,0x1c
c0025652:	5b                   	pop    ebx
c0025653:	5e                   	pop    esi
c0025654:	5f                   	pop    edi
c0025655:	5d                   	pop    ebp
c0025656:	c3                   	ret    
c0025657:	90                   	nop
c0025658:	39 f2                	cmp    edx,esi
c002565a:	77 1c                	ja     c0025678 <__udivdi3+0x7c>
c002565c:	0f bd da             	bsr    ebx,edx
c002565f:	83 f3 1f             	xor    ebx,0x1f
c0025662:	75 24                	jne    c0025688 <__udivdi3+0x8c>
c0025664:	39 f2                	cmp    edx,esi
c0025666:	72 08                	jb     c0025670 <__udivdi3+0x74>
c0025668:	39 ef                	cmp    edi,ebp
c002566a:	0f 87 84 00 00 00    	ja     c00256f4 <__udivdi3+0xf8>
c0025670:	b8 01 00 00 00       	mov    eax,0x1
c0025675:	eb ac                	jmp    c0025623 <__udivdi3+0x27>
c0025677:	90                   	nop
c0025678:	31 db                	xor    ebx,ebx
c002567a:	31 c0                	xor    eax,eax
c002567c:	89 da                	mov    edx,ebx
c002567e:	83 c4 1c             	add    esp,0x1c
c0025681:	5b                   	pop    ebx
c0025682:	5e                   	pop    esi
c0025683:	5f                   	pop    edi
c0025684:	5d                   	pop    ebp
c0025685:	c3                   	ret    
c0025686:	66 90                	xchg   ax,ax
c0025688:	b8 20 00 00 00       	mov    eax,0x20
c002568d:	29 d8                	sub    eax,ebx
c002568f:	88 d9                	mov    cl,bl
c0025691:	d3 e2                	shl    edx,cl
c0025693:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025697:	89 fa                	mov    edx,edi
c0025699:	88 c1                	mov    cl,al
c002569b:	d3 ea                	shr    edx,cl
c002569d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00256a1:	09 d1                	or     ecx,edx
c00256a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00256a7:	88 d9                	mov    cl,bl
c00256a9:	d3 e7                	shl    edi,cl
c00256ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00256af:	89 f7                	mov    edi,esi
c00256b1:	88 c1                	mov    cl,al
c00256b3:	d3 ef                	shr    edi,cl
c00256b5:	88 d9                	mov    cl,bl
c00256b7:	d3 e6                	shl    esi,cl
c00256b9:	89 ea                	mov    edx,ebp
c00256bb:	88 c1                	mov    cl,al
c00256bd:	d3 ea                	shr    edx,cl
c00256bf:	09 d6                	or     esi,edx
c00256c1:	89 f0                	mov    eax,esi
c00256c3:	89 fa                	mov    edx,edi
c00256c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00256c9:	89 d7                	mov    edi,edx
c00256cb:	89 c6                	mov    esi,eax
c00256cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00256d1:	39 d7                	cmp    edi,edx
c00256d3:	72 13                	jb     c00256e8 <__udivdi3+0xec>
c00256d5:	74 09                	je     c00256e0 <__udivdi3+0xe4>
c00256d7:	89 f0                	mov    eax,esi
c00256d9:	31 db                	xor    ebx,ebx
c00256db:	e9 43 ff ff ff       	jmp    c0025623 <__udivdi3+0x27>
c00256e0:	88 d9                	mov    cl,bl
c00256e2:	d3 e5                	shl    ebp,cl
c00256e4:	39 c5                	cmp    ebp,eax
c00256e6:	73 ef                	jae    c00256d7 <__udivdi3+0xdb>
c00256e8:	8d 46 ff             	lea    eax,[esi-0x1]
c00256eb:	31 db                	xor    ebx,ebx
c00256ed:	e9 31 ff ff ff       	jmp    c0025623 <__udivdi3+0x27>
c00256f2:	66 90                	xchg   ax,ax
c00256f4:	31 c0                	xor    eax,eax
c00256f6:	e9 28 ff ff ff       	jmp    c0025623 <__udivdi3+0x27>
c00256fb:	90                   	nop

c00256fc <__umoddi3>:
c00256fc:	55                   	push   ebp
c00256fd:	57                   	push   edi
c00256fe:	56                   	push   esi
c00256ff:	53                   	push   ebx
c0025700:	83 ec 1c             	sub    esp,0x1c
c0025703:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025707:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002570b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002570f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025713:	89 da                	mov    edx,ebx
c0025715:	85 c0                	test   eax,eax
c0025717:	75 37                	jne    c0025750 <__umoddi3+0x54>
c0025719:	39 df                	cmp    edi,ebx
c002571b:	76 13                	jbe    c0025730 <__umoddi3+0x34>
c002571d:	89 f0                	mov    eax,esi
c002571f:	f7 f7                	div    edi
c0025721:	89 d0                	mov    eax,edx
c0025723:	31 d2                	xor    edx,edx
c0025725:	83 c4 1c             	add    esp,0x1c
c0025728:	5b                   	pop    ebx
c0025729:	5e                   	pop    esi
c002572a:	5f                   	pop    edi
c002572b:	5d                   	pop    ebp
c002572c:	c3                   	ret    
c002572d:	8d 76 00             	lea    esi,[esi+0x0]
c0025730:	89 fd                	mov    ebp,edi
c0025732:	85 ff                	test   edi,edi
c0025734:	75 0b                	jne    c0025741 <__umoddi3+0x45>
c0025736:	b8 01 00 00 00       	mov    eax,0x1
c002573b:	31 d2                	xor    edx,edx
c002573d:	f7 f7                	div    edi
c002573f:	89 c5                	mov    ebp,eax
c0025741:	89 d8                	mov    eax,ebx
c0025743:	31 d2                	xor    edx,edx
c0025745:	f7 f5                	div    ebp
c0025747:	89 f0                	mov    eax,esi
c0025749:	f7 f5                	div    ebp
c002574b:	89 d0                	mov    eax,edx
c002574d:	eb d4                	jmp    c0025723 <__umoddi3+0x27>
c002574f:	90                   	nop
c0025750:	89 f1                	mov    ecx,esi
c0025752:	39 d8                	cmp    eax,ebx
c0025754:	76 0a                	jbe    c0025760 <__umoddi3+0x64>
c0025756:	89 f0                	mov    eax,esi
c0025758:	83 c4 1c             	add    esp,0x1c
c002575b:	5b                   	pop    ebx
c002575c:	5e                   	pop    esi
c002575d:	5f                   	pop    edi
c002575e:	5d                   	pop    ebp
c002575f:	c3                   	ret    
c0025760:	0f bd e8             	bsr    ebp,eax
c0025763:	83 f5 1f             	xor    ebp,0x1f
c0025766:	75 1c                	jne    c0025784 <__umoddi3+0x88>
c0025768:	39 d8                	cmp    eax,ebx
c002576a:	72 04                	jb     c0025770 <__umoddi3+0x74>
c002576c:	39 f7                	cmp    edi,esi
c002576e:	77 08                	ja     c0025778 <__umoddi3+0x7c>
c0025770:	89 da                	mov    edx,ebx
c0025772:	29 fe                	sub    esi,edi
c0025774:	19 c2                	sbb    edx,eax
c0025776:	89 f1                	mov    ecx,esi
c0025778:	89 c8                	mov    eax,ecx
c002577a:	83 c4 1c             	add    esp,0x1c
c002577d:	5b                   	pop    ebx
c002577e:	5e                   	pop    esi
c002577f:	5f                   	pop    edi
c0025780:	5d                   	pop    ebp
c0025781:	c3                   	ret    
c0025782:	66 90                	xchg   ax,ax
c0025784:	ba 20 00 00 00       	mov    edx,0x20
c0025789:	29 ea                	sub    edx,ebp
c002578b:	89 e9                	mov    ecx,ebp
c002578d:	d3 e0                	shl    eax,cl
c002578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025793:	89 f8                	mov    eax,edi
c0025795:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025799:	88 d1                	mov    cl,dl
c002579b:	d3 e8                	shr    eax,cl
c002579d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00257a1:	09 c1                	or     ecx,eax
c00257a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00257a7:	89 e9                	mov    ecx,ebp
c00257a9:	d3 e7                	shl    edi,cl
c00257ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00257af:	89 d8                	mov    eax,ebx
c00257b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00257b5:	88 d1                	mov    cl,dl
c00257b7:	d3 e8                	shr    eax,cl
c00257b9:	89 c7                	mov    edi,eax
c00257bb:	89 e9                	mov    ecx,ebp
c00257bd:	d3 e3                	shl    ebx,cl
c00257bf:	89 f0                	mov    eax,esi
c00257c1:	88 d1                	mov    cl,dl
c00257c3:	d3 e8                	shr    eax,cl
c00257c5:	09 d8                	or     eax,ebx
c00257c7:	89 e9                	mov    ecx,ebp
c00257c9:	d3 e6                	shl    esi,cl
c00257cb:	89 f3                	mov    ebx,esi
c00257cd:	89 fa                	mov    edx,edi
c00257cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00257d3:	89 d1                	mov    ecx,edx
c00257d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00257d9:	89 c6                	mov    esi,eax
c00257db:	89 d7                	mov    edi,edx
c00257dd:	39 d1                	cmp    ecx,edx
c00257df:	72 27                	jb     c0025808 <__umoddi3+0x10c>
c00257e1:	74 21                	je     c0025804 <__umoddi3+0x108>
c00257e3:	89 ca                	mov    edx,ecx
c00257e5:	29 f3                	sub    ebx,esi
c00257e7:	19 fa                	sbb    edx,edi
c00257e9:	89 d0                	mov    eax,edx
c00257eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00257ef:	d3 e0                	shl    eax,cl
c00257f1:	89 e9                	mov    ecx,ebp
c00257f3:	d3 eb                	shr    ebx,cl
c00257f5:	09 d8                	or     eax,ebx
c00257f7:	d3 ea                	shr    edx,cl
c00257f9:	83 c4 1c             	add    esp,0x1c
c00257fc:	5b                   	pop    ebx
c00257fd:	5e                   	pop    esi
c00257fe:	5f                   	pop    edi
c00257ff:	5d                   	pop    ebp
c0025800:	c3                   	ret    
c0025801:	8d 76 00             	lea    esi,[esi+0x0]
c0025804:	39 c3                	cmp    ebx,eax
c0025806:	73 db                	jae    c00257e3 <__umoddi3+0xe7>
c0025808:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002580c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025810:	89 d7                	mov    edi,edx
c0025812:	89 c6                	mov    esi,eax
c0025814:	eb cd                	jmp    c00257e3 <__umoddi3+0xe7>

c0025816 <__addsf3>:
c0025816:	55                   	push   ebp
c0025817:	89 e5                	mov    ebp,esp
c0025819:	57                   	push   edi
c002581a:	56                   	push   esi
c002581b:	53                   	push   ebx
c002581c:	83 ec 08             	sub    esp,0x8
c002581f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025822:	89 fa                	mov    edx,edi
c0025824:	89 f8                	mov    eax,edi
c0025826:	c1 f8 17             	sar    eax,0x17
c0025829:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002582c:	c1 e2 08             	shl    edx,0x8
c002582f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025835:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025838:	89 de                	mov    esi,ebx
c002583a:	c1 fe 17             	sar    esi,0x17
c002583d:	c1 e3 08             	shl    ebx,0x8
c0025840:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025846:	31 f0                	xor    eax,esi
c0025848:	0f 88 3b 01 00 00    	js     c0025989 <__addsf3+0x173>
c002584e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025851:	29 f1                	sub    ecx,esi
c0025853:	85 c9                	test   ecx,ecx
c0025855:	7e 54                	jle    c00258ab <__addsf3+0x95>
c0025857:	89 f0                	mov    eax,esi
c0025859:	84 c0                	test   al,al
c002585b:	75 10                	jne    c002586d <__addsf3+0x57>
c002585d:	85 db                	test   ebx,ebx
c002585f:	0f 84 aa 02 00 00    	je     c0025b0f <__addsf3+0x2f9>
c0025865:	49                   	dec    ecx
c0025866:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025869:	74 38                	je     c00258a3 <__addsf3+0x8d>
c002586b:	eb 13                	jmp    c0025880 <__addsf3+0x6a>
c002586d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025870:	f7 d0                	not    eax
c0025872:	84 c0                	test   al,al
c0025874:	0f 84 95 02 00 00    	je     c0025b0f <__addsf3+0x2f9>
c002587a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025880:	83 f9 1f             	cmp    ecx,0x1f
c0025883:	0f 8f 86 02 00 00    	jg     c0025b0f <__addsf3+0x2f9>
c0025889:	89 de                	mov    esi,ebx
c002588b:	d3 ee                	shr    esi,cl
c002588d:	b8 20 00 00 00       	mov    eax,0x20
c0025892:	29 c8                	sub    eax,ecx
c0025894:	89 c1                	mov    ecx,eax
c0025896:	d3 e3                	shl    ebx,cl
c0025898:	31 c0                	xor    eax,eax
c002589a:	85 db                	test   ebx,ebx
c002589c:	0f 95 c0             	setne  al
c002589f:	09 f0                	or     eax,esi
c00258a1:	01 d0                	add    eax,edx
c00258a3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258a6:	e9 b6 00 00 00       	jmp    c0025961 <__addsf3+0x14b>
c00258ab:	74 5c                	je     c0025909 <__addsf3+0xf3>
c00258ad:	89 f1                	mov    ecx,esi
c00258af:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00258b2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258b5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00258b9:	75 14                	jne    c00258cf <__addsf3+0xb9>
c00258bb:	85 d2                	test   edx,edx
c00258bd:	0f 84 4c 02 00 00    	je     c0025b0f <__addsf3+0x2f9>
c00258c3:	49                   	dec    ecx
c00258c4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00258c7:	0f 84 94 00 00 00    	je     c0025961 <__addsf3+0x14b>
c00258cd:	eb 12                	jmp    c00258e1 <__addsf3+0xcb>
c00258cf:	89 f0                	mov    eax,esi
c00258d1:	f7 d0                	not    eax
c00258d3:	84 c0                	test   al,al
c00258d5:	0f 84 34 02 00 00    	je     c0025b0f <__addsf3+0x2f9>
c00258db:	81 ca 00 00 00 80    	or     edx,0x80000000
c00258e1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258e4:	83 f9 1f             	cmp    ecx,0x1f
c00258e7:	0f 8f 22 02 00 00    	jg     c0025b0f <__addsf3+0x2f9>
c00258ed:	89 d7                	mov    edi,edx
c00258ef:	d3 ef                	shr    edi,cl
c00258f1:	b8 20 00 00 00       	mov    eax,0x20
c00258f6:	29 c8                	sub    eax,ecx
c00258f8:	89 c1                	mov    ecx,eax
c00258fa:	d3 e2                	shl    edx,cl
c00258fc:	31 c0                	xor    eax,eax
c00258fe:	85 d2                	test   edx,edx
c0025900:	0f 95 c0             	setne  al
c0025903:	09 f8                	or     eax,edi
c0025905:	01 d8                	add    eax,ebx
c0025907:	eb 58                	jmp    c0025961 <__addsf3+0x14b>
c0025909:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002590c:	8d 70 01             	lea    esi,[eax+0x1]
c002590f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025915:	75 32                	jne    c0025949 <__addsf3+0x133>
c0025917:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002591b:	75 1f                	jne    c002593c <__addsf3+0x126>
c002591d:	85 d2                	test   edx,edx
c002591f:	0f 84 e0 01 00 00    	je     c0025b05 <__addsf3+0x2ef>
c0025925:	85 db                	test   ebx,ebx
c0025927:	0f 84 e2 01 00 00    	je     c0025b0f <__addsf3+0x2f9>
c002592d:	89 d0                	mov    eax,edx
c002592f:	01 d8                	add    eax,ebx
c0025931:	0f 89 a9 01 00 00    	jns    c0025ae0 <__addsf3+0x2ca>
c0025937:	e9 9d 01 00 00       	jmp    c0025ad9 <__addsf3+0x2c3>
c002593c:	85 d2                	test   edx,edx
c002593e:	0f 85 cb 01 00 00    	jne    c0025b0f <__addsf3+0x2f9>
c0025944:	e9 bc 01 00 00       	jmp    c0025b05 <__addsf3+0x2ef>
c0025949:	31 c0                	xor    eax,eax
c002594b:	89 f1                	mov    ecx,esi
c002594d:	f7 d1                	not    ecx
c002594f:	84 c9                	test   cl,cl
c0025951:	0f 84 90 01 00 00    	je     c0025ae7 <__addsf3+0x2d1>
c0025957:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002595a:	d1 e8                	shr    eax,1
c002595c:	e9 86 01 00 00       	jmp    c0025ae7 <__addsf3+0x2d1>
c0025961:	85 c0                	test   eax,eax
c0025963:	0f 89 7e 01 00 00    	jns    c0025ae7 <__addsf3+0x2d1>
c0025969:	46                   	inc    esi
c002596a:	89 f2                	mov    edx,esi
c002596c:	f7 d2                	not    edx
c002596e:	84 d2                	test   dl,dl
c0025970:	0f 84 6f 01 00 00    	je     c0025ae5 <__addsf3+0x2cf>
c0025976:	89 c2                	mov    edx,eax
c0025978:	83 e2 01             	and    edx,0x1
c002597b:	d1 e8                	shr    eax,1
c002597d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025982:	09 d0                	or     eax,edx
c0025984:	e9 5e 01 00 00       	jmp    c0025ae7 <__addsf3+0x2d1>
c0025989:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002598d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025990:	89 f0                	mov    eax,esi
c0025992:	0f b6 c0             	movzx  eax,al
c0025995:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025998:	29 c1                	sub    ecx,eax
c002599a:	85 c9                	test   ecx,ecx
c002599c:	7e 55                	jle    c00259f3 <__addsf3+0x1dd>
c002599e:	85 c0                	test   eax,eax
c00259a0:	75 11                	jne    c00259b3 <__addsf3+0x19d>
c00259a2:	85 db                	test   ebx,ebx
c00259a4:	0f 84 65 01 00 00    	je     c0025b0f <__addsf3+0x2f9>
c00259aa:	49                   	dec    ecx
c00259ab:	75 19                	jne    c00259c6 <__addsf3+0x1b0>
c00259ad:	89 d0                	mov    eax,edx
c00259af:	29 d8                	sub    eax,ebx
c00259b1:	eb 38                	jmp    c00259eb <__addsf3+0x1d5>
c00259b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259b6:	f7 d0                	not    eax
c00259b8:	84 c0                	test   al,al
c00259ba:	0f 84 4f 01 00 00    	je     c0025b0f <__addsf3+0x2f9>
c00259c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00259c6:	83 f9 1f             	cmp    ecx,0x1f
c00259c9:	0f 8f 40 01 00 00    	jg     c0025b0f <__addsf3+0x2f9>
c00259cf:	89 de                	mov    esi,ebx
c00259d1:	d3 ee                	shr    esi,cl
c00259d3:	b8 20 00 00 00       	mov    eax,0x20
c00259d8:	29 c8                	sub    eax,ecx
c00259da:	89 c1                	mov    ecx,eax
c00259dc:	d3 e3                	shl    ebx,cl
c00259de:	31 c0                	xor    eax,eax
c00259e0:	85 db                	test   ebx,ebx
c00259e2:	0f 95 c0             	setne  al
c00259e5:	09 f0                	or     eax,esi
c00259e7:	29 c2                	sub    edx,eax
c00259e9:	89 d0                	mov    eax,edx
c00259eb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00259ee:	e9 af 00 00 00       	jmp    c0025aa2 <__addsf3+0x28c>
c00259f3:	74 5c                	je     c0025a51 <__addsf3+0x23b>
c00259f5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00259f8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00259fb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00259ff:	75 14                	jne    c0025a15 <__addsf3+0x1ff>
c0025a01:	85 d2                	test   edx,edx
c0025a03:	0f 84 06 01 00 00    	je     c0025b0f <__addsf3+0x2f9>
c0025a09:	48                   	dec    eax
c0025a0a:	75 1b                	jne    c0025a27 <__addsf3+0x211>
c0025a0c:	89 d8                	mov    eax,ebx
c0025a0e:	29 d0                	sub    eax,edx
c0025a10:	e9 8d 00 00 00       	jmp    c0025aa2 <__addsf3+0x28c>
c0025a15:	89 f1                	mov    ecx,esi
c0025a17:	f7 d1                	not    ecx
c0025a19:	84 c9                	test   cl,cl
c0025a1b:	0f 84 ee 00 00 00    	je     c0025b0f <__addsf3+0x2f9>
c0025a21:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025a2a:	83 f8 1f             	cmp    eax,0x1f
c0025a2d:	0f 8f dc 00 00 00    	jg     c0025b0f <__addsf3+0x2f9>
c0025a33:	89 d7                	mov    edi,edx
c0025a35:	88 c1                	mov    cl,al
c0025a37:	d3 ef                	shr    edi,cl
c0025a39:	b9 20 00 00 00       	mov    ecx,0x20
c0025a3e:	29 c1                	sub    ecx,eax
c0025a40:	d3 e2                	shl    edx,cl
c0025a42:	31 c0                	xor    eax,eax
c0025a44:	85 d2                	test   edx,edx
c0025a46:	0f 95 c0             	setne  al
c0025a49:	09 f8                	or     eax,edi
c0025a4b:	29 c3                	sub    ebx,eax
c0025a4d:	89 d8                	mov    eax,ebx
c0025a4f:	eb 51                	jmp    c0025aa2 <__addsf3+0x28c>
c0025a51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a54:	40                   	inc    eax
c0025a55:	a8 fe                	test   al,0xfe
c0025a57:	75 3d                	jne    c0025a96 <__addsf3+0x280>
c0025a59:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025a5d:	0f 85 a7 00 00 00    	jne    c0025b0a <__addsf3+0x2f4>
c0025a63:	85 d2                	test   edx,edx
c0025a65:	75 12                	jne    c0025a79 <__addsf3+0x263>
c0025a67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025a6a:	85 db                	test   ebx,ebx
c0025a6c:	0f 85 9d 00 00 00    	jne    c0025b0f <__addsf3+0x2f9>
c0025a72:	31 ff                	xor    edi,edi
c0025a74:	e9 96 00 00 00       	jmp    c0025b0f <__addsf3+0x2f9>
c0025a79:	85 db                	test   ebx,ebx
c0025a7b:	0f 84 8e 00 00 00    	je     c0025b0f <__addsf3+0x2f9>
c0025a81:	89 d0                	mov    eax,edx
c0025a83:	29 d8                	sub    eax,ebx
c0025a85:	79 06                	jns    c0025a8d <__addsf3+0x277>
c0025a87:	89 d8                	mov    eax,ebx
c0025a89:	29 d0                	sub    eax,edx
c0025a8b:	eb 5a                	jmp    c0025ae7 <__addsf3+0x2d1>
c0025a8d:	bf 00 00 00 00       	mov    edi,0x0
c0025a92:	74 7b                	je     c0025b0f <__addsf3+0x2f9>
c0025a94:	eb 4a                	jmp    c0025ae0 <__addsf3+0x2ca>
c0025a96:	89 d0                	mov    eax,edx
c0025a98:	29 d8                	sub    eax,ebx
c0025a9a:	79 12                	jns    c0025aae <__addsf3+0x298>
c0025a9c:	89 d8                	mov    eax,ebx
c0025a9e:	29 d0                	sub    eax,edx
c0025aa0:	eb 09                	jmp    c0025aab <__addsf3+0x295>
c0025aa2:	85 c0                	test   eax,eax
c0025aa4:	79 41                	jns    c0025ae7 <__addsf3+0x2d1>
c0025aa6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025aab:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0025aae:	31 f6                	xor    esi,esi
c0025ab0:	85 c0                	test   eax,eax
c0025ab2:	74 33                	je     c0025ae7 <__addsf3+0x2d1>
c0025ab4:	0f bd c8             	bsr    ecx,eax
c0025ab7:	83 f1 1f             	xor    ecx,0x1f
c0025aba:	d3 e0                	shl    eax,cl
c0025abc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025ac0:	39 ca                	cmp    edx,ecx
c0025ac2:	7f 10                	jg     c0025ad4 <__addsf3+0x2be>
c0025ac4:	29 d1                	sub    ecx,edx
c0025ac6:	41                   	inc    ecx
c0025ac7:	d3 e8                	shr    eax,cl
c0025ac9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025acc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025ad2:	eb 13                	jmp    c0025ae7 <__addsf3+0x2d1>
c0025ad4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025ad7:	29 ce                	sub    esi,ecx
c0025ad9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025ade:	eb 07                	jmp    c0025ae7 <__addsf3+0x2d1>
c0025ae0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025ae3:	eb 02                	jmp    c0025ae7 <__addsf3+0x2d1>
c0025ae5:	31 c0                	xor    eax,eax
c0025ae7:	89 c2                	mov    edx,eax
c0025ae9:	c1 ea 08             	shr    edx,0x8
c0025aec:	a8 7f                	test   al,0x7f
c0025aee:	0f 95 c1             	setne  cl
c0025af1:	09 d1                	or     ecx,edx
c0025af3:	83 e1 01             	and    ecx,0x1
c0025af6:	c1 e8 07             	shr    eax,0x7
c0025af9:	21 c8                	and    eax,ecx
c0025afb:	c1 e6 17             	shl    esi,0x17
c0025afe:	09 d6                	or     esi,edx
c0025b00:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025b03:	eb 0a                	jmp    c0025b0f <__addsf3+0x2f9>
c0025b05:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025b08:	eb 05                	jmp    c0025b0f <__addsf3+0x2f9>
c0025b0a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025b0f:	89 f8                	mov    eax,edi
c0025b11:	5a                   	pop    edx
c0025b12:	59                   	pop    ecx
c0025b13:	5b                   	pop    ebx
c0025b14:	5e                   	pop    esi
c0025b15:	5f                   	pop    edi
c0025b16:	5d                   	pop    ebp
c0025b17:	c3                   	ret    

c0025b18 <__subsf3>:
c0025b18:	55                   	push   ebp
c0025b19:	89 e5                	mov    ebp,esp
c0025b1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b1e:	05 00 00 00 80       	add    eax,0x80000000
c0025b23:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b26:	5d                   	pop    ebp
c0025b27:	e9 ea fc ff ff       	jmp    c0025816 <__addsf3>

c0025b2c <__negsf2>:
c0025b2c:	55                   	push   ebp
c0025b2d:	89 e5                	mov    ebp,esp
c0025b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b32:	05 00 00 00 80       	add    eax,0x80000000
c0025b37:	5d                   	pop    ebp
c0025b38:	c3                   	ret    

c0025b39 <__mulsf3>:
c0025b39:	55                   	push   ebp
c0025b3a:	89 e5                	mov    ebp,esp
c0025b3c:	57                   	push   edi
c0025b3d:	56                   	push   esi
c0025b3e:	53                   	push   ebx
c0025b3f:	83 ec 1c             	sub    esp,0x1c
c0025b42:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025b45:	89 f0                	mov    eax,esi
c0025b47:	89 f1                	mov    ecx,esi
c0025b49:	c1 f9 17             	sar    ecx,0x17
c0025b4c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025b4f:	c1 e0 08             	shl    eax,0x8
c0025b52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025b57:	89 c1                	mov    ecx,eax
c0025b59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b5f:	89 c7                	mov    edi,eax
c0025b61:	c1 ff 17             	sar    edi,0x17
c0025b64:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b68:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025b6b:	89 f8                	mov    eax,edi
c0025b6d:	0f b6 c0             	movzx  eax,al
c0025b70:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025b73:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025b77:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025b7a:	42                   	inc    edx
c0025b7b:	80 e2 fe             	and    dl,0xfe
c0025b7e:	75 7b                	jne    c0025bfb <__mulsf3+0xc2>
c0025b80:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b84:	74 54                	je     c0025bda <__mulsf3+0xa1>
c0025b86:	85 c9                	test   ecx,ecx
c0025b88:	0f 85 64 01 00 00    	jne    c0025cf2 <__mulsf3+0x1b9>
c0025b8e:	8d 57 01             	lea    edx,[edi+0x1]
c0025b91:	80 e2 fe             	and    dl,0xfe
c0025b94:	75 1f                	jne    c0025bb5 <__mulsf3+0x7c>
c0025b96:	85 c0                	test   eax,eax
c0025b98:	b8 00 00 00 00       	mov    eax,0x0
c0025b9d:	74 29                	je     c0025bc8 <__mulsf3+0x8f>
c0025b9f:	53                   	push   ebx
c0025ba0:	53                   	push   ebx
c0025ba1:	50                   	push   eax
c0025ba2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ba5:	e8 96 05 00 00       	call   c0026140 <__nesf2>
c0025baa:	83 c4 10             	add    esp,0x10
c0025bad:	85 c0                	test   eax,eax
c0025baf:	0f 85 3a 01 00 00    	jne    c0025cef <__mulsf3+0x1b6>
c0025bb5:	85 ff                	test   edi,edi
c0025bb7:	0f 89 35 01 00 00    	jns    c0025cf2 <__mulsf3+0x1b9>
c0025bbd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025bc3:	e9 2a 01 00 00       	jmp    c0025cf2 <__mulsf3+0x1b9>
c0025bc8:	51                   	push   ecx
c0025bc9:	51                   	push   ecx
c0025bca:	50                   	push   eax
c0025bcb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bce:	e8 6d 05 00 00       	call   c0026140 <__nesf2>
c0025bd3:	83 c4 10             	add    esp,0x10
c0025bd6:	85 c0                	test   eax,eax
c0025bd8:	eb 15                	jmp    c0025bef <__mulsf3+0xb6>
c0025bda:	85 c9                	test   ecx,ecx
c0025bdc:	74 0b                	je     c0025be9 <__mulsf3+0xb0>
c0025bde:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025be1:	01 c9                	add    ecx,ecx
c0025be3:	78 16                	js     c0025bfb <__mulsf3+0xc2>
c0025be5:	89 d3                	mov    ebx,edx
c0025be7:	eb f5                	jmp    c0025bde <__mulsf3+0xa5>
c0025be9:	89 f8                	mov    eax,edi
c0025beb:	f7 d0                	not    eax
c0025bed:	84 c0                	test   al,al
c0025bef:	75 c4                	jne    c0025bb5 <__mulsf3+0x7c>
c0025bf1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025bf6:	e9 f7 00 00 00       	jmp    c0025cf2 <__mulsf3+0x1b9>
c0025bfb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025bfe:	c1 e6 08             	shl    esi,0x8
c0025c01:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025c07:	8d 57 01             	lea    edx,[edi+0x1]
c0025c0a:	80 e2 fe             	and    dl,0xfe
c0025c0d:	75 63                	jne    c0025c72 <__mulsf3+0x139>
c0025c0f:	85 c0                	test   eax,eax
c0025c11:	74 2f                	je     c0025c42 <__mulsf3+0x109>
c0025c13:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025c17:	0f 89 d2 00 00 00    	jns    c0025cef <__mulsf3+0x1b6>
c0025c1d:	52                   	push   edx
c0025c1e:	52                   	push   edx
c0025c1f:	6a 00                	push   0x0
c0025c21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c24:	e8 dc 04 00 00       	call   c0026105 <__eqsf2>
c0025c29:	83 c4 10             	add    esp,0x10
c0025c2c:	85 c0                	test   eax,eax
c0025c2e:	0f 85 bb 00 00 00    	jne    c0025cef <__mulsf3+0x1b6>
c0025c34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c37:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025c3d:	e9 b0 00 00 00       	jmp    c0025cf2 <__mulsf3+0x1b9>
c0025c42:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025c45:	50                   	push   eax
c0025c46:	50                   	push   eax
c0025c47:	6a 00                	push   0x0
c0025c49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c4c:	e8 b4 04 00 00       	call   c0026105 <__eqsf2>
c0025c51:	83 c4 10             	add    esp,0x10
c0025c54:	85 c0                	test   eax,eax
c0025c56:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025c59:	75 0c                	jne    c0025c67 <__mulsf3+0x12e>
c0025c5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025c5f:	0f 89 8a 00 00 00    	jns    c0025cef <__mulsf3+0x1b6>
c0025c65:	eb cd                	jmp    c0025c34 <__mulsf3+0xfb>
c0025c67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025c6a:	01 f6                	add    esi,esi
c0025c6c:	78 04                	js     c0025c72 <__mulsf3+0x139>
c0025c6e:	89 c3                	mov    ebx,eax
c0025c70:	eb f5                	jmp    c0025c67 <__mulsf3+0x12e>
c0025c72:	89 c8                	mov    eax,ecx
c0025c74:	0d 00 00 00 80       	or     eax,0x80000000
c0025c79:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025c7f:	f7 e6                	mul    esi
c0025c81:	85 c0                	test   eax,eax
c0025c83:	0f 95 c0             	setne  al
c0025c86:	0f b6 c0             	movzx  eax,al
c0025c89:	09 c2                	or     edx,eax
c0025c8b:	78 03                	js     c0025c90 <__mulsf3+0x157>
c0025c8d:	01 d2                	add    edx,edx
c0025c8f:	4b                   	dec    ebx
c0025c90:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025c96:	7f 22                	jg     c0025cba <__mulsf3+0x181>
c0025c98:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c9e:	85 db                	test   ebx,ebx
c0025ca0:	7f 23                	jg     c0025cc5 <__mulsf3+0x18c>
c0025ca2:	83 fb e9             	cmp    ebx,0xffffffe9
c0025ca5:	7c 1a                	jl     c0025cc1 <__mulsf3+0x188>
c0025ca7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025cad:	b9 01 00 00 00       	mov    ecx,0x1
c0025cb2:	29 d9                	sub    ecx,ebx
c0025cb4:	d3 ea                	shr    edx,cl
c0025cb6:	31 db                	xor    ebx,ebx
c0025cb8:	eb 0b                	jmp    c0025cc5 <__mulsf3+0x18c>
c0025cba:	bb ff 00 00 00       	mov    ebx,0xff
c0025cbf:	eb 02                	jmp    c0025cc3 <__mulsf3+0x18a>
c0025cc1:	31 db                	xor    ebx,ebx
c0025cc3:	31 d2                	xor    edx,edx
c0025cc5:	89 d0                	mov    eax,edx
c0025cc7:	c1 e8 08             	shr    eax,0x8
c0025cca:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025ccd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025cd3:	09 fb                	or     ebx,edi
c0025cd5:	c1 e3 17             	shl    ebx,0x17
c0025cd8:	09 c3                	or     ebx,eax
c0025cda:	f6 c2 7f             	test   dl,0x7f
c0025cdd:	0f 95 c1             	setne  cl
c0025ce0:	09 c8                	or     eax,ecx
c0025ce2:	83 e0 01             	and    eax,0x1
c0025ce5:	c1 ea 07             	shr    edx,0x7
c0025ce8:	21 c2                	and    edx,eax
c0025cea:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025ced:	eb 03                	jmp    c0025cf2 <__mulsf3+0x1b9>
c0025cef:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025cf2:	89 f0                	mov    eax,esi
c0025cf4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cf7:	5b                   	pop    ebx
c0025cf8:	5e                   	pop    esi
c0025cf9:	5f                   	pop    edi
c0025cfa:	5d                   	pop    ebp
c0025cfb:	c3                   	ret    

c0025cfc <__divsf3>:
c0025cfc:	55                   	push   ebp
c0025cfd:	89 e5                	mov    ebp,esp
c0025cff:	57                   	push   edi
c0025d00:	56                   	push   esi
c0025d01:	53                   	push   ebx
c0025d02:	83 ec 1c             	sub    esp,0x1c
c0025d05:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025d08:	89 d8                	mov    eax,ebx
c0025d0a:	89 d9                	mov    ecx,ebx
c0025d0c:	c1 f9 17             	sar    ecx,0x17
c0025d0f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025d12:	c1 e0 08             	shl    eax,0x8
c0025d15:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d1a:	89 c1                	mov    ecx,eax
c0025d1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d1f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d22:	89 c7                	mov    edi,eax
c0025d24:	c1 ff 17             	sar    edi,0x17
c0025d27:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d2b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025d2e:	89 f8                	mov    eax,edi
c0025d30:	0f b6 c0             	movzx  eax,al
c0025d33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025d36:	29 c6                	sub    esi,eax
c0025d38:	83 c6 7f             	add    esi,0x7f
c0025d3b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d3e:	42                   	inc    edx
c0025d3f:	80 e2 fe             	and    dl,0xfe
c0025d42:	0f 85 9c 00 00 00    	jne    c0025de4 <__divsf3+0xe8>
c0025d48:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025d4c:	74 33                	je     c0025d81 <__divsf3+0x85>
c0025d4e:	85 c9                	test   ecx,ecx
c0025d50:	0f 85 c7 01 00 00    	jne    c0025f1d <__divsf3+0x221>
c0025d56:	8d 57 01             	lea    edx,[edi+0x1]
c0025d59:	80 e2 fe             	and    dl,0xfe
c0025d5c:	75 2f                	jne    c0025d8d <__divsf3+0x91>
c0025d5e:	85 c0                	test   eax,eax
c0025d60:	74 2b                	je     c0025d8d <__divsf3+0x91>
c0025d62:	51                   	push   ecx
c0025d63:	51                   	push   ecx
c0025d64:	6a 00                	push   0x0
c0025d66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d69:	e8 d2 03 00 00       	call   c0026140 <__nesf2>
c0025d6e:	83 c4 10             	add    esp,0x10
c0025d71:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025d74:	85 c0                	test   eax,eax
c0025d76:	0f 85 a1 01 00 00    	jne    c0025f1d <__divsf3+0x221>
c0025d7c:	e9 92 01 00 00       	jmp    c0025f13 <__divsf3+0x217>
c0025d81:	85 c9                	test   ecx,ecx
c0025d83:	75 1b                	jne    c0025da0 <__divsf3+0xa4>
c0025d85:	8d 57 01             	lea    edx,[edi+0x1]
c0025d88:	80 e2 fe             	and    dl,0xfe
c0025d8b:	74 1e                	je     c0025dab <__divsf3+0xaf>
c0025d8d:	85 ff                	test   edi,edi
c0025d8f:	0f 89 88 01 00 00    	jns    c0025f1d <__divsf3+0x221>
c0025d95:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025d9b:	e9 7d 01 00 00       	jmp    c0025f1d <__divsf3+0x221>
c0025da0:	8d 56 ff             	lea    edx,[esi-0x1]
c0025da3:	01 c9                	add    ecx,ecx
c0025da5:	78 3d                	js     c0025de4 <__divsf3+0xe8>
c0025da7:	89 d6                	mov    esi,edx
c0025da9:	eb f5                	jmp    c0025da0 <__divsf3+0xa4>
c0025dab:	85 c0                	test   eax,eax
c0025dad:	b8 00 00 00 00       	mov    eax,0x0
c0025db2:	74 18                	je     c0025dcc <__divsf3+0xd0>
c0025db4:	52                   	push   edx
c0025db5:	52                   	push   edx
c0025db6:	50                   	push   eax
c0025db7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025dba:	e8 81 03 00 00       	call   c0026140 <__nesf2>
c0025dbf:	83 c4 10             	add    esp,0x10
c0025dc2:	85 c0                	test   eax,eax
c0025dc4:	0f 85 50 01 00 00    	jne    c0025f1a <__divsf3+0x21e>
c0025dca:	eb c1                	jmp    c0025d8d <__divsf3+0x91>
c0025dcc:	56                   	push   esi
c0025dcd:	56                   	push   esi
c0025dce:	50                   	push   eax
c0025dcf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025dd2:	e8 69 03 00 00       	call   c0026140 <__nesf2>
c0025dd7:	83 c4 10             	add    esp,0x10
c0025dda:	85 c0                	test   eax,eax
c0025ddc:	0f 84 31 01 00 00    	je     c0025f13 <__divsf3+0x217>
c0025de2:	eb a9                	jmp    c0025d8d <__divsf3+0x91>
c0025de4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025de7:	c1 e3 08             	shl    ebx,0x8
c0025dea:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025df0:	8d 57 01             	lea    edx,[edi+0x1]
c0025df3:	80 e2 fe             	and    dl,0xfe
c0025df6:	75 71                	jne    c0025e69 <__divsf3+0x16d>
c0025df8:	85 c0                	test   eax,eax
c0025dfa:	ba 00 00 00 00       	mov    edx,0x0
c0025dff:	74 2f                	je     c0025e30 <__divsf3+0x134>
c0025e01:	51                   	push   ecx
c0025e02:	51                   	push   ecx
c0025e03:	52                   	push   edx
c0025e04:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e07:	e8 f9 02 00 00       	call   c0026105 <__eqsf2>
c0025e0c:	83 c4 10             	add    esp,0x10
c0025e0f:	85 c0                	test   eax,eax
c0025e11:	0f 85 03 01 00 00    	jne    c0025f1a <__divsf3+0x21e>
c0025e17:	31 d2                	xor    edx,edx
c0025e19:	89 d3                	mov    ebx,edx
c0025e1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025e1e:	31 f8                	xor    eax,edi
c0025e20:	0f 89 f7 00 00 00    	jns    c0025f1d <__divsf3+0x221>
c0025e26:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025e2b:	e9 ed 00 00 00       	jmp    c0025f1d <__divsf3+0x221>
c0025e30:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025e33:	50                   	push   eax
c0025e34:	50                   	push   eax
c0025e35:	52                   	push   edx
c0025e36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e39:	e8 c7 02 00 00       	call   c0026105 <__eqsf2>
c0025e3e:	83 c4 10             	add    esp,0x10
c0025e41:	85 c0                	test   eax,eax
c0025e43:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025e46:	75 16                	jne    c0025e5e <__divsf3+0x162>
c0025e48:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025e4b:	31 fb                	xor    ebx,edi
c0025e4d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025e53:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025e59:	e9 bf 00 00 00       	jmp    c0025f1d <__divsf3+0x221>
c0025e5e:	8d 46 01             	lea    eax,[esi+0x1]
c0025e61:	01 db                	add    ebx,ebx
c0025e63:	78 04                	js     c0025e69 <__divsf3+0x16d>
c0025e65:	89 c6                	mov    esi,eax
c0025e67:	eb f5                	jmp    c0025e5e <__divsf3+0x162>
c0025e69:	89 c8                	mov    eax,ecx
c0025e6b:	0d 00 00 00 80       	or     eax,0x80000000
c0025e70:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025e76:	31 d2                	xor    edx,edx
c0025e78:	39 d8                	cmp    eax,ebx
c0025e7a:	72 07                	jb     c0025e83 <__divsf3+0x187>
c0025e7c:	29 d8                	sub    eax,ebx
c0025e7e:	ba 01 00 00 00       	mov    edx,0x1
c0025e83:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025e8a:	01 d2                	add    edx,edx
c0025e8c:	89 c1                	mov    ecx,eax
c0025e8e:	01 c0                	add    eax,eax
c0025e90:	85 c9                	test   ecx,ecx
c0025e92:	78 04                	js     c0025e98 <__divsf3+0x19c>
c0025e94:	39 c3                	cmp    ebx,eax
c0025e96:	77 05                	ja     c0025e9d <__divsf3+0x1a1>
c0025e98:	29 d8                	sub    eax,ebx
c0025e9a:	83 ca 01             	or     edx,0x1
c0025e9d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025ea0:	75 e8                	jne    c0025e8a <__divsf3+0x18e>
c0025ea2:	85 c0                	test   eax,eax
c0025ea4:	0f 95 c0             	setne  al
c0025ea7:	0f b6 c0             	movzx  eax,al
c0025eaa:	c1 e2 06             	shl    edx,0x6
c0025ead:	09 c2                	or     edx,eax
c0025eaf:	78 03                	js     c0025eb4 <__divsf3+0x1b8>
c0025eb1:	01 d2                	add    edx,edx
c0025eb3:	4e                   	dec    esi
c0025eb4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025eba:	7f 22                	jg     c0025ede <__divsf3+0x1e2>
c0025ebc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025ec2:	85 f6                	test   esi,esi
c0025ec4:	7f 23                	jg     c0025ee9 <__divsf3+0x1ed>
c0025ec6:	83 fe e9             	cmp    esi,0xffffffe9
c0025ec9:	7c 1a                	jl     c0025ee5 <__divsf3+0x1e9>
c0025ecb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ed1:	b9 01 00 00 00       	mov    ecx,0x1
c0025ed6:	29 f1                	sub    ecx,esi
c0025ed8:	d3 ea                	shr    edx,cl
c0025eda:	31 f6                	xor    esi,esi
c0025edc:	eb 0b                	jmp    c0025ee9 <__divsf3+0x1ed>
c0025ede:	be ff 00 00 00       	mov    esi,0xff
c0025ee3:	eb 02                	jmp    c0025ee7 <__divsf3+0x1eb>
c0025ee5:	31 f6                	xor    esi,esi
c0025ee7:	31 d2                	xor    edx,edx
c0025ee9:	89 d0                	mov    eax,edx
c0025eeb:	c1 e8 08             	shr    eax,0x8
c0025eee:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025ef1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ef7:	09 fe                	or     esi,edi
c0025ef9:	c1 e6 17             	shl    esi,0x17
c0025efc:	09 c6                	or     esi,eax
c0025efe:	f6 c2 7f             	test   dl,0x7f
c0025f01:	0f 95 c1             	setne  cl
c0025f04:	09 c8                	or     eax,ecx
c0025f06:	83 e0 01             	and    eax,0x1
c0025f09:	c1 ea 07             	shr    edx,0x7
c0025f0c:	21 c2                	and    edx,eax
c0025f0e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025f11:	eb 0a                	jmp    c0025f1d <__divsf3+0x221>
c0025f13:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025f18:	eb 03                	jmp    c0025f1d <__divsf3+0x221>
c0025f1a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025f1d:	89 d8                	mov    eax,ebx
c0025f1f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f22:	5b                   	pop    ebx
c0025f23:	5e                   	pop    esi
c0025f24:	5f                   	pop    edi
c0025f25:	5d                   	pop    ebp
c0025f26:	c3                   	ret    

c0025f27 <__floatsisf>:
c0025f27:	55                   	push   ebp
c0025f28:	89 e5                	mov    ebp,esp
c0025f2a:	53                   	push   ebx
c0025f2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025f2e:	85 d2                	test   edx,edx
c0025f30:	7e 2b                	jle    c0025f5d <__floatsisf+0x36>
c0025f32:	0f bd ca             	bsr    ecx,edx
c0025f35:	83 f1 1f             	xor    ecx,0x1f
c0025f38:	d3 e2                	shl    edx,cl
c0025f3a:	89 d0                	mov    eax,edx
c0025f3c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025f41:	89 c3                	mov    ebx,eax
c0025f43:	c1 eb 08             	shr    ebx,0x8
c0025f46:	80 e2 7f             	and    dl,0x7f
c0025f49:	0f 95 c2             	setne  dl
c0025f4c:	09 da                	or     edx,ebx
c0025f4e:	83 e2 01             	and    edx,0x1
c0025f51:	c1 e8 07             	shr    eax,0x7
c0025f54:	21 c2                	and    edx,eax
c0025f56:	b8 9e 00 00 00       	mov    eax,0x9e
c0025f5b:	eb 32                	jmp    c0025f8f <__floatsisf+0x68>
c0025f5d:	b8 00 00 00 00       	mov    eax,0x0
c0025f62:	74 34                	je     c0025f98 <__floatsisf+0x71>
c0025f64:	f7 da                	neg    edx
c0025f66:	0f bd ca             	bsr    ecx,edx
c0025f69:	83 f1 1f             	xor    ecx,0x1f
c0025f6c:	d3 e2                	shl    edx,cl
c0025f6e:	89 d0                	mov    eax,edx
c0025f70:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025f75:	89 c3                	mov    ebx,eax
c0025f77:	c1 eb 08             	shr    ebx,0x8
c0025f7a:	80 e2 7f             	and    dl,0x7f
c0025f7d:	0f 95 c2             	setne  dl
c0025f80:	09 da                	or     edx,ebx
c0025f82:	83 e2 01             	and    edx,0x1
c0025f85:	c1 e8 07             	shr    eax,0x7
c0025f88:	21 c2                	and    edx,eax
c0025f8a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025f8f:	29 c8                	sub    eax,ecx
c0025f91:	c1 e0 17             	shl    eax,0x17
c0025f94:	09 d8                	or     eax,ebx
c0025f96:	01 d0                	add    eax,edx
c0025f98:	5b                   	pop    ebx
c0025f99:	5d                   	pop    ebp
c0025f9a:	c3                   	ret    

c0025f9b <__floatunsisf>:
c0025f9b:	55                   	push   ebp
c0025f9c:	89 e5                	mov    ebp,esp
c0025f9e:	53                   	push   ebx
c0025f9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025fa2:	31 c0                	xor    eax,eax
c0025fa4:	85 d2                	test   edx,edx
c0025fa6:	74 32                	je     c0025fda <__floatunsisf+0x3f>
c0025fa8:	0f bd ca             	bsr    ecx,edx
c0025fab:	83 f1 1f             	xor    ecx,0x1f
c0025fae:	d3 e2                	shl    edx,cl
c0025fb0:	89 d0                	mov    eax,edx
c0025fb2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025fb7:	89 c3                	mov    ebx,eax
c0025fb9:	c1 eb 08             	shr    ebx,0x8
c0025fbc:	80 e2 7f             	and    dl,0x7f
c0025fbf:	0f 95 c2             	setne  dl
c0025fc2:	09 da                	or     edx,ebx
c0025fc4:	83 e2 01             	and    edx,0x1
c0025fc7:	c1 e8 07             	shr    eax,0x7
c0025fca:	21 c2                	and    edx,eax
c0025fcc:	b8 9e 00 00 00       	mov    eax,0x9e
c0025fd1:	29 c8                	sub    eax,ecx
c0025fd3:	c1 e0 17             	shl    eax,0x17
c0025fd6:	09 d8                	or     eax,ebx
c0025fd8:	01 d0                	add    eax,edx
c0025fda:	5b                   	pop    ebx
c0025fdb:	5d                   	pop    ebp
c0025fdc:	c3                   	ret    

c0025fdd <__fixsfsi>:
c0025fdd:	55                   	push   ebp
c0025fde:	89 e5                	mov    ebp,esp
c0025fe0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025fe3:	89 d1                	mov    ecx,edx
c0025fe5:	c1 e1 08             	shl    ecx,0x8
c0025fe8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025fee:	c1 fa 17             	sar    edx,0x17
c0025ff1:	78 1c                	js     c002600f <__fixsfsi+0x32>
c0025ff3:	83 ea 7f             	sub    edx,0x7f
c0025ff6:	31 c0                	xor    eax,eax
c0025ff8:	83 fa 1e             	cmp    edx,0x1e
c0025ffb:	77 40                	ja     c002603d <__fixsfsi+0x60>
c0025ffd:	89 c8                	mov    eax,ecx
c0025fff:	0d 00 00 00 80       	or     eax,0x80000000
c0026004:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026009:	29 d1                	sub    ecx,edx
c002600b:	d3 e8                	shr    eax,cl
c002600d:	eb 2e                	jmp    c002603d <__fixsfsi+0x60>
c002600f:	31 c0                	xor    eax,eax
c0026011:	81 c2 81 00 00 00    	add    edx,0x81
c0026017:	78 24                	js     c002603d <__fixsfsi+0x60>
c0026019:	83 fa 1e             	cmp    edx,0x1e
c002601c:	7e 09                	jle    c0026027 <__fixsfsi+0x4a>
c002601e:	83 fa 1f             	cmp    edx,0x1f
c0026021:	75 18                	jne    c002603b <__fixsfsi+0x5e>
c0026023:	85 c9                	test   ecx,ecx
c0026025:	75 14                	jne    c002603b <__fixsfsi+0x5e>
c0026027:	89 c8                	mov    eax,ecx
c0026029:	0d 00 00 00 80       	or     eax,0x80000000
c002602e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026033:	29 d1                	sub    ecx,edx
c0026035:	d3 e8                	shr    eax,cl
c0026037:	f7 d8                	neg    eax
c0026039:	eb 02                	jmp    c002603d <__fixsfsi+0x60>
c002603b:	31 c0                	xor    eax,eax
c002603d:	5d                   	pop    ebp
c002603e:	c3                   	ret    

c002603f <__fixunssfsi>:
c002603f:	55                   	push   ebp
c0026040:	89 e5                	mov    ebp,esp
c0026042:	53                   	push   ebx
c0026043:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026046:	89 d3                	mov    ebx,edx
c0026048:	c1 fb 17             	sar    ebx,0x17
c002604b:	83 eb 7f             	sub    ebx,0x7f
c002604e:	31 c0                	xor    eax,eax
c0026050:	83 fb 1f             	cmp    ebx,0x1f
c0026053:	77 18                	ja     c002606d <__fixunssfsi+0x2e>
c0026055:	89 d0                	mov    eax,edx
c0026057:	c1 e0 08             	shl    eax,0x8
c002605a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002605f:	0d 00 00 00 80       	or     eax,0x80000000
c0026064:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026069:	29 d9                	sub    ecx,ebx
c002606b:	d3 e8                	shr    eax,cl
c002606d:	5b                   	pop    ebx
c002606e:	5d                   	pop    ebp
c002606f:	c3                   	ret    

c0026070 <__cmpsf2>:
c0026070:	55                   	push   ebp
c0026071:	89 e5                	mov    ebp,esp
c0026073:	57                   	push   edi
c0026074:	56                   	push   esi
c0026075:	53                   	push   ebx
c0026076:	83 ec 24             	sub    esp,0x24
c0026079:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002607c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002607f:	e8 4f 10 00 00       	call   c00270d3 <__truncdfsf2>
c0026084:	5a                   	pop    edx
c0026085:	59                   	pop    ecx
c0026086:	89 c3                	mov    ebx,eax
c0026088:	c1 e8 17             	shr    eax,0x17
c002608b:	0f b6 f0             	movzx  esi,al
c002608e:	89 d8                	mov    eax,ebx
c0026090:	c1 e8 1f             	shr    eax,0x1f
c0026093:	31 c6                	xor    esi,eax
c0026095:	c1 e3 08             	shl    ebx,0x8
c0026098:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002609b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002609e:	e8 30 10 00 00       	call   c00270d3 <__truncdfsf2>
c00260a3:	83 c4 10             	add    esp,0x10
c00260a6:	89 c1                	mov    ecx,eax
c00260a8:	c1 e9 17             	shr    ecx,0x17
c00260ab:	0f b6 c9             	movzx  ecx,cl
c00260ae:	89 c7                	mov    edi,eax
c00260b0:	c1 ef 1f             	shr    edi,0x1f
c00260b3:	89 ca                	mov    edx,ecx
c00260b5:	31 fa                	xor    edx,edi
c00260b7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00260ba:	c1 e0 08             	shl    eax,0x8
c00260bd:	89 c2                	mov    edx,eax
c00260bf:	89 d8                	mov    eax,ebx
c00260c1:	09 d0                	or     eax,edx
c00260c3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00260c8:	09 f0                	or     eax,esi
c00260ca:	75 08                	jne    c00260d4 <__cmpsf2+0x64>
c00260cc:	31 c0                	xor    eax,eax
c00260ce:	39 f9                	cmp    ecx,edi
c00260d0:	75 0c                	jne    c00260de <__cmpsf2+0x6e>
c00260d2:	eb 29                	jmp    c00260fd <__cmpsf2+0x8d>
c00260d4:	b8 01 00 00 00       	mov    eax,0x1
c00260d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00260dc:	7f 1f                	jg     c00260fd <__cmpsf2+0x8d>
c00260de:	83 c8 ff             	or     eax,0xffffffff
c00260e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00260e4:	7c 17                	jl     c00260fd <__cmpsf2+0x8d>
c00260e6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00260ec:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00260f2:	b8 01 00 00 00       	mov    eax,0x1
c00260f7:	39 d3                	cmp    ebx,edx
c00260f9:	77 02                	ja     c00260fd <__cmpsf2+0x8d>
c00260fb:	19 c0                	sbb    eax,eax
c00260fd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026100:	5b                   	pop    ebx
c0026101:	5e                   	pop    esi
c0026102:	5f                   	pop    edi
c0026103:	5d                   	pop    ebp
c0026104:	c3                   	ret    

c0026105 <__eqsf2>:
c0026105:	55                   	push   ebp
c0026106:	89 e5                	mov    ebp,esp
c0026108:	83 ec 24             	sub    esp,0x24
c002610b:	6a 01                	push   0x1
c002610d:	83 ec 0c             	sub    esp,0xc
c0026110:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026113:	e8 df 10 00 00       	call   c00271f7 <__extendsfdf2>
c0026118:	83 c4 10             	add    esp,0x10
c002611b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002611e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026121:	52                   	push   edx
c0026122:	50                   	push   eax
c0026123:	50                   	push   eax
c0026124:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026127:	e8 cb 10 00 00       	call   c00271f7 <__extendsfdf2>
c002612c:	59                   	pop    ecx
c002612d:	59                   	pop    ecx
c002612e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026131:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026134:	52                   	push   edx
c0026135:	50                   	push   eax
c0026136:	e8 35 ff ff ff       	call   c0026070 <__cmpsf2>
c002613b:	83 c4 20             	add    esp,0x20
c002613e:	c9                   	leave  
c002613f:	c3                   	ret    

c0026140 <__nesf2>:
c0026140:	eb c3                	jmp    c0026105 <__eqsf2>

c0026142 <__gtsf2>:
c0026142:	55                   	push   ebp
c0026143:	89 e5                	mov    ebp,esp
c0026145:	83 ec 24             	sub    esp,0x24
c0026148:	6a ff                	push   0xffffffff
c002614a:	83 ec 0c             	sub    esp,0xc
c002614d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026150:	e8 a2 10 00 00       	call   c00271f7 <__extendsfdf2>
c0026155:	83 c4 10             	add    esp,0x10
c0026158:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002615b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002615e:	52                   	push   edx
c002615f:	50                   	push   eax
c0026160:	50                   	push   eax
c0026161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026164:	e8 8e 10 00 00       	call   c00271f7 <__extendsfdf2>
c0026169:	59                   	pop    ecx
c002616a:	59                   	pop    ecx
c002616b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002616e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026171:	52                   	push   edx
c0026172:	50                   	push   eax
c0026173:	e8 f8 fe ff ff       	call   c0026070 <__cmpsf2>
c0026178:	83 c4 20             	add    esp,0x20
c002617b:	c9                   	leave  
c002617c:	c3                   	ret    

c002617d <__gesf2>:
c002617d:	eb c3                	jmp    c0026142 <__gtsf2>

c002617f <__ltsf2>:
c002617f:	eb 84                	jmp    c0026105 <__eqsf2>

c0026181 <__lesf2>:
c0026181:	eb 82                	jmp    c0026105 <__eqsf2>

c0026183 <__adddf3>:
c0026183:	55                   	push   ebp
c0026184:	89 e5                	mov    ebp,esp
c0026186:	57                   	push   edi
c0026187:	56                   	push   esi
c0026188:	53                   	push   ebx
c0026189:	83 ec 24             	sub    esp,0x24
c002618c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002618f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026192:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026195:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026198:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002619b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002619e:	89 c8                	mov    eax,ecx
c00261a0:	89 ce                	mov    esi,ecx
c00261a2:	c1 fe 14             	sar    esi,0x14
c00261a5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00261a8:	89 fb                	mov    ebx,edi
c00261aa:	89 fa                	mov    edx,edi
c00261ac:	c1 e2 0b             	shl    edx,0xb
c00261af:	c1 e0 0b             	shl    eax,0xb
c00261b2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00261b7:	c1 eb 15             	shr    ebx,0x15
c00261ba:	09 d8                	or     eax,ebx
c00261bc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00261bf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00261c2:	c1 fe 14             	sar    esi,0x14
c00261c5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00261c8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00261cb:	89 f3                	mov    ebx,esi
c00261cd:	c1 e3 0b             	shl    ebx,0xb
c00261d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00261d3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00261d6:	c1 e3 0b             	shl    ebx,0xb
c00261d9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00261df:	c1 ee 15             	shr    esi,0x15
c00261e2:	09 f3                	or     ebx,esi
c00261e4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00261e7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00261ea:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00261ed:	0f 88 5f 02 00 00    	js     c0026452 <__adddf3+0x2cf>
c00261f3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00261f6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00261f9:	85 db                	test   ebx,ebx
c00261fb:	0f 8e c7 00 00 00    	jle    c00262c8 <__adddf3+0x145>
c0026201:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026208:	75 1a                	jne    c0026224 <__adddf3+0xa1>
c002620a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002620d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026210:	0f 84 b2 05 00 00    	je     c00267c8 <__adddf3+0x645>
c0026216:	4b                   	dec    ebx
c0026217:	75 23                	jne    c002623c <__adddf3+0xb9>
c0026219:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002621c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002621f:	e9 99 00 00 00       	jmp    c00262bd <__adddf3+0x13a>
c0026224:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026227:	f7 d6                	not    esi
c0026229:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002622f:	0f 84 93 05 00 00    	je     c00267c8 <__adddf3+0x645>
c0026235:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002623c:	83 fb 1f             	cmp    ebx,0x1f
c002623f:	7e 42                	jle    c0026283 <__adddf3+0x100>
c0026241:	83 fb 3f             	cmp    ebx,0x3f
c0026244:	0f 8f 7e 05 00 00    	jg     c00267c8 <__adddf3+0x645>
c002624a:	83 e3 1f             	and    ebx,0x1f
c002624d:	89 d9                	mov    ecx,ebx
c002624f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026252:	d3 ef                	shr    edi,cl
c0026254:	31 db                	xor    ebx,ebx
c0026256:	85 c9                	test   ecx,ecx
c0026258:	74 15                	je     c002626f <__adddf3+0xec>
c002625a:	be 20 00 00 00       	mov    esi,0x20
c002625f:	29 ce                	sub    esi,ecx
c0026261:	89 f1                	mov    ecx,esi
c0026263:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026266:	d3 e6                	shl    esi,cl
c0026268:	31 db                	xor    ebx,ebx
c002626a:	85 f6                	test   esi,esi
c002626c:	0f 95 c3             	setne  bl
c002626f:	31 c9                	xor    ecx,ecx
c0026271:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026275:	0f 95 c1             	setne  cl
c0026278:	09 cf                	or     edi,ecx
c002627a:	09 fb                	or     ebx,edi
c002627c:	01 da                	add    edx,ebx
c002627e:	83 d0 00             	adc    eax,0x0
c0026281:	eb 3a                	jmp    c00262bd <__adddf3+0x13a>
c0026283:	bf 20 00 00 00       	mov    edi,0x20
c0026288:	29 df                	sub    edi,ebx
c002628a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002628d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026290:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026293:	d3 e6                	shl    esi,cl
c0026295:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026298:	88 d9                	mov    cl,bl
c002629a:	d3 ef                	shr    edi,cl
c002629c:	09 fe                	or     esi,edi
c002629e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262a1:	88 d9                	mov    cl,bl
c00262a3:	d3 ef                	shr    edi,cl
c00262a5:	89 fb                	mov    ebx,edi
c00262a7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262aa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262ad:	d3 e7                	shl    edi,cl
c00262af:	85 ff                	test   edi,edi
c00262b1:	0f 95 c1             	setne  cl
c00262b4:	0f b6 c9             	movzx  ecx,cl
c00262b7:	09 ce                	or     esi,ecx
c00262b9:	01 f2                	add    edx,esi
c00262bb:	11 d8                	adc    eax,ebx
c00262bd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262c0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262c3:	e9 52 01 00 00       	jmp    c002641a <__adddf3+0x297>
c00262c8:	0f 84 d5 00 00 00    	je     c00263a3 <__adddf3+0x220>
c00262ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00262d1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00262d4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262d7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262da:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00262e1:	75 20                	jne    c0026303 <__adddf3+0x180>
c00262e3:	89 d6                	mov    esi,edx
c00262e5:	09 c6                	or     esi,eax
c00262e7:	0f 84 db 04 00 00    	je     c00267c8 <__adddf3+0x645>
c00262ed:	4b                   	dec    ebx
c00262ee:	75 29                	jne    c0026319 <__adddf3+0x196>
c00262f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00262f6:	01 d1                	add    ecx,edx
c00262f8:	11 c6                	adc    esi,eax
c00262fa:	89 f0                	mov    eax,esi
c00262fc:	89 ca                	mov    edx,ecx
c00262fe:	e9 17 01 00 00       	jmp    c002641a <__adddf3+0x297>
c0026303:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026306:	f7 d6                	not    esi
c0026308:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002630e:	0f 84 b4 04 00 00    	je     c00267c8 <__adddf3+0x645>
c0026314:	0d 00 00 00 80       	or     eax,0x80000000
c0026319:	83 fb 1f             	cmp    ebx,0x1f
c002631c:	7e 48                	jle    c0026366 <__adddf3+0x1e3>
c002631e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026321:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026324:	83 fb 3f             	cmp    ebx,0x3f
c0026327:	0f 8f 9b 04 00 00    	jg     c00267c8 <__adddf3+0x645>
c002632d:	83 e3 1f             	and    ebx,0x1f
c0026330:	89 d9                	mov    ecx,ebx
c0026332:	89 c7                	mov    edi,eax
c0026334:	d3 ef                	shr    edi,cl
c0026336:	31 db                	xor    ebx,ebx
c0026338:	85 c9                	test   ecx,ecx
c002633a:	74 12                	je     c002634e <__adddf3+0x1cb>
c002633c:	be 20 00 00 00       	mov    esi,0x20
c0026341:	29 ce                	sub    esi,ecx
c0026343:	89 f1                	mov    ecx,esi
c0026345:	d3 e0                	shl    eax,cl
c0026347:	31 db                	xor    ebx,ebx
c0026349:	85 c0                	test   eax,eax
c002634b:	0f 95 c3             	setne  bl
c002634e:	31 c0                	xor    eax,eax
c0026350:	85 d2                	test   edx,edx
c0026352:	0f 95 c0             	setne  al
c0026355:	09 c7                	or     edi,eax
c0026357:	09 fb                	or     ebx,edi
c0026359:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002635c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002635f:	01 da                	add    edx,ebx
c0026361:	83 d6 00             	adc    esi,0x0
c0026364:	eb 39                	jmp    c002639f <__adddf3+0x21c>
c0026366:	be 20 00 00 00       	mov    esi,0x20
c002636b:	29 de                	sub    esi,ebx
c002636d:	89 c7                	mov    edi,eax
c002636f:	89 f1                	mov    ecx,esi
c0026371:	d3 e7                	shl    edi,cl
c0026373:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026376:	89 d7                	mov    edi,edx
c0026378:	88 d9                	mov    cl,bl
c002637a:	d3 ef                	shr    edi,cl
c002637c:	89 f9                	mov    ecx,edi
c002637e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026381:	09 cf                	or     edi,ecx
c0026383:	88 d9                	mov    cl,bl
c0026385:	d3 e8                	shr    eax,cl
c0026387:	89 f1                	mov    ecx,esi
c0026389:	d3 e2                	shl    edx,cl
c002638b:	85 d2                	test   edx,edx
c002638d:	0f 95 c2             	setne  dl
c0026390:	0f b6 d2             	movzx  edx,dl
c0026393:	09 d7                	or     edi,edx
c0026395:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026398:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002639b:	01 fa                	add    edx,edi
c002639d:	11 c6                	adc    esi,eax
c002639f:	89 f0                	mov    eax,esi
c00263a1:	eb 77                	jmp    c002641a <__adddf3+0x297>
c00263a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263a6:	46                   	inc    esi
c00263a7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00263aa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00263b0:	75 41                	jne    c00263f3 <__adddf3+0x270>
c00263b2:	89 d3                	mov    ebx,edx
c00263b4:	09 c3                	or     ebx,eax
c00263b6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00263bd:	75 27                	jne    c00263e6 <__adddf3+0x263>
c00263bf:	85 db                	test   ebx,ebx
c00263c1:	0f 84 fb 03 00 00    	je     c00267c2 <__adddf3+0x63f>
c00263c7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00263ca:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00263cd:	0f 84 f5 03 00 00    	je     c00267c8 <__adddf3+0x645>
c00263d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00263d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00263d9:	85 c0                	test   eax,eax
c00263db:	0f 89 91 03 00 00    	jns    c0026772 <__adddf3+0x5ef>
c00263e1:	e9 85 03 00 00       	jmp    c002676b <__adddf3+0x5e8>
c00263e6:	85 db                	test   ebx,ebx
c00263e8:	0f 85 da 03 00 00    	jne    c00267c8 <__adddf3+0x645>
c00263ee:	e9 cf 03 00 00       	jmp    c00267c2 <__adddf3+0x63f>
c00263f3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00263f6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00263f9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00263fc:	f7 d1                	not    ecx
c00263fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026404:	0f 84 70 03 00 00    	je     c002677a <__adddf3+0x5f7>
c002640a:	d1 ea                	shr    edx,1
c002640c:	89 c1                	mov    ecx,eax
c002640e:	c1 e1 1f             	shl    ecx,0x1f
c0026411:	09 ca                	or     edx,ecx
c0026413:	d1 e8                	shr    eax,1
c0026415:	e9 6f 03 00 00       	jmp    c0026789 <__adddf3+0x606>
c002641a:	85 c0                	test   eax,eax
c002641c:	0f 89 67 03 00 00    	jns    c0026789 <__adddf3+0x606>
c0026422:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026425:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026428:	f7 d1                	not    ecx
c002642a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026430:	0f 84 44 03 00 00    	je     c002677a <__adddf3+0x5f7>
c0026436:	89 d1                	mov    ecx,edx
c0026438:	d1 e9                	shr    ecx,1
c002643a:	83 e2 01             	and    edx,0x1
c002643d:	09 ca                	or     edx,ecx
c002643f:	89 c1                	mov    ecx,eax
c0026441:	c1 e1 1f             	shl    ecx,0x1f
c0026444:	09 ca                	or     edx,ecx
c0026446:	d1 e8                	shr    eax,1
c0026448:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002644d:	e9 37 03 00 00       	jmp    c0026789 <__adddf3+0x606>
c0026452:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026455:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002645b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002645e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026461:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026467:	29 de                	sub    esi,ebx
c0026469:	85 f6                	test   esi,esi
c002646b:	0f 8e bd 00 00 00    	jle    c002652e <__adddf3+0x3ab>
c0026471:	85 db                	test   ebx,ebx
c0026473:	75 17                	jne    c002648c <__adddf3+0x309>
c0026475:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026478:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002647b:	0f 84 47 03 00 00    	je     c00267c8 <__adddf3+0x645>
c0026481:	4e                   	dec    esi
c0026482:	75 20                	jne    c00264a4 <__adddf3+0x321>
c0026484:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026487:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002648a:	eb 5b                	jmp    c00264e7 <__adddf3+0x364>
c002648c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002648f:	f7 d3                	not    ebx
c0026491:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026497:	0f 84 2b 03 00 00    	je     c00267c8 <__adddf3+0x645>
c002649d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00264a4:	83 fe 1f             	cmp    esi,0x1f
c00264a7:	7e 49                	jle    c00264f2 <__adddf3+0x36f>
c00264a9:	83 fe 3f             	cmp    esi,0x3f
c00264ac:	0f 8f 16 03 00 00    	jg     c00267c8 <__adddf3+0x645>
c00264b2:	83 e6 1f             	and    esi,0x1f
c00264b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00264b8:	89 f1                	mov    ecx,esi
c00264ba:	d3 ef                	shr    edi,cl
c00264bc:	31 db                	xor    ebx,ebx
c00264be:	85 f6                	test   esi,esi
c00264c0:	74 13                	je     c00264d5 <__adddf3+0x352>
c00264c2:	b9 20 00 00 00       	mov    ecx,0x20
c00264c7:	29 f1                	sub    ecx,esi
c00264c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00264cc:	d3 e6                	shl    esi,cl
c00264ce:	31 db                	xor    ebx,ebx
c00264d0:	85 f6                	test   esi,esi
c00264d2:	0f 95 c3             	setne  bl
c00264d5:	31 c9                	xor    ecx,ecx
c00264d7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00264db:	0f 95 c1             	setne  cl
c00264de:	09 cf                	or     edi,ecx
c00264e0:	09 fb                	or     ebx,edi
c00264e2:	29 da                	sub    edx,ebx
c00264e4:	83 d8 00             	sbb    eax,0x0
c00264e7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00264ed:	e9 aa 01 00 00       	jmp    c002669c <__adddf3+0x519>
c00264f2:	bf 20 00 00 00       	mov    edi,0x20
c00264f7:	29 f7                	sub    edi,esi
c00264f9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00264fc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00264ff:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026502:	d3 e3                	shl    ebx,cl
c0026504:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026507:	89 f1                	mov    ecx,esi
c0026509:	d3 ef                	shr    edi,cl
c002650b:	09 fb                	or     ebx,edi
c002650d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026510:	89 f1                	mov    ecx,esi
c0026512:	d3 ef                	shr    edi,cl
c0026514:	89 fe                	mov    esi,edi
c0026516:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026519:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002651c:	d3 e7                	shl    edi,cl
c002651e:	85 ff                	test   edi,edi
c0026520:	0f 95 c1             	setne  cl
c0026523:	0f b6 c9             	movzx  ecx,cl
c0026526:	09 cb                	or     ebx,ecx
c0026528:	29 da                	sub    edx,ebx
c002652a:	19 f0                	sbb    eax,esi
c002652c:	eb b9                	jmp    c00264e7 <__adddf3+0x364>
c002652e:	0f 84 cd 00 00 00    	je     c0026601 <__adddf3+0x47e>
c0026534:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026537:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002653a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002653d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026541:	75 1b                	jne    c002655e <__adddf3+0x3db>
c0026543:	89 d6                	mov    esi,edx
c0026545:	09 c6                	or     esi,eax
c0026547:	0f 84 7b 02 00 00    	je     c00267c8 <__adddf3+0x645>
c002654d:	4b                   	dec    ebx
c002654e:	75 24                	jne    c0026574 <__adddf3+0x3f1>
c0026550:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026553:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026556:	29 d1                	sub    ecx,edx
c0026558:	19 c6                	sbb    esi,eax
c002655a:	89 ca                	mov    edx,ecx
c002655c:	eb 61                	jmp    c00265bf <__adddf3+0x43c>
c002655e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026561:	f7 d6                	not    esi
c0026563:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026569:	0f 84 59 02 00 00    	je     c00267c8 <__adddf3+0x645>
c002656f:	0d 00 00 00 80       	or     eax,0x80000000
c0026574:	83 fb 1f             	cmp    ebx,0x1f
c0026577:	7e 4d                	jle    c00265c6 <__adddf3+0x443>
c0026579:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002657c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002657f:	83 fb 3f             	cmp    ebx,0x3f
c0026582:	0f 8f 40 02 00 00    	jg     c00267c8 <__adddf3+0x645>
c0026588:	83 e3 1f             	and    ebx,0x1f
c002658b:	89 d9                	mov    ecx,ebx
c002658d:	89 c7                	mov    edi,eax
c002658f:	d3 ef                	shr    edi,cl
c0026591:	31 db                	xor    ebx,ebx
c0026593:	85 c9                	test   ecx,ecx
c0026595:	74 12                	je     c00265a9 <__adddf3+0x426>
c0026597:	be 20 00 00 00       	mov    esi,0x20
c002659c:	29 ce                	sub    esi,ecx
c002659e:	89 f1                	mov    ecx,esi
c00265a0:	d3 e0                	shl    eax,cl
c00265a2:	31 db                	xor    ebx,ebx
c00265a4:	85 c0                	test   eax,eax
c00265a6:	0f 95 c3             	setne  bl
c00265a9:	31 c0                	xor    eax,eax
c00265ab:	85 d2                	test   edx,edx
c00265ad:	0f 95 c0             	setne  al
c00265b0:	09 c7                	or     edi,eax
c00265b2:	09 fb                	or     ebx,edi
c00265b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00265b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00265ba:	29 da                	sub    edx,ebx
c00265bc:	83 de 00             	sbb    esi,0x0
c00265bf:	89 f0                	mov    eax,esi
c00265c1:	e9 d6 00 00 00       	jmp    c002669c <__adddf3+0x519>
c00265c6:	be 20 00 00 00       	mov    esi,0x20
c00265cb:	29 de                	sub    esi,ebx
c00265cd:	89 c7                	mov    edi,eax
c00265cf:	89 f1                	mov    ecx,esi
c00265d1:	d3 e7                	shl    edi,cl
c00265d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00265d6:	89 d7                	mov    edi,edx
c00265d8:	88 d9                	mov    cl,bl
c00265da:	d3 ef                	shr    edi,cl
c00265dc:	89 f9                	mov    ecx,edi
c00265de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00265e1:	09 cf                	or     edi,ecx
c00265e3:	88 d9                	mov    cl,bl
c00265e5:	d3 e8                	shr    eax,cl
c00265e7:	89 f1                	mov    ecx,esi
c00265e9:	d3 e2                	shl    edx,cl
c00265eb:	85 d2                	test   edx,edx
c00265ed:	0f 95 c2             	setne  dl
c00265f0:	0f b6 d2             	movzx  edx,dl
c00265f3:	09 d7                	or     edi,edx
c00265f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00265f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00265fb:	29 fa                	sub    edx,edi
c00265fd:	19 c6                	sbb    esi,eax
c00265ff:	eb be                	jmp    c00265bf <__adddf3+0x43c>
c0026601:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026604:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026607:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002660d:	75 6a                	jne    c0026679 <__adddf3+0x4f6>
c002660f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026613:	75 58                	jne    c002666d <__adddf3+0x4ea>
c0026615:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026618:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002661b:	89 d6                	mov    esi,edx
c002661d:	09 c6                	or     esi,eax
c002661f:	75 17                	jne    c0026638 <__adddf3+0x4b5>
c0026621:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026624:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026627:	85 db                	test   ebx,ebx
c0026629:	0f 85 99 01 00 00    	jne    c00267c8 <__adddf3+0x645>
c002662f:	31 ff                	xor    edi,edi
c0026631:	31 c9                	xor    ecx,ecx
c0026633:	e9 90 01 00 00       	jmp    c00267c8 <__adddf3+0x645>
c0026638:	85 db                	test   ebx,ebx
c002663a:	0f 84 88 01 00 00    	je     c00267c8 <__adddf3+0x645>
c0026640:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026643:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026646:	85 c0                	test   eax,eax
c0026648:	79 10                	jns    c002665a <__adddf3+0x4d7>
c002664a:	31 c9                	xor    ecx,ecx
c002664c:	f7 da                	neg    edx
c002664e:	0f 95 c1             	setne  cl
c0026651:	01 c8                	add    eax,ecx
c0026653:	f7 d8                	neg    eax
c0026655:	e9 2f 01 00 00       	jmp    c0026789 <__adddf3+0x606>
c002665a:	31 ff                	xor    edi,edi
c002665c:	31 c9                	xor    ecx,ecx
c002665e:	89 c3                	mov    ebx,eax
c0026660:	09 d3                	or     ebx,edx
c0026662:	0f 84 60 01 00 00    	je     c00267c8 <__adddf3+0x645>
c0026668:	e9 05 01 00 00       	jmp    c0026772 <__adddf3+0x5ef>
c002666d:	31 ff                	xor    edi,edi
c002666f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026674:	e9 4f 01 00 00       	jmp    c00267c8 <__adddf3+0x645>
c0026679:	89 c1                	mov    ecx,eax
c002667b:	89 d0                	mov    eax,edx
c002667d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026680:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026683:	89 ca                	mov    edx,ecx
c0026685:	85 c9                	test   ecx,ecx
c0026687:	79 2c                	jns    c00266b5 <__adddf3+0x532>
c0026689:	31 c9                	xor    ecx,ecx
c002668b:	f7 d8                	neg    eax
c002668d:	0f 95 c1             	setne  cl
c0026690:	01 ca                	add    edx,ecx
c0026692:	f7 da                	neg    edx
c0026694:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026697:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002669a:	eb 19                	jmp    c00266b5 <__adddf3+0x532>
c002669c:	85 c0                	test   eax,eax
c002669e:	0f 89 e5 00 00 00    	jns    c0026789 <__adddf3+0x606>
c00266a4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00266a9:	89 c1                	mov    ecx,eax
c00266ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266ae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00266b1:	89 d0                	mov    eax,edx
c00266b3:	89 ca                	mov    edx,ecx
c00266b5:	85 d2                	test   edx,edx
c00266b7:	74 59                	je     c0026712 <__adddf3+0x58f>
c00266b9:	0f bd da             	bsr    ebx,edx
c00266bc:	83 f3 1f             	xor    ebx,0x1f
c00266bf:	88 d9                	mov    cl,bl
c00266c1:	d3 e2                	shl    edx,cl
c00266c3:	bf 20 00 00 00       	mov    edi,0x20
c00266c8:	89 f9                	mov    ecx,edi
c00266ca:	29 d9                	sub    ecx,ebx
c00266cc:	89 c6                	mov    esi,eax
c00266ce:	d3 ee                	shr    esi,cl
c00266d0:	09 d6                	or     esi,edx
c00266d2:	88 d9                	mov    cl,bl
c00266d4:	d3 e0                	shl    eax,cl
c00266d6:	89 c2                	mov    edx,eax
c00266d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00266db:	25 ff 07 00 00       	and    eax,0x7ff
c00266e0:	39 d8                	cmp    eax,ebx
c00266e2:	7f 22                	jg     c0026706 <__adddf3+0x583>
c00266e4:	29 c3                	sub    ebx,eax
c00266e6:	43                   	inc    ebx
c00266e7:	88 d9                	mov    cl,bl
c00266e9:	d3 ea                	shr    edx,cl
c00266eb:	29 df                	sub    edi,ebx
c00266ed:	89 f9                	mov    ecx,edi
c00266ef:	89 f0                	mov    eax,esi
c00266f1:	d3 e0                	shl    eax,cl
c00266f3:	09 c2                	or     edx,eax
c00266f5:	89 f0                	mov    eax,esi
c00266f7:	88 d9                	mov    cl,bl
c00266f9:	d3 e8                	shr    eax,cl
c00266fb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266fe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0026704:	eb 6f                	jmp    c0026775 <__adddf3+0x5f2>
c0026706:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026709:	29 d8                	sub    eax,ebx
c002670b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002670e:	89 f0                	mov    eax,esi
c0026710:	eb 59                	jmp    c002676b <__adddf3+0x5e8>
c0026712:	85 c0                	test   eax,eax
c0026714:	74 6a                	je     c0026780 <__adddf3+0x5fd>
c0026716:	0f bd c8             	bsr    ecx,eax
c0026719:	83 f1 1f             	xor    ecx,0x1f
c002671c:	d3 e0                	shl    eax,cl
c002671e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026721:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026727:	83 c1 20             	add    ecx,0x20
c002672a:	39 cb                	cmp    ebx,ecx
c002672c:	7f 35                	jg     c0026763 <__adddf3+0x5e0>
c002672e:	29 d9                	sub    ecx,ebx
c0026730:	8d 71 01             	lea    esi,[ecx+0x1]
c0026733:	83 fe 1f             	cmp    esi,0x1f
c0026736:	7e 09                	jle    c0026741 <__adddf3+0x5be>
c0026738:	83 e9 1f             	sub    ecx,0x1f
c002673b:	d3 e8                	shr    eax,cl
c002673d:	89 c3                	mov    ebx,eax
c002673f:	eb 11                	jmp    c0026752 <__adddf3+0x5cf>
c0026741:	b9 20 00 00 00       	mov    ecx,0x20
c0026746:	29 f1                	sub    ecx,esi
c0026748:	89 c3                	mov    ebx,eax
c002674a:	d3 e3                	shl    ebx,cl
c002674c:	89 f1                	mov    ecx,esi
c002674e:	d3 e8                	shr    eax,cl
c0026750:	89 c2                	mov    edx,eax
c0026752:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026755:	25 00 f8 ff ff       	and    eax,0xfffff800
c002675a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002675d:	89 d0                	mov    eax,edx
c002675f:	89 da                	mov    edx,ebx
c0026761:	eb 26                	jmp    c0026789 <__adddf3+0x606>
c0026763:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026766:	29 cf                	sub    edi,ecx
c0026768:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002676b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026770:	eb 17                	jmp    c0026789 <__adddf3+0x606>
c0026772:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026775:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026778:	eb 0f                	jmp    c0026789 <__adddf3+0x606>
c002677a:	31 d2                	xor    edx,edx
c002677c:	31 c0                	xor    eax,eax
c002677e:	eb 09                	jmp    c0026789 <__adddf3+0x606>
c0026780:	89 c2                	mov    edx,eax
c0026782:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026789:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002678c:	c1 e1 14             	shl    ecx,0x14
c002678f:	89 c3                	mov    ebx,eax
c0026791:	c1 eb 0b             	shr    ebx,0xb
c0026794:	09 d9                	or     ecx,ebx
c0026796:	89 d3                	mov    ebx,edx
c0026798:	c1 eb 0b             	shr    ebx,0xb
c002679b:	c1 e0 15             	shl    eax,0x15
c002679e:	09 d8                	or     eax,ebx
c00267a0:	89 c7                	mov    edi,eax
c00267a2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00267a8:	0f 95 c0             	setne  al
c00267ab:	89 c6                	mov    esi,eax
c00267ad:	09 f3                	or     ebx,esi
c00267af:	83 e3 01             	and    ebx,0x1
c00267b2:	c1 ea 0a             	shr    edx,0xa
c00267b5:	21 da                	and    edx,ebx
c00267b7:	89 f8                	mov    eax,edi
c00267b9:	01 d0                	add    eax,edx
c00267bb:	83 d1 00             	adc    ecx,0x0
c00267be:	89 c7                	mov    edi,eax
c00267c0:	eb 06                	jmp    c00267c8 <__adddf3+0x645>
c00267c2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00267c5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00267c8:	89 f8                	mov    eax,edi
c00267ca:	89 ca                	mov    edx,ecx
c00267cc:	83 c4 24             	add    esp,0x24
c00267cf:	5b                   	pop    ebx
c00267d0:	5e                   	pop    esi
c00267d1:	5f                   	pop    edi
c00267d2:	5d                   	pop    ebp
c00267d3:	c3                   	ret    

c00267d4 <__subdf3>:
c00267d4:	55                   	push   ebp
c00267d5:	89 e5                	mov    ebp,esp
c00267d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267da:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00267dd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00267e3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00267e6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00267e9:	5d                   	pop    ebp
c00267ea:	e9 94 f9 ff ff       	jmp    c0026183 <__adddf3>

c00267ef <__negdf2>:
c00267ef:	55                   	push   ebp
c00267f0:	89 e5                	mov    ebp,esp
c00267f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267f5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00267f8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00267fe:	5d                   	pop    ebp
c00267ff:	c3                   	ret    

c0026800 <__muldf3>:
c0026800:	55                   	push   ebp
c0026801:	89 e5                	mov    ebp,esp
c0026803:	57                   	push   edi
c0026804:	56                   	push   esi
c0026805:	53                   	push   ebx
c0026806:	83 ec 24             	sub    esp,0x24
c0026809:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002680c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002680f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026812:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026815:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026818:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002681b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002681e:	89 c8                	mov    eax,ecx
c0026820:	c1 f8 14             	sar    eax,0x14
c0026823:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026826:	89 f8                	mov    eax,edi
c0026828:	89 fb                	mov    ebx,edi
c002682a:	c1 e3 0b             	shl    ebx,0xb
c002682d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026830:	c1 e1 0b             	shl    ecx,0xb
c0026833:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026839:	c1 e8 15             	shr    eax,0x15
c002683c:	09 c1                	or     ecx,eax
c002683e:	89 d6                	mov    esi,edx
c0026840:	89 d0                	mov    eax,edx
c0026842:	c1 f8 14             	sar    eax,0x14
c0026845:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026848:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002684b:	89 c3                	mov    ebx,eax
c002684d:	c1 e3 0b             	shl    ebx,0xb
c0026850:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026853:	c1 e6 0b             	shl    esi,0xb
c0026856:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002685c:	c1 e8 15             	shr    eax,0x15
c002685f:	09 c6                	or     esi,eax
c0026861:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026864:	25 ff 07 00 00       	and    eax,0x7ff
c0026869:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002686c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002686f:	25 ff 07 00 00       	and    eax,0x7ff
c0026874:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026877:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002687a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002687d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026884:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026887:	40                   	inc    eax
c0026888:	a9 fe 07 00 00       	test   eax,0x7fe
c002688d:	0f 85 8d 00 00 00    	jne    c0026920 <__muldf3+0x120>
c0026893:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026896:	09 c8                	or     eax,ecx
c0026898:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002689c:	74 44                	je     c00268e2 <__muldf3+0xe2>
c002689e:	85 c0                	test   eax,eax
c00268a0:	0f 85 31 02 00 00    	jne    c0026ad7 <__muldf3+0x2d7>
c00268a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00268a9:	40                   	inc    eax
c00268aa:	a9 fe 07 00 00       	test   eax,0x7fe
c00268af:	75 13                	jne    c00268c4 <__muldf3+0xc4>
c00268b1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00268b4:	09 f1                	or     ecx,esi
c00268b6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00268ba:	74 22                	je     c00268de <__muldf3+0xde>
c00268bc:	85 c9                	test   ecx,ecx
c00268be:	0f 85 0d 02 00 00    	jne    c0026ad1 <__muldf3+0x2d1>
c00268c4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00268c8:	0f 89 09 02 00 00    	jns    c0026ad7 <__muldf3+0x2d7>
c00268ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00268d1:	05 00 00 00 80       	add    eax,0x80000000
c00268d6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268d9:	e9 f9 01 00 00       	jmp    c0026ad7 <__muldf3+0x2d7>
c00268de:	85 c9                	test   ecx,ecx
c00268e0:	eb 2e                	jmp    c0026910 <__muldf3+0x110>
c00268e2:	85 c0                	test   eax,eax
c00268e4:	74 20                	je     c0026906 <__muldf3+0x106>
c00268e6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00268e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268ec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00268ef:	c1 ef 1f             	shr    edi,0x1f
c00268f2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00268f5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00268f8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00268fb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00268fe:	09 f9                	or     ecx,edi
c0026900:	78 1e                	js     c0026920 <__muldf3+0x120>
c0026902:	89 c3                	mov    ebx,eax
c0026904:	eb e0                	jmp    c00268e6 <__muldf3+0xe6>
c0026906:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026909:	f7 d0                	not    eax
c002690b:	a9 ff 07 00 00       	test   eax,0x7ff
c0026910:	75 b2                	jne    c00268c4 <__muldf3+0xc4>
c0026912:	31 ff                	xor    edi,edi
c0026914:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002691b:	e9 b7 01 00 00       	jmp    c0026ad7 <__muldf3+0x2d7>
c0026920:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026923:	40                   	inc    eax
c0026924:	a9 fe 07 00 00       	test   eax,0x7fe
c0026929:	75 57                	jne    c0026982 <__muldf3+0x182>
c002692b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002692e:	09 f0                	or     eax,esi
c0026930:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026934:	74 23                	je     c0026959 <__muldf3+0x159>
c0026936:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002693a:	0f 89 91 01 00 00    	jns    c0026ad1 <__muldf3+0x2d1>
c0026940:	85 c0                	test   eax,eax
c0026942:	0f 85 89 01 00 00    	jne    c0026ad1 <__muldf3+0x2d1>
c0026948:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002694b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026951:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026954:	e9 7e 01 00 00       	jmp    c0026ad7 <__muldf3+0x2d7>
c0026959:	85 c0                	test   eax,eax
c002695b:	75 0c                	jne    c0026969 <__muldf3+0x169>
c002695d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026961:	0f 89 6a 01 00 00    	jns    c0026ad1 <__muldf3+0x2d1>
c0026967:	eb df                	jmp    c0026948 <__muldf3+0x148>
c0026969:	01 f6                	add    esi,esi
c002696b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002696e:	c1 ea 1f             	shr    edx,0x1f
c0026971:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026974:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026977:	8d 43 ff             	lea    eax,[ebx-0x1]
c002697a:	09 d6                	or     esi,edx
c002697c:	78 04                	js     c0026982 <__muldf3+0x182>
c002697e:	89 c3                	mov    ebx,eax
c0026980:	eb e7                	jmp    c0026969 <__muldf3+0x169>
c0026982:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026988:	81 ce 00 00 00 80    	or     esi,0x80000000
c002698e:	89 c8                	mov    eax,ecx
c0026990:	f7 e6                	mul    esi
c0026992:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026995:	89 c7                	mov    edi,eax
c0026997:	89 c8                	mov    eax,ecx
c0026999:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002699c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002699f:	89 c1                	mov    ecx,eax
c00269a1:	89 f0                	mov    eax,esi
c00269a3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00269a6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00269a9:	89 c6                	mov    esi,eax
c00269ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269ae:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00269b1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00269b4:	31 c0                	xor    eax,eax
c00269b6:	01 f1                	add    ecx,esi
c00269b8:	0f 92 c0             	setb   al
c00269bb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00269be:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00269c1:	83 d6 00             	adc    esi,0x0
c00269c4:	01 c7                	add    edi,eax
c00269c6:	83 d6 00             	adc    esi,0x0
c00269c9:	01 ca                	add    edx,ecx
c00269cb:	0f 92 c1             	setb   cl
c00269ce:	0f b6 c9             	movzx  ecx,cl
c00269d1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00269d4:	83 d6 00             	adc    esi,0x0
c00269d7:	01 cf                	add    edi,ecx
c00269d9:	83 d6 00             	adc    esi,0x0
c00269dc:	31 c9                	xor    ecx,ecx
c00269de:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00269e1:	0f 95 c1             	setne  cl
c00269e4:	09 cf                	or     edi,ecx
c00269e6:	85 f6                	test   esi,esi
c00269e8:	78 0c                	js     c00269f6 <__muldf3+0x1f6>
c00269ea:	01 f6                	add    esi,esi
c00269ec:	89 f8                	mov    eax,edi
c00269ee:	c1 e8 1f             	shr    eax,0x1f
c00269f1:	09 c6                	or     esi,eax
c00269f3:	01 ff                	add    edi,edi
c00269f5:	4b                   	dec    ebx
c00269f6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00269fc:	0f 8f 85 00 00 00    	jg     c0026a87 <__muldf3+0x287>
c0026a02:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026a08:	85 db                	test   ebx,ebx
c0026a0a:	0f 8f 84 00 00 00    	jg     c0026a94 <__muldf3+0x294>
c0026a10:	83 fb cc             	cmp    ebx,0xffffffcc
c0026a13:	7c 79                	jl     c0026a8e <__muldf3+0x28e>
c0026a15:	ba 01 00 00 00       	mov    edx,0x1
c0026a1a:	29 da                	sub    edx,ebx
c0026a1c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a22:	83 fa 1f             	cmp    edx,0x1f
c0026a25:	7e 30                	jle    c0026a57 <__muldf3+0x257>
c0026a27:	83 fa 20             	cmp    edx,0x20
c0026a2a:	75 0b                	jne    c0026a37 <__muldf3+0x237>
c0026a2c:	31 c0                	xor    eax,eax
c0026a2e:	85 ff                	test   edi,edi
c0026a30:	0f 95 c0             	setne  al
c0026a33:	89 c7                	mov    edi,eax
c0026a35:	eb 1a                	jmp    c0026a51 <__muldf3+0x251>
c0026a37:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0026a3a:	89 f0                	mov    eax,esi
c0026a3c:	d3 e0                	shl    eax,cl
c0026a3e:	09 f8                	or     eax,edi
c0026a40:	0f 95 c0             	setne  al
c0026a43:	0f b6 c0             	movzx  eax,al
c0026a46:	89 c7                	mov    edi,eax
c0026a48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026a4d:	29 d9                	sub    ecx,ebx
c0026a4f:	d3 ee                	shr    esi,cl
c0026a51:	09 f7                	or     edi,esi
c0026a53:	31 db                	xor    ebx,ebx
c0026a55:	eb 3b                	jmp    c0026a92 <__muldf3+0x292>
c0026a57:	83 c3 1f             	add    ebx,0x1f
c0026a5a:	89 f0                	mov    eax,esi
c0026a5c:	88 d9                	mov    cl,bl
c0026a5e:	d3 e0                	shl    eax,cl
c0026a60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a63:	89 f8                	mov    eax,edi
c0026a65:	88 d1                	mov    cl,dl
c0026a67:	d3 e8                	shr    eax,cl
c0026a69:	89 c1                	mov    ecx,eax
c0026a6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026a6e:	09 c8                	or     eax,ecx
c0026a70:	88 d9                	mov    cl,bl
c0026a72:	d3 e7                	shl    edi,cl
c0026a74:	31 db                	xor    ebx,ebx
c0026a76:	85 ff                	test   edi,edi
c0026a78:	0f 95 c3             	setne  bl
c0026a7b:	89 df                	mov    edi,ebx
c0026a7d:	09 c7                	or     edi,eax
c0026a7f:	88 d1                	mov    cl,dl
c0026a81:	d3 ee                	shr    esi,cl
c0026a83:	31 db                	xor    ebx,ebx
c0026a85:	eb 0d                	jmp    c0026a94 <__muldf3+0x294>
c0026a87:	bb ff 07 00 00       	mov    ebx,0x7ff
c0026a8c:	eb 02                	jmp    c0026a90 <__muldf3+0x290>
c0026a8e:	31 db                	xor    ebx,ebx
c0026a90:	31 ff                	xor    edi,edi
c0026a92:	31 f6                	xor    esi,esi
c0026a94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a97:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0026a9a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026a9f:	09 c3                	or     ebx,eax
c0026aa1:	c1 e3 14             	shl    ebx,0x14
c0026aa4:	89 f0                	mov    eax,esi
c0026aa6:	c1 e8 0b             	shr    eax,0xb
c0026aa9:	09 c3                	or     ebx,eax
c0026aab:	89 f8                	mov    eax,edi
c0026aad:	c1 e8 0b             	shr    eax,0xb
c0026ab0:	c1 e6 15             	shl    esi,0x15
c0026ab3:	09 c6                	or     esi,eax
c0026ab5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026abb:	0f 95 c1             	setne  cl
c0026abe:	09 c8                	or     eax,ecx
c0026ac0:	83 e0 01             	and    eax,0x1
c0026ac3:	c1 ef 0a             	shr    edi,0xa
c0026ac6:	21 c7                	and    edi,eax
c0026ac8:	01 f7                	add    edi,esi
c0026aca:	83 d3 00             	adc    ebx,0x0
c0026acd:	89 da                	mov    edx,ebx
c0026acf:	eb 03                	jmp    c0026ad4 <__muldf3+0x2d4>
c0026ad1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026ad4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026ad7:	89 f8                	mov    eax,edi
c0026ad9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026adc:	83 c4 24             	add    esp,0x24
c0026adf:	5b                   	pop    ebx
c0026ae0:	5e                   	pop    esi
c0026ae1:	5f                   	pop    edi
c0026ae2:	5d                   	pop    ebp
c0026ae3:	c3                   	ret    

c0026ae4 <__divdf3>:
c0026ae4:	55                   	push   ebp
c0026ae5:	89 e5                	mov    ebp,esp
c0026ae7:	57                   	push   edi
c0026ae8:	56                   	push   esi
c0026ae9:	53                   	push   ebx
c0026aea:	83 ec 2c             	sub    esp,0x2c
c0026aed:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026af0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026af3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026af6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026af9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026afc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026aff:	89 ce                	mov    esi,ecx
c0026b01:	89 c8                	mov    eax,ecx
c0026b03:	c1 f8 14             	sar    eax,0x14
c0026b06:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b09:	89 f8                	mov    eax,edi
c0026b0b:	89 fb                	mov    ebx,edi
c0026b0d:	c1 e3 0b             	shl    ebx,0xb
c0026b10:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026b13:	c1 e6 0b             	shl    esi,0xb
c0026b16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026b1c:	c1 e8 15             	shr    eax,0x15
c0026b1f:	09 c6                	or     esi,eax
c0026b21:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026b24:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026b27:	89 c2                	mov    edx,eax
c0026b29:	c1 fa 14             	sar    edx,0x14
c0026b2c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026b2f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026b32:	89 de                	mov    esi,ebx
c0026b34:	c1 e6 0b             	shl    esi,0xb
c0026b37:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026b3a:	c1 e0 0b             	shl    eax,0xb
c0026b3d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026b42:	c1 eb 15             	shr    ebx,0x15
c0026b45:	09 d8                	or     eax,ebx
c0026b47:	89 c2                	mov    edx,eax
c0026b49:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026b4c:	25 ff 07 00 00       	and    eax,0x7ff
c0026b51:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026b54:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026b57:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026b5d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026b60:	29 d8                	sub    eax,ebx
c0026b62:	05 ff 03 00 00       	add    eax,0x3ff
c0026b67:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b6a:	46                   	inc    esi
c0026b6b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026b71:	0f 85 a5 00 00 00    	jne    c0026c1c <__divdf3+0x138>
c0026b77:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026b7a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026b7d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026b81:	74 2a                	je     c0026bad <__divdf3+0xc9>
c0026b83:	85 f6                	test   esi,esi
c0026b85:	0f 85 cc 02 00 00    	jne    c0026e57 <__divdf3+0x373>
c0026b8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026b8e:	40                   	inc    eax
c0026b8f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026b94:	75 26                	jne    c0026bbc <__divdf3+0xd8>
c0026b96:	85 db                	test   ebx,ebx
c0026b98:	74 22                	je     c0026bbc <__divdf3+0xd8>
c0026b9a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026b9d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026ba0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026ba3:	09 d0                	or     eax,edx
c0026ba5:	0f 85 ac 02 00 00    	jne    c0026e57 <__divdf3+0x373>
c0026bab:	eb 63                	jmp    c0026c10 <__divdf3+0x12c>
c0026bad:	85 f6                	test   esi,esi
c0026baf:	75 22                	jne    c0026bd3 <__divdf3+0xef>
c0026bb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026bb4:	40                   	inc    eax
c0026bb5:	a9 fe 07 00 00       	test   eax,0x7fe
c0026bba:	74 36                	je     c0026bf2 <__divdf3+0x10e>
c0026bbc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026bc0:	0f 89 91 02 00 00    	jns    c0026e57 <__divdf3+0x373>
c0026bc6:	89 f8                	mov    eax,edi
c0026bc8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026bce:	e9 80 02 00 00       	jmp    c0026e53 <__divdf3+0x36f>
c0026bd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026bd6:	01 f6                	add    esi,esi
c0026bd8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026bdb:	c1 ef 1f             	shr    edi,0x1f
c0026bde:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026be1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026be4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026be7:	09 f7                	or     edi,esi
c0026be9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026bec:	78 2e                	js     c0026c1c <__divdf3+0x138>
c0026bee:	89 c8                	mov    eax,ecx
c0026bf0:	eb e1                	jmp    c0026bd3 <__divdf3+0xef>
c0026bf2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026bf5:	09 d0                	or     eax,edx
c0026bf7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026bfb:	74 0f                	je     c0026c0c <__divdf3+0x128>
c0026bfd:	85 c0                	test   eax,eax
c0026bff:	74 bb                	je     c0026bbc <__divdf3+0xd8>
c0026c01:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026c04:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026c07:	e9 4b 02 00 00       	jmp    c0026e57 <__divdf3+0x373>
c0026c0c:	85 c0                	test   eax,eax
c0026c0e:	75 ac                	jne    c0026bbc <__divdf3+0xd8>
c0026c10:	31 ff                	xor    edi,edi
c0026c12:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026c17:	e9 3b 02 00 00       	jmp    c0026e57 <__divdf3+0x373>
c0026c1c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026c1f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026c22:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026c28:	75 6b                	jne    c0026c95 <__divdf3+0x1b1>
c0026c2a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026c2d:	09 d6                	or     esi,edx
c0026c2f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026c33:	74 28                	je     c0026c5d <__divdf3+0x179>
c0026c35:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026c38:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026c3b:	85 f6                	test   esi,esi
c0026c3d:	0f 85 14 02 00 00    	jne    c0026e57 <__divdf3+0x373>
c0026c43:	31 ff                	xor    edi,edi
c0026c45:	31 c9                	xor    ecx,ecx
c0026c47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026c4a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026c4d:	0f 89 04 02 00 00    	jns    c0026e57 <__divdf3+0x373>
c0026c53:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026c58:	e9 fa 01 00 00       	jmp    c0026e57 <__divdf3+0x373>
c0026c5d:	85 f6                	test   esi,esi
c0026c5f:	75 1b                	jne    c0026c7c <__divdf3+0x198>
c0026c61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026c64:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026c67:	25 00 00 00 80       	and    eax,0x80000000
c0026c6c:	31 c9                	xor    ecx,ecx
c0026c6e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026c73:	89 cf                	mov    edi,ecx
c0026c75:	89 c1                	mov    ecx,eax
c0026c77:	e9 db 01 00 00       	jmp    c0026e57 <__divdf3+0x373>
c0026c7c:	01 d2                	add    edx,edx
c0026c7e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026c81:	c1 eb 1f             	shr    ebx,0x1f
c0026c84:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026c87:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026c8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026c8d:	09 da                	or     edx,ebx
c0026c8f:	78 04                	js     c0026c95 <__divdf3+0x1b1>
c0026c91:	89 c8                	mov    eax,ecx
c0026c93:	eb e7                	jmp    c0026c7c <__divdf3+0x198>
c0026c95:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c98:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c9e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026ca7:	39 d6                	cmp    esi,edx
c0026ca9:	77 0d                	ja     c0026cb8 <__divdf3+0x1d4>
c0026cab:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026cae:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026cb1:	72 1b                	jb     c0026cce <__divdf3+0x1ea>
c0026cb3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026cb6:	75 16                	jne    c0026cce <__divdf3+0x1ea>
c0026cb8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026cbb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026cbe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026cc1:	83 de 00             	sbb    esi,0x0
c0026cc4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026cc7:	ba 01 00 00 00       	mov    edx,0x1
c0026ccc:	eb 02                	jmp    c0026cd0 <__divdf3+0x1ec>
c0026cce:	31 d2                	xor    edx,edx
c0026cd0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026cd7:	31 ff                	xor    edi,edi
c0026cd9:	01 ff                	add    edi,edi
c0026cdb:	89 d1                	mov    ecx,edx
c0026cdd:	c1 e9 1f             	shr    ecx,0x1f
c0026ce0:	09 cf                	or     edi,ecx
c0026ce2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026ce5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026ce8:	89 da                	mov    edx,ebx
c0026cea:	89 f3                	mov    ebx,esi
c0026cec:	8d 34 36             	lea    esi,[esi+esi*1]
c0026cef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026cf2:	c1 e9 1f             	shr    ecx,0x1f
c0026cf5:	09 ce                	or     esi,ecx
c0026cf7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026cfa:	01 c9                	add    ecx,ecx
c0026cfc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026cff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026d02:	85 db                	test   ebx,ebx
c0026d04:	78 29                	js     c0026d2f <__divdf3+0x24b>
c0026d06:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026d09:	72 07                	jb     c0026d12 <__divdf3+0x22e>
c0026d0b:	75 3c                	jne    c0026d49 <__divdf3+0x265>
c0026d0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026d10:	77 37                	ja     c0026d49 <__divdf3+0x265>
c0026d12:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026d15:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026d18:	31 d2                	xor    edx,edx
c0026d1a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026d1d:	0f 97 c2             	seta   dl
c0026d20:	29 d6                	sub    esi,edx
c0026d22:	89 d9                	mov    ecx,ebx
c0026d24:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026d27:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026d2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026d2d:	eb 17                	jmp    c0026d46 <__divdf3+0x262>
c0026d2f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026d32:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d35:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026d38:	0f 97 c1             	seta   cl
c0026d3b:	0f b6 c9             	movzx  ecx,cl
c0026d3e:	29 ce                	sub    esi,ecx
c0026d40:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026d43:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026d46:	83 ca 01             	or     edx,0x1
c0026d49:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026d4c:	75 8b                	jne    c0026cd9 <__divdf3+0x1f5>
c0026d4e:	c1 e7 09             	shl    edi,0x9
c0026d51:	89 d1                	mov    ecx,edx
c0026d53:	c1 e9 17             	shr    ecx,0x17
c0026d56:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026d59:	09 f3                	or     ebx,esi
c0026d5b:	0f 95 c3             	setne  bl
c0026d5e:	0f b6 db             	movzx  ebx,bl
c0026d61:	c1 e2 09             	shl    edx,0x9
c0026d64:	09 d3                	or     ebx,edx
c0026d66:	89 ca                	mov    edx,ecx
c0026d68:	09 fa                	or     edx,edi
c0026d6a:	78 0c                	js     c0026d78 <__divdf3+0x294>
c0026d6c:	01 d2                	add    edx,edx
c0026d6e:	89 d9                	mov    ecx,ebx
c0026d70:	c1 e9 1f             	shr    ecx,0x1f
c0026d73:	09 ca                	or     edx,ecx
c0026d75:	01 db                	add    ebx,ebx
c0026d77:	48                   	dec    eax
c0026d78:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026d7d:	0f 8f 83 00 00 00    	jg     c0026e06 <__divdf3+0x322>
c0026d83:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d89:	85 c0                	test   eax,eax
c0026d8b:	0f 8f 82 00 00 00    	jg     c0026e13 <__divdf3+0x32f>
c0026d91:	83 f8 cc             	cmp    eax,0xffffffcc
c0026d94:	7c 77                	jl     c0026e0d <__divdf3+0x329>
c0026d96:	be 01 00 00 00       	mov    esi,0x1
c0026d9b:	29 c6                	sub    esi,eax
c0026d9d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da3:	83 fe 1f             	cmp    esi,0x1f
c0026da6:	7e 2f                	jle    c0026dd7 <__divdf3+0x2f3>
c0026da8:	83 fe 20             	cmp    esi,0x20
c0026dab:	75 0a                	jne    c0026db7 <__divdf3+0x2d3>
c0026dad:	85 db                	test   ebx,ebx
c0026daf:	0f 95 c3             	setne  bl
c0026db2:	0f b6 db             	movzx  ebx,bl
c0026db5:	eb 1a                	jmp    c0026dd1 <__divdf3+0x2ed>
c0026db7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026dba:	89 d7                	mov    edi,edx
c0026dbc:	d3 e7                	shl    edi,cl
c0026dbe:	89 f9                	mov    ecx,edi
c0026dc0:	09 d9                	or     ecx,ebx
c0026dc2:	0f 95 c3             	setne  bl
c0026dc5:	0f b6 db             	movzx  ebx,bl
c0026dc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026dcd:	29 c1                	sub    ecx,eax
c0026dcf:	d3 ea                	shr    edx,cl
c0026dd1:	09 d3                	or     ebx,edx
c0026dd3:	31 c0                	xor    eax,eax
c0026dd5:	eb 3a                	jmp    c0026e11 <__divdf3+0x32d>
c0026dd7:	83 c0 1f             	add    eax,0x1f
c0026dda:	89 d7                	mov    edi,edx
c0026ddc:	88 c1                	mov    cl,al
c0026dde:	d3 e7                	shl    edi,cl
c0026de0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026de3:	89 df                	mov    edi,ebx
c0026de5:	89 f1                	mov    ecx,esi
c0026de7:	d3 ef                	shr    edi,cl
c0026de9:	89 f9                	mov    ecx,edi
c0026deb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026dee:	09 cf                	or     edi,ecx
c0026df0:	88 c1                	mov    cl,al
c0026df2:	d3 e3                	shl    ebx,cl
c0026df4:	85 db                	test   ebx,ebx
c0026df6:	0f 95 c3             	setne  bl
c0026df9:	0f b6 db             	movzx  ebx,bl
c0026dfc:	09 fb                	or     ebx,edi
c0026dfe:	89 f1                	mov    ecx,esi
c0026e00:	d3 ea                	shr    edx,cl
c0026e02:	31 c0                	xor    eax,eax
c0026e04:	eb 0d                	jmp    c0026e13 <__divdf3+0x32f>
c0026e06:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026e0b:	eb 02                	jmp    c0026e0f <__divdf3+0x32b>
c0026e0d:	31 c0                	xor    eax,eax
c0026e0f:	31 db                	xor    ebx,ebx
c0026e11:	31 d2                	xor    edx,edx
c0026e13:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026e16:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026e19:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026e1f:	09 c8                	or     eax,ecx
c0026e21:	c1 e0 14             	shl    eax,0x14
c0026e24:	89 d1                	mov    ecx,edx
c0026e26:	c1 e9 0b             	shr    ecx,0xb
c0026e29:	09 c8                	or     eax,ecx
c0026e2b:	89 c6                	mov    esi,eax
c0026e2d:	89 d9                	mov    ecx,ebx
c0026e2f:	c1 e9 0b             	shr    ecx,0xb
c0026e32:	c1 e2 15             	shl    edx,0x15
c0026e35:	09 ca                	or     edx,ecx
c0026e37:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026e3d:	0f 95 c0             	setne  al
c0026e40:	09 c1                	or     ecx,eax
c0026e42:	83 e1 01             	and    ecx,0x1
c0026e45:	c1 eb 0a             	shr    ebx,0xa
c0026e48:	21 cb                	and    ebx,ecx
c0026e4a:	01 d3                	add    ebx,edx
c0026e4c:	89 d8                	mov    eax,ebx
c0026e4e:	83 d6 00             	adc    esi,0x0
c0026e51:	89 f2                	mov    edx,esi
c0026e53:	89 c7                	mov    edi,eax
c0026e55:	89 d1                	mov    ecx,edx
c0026e57:	89 f8                	mov    eax,edi
c0026e59:	89 ca                	mov    edx,ecx
c0026e5b:	83 c4 2c             	add    esp,0x2c
c0026e5e:	5b                   	pop    ebx
c0026e5f:	5e                   	pop    esi
c0026e60:	5f                   	pop    edi
c0026e61:	5d                   	pop    ebp
c0026e62:	c3                   	ret    

c0026e63 <__floatsidf>:
c0026e63:	55                   	push   ebp
c0026e64:	89 e5                	mov    ebp,esp
c0026e66:	56                   	push   esi
c0026e67:	53                   	push   ebx
c0026e68:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e6b:	85 db                	test   ebx,ebx
c0026e6d:	7e 15                	jle    c0026e84 <__floatsidf+0x21>
c0026e6f:	0f bd cb             	bsr    ecx,ebx
c0026e72:	83 f1 1f             	xor    ecx,0x1f
c0026e75:	d3 e3                	shl    ebx,cl
c0026e77:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026e7d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026e82:	eb 21                	jmp    c0026ea5 <__floatsidf+0x42>
c0026e84:	b8 00 00 00 00       	mov    eax,0x0
c0026e89:	ba 00 00 00 00       	mov    edx,0x0
c0026e8e:	74 2a                	je     c0026eba <__floatsidf+0x57>
c0026e90:	f7 db                	neg    ebx
c0026e92:	0f bd cb             	bsr    ecx,ebx
c0026e95:	83 f1 1f             	xor    ecx,0x1f
c0026e98:	d3 e3                	shl    ebx,cl
c0026e9a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026ea0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026ea5:	29 c8                	sub    eax,ecx
c0026ea7:	c1 e0 14             	shl    eax,0x14
c0026eaa:	89 c1                	mov    ecx,eax
c0026eac:	89 de                	mov    esi,ebx
c0026eae:	c1 ee 0b             	shr    esi,0xb
c0026eb1:	09 f1                	or     ecx,esi
c0026eb3:	89 ca                	mov    edx,ecx
c0026eb5:	c1 e3 15             	shl    ebx,0x15
c0026eb8:	89 d8                	mov    eax,ebx
c0026eba:	5b                   	pop    ebx
c0026ebb:	5e                   	pop    esi
c0026ebc:	5d                   	pop    ebp
c0026ebd:	c3                   	ret    

c0026ebe <__floatunsidf>:
c0026ebe:	55                   	push   ebp
c0026ebf:	89 e5                	mov    ebp,esp
c0026ec1:	56                   	push   esi
c0026ec2:	53                   	push   ebx
c0026ec3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ec6:	85 db                	test   ebx,ebx
c0026ec8:	74 2a                	je     c0026ef4 <__floatunsidf+0x36>
c0026eca:	0f bd cb             	bsr    ecx,ebx
c0026ecd:	83 f1 1f             	xor    ecx,0x1f
c0026ed0:	d3 e3                	shl    ebx,cl
c0026ed2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026ed8:	b8 1e 04 00 00       	mov    eax,0x41e
c0026edd:	29 c8                	sub    eax,ecx
c0026edf:	c1 e0 14             	shl    eax,0x14
c0026ee2:	89 c1                	mov    ecx,eax
c0026ee4:	89 de                	mov    esi,ebx
c0026ee6:	c1 ee 0b             	shr    esi,0xb
c0026ee9:	09 f1                	or     ecx,esi
c0026eeb:	89 ca                	mov    edx,ecx
c0026eed:	c1 e3 15             	shl    ebx,0x15
c0026ef0:	89 d8                	mov    eax,ebx
c0026ef2:	eb 04                	jmp    c0026ef8 <__floatunsidf+0x3a>
c0026ef4:	31 c0                	xor    eax,eax
c0026ef6:	31 d2                	xor    edx,edx
c0026ef8:	5b                   	pop    ebx
c0026ef9:	5e                   	pop    esi
c0026efa:	5d                   	pop    ebp
c0026efb:	c3                   	ret    

c0026efc <__fixdfsi>:
c0026efc:	55                   	push   ebp
c0026efd:	89 e5                	mov    ebp,esp
c0026eff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026f02:	89 d1                	mov    ecx,edx
c0026f04:	c1 e1 0b             	shl    ecx,0xb
c0026f07:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f10:	c1 e8 15             	shr    eax,0x15
c0026f13:	09 c1                	or     ecx,eax
c0026f15:	c1 fa 14             	sar    edx,0x14
c0026f18:	78 1f                	js     c0026f39 <__fixdfsi+0x3d>
c0026f1a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026f20:	31 c0                	xor    eax,eax
c0026f22:	83 fa 1e             	cmp    edx,0x1e
c0026f25:	77 40                	ja     c0026f67 <__fixdfsi+0x6b>
c0026f27:	89 c8                	mov    eax,ecx
c0026f29:	0d 00 00 00 80       	or     eax,0x80000000
c0026f2e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f33:	29 d1                	sub    ecx,edx
c0026f35:	d3 e8                	shr    eax,cl
c0026f37:	eb 2e                	jmp    c0026f67 <__fixdfsi+0x6b>
c0026f39:	31 c0                	xor    eax,eax
c0026f3b:	81 c2 01 04 00 00    	add    edx,0x401
c0026f41:	78 24                	js     c0026f67 <__fixdfsi+0x6b>
c0026f43:	83 fa 1e             	cmp    edx,0x1e
c0026f46:	7e 09                	jle    c0026f51 <__fixdfsi+0x55>
c0026f48:	83 fa 1f             	cmp    edx,0x1f
c0026f4b:	75 18                	jne    c0026f65 <__fixdfsi+0x69>
c0026f4d:	85 c9                	test   ecx,ecx
c0026f4f:	75 14                	jne    c0026f65 <__fixdfsi+0x69>
c0026f51:	89 c8                	mov    eax,ecx
c0026f53:	0d 00 00 00 80       	or     eax,0x80000000
c0026f58:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f5d:	29 d1                	sub    ecx,edx
c0026f5f:	d3 e8                	shr    eax,cl
c0026f61:	f7 d8                	neg    eax
c0026f63:	eb 02                	jmp    c0026f67 <__fixdfsi+0x6b>
c0026f65:	31 c0                	xor    eax,eax
c0026f67:	5d                   	pop    ebp
c0026f68:	c3                   	ret    

c0026f69 <__fixunsdfsi>:
c0026f69:	55                   	push   ebp
c0026f6a:	89 e5                	mov    ebp,esp
c0026f6c:	53                   	push   ebx
c0026f6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026f70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026f73:	89 d3                	mov    ebx,edx
c0026f75:	c1 fb 14             	sar    ebx,0x14
c0026f78:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026f7e:	31 c0                	xor    eax,eax
c0026f80:	83 fb 1f             	cmp    ebx,0x1f
c0026f83:	77 1d                	ja     c0026fa2 <__fixunsdfsi+0x39>
c0026f85:	89 d0                	mov    eax,edx
c0026f87:	c1 e0 0b             	shl    eax,0xb
c0026f8a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026f8f:	c1 e9 15             	shr    ecx,0x15
c0026f92:	09 c8                	or     eax,ecx
c0026f94:	0d 00 00 00 80       	or     eax,0x80000000
c0026f99:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f9e:	29 d9                	sub    ecx,ebx
c0026fa0:	d3 e8                	shr    eax,cl
c0026fa2:	5b                   	pop    ebx
c0026fa3:	5d                   	pop    ebp
c0026fa4:	c3                   	ret    

c0026fa5 <__cmpdf2>:
c0026fa5:	55                   	push   ebp
c0026fa6:	89 e5                	mov    ebp,esp
c0026fa8:	57                   	push   edi
c0026fa9:	56                   	push   esi
c0026faa:	53                   	push   ebx
c0026fab:	83 ec 0c             	sub    esp,0xc
c0026fae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026fb1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026fb4:	89 ca                	mov    edx,ecx
c0026fb6:	c1 ea 14             	shr    edx,0x14
c0026fb9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026fbf:	89 cb                	mov    ebx,ecx
c0026fc1:	c1 fb 1f             	sar    ebx,0x1f
c0026fc4:	31 da                	xor    edx,ebx
c0026fc6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026fc9:	89 df                	mov    edi,ebx
c0026fcb:	c1 e7 0b             	shl    edi,0xb
c0026fce:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026fd1:	c1 e1 0b             	shl    ecx,0xb
c0026fd4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026fda:	c1 eb 15             	shr    ebx,0x15
c0026fdd:	09 d9                	or     ecx,ebx
c0026fdf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026fe2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026fe5:	89 ce                	mov    esi,ecx
c0026fe7:	c1 ee 14             	shr    esi,0x14
c0026fea:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026ff0:	89 cb                	mov    ebx,ecx
c0026ff2:	c1 fb 1f             	sar    ebx,0x1f
c0026ff5:	31 de                	xor    esi,ebx
c0026ff7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026ffa:	89 df                	mov    edi,ebx
c0026ffc:	c1 e7 0b             	shl    edi,0xb
c0026fff:	c1 e1 0b             	shl    ecx,0xb
c0027002:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027008:	c1 eb 15             	shr    ebx,0x15
c002700b:	09 d9                	or     ecx,ebx
c002700d:	89 d3                	mov    ebx,edx
c002700f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027015:	43                   	inc    ebx
c0027016:	83 fb 01             	cmp    ebx,0x1
c0027019:	77 08                	ja     c0027023 <__cmpdf2+0x7e>
c002701b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002701e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027021:	75 68                	jne    c002708b <__cmpdf2+0xe6>
c0027023:	89 f3                	mov    ebx,esi
c0027025:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002702b:	43                   	inc    ebx
c002702c:	83 fb 01             	cmp    ebx,0x1
c002702f:	77 06                	ja     c0027037 <__cmpdf2+0x92>
c0027031:	89 fb                	mov    ebx,edi
c0027033:	09 cb                	or     ebx,ecx
c0027035:	75 54                	jne    c002708b <__cmpdf2+0xe6>
c0027037:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002703a:	09 f8                	or     eax,edi
c002703c:	09 c8                	or     eax,ecx
c002703e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027041:	75 12                	jne    c0027055 <__cmpdf2+0xb0>
c0027043:	8d 42 01             	lea    eax,[edx+0x1]
c0027046:	83 f8 01             	cmp    eax,0x1
c0027049:	77 0a                	ja     c0027055 <__cmpdf2+0xb0>
c002704b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002704e:	31 c0                	xor    eax,eax
c0027050:	83 fb 01             	cmp    ebx,0x1
c0027053:	76 36                	jbe    c002708b <__cmpdf2+0xe6>
c0027055:	b8 01 00 00 00       	mov    eax,0x1
c002705a:	39 f2                	cmp    edx,esi
c002705c:	7f 2d                	jg     c002708b <__cmpdf2+0xe6>
c002705e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027063:	7c 26                	jl     c002708b <__cmpdf2+0xe6>
c0027065:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027068:	77 07                	ja     c0027071 <__cmpdf2+0xcc>
c002706a:	72 16                	jb     c0027082 <__cmpdf2+0xdd>
c002706c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002706f:	76 0a                	jbe    c002707b <__cmpdf2+0xd6>
c0027071:	89 d0                	mov    eax,edx
c0027073:	c1 f8 1f             	sar    eax,0x1f
c0027076:	83 c8 01             	or     eax,0x1
c0027079:	eb 10                	jmp    c002708b <__cmpdf2+0xe6>
c002707b:	b8 00 00 00 00       	mov    eax,0x0
c0027080:	73 09                	jae    c002708b <__cmpdf2+0xe6>
c0027082:	89 d0                	mov    eax,edx
c0027084:	c1 f8 1f             	sar    eax,0x1f
c0027087:	83 e0 02             	and    eax,0x2
c002708a:	48                   	dec    eax
c002708b:	83 c4 0c             	add    esp,0xc
c002708e:	5b                   	pop    ebx
c002708f:	5e                   	pop    esi
c0027090:	5f                   	pop    edi
c0027091:	5d                   	pop    ebp
c0027092:	c3                   	ret    

c0027093 <__eqdf2>:
c0027093:	55                   	push   ebp
c0027094:	89 e5                	mov    ebp,esp
c0027096:	50                   	push   eax
c0027097:	6a 01                	push   0x1
c0027099:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002709c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002709f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270a5:	e8 fb fe ff ff       	call   c0026fa5 <__cmpdf2>
c00270aa:	83 c4 18             	add    esp,0x18
c00270ad:	c9                   	leave  
c00270ae:	c3                   	ret    

c00270af <__nedf2>:
c00270af:	eb e2                	jmp    c0027093 <__eqdf2>

c00270b1 <__gtdf2>:
c00270b1:	55                   	push   ebp
c00270b2:	89 e5                	mov    ebp,esp
c00270b4:	50                   	push   eax
c00270b5:	6a ff                	push   0xffffffff
c00270b7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270c3:	e8 dd fe ff ff       	call   c0026fa5 <__cmpdf2>
c00270c8:	83 c4 18             	add    esp,0x18
c00270cb:	c9                   	leave  
c00270cc:	c3                   	ret    

c00270cd <__gedf2>:
c00270cd:	eb e2                	jmp    c00270b1 <__gtdf2>

c00270cf <__ltdf2>:
c00270cf:	eb c2                	jmp    c0027093 <__eqdf2>

c00270d1 <__ledf2>:
c00270d1:	eb c0                	jmp    c0027093 <__eqdf2>

c00270d3 <__truncdfsf2>:
c00270d3:	55                   	push   ebp
c00270d4:	89 e5                	mov    ebp,esp
c00270d6:	57                   	push   edi
c00270d7:	56                   	push   esi
c00270d8:	53                   	push   ebx
c00270d9:	83 ec 0c             	sub    esp,0xc
c00270dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00270df:	89 d1                	mov    ecx,edx
c00270e1:	c1 f9 14             	sar    ecx,0x14
c00270e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270e7:	89 df                	mov    edi,ebx
c00270e9:	c1 e7 0b             	shl    edi,0xb
c00270ec:	89 d0                	mov    eax,edx
c00270ee:	c1 e0 0b             	shl    eax,0xb
c00270f1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00270f6:	c1 eb 15             	shr    ebx,0x15
c00270f9:	09 d8                	or     eax,ebx
c00270fb:	89 cb                	mov    ebx,ecx
c00270fd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027103:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027109:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002710f:	0f 86 9e 00 00 00    	jbe    c00271b3 <__truncdfsf2+0xe0>
c0027115:	85 db                	test   ebx,ebx
c0027117:	75 0a                	jne    c0027123 <__truncdfsf2+0x50>
c0027119:	c1 fa 17             	sar    edx,0x17
c002711c:	30 d2                	xor    dl,dl
c002711e:	e9 84 00 00 00       	jmp    c00271a7 <__truncdfsf2+0xd4>
c0027123:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027129:	83 fe 83             	cmp    esi,0xffffff83
c002712c:	7d 4b                	jge    c0027179 <__truncdfsf2+0xa6>
c002712e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027133:	29 f1                	sub    ecx,esi
c0027135:	83 f9 1f             	cmp    ecx,0x1f
c0027138:	7f 6b                	jg     c00271a5 <__truncdfsf2+0xd2>
c002713a:	0d 00 00 00 80       	or     eax,0x80000000
c002713f:	89 c3                	mov    ebx,eax
c0027141:	d3 eb                	shr    ebx,cl
c0027143:	be 01 00 00 00       	mov    esi,0x1
c0027148:	d3 e6                	shl    esi,cl
c002714a:	4e                   	dec    esi
c002714b:	21 f0                	and    eax,esi
c002714d:	09 f8                	or     eax,edi
c002714f:	0f 95 c0             	setne  al
c0027152:	0f b6 c0             	movzx  eax,al
c0027155:	09 c3                	or     ebx,eax
c0027157:	89 d9                	mov    ecx,ebx
c0027159:	c1 e9 08             	shr    ecx,0x8
c002715c:	f6 c3 7f             	test   bl,0x7f
c002715f:	0f 95 c0             	setne  al
c0027162:	09 c8                	or     eax,ecx
c0027164:	83 e0 01             	and    eax,0x1
c0027167:	c1 eb 07             	shr    ebx,0x7
c002716a:	21 c3                	and    ebx,eax
c002716c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027172:	09 d1                	or     ecx,edx
c0027174:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027177:	eb 76                	jmp    c00271ef <__truncdfsf2+0x11c>
c0027179:	83 c6 80             	add    esi,0xffffff80
c002717c:	7e 1d                	jle    c002719b <__truncdfsf2+0xc8>
c002717e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027184:	75 0b                	jne    c0027191 <__truncdfsf2+0xbe>
c0027186:	09 f8                	or     eax,edi
c0027188:	74 09                	je     c0027193 <__truncdfsf2+0xc0>
c002718a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002718f:	eb 02                	jmp    c0027193 <__truncdfsf2+0xc0>
c0027191:	31 c0                	xor    eax,eax
c0027193:	c1 fa 17             	sar    edx,0x17
c0027196:	80 ca ff             	or     dl,0xff
c0027199:	eb 0e                	jmp    c00271a9 <__truncdfsf2+0xd6>
c002719b:	c1 fa 1f             	sar    edx,0x1f
c002719e:	c1 e2 08             	shl    edx,0x8
c00271a1:	09 ca                	or     edx,ecx
c00271a3:	eb 04                	jmp    c00271a9 <__truncdfsf2+0xd6>
c00271a5:	31 d2                	xor    edx,edx
c00271a7:	31 c0                	xor    eax,eax
c00271a9:	c1 e2 17             	shl    edx,0x17
c00271ac:	c1 e8 08             	shr    eax,0x8
c00271af:	09 d0                	or     eax,edx
c00271b1:	eb 3c                	jmp    c00271ef <__truncdfsf2+0x11c>
c00271b3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00271b9:	89 ca                	mov    edx,ecx
c00271bb:	c1 fa 0b             	sar    edx,0xb
c00271be:	c1 e2 08             	shl    edx,0x8
c00271c1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00271c4:	31 db                	xor    ebx,ebx
c00271c6:	85 ff                	test   edi,edi
c00271c8:	0f 95 c3             	setne  bl
c00271cb:	09 d8                	or     eax,ebx
c00271cd:	89 c3                	mov    ebx,eax
c00271cf:	c1 eb 08             	shr    ebx,0x8
c00271d2:	a8 7f                	test   al,0x7f
c00271d4:	0f 95 c2             	setne  dl
c00271d7:	89 d6                	mov    esi,edx
c00271d9:	09 de                	or     esi,ebx
c00271db:	83 e6 01             	and    esi,0x1
c00271de:	c1 e8 07             	shr    eax,0x7
c00271e1:	21 f0                	and    eax,esi
c00271e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00271e6:	09 ca                	or     edx,ecx
c00271e8:	c1 e2 17             	shl    edx,0x17
c00271eb:	09 da                	or     edx,ebx
c00271ed:	01 d0                	add    eax,edx
c00271ef:	83 c4 0c             	add    esp,0xc
c00271f2:	5b                   	pop    ebx
c00271f3:	5e                   	pop    esi
c00271f4:	5f                   	pop    edi
c00271f5:	5d                   	pop    ebp
c00271f6:	c3                   	ret    

c00271f7 <__extendsfdf2>:
c00271f7:	55                   	push   ebp
c00271f8:	89 e5                	mov    ebp,esp
c00271fa:	57                   	push   edi
c00271fb:	56                   	push   esi
c00271fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ff:	89 d1                	mov    ecx,edx
c0027201:	c1 f9 17             	sar    ecx,0x17
c0027204:	c1 e2 08             	shl    edx,0x8
c0027207:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002720d:	89 c8                	mov    eax,ecx
c002720f:	80 e4 f8             	and    ah,0xf8
c0027212:	8d 71 01             	lea    esi,[ecx+0x1]
c0027215:	81 e6 fe 00 00 00    	and    esi,0xfe
c002721b:	75 27                	jne    c0027244 <__extendsfdf2+0x4d>
c002721d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027223:	75 18                	jne    c002723d <__extendsfdf2+0x46>
c0027225:	85 d2                	test   edx,edx
c0027227:	74 20                	je     c0027249 <__extendsfdf2+0x52>
c0027229:	41                   	inc    ecx
c002722a:	01 d2                	add    edx,edx
c002722c:	79 fb                	jns    c0027229 <__extendsfdf2+0x32>
c002722e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027234:	29 c8                	sub    eax,ecx
c0027236:	05 81 03 00 00       	add    eax,0x381
c002723b:	eb 0c                	jmp    c0027249 <__extendsfdf2+0x52>
c002723d:	05 00 07 00 00       	add    eax,0x700
c0027242:	eb 05                	jmp    c0027249 <__extendsfdf2+0x52>
c0027244:	05 80 03 00 00       	add    eax,0x380
c0027249:	c1 e0 14             	shl    eax,0x14
c002724c:	89 c1                	mov    ecx,eax
c002724e:	89 d0                	mov    eax,edx
c0027250:	c1 e8 0b             	shr    eax,0xb
c0027253:	09 c1                	or     ecx,eax
c0027255:	c1 e2 15             	shl    edx,0x15
c0027258:	89 d0                	mov    eax,edx
c002725a:	89 ca                	mov    edx,ecx
c002725c:	5e                   	pop    esi
c002725d:	5f                   	pop    edi
c002725e:	5d                   	pop    ebp
c002725f:	c3                   	ret    

c0027260 <fabs>:
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027267:	89 04 24             	mov    DWORD PTR [esp],eax
c002726a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002726e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027273:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027277:	dd 04 24             	fld    QWORD PTR [esp]
c002727a:	83 c4 0c             	add    esp,0xc
c002727d:	c3                   	ret    
c002727e:	66 90                	xchg   ax,ax

c0027280 <lrint>:
c0027280:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027284:	83 ec 04             	sub    esp,0x4
c0027287:	db 1c 24             	fistp  DWORD PTR [esp]
c002728a:	58                   	pop    eax
c002728b:	c3                   	ret    

c002728c <lrintf>:
c002728c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027290:	83 ec 04             	sub    esp,0x4
c0027293:	db 1c 24             	fistp  DWORD PTR [esp]
c0027296:	58                   	pop    eax
c0027297:	c3                   	ret    

Disassembly of section .init:

c0027298 <_init>:
c0027298:	55                   	push   ebp
c0027299:	89 e5                	mov    ebp,esp
c002729b:	e8 78 8e fd ff       	call   c0000118 <frame_dummy>
c00272a0:	e8 63 e0 ff ff       	call   c0025308 <__do_global_ctors_aux>
c00272a5:	5d                   	pop    ebp
c00272a6:	c3                   	ret    

Disassembly of section .fini:

c00272a7 <_fini>:
c00272a7:	55                   	push   ebp
c00272a8:	89 e5                	mov    ebp,esp
c00272aa:	e8 f9 8d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00272af:	5d                   	pop    ebp
c00272b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00272b2 <Computer::~Computer()>:
c00272b2:	83 ec 0c             	sub    esp,0xc
c00272b5:	ba a8 8d 02 c0       	mov    edx,0xc0028da8
c00272ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272be:	89 10                	mov    DWORD PTR [eax],edx
c00272c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c4:	83 ec 0c             	sub    esp,0xc
c00272c7:	50                   	push   eax
c00272c8:	e8 bb c8 fe ff       	call   c0013b88 <Device::~Device()>
c00272cd:	83 c4 10             	add    esp,0x10
c00272d0:	90                   	nop
c00272d1:	83 c4 0c             	add    esp,0xc
c00272d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00272d6 <Computer::~Computer()>:
c00272d6:	83 ec 0c             	sub    esp,0xc
c00272d9:	83 ec 0c             	sub    esp,0xc
c00272dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272e0:	e8 cd ff ff ff       	call   c00272b2 <Computer::~Computer()>
c00272e5:	83 c4 10             	add    esp,0x10
c00272e8:	83 ec 08             	sub    esp,0x8
c00272eb:	68 ec 01 00 00       	push   0x1ec
c00272f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272f4:	e8 b6 b4 fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c00272f9:	83 c4 10             	add    esp,0x10
c00272fc:	83 c4 0c             	add    esp,0xc
c00272ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027300 <idleCommon()>:
c0027300:	83 ec 0c             	sub    esp,0xc
c0027303:	e8 88 5c ff ff       	call   c001cf90 <lockScheduler()>
c0027308:	e8 bf 5f ff ff       	call   c001d2cc <schedule()>
c002730d:	83 c4 0c             	add    esp,0xc
c0027310:	e9 7d 5c ff ff       	jmp    c001cf92 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027316 <LinkedList<UnixFile>::~LinkedList()>:
c0027316:	90                   	nop
c0027317:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027318 <LinkedList<UnixFile>::LinkedList()>:
c0027318:	83 ec 0c             	sub    esp,0xc
c002731b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027329:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027334:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002733b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027349:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027354:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002735b:	83 ec 0c             	sub    esp,0xc
c002735e:	68 1e 90 02 c0       	push   0xc002901e
c0027363:	e8 27 b5 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0027368:	83 c4 10             	add    esp,0x10
c002736b:	90                   	nop
c002736c:	83 c4 0c             	add    esp,0xc
c002736f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027370 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027370:	83 ec 0c             	sub    esp,0xc
c0027373:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027378:	75 10                	jne    c002738a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002737a:	83 ec 0c             	sub    esp,0xc
c002737d:	68 38 90 02 c0       	push   0xc0029038
c0027382:	e8 5a 26 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027387:	83 c4 10             	add    esp,0x10
c002738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002738e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027390:	85 c0                	test   eax,eax
c0027392:	74 34                	je     c00273c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002739b:	85 c0                	test   eax,eax
c002739d:	74 29                	je     c00273c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002739f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273c6:	eb 65                	jmp    c002742d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00273c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00273ce:	85 c0                	test   eax,eax
c00273d0:	75 4b                	jne    c002741d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00273d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273d9:	85 c0                	test   eax,eax
c00273db:	75 40                	jne    c002741d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00273dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273e5:	89 10                	mov    DWORD PTR [eax],edx
c00273e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027404:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027407:	85 c0                	test   eax,eax
c0027409:	74 22                	je     c002742d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002740b:	83 ec 0c             	sub    esp,0xc
c002740e:	68 5a 90 02 c0       	push   0xc002905a
c0027413:	e8 c9 25 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027418:	83 c4 10             	add    esp,0x10
c002741b:	eb 10                	jmp    c002742d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002741d:	83 ec 0c             	sub    esp,0xc
c0027420:	68 64 90 02 c0       	push   0xc0029064
c0027425:	e8 b7 25 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c002742a:	83 c4 10             	add    esp,0x10
c002742d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027431:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027434:	8d 50 01             	lea    edx,[eax+0x1]
c0027437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002743b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002743e:	90                   	nop
c002743f:	83 c4 0c             	add    esp,0xc
c0027442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027444 <LinkedList<UnixFile>::getFirstElement()>:
c0027444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027448:	8b 00                	mov    eax,DWORD PTR [eax]
c002744a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002744c <LinkedList<UnixFile>::removeFirst()>:
c002744c:	83 ec 0c             	sub    esp,0xc
c002744f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027453:	8b 00                	mov    eax,DWORD PTR [eax]
c0027455:	85 c0                	test   eax,eax
c0027457:	75 12                	jne    c002746b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027459:	83 ec 0c             	sub    esp,0xc
c002745c:	68 70 90 02 c0       	push   0xc0029070
c0027461:	e8 7b 25 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027466:	83 c4 10             	add    esp,0x10
c0027469:	eb 7e                	jmp    c00274e9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002746b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002746f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027472:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027475:	85 c0                	test   eax,eax
c0027477:	74 10                	je     c0027489 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027479:	83 ec 0c             	sub    esp,0xc
c002747c:	68 bb 90 02 c0       	push   0xc00290bb
c0027481:	e8 5b 25 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027486:	83 c4 10             	add    esp,0x10
c0027489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748d:	8b 00                	mov    eax,DWORD PTR [eax]
c002748f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027492:	85 c0                	test   eax,eax
c0027494:	75 33                	jne    c00274c9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274b2:	83 f8 01             	cmp    eax,0x1
c00274b5:	74 21                	je     c00274d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00274b7:	83 ec 0c             	sub    esp,0xc
c00274ba:	68 94 90 02 c0       	push   0xc0029094
c00274bf:	e8 1d 25 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00274c4:	83 c4 10             	add    esp,0x10
c00274c7:	eb 0f                	jmp    c00274d8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00274c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00274cf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00274d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d6:	89 10                	mov    DWORD PTR [eax],edx
c00274d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274df:	8d 50 ff             	lea    edx,[eax-0x1]
c00274e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274e9:	83 c4 0c             	add    esp,0xc
c00274ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00274ee <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00274ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00274f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274f5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00274f6 <DriverlessDevice::~DriverlessDevice()>:
c00274f6:	ba a4 97 02 c0       	mov    edx,0xc00297a4
c00274fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274ff:	89 10                	mov    DWORD PTR [eax],edx
c0027501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027505:	50                   	push   eax
c0027506:	e8 7d c6 fe ff       	call   c0013b88 <Device::~Device()>
c002750b:	83 c4 04             	add    esp,0x4
c002750e:	90                   	nop
c002750f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027510 <DriverlessDevice::~DriverlessDevice()>:
c0027510:	83 ec 0c             	sub    esp,0xc
c0027513:	83 ec 0c             	sub    esp,0xc
c0027516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002751a:	e8 d7 ff ff ff       	call   c00274f6 <DriverlessDevice::~DriverlessDevice()>
c002751f:	83 c4 10             	add    esp,0x10
c0027522:	83 ec 08             	sub    esp,0x8
c0027525:	68 58 01 00 00       	push   0x158
c002752a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002752e:	e8 7c b2 fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027533:	83 c4 10             	add    esp,0x10
c0027536:	83 c4 0c             	add    esp,0xc
c0027539:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002753a <LinkedList<Device>::addElement(Device*)>:
c002753a:	83 ec 0c             	sub    esp,0xc
c002753d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027542:	75 10                	jne    c0027554 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027544:	83 ec 0c             	sub    esp,0xc
c0027547:	68 38 90 02 c0       	push   0xc0029038
c002754c:	e8 90 24 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027551:	83 c4 10             	add    esp,0x10
c0027554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027558:	8b 00                	mov    eax,DWORD PTR [eax]
c002755a:	85 c0                	test   eax,eax
c002755c:	74 3a                	je     c0027598 <LinkedList<Device>::addElement(Device*)+0x5e>
c002755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027565:	85 c0                	test   eax,eax
c0027567:	74 2f                	je     c0027598 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027570:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027574:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002757a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002757e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027582:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027589:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002758c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027596:	eb 68                	jmp    c0027600 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002759c:	8b 00                	mov    eax,DWORD PTR [eax]
c002759e:	85 c0                	test   eax,eax
c00275a0:	75 4e                	jne    c00275f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00275a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275a9:	85 c0                	test   eax,eax
c00275ab:	75 43                	jne    c00275f0 <LinkedList<Device>::addElement(Device*)+0xb6>
c00275ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275b5:	89 10                	mov    DWORD PTR [eax],edx
c00275b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275c9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00275d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275da:	85 c0                	test   eax,eax
c00275dc:	74 22                	je     c0027600 <LinkedList<Device>::addElement(Device*)+0xc6>
c00275de:	83 ec 0c             	sub    esp,0xc
c00275e1:	68 5a 90 02 c0       	push   0xc002905a
c00275e6:	e8 f6 23 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00275eb:	83 c4 10             	add    esp,0x10
c00275ee:	eb 10                	jmp    c0027600 <LinkedList<Device>::addElement(Device*)+0xc6>
c00275f0:	83 ec 0c             	sub    esp,0xc
c00275f3:	68 64 90 02 c0       	push   0xc0029064
c00275f8:	e8 e4 23 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00275fd:	83 c4 10             	add    esp,0x10
c0027600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027607:	8d 50 01             	lea    edx,[eax+0x1]
c002760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027611:	90                   	nop
c0027612:	83 c4 0c             	add    esp,0xc
c0027615:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027616 <LinkedList<Device>::LinkedList()>:
c0027616:	83 ec 0c             	sub    esp,0xc
c0027619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002761d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027627:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002762e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027632:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002764e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027652:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027659:	83 ec 0c             	sub    esp,0xc
c002765c:	68 1e 90 02 c0       	push   0xc002901e
c0027661:	e8 29 b2 fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0027666:	83 c4 10             	add    esp,0x10
c0027669:	90                   	nop
c002766a:	83 c4 0c             	add    esp,0xc
c002766d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002766e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002766e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027672:	8b 00                	mov    eax,DWORD PTR [eax]
c0027674:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027676 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002767a:	8b 00                	mov    eax,DWORD PTR [eax]
c002767c:	85 c0                	test   eax,eax
c002767e:	75 0e                	jne    c002768e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027687:	85 c0                	test   eax,eax
c0027689:	75 03                	jne    c002768e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002768b:	b0 01                	mov    al,0x1
c002768d:	c3                   	ret    
c002768e:	b0 00                	mov    al,0x0
c0027690:	90                   	nop
c0027691:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027692:	83 ec 0c             	sub    esp,0xc
c0027695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027699:	8b 00                	mov    eax,DWORD PTR [eax]
c002769b:	85 c0                	test   eax,eax
c002769d:	75 15                	jne    c00276b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002769f:	83 ec 0c             	sub    esp,0xc
c00276a2:	68 70 90 02 c0       	push   0xc0029070
c00276a7:	e8 35 23 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00276ac:	83 c4 10             	add    esp,0x10
c00276af:	e9 88 00 00 00       	jmp    c002773c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00276b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00276bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00276be:	85 c0                	test   eax,eax
c00276c0:	0f 95 c0             	setne  al
c00276c3:	84 c0                	test   al,al
c00276c5:	74 10                	je     c00276d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00276c7:	83 ec 0c             	sub    esp,0xc
c00276ca:	68 bb 90 02 c0       	push   0xc00290bb
c00276cf:	e8 0d 23 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00276d4:	83 c4 10             	add    esp,0x10
c00276d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276db:	8b 00                	mov    eax,DWORD PTR [eax]
c00276dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00276e0:	85 c0                	test   eax,eax
c00276e2:	0f 94 c0             	sete   al
c00276e5:	84 c0                	test   al,al
c00276e7:	74 33                	je     c002771c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00276e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027702:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027705:	83 f8 01             	cmp    eax,0x1
c0027708:	74 21                	je     c002772b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002770a:	83 ec 0c             	sub    esp,0xc
c002770d:	68 94 90 02 c0       	push   0xc0029094
c0027712:	e8 ca 22 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027717:	83 c4 10             	add    esp,0x10
c002771a:	eb 0f                	jmp    c002772b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002771c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027720:	8b 00                	mov    eax,DWORD PTR [eax]
c0027722:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027729:	89 10                	mov    DWORD PTR [eax],edx
c002772b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002772f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027732:	8d 50 ff             	lea    edx,[eax-0x1]
c0027735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027739:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002773c:	83 c4 0c             	add    esp,0xc
c002773f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027740:	83 ec 0c             	sub    esp,0xc
c0027743:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027748:	75 10                	jne    c002775a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002774a:	83 ec 0c             	sub    esp,0xc
c002774d:	68 38 90 02 c0       	push   0xc0029038
c0027752:	e8 8a 22 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c0027757:	83 c4 10             	add    esp,0x10
c002775a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027760:	85 c0                	test   eax,eax
c0027762:	74 34                	je     c0027798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002776b:	85 c0                	test   eax,eax
c002776d:	74 29                	je     c0027798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002776f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027776:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002777a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002777d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027785:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002778f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027796:	eb 65                	jmp    c00277fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002779c:	8b 00                	mov    eax,DWORD PTR [eax]
c002779e:	85 c0                	test   eax,eax
c00277a0:	75 4b                	jne    c00277ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00277a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00277a9:	85 c0                	test   eax,eax
c00277ab:	75 40                	jne    c00277ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00277ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277b5:	89 10                	mov    DWORD PTR [eax],edx
c00277b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00277c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00277c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00277d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277d7:	85 c0                	test   eax,eax
c00277d9:	74 22                	je     c00277fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00277db:	83 ec 0c             	sub    esp,0xc
c00277de:	68 5a 90 02 c0       	push   0xc002905a
c00277e3:	e8 f9 21 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00277e8:	83 c4 10             	add    esp,0x10
c00277eb:	eb 10                	jmp    c00277fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00277ed:	83 ec 0c             	sub    esp,0xc
c00277f0:	68 64 90 02 c0       	push   0xc0029064
c00277f5:	e8 e7 21 ff ff       	call   c00199e1 <Krnl::panic(char const*)>
c00277fa:	83 c4 10             	add    esp,0x10
c00277fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027804:	8d 50 01             	lea    edx,[eax+0x1]
c0027807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002780e:	90                   	nop
c002780f:	83 c4 0c             	add    esp,0xc
c0027812:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027814 <ACPI::~ACPI()>:
c0027814:	83 ec 0c             	sub    esp,0xc
c0027817:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c002781c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027820:	89 10                	mov    DWORD PTR [eax],edx
c0027822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027826:	83 ec 0c             	sub    esp,0xc
c0027829:	50                   	push   eax
c002782a:	e8 59 c3 fe ff       	call   c0013b88 <Device::~Device()>
c002782f:	83 c4 10             	add    esp,0x10
c0027832:	90                   	nop
c0027833:	83 c4 0c             	add    esp,0xc
c0027836:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027838 <ACPI::~ACPI()>:
c0027838:	83 ec 0c             	sub    esp,0xc
c002783b:	83 ec 0c             	sub    esp,0xc
c002783e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027842:	e8 cd ff ff ff       	call   c0027814 <ACPI::~ACPI()>
c0027847:	83 c4 10             	add    esp,0x10
c002784a:	83 ec 08             	sub    esp,0x8
c002784d:	68 68 22 00 00       	push   0x2268
c0027852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027856:	e8 54 af fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c002785b:	83 c4 10             	add    esp,0x10
c002785e:	83 c4 0c             	add    esp,0xc
c0027861:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027862 <CPU::~CPU()>:
c0027862:	83 ec 0c             	sub    esp,0xc
c0027865:	ba 38 a4 02 c0       	mov    edx,0xc002a438
c002786a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002786e:	89 10                	mov    DWORD PTR [eax],edx
c0027870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027874:	83 ec 0c             	sub    esp,0xc
c0027877:	50                   	push   eax
c0027878:	e8 0b c3 fe ff       	call   c0013b88 <Device::~Device()>
c002787d:	83 c4 10             	add    esp,0x10
c0027880:	90                   	nop
c0027881:	83 c4 0c             	add    esp,0xc
c0027884:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027886 <CPU::~CPU()>:
c0027886:	83 ec 0c             	sub    esp,0xc
c0027889:	83 ec 0c             	sub    esp,0xc
c002788c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027890:	e8 cd ff ff ff       	call   c0027862 <CPU::~CPU()>
c0027895:	83 c4 10             	add    esp,0x10
c0027898:	83 ec 08             	sub    esp,0x8
c002789b:	68 98 11 00 00       	push   0x1198
c00278a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278a4:	e8 06 af fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c00278a9:	83 c4 10             	add    esp,0x10
c00278ac:	83 c4 0c             	add    esp,0xc
c00278af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00278b0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00278b0:	90                   	nop
c00278b1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00278b2 <ThreadControlBlock::ThreadControlBlock()>:
c00278b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00278bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00278c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278cc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00278d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278d7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00278de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278e2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00278e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00278ea:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00278ee:	90                   	nop
c00278ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00278f0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00278f0:	83 ec 0c             	sub    esp,0xc
c00278f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027901:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002790c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027917:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002791d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027921:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027933:	83 ec 0c             	sub    esp,0xc
c0027936:	68 1e 90 02 c0       	push   0xc002901e
c002793b:	e8 4f af fe ff       	call   c001288f <Dbg::kprintf(char const*, ...)>
c0027940:	83 c4 10             	add    esp,0x10
c0027943:	90                   	nop
c0027944:	83 c4 0c             	add    esp,0xc
c0027947:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027948 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027948:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002794c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002794f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027950 <Vm::_FPUState::_FPUState()>:
c0027950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027954:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002795b:	90                   	nop
c002795c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002795e <PCI::~PCI()>:
c002795e:	83 ec 0c             	sub    esp,0xc
c0027961:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0027966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002796a:	89 10                	mov    DWORD PTR [eax],edx
c002796c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027970:	83 ec 0c             	sub    esp,0xc
c0027973:	50                   	push   eax
c0027974:	e8 e7 bb fe ff       	call   c0013560 <Bus::~Bus()>
c0027979:	83 c4 10             	add    esp,0x10
c002797c:	90                   	nop
c002797d:	83 c4 0c             	add    esp,0xc
c0027980:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027982 <PCI::~PCI()>:
c0027982:	83 ec 0c             	sub    esp,0xc
c0027985:	83 ec 0c             	sub    esp,0xc
c0027988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002798c:	e8 cd ff ff ff       	call   c002795e <PCI::~PCI()>
c0027991:	83 c4 10             	add    esp,0x10
c0027994:	83 ec 08             	sub    esp,0x8
c0027997:	68 58 01 00 00       	push   0x158
c002799c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279a0:	e8 0a ae fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c00279a5:	83 c4 10             	add    esp,0x10
c00279a8:	83 c4 0c             	add    esp,0xc
c00279ab:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00279ac <IDE::~IDE()>:
c00279ac:	83 ec 0c             	sub    esp,0xc
c00279af:	ba c0 b5 02 c0       	mov    edx,0xc002b5c0
c00279b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279b8:	89 10                	mov    DWORD PTR [eax],edx
c00279ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279be:	83 ec 0c             	sub    esp,0xc
c00279c1:	50                   	push   eax
c00279c2:	e8 b1 c6 fe ff       	call   c0014078 <HardDiskController::~HardDiskController()>
c00279c7:	83 c4 10             	add    esp,0x10
c00279ca:	90                   	nop
c00279cb:	83 c4 0c             	add    esp,0xc
c00279ce:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00279d0 <IDE::~IDE()>:
c00279d0:	83 ec 0c             	sub    esp,0xc
c00279d3:	83 ec 0c             	sub    esp,0xc
c00279d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279da:	e8 cd ff ff ff       	call   c00279ac <IDE::~IDE()>
c00279df:	83 c4 10             	add    esp,0x10
c00279e2:	83 ec 08             	sub    esp,0x8
c00279e5:	68 70 02 00 00       	push   0x270
c00279ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ee:	e8 bc ad fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c00279f3:	83 c4 10             	add    esp,0x10
c00279f6:	83 c4 0c             	add    esp,0xc
c00279f9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00279fa <SATABus::~SATABus()>:
c00279fa:	83 ec 0c             	sub    esp,0xc
c00279fd:	ba a0 b6 02 c0       	mov    edx,0xc002b6a0
c0027a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a06:	89 10                	mov    DWORD PTR [eax],edx
c0027a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a0c:	83 ec 0c             	sub    esp,0xc
c0027a0f:	50                   	push   eax
c0027a10:	e8 63 c6 fe ff       	call   c0014078 <HardDiskController::~HardDiskController()>
c0027a15:	83 c4 10             	add    esp,0x10
c0027a18:	90                   	nop
c0027a19:	83 c4 0c             	add    esp,0xc
c0027a1c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027a1e <SATABus::~SATABus()>:
c0027a1e:	83 ec 0c             	sub    esp,0xc
c0027a21:	83 ec 0c             	sub    esp,0xc
c0027a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a28:	e8 cd ff ff ff       	call   c00279fa <SATABus::~SATABus()>
c0027a2d:	83 c4 10             	add    esp,0x10
c0027a30:	83 ec 08             	sub    esp,0x8
c0027a33:	68 64 01 00 00       	push   0x164
c0027a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a3c:	e8 6e ad fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027a41:	83 c4 10             	add    esp,0x10
c0027a44:	83 c4 0c             	add    esp,0xc
c0027a47:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027a48 <ATA::~ATA()>:
c0027a48:	83 ec 0c             	sub    esp,0xc
c0027a4b:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0027a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a54:	89 10                	mov    DWORD PTR [eax],edx
c0027a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a5a:	83 ec 0c             	sub    esp,0xc
c0027a5d:	50                   	push   eax
c0027a5e:	e8 f3 c6 fe ff       	call   c0014156 <PhysicalDisk::~PhysicalDisk()>
c0027a63:	83 c4 10             	add    esp,0x10
c0027a66:	90                   	nop
c0027a67:	83 c4 0c             	add    esp,0xc
c0027a6a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027a6c <ATA::~ATA()>:
c0027a6c:	83 ec 0c             	sub    esp,0xc
c0027a6f:	83 ec 0c             	sub    esp,0xc
c0027a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a76:	e8 cd ff ff ff       	call   c0027a48 <ATA::~ATA()>
c0027a7b:	83 c4 10             	add    esp,0x10
c0027a7e:	83 ec 08             	sub    esp,0x8
c0027a81:	68 7c 01 00 00       	push   0x17c
c0027a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a8a:	e8 20 ad fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027a8f:	83 c4 10             	add    esp,0x10
c0027a92:	83 c4 0c             	add    esp,0xc
c0027a95:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027a96 <ATAPI::~ATAPI()>:
c0027a96:	83 ec 0c             	sub    esp,0xc
c0027a99:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0027a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aa2:	89 10                	mov    DWORD PTR [eax],edx
c0027aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aa8:	83 ec 0c             	sub    esp,0xc
c0027aab:	50                   	push   eax
c0027aac:	e8 a5 c6 fe ff       	call   c0014156 <PhysicalDisk::~PhysicalDisk()>
c0027ab1:	83 c4 10             	add    esp,0x10
c0027ab4:	90                   	nop
c0027ab5:	83 c4 0c             	add    esp,0xc
c0027ab8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027aba <ATAPI::~ATAPI()>:
c0027aba:	83 ec 0c             	sub    esp,0xc
c0027abd:	83 ec 0c             	sub    esp,0xc
c0027ac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ac4:	e8 cd ff ff ff       	call   c0027a96 <ATAPI::~ATAPI()>
c0027ac9:	83 c4 10             	add    esp,0x10
c0027acc:	83 ec 08             	sub    esp,0x8
c0027acf:	68 80 01 00 00       	push   0x180
c0027ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ad8:	e8 d2 ac fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027add:	83 c4 10             	add    esp,0x10
c0027ae0:	83 c4 0c             	add    esp,0xc
c0027ae3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027ae4 <SATA::~SATA()>:
c0027ae4:	83 ec 0c             	sub    esp,0xc
c0027ae7:	ba 70 b8 02 c0       	mov    edx,0xc002b870
c0027aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027af0:	89 10                	mov    DWORD PTR [eax],edx
c0027af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027af6:	83 ec 0c             	sub    esp,0xc
c0027af9:	50                   	push   eax
c0027afa:	e8 57 c6 fe ff       	call   c0014156 <PhysicalDisk::~PhysicalDisk()>
c0027aff:	83 c4 10             	add    esp,0x10
c0027b02:	90                   	nop
c0027b03:	83 c4 0c             	add    esp,0xc
c0027b06:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027b08 <SATA::~SATA()>:
c0027b08:	83 ec 0c             	sub    esp,0xc
c0027b0b:	83 ec 0c             	sub    esp,0xc
c0027b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b12:	e8 cd ff ff ff       	call   c0027ae4 <SATA::~SATA()>
c0027b17:	83 c4 10             	add    esp,0x10
c0027b1a:	83 ec 08             	sub    esp,0x8
c0027b1d:	68 74 01 00 00       	push   0x174
c0027b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b26:	e8 84 ac fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027b2b:	83 c4 10             	add    esp,0x10
c0027b2e:	83 c4 0c             	add    esp,0xc
c0027b31:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027b32 <AVX::~AVX()>:
c0027b32:	83 ec 0c             	sub    esp,0xc
c0027b35:	ba ac b8 02 c0       	mov    edx,0xc002b8ac
c0027b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b3e:	89 10                	mov    DWORD PTR [eax],edx
c0027b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b44:	83 ec 0c             	sub    esp,0xc
c0027b47:	50                   	push   eax
c0027b48:	e8 8d c6 fe ff       	call   c00141da <FPU::~FPU()>
c0027b4d:	83 c4 10             	add    esp,0x10
c0027b50:	90                   	nop
c0027b51:	83 c4 0c             	add    esp,0xc
c0027b54:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027b56 <AVX::~AVX()>:
c0027b56:	83 ec 0c             	sub    esp,0xc
c0027b59:	83 ec 0c             	sub    esp,0xc
c0027b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b60:	e8 cd ff ff ff       	call   c0027b32 <AVX::~AVX()>
c0027b65:	83 c4 10             	add    esp,0x10
c0027b68:	83 ec 08             	sub    esp,0x8
c0027b6b:	68 58 01 00 00       	push   0x158
c0027b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b74:	e8 36 ac fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027b79:	83 c4 10             	add    esp,0x10
c0027b7c:	83 c4 0c             	add    esp,0xc
c0027b7f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027b80 <MMX::~MMX()>:
c0027b80:	83 ec 0c             	sub    esp,0xc
c0027b83:	ba ec b8 02 c0       	mov    edx,0xc002b8ec
c0027b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b8c:	89 10                	mov    DWORD PTR [eax],edx
c0027b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b92:	83 ec 0c             	sub    esp,0xc
c0027b95:	50                   	push   eax
c0027b96:	e8 3f c6 fe ff       	call   c00141da <FPU::~FPU()>
c0027b9b:	83 c4 10             	add    esp,0x10
c0027b9e:	90                   	nop
c0027b9f:	83 c4 0c             	add    esp,0xc
c0027ba2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027ba4 <MMX::~MMX()>:
c0027ba4:	83 ec 0c             	sub    esp,0xc
c0027ba7:	83 ec 0c             	sub    esp,0xc
c0027baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bae:	e8 cd ff ff ff       	call   c0027b80 <MMX::~MMX()>
c0027bb3:	83 c4 10             	add    esp,0x10
c0027bb6:	83 ec 08             	sub    esp,0x8
c0027bb9:	68 58 01 00 00       	push   0x158
c0027bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bc2:	e8 e8 ab fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027bc7:	83 c4 10             	add    esp,0x10
c0027bca:	83 c4 0c             	add    esp,0xc
c0027bcd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027bce <SSE::~SSE()>:
c0027bce:	83 ec 0c             	sub    esp,0xc
c0027bd1:	ba 2c b9 02 c0       	mov    edx,0xc002b92c
c0027bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bda:	89 10                	mov    DWORD PTR [eax],edx
c0027bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027be0:	83 ec 0c             	sub    esp,0xc
c0027be3:	50                   	push   eax
c0027be4:	e8 f1 c5 fe ff       	call   c00141da <FPU::~FPU()>
c0027be9:	83 c4 10             	add    esp,0x10
c0027bec:	90                   	nop
c0027bed:	83 c4 0c             	add    esp,0xc
c0027bf0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027bf2 <SSE::~SSE()>:
c0027bf2:	83 ec 0c             	sub    esp,0xc
c0027bf5:	83 ec 0c             	sub    esp,0xc
c0027bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bfc:	e8 cd ff ff ff       	call   c0027bce <SSE::~SSE()>
c0027c01:	83 c4 10             	add    esp,0x10
c0027c04:	83 ec 08             	sub    esp,0x8
c0027c07:	68 58 01 00 00       	push   0x158
c0027c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c10:	e8 9a ab fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027c15:	83 c4 10             	add    esp,0x10
c0027c18:	83 c4 0c             	add    esp,0xc
c0027c1b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027c1c <x87::~x87()>:
c0027c1c:	83 ec 0c             	sub    esp,0xc
c0027c1f:	ba 6c b9 02 c0       	mov    edx,0xc002b96c
c0027c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c28:	89 10                	mov    DWORD PTR [eax],edx
c0027c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c2e:	83 ec 0c             	sub    esp,0xc
c0027c31:	50                   	push   eax
c0027c32:	e8 a3 c5 fe ff       	call   c00141da <FPU::~FPU()>
c0027c37:	83 c4 10             	add    esp,0x10
c0027c3a:	90                   	nop
c0027c3b:	83 c4 0c             	add    esp,0xc
c0027c3e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027c40 <x87::~x87()>:
c0027c40:	83 ec 0c             	sub    esp,0xc
c0027c43:	83 ec 0c             	sub    esp,0xc
c0027c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c4a:	e8 cd ff ff ff       	call   c0027c1c <x87::~x87()>
c0027c4f:	83 c4 10             	add    esp,0x10
c0027c52:	83 ec 08             	sub    esp,0x8
c0027c55:	68 58 01 00 00       	push   0x158
c0027c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c5e:	e8 4c ab fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027c63:	83 c4 10             	add    esp,0x10
c0027c66:	83 c4 0c             	add    esp,0xc
c0027c69:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027c6a <IOAPIC::~IOAPIC()>:
c0027c6a:	83 ec 0c             	sub    esp,0xc
c0027c6d:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c0027c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c76:	89 10                	mov    DWORD PTR [eax],edx
c0027c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c7c:	83 ec 0c             	sub    esp,0xc
c0027c7f:	50                   	push   eax
c0027c80:	e8 03 bf fe ff       	call   c0013b88 <Device::~Device()>
c0027c85:	83 c4 10             	add    esp,0x10
c0027c88:	90                   	nop
c0027c89:	83 c4 0c             	add    esp,0xc
c0027c8c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027c8e <IOAPIC::~IOAPIC()>:
c0027c8e:	83 ec 0c             	sub    esp,0xc
c0027c91:	83 ec 0c             	sub    esp,0xc
c0027c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c98:	e8 cd ff ff ff       	call   c0027c6a <IOAPIC::~IOAPIC()>
c0027c9d:	83 c4 10             	add    esp,0x10
c0027ca0:	83 ec 08             	sub    esp,0x8
c0027ca3:	68 68 01 00 00       	push   0x168
c0027ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cac:	e8 fe aa fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027cb1:	83 c4 10             	add    esp,0x10
c0027cb4:	83 c4 0c             	add    esp,0xc
c0027cb7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027cb8 <APIC::~APIC()>:
c0027cb8:	83 ec 0c             	sub    esp,0xc
c0027cbb:	ba 7c ba 02 c0       	mov    edx,0xc002ba7c
c0027cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc4:	89 10                	mov    DWORD PTR [eax],edx
c0027cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cca:	83 ec 0c             	sub    esp,0xc
c0027ccd:	50                   	push   eax
c0027cce:	e8 d1 c9 fe ff       	call   c00146a4 <InterruptController::~InterruptController()>
c0027cd3:	83 c4 10             	add    esp,0x10
c0027cd6:	90                   	nop
c0027cd7:	83 c4 0c             	add    esp,0xc
c0027cda:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027cdc <APIC::~APIC()>:
c0027cdc:	83 ec 0c             	sub    esp,0xc
c0027cdf:	83 ec 0c             	sub    esp,0xc
c0027ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ce6:	e8 cd ff ff ff       	call   c0027cb8 <APIC::~APIC()>
c0027ceb:	83 c4 10             	add    esp,0x10
c0027cee:	83 ec 08             	sub    esp,0x8
c0027cf1:	68 58 21 00 00       	push   0x2158
c0027cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cfa:	e8 b0 aa fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027cff:	83 c4 10             	add    esp,0x10
c0027d02:	83 c4 0c             	add    esp,0xc
c0027d05:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027d06 <PIC::~PIC()>:
c0027d06:	83 ec 0c             	sub    esp,0xc
c0027d09:	ba 14 bb 02 c0       	mov    edx,0xc002bb14
c0027d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d12:	89 10                	mov    DWORD PTR [eax],edx
c0027d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d18:	83 ec 0c             	sub    esp,0xc
c0027d1b:	50                   	push   eax
c0027d1c:	e8 83 c9 fe ff       	call   c00146a4 <InterruptController::~InterruptController()>
c0027d21:	83 c4 10             	add    esp,0x10
c0027d24:	90                   	nop
c0027d25:	83 c4 0c             	add    esp,0xc
c0027d28:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027d2a <PIC::~PIC()>:
c0027d2a:	83 ec 0c             	sub    esp,0xc
c0027d2d:	83 ec 0c             	sub    esp,0xc
c0027d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d34:	e8 cd ff ff ff       	call   c0027d06 <PIC::~PIC()>
c0027d39:	83 c4 10             	add    esp,0x10
c0027d3c:	83 ec 08             	sub    esp,0x8
c0027d3f:	68 58 21 00 00       	push   0x2158
c0027d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d48:	e8 62 aa fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027d4d:	83 c4 10             	add    esp,0x10
c0027d50:	83 c4 0c             	add    esp,0xc
c0027d53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027d54 <APICTimer::~APICTimer()>:
c0027d54:	83 ec 0c             	sub    esp,0xc
c0027d57:	ba 68 bb 02 c0       	mov    edx,0xc002bb68
c0027d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d60:	89 10                	mov    DWORD PTR [eax],edx
c0027d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d66:	83 ec 0c             	sub    esp,0xc
c0027d69:	50                   	push   eax
c0027d6a:	e8 35 e7 fe ff       	call   c00164a4 <Timer::~Timer()>
c0027d6f:	83 c4 10             	add    esp,0x10
c0027d72:	90                   	nop
c0027d73:	83 c4 0c             	add    esp,0xc
c0027d76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027d78 <APICTimer::~APICTimer()>:
c0027d78:	83 ec 0c             	sub    esp,0xc
c0027d7b:	83 ec 0c             	sub    esp,0xc
c0027d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d82:	e8 cd ff ff ff       	call   c0027d54 <APICTimer::~APICTimer()>
c0027d87:	83 c4 10             	add    esp,0x10
c0027d8a:	83 ec 08             	sub    esp,0x8
c0027d8d:	68 60 01 00 00       	push   0x160
c0027d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d96:	e8 14 aa fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027d9b:	83 c4 10             	add    esp,0x10
c0027d9e:	83 c4 0c             	add    esp,0xc
c0027da1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027da2 <PIT::~PIT()>:
c0027da2:	83 ec 0c             	sub    esp,0xc
c0027da5:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c0027daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dae:	89 10                	mov    DWORD PTR [eax],edx
c0027db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db4:	83 ec 0c             	sub    esp,0xc
c0027db7:	50                   	push   eax
c0027db8:	e8 e7 e6 fe ff       	call   c00164a4 <Timer::~Timer()>
c0027dbd:	83 c4 10             	add    esp,0x10
c0027dc0:	90                   	nop
c0027dc1:	83 c4 0c             	add    esp,0xc
c0027dc4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027dc6 <PIT::~PIT()>:
c0027dc6:	83 ec 0c             	sub    esp,0xc
c0027dc9:	83 ec 0c             	sub    esp,0xc
c0027dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dd0:	e8 cd ff ff ff       	call   c0027da2 <PIT::~PIT()>
c0027dd5:	83 c4 10             	add    esp,0x10
c0027dd8:	83 ec 08             	sub    esp,0x8
c0027ddb:	68 5c 01 00 00       	push   0x15c
c0027de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027de4:	e8 c6 a9 fe ff       	call   c00127af <operator delete(void*, unsigned long)>
c0027de9:	83 c4 10             	add    esp,0x10
c0027dec:	83 c4 0c             	add    esp,0xc
c0027def:	c3                   	ret    
